Перем ЭтоЮрЛицо;
Перем УСН;
Перем ЕстьРозничнаяТорговля;
Перем ЕстьПроизводственнаяДеятельность;
Перем ПрименяемыеСистемыНалогообложения;
Перем ДатаОкончанияДействия;

Процедура УстановкаПараметровУчетнойПолитикиПоУмолчанию() 
	
	// ОС и НМА
	МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	
	// УСН8
	СистемаНалогообложения = ?(ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения, Перечисления.СистемыНалогообложения.Упрощенная, Перечисления.СистемыНалогообложения.Общая);
	СпособОценкиМПЗ = ?(СистемаНалогообложения =  Перечисления.СистемыНалогообложения.Общая, Перечисления.СпособыОценки.ПоСредней, Перечисления.СпособыОценки.ФИФО);
	СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	ДиректКостинг = Ложь;
	ПоддержкаПБУ18 = ?(ЗначениеЗаполнено(Организация),(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо), Истина);
	
	// Производство
	СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.БезИспользованияСчета40;
	СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоВыручке;
	ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенам;
	ПрямыеРасходыБезВыпускаВключатьВНЗП = Истина;
	
	ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете = Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.НаСчетахРасходовНаОплатуТруда;
	ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии;
	БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализации;
	
	// УСН8
	СпособОценкиМПЗНУ = ?(СистемаНалогообложения =  Перечисления.СистемыНалогообложения.Общая, Перечисления.СпособыОценки.ПоСредней, Перечисления.СпособыОценки.ФИФО);
	ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	
	ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику;
	ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации;
	
	// НДС
	СложныйУчетНДС = Ложь;
	СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	
	ОсобенностиИсчисленияНДФЛ	= Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
	ОрганизацияВедетПроизводственнуюДеятельность = ЕстьПроизводственнаяДеятельность;
	
	// {УчетДоходовИРасходовИП
	ДляПризнанияРасходовНеТребуетсяПолучениеДохода = Истина;
	// }УчетДоходовИРасходовИП
	
	УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод();
	
КонецПроцедуры

Процедура УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод()
	
	Если Период < '20060101' Тогда
		НачислятьНДСПоОтгрузке = Ложь;
	КонецЕсли;
	
	Если Период >= '20111001' Тогда
		УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Ложь;
	ИначеЕсли Период >= '20070101' Тогда
		УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Истина;
	КонецЕсли;
	
	Если Период >= '20090101' Тогда
		ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость;
		ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода;
		ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику;
		ПолучитьПараметрыРасходовУСН();
	КонецЕсли;
	
	//Страховые взносы
	Если Период >= '20100101' Тогда
		Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим;
		Иначе
			ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если Период >= '20110101' Тогда
		ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость;
		ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации;
		ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику;
		ПолучитьПараметрыРасходовУСН();
	КонецЕсли;
	
    НачислятьНДСПриПередачеНедвижимости = (Период >= '20110101000000');

КонецПроцедуры

Процедура УстановитьТекстОНеобходимостиФИФО()

	Если УСН И ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
		
		ТекстОНеобходимостиФИФО = 
			"При применении упрощенной системы налогообложения 
			|с объектом налогообложения ""Доходы минус расходы""
    		|оценка стоимости МПЗ при выбытии возможна только методом ФИФО.";
		
	ИначеЕсли НЕ ЭтоЮрЛицо И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
		ТекстОНеобходимостиФИФО = 
			"При применении индивидуальным предпринимателем
			|общей системы налогообложения 
    		|оценка стоимости МПЗ при выбытии возможна только методом ФИФО.";
		
	Иначе
		ТекстОНеобходимостиФИФО = "";
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	
	ЕстьРозничнаяТорговля = Константы.ЕстьРозничнаяТорговля.Получить();
	ЕстьПроизводственнаяДеятельность = Константы.ЕстьПроизводственнаяДеятельность.Получить();
	ПрименяемыеСистемыНалогообложения = Константы.ПрименяемыеСистемыНалогообложения.Получить();
		
	// Проверка ведения однофирменности
	Если (НЕ Выбран()) И (ПараметрОбъектКопирования = Неопределено) Тогда
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда // если заполнена - значит это был переход по кнопке перейти.
			Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Организация) Тогда
			
			Предупреждение("Для обособленного подразделения используется учетная политика головной организации");
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			
		КонецЕсли;
		
		УстановкаПараметровУчетнойПолитикиПоУмолчанию();
	КонецЕсли;
	
	УСН = (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	ПолучитьПараметрыРасходовУСН();
	УСНПриИзменении();
	ЕНВДПриИзменении();
	
	// {УчетДоходовИРасходовИП
	ПроверитьНастройкиКонфигурацииИП();
	// }УчетДоходовИРасходовИП
	
	УстановитьТекстОНеобходимостиФИФО();
	УстановитьВидимость();
	
	ОграничитьСписокВыбораВидаТарифаСтраховыхВзносов();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	УстановитьПараметрыРасходовУСН();

	Отказ = ПроверитьЗаполнениеПередЗаписью();
	Отказ = (Отказ) или ПроверитьАналитикуПередЗаписью();
	
	Если Не Отказ И ЭтаФорма.Модифицированность Тогда	
		
		ДатаНач = НачалоДня(Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = 	
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОбороты.Счет) КАК Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		Если Не Результат.Счет = 0 Тогда
			
			Сообщить("Изменены параметры учетной политики.
			|Рекомендуется перепровести документы организациии """ + Организация.ПолноеНаименование() + """ за период: " + ПредставлениеПериода(ДатаНач, ДатаКон, "ФП = Истина") + "
			|(меню ""Сервис - Групповое проведение документов"")");
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПередЗаписью()
	
	СписокОбязательныхПолей = Новый СписокЗначений;
	
	СписокОбязательныхПолей.Добавить(Организация, "Не указана организация");		
	СписокОбязательныхПолей.Добавить(Период, "Не указана дата начала действия учетной политики");		
	СписокОбязательныхПолей.Добавить(СистемаНалогообложения, "Не указана система налогообложения");	
	
	СписокОбязательныхПолей.Добавить(СпособОценкиМПЗ, "На закладке ""Запасы"" не указан способ оценки МПЗ");		
	СписокОбязательныхПолей.Добавить(СпособОценкиТоваровВРознице, "На закладке ""Запасы"" не указан способ оценки товаров в рознице");		
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая И ЭтоЮрЛицо Тогда
		СписокОбязательныхПолей.Добавить(ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, "На закладке ""Налог на прибыль"" не указан порядок учета расходов по налогам с ФОТ");
		СписокОбязательныхПолей.Добавить(ВариантУчетаРасходовПоАмортизационнойПремии, "На закладке ""Налог на прибыль"" не указан порядок учета расходов по амортизационной премии");
		
	// {УчетДоходовИРасходовИП
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая И НЕ ЭтоЮрЛицо Тогда
		СписокОбязательныхПолей.Добавить(ОсновнойХарактерДеятельности, "На закладке ""Предприниматель"" не указан основной характер деятельности");		
		СписокОбязательныхПолей.Добавить(ОсновнаяНоменклатурнаяГруппа, "На закладке ""Предприниматель"" не указана основная номенклатурная группа");
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		СписокОбязательныхПолей.Добавить(ОбъектНалогообложенияУСН, "На закладке ""УСН"" не указан объект налогообложения");		
	КонецЕсли;
	
	Если ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		
		Если УСН Тогда
			СписокОбязательныхПолей.Добавить( МетодРаспределенияРасходовУСНПоВидамДеятельности, "На закладке ""ЕНВД"" не указан метод распределения расходов по видам деятельности");	
			СписокОбязательныхПолей.Добавить(БазаРаспределенияРасходовУСНПоВидамДеятельности, "На закладке ""ЕНВД"" не указана база распределения расходов по видам деятельности");		
			
		Иначе
			СписокОбязательныхПолей.Добавить(БазаРаспределенияКосвенныхРасходовПоВидамДеятельности, "На закладке ""ЕНВД"" не указан метод распределения расходов по видам деятельности");	
			СписокОбязательныхПолей.Добавить(БазаРаспределенияКосвенныхРасходовПоВидамДеятельности, "На закладке ""ЕНВД"" не указана база распределения расходов по видам деятельности");		
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОбязательныхПолей.Добавить(ОсобенностиИсчисленияНДФЛ, "На закладке ""НДФЛ"" не указан порядок применения стандартных вычетов");		
	
	Если (Год(Период) >= 2010) Тогда
		СписокОбязательныхПолей.Добавить(ВидТарифаСтраховыхВзносов, "На закладке ""Страховые взносы"" не указан вид тарифа страховых взносов");		
	КонецЕсли;
	
	ЕстьНеЗаполненные = Ложь;
	
	Для Каждого Строка ИЗ СписокОбязательныхПолей Цикл
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Строка);
			ЕстьНеЗаполненные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНеЗаполненные;
	
КонецФункции
	
Процедура ОбновлениеОтображения()
	
	ДатаОкончанияДействия = РаботаСДиалогами.НайтиДатуОкончанияДействия(ЭлементыФормы.Период.Значение, ЭлементыФормы.Организация.Значение);
	ЭлементыФормы.НадписьОкончанияДействия.Заголовок = Формат(ДатаОкончанияДействия, "ДФ=дд.ММ.гггг");
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Оповестить("ИзменениеУчетнойПолитики");

КонецПроцедуры

// Общие

Процедура ПроверкаМетодаФИФО()
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяФИФО = (УСН И ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
		ИЛИ (НЕ ЭтоЮрЛицо И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая);
	
	Если ТребуетсяФИФО Тогда
		Предупреждение(ТекстОНеобходимостиФИФО);
		СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ТребуетсяФИФО = (УСН И ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
		ИЛИ (НЕ ЭтоЮрЛицо И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая);
	
	ЭлементыФормы.СпособОценкиМПЗ1.Доступность = НЕ ТребуетсяФИФО;
	ЭлементыФормы.УсловиеСпособаОценкиМПЗ.Заголовок = ТекстОНеобходимостиФИФО;
	
	Если (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		ЭлементыФормы.НадписьПодсказка1.Заголовок = "Уплата НДФЛ с доходов от предпринимательской деятельности";		
	Иначе
		ЭлементыФормы.НадписьПодсказка1.Заголовок = "Организация является плательщиком налога на прибыль";		
	КонецЕсли;
	
	УстановкаВидимостиПроизводства();
	УстановкаВидимостиРозницы();
	УстановкаВидимостиВстречногоВыпуска();
	УстановкаВидимостиПорядкаПеределов();
	УстановкаВидимостиМетодаПеределов();	
	УстановкаВидимостиЗакладокНалогов();
	УстановкаВидимостиПараметровЕНВД();
	УстановкаВидимостиПараметровНДС();
	УстановкаВидимостиПараметровФСС();
	УстановкаВидимостиПараметровСтраховыхВзносов();
	
	ЭлементыФормы.ОрганизацияВедетРозничнуюТорговлю.Видимость = ЕстьРозничнаяТорговля;
	Если ЕстьРозничнаяТорговля Тогда
		ЭлементыФормы.ИнфоНадписьРозница.Заголовок = "Организация ведет деятельность, связанную с розничной торговлей";
	Иначе
		ЭлементыФормы.ИнфоНадписьРозница.Заголовок = "Розничная торговля отключена в настройке параметров учета (меню ""Предприятие"" - ""Настройка параметров учета"")";
	КонецЕсли;
	
	ЭлементыФормы.ОрганизацияВедетПроизводственнуюДеятельность.Видимость = ЕстьПроизводственнаяДеятельность;
	Если ЕстьПроизводственнаяДеятельность Тогда
		ЭлементыФормы.ИнфоНадписьПроизводство.Заголовок = "Организация ведет деятельность, связанную с производством продукции и (или) выполнением работ, оказанием услуг";
	Иначе
		ЭлементыФормы.ИнфоНадписьПроизводство.Заголовок = "Производственная деятельность отключена в настройке параметров учета (меню ""Предприятие"" - ""Настройка параметров учета"")";
	КонецЕсли;
			
	Если ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения
		ИЛИ ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя Тогда
		
		ЭлементыФормы.ПанельСистемаНалогообложения.ТекущаяСтраница = ЭлементыФормы.ПанельСистемаНалогообложения.Страницы.ОднаСистемаНалогообложения;
		Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ЭлементыФормы.НадписьПодсказка4.Заголовок = "Упрощенная";
			Если (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ЭлементыФормы.НадписьПодсказка3.Заголовок = "Индивидуальный предприниматель - плательщик единого налога, уплачиваемого при применении упрощенной системы налогообложения (УСН)";		
			Иначе
				ЭлементыФормы.НадписьПодсказка3.Заголовок = "Организация - плательщик единого налога, уплачиваемого при применении упрощенной системы налогообложения (УСН)";		
			КонецЕсли;
		ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ЭлементыФормы.НадписьПодсказка4.Заголовок = "Общая";
			Если (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ЭлементыФормы.НадписьПодсказка3.Заголовок = "Индивидуальный предприниматель, уплачивающий НДФЛ с доходов от предпринимательской деятельности";		
			Иначе
				ЭлементыФормы.НадписьПодсказка3.Заголовок = "Организация - плательщик налога на прибыль";		
			КонецЕсли;
		КонецЕсли;
		Если (ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения 
			И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)
			ИЛИ (ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя
			И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
			
			ЭлементыФормы.НадписьПодсказка5.Заголовок = "Система налогообложения задана в настройке параметров учета (меню ""Предприятие"" - ""Настройка параметров учета"")";			
		Иначе
			ЭлементыФормы.НадписьПодсказка5.Заголовок = "Система налогообложения не соответствует текущей настройке параметров учета (меню ""Предприятие"" - ""Настройка параметров учета"")";
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельСистемаНалогообложения.ТекущаяСтраница = ЭлементыФормы.ПанельСистемаНалогообложения.Страницы.ВсеСистемыНалогообложения;
	КонецЕсли;
		
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ОСиНМА.Видимость = (ЭтоЮрЛицо И НЕ УСН);
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ДоходыРасходы.Видимость = УСН И ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	
	// {УчетДоходовИРасходовИП
	УстановкаВидимостиПараметровИП();
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура ПроверитьНастройкиКонфигурацииИП()
	
	Если НЕ ЭтоЮрЛицо И НЕ УСН Тогда
		
		// Проверка ведения партионного учета
		Сч41 = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
		ПартионныйУчет = ?(Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
		
		Сч60 = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками.ПолучитьОбъект();
		УчетПоРасчетнымДокументам = ?(Сч60.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено, Ложь, Истина);

		Если НЕ ПартионныйУчет ИЛИ НЕ УчетПоРасчетнымДокументам Тогда
			
			Если НЕ ПартионныйУчет И НЕ УчетПоРасчетнымДокументам Тогда
				ТекстСообщения = " партионный учет МПЗ и аналитический учет расчетов с контрагентами в бухгалтерском учете.";
				
			ИначеЕсли НЕ ПартионныйУчет И УчетПоРасчетнымДокументам Тогда
				ТекстСообщения = " партионный учет МПЗ в бухгалтерском учете.";
				
			Иначе // Если ПартионныйУчет И НЕ УчетПоРасчетнымДокументам Тогда
				ТекстСообщения = " аналитический учет расчетов с контрагентами в бухгалтерском учете.";
			КонецЕсли;
			
			Ответ = Вопрос("Текущая настройка параметров учета не соответствует требованиям налогового учета предпринимателей, использующих общую систему налогообложения. Для продолжения работы необходимо настроить" +  ТекстСообщения + "
							|
			                |Настроить параметры учета автоматически?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если НЕ ПартионныйУчет Тогда
					СкладскойУчет = НЕ (Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
					СуммовойУчет = ?(СкладскойУчет, Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой, Ложь);
					ОбщегоНазначения.ПрименитьПараметрыАналитикиМПЗ(Истина, СкладскойУчет, СуммовойУчет,);
				КонецЕсли;
				
				Если НЕ УчетПоРасчетнымДокументам Тогда
					ОбщегоНазначения.ПрименитьПараметрыАналитикиРасчетов(Истина,);
				КонецЕсли;
				
			Иначе
				Организация = Неопределено;
				ЭтоЮрЛицо = Истина;
				УстановитьВидимость();
				Сообщить("Текущая настройка конфигурации не соответствует требованиям налогового учета предпринимателей, использующих общую систему налогообложения.", СтатусСообщения.Внимание);
				Сообщить("Поле ""Организация"" очищено.", СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СпособОценкиМПЗ <> Перечисления.СпособыОценки.ФИФО Тогда
			СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

Функция ПроверитьАналитикуПередЗаписью()
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		
		// Проверка ведения партионного учета
		Сч41 = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
		ПартионныйУчет = ?(Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
		
		Сч60 = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками.ПолучитьОбъект();
		УчетПоРасчетнымДокументам = ?(Сч60.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено, Ложь, Истина);

		Если НЕ ПартионныйУчет ИЛИ НЕ УчетПоРасчетнымДокументам Тогда
			
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				
				Предупреждение("Для указанных параметров учетной политики необходимо включаение дополнительных разрезов аналитического учета.
								|Недостаточно прав для изменения разрезов аналитического учета. Учетная политика не может быть записана!");
								
				Возврат Истина;
				
			КонецЕсли;
			
			Если НЕ ПартионныйУчет Тогда
				ТекстСообщения = " партионный учет МПЗ.";
			КонецЕсли;			
			Ответ = Вопрос("Для указанных параметров учетной политики необходимо включить дополнительные разрезы аналитического учета.", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "");

			Если Ответ = КодВозвратаДиалога.ОК Тогда
				Если НЕ ПартионныйУчет Тогда
					СкладскойУчет = НЕ (Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
					СуммовойУчет = ?(СкладскойУчет, Сч41.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой, Ложь);
					ОбщегоНазначения.ПрименитьПараметрыАналитикиМПЗ(Истина, СкладскойУчет, СуммовойУчет,);
				КонецЕсли;
				
				Если НЕ УчетПоРасчетнымДокументам Тогда
					ОбщегоНазначения.ПрименитьПараметрыАналитикиРасчетов(Истина,);
				КонецЕсли;
				
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПериодПриИзменении(Элемент)
	
	УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод();
	
	ПроверитьУстановкуПараметровСтраховыхВзносов();
	УстановитьВидимость();
	ДатаОкончанияДействия = РаботаСДиалогами.НайтиДатуОкончанияДействия(Элемент.Значение, Организация);
	ЭлементыФормы.НадписьОкончанияДействия.Заголовок = Формат(ДатаОкончанияДействия, "ДФ=дд.ММ.гггг");
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Организация) Тогда
		
		Предупреждение("Для обособленного подразделения используется учетная политика головной организации");
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	УстановитьТекстОНеобходимостиФИФО();
	ПроверкаМетодаФИФО();
	УстановитьВидимость();
	
	// {УчетДоходовИРасходовИП
	ПроверитьНастройкиКонфигурацииИП();
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

Процедура СистемыНалогообложенияПриИзменении(Элемент)
		
	УСН = (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	УСНПриИзменении();
	ПроверитьУстановкуПараметровСтраховыхВзносов();
	
	УстановитьТекстОНеобходимостиФИФО();
	ПроверкаМетодаФИФО();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановкаВидимостиЗакладокНалогов()
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.НалогНаПрибыль.Видимость  	= Не УСН И ЭтоЮрЛицо;
	ЭлементыФормы.ПоддержкаПБУ18.Видимость                  				= Не УСН И ЭтоЮрЛицо;
	ЭлементыФормы.ПодНадписьПБУ18.Видимость					                = Не УСН И ЭтоЮрЛицо;
	// {УчетДоходовИРасходовИП
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.Предприниматель.Видимость 	= Не УСН И Не ЭтоЮрЛицо;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ДоходыРасходыИП.Видимость 	= Не УСН И Не ЭтоЮрЛицо;
	// }УчетДоходовИРасходовИП
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.УСН.Видимость             	= УСН;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ДоходыРасходы.Видимость	= УСН;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ЕНВД.Видимость            	= ОрганизацияЯвляетсяПлательщикомЕНВД;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.НДС.Видимость             	= Не УСН;
	
КонецПроцедуры

// Запасы

Процедура СпособОценкиМПЗПриИзменении(Элемент)
	
	УстановкаВидимостиВстречногоВыпуска()
	
КонецПроцедуры

// Производство

Процедура УстановкаВидимостиПроизводства();
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.Производство.Видимость = ОрганизацияВедетПроизводственнуюДеятельность;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ВыпускГП.Видимость = ОрганизацияВедетПроизводственнуюДеятельность;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.НЗП.Видимость = ОрганизацияВедетПроизводственнуюДеятельность;
	
	Если ОрганизацияВедетПроизводственнуюДеятельность Тогда
		ЭлементыФормы.Панель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		УстановкаНадписиПорядокРаспределенияРасходовНаОказаниеУслуг();
	Иначе
		ЭлементыФормы.Панель1.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;

КонецПроцедуры

Процедура УстановкаВидимостиРозницы()
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.Розница.Видимость = ОрганизацияВедетРозничнуюТорговлю;

КонецПроцедуры

Процедура УстановкаНадписиПорядокРаспределенияРасходовНаОказаниеУслуг()
	
	ТекстНадписи = "Оказание услуг отражается ";
	ТекстДок1 = "документом ""Акт об оказании услуг производственного характера""";
	ТекстДок2 = "документом ""Реализация товаров и услуг""";
	
	Если ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		ТекстНадписи = ТекстНадписи + ТекстДок1; 
	ИначеЕсли ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоВыручке Тогда
		ТекстНадписи = ТекстНадписи + ТекстДок2;
	Иначе
		ТекстНадписи = ТекстНадписи + ТекстДок1 + " и " + ТекстДок2;
	КонецЕсли;
// ЭлементыФормы.НадписьПорядокРаспределенияРасходовНаОказаниеУслугИнформационноеПоле.Заголовок = ТекстНадписи;
КонецПроцедуры

// ФСС

Процедура УстановкаВидимостиПараметровФСС()
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ФСС.Видимость = ((СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) ИЛИ (ОрганизацияЯвляетсяПлательщикомЕНВД)) И (Год(Период) < 2010);
	
КонецПроцедуры
	
Процедура КнопкаРаспределениеЗатратНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.ПолучитьФормуСписка();
	ФормаРегистра.Открыть();
	УстановкаОтбора               = ФормаРегистра.ЭтаФорма["РегистрСведенийСписок"].Отбор["Организация"];
	УстановкаОтбора.ВидСравнения  = ВидСравнения.Равно;
	УстановкаОтбора.Использование = Истина;
	УстановкаОтбора.Значение      = Организация;
	ФормаРегистра.Обновить();    
	
КонецПроцедуры

Процедура ПорядокПодразделенийНажатие(Элемент)
	
	Если СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		ФормаСписка = Документы.УстановкаПорядкаЗакрытияПодразделений.ПолучитьФормуСписка();
		ФормаСписка.Открыть();
		УстановкаОтбора               = ФормаСписка.ЭтаФорма["ДокументСписок"].Отбор["Организация"];
		УстановкаОтбора.ВидСравнения  = ВидСравнения.Равно;
		УстановкаОтбора.Использование = Истина;
		УстановкаОтбора.Значение      = Организация;
		ФормаСписка.Обновить();    
	Иначе
		ФормаРегистра = РегистрыСведений.ВстречныйВыпускПродукцииУслуг.ПолучитьФормуСписка();
		ФормаРегистра.Открыть();
		УстановкаОтбора               = ФормаРегистра.ЭтаФорма["РегистрСведенийСписок"].Отбор["Организация"];
		УстановкаОтбора.ВидСравнения  = ВидСравнения.Равно;
		УстановкаОтбора.Использование = Истина;
		УстановкаОтбора.Значение      = Организация;
		ФормаРегистра.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаВидимостиВстречногоВыпуска()
	
	Если СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		ЭлементыФормы.ПорядокПодразделений.Заголовок = "Встречный выпуск продукции (услуг) и списание продукции на собственные нужды";
		ЭлементыФормы.ПорядокПодразделений.Заголовок = "Установка порядка подразделений для закрытия счетов затрат";
	КонецЕсли;
	
	ЭлементыФормы.ПорядокПодразделений.Доступность = СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям;
	
КонецПроцедуры

Процедура УстановкаВидимостиПорядкаПеределов()

	
КонецПроцедуры

Процедура УстановкаВидимостиМетодаПеределов()
	Если СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
		ЭлементыФормы.СпособРасчетаСебестоимостиПроизводства1.Доступность = Ложь;
	Иначе
		ЭлементыФормы.СпособРасчетаСебестоимостиПроизводства1.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособУчетаВыпускаГотовойПродукции1ПриИзменении(Элемент)
	
	Если СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
		СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СпособРасчетаСебестоимостиПроизводства1ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Налог на прибыль

Процедура СтавкиНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолучитьФормуСписка();
	ФормаРегистра.Открыть();
КонецПроцедуры

Процедура СписокПрямыхРасходовНажатие(Элемент)
	
	ТекущийПериод      = НачалоГода(ЭтаФорма.ЭлементыФормы.Период.Значение);
	ТекущаяОрганизация = ЭтаФорма.ЭлементыФормы.Организация.Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ПериодДействия",     ТекущийПериод);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ВидРасходовНУ,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Подразделение,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Счет,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.КорСчет,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация";
	
	Запрос2.УстановитьПараметр("ПериодДействия",     НачалоГода(НачалоГода(ТекущийПериод) - 1));
	Запрос2.УстановитьПараметр("Организация", Организация);
	ЕстьСписокТекущегоПериода = Не Запрос.Выполнить().Пустой();
	ЕстьСписокПрошлогоПериода = Не Запрос2.Выполнить().Пустой();
	НовыйСписок = Истина;
	
	Если Не ЕстьСписокТекущегоПериода И Не ЕстьСписокПрошлогоПериода Тогда
		
		Ответ = Вопрос("Список пуст. Создать записи, соответствующие рекомендациям ст.318 НК РФ?",РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Да, "Методы определения прямых расходов НУ");
		
	ИначеЕсли Не ЕстьСписокТекущегоПериода И ЕстьСписокПрошлогоПериода Тогда
		
		Ответ = Вопрос("Список пуст. Скопировать записи прошлого периода?",РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Да, "Методы определения прямых расходов НУ");
		НовыйСписок =  (Ответ = КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Ответ = Вопрос("Создать записи, соответствующие рекомендациям ст.318 НК РФ?",РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Да, "Методы определения прямых расходов НУ");
			НовыйСписок =  (Ответ = КодВозвратаДиалога.Да);
			
		КонецЕсли;	
		
	Иначе
		
		Ответ = КодВозвратаДиалога.Нет;
		НовыйСписок = Ложь;
		
	КонецЕсли;
	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.СоздатьНаборЗаписей();
		Объект.Прочитать();
		
		Если НовыйСписок Тогда
		
			Счет20 = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
			Счет23 = Планысчетов.Хозрасчетный.ВспомогательныеПроизводства;
			Счет25 = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
			
			Если ДиректКостинг Тогда
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.МатериальныеРасходы, Счет20);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.МатериальныеРасходы, Счет23);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.МатериальныеРасходы, Счет25);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.Амортизация, Счет20);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.Амортизация, Счет23);			
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.Амортизация, Счет25);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.ОплатаТруда, Счет20);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.ОплатаТруда, Счет23);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.ОплатаТруда, Счет25);
			Иначе
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.Амортизация);
				ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,Перечисления.ВидыРасходовНУ.ОплатаТруда);
			КонецЕсли;
			
			
			Если ТекущийПериод > Дата('20091231') Тогда
				ВидРасходовНУ    = Перечисления.ВидыРасходовНУ.СтраховыеВзносы;
				ВидРасходовНУПФР = Перечисления.ВидыРасходовНУ.СтраховыеВзносы;
				ВидРасходовНУПНС = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
			Иначе
				ВидРасходовНУ    = Перечисления.ВидыРасходовНУ.ЕСН;
				ВидРасходовНУПФР = Перечисления.ВидыРасходовНУ.НалогиИСборы;
				ВидРасходовНУПНС = Перечисления.ВидыРасходовНУ.НалогиИСборы;
			КонецЕсли;   
			
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет20,ПланыСчетов.Хозрасчетный.ФСС);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет23,ПланыСчетов.Хозрасчетный.ФСС);
			
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет20,ПланыСчетов.Хозрасчетный.ПФР_страх);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет23,ПланыСчетов.Хозрасчетный.ПФР_страх);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет20,ПланыСчетов.Хозрасчетный.ПФР_нак);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет23,ПланыСчетов.Хозрасчетный.ПФР_нак);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет20,ПланыСчетов.Хозрасчетный.ПФР_доп);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПФР,Счет23,ПланыСчетов.Хозрасчетный.ПФР_доп);
			
			
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет20,ПланыСчетов.Хозрасчетный.ФФОМС);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет23,ПланыСчетов.Хозрасчетный.ФФОМС);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет20,ПланыСчетов.Хозрасчетный.ТФОМС);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,Счет23,ПланыСчетов.Хозрасчетный.ТФОМС);
			
			
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПНС,Счет20,ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУПНС,Счет23,ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			
		Иначе
			СписокПрошлогоПериода = Запрос2.Выполнить().Выгрузить();
			Для Каждого Строка Из СписокПрошлогоПериода Цикл
				НоваяЗапись = Объект.Добавить();
				НоваяЗапись.ПериодДействия = ТекущийПериод;
				НоваяЗапись.Организация = ТекущаяОрганизация;
				НоваяЗапись.ВидРасходовНУ = Строка.ВидРасходовНУ;
				НоваяЗапись.Подразделение = Строка.Подразделение;
				НоваяЗапись.Счет = Строка.Счет;
				НоваяЗапись.КорСчет = Строка.КорСчет;
				НоваяЗапись.СтатьяЗатрат = Строка.СтатьяЗатрат;
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.Записать();
	КонецЕсли;
		
	ФормаОбъекта = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПолучитьФормуСписка();
	ФормаОбъекта.Отбор.ПериодДействия.Использование = Истина;
	ФормаОбъекта.Отбор.Организация.Использование = Истина;
	ФормаОбъекта.Отбор.ПериодДействия.Значение = ТекущийПериод;
	ФормаОбъекта.Отбор.Организация.Значение = ТекущаяОрганизация;
	ФормаОбъекта.Открыть();
	ФормаОбъекта.Обновить();
	
КонецПроцедуры

Процедура ДобавитьЗаписьСпискаПрямыхРасходовПоУмолчанию(Объект,ТекущийПериод,ТекущаяОрганизация,ВидРасходовНУ,СчетДебета =  Неопределено,СчетКредита = Неопределено)
	
			НоваяЗапись = Объект.Добавить();
			НоваяЗапись.ПериодДействия = ТекущийПериод;
			НоваяЗапись.Организация = ТекущаяОрганизация;
			НоваяЗапись.ВидРасходовНУ = ВидРасходовНУ;
			НоваяЗапись.Счет = СчетДебета;
			НоваяЗапись.КорСчет = СчетКредита;

КонецПроцедуры

// ЕНВД

Процедура УстановкаВидимостиПараметровЕНВД()
	
	Если ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		ЭлементыФормы.ПанельРаспределениеРасходов.Страницы.ННП.Видимость = НЕ УСН;
		ЭлементыФормы.ПанельРаспределениеРасходов.Страницы.УСН.Видимость = УСН;
	КонецЕсли;

КонецПроцедуры

Процедура ЕНВДПриИзменении()
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.ЕНВД.Видимость = ОрганизацияЯвляетсяПлательщикомЕНВД;
	
	ЭлементыФормы.РозничнаяТорговляОблагаетсяЕНВД.Доступность = ОрганизацияЯвляетсяПлательщикомЕНВД И ОрганизацияВедетРозничнуюТорговлю;
	Если РозничнаяТорговляОблагаетсяЕНВД И Не ОрганизацияЯвляетсяПлательщикомЕНВД И Не ОрганизацияВедетРозничнуюТорговлю Тогда
		РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	КонецЕсли;
	
	УправлениеФлагомУплачиватьДобровольныеВзносыВФСС();
	
	// {УчетДоходовИРасходовИП
	ДоступныеХарактерыДеятельности = Новый СписокЗначений;
	ДоступныеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ОптоваяТорговля);
	ДоступныеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД);
	ДоступныеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги);
	
	Если ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		ДоступныеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД);
		ДоступныеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.УслугиЕНВД);
		
	ИначеЕсли ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД
		ИЛИ ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.УслугиЕНВД Тогда
		
		ОсновнойХарактерДеятельности = Неопределено;
		Сообщить("На закладке ""Предприниматель"" очищено поле ""Основной характер деятельности"".");
		
	КонецЕсли;
	
	ЭлементыФормы.ОсновнойХарактерДеятельности.ДоступныеЗначения = ДоступныеХарактерыДеятельности;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры //

Процедура ОрганизацияЯвляетсяПлательщикомЕНВДПриИзменении(Элемент)
	
	РозничнаяТорговляОблагаетсяЕНВД = ОрганизацияЯвляетсяПлательщикомЕНВД;
	ЕНВДПриИзменении();
    УстановкаВидимостиПараметровЕНВД();
	УстановкаВидимостиПараметровФСС();

КонецПроцедуры

Процедура КнопкаУстановитьСчетаУчетаЕНВДНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.СчетаДоходовИРасходовЕНВД.ПолучитьФормуСписка();
	ФормаРегистра.Открыть();

КонецПроцедуры

// УСН

Процедура УСНПриИзменении()
	
	Если УСН И НЕ ЗначениеЗаполнено(ОбъектНалогообложенияУСН) Тогда
		ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		
	ИначеЕсли НЕ УСН И ЗначениеЗаполнено(ОбъектНалогообложенияУСН) Тогда
		ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		
	КонецЕсли;
	
	ЭлементыФормы.ПоложенияПереходногоПериодаУСН.Доступность = УСН;
	
	Если (ПоложенияПереходногоПериодаУСН) И (НЕ УСН) Тогда
		ПоложенияПереходногоПериодаУСН = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.НадписьДатаПереходаНаУСН.Доступность 	= УСН;
	ЭлементыФормы.ДатаПереходаНаУСН.Доступность        	= УСН;
	ЭлементыФормы.ПередачаВПроизводство.Доступность 	= УСН;
	ЭлементыФормы.УменьшатьНаНЗП.Доступность        	= УСН;
	ЭлементыФормы.Реализация.Доступность 				= УСН;
	ЭлементыФормы.ПолучениеДохода.Доступность        	= УСН;
	ЭлементыФормы.ПризнаниеРасхода.Доступность			= УСН;
	
	Если (ЗначениеЗаполнено(ДатаПереходаНаУСН)) И (НЕ УСН) Тогда
		ДатаПереходаНаУСН = Дата('00010101');
	КонецЕсли;
	
	Если УСН Тогда
		Если Не ЗначениеЗаполнено(МетодРаспределенияРасходовУСНПоВидамДеятельности) Тогда
			МетодРаспределенияРасходовУСНПоВидамДеятельности = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БазаРаспределенияРасходовУСНПоВидамДеятельности) Тогда
			БазаРаспределенияРасходовУСНПоВидамДеятельности = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыОтРеализацииБУ;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФлагомУплачиватьДобровольныеВзносыВФСС();		
	
КонецПроцедуры

Процедура ДатаПереходаНаУСНПриИзменении(Элемент)
	Если (ЗначениеЗаполнено(ДатаПереходаНаУСН)) Тогда
		ДатаПереходаНаУСН = НачалоГода(ДатаПереходаНаУСН);
	КонецЕсли;
КонецПроцедуры

Процедура ПередачаВПроизводствоПриИзменении(Элемент)
	Если УменьшатьНаНЗП И Не ПередачаВПроизводство Тогда
		УменьшатьНаНЗП = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура РеализацияПриИзменении(Элемент)
	Если ПолучениеДохода И Не Реализация Тогда
		ПолучениеДохода = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УменьшатьНаНЗППриИзменении(Элемент)
	Если УменьшатьНаНЗП И Не ПередачаВПроизводство Тогда
		ПередачаВПроизводство = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучениеДоходаПриИзменении(Элемент)
	Если ПолучениеДохода И Не Реализация Тогда
		Реализация = истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьПараметрыРасходовУСН()
	
	//Параметры порядка признания расходов УСН
	ПоступлениеМатериалов 	= Истина;
	ОплатаМатериалов		= Истина;
	
	Если ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП Тогда
		ПередачаВПроизводство = Истина;
		УменьшатьНаНЗП		 = Истина;
	ИначеЕсли ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику Тогда
		ПередачаВПроизводство = Ложь;
		УменьшатьНаНЗП		 = Ложь;
	Иначе
		ПередачаВПроизводство = Истина;
		УменьшатьНаНЗП		 = Ложь;
	КонецЕсли;
	
	ПоступлениеТоваров 		= Истина;
	ОплатаТоваров			= Истина;
	
	Если ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода Тогда
		Реализация 		= Истина;
		ПолучениеДохода	= Истина;
	ИначеЕсли ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику Тогда
		Реализация 		= Ложь;
		ПолучениеДохода	= Ложь;
	Иначе
		Реализация 		= Истина;
		ПолучениеДохода	= Ложь;
	КонецЕсли;
	
	НДСПредъявленПоставщиком 	= Истина;
	ОплатаНДС					= Истина;
	
	Если ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость Тогда
		ПризнаниеРасхода 	= Истина;
	Иначе
		ПризнаниеРасхода	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыРасходовУСН()
	
	Если НЕ УСН Тогда
		Если ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.ПустаяСсылка() Тогда
			ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПустаяСсылка();
		КонецЕсли;
		Если ПорядокПризнанияРасходовПоТоварам <> Перечисления.ПорядокПризнанияРасходовПоТоварам.ПустаяСсылка() Тогда
			ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПустаяСсылка();
		КонецЕсли;
		Если ПорядокПризнанияРасходовПоНДС <> Перечисления.ПорядокПризнанияРасходовПоНДС.ПустаяСсылка() Тогда
			ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//Параметры порядка признания расходов УСН
	Если УменьшатьНаНЗП Тогда
		Если ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП Тогда
			ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;
		КонецЕсли;
	ИначеЕсли ПередачаВПроизводство Тогда
		Если ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоФактуСписания Тогда
			ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоФактуСписания;
		КонецЕсли;
	Иначе
		Если ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику Тогда
			ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучениеДохода Тогда
		Если ПорядокПризнанияРасходовПоТоварам <> Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода Тогда
			ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода;
		КонецЕсли;
	ИначеЕсли Реализация Тогда
		Если ПорядокПризнанияРасходовПоТоварам <> Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации Тогда
			ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации;
		КонецЕсли;
	Иначе
		Если ПорядокПризнанияРасходовПоТоварам <> Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику Тогда
			ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику;
		КонецЕсли;
	КонецЕсли;
	
	Если ПризнаниеРасхода Тогда
		Если ПорядокПризнанияРасходовПоНДС <> Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость Тогда
			ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость;
		КонецЕсли;
	Иначе
		Если ПорядокПризнанияРасходовПоНДС <> Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику Тогда
			ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектНалогообложенияУСНПриИзменении(Элемент)
	
	УстановитьТекстОНеобходимостиФИФО();
	ПроверкаМетодаФИФО();
	УстановитьВидимость();
	
КонецПроцедуры

// НДС

Процедура УстановкаВидимостиПараметровНДС()
	
	ЭлементыФормы.СложныйУчетНДС.Заголовок = "Организация осуществляет реализацию без НДС или с НДС 0%";
	
	ЭлементыФормы.НачислятьНДСПоОтгрузке.Доступность = (Период >= '20060101');
	
	// С 01.10.2011 НДС по суммовым разницам не начисляется
	УчитыватьСуммовыеРазницы = (НЕ УпрощенныйУчетНДС) И (Период < '20111001');
	ЭлементыФормы.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Доступность = УчитыватьСуммовыеРазницы;
	
	ЭлементыФормы.УпрощенныйУчетНДС.Доступность = Не СложныйУчетНДС;
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.БезНДСи0.Видимость = СложныйУчетНДС И (НЕ УСН);
    
	ЭлементыФормы.НачислятьНДСПриПередачеНедвижимости.Доступность = (Период >= '20110101');
    
КонецПроцедуры

Процедура СложныйУчетНДСПриИзменении(Элемент)
	
	Если СложныйУчетНДС 
		И УпрощенныйУчетНДС Тогда
		УпрощенныйУчетНДС = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УпрощенныйУчетНДСПриИзменении(Элемент)
	
	Если  УпрощенныйУчетНДС 
		И УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС Тогда
		УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
// Предприниматель

Процедура УстановкаВидимостиПараметровИП()
	
	Если ДляПризнанияРасходовНеТребуетсяПолучениеДохода Тогда
		ТекстЗаголовка = "Флажок устанавливается, если требуется отражать в текущем налоговом периоде доходы, связанные с реализацией товаров, произведенной в счет незачтенных авансов прошлых лет.
			|Если флажок снят, указанные доходы в налоговом учете не отражаются.";
	Иначе
		ТекстЗаголовка = "Флажок устанавливается, если требуется отражать в текущем налоговом периоде:
			|• доходы и расходы, связанные с реализацией товаров, произведенной в счет 
			|  незачтенных авансов прошлых лет;
			|• расходы, связанные с приобретением товаров, отгруженных и оплаченных 
			|  покупателями в предыдущем году.
			|Если флажок снят, указанные доходы и расходы в налоговом учете не отражаются."
	КонецЕсли;
	
	ЭлементыФормы.НадписьПризнаватьРасходыПоДоходамПрошлыхПериодов.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ВидыДеятельностиНажатие(Элемент)
	
	ФормаВидовДеятельности = Справочники.ВидыДеятельностиПредпринимателей.ПолучитьФорму("ФормаСписка");
	ФормаВидовДеятельности.Открыть();
	
КонецПроцедуры

Процедура ДляПризнанияРасходовНеТребуетсяПолучениеДоходаПриИзменении(Элемент)
	
	УстановкаВидимостиПараметровИП();
	
КонецПроцедуры

// }УчетДоходовИРасходовИП

// ФСС	

Процедура УправлениеФлагомУплачиватьДобровольныеВзносыВФСС()
	
	ЭлементыФормы.УплачиватьДобровольныеВзносыВФСС.Доступность = УСН или ОрганизацияЯвляетсяПлательщикомЕНВД;
	
	Если Не (УСН или ОрганизацияЯвляетсяПлательщикомЕНВД) и УплачиватьДобровольныеВзносыВФСС Тогда
		УплачиватьДобровольныеВзносыВФСС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ОС и НМА

Процедура УстановитьСтавкиНалогаНаИмуществоНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.СтавкиНалогаНаИмущество.ПолучитьФормуСписка();
	ФормаРегистра.Открыть();
	УстановкаОтбора               = ФормаРегистра.ЭтаФорма["РегистрСведенийСписок"].Отбор["Организация"];
	УстановкаОтбора.ВидСравнения  = ВидСравнения.Равно;
	УстановкаОтбора.Использование = Истина;
	УстановкаОтбора.Значение      = Организация;
	УстановкаОтбораЛьгот               = ФормаРегистра.ЭтаФорма["РегистрСведенийСписок1"].Отбор["Организация"];
	УстановкаОтбораЛьгот.ВидСравнения  = ВидСравнения.Равно;
	УстановкаОтбораЛьгот.Использование = Истина;
	УстановкаОтбораЛьгот.Значение      = Организация;
	ФормаРегистра.Обновить();    
	
КонецПроцедуры

Процедура ОрганизацияВедетПроизводственнуюДеятельностьПриИзменении(Элемент)
	УстановкаВидимостиПроизводства();
	Если НЕ ОрганизацияВедетПроизводственнуюДеятельность Тогда
		ДиректКостинг = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияВедетРозничнуюТорговлюПриИзменении(Элемент)
	УстановкаВидимостиРозницы()
КонецПроцедуры

//Страховые взносы

Процедура УстановкаВидимостиПараметровСтраховыхВзносов()
	
	ЭлементыФормы.ПанельУчетнойПолитики.Страницы.СтраховыеВзносы.Видимость = Год(Период) >= 2010;
	
КонецПроцедуры

Процедура ПроверитьУстановкуПараметровСтраховыхВзносов()
	
	Если (Год(Период) < 2010) Тогда
		ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ПустаяСсылка();
	Иначе
		УплачиватьДобровольныеВзносыВФСС = Ложь;
		Если (ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим 
			ИЛИ НЕ ЗначениеЗаполнено(ВидТарифаСтраховыхВзносов))
			И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим;
			ОграничитьСписокВыбораВидаТарифаСтраховыхВзносов();
		ИначеЕсли (ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим
			ИЛИ НЕ ЗначениеЗаполнено(ВидТарифаСтраховыхВзносов))
			И СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
			ОграничитьСписокВыбораВидаТарифаСтраховыхВзносов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьСписокВыбораВидаТарифаСтраховыхВзносов()
	
	СписокВыбора = Новый СписокЗначений();
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ITОрганизации);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.СМИ);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы);
	Иначе
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ITОрганизации);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.СМИ);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов);
		СписокВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы);
		
	КонецЕсли;
	ЭлементыФормы.ВидТарифаСтраховыхВзносов.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

Процедура ВидТарифаСтраховыхВзносовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВидТарифаСтраховыхВзносовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВидТарифаСтраховыхВзносовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


Процедура ПорядокРаспределенияРасходовНаОказаниеУслуг1ПриИзменении(Элемент)
	УстановкаНадписиПорядокРаспределенияРасходовНаОказаниеУслуг()
КонецПроцедуры


Процедура ПорядокРаспределенияРасходовНаОказаниеУслуг2ПриИзменении(Элемент)
	УстановкаНадписиПорядокРаспределенияРасходовНаОказаниеУслуг()
КонецПроцедуры


Процедура ПорядокРаспределенияРасходовНаОказаниеУслуг3ПриИзменении(Элемент)
	УстановкаНадписиПорядокРаспределенияРасходовНаОказаниеУслуг()
КонецПроцедуры

