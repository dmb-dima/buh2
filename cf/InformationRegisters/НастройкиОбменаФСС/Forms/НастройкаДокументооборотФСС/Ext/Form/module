Перем СертификатСтрахователя;
Перем СертификатФСС;
Перем СертификатыСтрахователя;
Перем СертификатыФСС;
Перем СертификатыЛичные;
Перем СертификатыДругиеПользователи;
Перем СертификатыОбщие;
Перем Крипт;
Перем ДвДанные;

Функция ИнициализироватьВнешнююКомпоненту()
	
	Попытка
		Объект = Новый("Addin.CryptS");
		Возврат Истина;
	Исключение
	КонецПопытки;
	
	ВремФайлКомпоненты = ПолучитьИмяВременногоФайла();
	Попытка
		Отчеты.РегламентированныйОтчет4ФСС.ПолучитьМакет("КомпонентаОбмена").Записать(ВремФайлКомпоненты);
	Исключение
		Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	ПолноеИмяФайлаКомпоненты = КаталогПрограммы() + "ExtIntgr.dll";
	Попытка
		ПереместитьФайл(ВремФайлКомпоненты, ПолноеИмяФайлаКомпоненты);
	Исключение
		ОбъектФайлКомпоненты = Новый Файл(ПолноеИмяФайлаКомпоненты);
		Если ОбъектФайлКомпоненты.Существует() Тогда
			СравнениеФайлов = Новый СравнениеФайлов;
			СравнениеФайлов.ПервыйФайл = ВремФайлКомпоненты;
			СравнениеФайлов.ВторойФайл = ПолноеИмяФайлаКомпоненты;
			Если НЕ СравнениеФайлов.Сравнить() Тогда
				Сообщить("Не удалось заменить внешнюю компоненту ExtIntgr.dll в каталоге программы.
						|Несоответствие версий компоненты требуемой может привести к некорректной работе программы!" , СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПолноеИмяФайлаКомпоненты);
	Исключение
		Сообщить("Не удалось загрузить внешнюю компоненту ExtIntgr.dll:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЗаполнениеПараметров()
	
	ОписаниеОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(СертификатСтрахователя) Тогда
		Предупреждение("Не выбран сертификат страхователя!");
		ТекущийЭлемент = ЭлементыФормы.СертификатСтрахователяПредставление;
		Возврат Ложь;
	Иначе
		Состояние("Проверка сертификата страхователя ...");
		РезультатПроверки = ПроверитьСертификат(СертификатСтрахователя, ОписаниеОшибки);
		Если РезультатПроверки = Неопределено Тогда
			Сообщить("Не удалось проверить сертификат страхователя.", СтатусСообщения.Важное);
			Возврат Ложь;
		ИначеЕсли НЕ РезультатПроверки Тогда
			Сообщить("Ошибка проверки сертификата страхователя!
					|Вероятно, не установлен сертификат головного удостоверяющего центра или вышестоящие сертификаты.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СертификатФСС) Тогда
		Предупреждение("Не выбран сертификат ФСС!");
		ТекущийЭлемент = ЭлементыФормы.СертификатФССПредставление;
		Возврат Ложь;
	Иначе
		Состояние("Проверка сертификата ФСС ...");
		РезультатПроверки = ПроверитьСертификат(СертификатФСС, ОписаниеОшибки);
		Если РезультатПроверки = Неопределено Тогда
			Сообщить("Не удалось проверить сертификат ФСС.", СтатусСообщения.Важное);
			Возврат Ложь;
		ИначеЕсли НЕ РезультатПроверки Тогда
			Сообщить("Ошибка проверки сертификата страхователя!
					|Вероятно, не установлен сертификат головного удостоверяющего центра.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		Возврат;
	КонецЕсли;
	
	СертификатСтрахователяОтпечаток = СертификатСтрахователя.Отпечаток;
	СертификатФССОтпечаток 			= СертификатФСС.Отпечаток;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

Процедура ПоказатьСертификатВСистемномОкне(Сертификат)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт <> Неопределено Тогда
		СерийныйНомер = Сертификат.СерийныйНомер;
		Поставщик = Сертификат.Поставщик;
		Крипт.ПоказатьСертификат(СерийныйНомер, Поставщик);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатСтрахователяПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СертификатСтрахователя) Тогда
		ПоказатьСертификатВСистемномОкне(СертификатСтрахователя);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатФССПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СертификатФСС) Тогда
		ПоказатьСертификатВСистемномОкне(СертификатФСС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	Закрыть();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбновитьДоступностьЭлементов();
	
	ИнициализацияФормы(Отказ);
	
КонецПроцедуры

Процедура ИнициализацияФормы(Отказ)
	
	// инициализируем внешнюю компоненту
	Если НЕ ИнициализироватьВнешнююКомпоненту() Тогда
		Возврат;
	КонецЕсли;
	
	// создаем объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// создаем объект для работы с двоичными данными
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СертификатыОбщие 		= ПолучитьСертификатыОбщие();
	СертификатыСтрахователя = ПолучитьСертификатыСтрахователя();
	СертификатыФСС 			= ПолучитьСертификатыФСС();
	
	СертификатСтрахователя 	= СертификатыОбщие.Найти(СертификатСтрахователяОтпечаток, "Отпечаток");
	СертификатФСС 			= СертификатыОбщие.Найти(СертификатФССОтпечаток, "Отпечаток");
	
	ОтобразитьСертификатВПолеВвода(ЭлементыФормы.СертификатСтрахователяПредставление, СертификатСтрахователя);
	ОтобразитьСертификатВПолеВвода(ЭлементыФормы.СертификатФССПредставление, СертификатФСС);
	
КонецПроцедуры

Процедура ОтобразитьСертификатВПолеВвода(ПолеВвода, Знач Сертификат)
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет;
		ПолеВвода.Значение = "";
		ПолеВвода.Подсказка = "Сертификат не выбран";
		Возврат;
	КонецЕсли;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(Сертификат);
	ТекДата = ТекущаяДата();
	Если ТекДата > Сертификат.ДействителенПо Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
							  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ИСТЕК!";
	ИначеЕсли ТекДата < Сертификат.ДействителенС Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
							  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ЕЩЕ НЕ НАСТУПИЛ!";
	Иначе
		ПолеВвода.ЦветТекстаПоля = Новый Цвет;
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	Возврат СокрЛП(Сертификат.Наименование) + " (" + Сертификат.ДействителенС + " - " + Сертификат.ДействителенПо + ")";
	
КонецФункции

Функция ПолучитьСертификатыОбщие()
	
	ТаблицаСертификатовСтрахователя = Новый ТаблицаЗначений;
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Субъект");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Наименование");
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовСтрахователя.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовСтрахователя.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	
	Возврат ТаблицаСертификатовСтрахователя;
	
КонецФункции

Функция ПолучитьСертификатыФСС()
	
	КлючИздателя = "УЦ ФСС РФ";
	
	ТаблицаСертификатовСтрахователя = Новый ТаблицаЗначений;
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Субъект");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Наименование");
	
	СертификатыДругиеПользователи = ТаблицаСертификатовСтрахователя.Скопировать();
	
	ТекДата = ТекущаяДата();
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		Издатель = Крипт.Поставщик;
		ОтпечатокСертификата = Крипт.Отпечаток;
		ДействителенС = Крипт.ДействителенС;
		ДействителенПо = Крипт.ДействителенДо;
		Субъект = Крипт.Субъект;
		ИмяСертификата = Крипт.ИмяСертификата;
		
		Если ДействителенС > ТекДата ИЛИ ДействителенПо < ТекДата Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрХранилище = СертификатыДругиеПользователи.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = ДействителенС;
		НовСтрХранилище.ДействителенПо = ДействителенПо;
		НовСтрХранилище.Наименование = ИмяСертификата;
		
		Если Найти(Издатель, КлючИздателя) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = ТаблицаСертификатовСтрахователя.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НовСтрХранилище);
		
	КонецЦикла;
	
	ТаблицаСертификатовСтрахователя.Сортировать("ДействителенС УБЫВ");
	СертификатыДругиеПользователи.Сортировать("Наименование");
	
	Возврат ТаблицаСертификатовСтрахователя;
	
КонецФункции

Функция ПолучитьСертификатыСтрахователя()
	
	OIDКодСтрахователя = "OID.1.2.643.3.141.1.1";
	OIDКодОрганаФСС = "OID.1.2.643.3.141.1.2";
	
	ТаблицаСертификатовСтрахователя = Новый ТаблицаЗначений;
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Субъект");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Наименование");
	
	СертификатыЛичные = ТаблицаСертификатовСтрахователя.Скопировать();
	
	ТекДата = ТекущаяДата();
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		ДействителенС = Крипт.ДействителенС;
		ДействителенПо = Крипт.ДействителенДо;
		ИмяСертификата = Крипт.ИмяСертификата;
		Субъект = Крипт.Субъект;
		
		Если ДействителенС > ТекДата ИЛИ ДействителенПо < ТекДата Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрХранилище = СертификатыЛичные.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = Субъект;
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = ДействителенС;
		НовСтрХранилище.ДействителенПо = ДействителенПо;
		НовСтрХранилище.Наименование = ИмяСертификата;
		
		СвойстваСубъекта = РазобратьСтрокуСубъекта(Субъект);
		
		СертКодСтрахователя = СвойстваСубъекта.Получить(OIDКодСтрахователя);
		СертКодОрганаФСС = СвойстваСубъекта.Получить(OIDКодОрганаФСС);
		Если СертКодСтрахователя <> КодСтрахователя ИЛИ СертКодОрганаФСС <> КодОрганаФСС Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = ТаблицаСертификатовСтрахователя.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НовСтрХранилище);
		
	КонецЦикла;
	
	ТаблицаСертификатовСтрахователя.Сортировать("ДействителенС УБЫВ");
	СертификатыЛичные.Сортировать("Наименование");
	
	Возврат ТаблицаСертификатовСтрахователя;
	
КонецФункции

Процедура РазобратьСоставляющую(СтрСоставляющая, Результат)
	
	// расщепляем текущую составляющую и добавляем в структуру Результат
	Для ВнутрИнд = 1 По СтрДлина(СтрСоставляющая) Цикл
		Если Сред(СтрСоставляющая, ВнутрИнд, 1) = "=" Тогда
			ДоРазделителя = СокрЛП(Лев(СтрСоставляющая, ВнутрИнд - 1));
			ПослеРазделителя = СокрЛП(Сред(СтрСоставляющая, ВнутрИнд + 1));
			Если НЕ ПустаяСтрока(ДоРазделителя) И НЕ ПустаяСтрока(ПослеРазделителя) Тогда
				Результат.Вставить(ДоРазделителя, ПослеРазделителя);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьСтрокуСубъекта(СтрокаСубъект)
	
	Результат = Новый Соответствие;
	ПоследнийРазделитель = 0;
	
	ДлинаСтрокиСубъект = СтрДлина(СтрокаСубъект);
	Для Инд = 1 По ДлинаСтрокиСубъект Цикл
		ТекСимвол = Сред(СтрокаСубъект, Инд, 1);
		Если ТекСимвол = "," Тогда
			ТекСоставляющая = Сред(СтрокаСубъект, ПоследнийРазделитель + 1, Инд - (ПоследнийРазделитель + 1));
			ПоследнийРазделитель = Инд;
			РазобратьСоставляющую(ТекСоставляющая, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийРазделитель <> ДлинаСтрокиСубъект Тогда
		РазобратьСоставляющую(СокрЛП(Сред(СтрокаСубъект, ПоследнийРазделитель + 1)), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Отпечаток16ИзBase64(ОтпечатокBase64, ДвДанные= Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокBase64) Тогда
		Возврат ОтпечатокBase64;
	КонецЕсли;
	
	ДвДанные.Очистить();
	ДвДанные.ДобавитьИзСтрокиBase64(ОтпечатокBase64, Истина);
	ДвДанные.ТекущаяПозиция = 0;
	
	Возврат нрег(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
	
КонецФункции

Функция ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные)
	
	Соответствие16 = Новый Соответствие;
	Соответствие16.Вставить(0, "0");
	Соответствие16.Вставить(1, "1");
	Соответствие16.Вставить(2, "2");
	Соответствие16.Вставить(3, "3");
	Соответствие16.Вставить(4, "4");
	Соответствие16.Вставить(5, "5");
	Соответствие16.Вставить(6, "6");
	Соответствие16.Вставить(7, "7");
	Соответствие16.Вставить(8, "8");
	Соответствие16.Вставить(9, "9");
	Соответствие16.Вставить(10, "a");
	Соответствие16.Вставить(11, "b");
	Соответствие16.Вставить(12, "c");
	Соответствие16.Вставить(13, "d");
	Соответствие16.Вставить(14, "e");
	Соответствие16.Вставить(15, "f");
	
	Отпечаток = "";
	Для Инд = 1 По 20 Цикл
		Байт = ДвДанные.ПолучитьЧисло(1);
		Представление16_1 = Соответствие16[Цел(Байт / 16)];
		Представление16_2 = Соответствие16[Байт % 16];
		Отпечаток =  Отпечаток + Представление16_1 + Представление16_2;
	КонецЦикла;
	
	Возврат Отпечаток;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСДвоичнымиДанными()
	
	Попытка
		Возврат Новый("Addin.BinaryDataS");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСКриптографией()
	Перем Парам1, Парам2, Парам3, Парам4;
	
	Попытка
		Крипт = Новый("Addin.CryptS");
		Крипт.ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		Крипт.ТипКриптопровайдера = 75;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// проверка установки КриптоПро
	Попытка
		Крипт.ПолучитьСледующийАлгоритм(Парам1, Парам2, Парам3, Парам4);
	Исключение
		Предупреждение("На компьютере не обнаружено СКЗИ КриптоПро CSP, необходимое для выполнения криптографических операций при формировании пакета.");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Крипт;
	
КонецФункции

Процедура СертификатСтрахователяПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьСертификат(?(СертификатыСтрахователя.Количество() = 0, СертификатыЛичные, СертификатСтрахователя), СертификатСтрахователя);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СертификатСтрахователя = РезультатВыбора;
		ОтобразитьСертификатВПолеВвода(Элемент, СертификатСтрахователя);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатФССПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьСертификат(?(СертификатыФСС.Количество() = 0, СертификатыДругиеПользователи, СертификатыФСС), СертификатФСС);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СертификатФСС = РезультатВыбора;
		ОтобразитьСертификатВПолеВвода(Элемент, СертификатФСС);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьСертификат(СписокСертификатов, ТекущийСертификат)
	
	ФормаВыбораСертификата = ПолучитьФорму("ФормаВыбораСертификата");
	ФормаВыбораСертификата.Сертификаты = СписокСертификатов;
	ФормаВыбораСертификата.ТекущийСертификат = ТекущийСертификат;
	Возврат ФормаВыбораСертификата.ОткрытьМодально();
	
КонецФункции

Функция ПроверитьСертификат(Сертификат, ОписаниеОшибки = Неопределено)
	
	Попытка
		Возврат Крипт.ПроверитьСертификат(Сертификат.СерийныйНомер, Сертификат.Поставщик, , );
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СертификатСтрахователяПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура СертификатФССПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура ИспользоватьОбменПриИзменении(Элемент)
	ОбновитьДоступностьЭлементов();
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементов()
	ЭлементыФормы.СертификатСтрахователяПредставление.Доступность = ИспользоватьОбмен;
	ЭлементыФормы.СертификатФССПредставление.Доступность = ИспользоватьОбмен;
КонецПроцедуры


