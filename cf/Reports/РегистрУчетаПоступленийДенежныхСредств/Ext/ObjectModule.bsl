#Если Клиент Тогда
	
Перем НП Экспорт;

Перем СписокСчетов;
Перем Сч50;
Перем Сч51;
Перем Сч52;
Перем Сч55;

Перем Сч62_01, Сч62_21, Сч62_31, Сч90, Сч62_02, Сч62_22, Сч62_32, Сч86, Сч58_03, Сч60_02, Сч60_22, Сч60_32, Сч91_01;

// Возвращает полное наименование элемента справочника, если у этого вида 
// справочников есть реквизит НаименованиеПолное.
// 
// Параметры:      
//    Элемент - элемент справочника, для которого нужно вернуть полное наименование
//
// Возвращаемое значение: 
//  Строка с полным наименованием.
//
Функция ПолноеНаименование(Элемент) Экспорт

	Если НЕ ЗначениеЗаполнено(Элемент) Тогда
		Возврат "";

	ИначеЕсли Элемент.Метаданные().Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
		Возврат Элемент.Наименование;;

	ИначеЕсли НЕ ЗначениеЗаполнено(Элемент.НаименованиеПолное) Тогда
		Возврат Элемент.Наименование;

	Иначе
		Возврат Элемент.НаименованиеПолное;
	КонецЕсли;

КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
	
	ДокументРезультат.Очистить();

	Макет = ПолучитьМакет("Отчет");

	ОбластьЗаголовок  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.НачалоПериода       = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.КонецПериода        = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.ИННОрганизации      = "" + Организация.ИНН + "/" + Организация.КПП;
	ДокументРезультат.Вывести(ОбластьЗаголовок);

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;

	// Проверим заполнение обязательных реквизитов
	Если НалоговыйУчет.ПроверитьЗаполнениеОбязательныхРеквизитов(ДатаНач,ДатаКон,Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьСтрока        = Макет.ПолучитьОбласть("Строка");

	ДокументРезультат.Вывести(ОбластьШапкаТаблицы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ДатаНач",      НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон",      КонецДня(ДатаКон));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт КАК ВалСумма,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.ВалютаДт    КАК Валюта,
	|	ХозрасчетныйОборотыДтКт.СчетКт      КАК Счет,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Субконто1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Субконто2,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Субконто3,
	|	ХозрасчетныйОборотыДтКт.Период      КАК ДатаОперации,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ХозрасчетныйОборотыДтКт.НомерСтроки,
	|	Хозрасчетный.Регистратор            КАК Регистратор1,
	|	Хозрасчетный.НомерСтроки,
	|	Хозрасчетный.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Запись, СчетДт В ИЕРАРХИИ (&СписокСчетов), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = Хозрасчетный.Регистратор И ХозрасчетныйОборотыДтКт.НомерСтроки = Хозрасчетный.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОперации";
	Выборка   = Запрос.Выполнить().Выбрать();
	ИтогСумма = 0;

	Пока Выборка.Следующий() Цикл

		ОбластьСтрока.Параметры.Дата        = Формат(Выборка.ДатаОперации, "ДФ=dd.MM.yyyy");
		ОбластьСтрока.Параметры.Сумма       = Выборка.Сумма;
		ОбластьСтрока.Параметры.ВалСумма    = Выборка.ВалСумма;
		ОбластьСтрока.Параметры.Валюта      = Выборка.Валюта;
		ОбластьСтрока.Параметры.Расшифровка = Выборка.Регистратор;

		ИтогСумма = ИтогСумма + Выборка.Сумма;

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Для НомерСубконто = 1 по 3 Цикл
			ЗначениеСубконто = Выборка["Субконто" + НомерСубконто];
			Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
				Контрагент = ЗначениеСубконто;
				
			ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Договор = ЗначениеСубконто;
			КонецЕсли;
		КонецЦикла;

		ТекДок = Выборка.Регистратор.Метаданные().Синоним + " № " + Выборка.Регистратор.Номер;

		// определяем основание поступления денежных средств
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			ОснованиеПоступления = СокрЛП(Выборка.Содержание) + " на основании: " + ТекДок;

		Иначе
			ОснованиеПоступления = ПолноеНаименование(Контрагент);
			ОснованиеПоступления = ОснованиеПоступления + ", " + Договор;
			ОснованиеПоступления = ОснованиеПоступления + ", на основании: " + ТекДок;
		КонецЕсли;

		ОбластьСтрока.Параметры.ОснованиеПоступления = ОснованиеПоступления;

		// определяем условие или вид поступления денежных средств
		//Если Выборка.Счет = Сч90_1_2 Тогда
		//	УсловиеИлиВидПоступления = "В рамках деятельности, облагаемой ЕНВД";

		Если (Выборка.Счет = Сч62_01) или (Выборка.Счет = Сч62_21) или (Выборка.Счет = Сч62_31) или Выборка.Счет.ПринадлежитЭлементу(Сч90) Тогда
			УсловиеИлиВидПоступления = "В счет оплаты за ранее переданное имущество, работы, услуги, права";

		ИначеЕсли (Выборка.Счет = Сч62_02) или (Выборка.Счет = Сч62_22) или (Выборка.Счет = Сч62_32) Тогда
			УсловиеИлиВидПоступления = "Авансы полученные";

		//ИначеЕсли (Найти(Выборка.Счет, "62.4") <> 0)
		//	  или (Найти(Выборка.Счет, "62.8") <> 0)
		//	  или (Найти(Выборка.Счет, "62.44") <> 0) Тогда
		//	УсловиеИлиВидПоступления = "В рамках посреднических договоров";

		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(Сч86) Тогда
			УсловиеИлиВидПоступления = "Целевое финансирование и поступления";

		ИначеЕсли Выборка.Счет = Сч58_03 Тогда
			УсловиеИлиВидПоступления = "Возврат ранее выданных займов";

		ИначеЕсли (Выборка.Счет = Сч60_02) или (Выборка.Счет = Сч60_22) или (Выборка.Счет = Сч60_32) Тогда
			УсловиеИлиВидПоступления = "Возврат авансов выданных";

		ИначеЕсли Выборка.Счет = Сч91_01 Тогда

			// Необходим анализ вида дохода
			Если (Выборка.Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств)
			 или (Выборка.Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов)
			 или (Выборка.Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества) Тогда
				УсловиеИлиВидПоступления = "В счет оплаты за ранее переданное имущество, работы, услуги, права";

			ИначеЕсли (Выборка.Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества) Тогда
				УсловиеИлиВидПоступления = "Безвозмездно";

			ИначеЕсли НЕ Выборка.Субконто1.ПринятиеКналоговомуУчету Тогда
				УсловиеИлиВидПоступления = "Не принимаемые для налогообложения";

			Иначе
				УсловиеИлиВидПоступления = "Иные условия, не связанные с движением задолженности";

			КонецЕсли;

		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(Сч50) или (Выборка.Счет = Сч51) или (Выборка.Счет = Сч52) или Выборка.Счет.ПринадлежитЭлементу(Сч55) Тогда
			УсловиеИлиВидПоступления = "Внутреннее перемещение (из кассы в банк и т.п.)";

		ИначеЕсли Не Контрагент.Пустая() Тогда
			УсловиеИлиВидПоступления = "Иные условия, связанные с движением задолженности";

		Иначе
			УсловиеИлиВидПоступления = "Иные условия, не связанные с движением задолженности";
		КонецЕсли;

		ОбластьСтрока.Параметры.УсловиеИлиВидПоступления = УсловиеИлиВидПоступления;

		ДокументРезультат.Вывести(ОбластьСтрока);

	КонецЦикла;

	СтруктураЛиц = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаКон);
	ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтруктураЛиц.ОтветственныйЗаРегистры);

	ОбластьПодвалТаблицы.Параметры.ИтогСумма = ИтогСумма;
	ДокументРезультат.Вывести(ОбластьПодвалТаблицы);
	ДокументРезультат.Вывести(ОбластьПодвал);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

Сч50 = ПланыСчетов.Хозрасчетный.Касса;
Сч51 = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
Сч52 = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
Сч55 = ПланыСчетов.Хозрасчетный.СпециальныеСчета;

СписокСчетов = Новый СписокЗначений;
СписокСчетов.Добавить(Сч50);
СписокСчетов.Добавить(Сч51);
СписокСчетов.Добавить(Сч52);
СписокСчетов.Добавить(Сч55);

Сч62_01 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
Сч62_21 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.21");
Сч62_31 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.31");
Сч90    = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90");
Сч62_02 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
Сч62_22 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22");
Сч62_32 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32");
Сч86    = ПланыСчетов.Хозрасчетный.НайтиПоКоду("86");
Сч58_03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("58.03");
Сч60_02 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
Сч60_22 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.22");
Сч60_32 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.32");
Сч91_01 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");

#КонецЕсли