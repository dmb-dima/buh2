////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;
Перем мОписаниеТиповЧислоЕ6 Экспорт;

Перем мАдресвФорматеДляВыгрузки;

// Хранят структуру многострочных разделов
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

// Хранит имена многострочных разделов
Перем мИдГруппы_1, мИдГруппы_2;

// Хранит имена показателей многострочных разделов,
// которых нет в табличном документе
Перем ИменаПоказателейТолькоСтруктура;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;
Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;

Перем ИДКонфигурации;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мДанныеОтчета Экспорт;

Перем ТаблицаСообщений Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем КоллекцияСписковВыбора Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейТаблицыПанели = "") Экспорт
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если  ИмяТекущейТаблицыПанели = "ФормаОтчета" Тогда
		
		//Заполнение показателей из реквизитов формы
		мФормаОтчета.Области.НаправлениеПеремещения.Значение = НапрПеремещения;
		
		Если СтранаОтправления = "РФ" Тогда
			мФормаОтчета.Области.СтранаОтправленияКод.Значение = "RU";
			мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "РОССИЯ";
			мФормаОтчета.Области.ОтправительКоды.Значение = ОтправительРФ_ИНН + ?(ПустаяСтрока(ОтправительРФ_КПП), "", " / " + ОтправительРФ_КПП);
			
		ИначеЕсли СтранаОтправления = "РБ" Тогда
			мФормаОтчета.Области.СтранаОтправленияКод.Значение = "BY";
			мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "БЕЛАРУСЬ";
			мФормаОтчета.Области.ОтправительКоды.Значение = ОтправительРБ_УНП;
			
		ИначеЕсли СтранаОтправления = "РК" Тогда
			мФормаОтчета.Области.СтранаОтправленияКод.Значение = "KZ";
			мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "КАЗАХСТАН";
			мФормаОтчета.Области.ОтправительКоды.Значение = ОтправительРК_БИН + ?(ПустаяСтрока(ОтправительРК_ИИН), "", " / " + ОтправительРК_ИИН);
			
		КонецЕсли; 
		
		ОтправительРеквизиты = СокрЛП(СтрЗаменить(ОтправительНаименование, Символы.ПС, " "));
		ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(ОтправительИндекс), "", ", " + ОтправительИндекс);
		ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(ОтправительСтранаНаименование), "", ", " + ОтправительСтранаНаименование);
		ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(ОтправительОбласть), "", ", " + ОтправительОбласть);
		ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(ОтправительНаселенныйПункт), "", ", " + ОтправительНаселенныйПункт);
		ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(ОтправительУлицаНомерДома), "", ", " + ОтправительУлицаНомерДома);
		мФормаОтчета.Области.ОтправительРеквизиты.Значение = ОтправительРеквизиты;
        		
		Если СтранаНазначения = "РФ" Тогда
			мФормаОтчета.Области.СтранаНазначенияКод.Значение = "RU";
			мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "РОССИЯ";
			мФормаОтчета.Области.ПолучательКоды.Значение = ПолучательРФ_ИНН + ?(ПустаяСтрока(ПолучательРФ_КПП), "", " / " + ПолучательРФ_КПП);
			
		ИначеЕсли СтранаНазначения = "РБ" Тогда
			мФормаОтчета.Области.СтранаНазначенияКод.Значение = "BY";
			мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "БЕЛАРУСЬ";
			мФормаОтчета.Области.ПолучательКоды.Значение = ПолучательРБ_УНП;			
			
		ИначеЕсли СтранаНазначения = "РК" Тогда
			мФормаОтчета.Области.СтранаНазначенияКод.Значение = "KZ";
			мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "КАЗАХСТАН";
			мФормаОтчета.Области.ПолучательКоды.Значение = ПолучательРК_БИН + ?(ПустаяСтрока(ПолучательРК_ИИН), "", " / " + ПолучательРК_ИИН);
			
		КонецЕсли; 
		
		ПолучательРеквизиты = СокрЛП(СтрЗаменить(ПолучательНаименование, Символы.ПС, " "));
		ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(ПолучательИндекс), "", ", " + ПолучательИндекс);
		ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(ПолучательСтранаНаименование), "", ", " + ПолучательСтранаНаименование);
		ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(ПолучательОбласть), "", ", " + ПолучательОбласть);
		ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(ПолучательНаселенныйПункт), "", ", " + ПолучательНаселенныйПункт);
		ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(ПолучательУлицаНомерДома), "", ", " + ПолучательУлицаНомерДома);
		мФормаОтчета.Области.ПолучательРеквизиты.Значение = ПолучательРеквизиты;
		
		ОтвЛицоФинУрКоды = ОтвЛицоФинУрРФ_ИНН;
		Если ОтвЛицоФинУр = "ОРГ" ИЛИ ОтвЛицоФинУр = "ПОД" Тогда
			 ОтвЛицоФинУрКоды = ОтвЛицоФинУрКоды + ?(ПустаяСтрока(ОтвЛицоФинУрРФ_КПП), "", " / " + ОтвЛицоФинУрРФ_КПП);
		КонецЕсли;
		мФормаОтчета.Области.ОтвЛицоФинУрКоды.Значение = ОтвЛицоФинУрКоды;
		
		ОтвЛицоФинУрРеквизиты = СокрЛП(СтрЗаменить(ОтвЛицоФинУрНаименование, Символы.ПС, " "));
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрИндекс), "", ", " + ОтвЛицоФинУрИндекс);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрСтранаНаименование), "", ", " + ОтвЛицоФинУрСтранаНаименование);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрОбласть), "", ", " + ОтвЛицоФинУрОбласть);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрНаселенныйПункт), "", ", " + ОтвЛицоФинУрНаселенныйПункт);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрУлицаНомерДома), "", ", " + ОтвЛицоФинУрУлицаНомерДома);
		
		Если ОтвЛицоФинУр = "ПОД" Тогда
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрРеквизиты), "", ", ");
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + СокрЛП(СтрЗаменить(ОтвЛицоФинУрПодНаименование, Символы.ПС, " "));
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПодИндекс), "", ", " + ОтвЛицоФинУрПодИндекс);
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПодСтранаНаименование), "", ", " + ОтвЛицоФинУрПодСтранаНаименование);
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПодОбласть), "", ", " + ОтвЛицоФинУрПодОбласть);
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПодНаселенныйПункт), "", ", " + ОтвЛицоФинУрПодНаселенныйПункт);
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПодУлицаНомерДома), "", ", " + ОтвЛицоФинУрПодУлицаНомерДома);
			
		ИначеЕсли ОтвЛицоФинУр = "ФЛ_" Тогда	
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрПасНомерДок), "", ", " + ОтвЛицоФинУрПасНомерДок);
			ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ЗначениеЗаполнено(ОтвЛицоФинУрПасДатаДок), ", " + Формат(ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"), "");
		
		КонецЕсли; 
				
		мФормаОтчета.Области.ОтвЛицоФинУрРеквизиты.Значение = ОтвЛицоФинУрРеквизиты;
		
		мФормаОтчета.Области.КодВалютыЦеныТовара.Значение = мФормаОтчета.Области.ВалютаТовараКод_1.Значение;
		
		ТаблицаБлока = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы_1, ТаблицаБлока);
		Если ТаблицаБлока <> Неопределено Тогда
			Для НомСтроки = 1 По ТаблицаБлока.Количество() Цикл
				СтрокаДанных = ТаблицаБлока.Получить(НомСтроки - 1);
				ИмяПоказателя = "ДокСтрока" + "_" + Формат(НомСтроки, "ЧГ=");
				ДокСтрока = СокрЛП(СтрокаДанных.ДокВыбор) + ?(ПустаяСтрока(СтрокаДанных.ДокНомер), "", " № " + СокрЛП(СтрокаДанных.ДокНомер));
				ДокСтрока = ДокСтрока + ?(ЗначениеЗаполнено(СтрокаДанных.ДокДата), " от " + Формат(СтрокаДанных.ДокДата,"ДФ=yyyy-MM-dd" ), "");
			    мФормаОтчета.Области[ИмяПоказателя].Значение = ДокСтрока;
			КонецЦикла; 
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейТаблицыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ		
		// Используется, например, в случае изменения точности или единицы измерения
		
		Расчет("ФормаОтчета");
		
	КонецЕсли;

					
КонецПроцедуры // Расчет()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()


// Функция собирает значения реквизитов формы
// в коллекцию значений типа "структура".
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеРеквизитовФормы()

	СтруктураДанныхФормы = Новый Структура;
	
	СтруктураДанныхФормы = ПолучитьПустуюСтруктуруРеквизитовФормы();	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхФормы, ЭтаФорма);
	
	СтруктураДанныхФормы.Вставить("мАдресвФорматеДляВыгрузки", мАдресвФорматеДляВыгрузки);
	
	СтруктураДанныхФормы.Вставить("ОргИндекс", ОргИндекс); 
	СтруктураДанныхФормы.Вставить("ОргСтранаКод", ОргСтранаКод); 
	СтруктураДанныхФормы.Вставить("ОргСтранаНаименование", ОргСтранаНаименование); 
	СтруктураДанныхФормы.Вставить("ОргОбласть", ОргОбласть); 
	СтруктураДанныхФормы.Вставить("ОргНаселенныйПункт", ОргНаселенныйПункт); 
	СтруктураДанныхФормы.Вставить("ОргУлицаНомерДома", ОргУлицаНомерДома);
	
	Возврат СтруктураДанныхФормы;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	// Процедура "заглушка", для роОчистить.
	Возврат;
КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

		//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгФормаОтчета = МногострочностьНастройка.Скопировать();
	НовСтр = МнгФормаОтчета.Добавить();
	НовСтр.ИдГруппы = мИдГруппы_1;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	НовСтр = МнгФормаОтчета.Добавить();
	НовСтр.ИдГруппы = мИдГруппы_2;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 6;
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = МнгФормаОтчета;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСвойствСтраниц();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериод = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	ПериодОтчета = " за " + СтрПериод;

	ПериодОтчетаФормат = Формат(мДатаКонцаПериодаОтчета, "ДФ=ддММгггг");
	мФормаОтчета.Области.ОтчетныйМесяцМ1.Значение = Сред(ПериодОтчетаФормат, 3, 1);
	мФормаОтчета.Области.ОтчетныйМесяцМ2.Значение = Сред(ПериодОтчетаФормат, 4, 1);
	мФормаОтчета.Области.ОтчетныйМесяцГ1.Значение = Сред(ПериодОтчетаФормат, 5, 1);
	мФормаОтчета.Области.ОтчетныйМесяцГ2.Значение = Сред(ПериодОтчетаФормат, 6, 1);
	мФормаОтчета.Области.ОтчетныйМесяцГ3.Значение = Сред(ПериодОтчетаФормат, 7, 1);
	мФормаОтчета.Области.ОтчетныйМесяцГ4.Значение = Сред(ПериодОтчетаФормат, 8, 1);
			
	// Период в заголовке отчета
	//мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;
	
    // Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (" + ПериодОтчета + " )";

  КонецПроцедуры // ПоказатьПериод()
  
//Выделяет из строки ФИО составляющие Фамилия, Имя, Отчество 
Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции
 
// Функция преобразует адрес из формата 9 запятых в структуру,
// поля которой соответствуют схеме выгрузки на портале Федеральной таможенной службы
//
// Параметры
//  АдресВФормате9Запятых  - Строка, адрес в формате 9 запятых
//
// Возвращаемое значение:
//  Структура   - содержит свойства с именами соответствующими схеме выгрузки для ФТС
//
 Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых) Экспорт
	 
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("СтранаКод");
	СтруктураАдреса.Вставить("СтранаНаименование");
	СтруктураАдреса.Вставить("Область");
	СтруктураАдреса.Вставить("НаселенныйПункт");
	СтруктураАдреса.Вставить("УлицаНомерДома");
	СтруктураАдреса.Вставить("Представление", АдресВФормате9Запятых); 
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	ТекПредставление = "";
	
	ТипДома     = "дом";
    Если КоличествоЗапятых > 9 Тогда
		ТипДома = ?(ПустаяСтрока(СоставляющиеАдреса[10]), ТипДома, СоставляющиеАдреса[10]);
	КонецЕсли;	
	ТипКорпуса  = "корпус";
    Если КоличествоЗапятых > 10 Тогда
		ТипКорпуса = ?(ПустаяСтрока(СоставляющиеАдреса[11]), ТипКорпуса, СоставляющиеАдреса[11]);
	КонецЕсли;	
	ТипКвартиры = "кв.";
    Если КоличествоЗапятых > 11 Тогда
		ТипКвартиры = ?(ПустаяСтрока(СоставляющиеАдреса[12]), ТипКвартиры, СоставляющиеАдреса[12]);
	КонецЕсли;	

	Регион = "";
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = РегламентированнаяОтчетность.ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	АдрКодСтраны = СоставляющиеАдреса[0];
	АдрИндекс = СоставляющиеАдреса[1];
	АдрНазваниеРегиона = Регион;
	АдрРайон = СоставляющиеАдреса[3];
	АдрГород = СоставляющиеАдреса[4];
	АдрНаселенныйПункт = СоставляющиеАдреса[5];
	АдрУлица = СоставляющиеАдреса[6];
	АдрДом = СоставляющиеАдреса[7];
	АдрКорпус = СоставляющиеАдреса[8];
	АдрКвартира = СоставляющиеАдреса[9];
	АдрПредставлениеАдреса = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдресВФормате9Запятых);
	
	СтруктураАдреса.Вставить("Индекс", АдрИндекс);
	СтруктураАдреса.Вставить("СтранаКод", ?(АдрКодСтраны = "643", "RU", ""));
	СтруктураАдреса.Вставить("СтранаНаименование", ?(АдрКодСтраны = "643", "РОССИЯ", ""));
	СтруктураАдреса.Вставить("Область", АдрНазваниеРегиона + ?(ПустаяСтрока(АдрРайон), "", ", " + АдрРайон));
	СтруктураАдреса.Вставить("НаселенныйПункт", АдрГород + ?(ПустаяСтрока(АдрНаселенныйПункт), "", ", " + АдрНаселенныйПункт));
	СтруктураАдреса.Вставить("УлицаНомерДома", АдрУлица + ", " + ТипДома + " № " + АдрДом + ?(ПустаяСтрока(АдрКорпус), "", ", " + ТипКорпуса + " " + АдрКорпус)
							+ ?(ПустаяСтрока(АдрКвартира), "", ", " + ТипКвартиры + " " + АдрКвартира));
    СтруктураАдреса.Вставить("Представление", АдрПредставлениеАдреса);
	
	Возврат СтруктураАдреса;
	
КонецФункции
  
// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "ОГРН");  // ОГРН
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");

	КонецЕсли;

	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");
	
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ = "";
		КППЮЛ = "";
		ОГРН  = "";
		АдрПочт    = "";
		НаимЮЛПол  = "";

		ОргСведения.Свойство("ИННЮЛ",           ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",           ИННЮЛ);
		ОргСведения.Свойство("ОГРН",            ОГРН);
		ОргСведения.Свойство("АдрПочт",         АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",       НаимЮЛПол);
		
		СтруктАдрПочт = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдрПочт);
		
		//заполняет реквизиты формы
		ОргИндекс =  СтруктАдрПочт.Индекс;
		ОргСтранаКод = СтруктАдрПочт.СтранаКод;
		ОргСтранаНаименование = СтруктАдрПочт.СтранаНаименование;
		ОргОбласть = СтруктАдрПочт.Область;
		ОргНаселенныйПункт = СтруктАдрПочт.НаселенныйПункт;
		ОргУлицаНомерДома = СтруктАдрПочт.УлицаНомерДома; 
		
	КонецЕсли;
	
	ФИОИсп   = "";
	ДолжнИсп = "";
	ТелИсп   = "";
	АдресЭлПочтыИсп = "";
	
	ОргСведения.Свойство("ФИОИсп",          ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",        ДолжнИсп);
	ОргСведения.Свойство("ТелИсп", 		    ТелИсп);
	ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);

	
	Если ВПрограммеИзмененаДатаПодписи Тогда

		мФормаОтчета.Области.ОргИсполнитель.Значение  = ФИОИсп;
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		мФормаОтчета.Области.ОргТелефонИсп.Значение   = ТелИсп;
        мФормаОтчета.Области.ОргАдресЭлПочты.Значение = АдресЭлПочтыИсп;

		Возврат;
		
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргПочтовыйАдрес.Значение)) Тогда

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мФормаОтчета.Области.ОргПочтовыйАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			
			мФормаОтчета.Области.ОргПочтовыйАдрес.Значение = "";
			мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргТелефонИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргАдресЭлПочты.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргАдресЭлПочты.Значение = АдресЭлПочтыИсп;
	КонецЕсли;

	Если ПустаяСтрока(мФормаОтчета.Области.НаправлениеПеремещения.Значение) Тогда
		мФормаОтчета.Области.НаправлениеПеремещения.Значение = "ИМ";
		НапрПеремещения = мФормаОтчета.Области.НаправлениеПеремещения.Значение;
		ИзмНаправлениеПеремещения();
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдресЭлПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтовыйАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	СтруктураДанныхФормы = Новый Структура;
	
	//Очищает значения показателей в реквизитах формы
	СтруктураДанныхФормы = ПолучитьПустуюСтруктуруРеквизитовФормы();	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхФормы);
	
	//мАдресвФорматеДляВыгрузки = "";
	
	ОргИндекс = ""; 
	ОргСтранаКод = ""; 
	ОргСтранаНаименование = ""; 
	ОргОбласть = ""; 
	ОргНаселенныйПункт = ""; 
	ОргУлицаНомерДома = "";

	//Очищает значения показателей многострочных разделов
	Если ТипЗнч(мСтруктураМногострочныхРазделов) = Тип("Структура") Тогда
		Для каждого МногострочныйРаздел Из мСтруктураМногострочныхРазделов Цикл
			
			СтруктураГруппы = МногострочныйРаздел.Значение; 
			
			Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					ТекСтрокаТаблицы[ИмяКолонки] = "";
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли;	
	
	Расчет();

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Статистическая форма перемещения товаров", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	ОбластиСтроки = Новый Структура;
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	МассивТабДок = Новый Массив;
	МассивТабДок.Добавить(ТабДок.ПолучитьОбласть());
	Попытка
	    ПоШиринеСтраницы = ТабДок.ПроверитьПрисоединение(МассивТабДок);
	Исключение
	   	ПоШиринеСтраницы = Ложь;
		Сообщить("Нет информации о текущем принтере. Документ выводится без разбивки на страницы.", СтатусСообщения.Внимание);
	КонецПопытки;

	Если НЕ ПоШиринеСтраницы Тогда
		ОбластиСтроки.Вставить("Документ", ТабДок.ПолучитьОбласть());
	Иначе
		Т = Новый ТабличныйДокумент;
		НачНомСтр = 1; НомСтраницы = 1;
		ОбластиСтроки.Вставить("Страница" + НомСтраницы, Т);
		НазваниеЗаключительнойЧасти = "ОсновнаяЧасть3";
		НомерПоследнейСтрокиМнЧ = ТабДок.Область(НазваниеЗаключительнойЧасти).Верх - 1;
		НомерСтрокиПустойОбласти = ТабДок.Область(НазваниеЗаключительнойЧасти).Верх + 1;
		Для НомСтр = НачНомСтр По ТабДок.ВысотаТаблицы Цикл
		    ОбластьТабДок = ТабДок.Область(НомСтр,, НомСтр,);
			Если ОбластьТабДок.ВместеСоСледующим ИЛИ (НомСтр = НомерПоследнейСтрокиМнЧ) Тогда
				Продолжить;
			КонецЕсли;
            СекцияТабДок = ТабДок.ПолучитьОбласть(НачНомСтр,, НомСтр,);
            НачНомСтр = НомСтр + 1;
			Если НЕ Т.ПроверитьВывод(СекцияТабДок) Тогда
				Т = Новый ТабличныйДокумент;
				НомСтраницы = НомСтраницы + 1;
				ОбластиСтроки.Вставить("Страница" + НомСтраницы, Т);
				Т.Вывести(ТабДок.ПолучитьОбласть(НомерСтрокиПустойОбласти,, НомерСтрокиПустойОбласти,));
			КонецЕсли;	
			Т.Вывести(СекцияТабДок);
		КонецЦикла;
		Если ТабДок.КоличествоСтраниц() <> НомСтраницы Тогда
			Сообщить("Разделение на страницы прошло некорректно!");
		КонецЕсли;	
	КонецЕсли;	
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = ложь;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ПечатнаяФорма.Вывести(Обл.Значение);
		мПечатныеФормы.Добавить(ПечатнаяФорма, "Статистическая форма перемещения товаров");
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий                = Комментарий;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";

	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	ПоказателиВРеквизитахФормы = СобратьДанныеРеквизитовФормы();
	ПоказателиОтчета.Вставить("ПоказателиФормыОтчета", ПоказателиВРеквизитахФормы);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем Автозаполнение;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) 
		И ДанныеВариановАвтоЗаполнения <> Неопределено Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	
	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		Если ИмяТекТабличноеПоле = "ПоказателиФормыОтчета" Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПоказателиТаблПоле);
			мАдресвФорматеДляВыгрузки = ПоказателиТаблПоле.мАдресвФорматеДляВыгрузки;
		Иначе
			ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				ИмяПоказателя       = Показатель.Ключ;
				ЗначениеПоказателя  = Показатель.Значение;
				
				// установим значение в таблице
				Если НЕ ТекТабличноеПоле.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	мФормаОтчета.Области.ОргПочтовыйАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;
	
	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	
	ТекТабличноеПоле = мФормаОтчета;
	
	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
			
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					
					Если ИменаПоказателейТолькоСтруктура.Найти(ИмяКолонки) <> Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

		// Это новый документ.
		// Установим реквизиты формы по умолчанию
		ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		ТочностьЕдиницыИзмерения = 0;
	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	ПолеВводаДатаСдачиПриИзменении(Неопределено);

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	мБезОткрытияФормы = БезОткрытияФормы;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	
	мРежимПечати = Ложь;
	
	Если НЕ мБезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		
		// формируем список элементов подменю, связанное с кнопкой <Печать>
		ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
		
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		"Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
		
		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		"Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	КонецЕсли;								

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
							
	ФормироватьСтруктуруСвойствСтраниц();							
	
	НачальнаяПодготовкаФормы();

	ТекущийЭлемент = мФормаОтчета;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаФормаОтчетаВыбор
//
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргПочтовыйАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);
		
		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
			
			СтруктураАдреса = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(мАдресвФорматеДляВыгрузки);
			
			ОргИндекс =  СтруктураАдреса.Индекс;
			ОргСтранаКод = СтруктураАдреса.СтранаКод;
			ОргСтранаНаименование = СтруктураАдреса.СтранаНаименование;
			ОргОбласть = СтруктураАдреса.Область;
			ОргНаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
			ОргУлицаНомерДома = СтруктураАдреса.УлицаНомерДома; 
			
			Область.Значение = СтруктураАдреса.Представление;

			Модифицированность = Истина;

		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "Отправитель") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПустаяСтрока(НапрПеремещения) Тогда
			Предупреждение("Выберите направление перемещения товаров (графа 4)");
			Возврат;
		КонецЕсли; 
		
		ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа1", ЭтаФорма);
		
		СписокИсключенийРекв = "Заголовок, ВладелецФормы";
		ЗаполнитьЗначенияСвойств(ВводРеквизитов, ЭтаФорма,, СписокИсключенийРекв);
		
		СтруктураРезультатаВвода = ВводРеквизитов.ОткрытьМодально();
		Если СтруктураРезультатаВвода <> Неопределено  Тогда
		
			 ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураРезультатаВвода);
			 
			 ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область);
			 
		 КонецЕсли;
		 
	ИначеЕсли Найти(Область.Имя, "Получатель") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПустаяСтрока(НапрПеремещения) Тогда
			Предупреждение("Выберите направление перемещения товаров (графа 4)");
			Возврат;
		КонецЕсли; 
		
		ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа2", ЭтаФорма);
		
		СписокИсключенийРекв = "Заголовок, ВладелецФормы";
		ЗаполнитьЗначенияСвойств(ВводРеквизитов, ЭтаФорма,, СписокИсключенийРекв);
		
		СтруктураРезультатаВвода = ВводРеквизитов.ОткрытьМодально();
		Если СтруктураРезультатаВвода <> Неопределено  Тогда
		
			 ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураРезультатаВвода);
			 
			 ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область);
			 
		 КонецЕсли;
		 
	ИначеЕсли Найти(Область.Имя, "ОтвЛицоФинУр") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа3", ЭтаФорма);
		
		СписокИсключенийРекв = "Заголовок, ВладелецФормы, Высота, Ширина";
		ЗаполнитьЗначенияСвойств(ВводРеквизитов, ЭтаФорма,, СписокИсключенийРекв);
		
		ТабВыбораВидыУдостЛичности = КоллекцияСписковВыбора["ВидыУдостЛичности"].Скопировать();
		ТабВыбораВидыУдостЛичности.Колонки.Удалить(3);
		ТабВыбораВидыУдостЛичности.Колонки[1].Заголовок = "Кратко"; 
		ТабВыбораВидыУдостЛичности.Колонки[1].Ширина = ТабВыбораВидыУдостЛичности.Колонки[0].Ширина * 3;
		ТабВыбораВидыУдостЛичности.Колонки[2].Заголовок = "Наименование"; 
		ТабВыбораВидыУдостЛичности.Колонки[2].Ширина = ТабВыбораВидыУдостЛичности.Колонки[0].Ширина * 8;
		ВводРеквизитов.ВидыУдостЛичности = ТабВыбораВидыУдостЛичности;
		
		СтруктураРезультатаВвода = ВводРеквизитов.ОткрытьМодально();
		Если СтруктураРезультатаВвода <> Неопределено  Тогда
		
			 ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураРезультатаВвода);
			 
			 ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область);
			 
		КонецЕсли;
		
	ИначеЕсли Найти(Область.Имя, "ДокСтрока") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НомСтроки = Число(Сред(СтрЗаменить(Область.Имя, "ДокСтрока", ""), 2));
		
		ВводДокумента = ПолучитьФорму("ФормаВводаДокумента", ЭтаФорма);
		
		ТаблицаБлока = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы_1, ТаблицаБлока);
		Если ТаблицаБлока <> Неопределено Тогда
			СтрокаДанных = ТаблицаБлока.Получить(НомСтроки - 1);
			ЗаполнитьЗначенияСвойств(ВводДокумента, СтрокаДанных);
			
			СтруктураРезультатаВвода = ВводДокумента.ОткрытьМодально();
			
			Если СтруктураРезультатаВвода <> Неопределено  Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураРезультатаВвода);
				ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область);
			КонецЕсли; 
		КонецЕсли;
		
	Иначе	
		
		СтандартнаяОбработка = Истина;
		
		ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
		
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаВыбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры // Очистить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

Процедура ИзмНаправлениеПеремещения()
	
	Если НапрПеремещения = "ИМ" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "БЕЛАРУСЬ";
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "РОССИЯ";
		СтранаОтправления = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаОтправленияКод.Значение);
		ОтправительСтранаКод = мФормаОтчета.Области.СтранаОтправленияКод.Значение;
		ОтправительСтранаНаименование = мФормаОтчета.Области.СтранаОтправленияНаименование.Значение;
		СтранаНазначения  = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаНазначенияКод.Значение);
		ПолучательСтранаКод = мФормаОтчета.Области.СтранаНазначенияКод.Значение;
		ПолучательСтранаНаименование = мФормаОтчета.Области.СтранаНазначенияНаименование.Значение;
	ИначеЕсли НапрПеремещения = "ЭК" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "РОССИЯ";
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "БЕЛАРУСЬ";
		СтранаОтправления = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаОтправленияКод.Значение);
		ОтправительСтранаКод = мФормаОтчета.Области.СтранаОтправленияКод.Значение;
		ОтправительСтранаНаименование = мФормаОтчета.Области.СтранаОтправленияНаименование.Значение;
		СтранаНазначения  = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаНазначенияКод.Значение);
		ПолучательСтранаКод = мФормаОтчета.Области.СтранаНазначенияКод.Значение;
		ПолучательСтранаНаименование = мФормаОтчета.Области.СтранаНазначенияНаименование.Значение;
	КонецЕсли;	
	
КонецПроцедуры	

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ДатаПодписиФормат = Формат(ДатаПодписи, "ДФ=ддММгггг");
	мФормаОтчета.Области.ДатаЗаполненияД1.Значение = Сред(ДатаПодписиФормат, 1, 1);
	мФормаОтчета.Области.ДатаЗаполненияД2.Значение = Сред(ДатаПодписиФормат, 2, 1);
	мФормаОтчета.Области.ДатаЗаполненияМ1.Значение = Сред(ДатаПодписиФормат, 3, 1);
	мФормаОтчета.Области.ДатаЗаполненияМ2.Значение = Сред(ДатаПодписиФормат, 4, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ1.Значение = Сред(ДатаПодписиФормат, 5, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ2.Значение = Сред(ДатаПодписиФормат, 6, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ3.Значение = Сред(ДатаПодписиФормат, 7, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ4.Значение = Сред(ДатаПодписиФормат, 8, 1);
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Расчет();
	Модифицированность = Истина;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, "ФормаОтчета", "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов+++
//и связанные с ними процедуры - функции по работе с многострочными блоками

Процедура КнопкаУдалитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	Расчет();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();

КонецПроцедуры

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;

	//РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, мИдГруппы_1);
	//РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, мИдГруппы_2);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			Если ИменаПоказателейТолькоСтруктура.Найти(ИмяКолонки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 

			ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;
	
	Раздел = ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
		
		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
		
		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;
		
		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
		
		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		
		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			
			// Переопределим именованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Если ИменаПоказателейТолькоСтруктура.Найти(КолИмя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;
			
			// Заполняем строку.
			СтрокаТаблицы = СтруктураГруппы[НомНовойСтроки - 1];
			Для каждого Колонка Из СтруктураГруппы.Колонки Цикл
				КолонкаИмя = Колонка.Имя;
				Если ИменаПоказателейТолькоСтруктура.Найти(КолонкаИмя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				НазвЯчейки = КолонкаИмя + "_" + НомСтр;
				Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
					Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
				Иначе
					Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
				КонецЕсли;
			КонецЦикла;
			
			ТаблДок.Вывести(Строка1);
			
		КонецЦикла;
		
		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);
		
		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			Если ИменаПоказателейТолькоСтруктура.Найти(КолонкаТаблицыИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
			
			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	
	Возврат мФормаОтчета;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	
		Если ИмяЛиста = Неопределено Тогда
		    ИмяЛиста = "ФормаОтчета";
		КонецЕсли; 
		
		ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста];
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		
		ИмяГруппы = РазделТекущейОбласти(ТекущаяОбласть);
		
		Если ИмяГруппы = Неопределено Тогда
			Возврат мИдГруппы_1;	
		КонецЕсли;
		
		Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);		
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки  = Колонка.Имя;
		
		Если ИменаПоказателейТолькоСтруктура.Найти(ИмяКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
			Если Найти(ИмяОбластиЯчейки, "ВалютаТовараКод") > 0 Тогда  //назначим валюту товара по первой строке
				ОбластьЯчейки.Значение = ТекТабличноеПоле.Области["ВалютаТовараКод_1"].Значение;
			КонецЕсли;	
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;
		Если ИмяГруппы = мИдГруппы_2 Тогда  //Для этой группы - вторую
			ИмяТекущейОбласти = СтруктураГруппы.Колонки[1].Имя + "_" + КолСтрокСтр1;	
		КонецЕсли; 
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ИмяГруппы = Неопределено, Спросить = Истина) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = "ФормаОтчета";
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = РазделТекущейОбласти(ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если Спросить Тогда
	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	  Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					КолонкаИмя = Колонка.Имя;
					
					Если ИменаПоказателейТолькоСтруктура.Найти(КолонкаИмя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	Если ИмяГруппы = мИдГруппы_2 Тогда  //Для этой группы - вторую
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[1].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");	
	КонецЕсли; 

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Функция проверяет вхождение области ячеек табличного документа 
// в многострочный раздел.
//
// Параметры:
//  ТекущаяОбласть - область ячеек табличного документа;
//
// Возвращаемое значение:
//  строка, имя раздела, содержащего искомую область ячеек.
//  В случае, когда область не входит ни в какой многострочный раздел,
//  возвращает Неопределено.
//
Функция РазделТекущейОбласти(ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;

	ИмяТекущейОбласти   = ТекущаяОбласть.Имя;
	
	ПозРазд = 0;
	ИмяАктивногоРаздела = ИмяТекущейОбласти;
	ИмяТекущейОбластиДлина = СтрДлина(ИмяТекущейОбласти);
	Для Поз = 1 По ИмяТекущейОбластиДлина  Цикл
		Сим = Сред(ИмяТекущейОбласти, ИмяТекущейОбластиДлина - Поз + 1, 1);
		Если Сим = "_" Тогда
			 ПозРазд = ИмяТекущейОбластиДлина - Поз + 1;
		     Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПозРазд > 0 Тогда
		
		ЧастьПослеРазделителя = Сред(ИмяТекущейОбласти, ПозРазд + 1);
		
		ЭтоЧисло = Истина;
		Попытка
			ЧастьПослеРазделителяЧисло = Число(ЧастьПослеРазделителя);
		Исключение
			ЭтоЧисло = Ложь;
		КонецПопытки;
		
		Если ЭтоЧисло Тогда
			ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ПозРазд - 1);
		КонецЕсли; 
		
	КонецЕсли; 

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		Если СтруктураГруппы.Колонки.Найти(ИмяАктивногоРаздела) <> Неопределено Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Функция определяет, входит ли переданный показатель в многострочную часть (для этой формы с "нестандартными" показателями)
// Параметры:
// ИмяПоказателя - строка, имя показателя
//
// Возврат:
// 0 - показатель не входит в многострочный блок
// >0 кол-во строк в многострочной части
//
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя) Экспорт

	ПозРазд = 0;
	ИмяПоказателяВСтруктуре = ИмяПоказателя;
	ИмяПоказателяДлина = СтрДлина(ИмяПоказателя);
	Для Поз = 1 По ИмяПоказателяДлина  Цикл
		Сим = Сред(ИмяПоказателя, ИмяПоказателяДлина - Поз + 1, 1);
		Если Сим = "_" Тогда
			 ПозРазд = ИмяПоказателяДлина - Поз + 1;
		     Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПозРазд > 0 Тогда
		ЧастьПослеРазделителя = Сред(ИмяПоказателя, ПозРазд + 1);
		
		ЭтоЧисло = Истина;
		Попытка
			ЧастьПослеРазделителяЧисло = Число(ЧастьПослеРазделителя);
		Исключение
			ЭтоЧисло = Ложь;
		КонецПопытки;
		
		Если ЭтоЧисло Тогда
			ИмяПоказателяВСтруктуре = Лев(ИмяПоказателя, ПозРазд - 1);
		КонецЕсли; 
	КонецЕсли; 
 	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		Если СтруктураГруппы.Колонки.Найти(ИмяПоказателяВСтруктуре) <> Неопределено Тогда
			Возврат СтруктураГруппы.Количество();
		КонецЕсли;
	КонецЦикла;

	Возврат 0;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//
// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "") Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	ИмяФайлаВыгрузки = Параметры.ИмяФайла;
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, ИмяФайлаВыгрузки);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, ИмяФайлаXML)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + ИмяФайлаXML;
		ЗаписатьТекстНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузкиXML2011Кв1");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВыгружаемыеПоказателиРаздела(Узел, Раздел, МассивРезультат = Неопределено)
	
	ТипУзла = ТипЗнч(Узел);
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		МассивРезультат = Новый Массив;
	ИначеЕсли СокрЛП(Узел.Раздел) = СокрЛП(Раздел) Тогда
		МассивРезультат.Добавить(Узел);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ВыгружаемыеПоказателиРаздела = ПолучитьВыгружаемыеПоказателиРаздела(Стр, Раздел, МассивРезультат);
	КонецЦикла;
	
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СистемныйНомер");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если Найти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	Если НЕ (Параметры.НапрПеремещения = "ИМ" ИЛИ Параметры.НапрПеремещения = "ЭК") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заданы основные реквизиты формы и направление перемещения товаров!", ИмяПоляТаблДокумента, "НаправлениеПеремещения");
		СтатусПроверки = Ложь;
	КонецЕсли;

	Если ПустаяСтрока(Параметры.мАдресвФорматеДляВыгрузки) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан почтовый адрес оганизации!", ИмяПоляТаблДокумента, "ОргПочтовыйАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
									
	Если ПустаяСтрока(Параметры.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической формы!", ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана должность лица, ответственного за предоставление статистической формы!", ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан телефон должностного лица, ответственного за предоставление статистической формы!", ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, ИмяПоляТаблДокумента) Тогда
		
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнена форма отчета", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда 
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					Если НомСтр = 1 Тогда
					    НовыйУзел = Стр;
					Иначе	
						НовыйУзел = СкопироватьУзел(Узел, Стр);
					КонецЕсли; 
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		//ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		//ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		//ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТекстНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.UTF8);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИмяФайла(Параметры)
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = "Export_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HHmmss") + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
				
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	Инициализация(Истина);
	
	Параметры = Новый Структура;
	
	Параметры = СобратьДанныеРеквизитовФормы();
	
	Параметры.Вставить("СистемныйНомер", СокрЛП(ТабДокумент.СистемныйНомер));
	
	УникальныйИД = СокрЛП(мСохраненныйДок.Ссылка.УникальныйИдентификатор());
	Параметры.Вставить("УникальныйИД", СокрЛП(УникальныйИД));

	ОтчетныйМесяц  = Формат(НачалоМесяца(мСохраненныйДок.ДатаОкончания),"ДФ=yyyy-MM");
	ДатаЗаполнения = Формат(мСохраненныйДок.ДатаПодписи,"ДФ=yyyy-MM-dd");
	Параметры.Вставить("ОтчетныйМесяц", СокрЛП(ОтчетныйМесяц));
	Параметры.Вставить("ДатаЗаполнения", СокрЛП(ДатаЗаполнения));
	
	Параметры.Вставить("ВидТранспортаКод", СокрЛП(ТабДокумент.ВидТранспортаКод));
	Параметры.Вставить("ТоргующаяСтранаКод", СокрЛП(ТабДокумент.ТоргующаяСтранаКод));
	Параметры.Вставить("ТоргующаяСтранаНаименование", СокрЛП(ТабДокумент.ТоргующаяСтранаНаименование));
	
	Параметры.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ОргФИОИсп = РазложитьФИО(ТабДокумент.ОргИсполнитель);
	
	Параметры.Вставить("ОргФамилияИсп", СокрЛП(ОргФИОИсп.Фамилия));
	Параметры.Вставить("ОргИмяИсп", СокрЛП(ОргФИОИсп.Имя));
	Параметры.Вставить("ОргОтчествоИсп", СокрЛП(ОргФИОИсп.Отчество));
	Параметры.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	Параметры.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	Параметры.Вставить("ОргАдресЭлПочты", СокрЛП(ТабДокумент.ОргАдресЭлПочты));
	
	Параметры.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат(Параметры.ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"));
 
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры));
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Documents");
	
	//Добавляет показатели из многострочных разделов
	Если ТипЗнч(мСтруктураМногострочныхРазделов) = Тип("Структура") Тогда
		Для каждого МногострочныйРаздел Из мСтруктураМногострочныхРазделов Цикл
			
			СтруктураГруппы = МногострочныйРаздел.Значение; 
			
			Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяКолонки    = Колонка.Имя;
					
					ИмяПоказателя      = ИмяКолонки + "_" + НСтрСтр;
					ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
					Параметры.Вставить(ИмяПоказателя, ЗначениеПоказателя);
					
					Если ИмяКолонки = "ДокДата" Тогда
					  	НовоеИмяПоказателя = ИмяКолонки + "Формат_" + НСтрСтр;
						Параметры.Вставить(НовоеИмяПоказателя, Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли;	
		
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2011Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			ТаблСписка.Колонки.Добавить("Норматив",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					НовСтрока.Норматив = СокрП(МакетСоставаПоказателей.Область(НомСтр, 4).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");         
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "НаправлениеПеремещения", 2, , "Направление перемещения (выбор)", КоллекцияСписковВыбора["НапрПеремещения"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаОтправленияКод", 2, , "Страна отправления (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаОтправленияНаименование", 40, , "Страна отправления (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаНазначенияКод", 2, , "Страна назначения (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаНазначенияНаименование", 40, , "Страна назначения (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТоргующаяСтранаКод", 2, , "Торгующая страна (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТоргующаяСтранаНаименование", 40, , "Торгующая страна (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаТовараКод", 2, , "Страна происхождения товара (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтранаТовараНаименование", 40, , "Страна происхождения товара (выбор)", КоллекцияСписковВыбора["КлСтранМира"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидТранспортаКод", 2, , "Вид транспорта на границе (выбор)", КоллекцияСписковВыбора["КлВидовТранспорта"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидТранспортаНаименование", 50, , "Вид транспорта на границе(выбор)", КоллекцияСписковВыбора["КлВидовТранспорта"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВалютаТовараКод", 2, , "Выбор валюты цены товара", КоллекцияСписковВыбора["КлВалют"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ЕдИзмТовараКратко", 50, , "Вид транспорта на границе(выбор)", КоллекцияСписковВыбора["КлЕдИзмерения"]);
	
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции 

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		//Определение ТребРезультат+++
		//проверка и удаление вариантов происходит для отдельных показателей
		//внутри происходит проверка: требуется ли сокращать список и по какому значению результата проверки
		//если будет требуемый результат проверки условий, отличный от нуля, то будет проверка
		//конструкция проверки должна предусматривать наличие нескольких критериев
		//Примечание: для последующего корректного удаления ТребРезультат следует определять числом
		ТребРезультат = 0;
		//Определение ТребРезультат---
		Если Найти(ИмяЯчейки, "СтранаОтправления") > 0 ИЛИ Найти(ИмяЯчейки, "СтранаНазначения") > 0 Тогда
			ТребРезультат = 1;
		КонецЕсли;	
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		Если Найти(ИмяЯчейки, "СтранаОтправления") > 0 Тогда
			ОбластьНаправлениеПеремещения = Элемент.Области.НаправлениеПеремещения;
			ТекСтрока = ТЗВыбора.Найти("RU", "Код");
			Если ОбластьНаправлениеПеремещения.Значение = "ИМ" Тогда
				Если ТекСтрока <> Неопределено Тогда
					ТЗВыбора.Удалить(ТекСтрока);
				КонецЕсли;  
			ИначеЕсли ОбластьНаправлениеПеремещения.Значение = "ЭК" Тогда	
				Если ТекСтрока <> Неопределено Тогда
					КопируемыеСтроки = Новый Массив;
					КопируемыеСтроки.Добавить(ТекСтрока);
					ТЗВыбора = ТЗВыбора.Скопировать(КопируемыеСтроки);
				КонецЕсли;  
			КонецЕсли;	
		КонецЕсли;	
		Если Найти(ИмяЯчейки, "СтранаНазначения") > 0 Тогда
			ОбластьНаправлениеПеремещения = Элемент.Области.НаправлениеПеремещения;
			ТекСтрока = ТЗВыбора.Найти("RU", "Код");
			Если ОбластьНаправлениеПеремещения.Значение = "ЭК" Тогда
				Если ТекСтрока <> Неопределено Тогда
					ТЗВыбора.Удалить(ТекСтрока);
				КонецЕсли;  
			ИначеЕсли ОбластьНаправлениеПеремещения.Значение = "ИМ" Тогда	
				Если ТекСтрока <> Неопределено Тогда
					КопируемыеСтроки = Новый Массив;
					КопируемыеСтроки.Добавить(ТекСтрока);
					ТЗВыбора = ТЗВыбора.Скопировать(КопируемыеСтроки);
				КонецЕсли;  
			КонецЕсли;	
		КонецЕсли;	
		
		КолонкаПоиска = "Код";
		
		ТЗВыбора.Колонки.Удалить(3); //удаление колонки "Норматив"

		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		Если Найти(ИмяЯчейки, "ВалютаТовара") > 0 ИЛИ Найти(ИмяЯчейки, "ЕдИзмТовара") > 0 Тогда
			
			ТЗВыбора.Колонки[1].Ширина = ТЗВыбора.Колонки[0].Ширина * 2;
			ТЗВыбора.Колонки[1].Заголовок = "Кратко";
			ТЗВыбора.Колонки[2].Заголовок = "Наименование";
			КолонкаПоиска = "Название";

		Иначе
			
			ТЗВыбора.Колонки.Удалить(2);
			
		КонецЕсли;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		Если Найти(Врег(Область.Имя), "ТОРГУЮЩАЯСТРАНА") > 0 Тогда
			ИсходноеЗначение = СокрЛП(Элемент.Области.ТоргующаяСтранаКод.Значение);
		ИначеЕсли Найти(Врег(Область.Имя), "СТРАНАОТПРАВЛЕНИЯ") > 0 Тогда
			ИсходноеЗначение = СокрЛП(Элемент.Области.СтранаОтправленияКод.Значение);
		ИначеЕсли Найти(Врег(Область.Имя), "СТРАНАНАЗНАЧЕНИЯ") > 0	Тогда
			ИсходноеЗначение = СокрЛП(Элемент.Области.СтранаНазначенияКод.Значение);
		ИначеЕсли Найти(Врег(Область.Имя), "ВИДТРАНСПОРТА") > 0 Тогда	
			ИсходноеЗначение = СокрЛП(Элемент.Области.ВидТранспортаКод.Значение);
		КонецЕсли;	
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		Если Найти(Врег(Область.Имя), "СТРАНАТОВАРА") > 0 Тогда
			ИмяОбласти = "СтранаТовараКод" + СтрЗаменить(Область.Имя, КодПоказателя, "");
			ИсходноеЗначение = "";
			Если ТекущийЭлемент.Области.Найти(ИмяОбласти) <> Неопределено Тогда
				ИсходноеЗначение = СокрЛП(ТекущийЭлемент.Области[ИмяОбласти].Значение);
			КонецЕсли;
		ИначеЕсли Найти(Врег(Область.Имя), "ВАЛЮТАТОВАРАКОД") > 0 ИЛИ Найти(Врег(Область.Имя), "ЕДИЗМТОВАРАКРАТКО") > 0 Тогда
			ИсходноеЗначение = СокрЛП(Область.Значение);
			Если ПустаяСтрока(ИсходноеЗначение) И НЕ ПустаяСтрока(ТекущийЭлемент.Области.КодВалютыЦеныТовара.Значение) Тогда
				ИсходноеЗначение = СокрЛП(ТекущийЭлемент.Области.КодВалютыЦеныТовара.Значение);
			КонецЕсли;	
		Иначе	
			ИндексОбласти = 1;
			ИсходноеЗначение = "";
			Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
				ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
				ИндексОбласти = ИндексОбласти + 1;
			КонецЦикла;
			ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		КонецЕсли;
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ ПоказательВходитВМногострочнуюЧасть(КодПоказателя) > 0 Тогда
		ОбластьИмя = Область.Имя;
		Если Найти(Врег(КодПоказателя), "ТОРГУЮЩАЯСТРАНА") > 0 Тогда
			ИмяКод = "ТоргующаяСтранаКод";
			ИмяНаименование = "ТоргующаяСтранаНаименование";
			ТекущийЭлемент.Области[ИмяКод].Значение = РезультатВыбора[0];
			ТекущийЭлемент.Области[ИмяНаименование].Значение = РезультатВыбора[1];
		ИначеЕсли Найти(Врег(Область.Имя), "СТРАНАОТПРАВЛЕНИЯ") > 0 Тогда
			ИмяКод = "СтранаОтправленияКод";
			ИмяНаименование = "СтранаОтправленияНаименование";
			ТекущийЭлемент.Области[ИмяКод].Значение = РезультатВыбора[0];
			ТекущийЭлемент.Области[ИмяНаименование].Значение = РезультатВыбора[1];
		ИначеЕсли Найти(Врег(Область.Имя), "СТРАНАНАЗНАЧЕНИЯ") > 0 Тогда
			ИмяКод = "СтранаНазначенияКод";
			ИмяНаименование = "СтранаНазначенияНаименование";
			ТекущийЭлемент.Области[ИмяКод].Значение = РезультатВыбора[0];
			ТекущийЭлемент.Области[ИмяНаименование].Значение = РезультатВыбора[1];
		ИначеЕсли Найти(Врег(КодПоказателя), "СТРАНАТОВАРА") > 0  Тогда
			ИмяКод = "СтранаТовараКод" + СтрЗаменить(ОбластьИмя, КодПоказателя, "");
			ИмяНаименование = "СтранаТовараНаименование" + СтрЗаменить(ОбластьИмя, КодПоказателя, "");
			ТекущийЭлемент.Области[ИмяКод].Значение = РезультатВыбора[0];
			ТекущийЭлемент.Области[ИмяНаименование].Значение = РезультатВыбора[1];
		ИначеЕсли Найти(Врег(КодПоказателя), "ВИДТРАНСПОРТА") > 0  Тогда
			ИмяКод = "ВидТранспортаКод";
			ИмяНаименование = "ВидТранспортаНаименование";
			ТекущийЭлемент.Области[ИмяКод].Значение = РезультатВыбора[0];
			ТекущийЭлемент.Области[ИмяНаименование].Значение = "";
		ИначеЕсли Найти(Врег(КодПоказателя), "ЕДИЗМТОВАРА") > 0  Тогда
			ИмяНаименование = "ЕдИзмТовараКратко" + СтрЗаменить(ОбластьИмя, КодПоказателя, "");
			ТекущийЭлемент.Области[ИмяНаименование].Значение = РезультатВыбора[1];
			НомСтроки = Число(Сред(СтрЗаменить(ОбластьИмя, КодПоказателя, ""), 2));
			ТаблицаБлока = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы_2, ТаблицаБлока);
			Если ТаблицаБлока <> Неопределено Тогда
				ТекущаяСтрока = ТаблицаБлока.Получить(НомСтроки-1);
				ТекущаяСтрока.ЕдИзмТовараКод = РезультатВыбора[0];
			КонецЕсли;
		Иначе
			Область.Значение = РезультатВыбора[КолонкаПоиска];
		КонецЕсли; 
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ВалютаТовараКод_1" Тогда
		 ТекущийЭлемент.Области.КодВалютыЦеныТовара.Значение = ТекущийЭлемент.Области[ИмяПоказателя].Значение;
	КонецЕсли; 
	
	Если ИмяПоказателя = "НаправлениеПеремещения" Тогда
		 НапрПеремещения = ТекущийЭлемент.Области[ИмяПоказателя].Значение;
		 ИзмНаправлениеПеремещения();
		 Расчет();
	КонецЕсли; 
	
	Если Найти(Врег(ИмяПоказателя), "СТРАНАОТПРАВЛЕНИЯ") > 0 Тогда
		СтранаОтправления = СтранаКраткоПоКоду(ТекущийЭлемент.Области.СтранаОтправленияКод.Значение);
		ОтправительСтранаКод = ТекущийЭлемент.Области.СтранаОтправленияКод.Значение;
		ОтправительСтранаНаименование = ТекущийЭлемент.Области.СтранаОтправленияНаименование.Значение;
		Расчет();
	КонецЕсли;		
	
	Если Найти(Врег(ИмяПоказателя), "СТРАНАНАЗНАЧЕНИЯ") > 0 Тогда
		СтранаНазначения = СтранаКраткоПоКоду(ТекущийЭлемент.Области.СтранаНазначенияКод.Значение);
		ПолучательСтранаКод = ТекущийЭлемент.Области.СтранаНазначенияКод.Значение;
		ПолучательСтранаНаименование = ТекущийЭлемент.Области.СтранаНазначенияНаименование.Значение;
		Расчет();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)
	
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(Параметр = Неопределено) Экспорт 
	
	мОргРасшифровка = Организация; 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
		
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	
	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
			
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					СтрУровня2Имя = СтрУровня2.Имя;
					УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// добавляем показатели в внешнего файла
	//ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);

	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьАвто()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()
 
// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	Перем Комментарий;

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(,ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	Если ВариантЗаполнения = 1 ИЛИ 
		ВариантЗаполнения = 2 ИЛИ
		ВариантЗаполнения = 3 Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Дельта            = НайденнаяСтрока.Дельта;
		Комментарий       = НайденнаяСтрока.Комментарий;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
		ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

	ИначеЕсли ВариантЗаполнения = 0 Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
	КонецЕсли;


КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)
	
	ИмяТекущейСтраницыПанели = "ФормаОтчета";
	
	КолвоМногострочныхБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМногострочныхБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМногострочныхБлоков = КолвоМногострочныхБлоков.Количество();
	КонецЕсли;
	Если КолвоМногострочныхБлоков > 0 Тогда

		ТекущаяОбласть = Элемент.ТекущаяОбласть;
		ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть, ИмяТекущейСтраницыПанели);

	КонецЕсли;

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = "ФормаОтчета";
	КонецЕсли;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);
		КнопкаУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавить <> Неопределено И КнопкаУдалить <> Неопределено Тогда
			Если РазделТекущейОбласти(ТекущаяОбласть) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
				КнопкаУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
				КнопкаУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();

КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчетСтатистикаФормаП6_2011", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	ИзменитьТаблицуВариантовЗаполнения(НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры

//Процедура роИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь) Экспорт
	
	Перем МассивВариантовЗаполненияСтраниц;
	ИмяСтраницы = "ФормаОтчета";
	// Всегда получим актуальную таблицу заполнения. Не эталонную.
	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницы);
	
	Если НЕ ПолныйРучнойВвод Тогда
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			Если Строка.ВариантЗаполнения = 4 Тогда
				Строка.ВариантЗаполнения = 0; // полный ручной ввод
			КонецЕсли;
		КонецЦикла; // Для Каждого Строка Из
		
		УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
		
		
	ИначеЕсли ПолныйРучнойВвод Тогда
		
		// Всё в эталонном виде
		Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
			Если Стр.ВариантЗаполнения = 0 Тогда
				Стр.ВариантЗаполнения = 4
			КонецЕсли;
		КонецЦикла;
		
		УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
		
	КонецЕсли;
	
КонецПроцедуры // Процедура роИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

////////////////////////////////////////////////////////////////////////////////

Функция СтранаКраткоПоКоду(КодСтраныИзКлассификатора)
	СоответствиеСокращений = Новый Соответствие;
	СоответствиеСокращений.Вставить("RU", "РФ");
	СоответствиеСокращений.Вставить("BY", "РБ");
	СоответствиеСокращений.Вставить("KZ", "РК");
	СтранаКратко = СоответствиеСокращений.Получить(СокрЛП(КодСтраныИзКлассификатора));
	Если СтранаКратко = Неопределено Тогда
		СтранаКратко = СоответствиеСокращений[0];
	КонецЕсли;
	Возврат СтранаКратко;
КонецФункции	

// Существует ли в конфигурации справочник <ИмяСправочника>
//
// Возвращаемое значение:
//   Булево - Истина - справочник есть в конфигурации
//
Функция СуществуетСправочник(ИмяСправочника) Экспорт

	Если Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Есть ли у справочника <ИмяСправочника> реквизит <ИмяРеквизитаСправочника>
//
// Возвращаемое значение:
//   Булево - Истина - если у справочника есть такой реквизит
//
Функция ЕстьРеквизитСправочника(ИмяСправочника, ИмяРеквизитаСправочника) Экспорт

	Если НЕ СуществуетСправочник(ИмяСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;		
		
	Если Метаданные.Справочники[ИмяСправочника].Реквизиты.Найти(ИмяРеквизитаСправочника) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Получает адресную информацию и коды из справочника <ИмяСправочника>
//
// Возвращаемое значение:
//   Структура - Адрес, Наименование, ИНН, КПП, ОГРН
//
Функция ПолучитьСведенияИзСправочника(Элемент, ИмяСправочника, ВыбранноеЗначение = Неопределено) Экспорт
	
	СправочникДляВыбора = Справочники[ИмяСправочника];
	НачЗначениеВыбора = Организация;
	
	ИмяРеквизита = "НаименованиеПолное";
	Если ИмяСправочника = "ФизическиеЛица" Тогда
		ИмяРеквизита = "Наименование";	
	КонецЕсли;	
	ЗначениеОтбора = СокрП(Элемент.Значение);
	ДлЗначения = ?(СтрДлина(ЗначениеОтбора) = 0, 1, СтрДлина(ЗначениеОтбора));
	ДлЗначенияСтр = Формат(ДлЗначения, "ЧН=; ЧГ=");
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	%Справочник%.Ссылка,
	|	%Справочник%.%ИмяРеквизита%
	|ИЗ
	|	Справочник.%Справочник% КАК %Справочник%
	|ГДЕ
	|	ВЫРАЗИТЬ(%Справочник%.%ИмяРеквизита% КАК Строка(" + ДлЗначенияСтр + ")) = &ЗначениеОтбора";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Справочник%", ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизита%", ИмяРеквизита);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ЗначениеОтбора", ЗначениеОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НачЗначениеВыбора = Выборка.Получить(0);
	КонецЕсли; 
	
	СтруктураСведений = Новый Структура("Адрес, Наименование, ИНН, КПП, ОГРН");
	
	ФормаВыбора = СправочникДляВыбора.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.НачальноеЗначениеВыбора = НачЗначениеВыбора;
	
	Если ИмяСправочника = "Организации" Тогда
		ФормаВыбора.Отбор.Ссылка.Значение = Организация;
		ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.Отбор.Ссылка.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли; 
	
	ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат СтруктураСведений;
	КонецЕсли;
	
	Если ИмяСправочника = "Организации" Тогда
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "АдрЮР");   // Юридический адрес
		Сведения.Добавить("", "ИННЮЛ");   // ИНН
		Сведения.Добавить("", "КППЮЛ");   // КПП
		Сведения.Добавить("", "ОГРН");    // ОГРН
		
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ВыбранноеЗначение, ДатаПодписи, Сведения);
		
		СтруктураСведений.Вставить("Наименование", ВыбранноеЗначение.НаименованиеПолное);
		ЗначениеСвойства = "";
		ОргСведения.Свойство("АдрЮР", ЗначениеСвойства);
		СтруктураСведений.Вставить("Адрес", ЗначениеСвойства);
		ЗначениеСвойства = "";
		ОргСведения.Свойство("ИННЮЛ",   ЗначениеСвойства);
		СтруктураСведений.Вставить("ИНН", ЗначениеСвойства);
		ЗначениеСвойства = "";
		ОргСведения.Свойство("КППЮЛ",   ЗначениеСвойства);
		СтруктураСведений.Вставить("КПП", ЗначениеСвойства);
		ЗначениеСвойства = "";
		ОргСведения.Свойство("ОГРН",    ЗначениеСвойства);
		СтруктураСведений.Вставить("ОГРН", ЗначениеСвойства);
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "АдрЮР");   // Юридический адрес
		
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбКонтрагенте(ВыбранноеЗначение, ДатаПодписи, Сведения);
		
		СтруктураСведений.Вставить("Наименование", ВыбранноеЗначение.НаименованиеПолное);
		ЗначениеСвойства = "";
		ОргСведения.Свойство("АдрЮР", ЗначениеСвойства);
		СтруктураСведений.Вставить("Адрес", ЗначениеСвойства);
		СтруктураСведений.Вставить("ИНН",  ВыбранноеЗначение.ИНН);
		СтруктураСведений.Вставить("КПП",  ВыбранноеЗначение.КПП);
	
	ИначеЕсли ИмяСправочника = "ФизическиеЛица" Тогда		
		
		СтруктураСведений.Вставить("Наименование", ВыбранноеЗначение.Наименование);
		
		Попытка
			ДанныеФЛ = Новый Структура("Объект, Тип, Вид", ВыбранноеЗначение, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(ДанныеФЛ);
			Если Результат <> Неопределено Тогда
				СтруктураСведений.Вставить("Адрес", АдресВФормате9ЗапятыхДляФЛ(Результат));
			КонецЕсли; 
			
			СтруктураСведений.Вставить("ИНН",  ВыбранноеЗначение.ИНН);
			
			Удостоверения = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(ДатаПодписи, Новый Структура("ФизЛицо", ВыбранноеЗначение));
			Если Удостоверения.Количество() > 0 Тогда
				СтруктураСведений.Вставить("Удостоверения", Удостоверения[0]);
			КонецЕсли;
		Исключение КонецПопытки;
		
	КонецЕсли; 
	
	Возврат СтруктураСведений;	
	
КонецФункции

// Функция возвращает значение адреса в формате "9 запятых" по переданной в качестве параметра записи
// регистра сведений КонтактнаяИнформация.
// Параметры:
//		Запись - ссылка на запись регистра сведений КонтактнаяИнформация.
// Возвращаемое значение:
//		Строка - адрес в формате "9 запятых"
Функция АдресВФормате9ЗапятыхДляФЛ(Запись)
	
	АдресБезКодастраны = СокрЛП(Запись.Поле1) + "," + СокрЛП(Запись.Поле2) + "," + СокрЛП(Запись.Поле3) + "," + 
						СокрЛП(Запись.Поле4) + "," + СокрЛП(Запись.Поле5) + "," + СокрЛП(Запись.Поле6) + "," + 
						СокрЛП(Запись.Поле7) + "," + СокрЛП(Запись.Поле8) + "," + СокрЛП(Запись.Поле9);

    //Дополнительные реквизиты для корректного представления адреса в формах						
	АдресБезКодастраны = АдресБезКодастраны + "," + СокрЛП(Запись.ТипДома) + "," + СокрЛП(Запись.ТипКорпуса)+ "," + СокрЛП(Запись.ТипКвартиры);
						
	Если АдресБезКодаСтраны = ",,,,,,,,,,," Тогда
		Возврат ",,,,,,,,,";
	Иначе
		Возврат "643," + АдресБезКодаСтраны;
	КонецЕсли;
	
КонецФункции

//Формирует пустую структуру реквизитов этой формы
Функция ПолучитьПустуюСтруктуруРеквизитовФормы()
	
	СтруктураДанныхФормы = Новый Структура("НапрПеремещения,СтранаНазначения,СтранаОтправления");
	
	ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа1", ЭтаФорма);
	СтруктураДанныхГрафа1 = ВводРеквизитов.ПолучитьПустуюСтруктуруРеквизитов();
	Для каждого ЭлементСтруктуры Из СтруктураДанныхГрафа1 Цикл
		 СтруктураДанныхФормы.Вставить(ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа2", ЭтаФорма);
	СтруктураДанныхГрафа2 = ВводРеквизитов.ПолучитьПустуюСтруктуруРеквизитов();	
	Для каждого ЭлементСтруктуры Из СтруктураДанныхГрафа2 Цикл
		 СтруктураДанныхФормы.Вставить(ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	ВводРеквизитов = ПолучитьФорму("ФормаВводаГрафа3", ЭтаФорма);
	СтруктураДанныхГрафа3 = ВводРеквизитов.ПолучитьПустуюСтруктуруРеквизитов();	
	Для каждого ЭлементСтруктуры Из СтруктураДанныхГрафа3 Цикл
		 СтруктураДанныхФормы.Вставить(ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	 
	Возврат СтруктураДанныхФормы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


мСоставПоказателей = "СоставПоказателей2011Кв1";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);
мОписаниеТиповЧислоЕ6 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20, 6);

ОписаниеТиповСтрока2   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2);
ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока13  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(13);
ОписаниеТиповСтрока40  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(40);
ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
ОписаниеТиповСтрока250 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(250);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата  = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);                                               
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
ЦветБелый = Новый Цвет(255, 255, 255);
ЦветЖелтый = Новый Цвет(255, 255, 192);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

//Табличный документ
// список 1
мИдГруппы_1  = "П0001000001";
СтруктураГруппы_1 = Новый ТаблицаЗначений;
СтруктураГруппы_1.Колонки.Добавить("ДокСтрока", ОписаниеТиповСтрока250);
СтруктураГруппы_1.Колонки.Добавить("ДокВыбор", ОписаниеТиповСтрока50);
СтруктураГруппы_1.Колонки.Добавить("ДокНомер", ОписаниеТиповСтрока50);
СтруктураГруппы_1.Колонки.Добавить("ДокДата", ОписаниеТиповДата);

//Список 2
мИдГруппы_2  = "П0001000002";
СтруктураГруппы_2 = Новый ТаблицаЗначений;   
СтруктураГруппы_2.Колонки.Добавить("СлужебныйВерхОбласти", ОписаниеТиповСтрока3);
СтруктураГруппы_2.Колонки.Добавить("КодТовара", ОписаниеТиповСтрока10);
СтруктураГруппы_2.Колонки.Добавить("НаименованиеТовара", ОписаниеТиповСтрока250);
СтруктураГруппы_2.Колонки.Добавить("ВалютаТовараКод", ОписаниеТиповСтрока3);
СтруктураГруппы_2.Колонки.Добавить("ЦенаТовараВыбВал", мОписаниеТиповЧислоЕ);
СтруктураГруппы_2.Колонки.Добавить("ЦенаТовараВалДоллар", мОписаниеТиповЧислоЕ);
СтруктураГруппы_2.Колонки.Добавить("ЦенаТовараВалРубль", мОписаниеТиповЧислоЕ);
СтруктураГруппы_2.Колонки.Добавить("ВесТовара", мОписаниеТиповЧислоЕ6);
СтруктураГруппы_2.Колонки.Добавить("СтранаТовараКод", ОписаниеТиповСтрока2);
СтруктураГруппы_2.Колонки.Добавить("СтранаТовараНаименование", ОписаниеТиповСтрока40);
СтруктураГруппы_2.Колонки.Добавить("ЕдИзмТовараКво", мОписаниеТиповЧислоЕ6);
СтруктураГруппы_2.Колонки.Добавить("ЕдИзмТовараКод", ОписаниеТиповСтрока3);
СтруктураГруппы_2.Колонки.Добавить("ЕдИзмТовараКратко", ОписаниеТиповСтрока13);

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы_1 = 1;
КолИсхСтрокИдГруппы_2 = 1;

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы_1, СтруктураГруппы_1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы_2, СтруктураГруппы_2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы_1, КолИсхСтрокИдГруппы_1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы_2, КолИсхСтрокИдГруппы_2);

// массив имен показателей многострочных разделов,
// которых нет в табличном документе 
ИменаПоказателейТолькоСтруктура = Новый Массив;
ИменаПоказателейТолькоСтруктура.Добавить("ЕдИзмТовараКод");
ИменаПоказателейТолькоСтруктура.Добавить("ДокВыбор");
ИменаПоказателейТолькоСтруктура.Добавить("ДокНомер");
ИменаПоказателейТолькоСтруктура.Добавить("ДокДата");

ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
ЭтоДляАУ = (ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ");

// Версия формы
мВерсияФормы = "11/06/2011";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "1000000";

мПечатныеФормы = Новый СписокЗначений;