////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличных документов
Перем мТитульный;
Перем мТитульный002;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел4;
Перем мРаздел5;
Перем мРаздел6;
Перем мЛистА;
Перем мЛистБ;
Перем мЛистВ;
Перем мЛистГ1;
Перем мЛистГ1Продолжение;
Перем мЛистГ2;
Перем мЛистГ3;
Перем мЛистД;
Перем мЛистЕ;
Перем мЛистЖ1;
Перем мЛистЖ2;
Перем мЛистЖ3;
Перем мЛистЗ;
Перем мЛистЗПродолжение;
Перем мЛистИ;

// Хранит имена многострочных разделов
Перем мИдГруппыА, мИдГруппыБ, мИдГруппыВ, мИдГруппыГ1Продолжение, мИдГруппыГ2, мИдГруппыГ3;
Перем мИдГруппыД, мИдГруппыЖ3_1, мИдГруппыЖ3_2;

Перем мСтатусНалогоплательщика;

Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

//Список ячеек многострачниой формы которые не разбиваются при выводе на печать
Перем мСписокМоноЯчеек;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;
// Для явной установки типа значения 17, 4 - менять нельзя!
Перем мОписаниеТиповЧислоЕ4 Экспорт;
// Для явной установки типа значения 17, 0 - менять нельзя!
Перем мОписаниеТиповЧислоЕ0 Экспорт;

// Для явной установки типа значения 9, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ9 Экспорт;
// Для явной установки типа значения 8, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ8 Экспорт;
// Для явной установки типа значения 7, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ7 Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем ПС;

Перем ЦветЗаполняетсяАвтоАрифметика;

//Вспомогательные переменные для заполнения формы
Перем мРезидент;
Перем мИННФЛ;

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ИмяГруппы = Неопределено, Спросить = Истина) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если Спросить Тогда
	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	  Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// ПолучитьТаблицуМногостраничногоРаздела
// флМногострочность - Булево, для многостраничных разделов, являющихся многострочными = Истина
// Возвращаемое значение:
//  ТаблицаЗначений, эталонная таблица многостраничного раздела, с одним экземпляром и активной страницей.
//
Функция ПолучитьТаблицуМногостраничногоРаздела(флМногострочность = Ложь)
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление", ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	Если флМногострочность Тогда
		ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");	
	КонецЕсли;
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

	СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
	СтрПерваяСтраница.Представление = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	Возврат ТаблицаСтраницыРаздела;

КонецФункции // ПолучитьТаблицуМногостраничногоРаздела

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	Расчет("");

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1			= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	мСвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОписаниеТиповЧисло1);
	//максимальное количество экземпляров (страниц) многостраничного раздела (листа)
	//0-9 (0 - неограниченное количество экземпляров. Значения 1-9 имеют смысл при значении в колонке МногостраничностьВРазделе = Истина)
	
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела", ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгЛистА = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистА.Добавить();
	НовСтр.ИдГруппы = мИдГруппыА;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 18;
	
	МнгЛистБ = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистБ.Добавить();
	НовСтр.ИдГруппы = мИдГруппыБ;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 32;
	
	МнгЛистВ = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистВ.Добавить();
	НовСтр.ИдГруппы = мИдГруппыВ;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 30;
	
	МнгЛистГ1Продолжение = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистГ1Продолжение.Добавить();
	НовСтр.ИдГруппы = мИдГруппыГ1Продолжение;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	МнгЛистГ2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистГ2.Добавить();
	НовСтр.ИдГруппы = мИдГруппыГ2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 14;
	
	МнгЛистГ3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистГ3.Добавить();
	НовСтр.ИдГруппы = мИдГруппыГ3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 14;
	
	МнгЛистЖ3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛистЖ3.Добавить();
	НовСтр.ИдГруппы = мИдГруппыЖ3_1;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 26;
	НовСтр = МнгЛистЖ3.Добавить();
	НовСтр.ИдГруппы = мИдГруппыЖ3_2;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 26;
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	// 1
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 2
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный002";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 3
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	// 4
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 5
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 6
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 7
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 8
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	// 9
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистА";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистА;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 10
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистБ";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистБ;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 11
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистВ";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистВ;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 12
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 13
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ1Продолжение";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистГ1Продолжение;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 10;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 14
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистГ2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 15
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистГ3;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 16
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистД";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 17
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЕ";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 18
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 19
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 20
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛистЖ3;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 21
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЗ";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;//
	СтрокаУровня1.МаксКолвоЭкз						   = 0;//
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 22
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЗПродолжение";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;//
	СтрокаУровня1.МаксКолвоЭкз						   = 0;//
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	// 23
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистИ";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СтатусНалогоплательщика" Тогда
		Если ЗначениеПоказателя = "1" Тогда
			мСтатусНалогоплательщика = 1;
		ИначеЕсли ЗначениеПоказателя = "2" Тогда
			мСтатусНалогоплательщика = 2;
		Иначе
			мСтатусНалогоплательщика = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()
	
	Если СокрЛП(мТитульный.Области.Период1.Значение + мТитульный.Области.Период2.Значение) = "" ИЛИ мСкопированаФорма <> Неопределено Тогда
		мТитульный.Области.Период1.Значение = "3";
		мТитульный.Области.Период2.Значение = "4";
	КонецЕсли; 
	
	
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	мТитульный.Области.ОтчетГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	// задаем заголовок формы
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);

КонецПроцедуры

Процедура ЗаполнитьСведенияОПредставителе(РегистрацияВИФНС = Неопределено)
	
	УполномоченноеЛицоПредставителя = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	ТипПодписанта = "1";
	Если ЗначениеЗаполнено(РегистрацияВИФНС) Тогда
		Если ТипЗнч(РегистрацияВИФНС) = Тип("Строка") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	РегистрацияВИФНС.Код,
			                      |	РегистрацияВИФНС.Представитель,
			                      |	РегистрацияВИФНС.ДокументПредставителя,
			                      |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя
			                      |ИЗ
			                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
			                      |ГДЕ
			                      |	РегистрацияВИФНС.Код = &Код
			                      |	И РегистрацияВИФНС.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Код", РегистрацияВИФНС);
			Запрос.УстановитьПараметр("Владелец", Организация);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	РегистрацияВИФНС.Код,
			                      |	РегистрацияВИФНС.Представитель,
			                      |	РегистрацияВИФНС.ДокументПредставителя,
			                      |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя
			                      |ИЗ
			                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
			                      |ГДЕ
			                      |	РегистрацияВИФНС.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", РегистрацияВИФНС);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
			ТипПредставителя = ТипЗнч(Выборка.Представитель);
			Если ТипПредставителя = Тип("СправочникСсылка.Контрагенты") Тогда
				УполномоченноеЛицоПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
				НаименованиеОрганизацииПредставителя = СокрЛП(Выборка.Представитель);
			ИначеЕсли ТипПредставителя = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				УполномоченноеЛицоПредставителя = СокрЛП(Выборка.Представитель);
			КонецЕсли;
			ДокументПредставителя = СокрЛП(Выборка.ДокументПредставителя);
			ТипПодписанта = "2";
		КонецЕсли;
	КонецЕсли;
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
	Если ТипПодписанта = "1" тогда		
		УполномоченноеЛицоПредставителя = "";
	КонецЕсли;
	
	мТитульный.Области.ПрПодп.Значение = ТипПодписанта;
	мТитульный.Области.ОргПодписант.Значение = УполномоченноеЛицоПредставителя;
	мТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	мТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННФЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО,
						|ДатаРожд, МестоРожд, КодУдЛичн, ОрганВыданУдЛичн, СерияУдЛичн,
						|НомерУдЛичн, ДатаУдЛичн, ИндексМЖ, КодСубъектМЖ, РайонМЖ,
						|ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ";
		Если ЗначениеЗаполнено(Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		Иначе
			СведенияОбОрганизации = Новый Структура(СтрокаСведений);
		КонецЕсли;
		 
		
		
		// заполняем ИНН
		мИННФЛ = СокрЛП(СведенияОбОрганизации.ИННФЛ);
		Для Инд = СтрДлина(мИННФЛ) + 1 По 12 Цикл
			мИННФЛ = мИННФЛ + "-";
		КонецЦикла;
		
		
		Для Сч=1 По 9 Цикл
			ПроставитьНаВсехЛистах("ИНН" + Сч + "_", мИННФЛ);
		КонецЦикла;
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			мТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		// заполняем ФИО
		ДанныеФЛ = РазложитьФИО(СведенияОбОрганизации.ФИО);
		Если ДанныеФЛ.Количество() > 0 Тогда
			мТитульный.Области.Фамилия.Значение = СокрЛП(ДанныеФЛ.Фамилия);
			мТитульный.Области.Имя.Значение = СокрЛП(ДанныеФЛ.Имя);
			мТитульный.Области.Отчество.Значение = СокрЛП(ДанныеФЛ.Отчество);
			
			ПроставитьНаВсехЛистах("Фамилия", СокрЛП(ДанныеФЛ.Фамилия), Ложь);
			ПроставитьНаВсехЛистах("Имя1", Лев(СокрЛП(ДанныеФЛ.Имя),1), Ложь);
			ПроставитьНаВсехЛистах("Отчество1", Лев(СокрЛП(ДанныеФЛ.Отчество),1), Ложь);
		КонецЕсли;
		
		ЗнОКАТО = СокрЛП(СведенияОбОрганизации.ОКАТО);
		ДлинаЗначения = СтрДлина(ЗнОКАТО);
		Для Инд = ДлинаЗначения+1 По 11 Цикл
			ЗнОКАТО = СокрЛП(ЗнОКАТО) + "0";
		КонецЦикла;
		мТитульный.Области.ОКАТО.Значение = ЗнОКАТО;
		
		// заполняем телефон организации
		мТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		//Код категории
		мТитульный.Области.ПоМесту1.Значение = "7";
		мТитульный.Области.ПоМесту2.Значение = "2";
		мТитульный.Области.ПоМесту3.Значение = "0";
		
		// заполняем сведения о представителе
		ЗаполнитьСведенияОПредставителе(КодНО);
		
		//Титульный лист раздел 002
		ДатаРождения = СтрЗаменить(СокрЛП(Формат(СведенияОбОрганизации.ДатаРожд, "ДФ=dd.MM.yyyy")),".","");
		Для Инд = 1 По СтрДлина(ДатаРождения) Цикл
			мТитульный002.Области["ДатаРождения" + Инд].Значение = Сред(ДатаРождения, Инд, 1);
		КонецЦикла;

		мТитульный002.Области.МестоРождения.Значение = РегламентированнаяОтчетность.ПредставлениеМестаРождения(СведенияОбОрганизации.МестоРожд);
		мТитульный002.Области.Гражданство.Значение = "1";
		мТитульный002.Области.КодСтраны.Значение = "643";
		
		//Удостоверение личности
		мТитульный002.Области.КодВидаДокумента.Значение = СокрЛП(СведенияОбОрганизации.КодУдЛичн);
		мТитульный002.Области.СерияИНомерДокумента.Значение = СокрЛП(СведенияОбОрганизации.СерияУдЛичн) + " " + СокрЛП(СведенияОбОрганизации.НомерУдЛичн);
		мТитульный002.Области.КемВыданДокумент.Значение = СокрЛП(СведенияОбОрганизации.ОрганВыданУдЛичн);
		
		мРезидент = Истина;
		
		Если мРезидент Тогда
			мТитульный002.Области.СтатусНалогоплательщика.Значение = "1";
			мСтатусНалогоплательщика = 1;
		Иначе
			мТитульный002.Области.СтатусНалогоплательщика.Значение = "2";
			мСтатусНалогоплательщика = 2;
		КонецЕсли;
		
		ДатаВыдачиДокумента = СтрЗаменить(СокрЛП(Формат(СведенияОбОрганизации.ДатаУдЛичн, "ДФ=dd.MM.yyyy")),".","");
		Для Инд = 1 По СтрДлина(ДатаВыдачиДокумента) Цикл
			мТитульный002.Области["ДатаВыдачиДокумента" + Инд].Значение = Сред(ДатаВыдачиДокумента, Инд, 1);
		КонецЦикла;
		
		//Адрес
		мТитульный002.Области.МестоЖительства.Значение = 1;
		мТитульный002.Области.Индекс.Значение = СокрЛП(СведенияОбОрганизации.ИндексМЖ);
		мТитульный002.Области.Регион.Значение = СокрЛП(СведенияОбОрганизации.КодСубъектМЖ);
		мТитульный002.Области.Район.Значение = СокрЛП(СведенияОбОрганизации.РайонМЖ);
		мТитульный002.Области.Город.Значение = СокрЛП(СведенияОбОрганизации.ГородМЖ);
		мТитульный002.Области.НаселенныйПункт.Значение = СокрЛП(СведенияОбОрганизации.НПунктМЖ);
		мТитульный002.Области.Улица.Значение = СокрЛП(СведенияОбОрганизации.УлицаМЖ);
		мТитульный002.Области.Дом.Значение = СокрЛП(СведенияОбОрганизации.ДомМЖ);
		мТитульный002.Области.Корпус.Значение = СокрЛП(СведенияОбОрганизации.КорпусМЖ);
		мТитульный002.Области.Квартира.Значение = СокрЛП(СведенияОбОрганизации.КвартираМЖ);
		
		Данные = Новый Структура("Объект, Тип, Вид",  Организация.ИндивидуальныйПредприниматель, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица);
		Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные).Представление;
		мТитульный002.Области.АдресЗаПределамиРФ.Значение = СокрЛП(Результат);
		
		//Разделы
		мРаздел6.Области.П000060001001.Значение = "3";
		
	Иначе
		
		// обновляем сведения о руководстве организации
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
		Если СокрЛП(мТитульный.Области.ПрПодп.Значение) = "1" тогда			
			мТитульный.Области.ОргПодписант.Значение = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант                                   = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Найти("ИНН1_ВсеЯчейки,КодИМНС_ВсеЯчейки,КолСтр,КолСтр1,ДатаРождения_ВсеЯчейки,ДатаВыдачиДокумента_ВсеЯчейки", ИмяПоказателя) > 0 Тогда
				Продолжить;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло,ТочностьОкругления = Неопределено)
	
	Если ТочностьОкругления = Неопределено Тогда
		ТочностьОкругления = ТочностьЕдиницыИзмерения;
	КонецЕсли;
	
	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьОкругления) * Делитель;

КонецФункции // ОкруглитьЧислоПоФормату()

////////////////////////////////////////////////////////////////////////////////
//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ+++

Процедура ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, СтрокаТаблицыБлока)

	СуффиксСтроки = Формат(ТаблицаБлока.Индекс(СтрокаТаблицыБлока)+1, "ЧДЦ=0; ЧРГ=");
	Для Каждого КолонкаТаблицыБлока Из ТаблицаБлока.Колонки Цикл
	
		Если Данные.Свойство(КолонкаТаблицыБлока.Имя + "_" + СуффиксСтроки) Тогда
			Данные[КолонкаТаблицыБлока.Имя + "_" + СуффиксСтроки] = СтрокаТаблицыБлока[КолонкаТаблицыБлока.Имя];
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры


// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
Процедура РасчетВСтруктуре(ИмяЛиста)
	
	Перем ТаблицаБлока;
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Страница.Данные;
			
		Если ИмяЛиста = "ЛистА" Тогда
			
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			Колонка080 = 0;
			Колонка090 = 0;
			Колонка100 = 0;
			Колонка110 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда
				СтавкаНалога = ?(ЗначениеЗаполнено(Данные.СтавкаНалога), Число(Данные.СтавкаНалога), 0);
				Для каждого Зап Из ТаблицаБлока Цикл
					
					СуффиксСтроки = Формат(ТаблицаБлока.Индекс(Зап)+1, "ЧДЦ=0; ЧРГ=");
					// при необходимости выполняем автоматические расчеты:
					Если ЗначениеЗаполнено(Зап.П000070001005) 
						И НЕ ЗначениеЗаполнено(Зап.П000070001006) Тогда
						Зап.П000070001006 = Зап.П000070001005;
						//Данные["П000070001006_" + СуффиксСтроки] = Зап.П000070001006;
					КонецЕсли; 
					Если ЗначениеЗаполнено(Зап.П000070001006) И СтавкаНалога > 0 Тогда
						СуммаНалогаПоСтроке = Окр(Зап.П000070001006 * СтавкаНалога / 100, 0 ,1);
						Если Зап.П000070001007 <> СуммаНалогаПоСтроке Тогда
							Зап.П000070001007 = СуммаНалогаПоСтроке;
							//Данные["П000070001007_" + СуффиксСтроки] = Зап.П000070001007;
						КонецЕсли; 
					КонецЕсли; 
					// ОКАТО (заполнить "0" отсутствующие цифры)
					Колонка021 = Зап.П000070001003;  
					Если ЗначениеЗаполнено(Колонка021) Тогда
						ДлинаЗначения = СтрДлина(СокрЛП(Колонка021));
						Для Инд = ДлинаЗначения+1 По 11 Цикл
							Колонка021 = СокрЛП(Колонка021) + "0";
						КонецЦикла;
					КонецЕсли;
					//Данные["П000070001003_" + СуффиксСтроки] = Колонка021;
					Зап.П000070001003 = Колонка021;
					
					// заполняем итоговые значения листа:
					Колонка080 = Колонка080 + ОкруглитьЧислоПоФормату(Зап.П000070001005);
					Колонка090 = Колонка090 + ОкруглитьЧислоПоФормату(Зап.П000070001006);
					Колонка100 = Колонка100 + ОкруглитьЧислоПоФормату(Зап.П000070001007);
					Колонка110 = Колонка110 + ОкруглитьЧислоПоФормату(Зап.П000070001008);
					
					//обновляем значения в структуре данных
					ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, Зап);
					
				КонецЦикла;
			КонецЕсли;
			
			Данные.П000070008001 = Колонка080;
			Данные.П000070009001 = Колонка090;
			Данные.П000070010001 = Колонка100;
			Данные.П000070011001 = Колонка110;
			// сумма налога уплаченного не должна превышать сумму налога исчисленного:
			Если Данные.П000070012001 > Колонка100  Тогда
				Данные.П000070012001 = Колонка100;
			КонецЕсли;
			//
			
		КонецЕсли;
		
		Если ИмяЛиста = "ЛистБ" Тогда

			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			Колонка150 = 0;
			Колонка160 = 0;
			Колонка170 = 0;
			Колонка180 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда
				Для каждого Зап Из ТаблицаБлока Цикл
					
					СтавкаНалога = ?(ЗначениеЗаполнено(Данные.СтавкаНалога), Число(Данные.СтавкаНалога)/100, 0);
					//вычисляем суммы по курсу:
					Если ЗначениеЗаполнено(Зап.П000080001006) Тогда
						Зап.П000080001008 = ОкруглитьЧислоПоФормату(Зап.П000080001006 * Зап.П000080001007);
					ИначеЕсли ЗначениеЗаполнено(Зап.П000080001008) И ЗначениеЗаполнено(Зап.П000080001007) Тогда
						Зап.П000080001006 = ОкруглитьЧислоПоФормату(Зап.П000080001008 / Зап.П000080001007)
					КонецЕсли; 
					Если ЗначениеЗаполнено(Зап.П000080001010) Тогда
						Зап.П000080001012 = ОкруглитьЧислоПоФормату(Зап.П000080001010 * Зап.П000080001011);
					ИначеЕсли ЗначениеЗаполнено(Зап.П000080001012) И ЗначениеЗаполнено(Зап.П000080001011) Тогда
						Зап.П000080001010 = ОкруглитьЧислоПоФормату(Зап.П000080001012 / Зап.П000080001011)
					КонецЕсли; 
					// пересчитываем налог в РФ:
					Если ЗначениеЗаполнено(СтавкаНалога) Тогда
						Зап.П000080001013 = ОкруглитьЧислоПоФормату(Окр(Зап.П000080001008 * СтавкаНалога, 0,1));
					КонецЕсли; 
					// проверяем налог к зачету:
					Если ЗначениеЗаполнено(Зап.П000080001014) Тогда
						Зап.П000080001014 = Мин(Зап.П000080001014, Зап.П000080001013, Зап.П000080001012);
					КонецЕсли; 
					
					Колонка150 = Колонка150 + ОкруглитьЧислоПоФормату(Зап.П000080001008);
					Колонка160 = Колонка160 + ОкруглитьЧислоПоФормату(Зап.П000080001012);
					Колонка170 = Колонка170 + ОкруглитьЧислоПоФормату(Зап.П000080001013);
					Колонка180 = Колонка180 + ОкруглитьЧислоПоФормату(Зап.П000080001014);
					//обновляем значения в структуре данных
					ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, Зап);
					
				КонецЦикла;
			КонецЕсли;
			
			Данные.П000080001501 = Колонка150;
			Данные.П000080001601 = Колонка160;
			Данные.П000080001701 = Колонка170;
			Данные.П000080001801 = Колонка180;
			
		КонецЕсли;
		
		Если ИмяЛиста = "ЛистГ1Продолжение" Тогда
			
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			Колонка240 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда
				Для каждого Зап Из ТаблицаБлока Цикл
					НомерСтроки = (ТаблицаБлока.Индекс(Зап)+1);
					
					Если НомерСтроки <> 1 Тогда
						Данные["П000025119004_" + НомерСтроки] = Данные["П000025119006_" + (НомерСтроки-1)];
						Зап.П000025119004 = Данные["П000025119006_" + (НомерСтроки-1)];
					КонецЕсли;
					
					Колонка220 = Мин(Зап.П000025119004 + 4300, Зап.П000025119003);
					
					ДоляОплатыВНатруальнойФорме = ?(Зап.П000025119002 <> 0, Зап.П000025119003/Зап.П000025119002, 0)*100; 
					Колонка230ПредМесяца = ?(НомерСтроки = 1,0,Данные["П000025119006_" + (НомерСтроки-1)]) + 4300;
					
					Если ДоляОплатыВНатруальнойФорме > 20
						ИЛИ Колонка220 > Колонка230ПредМесяца Тогда
						Колонка220 = 0					
					КонецЕсли;
				
					Данные["П000025119005_" + НомерСтроки] = Колонка220;
					Зап.П000025119005 = Колонка220;
					
					Колонка230 = Зап.П000025119004 + ?(Зап.П000025119005 = 0, 0, 4300) - Зап.П000025119005;
					Данные["П000025119006_" + НомерСтроки] = Колонка230;
					Зап.П000025119006 = Колонка230;
					
					Колонка240 = Колонка240 + Колонка220;
					Если НомерСтроки = 12 Тогда
						Данные["П000025119006_" + НомерСтроки] = 0;
						Зап.П000025119006 = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Данные.П000025124002 = Колонка240;
			
		КонецЕсли;
				
		Если ИмяЛиста = "ЛистД" Тогда
			
			Данные.П000012001020 = ОкруглитьЧислоПоФормату(Мин(Данные.П000012001020, Данные.П000012001010));
			Данные.П000012001040 = ОкруглитьЧислоПоФормату(Мин(Данные.П000012001040, Данные.П000012001030));
			Данные.П000012001060 = ОкруглитьЧислоПоФормату(Мин(Данные.П000012001060, Данные.П000012001050));
			Данные.П000012001080 = ОкруглитьЧислоПоФормату(Мин(Данные.П000012001080, Данные.П000012001080));
			Данные.П000012001100 = ОкруглитьЧислоПоФормату(Мин(Данные.П000012001100, Данные.П000012001090));
			Данные.П000012001110 = Данные.П000012001020 + Данные.П000012001040 + Данные.П000012001060 +
			                       Данные.П000012001080 + Данные.П000012001100;
			
		КонецЕсли;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если Лев(ЭлементДанных.Ключ, 13) = "П000070001003" Тогда //исклчение
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
				КонецЕсли;
				Если ТипЗнч(ЭлементДанных.Значение) <> Тип("Число") 
					ИЛИ СтрДлина(ЭлементДанных.Ключ) < 13
					ИЛИ НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела

	
КонецПроцедуры

// Используется и для заполнения "Раздела 1", и для расчетов вычетов "Листа И"
Функция ПолучитьСуммуДоходаДляРасчетаЛистаИ()
    Перем Результат;
	
	Результат = Новый Структура;
	//Следующие элементы используются и для раздела 1 и для листа И:
	Результат.Вставить("ОбщаяСуммаДохода",         0);  //Колонка010 	А-2.1 + Б-2.1 + В-2.1
	Результат.Вставить("НеоблагаемаяСуммаДохода",  0);  //Колонка020 	Г1-1.9
	Результат.Вставить("ОблагаемаяСуммаДохода",    0);	//Колонка030 = Колонка010 - Колонка020
	Результат.Вставить("ВычетыБезЛистаИ",          0);	//Колонка040 (Часть БЕЗ листа И) В-3.2 + Д-6.1 + Е-4 + Ж1-2.8 + Ж2-3 + З-9.3 
	Результат.Вставить("ВычетыЛистаИ",             0);	//Колонка040 (Часть ТОЛЬКО лист И) И-2.5 + И-2.6 + И-2.8 + И-2.9 
	Результат.Вставить("НалоговаяБазаБезЛистаИ",   0);	//Колонка050 (без учета Листа И): Колонка030 - Колонка040 (Часть БЕЗ листа И)
	Результат.Вставить("НалоговаяБазаСЛистомИ",    0);  //Колонка050 (Полностью): Колонка030 - Колонка040
	
	//Остальные элементы используются только для раздела 1
	Результат.Вставить("Колонка070", 0);	// А-2.4
	Результат.Вставить("Колонка075", 0);	// В-3.4
	Результат.Вставить("Колонка080", 0);    // А-2.5
	Результат.Вставить("Колонка100", 0);    // Б-2.4
	
	ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистА"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Данные = Страница.Данные;
		
		Если Данные.СтавкаНалога = "13" Тогда
			Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + ОкруглитьЧислоПоФормату(Данные.П000070008001);
			Результат.Колонка070 = Результат.Колонка070 + ОкруглитьЧислоПоФормату(Данные.П000070011001);
			Результат.Колонка080 = Результат.Колонка080 + ОкруглитьЧислоПоФормату(Данные.П000070012001);
		КонецЕсли;
	КонецЦикла;
	
	ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистБ"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Данные = Страница.Данные;
		
		Если Данные.СтавкаНалога = "13" Тогда
			Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + ОкруглитьЧислоПоФормату(Данные.П000080001501);
			Результат.Колонка100 = Результат.Колонка100 + ОкруглитьЧислоПоФормату(Данные.П000080001801);
		КонецЕсли;
	КонецЦикла;
	
	Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + ОкруглитьЧислоПоФормату(мЛистВ.Области.П000090001101.Значение);
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(мЛистВ.Области.П000090001201.Значение);
	Результат.Колонка075 = Результат.Колонка075 + ОкруглитьЧислоПоФормату(мЛистВ.Области.П000090001401.Значение);
	
	Результат.НеоблагаемаяСуммаДохода = ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010116004.Значение);
	Результат.ОблагаемаяСуммаДохода   = ОкруглитьЧислоПоФормату(Результат.ОбщаяСуммаДохода - Результат.НеоблагаемаяСуммаДохода);
	
	//Получим данные связанных разделов для суммы вычетов (без листа И)
	ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистД"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Данные = Страница.Данные;
		Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(Данные.П000012001110);
	КонецЦикла;
	
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(мЛистЕ.Области.П000014019002.Значение);
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020022004.Значение);
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021012004.Значение);
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + ОкруглитьЧислоПоФормату(мЛистЗПродолжение.Области.П000022036001.Значение);
	
	Результат.НалоговаяБазаБезЛистаИ = Результат.ОблагаемаяСуммаДохода - Результат.ВычетыБезЛистаИ;
	
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + ОкруглитьЧислоПоФормату(мЛистИ.Области.П000024021004.Значение); //И-2.5
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + ОкруглитьЧислоПоФормату(мЛистИ.Области.П000024022004.Значение); //И-2.6
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + ОкруглитьЧислоПоФормату(мЛистИ.Области.П000024024004.Значение); //И-2.8
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + ОкруглитьЧислоПоФормату(мЛистИ.Области.П000024025004.Значение); //И-2.9
	
	Результат.НалоговаяБазаСЛистомИ = Результат.ОблагаемаяСуммаДохода - Результат.ВычетыБезЛистаИ - Результат.ВычетыЛистаИ;
	
	Возврат Результат;
	
КонецФункции
 

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяСтраницыПанели = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если (мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		РассчитыватьВсеСтраницы = Истина;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяСтраницыПанели;
		РассчитыватьВсеСтраницы = Ложь;
	КонецЕсли;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	МногострочностьЕсть = (ИмяГруппы <> Неопределено);
	Если МногостраничностьЕсть Тогда
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Ложь);
	КонецЕсли;
	Если МногострочностьЕсть Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЕсли;
	
	Если (ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	// Многостраничные структуры расчитываем отдельно:
	Если НЕ ПустаяСтрока(ИмяТекущейСтраницыПанели) 
		И Найти("ЛистА,ЛистБ,ЛистГ1Продолжение,ЛистД,", ИмяТекущейСтраницыПанели + ",") > 0 Тогда
		
		РасчетВСтруктуре(ИмяТекущейСтраницыПанели);
		
	КонецЕсли;
	
	Если РассчитыватьВсеСтраницы Тогда
		
		// выполняем пересчет всех страниц в определенном порядке:
		Расчет("ЛистА");
		Расчет("ЛистБ");
		Расчет("ЛистВ");
		Расчет("ЛистГ1Продолжение");
		Расчет("ЛистГ1");
		Расчет("ЛистГ2");
		Расчет("ЛистГ3");
		Расчет("ЛистД");
		Расчет("ЛистЕ");
		Расчет("ЛистЖ1");
		Расчет("ЛистЖ3");
		Расчет("ЛистЖ2");
		Расчет("ЛистЗ");
		Расчет("ЛистИ");
		
		Расчет("Раздел1");
		Расчет("Раздел2");
		Расчет("Раздел3");
		Расчет("Раздел4");
		Расчет("Раздел5");
		Расчет("Раздел6");
		
	КонецЕсли; 
	
	Если ИмяТекущейСтраницыПанели = "ЛистВ" И НЕ РассчитыватьВсеСтраницы Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппыВ, ТаблицаБлока);
			Колонка110 = 0;
			Колонка120 = 0;
			
		Если ТаблицаБлока <> Неопределено Тогда
			
			Для каждого Зап Из ТаблицаБлока Цикл
				
				СуффиксСтроки = Формат(ТаблицаБлока.Индекс(Зап)+1, "ЧДЦ=0; ЧРГ=");
				// Проверяем сумму по нормативам:
				Если ЗначениеЗаполнено(Зап.П000090001003) И НЕ ЗначениеЗаполнено(Зап.П000090001004) Тогда
					Зап.П000090001010 = ОкруглитьЧислоПоФормату(Зап.П000090001003 * 0.2);
				Иначе
					Зап.П000090001010 = 0;
				КонецЕсли; 
				мЛистВ.Области["П000090001010_" + СуффиксСтроки].Значение = Зап.П000090001010;
				// Проверяем итоговую сумму расходов:
				Если ЗначениеЗаполнено(Зап.П000090001007) Тогда
					Если Зап.П000090001007 < Зап.П000090001008 Тогда
						Зап.П000090001007 = Зап.П000090001008;
						мЛистВ.Области["П000090001007_" + СуффиксСтроки].Значение = Зап.П000090001007;
					КонецЕсли; 
				Иначе
					Зап.П000090001008 = 0;
					мЛистВ.Области["П000090001008_" + СуффиксСтроки].Значение = Зап.П000090001008;
				КонецЕсли; 
				Если Зап.П000090001004 < Зап.П000090001005 + Зап.П000090001006
										+ Зап.П000090001007 + Зап.П000090001009 Тогда
					Зап.П000090001004 = Зап.П000090001005 + Зап.П000090001006
										+ Зап.П000090001007 + Зап.П000090001009;
					мЛистВ.Области["П000090001004_" + СуффиксСтроки].Значение = Зап.П000090001004;
				КонецЕсли; 
				
				Колонка110 = Колонка110 + ОкруглитьЧислоПоФормату(Зап.П000090001003);
				Колонка120 = Колонка120 + ОкруглитьЧислоПоФормату(?(Зап.П000090001004 > 0, Зап.П000090001004, Зап.П000090001010));
			КонецЦикла;
			
		КонецЕсли;
		
		мЛистВ.Области.П000090001101.Значение = Колонка110;
		мЛистВ.Области.П000090001201.Значение = Колонка120;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистГ1Продолжение" И НЕ РассчитыватьВсеСтраницы Тогда
		
		Колонка150 = 0;
		ТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистГ1Продолжение"];
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			Колонка150 = Колонка150 + Данные.П000025124002;				
		КонецЦикла;
		мЛистГ1.Области.П000010115004.Значение = Колонка150;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистГ1" И НЕ РассчитыватьВсеСтраницы Тогда
		
		Колонка150 = 0;
		
		ТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистГ1Продолжение"];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные;
			Колонка150 = Колонка150 + Данные.П000025124002;				
			
		КонецЦикла;
		
		мЛистГ1.Области.П000010102004.Значение = Мин(мЛистГ1.Области.П000010101002.Значение, мЛистГ1.Области.П000010102004.Значение);
		мЛистГ1.Области.П000010104004.Значение = Мин(мЛистГ1.Области.П000010103002.Значение, 4000);
		мЛистГ1.Области.П000010106004.Значение = Мин(мЛистГ1.Области.П000010105002.Значение, 4000);
		мЛистГ1.Области.П000010108004.Значение = Мин(мЛистГ1.Области.П000010107002.Значение, 4000);
		мЛистГ1.Области.П000010110004.Значение = Мин(мЛистГ1.Области.П000010109002.Значение, 4000);
		мЛистГ1.Области.П000010112004.Значение = Мин(мЛистГ1.Области.П000010111002.Значение, 4000);
		мЛистГ1.Области.П000010114004.Значение = Мин(мЛистГ1.Области.П000010113002.Значение, 10000);
		
		мЛистГ1.Области.П000010115004.Значение = Колонка150;
		
		мЛистГ1.Области.П000010116004.Значение = ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010102004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010104004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010106004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010108004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010110004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010112004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010114004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010115004.Значение);
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистГ2" И НЕ РассчитыватьВсеСтраницы Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппыГ2, ТаблицаБлока);
		Колонка060 = 0;
		ОстатокВычета = 4000;
		Для каждого Зап Из ТаблицаБлока Цикл
			
			Если ОстатокВычета = 0 Тогда
				мЛистГ2.Области["П000010201006_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = 0;
				Продолжить;
			КонецЕсли; 
			
			Колонка050 = ОкруглитьЧислоПоФормату(Зап.П000010201006);
			Если Колонка050 = 0 Тогда
				Колонка050 = ОкруглитьЧислоПоФормату(Мин(Зап.П000010201005, ОстатокВычета));
			Иначе
				Колонка050 = ОкруглитьЧислоПоФормату(Мин(Зап.П000010201005, ОстатокВычета));
			КонецЕсли; 
			ОстатокВычета = ОстатокВычета - Колонка050;
			
			мЛистГ2.Области["П000010201006_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Колонка050;
			Колонка060 = Колонка060 + Колонка050;				
			
		КонецЦикла;
		
		мЛистГ2.Области.П000010207001.Значение = Колонка060;
		
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "ЛистГ3" И НЕ РассчитыватьВсеСтраницы Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппыГ3, ТаблицаБлока);
		Колонка070 = 0;
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка070 = Колонка070 + ОкруглитьЧислоПоФормату(Зап.П000027201006);
			Колонка030 = Зап.П000027201003;
			Если ЗначениеЗаполнено(Колонка030) Тогда
				ДлинаЗначения = СтрДлина(СокрЛП(Колонка030));
				Для Инд = ДлинаЗначения+1 По 11 Цикл
					Колонка030 = СокрЛП(Колонка030) + "0";
				КонецЦикла;
			КонецЕсли;
			мЛистГ3.Области["П000027201003_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Колонка030;
		КонецЦикла;
		
		мЛистГ3.Области.П000027207001.Значение = Колонка070;
		
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "ЛистЕ" И НЕ РассчитыватьВсеСтраницы Тогда
		
		// Расчет п. 1.1
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014002004.Значение) Тогда
			Колонка020 = Мин(мЛистЕ.Области.П000014002004.Значение, мЛистЕ.Области.П000014001002.Значение, 1000000);
		Иначе
			Колонка020 = Мин(мЛистЕ.Области.П000014001002.Значение, 1000000);
		КонецЕсли; 
		мЛистЕ.Области.П000014002004.Значение = ОкруглитьЧислоПоФормату(Колонка020);
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014004004.Значение) Тогда
			Колонка040 = Мин(мЛистЕ.Области.П000014004004.Значение, мЛистЕ.Области.П000014003002.Значение, 1000000);
		Иначе
			Колонка040 = Мин(мЛистЕ.Области.П000014003002.Значение, 1000000);
		КонецЕсли; 
		мЛистЕ.Области.П000014004004.Значение = ОкруглитьЧислоПоФормату(Колонка040);
		
		мЛистЕ.Области.П000014005002.Значение = мЛистЕ.Области.П000014001002.Значение + мЛистЕ.Области.П000014003002.Значение;
		мЛистЕ.Области.П000014006004.Значение = Мин(1000000, мЛистЕ.Области.П000014002004.Значение + мЛистЕ.Области.П000014004004.Значение);
		
		// Расчет п. 1.4
		мЛистЕ.Области.П000014008004.Значение = Мин(мЛистЕ.Области.П000014008004.Значение, мЛистЕ.Области.П000014007002.Значение);
		
		// Расчет п. 1.5
		мЛистЕ.Области.П000014009002.Значение = мЛистЕ.Области.П000014005002.Значение + мЛистЕ.Области.П000014007002.Значение;
		мЛистЕ.Области.П000014010004.Значение = мЛистЕ.Области.П000014006004.Значение + мЛистЕ.Области.П000014008004.Значение;
		
		// Расчет п. 2.1
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014012004.Значение) Тогда
			Колонка120 = Мин(мЛистЕ.Области.П000014012004.Значение, мЛистЕ.Области.П000014011002.Значение, 250000);
		Иначе
			Колонка120 = Мин(мЛистЕ.Области.П000014011002.Значение, 250000);
		КонецЕсли; 
		мЛистЕ.Области.П000014012004.Значение = ОкруглитьЧислоПоФормату(Колонка120);
		
		// Расчет п. 2.2
		мЛистЕ.Области.П000014014004.Значение = Мин(мЛистЕ.Области.П000014014004.Значение, мЛистЕ.Области.П000014013002.Значение);
		
		// Итоги п. 2
		мЛистЕ.Области.П000014015002.Значение = мЛистЕ.Области.П000014011002.Значение + мЛистЕ.Области.П000014013002.Значение;
		мЛистЕ.Области.П000014016004.Значение = мЛистЕ.Области.П000014014004.Значение + мЛистЕ.Области.П000014012004.Значение;
		
		// Расчет п. 3
		мЛистЕ.Области.П000014018004.Значение = Мин(мЛистЕ.Области.П000014018004.Значение, мЛистЕ.Области.П000014017002.Значение);
		
		// Расчет общего итога
		мЛистЕ.Области.П000014019002.Значение = мЛистЕ.Области.П000014010004.Значение 
											  + мЛистЕ.Области.П000014016004.Значение
											  + мЛистЕ.Области.П000014018004.Значение;
		
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "ЛистЖ1" Тогда
		
		мЛистЖ1.Области.П000020022004.Значение = ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020015004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020016004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020017004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020018004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020019004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020020004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ1.Области.П000020021004.Значение);
		
		Колонка130 = 0;
		Колонка140 = 0;
		СумДоход = 0;
		Для НомерМесяца = 1 По 12 Цикл
			Постфикс = "002";
			Префикс = ?(НомерМесяца<10, "0", "");
			СумДоходТек = ОкруглитьЧислоПоФормату(мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение);
			//перепишем значения доходов нарастающим итогом
			Если НомерМесяца > 1 Тогда
				ПрефиксПред = ?(НомерМесяца<11, "0", "");
				СумДоходПред = ОкруглитьЧислоПоФормату(мЛистЖ1.Области["П0000200" + ПрефиксПред + (НомерМесяца-1) + Постфикс].Значение);
				СумДоходНов = Макс(СумДоходТек, СумДоходПред);
				мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение = СумДоходНов;
			КонецЕсли;
			СумДоход = ОкруглитьЧислоПоФормату(мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение);
			Если СумДоход > 0 Тогда
				Если СумДоход <= 40000 Тогда
					Колонка130 = Колонка130 + 1;
				КонецЕсли;
				Если СумДоход <= 280000 Тогда
					Колонка140 = Колонка140 + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		мЛистЖ1.Области.П000020013002.Значение = Колонка130;
		мЛистЖ1.Области.П000020014004.Значение = Колонка140;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистЖ3" Тогда
		
		Колонка210 = 0;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппыЖ3_1, ТаблицаБлока);
		Колонка100 = 0;
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка100 = Колонка100 + ОкруглитьЧислоПоФормату(Зап.П000022008001);
			Колонка210 = Колонка210 + ОкруглитьЧислоПоФормату(Зап.П000022009001);
		КонецЦикла;
		мЛистЖ3.Области.П000022010001.Значение = Колонка100;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппыЖ3_2, ТаблицаБлока);
		Колонка200 = 0;
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка200 = Колонка200 + ОкруглитьЧислоПоФормату(Зап.П000022018001);
			Колонка210 = Колонка210 + ОкруглитьЧислоПоФормату(Зап.П000022019001);
		КонецЦикла;
		мЛистЖ3.Области.П000022020001.Значение = Колонка200;
		мЛистЖ3.Области.П000022021001.Значение = Колонка210;
		
		мЛистЖ2.Области.П000021008004.Значение = мЛистЖ3.Области.П000022020001.Значение;
		мЛистЖ2.Области.П000021009004.Значение = мЛистЖ3.Области.П000022010001.Значение;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистЖ2" Тогда
		
		// Расчет п. 1
		мЛистЖ2.Области.П000021004004.Значение = ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021001004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021002004.Значение)
		+ ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021003004.Значение);
		
		// Расчет п. 2
		мЛистЖ2.Области.П000021008004.Значение = мЛистЖ3.Области.П000022020001.Значение;
		мЛистЖ2.Области.П000021009004.Значение = мЛистЖ3.Области.П000022010001.Значение;
		// итог п.2: 
		Предел = Макс(0, 120000 - мЛистЖ3.Области.П000022021001.Значение);
		ИтогЖ2 = мЛистЖ2.Области.П000021005004.Значение + 
								  мЛистЖ2.Области.П000021006004.Значение + 
								  мЛистЖ2.Области.П000021007004.Значение + 
								  мЛистЖ2.Области.П000021008004.Значение + 
								  мЛистЖ2.Области.П000021009004.Значение + 
								  мЛистЖ2.Области.П000021010004.Значение;
		ВычетГрафы2 = Мин(Предел, ИтогЖ2);
								  
		Если ИтогЖ2 <> 0 Тогда
			мЛистЖ2.Области.П000021011004.Значение = ОкруглитьЧислоПоФормату(ВычетГрафы2);
		Иначе
			мЛистЖ2.Области.П000021011004.Значение = 0;
		КонецЕсли; 
		
		// Расчет п. 3
		мЛистЖ2.Области.П000021012004.Значение = ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021011004.Значение)
			+ ОкруглитьЧислоПоФормату(мЛистЖ2.Области.П000021004004.Значение);
		
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "ЛистЗ" ИЛИ ИмяТекущейСтраницыПанели = "ЛистЗПродолжение" Тогда
		
		Области = мЛистЗ.Области;
		ОбластиПродолжения = мЛистЗПродолжение.Области;
		
		//Очищаем автоматически рассчитываемые поля:
		Для Каждого Область Из Области Цикл
		
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
				И Область.СодержитЗначение = Истина 
				И Область.Защита = Истина 
				И Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика Тогда
				Область.Значение = 0;
			КонецЕсли; 
		
		КонецЦикла; 
		
		//Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
		Результат1 = Области.П000021001001.Значение - Области.П000021002001.Значение;
		Результат3 = Области.П000021012001.Значение - Области.П000021013001.Значение;
		Результат2 = Области.П000021008001.Значение - Области.П000021009001.Значение;
		Результат4 = Области.П000021015001.Значение - Области.П000021016001.Значение;
		Результат5 = Области.П000021021001.Значение - Области.П000021022001.Значение;
		Результат6 = Области.П000021027001.Значение - Области.П000021028001.Значение;
		
		//Запомним суммы убытков прошлых лет:
		ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022030001.Значение;
		ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022031001.Значение;
		
		//Порядок расчета разделов отличается от их порядка в бланке.
		
		//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
		//Раздел 3
		Области.П000021014001.Значение = ?(Результат3 > 0, Результат3, 0);
		Результат3 = Области.П000021014001.Значение;
		//Раздел 6
		Области.П000021029001.Значение = ?(Результат6 > 0, Результат6, 0);
		Результат6 = Области.П000021029001.Значение;
		
		
		//Далее расчитываем взаимоувязанные разделы:
		
		//Раздел 2
		Если Результат2 > 0 Тогда //Прибыль
			Области.П000021011001.Значение = Результат2;
		ИначеЕсли Результат2 < 0 Тогда //Убыток
			Области.П000021010001.Значение = -Результат2;
		КонецЕсли; 
		
		//Раздел 1
		Если Результат1 > 0 Тогда //Прибыль
			// Сначала прибыль может быть уменьшена убытком раздела 2 (строка 100)
			Области.П000021005001.Значение = МИН(Области.П000021010001.Значение, Результат1);
			Результат1 = Результат1 - Области.П000021005001.Значение;
			Если Результат1 > 0 Тогда
				//Оставшуюся прибыль можно уменьшить убытком прошлых периодов:
				Области.П000021006001.Значение = МИН(ПрошлыйУбытокПоЦБ, Результат1);
				Результат1 = Результат1 - Области.П000021006001.Значение;
			КонецЕсли;
			//Записываем прибыль после ее уменьшения всякими убытками:
			Области.П000021007001.Значение = ?(Результат1 > 0, Результат1, 0);
			
		ИначеЕсли Результат1 < 0 Тогда //Убыток
			Области.П000021003001.Значение = -Результат1;
		КонецЕсли; 
		
		//Раздел 5
		Если Результат5 > 0 Тогда //Прибыль
			//Прибыль может быть уменьшена только убытком прошлых периодов: (строка 310)
			Области.П000021025001.Значение = МИН(ПрошлыйУбытокПоФИСС, Результат5);
			Результат5 = Результат5 - Области.П000021025001.Значение;
			ПрошлыйУбытокПоФИСС = ПрошлыйУбытокПоФИСС - Области.П000021025001.Значение;
			Области.П000021026001.Значение = ?(Результат5 > 0, Результат5, 0);
			
		ИначеЕсли Результат5 < 0 Тогда //Убыток
			Области.П000021023001.Значение = -Результат5;
		КонецЕсли; 
		
		//Раздел 4
		Если Результат4 > 0 Тогда //Прибыль
			//Сначала прибыль можно уменьшить убытком прошлых периодов:
			Области.П000021019001.Значение = МИН(ПрошлыйУбытокПоФИСС, Результат4);
			Результат4 = Результат4 - Области.П000021019001.Значение;
			ПрошлыйУбытокПоФИСС = ПрошлыйУбытокПоФИСС - Области.П000021019001.Значение;
			Если Результат4 > 0 И Результат1 < 0 Тогда
				//Оставшуюся прибыль уменьшаем убытком раздела 1
				Области.П000021004001.Значение = МИН(-Результат1, Результат4);
				Результат4 = Результат4 - Области.П000021004001.Значение;
				Результат1 = Результат1 + Области.П000021004001.Значение;
			КонецЕсли;
			Если Результат4 > 0 И Результат5 < 0 Тогда
				//Оставшуюся прибыль уменьшаем убытком раздела 5
				Области.П000021024001.Значение = МИН(-Результат5, Результат4);
				Результат4 = Результат4 - Области.П000021024001.Значение;
				Результат5 = Результат5 + Области.П000021024001.Значение;
			КонецЕсли;
			Если Результат4 > 0 Тогда
				Области.П000021020001.Значение = Результат4;
			КонецЕсли; 
			
		ИначеЕсли Результат4 < 0 Тогда //Убыток
			Области.П000021017001.Значение = -Результат4;
			Если Результат1 > 0 Тогда
				//Убытком раздела 4 можно уменьшить прибыль раздела 1:
				Области.П000021018001.Значение = МИН(-Результат4, Результат1);
				Результат4 = Результат4 + Области.П000021018001.Значение;
				Результат1 = Результат1 - Области.П000021018001.Значение;
				Области.П000021007001.Значение = Результат1;
			КонецЕсли; 
		КонецЕсли; 
		
		//Считаем итоги:
		// Расчет п.8 (продолжение листа З)
		РезультатП81 = ОбластиПродолжения.П000022030001.Значение + Области.П000021003001.Значение
					- Области.П000021004001.Значение - Области.П000021006001.Значение;
		ОбластиПродолжения.П000022032001.Значение = РезультатП81;
		РезультатП82 = ОбластиПродолжения.П000022031001.Значение + Области.П000021017001.Значение + Области.П000021023001.Значение
					- Области.П000021018001.Значение - Области.П000021019001.Значение 
					- Области.П000021024001.Значение - Области.П000021025001.Значение;
		ОбластиПродолжения.П000022033001.Значение = РезультатП82;
		
		// Расчет п.9 (продолжение листа З)
		ОбластиПродолжения.П000022034001.Значение = Области.П000021001001.Значение + Области.П000021008001.Значение
												  + Области.П000021012001.Значение + Области.П000021015001.Значение
												  + Области.П000021021001.Значение + Области.П000021027001.Значение;
		ОбластиПродолжения.П000022035001.Значение = Области.П000021007001.Значение + Области.П000021011001.Значение
												  + Области.П000021014001.Значение + Области.П000021020001.Значение
												  + Области.П000021026001.Значение + Области.П000021029001.Значение;
		ОбластиПродолжения.П000022036001.Значение = ОбластиПродолжения.П000022034001.Значение - ОбластиПродолжения.П000022035001.Значение;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистИ" Тогда
		
		РасчетыРаздела = ПолучитьСуммуДоходаДляРасчетаЛистаИ();
		//1.11 - факт.расходы, но не более 2-х млн.
		мЛистИ.Области.П000024011004.Значение = Мин(мЛистИ.Области.П000024011004.Значение, 2000000);
		
		//2.1 - вычеты по стоимости, принятые в прошлых периодах:
		мЛистИ.Области.П000024013004.Значение = мЛистИ.Области.П000024014004.Значение + мЛистИ.Области.П000024015004.Значение;
		//2.1 - вычеты по процентам, принятые в прошлых периодах:
		мЛистИ.Области.П000024016004.Значение = мЛистИ.Области.П000024017004.Значение + мЛистИ.Области.П000024018004.Значение;
		// Остаток по расходам, перешедший с прошлых периодов:
		мЛистИ.Области.П000024019004.Значение = Макс(0, мЛистИ.Области.П000024011004.Значение - мЛистИ.Области.П000024013004.Значение);
		
		//2.7 Налоговая база за минусом вычетов:
		НалоговаяБаза = РасчетыРаздела.НалоговаяБазаБезЛистаИ 
					  - мЛистИ.Области.П000024021004.Значение - мЛистИ.Области.П000024022004.Значение; //за минусом И-2.5 и И-2.6
		Если мЛистИ.Области.П000024011004.Значение > 0
			ИЛИ мЛистИ.Области.П000024012004.Значение > 0 Тогда

			мЛистИ.Области.П000024023004.Значение = Макс(0, НалоговаяБаза);
			
			//2.10 Остаток вычета по стоимости, переходящий на следующий период
			мЛистИ.Области.П000024026004.Значение = мЛистИ.Области.П000024011004.Значение 
							- мЛистИ.Области.П000024013004.Значение - мЛистИ.Области.П000024021004.Значение - мЛистИ.Области.П000024024004.Значение;
			//2.11 Остаток вычета по %, переходящий на следующий период
			мЛистИ.Области.П000024027004.Значение = мЛистИ.Области.П000024012004.Значение + мЛистИ.Области.П000024020004.Значение
							 - мЛистИ.Области.П000024022004.Значение - мЛистИ.Области.П000024025004.Значение;
		Иначе
			мЛистИ.Области.П000024023004.Значение = 0;
			мЛистИ.Области.П000024026004.Значение = 0;
			мЛистИ.Области.П000024027004.Значение = 0;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если мСтатусНалогоплательщика <> 1 Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы.ПолеТабличногоДокументаРаздел1);
		Иначе
			
			РасчетыРаздела = ПолучитьСуммуДоходаДляРасчетаЛистаИ();
			
			мРаздел1.Области.П000010001003.Значение = РасчетыРаздела.ОбщаяСуммаДохода;
			мРаздел1.Области.П000010002003.Значение = РасчетыРаздела.НеоблагаемаяСуммаДохода;
			мРаздел1.Области.П000010003003.Значение = РасчетыРаздела.ОблагаемаяСуммаДохода;
			мРаздел1.Области.П000010004003.Значение = ОкруглитьЧислоПоФормату(РасчетыРаздела.ВычетыБезЛистаИ + РасчетыРаздела.ВычетыЛистаИ);
			мРаздел1.Области.П000010005003.Значение = РасчетыРаздела.НалоговаяБазаСЛистомИ;
			мРаздел1.Области.П000010006003.Значение = ОкруглитьЧислоПоФормату(РасчетыРаздела.НалоговаяБазаСЛистомИ * 0.13);
			
			мРаздел1.Области.П000010007003.Значение = РасчетыРаздела.Колонка070;
			мРаздел1.Области.П000010007503.Значение = РасчетыРаздела.Колонка075;
			мРаздел1.Области.П000010008003.Значение = РасчетыРаздела.Колонка080;
			мРаздел1.Области.П000010010003.Значение = РасчетыРаздела.Колонка100;
			
			УплаченныйНалог = РасчетыРаздела.Колонка070 + РасчетыРаздела.Колонка075 + РасчетыРаздела.Колонка080
							+ мРаздел1.Области.П000010009003.Значение;
			Если мРаздел1.Области.П000010006003.Значение > УплаченныйНалог + РасчетыРаздела.Колонка100 Тогда
				 мРаздел1.Области.П000010011003.Значение = 0;
				 мРаздел1.Области.П000010012003.Значение = мРаздел1.Области.П000010006003.Значение - УплаченныйНалог - РасчетыРаздела.Колонка100;
			Иначе
				 мРаздел1.Области.П000010011003.Значение = УплаченныйНалог - мРаздел1.Области.П000010006003.Значение;
				 мРаздел1.Области.П000010012003.Значение = 0;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если мСтатусНалогоплательщика <> 2 Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы.ПолеТабличногоДокументаРаздел2);
		Иначе
			
			Колонка010 = 0;	//А-2.1
			Колонка040 = 0;	//З-9.3
			Колонка060 = 0;	//А-2.3
			Колонка070 = 0;	//А-2.4
			
			ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистА"];
			Для Каждого Страница Из ПромТаблицаРаздела Цикл
				Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				Данные = Страница.Данные;
				
				Если Данные.СтавкаНалога = "30" Тогда
					Колонка010 = Колонка010 + Данные.П000070008001;
					Колонка060 = Колонка060 + Данные.П000070010001;
					Колонка070 = Колонка070 + Данные.П000070011001;
				КонецЕсли;
			КонецЦикла;
			
			Колонка040 = мЛистЗПродолжение.Области.П000022036001.Значение;
			
			мРаздел2.Области.П000020001003.Значение = Колонка010;
			
			мРаздел2.Области.П000020002003.Значение = ОкруглитьЧислоПоФормату(мЛистГ1.Области.П000010116004.Значение)
			+ ОкруглитьЧислоПоФормату(мЛистГ2.Области.П000010207001.Значение);
			
			мРаздел2.Области.П000020004003.Значение = Колонка040;
			
			мРаздел2.Области.П000020006003.Значение = Колонка060;
			
			мРаздел2.Области.П000020007003.Значение = Колонка070;
			
			мРаздел2.Области.П000020003003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020001003.Значение)
			- ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020002003.Значение);
			
			мРаздел2.Области.П000020005003.Значение = Макс(0,ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020003003.Значение)
			- ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020004003.Значение));
			
			
			мРаздел2.Области.П000020009003.Значение = Макс(0,(ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020007003.Значение, 0)
			+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020008003.Значение, 0))
			- ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020006003.Значение, 0));
			
			мРаздел2.Области.П000020010003.Значение = Макс(0,ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020006003.Значение, 0)
			-(ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020007003.Значение, 0)
			+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020008003.Значение, 0)));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел3" Тогда
		
		Колонка010 = 0;	// А-2.1 + Б-2.1
		Колонка020 = 0; // Г2-2
		Колонка040 = 0; // А-2.3 + Б-2.3
		Колонка050 = 0; // А-2.4
		Колонка060 = 0; // Г3-2
		Колонка080 = 0; // Б-2.4
		
		ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			
			Если Данные.СтавкаНалога = "35" Тогда
				Колонка010 = Колонка010 + Данные.П000070008001;
				Колонка040 = Колонка040 + Данные.П000070010001;
				Колонка050 = Колонка050 + Данные.П000070011001;
			КонецЕсли;
		КонецЦикла;
		
		ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистБ"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			
			Если Данные.СтавкаНалога = "35" Тогда
				Колонка010 = Колонка010 + Данные.П000080001501;
				Колонка040 = Колонка040 + Данные.П000080001701;
				Колонка080 = Колонка080 + Данные.П000080001801;
			КонецЕсли;
		КонецЦикла;
		
		мРаздел3.Области.П000030001003.Значение = Колонка010;
		
		мРаздел3.Области.П000030002003.Значение = ОкруглитьЧислоПоФормату(мЛистГ2.Области.П000010207001.Значение);
		
		мРаздел3.Области.П000030003003.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030001003.Значение)
		- ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002003.Значение);
		
		мРаздел3.Области.П000030004003.Значение = Колонка040;
		
		мРаздел3.Области.П000030005003.Значение = Колонка050;
		
		мРаздел3.Области.П000030005103.Значение = ОкруглитьЧислоПоФормату(мЛистГ3.Области.П000027207001.Значение);
		
		мРаздел3.Области.П000030007003.Значение = Колонка080;
		
		мРаздел3.Области.П000030008003.Значение = Макс(0,(ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005103.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006003.Значение, 0)
		- ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004003.Значение, 0)));
		
		мРаздел3.Области.П000030009003.Значение = Макс(0,ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004003.Значение, 0)
		-(ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005103.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030007003.Значение, 0)));
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел4" Тогда
		
		Колонка010 = 0;	// А-2.1 + Б-2.1
		Колонка020 = 0; // А-2.2 + Б-2.1
		Колонка030 = 0; // А-2.3 + Б-2.3
		Колонка040 = 0; // А-2.4
		Колонка060 = 0; // Б-2.4
		
		ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			
			Если Данные.СтавкаНалога = "9" Тогда
				Колонка010 = Колонка010 + Данные.П000070008001;
				Колонка020 = Колонка020 + Данные.П000070009001;
				Колонка030 = Колонка030 + Данные.П000070010001;
				Колонка040 = Колонка040 + Данные.П000070011001;
			КонецЕсли;
		КонецЦикла;
		
		ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистБ"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			
			Если Данные.СтавкаНалога = "9" Тогда
				Колонка010 = Колонка010 + Данные.П000080001501;
				Колонка020 = Колонка020 + Данные.П000080001501;
				Колонка030 = Колонка030 + Данные.П000080001701;
				Колонка060 = Колонка060 + Данные.П000080001801;
			КонецЕсли;
		КонецЦикла;
		
		мРаздел4.Области.П000040001003.Значение = Колонка010;
		
		мРаздел4.Области.П000040002003.Значение = Колонка020;
		
		мРаздел4.Области.П000040003003.Значение = Колонка030;
		
		мРаздел4.Области.П000040004003.Значение = Колонка040;
		
		мРаздел4.Области.П000040006003.Значение = Колонка060;
		
		мРаздел4.Области.П000040007003.Значение = Макс(0,(ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040004003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040005003.Значение, 0))
		- ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040003003.Значение, 0));
		
		мРаздел4.Области.П000040008003.Значение = Макс(0,ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040003003.Значение, 0)
		-(ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040004003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040005003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040006003.Значение, 0)));
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел5" Тогда
		
		Колонка010 = 0; // А-2.1
		Колонка020 = 0; // А-2.2
		Колонка030 = 0; // А-2.3
		Колонка040 = 0; // А-2.4
		
		ПромТаблицаРаздела = мСтруктураМногостраничныхРазделов["ЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Данные = Страница.Данные;
			
			Если Данные.СтавкаНалога = "15" Тогда
				Колонка010 = Колонка010 + Данные.П000070008001;
				Колонка020 = Колонка020 + Данные.П000070009001;
				Колонка030 = Колонка030 + Данные.П000070010001;
				Колонка040 = Колонка040 + Данные.П000070011001;
			КонецЕсли;
		КонецЦикла;
		
		мРаздел5.Области.П000050001003.Значение = Колонка010;
		
		мРаздел5.Области.П000050002003.Значение = Колонка020;
		
		мРаздел5.Области.П000050003003.Значение = Колонка030;
		
		мРаздел5.Области.П000050004003.Значение = Колонка040;
		
		мРаздел5.Области.П000050006003.Значение = Макс(0,(ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050004003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050005003.Значение, 0))
		- ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050003003.Значение, 0));
		
		мРаздел5.Области.П000050007003.Значение = Макс(0,ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050003003.Значение, 0)
		-(ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050004003.Значение, 0)
		+ ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050005003.Значение, 0)));
		
	КонецЕсли;

	
	
КонецПроцедуры

//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ---
////////////////////////////////////////////////////////////////////////////////


Процедура УстановитьМаскиВПоляхВвода()
	
	// титульный 001
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	мТитульный.Области["ОКАТО"].ЭлементУправления.Маска = "99999999999";
	
	// Раздел6
	мРаздел6.Области.П000060001001.ЭлементУправления.Маска = "9";
	мРаздел6.Области.П000060003003.ЭлементУправления.Маска = "99999999999";
	мРаздел6.Области.П000060002003.ЭлементУправления.Маска = "99999999999999999999";
	
	//Лист В
	мЛистВ.Области.П000090001501.ЭлементУправления.Маска = "9999";
	
	//Лист Л
	мЛистИ.Области.ИмГодВычета.ЭлементУправления.Маска = "9999";
	
	// области номера страницы
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		НомерБлока = 1;
		Пока ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_1") <> Неопределено Цикл
			Для НомерОбластиВБлоке = 1 По 3 Цикл
				ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_" + НомерОбластиВБлоке).ЭлементУправления.Маска = "9";
			КонецЦикла;
			НомерБлока = НомерБлока + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	Перем ИсходноеКоличествоСтрокГруппы;
	
	мБезОткрытияФормы = БезОткрытияФормы;

	//В теущей версии не поддерживается автозаполнение и вывод расшифровки
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации <> "БПКОРП" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
		РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровка");
	КонецЕсли;
 
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный          = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мТитульный002       = ЭлементыФормы.ПолеТабличногоДокументаТитульный002;
	мРаздел1            = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2            = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3            = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4            = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мРаздел5            = ЭлементыФормы.ПолеТабличногоДокументаРаздел5;
	мРаздел6            = ЭлементыФормы.ПолеТабличногоДокументаРаздел6;
	мЛистА              = ЭлементыФормы.ПолеТабличногоДокументаЛистА;
	мЛистБ              = ЭлементыФормы.ПолеТабличногоДокументаЛистБ;
	мЛистВ              = ЭлементыФормы.ПолеТабличногоДокументаЛистВ;
	мЛистГ1             = ЭлементыФормы.ПолеТабличногоДокументаЛистГ1;
	мЛистГ1Продолжение  = ЭлементыФормы.ПолеТабличногоДокументаЛистГ1Продолжение;
	мЛистГ2             = ЭлементыФормы.ПолеТабличногоДокументаЛистГ2;
	мЛистГ3             = ЭлементыФормы.ПолеТабличногоДокументаЛистГ3;
	мЛистД              = ЭлементыФормы.ПолеТабличногоДокументаЛистД;
	мЛистЕ              = ЭлементыФормы.ПолеТабличногоДокументаЛистЕ;
	мЛистЖ1             = ЭлементыФормы.ПолеТабличногоДокументаЛистЖ1;
	мЛистЖ2             = ЭлементыФормы.ПолеТабличногоДокументаЛистЖ2;
	мЛистЖ3             = ЭлементыФормы.ПолеТабличногоДокументаЛистЖ3;
	мЛистЗ              = ЭлементыФормы.ПолеТабличногоДокументаЛистЗ;
	мЛистЗПродолжение   = ЭлементыФормы.ПолеТабличногоДокументаЛистЗПродолжение;
	мЛистИ              = ЭлементыФормы.ПолеТабличногоДокументаЛистИ;
	
	УстановитьМаскиВПоляхВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
			
		КонецЕсли;
		ЗаполнитьДатуПодписи();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	//Иначе
	//	УправлениеЛистами();
	КонецЕсли;

	//начальное заполнение структуры данных
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если Страница.Имя = "ЛистД" Тогда
			//Накладываем условие на доступность ячейки
			ИзменитьТаблицуВариантовЗаполненияЛистаД(НЕ ФлажокОтклАвтоРасчет);
		Иначе
			УстановитьЦветФонаЯчейки(,, Страница.Имя);
		КонецЕсли;
		Если Страница.Имя = "ЛистГ1Продолжение" Тогда
			ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
		КонецЕсли;
	КонецЦикла;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ИзменитьДоступностьРеквизитовНалогоплательщика();
	
КонецПроцедуры

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		ТочностьПоказателя			= ?(ПустаяСтрока(СтрПоказатели.ТочностьПоказателя),ТочностьЕдиницыИзмерения,СокрП(СтрПоказатели.ТочностьПоказателя));
		
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьПоказателя + "; ЧРД=,; ЧН=-; ЧС = 0";

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е" ИЛИ ТипДанныхПоказателя = "Е4" ИЛИ ТипДанныхПоказателя = "Е0")И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				Если ТипДанныхПоказателя = "Е" Тогда
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				ИначеЕсли ТипДанныхПоказателя = "Е4" Тогда
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ4;
				Иначе
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ0;
				КонецЕсли;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					Если ТипДанныхПоказателя = "Е" Тогда
						ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					ИначеЕсли ТипДанныхПоказателя = "Е4" Тогда
						ЧислоЕЗнак = мОписаниеТиповЧислоЕ4;
					Иначе
						ЧислоЕЗнак = мОписаниеТиповЧислоЕ0;
					КонецЕсли;
					
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Знач Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
	
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет, КорСчет, Сдвиг, ПраваяГраница, ИмяРаздела, НомерЛиста, МнЧ, НомерСтроки, Субконто1, Субконто2, Субконто3);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	
	Предупреждение("В текущей версии расшифровка не поддерживается!");
	//Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	//Обраб.Форма = ЭтаФорма;
	//ТекущийЛист = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	//ТекущееТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущийЛист];
	//Обраб.ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
	//Обраб.ПолучитьФорму(, ЭтаФорма).Показать();

КонецПроцедуры

Процедура ЗаполнитьАвто() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать индивидуального предпринимателя!");
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;

	// Начало модуля автозаполнения.
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	Если ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БП" И РедакцияКонфигурации = "2.0" Тогда
		ЗаполнитьДаннымиИБ();
	КонецЕсли;
	
	
	// Конец автозаполнения.
	// Операции, необходимые после процедуры автозаполнения.
	Расчет("");
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьДаннымиИБ()
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(мДатаКонцаПериодаОтчета), Ложь, Организация);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, КонецМесяца(мДатаКонцаПериодаОтчета));
	Если ПрименениеУСН Тогда
		Возврат;
	КонецЕсли;
	
	ВестиУчетПоВидамДеятельности = УчетнаяПолитика.ВестиУчетПоВидамДеятельности;
	
	НомерСтроки = 1;
	
	Если ВестиУчетПоВидамДеятельности Тогда
		
		ВидыДеятельности = Справочники.ВидыДеятельностиПредпринимателей.Выбрать();
		Пока ВидыДеятельности.Следующий() Цикл
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидДеятельности", ВидыДеятельности.Ссылка);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВидыДеятельностиОрганизаций.НоменклатурнаяГруппа,
			|	ВидыДеятельностиОрганизаций.ХарактерДеятельности,
			|	ВидыДеятельностиОрганизаций.ВидДеятельности
			|ИЗ
			|	РегистрСведений.ВидыДеятельностиПредпринимателей КАК ВидыДеятельностиОрганизаций
			|ГДЕ
			|	ВидыДеятельностиОрганизаций.ВидДеятельности = &ВидДеятельности";
			
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			СписокХарактеровДеятельности = РезультатЗапроса.ВыгрузитьКолонку("ХарактерДеятельности");
			СписокНоменклатурныхГрупп = РезультатЗапроса.ВыгрузитьКолонку("НоменклатурнаяГруппа");
			
			ПолучитьДанныеОДеятельностиИП(СписокХарактеровДеятельности, СписокНоменклатурныхГрупп, ВидыДеятельности.КодОКВЭД, НомерСтроки);
		КонецЦикла;
	Иначе
		
		СписокХарактеровДеятельности = Новый Массив;
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ОптоваяТорговля);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.УслугиЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговли);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД);
		СписокХарактеровДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПустаяСсылка());
		
		СписокНоменклатурныхГрупп = Новый Массив;
		СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПустаяСсылка());
		
		Выборка = Справочники.НоменклатурныеГруппы.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНоменклатурныхГрупп.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		ПолучитьДанныеОДеятельностиИП(СписокХарактеровДеятельности, СписокНоменклатурныхГрупп, ,НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеОДеятельностиИП(СписокХарактеровДеятельности, СписокНоменклатурныхГрупп,КодОКВЭД = "",НомерСтроки);
	
	ОблагаетсяНДС = Истина;

	Доходы = 0;
	ПрочиеДоходы = 0;
	МатериальныеРасходы = 0;
	Амортизация = 0;
	РасходыНаОплатуТруда = 0;
	ПрочиеРасходы = 0;
	СуммаИМР = 0;
	ИтогоДоходов = 0;
	ИтогоРасходов = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", СписокХарактеровДеятельности);
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("ДатаНачГода", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ВидНеПринимаемыхРасходов", Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);

	// ИМР
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИМРОбороты.СуммаРасход + ИМРОбороты.НДСРасход, 0) КАК СуммаРасходСНДС,
	|	ЕСТЬNULL(ИМРОбороты.СуммаРасход, 0) КАК СуммаРасход,
	|	ЕСТЬNULL(ИМРОбороты.НДСРасход, 0) КАК НДСРасход
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)) КАК ИМРОбороты
	|ИТОГИ
	|	СУММА(СуммаРасходСНДС),
	|	СУММА(СуммаРасход),
	|	СУММА(НДСРасход)
	|ПО
	|	ОБЩИЕ";

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");

	Если Общ.Следующий() Тогда
		СуммаИМР = ?(ОблагаетсяНДС, Общ.СуммаРасход, Общ.СуммаРасходСНДС);
	КонецЕсли;

	ДатаНачалаГода = НачалоГода(мДатаНачалаПериодаОтчета);
	ДляПризнанияРасходовНеТребуетсяПолучениеДохода = 
		ДоходыИРасходыПредпринимателя.ДляПризнанияРасходовНеТребуетсяПолучениеДохода(Организация, ДатаНачалаГода);

	// Доходы и материальные расходы
	Если ДляПризнанияРасходовНеТребуетсяПолучениеДохода Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход, 0) КАК СуммаСНДС,
		|	ЕСТЬNULL(ИПМПЗОбороты.СуммаПриход, 0) КАК Сумма,
		|	ЕСТЬNULL(ИПМПЗОбороты.НДСПриход, 0) КАК НДС
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Обороты(
		|			&ДатаНачГода,
		|			&ДатаКон,
		|			Регистратор,
		|			Организация = &Организация
		|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
		|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
		|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.Продукция)
		|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход, 0),
		|	ЕСТЬNULL(ИПМПЗОбороты.СуммаПриход, 0),
		|	ЕСТЬNULL(ИПМПЗОбороты.НДСПриход, 0)
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Обороты(
		|			&ДатаНачГода,
		|			&ДатаКон,
		|			Регистратор,
		|			Организация = &Организация
		|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
		|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
		|				И ВидМПЗ <> ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.Продукция)
		|				И ВидМПЗ <> ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ВспомогательныеМатериалы)
		|				И ВидМПЗ <> ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.Материалы)
		|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
		|ИТОГИ
		|	СУММА(СуммаСНДС),
		|	СУММА(Сумма),
		|	СУММА(НДС)
		|ПО
		|	ОБЩИЕ";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОтгружОбороты.СуммаОборот + ОтгружОбороты.НДСОборот, 0) КАК СуммаСНДС,
		|	ЕСТЬNULL(ОтгружОбороты.СуммаОборот, 0) КАК Сумма,
		|	ЕСТЬNULL(ОтгружОбороты.НДСОборот, 0) КАК НДС
		|ИЗ
		|	РегистрНакопления.ИПДоходы.Обороты(
		|			&ДатаНачГода,
		|			&ДатаКон,
		|			,
		|			Организация = &Организация
		|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
		|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)) КАК ОтгружОбороты
		|ИТОГИ
		|	СУММА(СуммаСНДС),
		|	СУММА(Сумма),
		|	СУММА(НДС)
		|ПО
		|	ОБЩИЕ";
	КонецЕсли;

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");

	Если Общ.Следующий() Тогда
		МатериальныеРасходы = ?(ОблагаетсяНДС, Общ.Сумма, Общ.СуммаСНДС);
	КонецЕсли;

	МатериальныеРасходы = МатериальныеРасходы + СуммаИМР;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот, 0) КАК Доход
	|ИЗ
	|	РегистрНакопления.ИПДоходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПДоходыОбороты
	|ИТОГИ
	|	СУММА(Доход)
	|ПО
	|	ОБЩИЕ";

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");

	Если Общ.Следующий() Тогда
		Доходы = Доходы + Общ.Доход;
	КонецЕсли;


	// Амортизация ОС
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИППрочиеРасходыТекПериод.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			Год,
	|			Организация = &Организация
	|				И СтатьяЗатрат ССЫЛКА Справочник.ОсновныеСредства
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)) КАК ИППрочиеРасходыТекПериод
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";

	АмортизацияОС = Запрос.Выполнить();
	ОБЩ = АмортизацияОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если ОБЩ.Следующий() Тогда
		Амортизация = Амортизация + ОБЩ.Сумма;
	КонецЕсли;

	// Амортизация НМА
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИППрочиеРасходыТекПериод.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			Год,
	|			Организация = &Организация
	|				И СтатьяЗатрат ССЫЛКА Справочник.НематериальныеАктивы
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)) КАК ИППрочиеРасходыТекПериод
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";

	АмортизацияОС = Запрос.Выполнить();
	ОБЩ = АмортизацияОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если ОБЩ.Следующий() Тогда
		Амортизация = Амортизация + ОБЩ.Сумма;
	КонецЕсли;

	// Зарплата
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИПРасходыНаОплатуТрудаОбороты.СуммаОборот, 0) КАК Сумма,
	|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			Регистратор,
	|			Организация = &Организация
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И (СтатьяЗатрат ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы)
	|				И (СтатьяЗатрат.ПринятиеКналоговомуУчету
	|					ИЛИ СтатьяЗатрат.ВидРасходовНУ <> &ВидНеПринимаемыхРасходов)) КАК ИПРасходыНаОплатуТрудаОбороты
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ВидНачисленияУдержания";

	ВыбВидНачисления = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидНачисленияУдержания");

	РасходыНаОплатуТруда = 0;
	НомерГрафыРОТ = 5;

	Пока ВыбВидНачисления.Следующий() Цикл
		Если ВыбВидНачисления.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое
			ИЛИ ВыбВидНачисления.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход 
			ИЛИ ВыбВидНачисления.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно
			ИЛИ ВыбВидНачисления.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно Тогда
			
			РасходыНаОплатуТруда = РасходыНаОплатуТруда + ?(ВыбВидНачисления.Сумма = Null, 0, ВыбВидНачисления.Сумма);
			НомерГрафыРОТ = НомерГрафыРОТ + 1;
		КонецЕсли;
	КонецЦикла;

	// Прочие расходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИППрочиеРасходыОбороты.СуммаОборот, 0) КАК Сумма,
	|	ЕСТЬNULL(ИППрочиеРасходыОбороты.НДСОборот, 0) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И (СтатьяЗатрат ССЫЛКА Справочник.СтатьиЗатрат
	|					ИЛИ СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы)
	|				И (СтатьяЗатрат.ПринятиеКналоговомуУчету
	|					ИЛИ СтатьяЗатрат.ВидРасходовНУ <> &ВидНеПринимаемыхРасходов)) КАК ИППрочиеРасходыОбороты
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(НДС)
	|ПО
	|	ОБЩИЕ";

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Общ.Следующий() Тогда
		ПрочиеРасходы = ?(НЕ ОблагаетсяНДС, Общ.Сумма + Общ.НДС, Общ.Сумма);
	КонецЕсли;

	// РБП	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИПРБПОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ИПРБПОстаткиИОбороты.НДСКонечныйОстаток, 0) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПРБП.ОстаткиИОбороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И (ВидРасхода ССЫЛКА Справочник.РасходыБудущихПериодов
	|					ИЛИ ВидРасхода ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|						И ВидРасхода.ПринятиеКналоговомуУчету)) КАК ИПРБПОстаткиИОбороты
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(НДС)
	|ПО
	|	ОБЩИЕ";

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Общ.Следующий() Тогда
		РасходыБудущихПериодов = ?(НЕ ОблагаетсяНДС, Общ.Сумма + Общ.НДС, Общ.Сумма);
	КонецЕсли;

	//Прочие доходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИППрочиеДоходыОбороты.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИППрочиеДоходы.Обороты(
	|			&ДатаНачГода,
	|			&ДатаКон,
	|			Период,
	|			Организация = &Организация
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И (СтатьяДоходов ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					И СтатьяДоходов.ПринятиеКналоговомуУчету)) КАК ИППрочиеДоходыОбороты
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";

	Общ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Общ.Следующий() Тогда
		ПрочиеДоходы = Общ.Сумма;
	КонецЕсли;

	ИтогоДоходов = Доходы + ПрочиеДоходы;
	ИтогоРасходов = МатериальныеРасходы + Амортизация + РасходыНаОплатуТруда + ПрочиеРасходы;

	СтруктураДанныхЛистаВ = Новый Структура;
	СтруктураДанныхЛистаВ.Вставить("КодОКВЭД",КодОКВЭД);
	СтруктураДанныхЛистаВ.Вставить("Доходы",Доходы);
	СтруктураДанныхЛистаВ.Вставить("ПрочиеДоходы",ПрочиеДоходы);
	СтруктураДанныхЛистаВ.Вставить("МатериальныеРасходы",МатериальныеРасходы);
	СтруктураДанныхЛистаВ.Вставить("Амортизация",Амортизация);
	СтруктураДанныхЛистаВ.Вставить("РасходыНаОплатуТруда",РасходыНаОплатуТруда);
	СтруктураДанныхЛистаВ.Вставить("ПрочиеРасходы",ПрочиеРасходы);
	СтруктураДанныхЛистаВ.Вставить("ИтогоДоходов",ИтогоДоходов);
	СтруктураДанныхЛистаВ.Вставить("ИтогоРасходов",ИтогоРасходов);

	Если ИтогоДоходов <> 0 ИЛИ ИтогоРасходов <> 0 Тогда
		ЗаплнитьЛистВ(СтруктураДанныхЛистаВ,НомерСтроки);
		НомерСтроки = НомерСтроки + 1;			
	КонецЕсли;

КонецПроцедуры

Процедура ЗаплнитьЛистВ(СтруктураДанныхЛистаВ, НомерСтроки)
	
	Перем ТаблицаБлока;
	
	Если НомерСтроки <> 1 Тогда //Добавляем строку
		ВставитьДополнительнуюСтроку(мИдГруппыВ);
	КонецЕсли;
	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппыВ, ТаблицаБлока);
	//Заполнение таблицы блока
	ТекущаяСтрока = ТаблицаБлока.Получить(НомерСтроки-1);
	ТекущаяСтрока.П000090001001 = "1";
	ТекущаяСтрока.П000090001002 = СтруктураДанныхЛистаВ.КодОКВЭД;
	ТекущаяСтрока.П000090001003 = СтруктураДанныхЛистаВ.ИтогоДоходов;
	ТекущаяСтрока.П000090001004 = СтруктураДанныхЛистаВ.ИтогоРасходов;
	ТекущаяСтрока.П000090001005 = СтруктураДанныхЛистаВ.МатериальныеРасходы;
	ТекущаяСтрока.П000090001006 = СтруктураДанныхЛистаВ.Амортизация;
	ТекущаяСтрока.П000090001007 = СтруктураДанныхЛистаВ.РасходыНаОплатуТруда;
	ТекущаяСтрока.П000090001009 = СтруктураДанныхЛистаВ.ПрочиеРасходы;
	//вывод в форму
	мЛистВ.Области["П000090001001_" + НомерСтроки].Значение = "1";
	мЛистВ.Области["П000090001002_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.КодОКВЭД;
	мЛистВ.Области["П000090001003_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.ИтогоДоходов;
	мЛистВ.Области["П000090001004_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.ИтогоРасходов;
	мЛистВ.Области["П000090001005_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.МатериальныеРасходы;
	мЛистВ.Области["П000090001006_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.Амортизация;
	мЛистВ.Области["П000090001007_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.РасходыНаОплатуТруда;
	мЛистВ.Области["П000090001009_" + НомерСтроки].Значение = СтруктураДанныхЛистаВ.ПрочиеРасходы;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//обработчики кнопок многостраничных страниц+++
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
	//УстановитьВариантыЗаполненияСпецификаРаздела(ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел6Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел6");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛистАНажатие(Элемент)
 
	мЛистА.Области.СтавкаНалога.Защита = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(- 1, "ЛистА");
	мЛистА.Области.СтавкаНалога.Защита = Ложь;
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛистБНажатие(Элемент)

	мЛистБ.Области.СтавкаНалога.Защита = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(- 1, "ЛистБ");
	мЛистБ.Области.СтавкаНалога.Защита = Ложь;

КонецПроцедуры


Процедура КнопкаПредыдущаяСтраницаЛистГ1ПродолжениеНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "ЛистГ1Продолжение");
 ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛистДНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "ЛистД");
 
КонецПроцедуры


Процедура КнопкаСледующаяСтраницаРаздел6Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел6");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛистАНажатие(Элемент)
 
	мЛистА.Области.СтавкаНалога.Защита = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(1, "ЛистА");
	мЛистА.Области.СтавкаНалога.Защита = Ложь;
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛистБНажатие(Элемент)
 
	мЛистБ.Области.СтавкаНалога.Защита = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(1, "ЛистБ");
	мЛистБ.Области.СтавкаНалога.Защита = Ложь;
 
КонецПроцедуры


Процедура КнопкаСледующаяСтраницаЛистГ1ПродолжениеНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "ЛистГ1Продолжение");
 ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛистДНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "ЛистД");
 
КонецПроцедуры


Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
	СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел6Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Раздел6");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел6Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Раздел6");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛистАНажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("ЛистА");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛистАНажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("ЛистА");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛистБНажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("ЛистБ");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛистБНажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("ЛистБ");
 
КонецПроцедуры



Процедура КнопкаДобавитьДопСтраницуЛистГ1ПродолжениеНажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("ЛистГ1Продолжение");
	ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛистГ1ПродолжениеНажатие(Элемент)
 
 	УдалитьДополнительнуюСтраницу("ЛистГ1Продолжение");
	ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛистДНажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("ЛистД");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛистДНажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("ЛистД");
 
КонецПроцедуры



Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УдалитьСвязанныеСтраницы(ИмяТекущейСтраницыПанели);
	
	Расчет();
	
КонецПроцедуры

Процедура УдалитьСвязанныеСтраницы(ИмяТекущейСтраницыПанели = Неопределено)
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели <> "ЛистЗ"
		И ИмяТекущейСтраницыПанели <> "ЛистИ" Тогда
		Возврат;
	КонецЕсли;
	
	НомерАктивнойСтраницы = Число(Прав(мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Найти(Истина, "АктивнаяСтраница").Представление,1))-1;
	
	Если НомерАктивнойСтраницы = 0 Тогда
		НомерУдаляемойСтраницы = 1;
	Иначе
		НомерУдаляемойСтраницы = 0;
	КонецЕсли;
	
	Если НомерУдаляемойСтраницы = 1 = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели + "Продолжение"].Количество() Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтрокаСвязаннойТаблицы = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели + "Продолжение"][НомерУдаляемойСтраницы];
	АктивнаяСтрокаСвязаннойТаблицы.АктивнаяСтраница = Истина;
	
	ПассивнаяСтрокаСвязаннойТаблицы = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели + "Продолжение"][НомерАктивнойСтраницы];
	ПассивнаяСтрокаСвязаннойТаблицы.АктивнаяСтраница = Ложь;
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели + "Продолжение");
	
КонецПроцедуры

Процедура УстановитьСвязанноеЗначение(Значение, ИмяТекущейСтраницыПанели, НомерШага = 0)
	
	Если НомерШага = 0 Тогда
		НомерШага = Число(Прав(мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Найти(Истина, "АктивнаяСтраница").Представление,1))-1;
	КонецЕсли;
	
	ТекущийЛист = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели][НомерШага].Представление;
	СтрокаСвязаннойТаблицы = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели + "Продолжение"].Найти(ТекущийЛист, "Представление");
	ДанныеРаздела = СтрокаСвязаннойТаблицы.Данные;
	Если ИмяТекущейСтраницыПанели = "ЛистЗ" Тогда
		ИмяПоказателя = "П000017000101"
	Иначе
		ИмяПоказателя = "П000019000101"
	КонецЕсли;
	
	ДанныеРаздела[ИмяПоказателя] = ?(НЕ ЗначениеЗаполнено(Значение),0,Число(Значение));
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел6Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел6");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛистАНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "ЛистА");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛистБНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "ЛистБ");
 
КонецПроцедуры


Процедура КнопкаПерейтиНаСтраницуЛистГ1ПродолжениеНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "ЛистГ1Продолжение");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛистДНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "ЛистД");
 
КонецПроцедуры

//обработчики кнопок многостраничных страниц---

//обработка выбора на всех страницах+++
Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	
	//специальная обработка некоторых областей
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		Возврат;
	КонецЕсли;
	Если Лев(Область.Имя, 5) = "ИНН1_" Тогда
		ОбработкаВыбораИННФизЛица();
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		Возврат;
	КонецЕсли;
	Если Лев(Область.Имя, 12) = "ДатаРождения" Тогда
		ОбработкаВыбораДаты("ДатаРождения", мТитульный002, "Укажите дату рождения");
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		Возврат;
	КонецЕсли;
	Если Лев(Область.Имя, 19) = "ДатаВыдачиДокумента" Тогда
		ОбработкаВыбораДаты("ДатаВыдачиДокумента", мТитульный002, "Укажите дату выдачи документа");
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		Возврат;
	КонецЕсли;
	
	
	//форма заполнения листа 03 раздел В
	Если   (ИмяЯчейки = "КодСтраны")
	   ИЛИ (ИмяЯчейки = "Индекс") 
	   ИЛИ (ИмяЯчейки = "Регион") 
	   ИЛИ (ИмяЯчейки = "Район") 
	   ИЛИ (ИмяЯчейки = "Город") 
	   ИЛИ (ИмяЯчейки = "НаселенныйПункт") 
	   ИЛИ (ИмяЯчейки = "Улица")
	   ИЛИ (ИмяЯчейки = "Дом") 
	   ИЛИ (ИмяЯчейки = "Корпус") 
	   ИЛИ (ИмяЯчейки = "Квартира") Тогда 

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		КодСтран     = мТитульный002.Области.КодСтраны.Значение;
		ПочтИндекс	 = мТитульный002.Области.Индекс.Значение;
		СубъектРФНом = мТитульный002.Области.Регион.Значение;
		РайонОб      = мТитульный002.Области.Район.Значение;
		ГородОб      = мТитульный002.Области.Город.Значение;
		НПОб         = мТитульный002.Области.НаселенныйПункт.Значение;
		УлицаОб      = мТитульный002.Области.Улица.Значение;
		ДомаОб       = мТитульный002.Области.Дом.Значение;
		КорпусОб     = мТитульный002.Области.Корпус.Значение;
		КвартираОб   = мТитульный002.Области.Квартира.Значение;

		СтруктураАдресныхДанных.Вставить("КодСтраны", КодСтран); 
		СтруктураАдресныхДанных.Вставить("Индекс",    ПочтИндекс);
		СтруктураАдресныхДанных.Вставить("Регион",    СубъектРФНом); 
		СтруктураАдресныхДанных.Вставить("Район",     РайонОб);
		СтруктураАдресныхДанных.Вставить("Город",     ГородОб);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб);
		СтруктураАдресныхДанных.Вставить("Улица",     УлицаОб);
		СтруктураАдресныхДанных.Вставить("Дом",       ДомаОб);
		СтруктураАдресныхДанных.Вставить("Корпус",    КорпусОб);
		СтруктураАдресныхДанных.Вставить("Квартира",  КвартираОб);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			КодСтран = "";
			Индекс   = "";
			Регион   = "";
			НазваниеРегиона = "";
			Район    = "";
			Город    = "";
			НаселенныйПункт = "";
			Улица    = "";
			Дом      = "";
			Корпус   = "";
			Квартира = "";

			КодСтран     = ФормаВводаАдреса.НачальноеЗначениеВыбора.КодСтраны;
			ПочтИндекс   = ФормаВводаАдреса.НачальноеЗначениеВыбора.Индекс;
			СубъектРФНом = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;

			РайонОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Район;
			ГородОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Город;
			НПОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.НаселенныйПункт;
			УлицаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Улица;
			ДомаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Дом;
			КорпусОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Корпус;
			КвартираОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Квартира;

			Модифицированность = Истина;

		КонецЕсли;

		мТитульный002.Области.КодСтраны.Значение = КодСтран;
		мТитульный002.Области.Индекс.Значение    = ПочтИндекс;
		мТитульный002.Области.Регион.Значение    = СубъектРФНом;
		мТитульный002.Области.Район.Значение     = РайонОб;
		мТитульный002.Области.Город.Значение     = ГородОб;
		мТитульный002.Области.НаселенныйПункт.Значение = НПОб;
		мТитульный002.Области.Улица.Значение     = УлицаОб;
		мТитульный002.Области.Дом.Значение       = ДомаОб;
		мТитульный002.Области.Корпус.Значение    = КорпусОб;
		мТитульный002.Области.Квартира.Значение  = КвартираОб;
		
	КонецЕсли;
	
	Если (Лев(ИмяЯчейки,13) = "П000080001001") Тогда //Лист Б Код ОКСМ
		СтандартнаяОбработка = Ложь;
		Спр = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора().ОткрытьМодально();
		Если Спр <> Неопределено Тогда
			мЛистБ.Области[ИмяЯчейки].Значение = Спр.Код;
		КонецЕсли;
	КонецЕсли;
	
	Если (Лев(ИмяЯчейки,13) = "П000080001004") Тогда //Лист Б информация о валюте
		СтандартнаяОбработка = Ложь;
		Спр = Справочники.Валюты.ПолучитьФормуВыбора().ОткрытьМодально();
		Если Спр <> Неопределено Тогда
			мЛистБ.Области["П000080001004" + Сред(ИмяЯчейки,14,СтрДлина(ИмяЯчейки) - 13)].Значение = Спр.Код;
		КонецЕсли;
	КонецЕсли;
	
		//форма заполнения листа 03 раздел В
	Если   (ИмяЯчейки = "ИмИндекс")
	   ИЛИ (ИмяЯчейки = "ИмРегион") 
	   ИЛИ (ИмяЯчейки = "ИмРайон") 
	   ИЛИ (ИмяЯчейки = "ИмГород") 
	   ИЛИ (ИмяЯчейки = "ИмНаселенныйПункт") 
	   ИЛИ (ИмяЯчейки = "ИмУлица")
	   ИЛИ (ИмяЯчейки = "ИмДом") 
	   ИЛИ (ИмяЯчейки = "ИмКорпус") 
	   ИЛИ (ИмяЯчейки = "ИмКвартира") Тогда 

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс	= мЛистИ.Области.ИмИндекс.Значение;
		СубъектРФНом = мЛистИ.Области.ИмРегион.Значение;
		РайонОб     = мЛистИ.Области.ИмРайон.Значение;
		ГородОб     = мЛистИ.Области.ИмГород.Значение;
		НПОб        = мЛистИ.Области.ИмНаселенныйПункт.Значение;
		УлицаОб     = мЛистИ.Области.ИмУлица.Значение;
		ДомаОб      = мЛистИ.Области.ИмДом.Значение;
		КорпусОб    = мЛистИ.Области.ИмКорпус.Значение;
		КвартираОб  = мЛистИ.Области.ИмКвартира.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФНом); // код
		СтруктураАдресныхДанных.Вставить("Район", РайонОб);
		СтруктураАдресныхДанных.Вставить("Город", ГородОб);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб);
		СтруктураАдресныхДанных.Вставить("Улица", УлицаОб);
		СтруктураАдресныхДанных.Вставить("Дом", ДомаОб);
		СтруктураАдресныхДанных.Вставить("Корпус", КорпусОб);
		СтруктураАдресныхДанных.Вставить("Квартира", КвартираОб);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ПочтИндекс = ФормаВводаАдреса.НачальноеЗначениеВыбора.Индекс;
			СубъектРФНом = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;

			РайонОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Район;
			ГородОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Город;
			НПОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.НаселенныйПункт;
			УлицаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Улица;
			ДомаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Дом;
			КорпусОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Корпус;
			КвартираОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Квартира;

			Модифицированность = Истина;

		КонецЕсли;

		мЛистИ.Области.ИмИндекс.Значение=ПочтИндекс;
		мЛистИ.Области.ИмРегион.Значение = СубъектРФНом;
		мЛистИ.Области.ИмРайон.Значение = РайонОб;
		мЛистИ.Области.ИмГород.Значение = ГородОб;
		мЛистИ.Области.ИмНаселенныйПункт.Значение = НПОб;
		мЛистИ.Области.ИмУлица.Значение = УлицаОб;
		мЛистИ.Области.ИмДом.Значение = ДомаОб;
		мЛистИ.Области.ИмКорпус.Значение = КорпусОб;
		мЛистИ.Области.ИмКвартира.Значение = КвартираОб;
		
	КонецЕсли;

		
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		//Определение ТребРезультат+++
		//проверка и удаление вариантов происходит для отдельных показателей
		//внутри происходит проверка: требуется ли сокращать список и по какому значению результата проверки
		//если будет требуемый результат проверки условий, отличный от нуля, то будет проверка
		//конструкция проверки должна предусматривать наличие нескольких критериев
		//Примечание: для последующего корректного удаления ТребРезультат следует определять числом
		ТребРезультат = 0;
		Если КодПоказателя = "П000110003003" Тогда
		//код КБК раздела 6	
			//признак налогоплательщика раздела 1.1
			Критерий1 = мРаздел6.Области.П000060002003.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		КонецЕсли;
		
		//Определение ТребРезультат---
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		ТЗВыбора.Колонки.Удалить(2);
		
		КолонкаПоиска = "Код";
		
		Если КодПоказателя <> "П000012001004" 
			И КодПоказателя <> "П000012001005"
			И КодПоказателя <> "П000012001008" Тогда// Лист Д в одной таблице с доходами содержатся и нормативы
			ТЗВыбора.Колонки.Удалить(2);
		Иначе
			КолонкаПоиска = ?(КодПоказателя = "П000012001005", "Название", "Код");
		КонецЕсли;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СправочникИФНС.Ссылка КАК Ссылка,
		               |	СправочникИФНС.Код КАК КодНО,
		               |	СправочникИФНС.Представитель КАК Представитель
		               |ИЗ
		               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
		               |ГДЕ
		               |	СправочникИФНС.Владелец = &Владелец
		               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КодНО";
		Запрос.УстановитьПараметр("Владелец", Организация);
		ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
		
		ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
		ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
		ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
		
		ПервоначальноеЗначение = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
							   
		Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
		ТаблицаВыбора.Колонки.Удалить("Ссылка");
		
		Если ТаблицаВыбора.Количество() <> 0 Тогда
			ТекСтрока = ТаблицаВыбора.Найти(ПервоначальноеЗначение, "КодНО");
			Если ТекСтрока = Неопределено Тогда
				РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите налоговый орган");
			Иначе
				РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите налоговый орган", ТекСтрока);
			КонецЕсли;
			Если РезультатВыбора <> Неопределено Тогда
				ВыбранныйКодНО = РезультатВыбора.КодНО;
				ЗаполнитьКодНО(ВыбранныйКодНО);
				ЗаполнитьСведенияОПредставителе(Ссылки[ТаблицаВыбора.Индекс(РезультатВыбора)]);
				Модифицированность = Истина;
			КонецЕсли;
		ИначеЕсли ПустаяСтрока(ПервоначальноеЗначение) Тогда
			Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
		Иначе
			Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
		КонецЕсли;
		
	Иначе
		
		КодНО = "";
		Для Инд = 1 По 4 Цикл
			КодНО = КодНО + мТитульный.Области["КодИМНС" + Инд].Значение;
		КонецЦикла;
		
		Если ВвестиСтроку(КодНО, "Укажите код налоговой инспекции", 4, Ложь) Тогда
			ЗаполнитьКодНО(КодНО);
		КонецЕсли;
		 
		
	КонецЕсли;
	 
	
КонецПроцедуры

Процедура ЗаполнитьКодНО(ВыбранныйКодНО)	
	
	ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
	Для Инд = ДлинаКодаНО + 1 По 4 Цикл
		ВыбранныйКодНО = "0" + ВыбранныйКодНО;
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
	КонецЦикла;
	
КонецПроцедуры
 

Процедура ОбработкаВыбораИННФизЛица()	
	
	ИНН = СтрЗаменить(мИННФЛ, "-", "");
	Если НЕ ВвестиСтроку(ИНН, "Укажите ИНН налогоплательщика", 12, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(СокрЛП(ИНН)) Тогда
		Предупреждение(НСтр("ru = 'В ИНН должны быть указаны только цифры!'"),, Заголовок );
		Возврат;
	КонецЕсли; 

	мИННФЛ = СокрЛП(ИНН);
	
	// заполняем ИНН
	мИННФЛ = СокрЛП(ИНН);
	Для Инд = СтрДлина(мИННФЛ) + 1 По 12 Цикл
		мИННФЛ = мИННФЛ + "-";
	КонецЦикла;
	
	
	Для Сч=1 По 9 Цикл
		ПроставитьНаВсехЛистах("ИНН" + Сч + "_", мИННФЛ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаВыбораДаты(Префикс, ТабДокумент, ТекстВопроса)
	
	ТекущееЗначение = "";
	Для СчетчикПолей = 1 По 2 Цикл
		ИмяОбласти = Префикс + СчетчикПолей;
		ТекущееЗначение = ТекущееЗначение + ТабДокумент.Область(ИмяОбласти).Текст;
	КонецЦикла;
	ЧастьДаты = "";
	Для СчетчикПолей = 3 По 4 Цикл
		ИмяОбласти = Префикс + СчетчикПолей;
		ЧастьДаты = ЧастьДаты + ТабДокумент.Область(ИмяОбласти).Текст;
	КонецЦикла;
	ТекущееЗначение = ЧастьДаты + ТекущееЗначение;
	ЧастьДаты = "";
	Для СчетчикПолей = 5 По 8 Цикл
		ИмяОбласти = Префикс + СчетчикПолей;
		ЧастьДаты = ЧастьДаты + ТабДокумент.Область(ИмяОбласти).Текст;
	КонецЦикла;
	ТекущееЗначение = ЧастьДаты + ТекущееЗначение;
	
	ИзменяемоеЗначение = ?(ТекущееЗначение="", '00010101', Дата(ТекущееЗначение));
	Если ВвестиДату(ИзменяемоеЗначение, ТекстВопроса, ЧастиДаты.Дата) Тогда
		ТекущееЗначение = Формат(ИзменяемоеЗначение, "ДФ=ддММггг");
		Для СчетчикПолей = 1 По 8 Цикл
			ИмяОбласти = Префикс + СчетчикПолей;
			Если ТабДокумент.Область(ИмяОбласти).СодержитЗначение Тогда
				ТабДокумент.Область(ИмяОбласти).Значение = Сред(ТекущееЗначение, СчетчикПолей, 1);
			Иначе
				ТабДокумент.Область(ИмяОбласти).Текст = Сред(ТекущееЗначение, СчетчикПолей, 1);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	 
	
КонецПроцедуры
 

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

//обработка выбора на всех страницах---

//обработка ПриИзмененииСодержимогоОбласти на всех страницах+++
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	//обработка изменения значений критериев (влияние на зависимые показатели)---
	
	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницыПанели = "ЛистА" 
		ИЛИ ИмяТекущейСтраницыПанели = "ЛистБ" 
		ИЛИ ИмяТекущейСтраницыПанели = "ЛистВ" 
		ИЛИ ИмяТекущейСтраницыПанели = "ЛистГ2"
		ИЛИ ИмяТекущейСтраницыПанели = "ЛистГ3"
		ИЛИ ИмяТекущейСтраницыПанели = "ЛистГ1Продолжение" Тогда
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ИмяПоказателя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ИмяПоказателя, 1, 13), Элемент.ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "Фамилия" Тогда
		ПроставитьНаВсехЛистах("Фамилия", ЗначПоказателя, Ложь);
		Возврат;
	КонецЕсли; 
	Если ИмяПоказателя = "Имя" Тогда
		ПроставитьНаВсехЛистах("Имя1", Врег(Лев(ЗначПоказателя,1)), Ложь);
		Возврат;
	КонецЕсли; 
	Если ИмяПоказателя = "Отчество" Тогда
		ПроставитьНаВсехЛистах("Отчество1", Врег(Лев(ЗначПоказателя,1)), Ложь);
		Возврат;
	КонецЕсли; 
	
	Если ИмяТекущейСтраницыПанели = "ЛистД" Тогда
		
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ИмяПоказателя, 15);
			Для НомерПоказателя = 1 По 9 Цикл
				// Обновим многострочный блок вместе со связаннми ячейками.
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, "П00001200100" + НомерПоказателя, Элемент.Области["П00001200100" + НомерПоказателя + "_" + НомерСтрокиМнгЧ].Значение);
			КонецЦикла;
			
			//изменение вариантов заполнения ячеек при изменении определенных показателей
			Если Лев(ИмяПоказателя, 13) = "П000012001007" 
				ИЛИ Лев(ИмяПоказателя, 13) = "П000012001008" Тогда
				ИзменитьТаблицуВариантовЗаполненияЛистаД(НЕ ФлажокОтклАвтоРасчет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистВ" Тогда
		Если Лев(ИмяПоказателя, 13) = "П000090001002" Тогда
			Если НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
				Сообщить("На листе В задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистЗ" ИЛИ ИмяТекущейСтраницыПанели = "ЛистИ" Тогда
		Если Лев(ИмяПоказателя, 13) = "П000016000101" 
			ИЛИ Лев(ИмяПоказателя, 13) = "П000018000101" Тогда
			УстановитьСвязанноеЗначение(ЗначПоказателя, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "СтатусНалогоплательщика" Тогда
		Если ЗначПоказателя = "1" Тогда
			мСтатусНалогоплательщика = 1;
		ИначеЕсли ЗначПоказателя = "2" Тогда
			мСтатусНалогоплательщика = 2;
		Иначе
			мСтатусНалогоплательщика = 0;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();	
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

//обработка ПриИзмененииСодержимогоОбласти на всех страницах---

//обработка ПриАктивизацииОбласти на всех страницах+++
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел4");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел5");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел6");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистАПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистА");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистБПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистБ");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистВПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистВ");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистГ1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистГ1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистГ1ПродолжениеПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистГ1Продолжение");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистГ2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистГ2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистГ3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистГ3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистДПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистД");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЕПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЕ");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЖ1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЖ1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЖ2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЖ2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЖ3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЖ3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЗПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЗ");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистЗПродолжениеПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистЗПродолжение");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛистИПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ЛистИ");
 
КонецПроцедуры




//обработка ПриАктивизацииОбласти на всех страницах---

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов+++
//и связанные с ними процедуры - функции по работе с многострочными блоками

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	Если ИмяГруппы = "П0000220010" Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000220020");
	КонецЕсли; 
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;
	
	Раздел = ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
		
		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
		
		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;
		
		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
		
		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		
		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;
			
			РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(СтруктураГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);
			
		КонецЦикла;
		
		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);
		
		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
			
			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппыА Тогда // Лист А
		ТекТабличноеПоле = мЛистА;
	ИначеЕсли ИдГруппы = мИдГруппыБ Тогда // Лист Б
		ТекТабличноеПоле = мЛистБ;
	ИначеЕсли ИдГруппы = мИдГруппыВ Тогда // Лист В
		ТекТабличноеПоле = мЛистВ;
	ИначеЕсли ИдГруппы = мИдГруппыГ1Продолжение Тогда // Лист Г1 Продолжение
		ТекТабличноеПоле = мЛистГ1Продолжение;
	ИначеЕсли ИдГруппы = мИдГруппыГ2 Тогда // Лист Г2
		ТекТабличноеПоле = мЛистГ2;
	ИначеЕсли ИдГруппы = мИдГруппыГ3 Тогда // Лист Г3
		ТекТабличноеПоле = мЛистГ3;
	ИначеЕсли ИдГруппы = мИдГруппыЖ3_1 Тогда // Лист Ж3 (часть1)
		ТекТабличноеПоле = мЛистЖ3;
	ИначеЕсли ИдГруппы = мИдГруппыЖ3_2 Тогда // Лист Ж3 (часть2)
		ТекТабличноеПоле = мЛистЖ3;
	КонецЕсли;

	Возврат ТекТабличноеПоле;
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмятекущейСтраницыПанели = "ЛистА" Тогда
		ИмяГруппы = мИдГруппыА;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистБ" Тогда
		ИмяГруппы = мИдГруппыБ;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистВ" Тогда
		ИмяГруппы = мИдГруппыВ;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистГ1Продолжение" Тогда
		ИмяГруппы = мИдГруппыГ1Продолжение;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистГ2" Тогда
		ИмяГруппы = мИдГруппыГ2;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистГ3" Тогда
		ИмяГруппы = мИдГруппыГ3;
	ИначеЕсли ИмятекущейСтраницыПанели = "ЛистЖ3" Тогда
		ИмяГруппы = мИдГруппыЖ3_1;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);		
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

Процедура КнопкаДобавитьДопСтрокиЛистАНажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистАНажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛистБНажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛистВНажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистБНажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистВНажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛистГ2Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛистГ3Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистГ2Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистГ3Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛистЖ3Нажатие(Элемент)
	ВставитьДополнительнуюСтроку(мИдГруппыЖ3_1);
	ВставитьДополнительнуюСтроку(мИдГруппыЖ3_2);
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛистЖ3Нажатие(Элемент)
	УдалитьДополнительнуюСтроку(,,мИдГруппыЖ3_1);
	УдалитьДополнительнуюСтроку(,,мИдГруппыЖ3_2, Ложь);
	Расчет();
КонецПроцедуры

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов---
//и связанные с ними процедуры-функции по работе с многострочными блоками

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	Если ОчиститьОтчет() Тогда
		ЗаполнитьАвто();
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистД" Тогда
		//Накладываем условие на доступность ячейки
		ИзменитьТаблицуВариантовЗаполненияЛистаД(НЕ ФлажокОтклАвтоРасчет);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистГ1Продолжение" Тогда
		ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ТочностьПоказателя  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 10).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			НоваяСтрока.ТочностьПоказателя  = ТочностьПоказателя;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный002";
	СтрокаУровня1.Представление            = "Физ. лицо";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный002";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистА";
	СтрокаУровня1.Представление            = "Лист А";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистА";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистБ";
	СтрокаУровня1.Представление            = "Лист Б";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистБ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистВ";
	СтрокаУровня1.Представление            = "Лист В";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистВ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1";
	СтрокаУровня1.Представление            = "Лист Г1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистГ1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1Продолжение";
	СтрокаУровня1.Представление            = "Лист Г1 (продолжение)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистГ1Продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ2";
	СтрокаУровня1.Представление            = "Лист Г2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистГ2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ3";
	СтрокаУровня1.Представление            = "Лист Г3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистГ3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистД";
	СтрокаУровня1.Представление            = "Лист Д";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистД";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЕ";
	СтрокаУровня1.Представление            = "Лист Е";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЕ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ1";
	СтрокаУровня1.Представление            = "Лист Ж1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЖ1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ2";
	СтрокаУровня1.Представление            = "Лист Ж2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЖ2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ3";
	СтрокаУровня1.Представление            = "Лист Ж3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЖ3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗ";
	СтрокаУровня1.Представление            = "Лист З";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЗ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение";
	СтрокаУровня1.Представление            = "Лист З (продолжение)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистЗПродолжение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистИ";
	СтрокаУровня1.Представление            = "Лист И";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛистИ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		
	Если ИмяТекущейСтраницыПанели = "ЛистД" Тогда
		//Накладываем условие на доступность ячейки
		ИзменитьТаблицуВариантовЗаполненияЛистаД(НЕ ФлажокОтклАвтоРасчет);
	Иначе
		РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистГ1Продолжение" Тогда
		ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение();
	КонецЕсли;
	
	Расчет();
	
КонецПроцедуры

Процедура ИзменитьТаблицуВариантовЗаполненияЛистаГ1Продолжение()
		
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	ИмяСтраницы = "ЛистГ1Продолжение";
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
		Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
			ТекущиеОбласти = ЭтаФорма.ЭлементыФормы.ПолеТабличногоДокументаЛистг1Продолжение.Области;				
			
			Для НомСтр = 1 По 12 Цикл
				ИмяПоказателя = "П000025119001_" + НомСтр;			
				ТекущиеОбласти[ИмяПоказателя].Защита = Истина;
				ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
			КонецЦикла;
			
			ИмяПоказателя = "П000025119006_12";			
			ТекущиеОбласти[ИмяПоказателя].Защита = Истина;
			ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
			
			ИмяПоказателя = "П000025119004_1";
			ТекущиеОбласти[ИмяПоказателя].Защита = Истина;
			ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла; // Для каждого
	КонецЦикла; // Для
	
КонецПроцедуры

Процедура ИзменитьТаблицуВариантовЗаполненияЛистаД(ПолныйРучнойВвод = Ложь)

	Перем МассивВариантовЗаполненияСтраниц;
	Перем ЦветФона;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ПолныйРучнойВвод Тогда
		
		ИмяСтраницы = "ЛистД";
		// а если это многостраничный раздел?
		КолСтрВРазделе = РегламентированнаяОтчетность.роПолучитьКоличествоСтраницРаздела(ЭтаФорма, ИмяСтраницы); // кол-во страниц в разделе
		// Всегда получим актуальную таблицу заполнения. Не эталонную.
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницы);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Если раздел многостраничный, то нужно насквозь все обнулять !!!
		
		Если КолСтрВРазделе = 1 Тогда
			
			Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
				
				ИмяПоказателя            =  Строка.КодПоказателя;
				КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногострочностьВРазделе");
				ТекущиеОбласти = ЭтаФорма.ЭлементыФормы.ПолеТабличногоДокументаЛистД.Области;
				
				Для НомСтр = 1 по КолвоСтрокВМногострочнойЧасти Цикл
					ИмяКонтрольногоПоказателя = "П000012001007" + "_" + Формат(НомСтр, "ЧГ=0");
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(НомСтр, "ЧГ=0");
					Если ТекущиеОбласти[ИмяКонтрольногоПоказателя].Значение = "404" Тогда
						Ключ = "_" + 0;
						мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
						ТекущиеОбласти[ИмяПоказателя].Защита = Ложь;
						ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
					Иначе
						Ключ = "_" + 4;
						мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
						ТекущиеОбласти[ИмяПоказателя].Защита = Истина;
						ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла; // Для Каждого Строка Из
				
		КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
		
		Если КолСтрВРазделе >= 2 Тогда
			
			Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
				Возврат;
			КонецЕсли;
			
			Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
				Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
					ИмяПоказателя            =  Строка.КодПоказателя;
					КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);
					БазоваяЧасть = ИмяПоказателя;
					ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногострочностьВРазделе");
					ТекущиеОбласти = ЭтаФорма.ЭлементыФормы.ПолеТабличногоДокументаЛистД.Области;
					
					Для НомСтр = 1 по КолвоСтрокВМногострочнойЧасти Цикл
						ИмяКонтрольногоПоказателя = "П000012001007" + "_" + Формат(НомСтр, "ЧГ=0");
						ИмяПоказателя = БазоваяЧасть + "_" + Формат(НомСтр, "ЧГ=0");
						Если ТекущиеОбласти[ИмяКонтрольногоПоказателя].Значение = "404" Тогда
							Ключ = "_" + 0;
							мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
							ТекущиеОбласти[ИмяПоказателя].Защита = Ложь;
							ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
						Иначе
							Ключ = "_" + 4;
							мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
							ТекущиеОбласти[ИмяПоказателя].Защита = Истина;
							ТекущиеОбласти[ИмяПоказателя].ЦветФона = ЦветФона;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла; // Для каждого
			КонецЦикла; // Для
		КонецЕсли; // КолСтрВРазделе >= 2
	КонецЕсли;
	
КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполненияЛистаД(ПолныйРучнойВвод = 0)

Процедура ИзменитьДоступностьРеквизитовНалогоплательщика()	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Защита = Истина;
		Цвет   = ЦветаСтиля.ЦветФонаПоля;
		ЭлементыФормы.Надпись.Видимость   = Истина;
		ЭлементыФормы.Надпись33.Видимость = Истина;
	Иначе
		Защита = Ложь;
		Цвет   = Новый Цвет(255, 255, 192);
		ЭлементыФормы.Надпись.Видимость   = Ложь;
		ЭлементыФормы.Надпись33.Видимость = Ложь;
	КонецЕсли;
	
	Титульный1 = Новый Структура("ИНН1_ВсеЯчейки,Фамилия,Имя,Отчество,ТелОрганизации");
	Для Каждого Поле Из Титульный1 Цикл
		мТитульный.Область(Поле.Ключ).Защита   = Защита;
		мТитульный.Область(Поле.Ключ).ЦветФона = Цвет;
	КонецЦикла;
	 
	Титульный2 = Новый Структура("ДатаРождения_ВсеЯчейки,МестоРождения,ДатаВыдачиДокумента_ВсеЯчейки,КодВидаДокумента,КемВыданДокумент,СерияИНомерДокумента");
	Для Каждого Поле Из Титульный2 Цикл
		мТитульный002.Область(Поле.Ключ).Защита   = Защита;
		мТитульный002.Область(Поле.Ключ).ЦветФона = Цвет;
	КонецЦикла;
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2010Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			ТаблСписка.Колонки.Добавить("Норматив",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					НовСтрока.Норматив = СокрП(МакетСоставаПоказателей.Область(НомСтр, 4).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ОКАТО", 11, "ОКАТО");
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Гражданство", 1, , "Наличие гражданства", КоллекцияСписковВыбора["Гражданство"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтатусНалогоплательщика", 1, , "Статус налогоплательщика", КоллекцияСписковВыбора["СтатусНалогоплательщика"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "МестоЖительства", 1, , "Выбор вида места жительства", КоллекцияСписковВыбора["МестаЖительства"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодВидаДокумента", 2, , "Выбор вида документа, удостоверяющего личность", КоллекцияСписковВыбора["КодВидаДокумента"]);
	
	//Раздел 6
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060001001", 1, , "Выбор кода строки 010", КоллекцияСписковВыбора["КодСтроки010"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060003003", 11, "ОКАТО");
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	//Лист А
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтавкаНалога", 2, , "Выбор налоговой ставки", КоллекцияСписковВыбора["СтавкаНалога"]);
	
	//Лист В
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000090001001", 1, , "Выбор вида деятельности", КоллекцияСписковВыбора["ВидДеятельности"]);
	
	//Лист Д
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000012001001", 1, , "Выбор места нахождения источника доходов", КоллекцияСписковВыбора["ИсточникДоходов"]);
	
	//Лист Ж3
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000022001001", 1, , "Выбор признака договора пенсионного обеспечения", КоллекцияСписковВыбора["ПризнакДоговораПенсионногоСтрахования"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000022011001", 1, , "Выбор признака договора пенсионного обеспечения", КоллекцияСписковВыбора["ПризнакДоговораПенсионногоСтрахования"]);
	
	//Лист И
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023001001", 1, , "Выбор кода наименования объекта",    КоллекцияСписковВыбора["КодНаименованияОбъекта"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023002001", 1, , "Выбор вида собственности на объект", КоллекцияСписковВыбора["ВидСобственности"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023003001", 1, , "Выбор признака налогоплательщика",   КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"]);
	
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 ИЛИ КодПоказателя = "П000022011001" Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	//Изменение связанных данных
	Если Элемент.Имя = "ПолеТабличногоДокументаЛистД" Тогда
		Если КодПоказателя = "П000012001004" 
			ИЛИ КодПоказателя = "П000012001005" 
			ИЛИ КодПоказателя = "П000012001008" Тогда
			
			Стр = Прав(Область.Имя, СтрДлина(Область.Имя) - СтрДлина(КодПоказателя));
			
			Если Элемент.Области["П000012001007" + Стр].Значение = "" Тогда
				Элемент.Области["П000012001007" + Стр].Значение = "405";
			КонецЕсли;
			
			Если КодПоказателя = "П000012001008" Тогда
				Элемент.Области["П000012001007" + Стр].Значение = "405";
			КонецЕсли;
			
			ПоНормативу = Элемент.Области["П000012001007" + Стр].Значение = "405";
			
			Область.Значение = РезультатВыбора.Код;
			Элемент.Области["П000012001004" + Стр].Значение = РезультатВыбора.Код;
			Элемент.Области["П000012001005" + Стр].Значение = РезультатВыбора.Название;
			Элемент.Области["П000012001008" + Стр].Значение = ?(ПоНормативу, РезультатВыбора.Норматив, 0);
			
			
		ИначеЕсли КодПоказателя = "П000012001007" Тогда
			Стр = Прав(Область.Имя, СтрДлина(Область.Имя) - СтрДлина(КодПоказателя));
			ПоНормативу = Элемент.Области["П000012001007" + Стр].Значение = "405";
			Если НЕ ПоНормативу Тогда
				Элемент.Области["П000012001008" + Стр].Значение = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВПолеВводаВПолеТабличногоДокумента(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ЭлементыФормы.Найти("ПолеТабличногоДокумента" + ИмяТекущейСтраницы) <> Неопределено Тогда
		Область = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницы].ТекущаяОбласть;
	Иначе
		Возврат;
	КонецЕсли;
		
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Текст) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Текст));
		Для Инд = ДлинаЗначения+1 По 11 Цикл
			Текст = СокрЛП(Текст) + "0";
		КонецЦикла;
	КонецЕсли;
	
	
	Если СтрДлина(СокрЛП(Текст)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Текст)) <> ПараметрВводаПоля.Длина Тогда
		Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Элемент.Значение=Текст;
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" И СтрокаУровня1.ИмяСтраницы <> "Титульный002" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров(); // Данные о физлице, адресе проживания и т.п. - титульные листы
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()

	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");

	Макет = ПолучитьМакет("СтруктураXML506");
	ВысотаТаблицы = Макет.ВысотаТаблицы;

	УчтенныеГруппы = Новый Соответствие;

	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда

				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				// 
				НовСтр                     = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код                 = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел              = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ                = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип                 = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат              = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность             = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность      = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность            = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность     = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность      = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность   = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность     = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие             = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление       = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);

				УчтенныеГруппы.Вставить(НомСтр, НовСтр);

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ДеревоСтруктуры;

КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Если РабочаяДата >= '20081001' Тогда
		Возврат Параметры.ПрефиксИмениФайлаВыгрузки
				+ "_" + Параметры.КодИФНС
				+ "_" + Параметры.КодИФНС
				+ "_" + СокрЛП(Параметры.ИННФЛ)
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	Иначе
		Возврат Параметры.ПрефиксИмениФайлаВыгрузки
				+ "_" + Параметры.КодИФНС
				+ Параметры.КодИФНС
				+ "_" + СокрЛП(Параметры.ИННФЛ)
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()

	мДанныеОтчета = Новый Структура;

	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить(); // Все данные отчета
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Сред(Раздел.Ключ, 24), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()

	Перем Титульный, Титульный002, ЛистИ;

	Титульный    = мДанныеОтчета.Титульный;
	Титульный002 = мДанныеОтчета.Титульный002;
	мДанныеОтчета.Свойство("ЛистИ", ЛистИ);

	СтрокаСведений = "ИННФЛ, ДатаРожд, ДатаУдЛичн";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мСохраненныйДок.ДатаПодписи, СтрокаСведений);

	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",          РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",               "1151020");
	Параметры.Вставить("ДатаДок",           Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ГодПериодОтч",      Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ПериодОтч",         СокрЛП(Титульный.Период));
	Параметры.Вставить("КодИФНС",           СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("ВидДок",            Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ОКАТОФЛ",           СокрЛП(Титульный.ОКАТО));
	Параметры.Вставить("ТелФЛ",             СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("ФамилияФЛ",         СокрЛП(Титульный.Фамилия));
	Параметры.Вставить("ИмяФЛ",             СокрЛП(Титульный.Имя));
	Параметры.Вставить("ОтчествоФЛ",        СокрЛП(Титульный.Отчество));

	Параметры.Вставить("КодКатегорииФЛ",    СокрЛП(Титульный.ПоМесту1 + Титульный.ПоМесту2 + Титульный.ПоМесту3));
	Параметры.Вставить("СтатусФЛ",          СокрЛП(Титульный002.СтатусНалогоплательщика));
	Параметры.Вставить("АдресИноФЛ",        СокрЛП(Титульный002.АдресЗаПределамиРФ));

	Параметры.Вставить("ПрАдрФЛ",           СокрЛП(Титульный002.МестоЖительства));
	Параметры.Вставить("ИндексФЛ",          СокрЛП(Титульный002.Индекс));
	Параметры.Вставить("РегионФЛ",          СокрЛП(Титульный002.Регион));
	Параметры.Вставить("РайонФЛ",           СокрЛП(Титульный002.Район));
	Параметры.Вставить("ГородФЛ",           СокрЛП(Титульный002.Город));
	Параметры.Вставить("НаселенныйПунктФЛ", СокрЛП(Титульный002.НаселенныйПункт));
	Параметры.Вставить("УлицаФЛ",           СокрЛП(Титульный002.Улица));
	Параметры.Вставить("ДомФЛ",             СокрЛП(Титульный002.Дом));
	Параметры.Вставить("КорпусФЛ",          СокрЛП(Титульный002.Корпус));
	Параметры.Вставить("КвартираФЛ",        СокрЛП(Титульный002.Квартира));

	Параметры.Вставить("ИННФЛ",             СокрЛП(СведенияОбОрганизации.ИННФЛ));
	Параметры.Вставить("ДатаРожденияФЛ",    СокрЛП(СведенияОбОрганизации.ДатаРожд));
	Параметры.Вставить("МестоРожденияФЛ",   СокрЛП(Титульный002.МестоРождения));
	Параметры.Вставить("ГражданствоФЛ",     СокрЛП(Титульный002.Гражданство));
	Параметры.Вставить("СтранаФЛ",          СокрЛП(Титульный002.КодСтраны));

	Параметры.Вставить("КодВидДокФЛ",       СокрЛП(Титульный002.КодВидаДокумента));
	Параметры.Вставить("СерНомДокФЛ",       СокрЛП(Титульный002.СерияИНомерДокумента));
	Параметры.Вставить("ДатаДокФЛ",         Формат(СведенияОбОрганизации.ДатаУдЛичн, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ВыдДокФЛ",          СокрЛП(Титульный002.КемВыданДокумент));     

	Параметры.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));

	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ФамилияПодписанта",    ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",        ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",   ФИОПодписанта.Отчество);

	Параметры.Вставить("ИмяФайлаСхемы",             "NO_NDFL3_1_033_00_05_06_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL3");

	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ3");

	Параметры.Вставить("ИдФайл", СформироватьИдФайл(Параметры));

	Если ТипЗнч(ЛистИ) = Тип("Структура") Тогда
		Если (НЕ ПустаяСтрока(ЛистИ.ИмДоля1)) И (НЕ ПустаяСтрока(ЛистИ.ИмДоля3)) Тогда
			ЛистИ.Вставить("ИмДоля", СокрЛП(ЛистИ.ИмДоля1) + "/" + СокрЛП(ЛистИ.ИмДоля3));
		Иначе
			ЛистИ.Вставить("ИмДоля", 1);
		КонецЕсли;
	КонецЕсли;

	Возврат Параметры;

КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВыгружаемыеПоказателиРаздела(Узел, Раздел, МассивРезультат = Неопределено)
	
	ТипУзла = ТипЗнч(Узел);
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		МассивРезультат = Новый Массив;
	ИначеЕсли СокрЛП(Узел.Раздел) = СокрЛП(Раздел) Тогда
		МассивРезультат.Добавить(Узел);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ВыгружаемыеПоказателиРаздела = ПолучитьВыгружаемыеПоказателиРаздела(Стр, Раздел, МассивРезультат);
	КонецЦикла;
	
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
//	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000014003");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если Найти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1, Раздел2, Раздел3, Раздел4, Раздел5, Раздел6") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен, как минимум, один из следующих разделов: ""Раздел 1"", ""Раздел 2"", ""Раздел 3"", ""Раздел 4"", ""Раздел 5"" или ""Раздел 6"".", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
//	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)

	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)

	// заполнение основного раздела
	ИтогУплВозв = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИтогУплВозв");
	СведДохВыч = ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "СведДохВыч");
	
	// заполнение Раздела 1
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел1, "Раздел1", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел1, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза13"));
	КонецЕсли;

	// заполнение Раздела 2
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел2, "Раздел2", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел2, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза30"));
	КонецЕсли;

	// заполнение Раздела 3
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел3, "Раздел3", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел3, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза35"));
	КонецЕсли;

	// заполнение Раздела 4
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел4, "Раздел4", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел4, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза9"));
	КонецЕсли;

	// заполнение Раздела 5
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел5, "Раздел5", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел5, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза15"));
	КонецЕсли;

	// заполнение Сведений о доходах
	СведДохВыч = ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "СведДохВыч");

	// заполнение Листа А
	ДоходИстРФ = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИстРФ");
	ДанныеЛистаА = мДанныеОтчета.ЛистА;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаА Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "ЛистА", ДоходИстРФ.Владелец()) Тогда
			ЭкзДоходИстРФ = СкопироватьУзел(СведДохВыч, ДоходИстРФ);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзДоходИстРФ);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Б
	ДоходИстИно = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИстИно");
	ДанныеЛистаБ = мДанныеОтчета.ЛистБ;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаБ Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "ЛистБ", ДоходИстИно.Владелец()) Тогда
			ЭкзДоходИстИно = СкопироватьУзел(СведДохВыч, ДоходИстИно);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзДоходИстИно);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа В
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистВ, "ЛистВ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистВ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходПредпр"));
	КонецЕсли;

	// заполнение Листа Г1 и Листа Г1 (продолжение)
	ДоходОсвПрев = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходОсвПрев");
	ДанныеЛистаГ1 = мДанныеОтчета.ЛистГ1;
	Если НЕ СтраницаПуста(ДанныеЛистаГ1, "ЛистГ1", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(ДанныеЛистаГ1, ДоходОсвПрев);
	КонецЕсли;

	ДохОплСХ = ПолучитьПодчиненныйЭлемент(ДоходОсвПрев, "ДохОплСХ");
	ДанныеЛистаГ1Продолжение = мДанныеОтчета.ЛистГ1Продолжение;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаГ1Продолжение Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "ЛистГ1Продолжение", ДоходОсвПрев.Владелец()) Тогда
			Для СчетчикМесяцев=1 По 12 Цикл
				Стр.Данные.Вставить("П000025119001_"+СчетчикМесяцев, Формат(СчетчикМесяцев, "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ="));
			КонецЦикла; 
			ЭкзДохОплСХ = СкопироватьУзел(ДоходОсвПрев, ДохОплСХ);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзДохОплСХ);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Г2
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистГ2, "ЛистГ2", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистГ2, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИгрПриз"));
	КонецЕсли;

	// заполнение Листа Г3
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистГ3, "ЛистГ3", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистГ3, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходМатВыг"));
	КонецЕсли;

	// заполнение Листа Д
	ВычПрофВозн = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычПрофВозн");
	ДанныеЛистаД = мДанныеОтчета.ЛистД;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаД Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "ЛистД", ВычПрофВозн.Владелец()) Тогда
			ЭкзВычПрофВозн = СкопироватьУзел(СведДохВыч, ВычПрофВозн);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзВычПрофВозн);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Е
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЕ, "ЛистЕ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЕ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычПродИмущ"));
	КонецЕсли;

	// заполнение Листа Ж1
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЖ1, "ЛистЖ1", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЖ1, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычСтанд"));
	КонецЕсли;

	// заполнение Листа Ж2
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЖ2, "ЛистЖ2", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЖ2, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычСоциал"));
	КонецЕсли;

	// заполнение Листа Ж3
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЖ3, "ЛистЖ3", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЖ3, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычДогНПО_ДПС"));
	КонецЕсли;

	// заполнение Листа З, Лист З (продолжение)
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЗ, "ЛистЗ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДохОперЦБ"));
	КонецЕсли;
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЗПродолжение, "ЛистЗПродолжение", СведДохВыч.Владелец()) Тогда
		ДохОперЦБ = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДохОперЦБ");
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "УбытПредПер"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "УбытПрхПер"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ИтогСовОпер"));
	КонецЕсли;

	// заполнение Листа И
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистИ, "ЛистИ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистИ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычИмущНов"));
	КонецЕсли;

	// заполнение Раздела 6
	ПодлУплВозв = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ПодлУплВозв");
	ДанныеРаздела6 = мДанныеОтчета.Раздел6;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеРаздела6 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Раздел6", УзелРодитель.Владелец()) Тогда
			ЭкзПодлУплВозв = СкопироватьУзел(УзелРодитель, ПодлУплВозв);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзПодлУплВозв);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)

	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)

	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;

	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				//Особенность декларации, многострочные подузлы для вывода сведений об организациях-источниках
				//
				Если Стр.Код = "ИстЮЛ" ИЛИ Стр.Код = "ИстФЛИн" ИЛИ Стр.Код = "СведИст" 
					ИЛИ Стр.Код = "СвОрг" ИЛИ Стр.Код = "СвФЛ" Тогда
					Если Стр.Родитель.Многострочность Тогда
						Если УсловиеЮр_Физ(Параметры, Стр, НомерСтроки) Тогда
							ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					Если Стр.Раздел = "ЛистГ1Продолжение" И НомСтр = 1 Тогда
						УзелСоответствующийСтроке = ПолучитьПодчиненныйЭлемент(Узел, "СумДохМес");
					Иначе
						УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					КонецЕсли;
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				Если Стр.Код = "ИстЮЛ" ИЛИ Стр.Код = "ИстФЛИн" ИЛИ Стр.Код = "СведИст" 
					ИЛИ Стр.Код = "СвОрг" ИЛИ Стр.Код = "СвФЛ" Тогда
					Если УсловиеЮр_Физ(Параметры, Стр, НомерСтроки) Тогда
						ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
					КонецЕсли;
				Иначе
					ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УсловиеЮр_Физ(Параметры, Узел, НомерСтроки = Неопределено)
	
	//проверка на длину ИНН для заполнения соответствующей ветки
	Результат = Ложь;
	ЗначениеПоказателя = Неопределено;
	Если Узел.Код = "ИстЮЛ" ИЛИ Узел.Код = "СведИст" ИЛИ Узел.Код = "СвОрг" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННЮЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если СтрДлина(СокрЛП(ЗначениеПоказателя)) > 10 Тогда
				УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Узел.Код = "ИстФЛИн" ИЛИ Узел.Код = "СвФЛ" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННФЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если СтрДлина(СокрЛП(ЗначениеПоказателя)) <= 10 Тогда
				УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(Стр)

	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		Раздел = ?(ПустаяСтрока(Стр.Раздел), "Титульный", СокрЛП(Стр.Раздел));
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(
				ЭтаФорма,
				"Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")",
				Раздел,
				Стр.Ключ); // Имя ячейки - всегда текущая
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(
				ЭтаФорма,
				"Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")",
				Раздел,
				Стр.Ключ); // Имя ячейки - всегда текущая
		КонецЕсли;
	КонецЕсли;

	Возврат СтатусПроверки;

КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
////////////////////////////////////////////////////////////////////////////////

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//используется для удаления значений итоговых показателей на листах МЧБ, образованных многострочными разделами (кроме последнего)
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок, КоличествоОбластей = 0)
	
	ПервыйШаг = ?(КоличествоОбластей = 0, 0, 1);
	
	Для НомерОбласти = ПервыйШаг По КоличествоОбластей Цикл
		НомОбласти = ?(НомерОбласти = 0,"", НомерОбласти);
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + НомОбласти);
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			
			ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
			ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
			
			Для Каждого Обл Из ТаблДок.Области Цикл
				Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
					И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
					И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная
					Тогда
					Обл.Текст = "-";
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли
	КонецЦикла;	
	
КонецПроцедуры

Процедура Печать(ВидПечати) Экспорт

	Отказ = Ложь;
	// Проверка онлайн блокировки
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и
			|задать его в качестве используемого по умолчанию!'"));
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;

	// мДеревоВыбранныхСтраниц - 
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;

	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный",		"МЧБ_2010_01_Титул_001");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный002",		"МЧБ_2010_02_Титул_002");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",			"МЧБ_2010_03_Раздел_1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",			"МЧБ_2010_04_Раздел_2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел3",			"МЧБ_2010_05_Раздел_3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел4",			"МЧБ_2010_06_Раздел_4");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел5",			"МЧБ_2010_07_Раздел_5");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел6",			"МЧБ_2010_08_Раздел_6");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистА",			"МЧБ_2010_09_Лист_А");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистБ",			"МЧБ_2010_10_Лист_Б");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистВ",			"МЧБ_2010_11_Лист_В");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистГ1",			"МЧБ_2010_12_Лист_Г1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистГ1Продолжение","МЧБ_2010_27_Лист_Г1_Продолжение");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистГ2",			"МЧБ_2010_13_Лист_Г2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистГ3",			"МЧБ_2010_28_Лист_Г3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистД",			"МЧБ_2010_14_Лист_Д");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЕ",			"МЧБ_2010_15_Лист_Е");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЖ1",			"МЧБ_2010_16_Лист_Ж1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЖ2",			"МЧБ_2010_17_Лист_Ж2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЖ3",			"МЧБ_2010_18_Лист_Ж3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЗ",			"МЧБ_2010_21_Лист_З");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистЗПродолжение",	"МЧБ_2010_22_Лист_З_Продолжение");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛистИ",			"МЧБ_2010_24_Лист_И");

	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 0;
	МакетМЧБ.ПолеСправа = 0;
	МакетМЧБ.ПолеСнизу = 0;
	МакетМЧБ.ПолеСлева = 0;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	//Определение: является ли раздел многострочным 
	ИмяМногострочногоРаздела = (Сред(Параметры.ИмяТабличногоПоля,24));
	ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяМногострочногоРаздела, "МногострочностьВРазделе");
	КоличествоОбластей = 0;
	Если ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
		КоличествоОбластей = ОписанияБлоков.Количество();
		КоличествоОбластей = ?(КоличествоОбластей = 1, 0,КоличествоОбластей);
		
		СписокМногострочныхЧастей = ОписанияБлоков.ВыгрузитьКолонку("ИдГруппы");
		//Исходим из того что если несколько многострочных частей, то они симметричны
	КонецЕсли;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяМногострочногоРаздела);
	Если ИдГруппы <> Неопределено Тогда
		//определение исходного количества строк на листе МЧБ
		ИсхКолвоСтрокБлока = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы,ИсхКолвоСтрокБлока);
		ТекКолвоСтрокБлока = мСтруктураМногострочныхРазделов[ИдГруппы].Количество();
		Если ТекКолвоСтрокБлока > ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			Если СписокМногострочныхЧастей.Количество() > 1 Тогда
				Для Каждого МнгИдГруппы Из СписокМногострочныхЧастей Цикл
					Для каждого КолонкаСтруктуры Из мСтруктураМногострочныхРазделов[МнгИдГруппы].Колонки Цикл
						СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Для каждого КолонкаСтруктуры Из мСтруктураМногострочныхРазделов[ИдГруппы].Колонки Цикл
					СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
				КонецЦикла;
			КонецЕсли;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				//переименование+++ (начиная со второго листа)
				Если Сч > 1 Тогда
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							//проверка на вхождение в данную многострочную часть
							Продолжить;
						КонецЕсли;
						
						//определение и обрасывание НомерЯчейки
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						
						ЯвляетсяМоноЯчейкой = ЯвляетсяМоноЯчейкой(ПоказательИНомерСтроки);
						Если ЯвляетсяМоноЯчейкой Тогда
							СмысловаяЧасть = ПоказательИНомерСтроки;
							ТекущийСчетчик = НомерЯчейки;
						Иначе
							//определение СмысловаяЧасть и ТекущийСчетчик
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						КонецЕсли;
						
						//Окончательная проверка на вхождение в данную многострочную часть
						Если Найти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ИсхКолвоСтрокБлока;
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							//очищение происходит после этого цикла
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						//Подготовка к переименованию
						//заполнение списка: значение - область, представление - будущее имя
						Если ЯвляетсяМоноЯчейкой Тогда
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик);
						Иначе
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
						КонецЕсли;
					КонецЦикла;
					
					//Очищение
					Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = "-";
					КонецЦикла;
					
					//Переименование
					Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
					КонецЦикла;
							
				КонецЕсли; 
				//переименование---
				//
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Параметры, ЛистМЧБ);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ, КоличествоОбластей);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ЛистМЧБ, СтрПоля);
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
				
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);

КонецПроцедуры

// Функция ЯвляетсяМоноЯчейкой
// проверяет, является ли ячейка многоквадратной
// Параметры:
//  ИмяЯчейки      - название ячейки, строка.
//
// Возвращаемое значение:
//  Булево - Истина - если ячейка не многоквадратная
//
Функция ЯвляетсяМоноЯчейкой(ИмяЯчейки)

	Если мСписокМоноЯчеек.НайтиПоЗначению(ИмяЯчейки) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // роПолучитьСмысловуюЧастьИмениЯчейки

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			
			//Особая обработка значения ОКВЭД листа В
			Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаЛистВ" Тогда
				Если Лев(Область.Имя, 13) = "П000090001002" Тогда
					ОКВЭД = НовСтр.ЗначениеМЧБ;
					Если Сред(ОКВЭД, 2, 1) = "." Тогда
						ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
					КонецЕсли;
					Если Сред(ОКВЭД, 5, 1) = "." Тогда
						ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
					КонецЕсли;
					НовСтр.Значение = ОКВЭД;
					НовСтр.ЗначениеМЧБ = ОКВЭД;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;

	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Формат(Цел(РезультатПоиска.Значение),"ЧГ=0"));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];

	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2010Кв1";
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);
мОписаниеТиповЧислоЕ4 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 4);
мОписаниеТиповЧислоЕ0 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0);

мОписаниеТиповЧислоЕ9 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(9, 2);
мОписаниеТиповЧислоЕ8 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(8, 2);
мОписаниеТиповЧислоЕ7 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(7, 2);

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповСтрока2   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2);
ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока9   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока11  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11);
ОписаниеТиповСтрока12  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12);
ОписаниеТиповСтрока62  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(62);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата  = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);


мСписокМоноЯчеек = Новый СписокЗначений; // не должны разбиваться на "квадратики"
мСписокМоноЯчеек.Добавить("П000070001004"); //Лист А стр. 030 "Наименование источника выплаты дохода"
мСписокМоноЯчеек.Добавить("П000080001002"); //Лист Б стр. 020 "Наименование источника выплаты дохода"
мСписокМоноЯчеек.Добавить("П000010201004"); //Лист Г2 стр. 030 "Наименование источника выплаты дохода"
мСписокМоноЯчеек.Добавить("П000027201004"); //Лист Г3 стр. 030 "Наименование источника выплаты дохода"
мСписокМоноЯчеек.Добавить("П000022004001"); //Лист Ж3 стр. 040 "Наименование негосударственного ПФ"
мСписокМоноЯчеек.Добавить("П000022014001"); //Лист Ж3 стр. 140 "Наименование страховой организации"
мСписокМоноЯчеек.Добавить("П000022001001");
мСписокМоноЯчеек.Добавить("П000022011001");


// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

//Лист А
мИдГруппыА  = "П0000700010";
СтруктураГруппыА = Новый ТаблицаЗначений;
СтруктураГруппыА.Колонки.Добавить("П000070001000", ОписаниеТиповСтрока3);
СтруктураГруппыА.Колонки.Добавить("П000070001001", ОписаниеТиповСтрока12);
СтруктураГруппыА.Колонки.Добавить("П000070001002", ОписаниеТиповСтрока9);
СтруктураГруппыА.Колонки.Добавить("П000070001003", ОписаниеТиповСтрока11);
СтруктураГруппыА.Колонки.Добавить("П000070001004", ОписаниеТиповСтрока254);
СтруктураГруппыА.Колонки.Добавить("П000070001005", мОписаниеТиповЧислоЕ);
СтруктураГруппыА.Колонки.Добавить("П000070001006", мОписаниеТиповЧислоЕ);
СтруктураГруппыА.Колонки.Добавить("П000070001007", мОписаниеТиповЧислоЕ0);
СтруктураГруппыА.Колонки.Добавить("П000070001008", мОписаниеТиповЧислоЕ0);

//Лист Б
мИдГруппыБ  = "П0000800010";
СтруктураГруппыБ = Новый ТаблицаЗначений;
СтруктураГруппыБ.Колонки.Добавить("П000080001000", ОписаниеТиповСтрока3);
СтруктураГруппыБ.Колонки.Добавить("П000080001001", ОписаниеТиповСтрока3);
СтруктураГруппыБ.Колонки.Добавить("П000080001002", ОписаниеТиповСтрока254);
СтруктураГруппыБ.Колонки.Добавить("П000080001004", ОписаниеТиповСтрока3);
СтруктураГруппыБ.Колонки.Добавить("П000080001005", ОписаниеТиповДата);
СтруктураГруппыБ.Колонки.Добавить("П000080001006", мОписаниеТиповЧислоЕ4);
СтруктураГруппыБ.Колонки.Добавить("П000080001007", мОписаниеТиповЧислоЕ);
СтруктураГруппыБ.Колонки.Добавить("П000080001008", мОписаниеТиповЧислоЕ);
СтруктураГруппыБ.Колонки.Добавить("П000080001009", ОписаниеТиповДата);
СтруктураГруппыБ.Колонки.Добавить("П000080001010", мОписаниеТиповЧислоЕ4);
СтруктураГруппыБ.Колонки.Добавить("П000080001011", мОписаниеТиповЧислоЕ);
СтруктураГруппыБ.Колонки.Добавить("П000080001012", мОписаниеТиповЧислоЕ);
СтруктураГруппыБ.Колонки.Добавить("П000080001013", мОписаниеТиповЧислоЕ0);
СтруктураГруппыБ.Колонки.Добавить("П000080001014", мОписаниеТиповЧислоЕ0);

//Лист В
мИдГруппыВ  = "П0000900010";
СтруктураГруппыВ = Новый ТаблицаЗначений;
СтруктураГруппыВ.Колонки.Добавить("П000090001000", ОписаниеТиповСтрока3);
СтруктураГруппыВ.Колонки.Добавить("П000090001001", ОписаниеТиповСтрока1);
СтруктураГруппыВ.Колонки.Добавить("П000090001002", ОписаниеТиповСтрока11);
СтруктураГруппыВ.Колонки.Добавить("П000090001003", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001004", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001005", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001006", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001007", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001008", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001009", мОписаниеТиповЧислоЕ);
СтруктураГруппыВ.Колонки.Добавить("П000090001010", мОписаниеТиповЧислоЕ);

//Лист Г1 Продолжение
мИдГруппыГ1Продолжение  = "П0000251190";
СтруктураГруппыГ1Продолжение = Новый ТаблицаЗначений;
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119001", ОписаниеТиповСтрока2);
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119002", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119003", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119004", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119005", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ1Продолжение.Колонки.Добавить("П000025119006", мОписаниеТиповЧислоЕ);

//Лист Г2
мИдГруппыГ2  = "П0000102010";
СтруктураГруппыГ2 = Новый ТаблицаЗначений;
СтруктураГруппыГ2.Колонки.Добавить("П000010201000", ОписаниеТиповСтрока3);
СтруктураГруппыГ2.Колонки.Добавить("П000010201001", ОписаниеТиповСтрока12);
СтруктураГруппыГ2.Колонки.Добавить("П000010201002", ОписаниеТиповСтрока9);
СтруктураГруппыГ2.Колонки.Добавить("П000010201004", ОписаниеТиповСтрока254);
СтруктураГруппыГ2.Колонки.Добавить("П000010201005", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ2.Колонки.Добавить("П000010201006", мОписаниеТиповЧислоЕ);

//Лист Г3
мИдГруппыГ3  = "П0000272010";
СтруктураГруппыГ3 = Новый ТаблицаЗначений;
СтруктураГруппыГ3.Колонки.Добавить("П000027201000", ОписаниеТиповСтрока3);
СтруктураГруппыГ3.Колонки.Добавить("П000027201001", ОписаниеТиповСтрока10);
СтруктураГруппыГ3.Колонки.Добавить("П000027201002", ОписаниеТиповСтрока9);
СтруктураГруппыГ3.Колонки.Добавить("П000027201003", ОписаниеТиповСтрока11);
СтруктураГруппыГ3.Колонки.Добавить("П000027201004", ОписаниеТиповСтрока254);
СтруктураГруппыГ3.Колонки.Добавить("П000027201005", мОписаниеТиповЧислоЕ);
СтруктураГруппыГ3.Колонки.Добавить("П000027201006", мОписаниеТиповЧислоЕ);

//Лист Ж3
// список 1
мИдГруппыЖ3_1  = "П0000220010";
СтруктураГруппыЖ3_1 = Новый ТаблицаЗначений;
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022001000", ОписаниеТиповСтрока3);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022001001", ОписаниеТиповСтрока1);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022002001", ОписаниеТиповСтрока10);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022003001", ОписаниеТиповСтрока9);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022004001", ОписаниеТиповСтрока254);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022005001", ОписаниеТиповДата);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022006001", ОписаниеТиповСтрока254);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022007001", мОписаниеТиповЧислоЕ);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022008001", мОписаниеТиповЧислоЕ);
СтруктураГруппыЖ3_1.Колонки.Добавить("П000022009001", мОписаниеТиповЧислоЕ);
//Список 2
мИдГруппыЖ3_2  = "П0000220020";
СтруктураГруппыЖ3_2 = Новый ТаблицаЗначений;
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022002000", ОписаниеТиповСтрока3);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022011001", ОписаниеТиповСтрока1);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022012001", ОписаниеТиповСтрока10);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022013001", ОписаниеТиповСтрока9);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022014001", ОписаниеТиповСтрока254);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022015001", ОписаниеТиповДата);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022016001", ОписаниеТиповСтрока254);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022017001", мОписаниеТиповЧислоЕ);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022018001", мОписаниеТиповЧислоЕ);
СтруктураГруппыЖ3_2.Колонки.Добавить("П000022019001", мОписаниеТиповЧислоЕ);


// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)

КолИсхСтрокИдГруппыА    = 4;
КолИсхСтрокИдГруппыБ    = 2;
КолИсхСтрокИдГруппыВ    = 1;
КолИсхСтрокИдГруппыГ1Продолжение  = 12;
КолИсхСтрокИдГруппыГ2   = 5;
КолИсхСтрокИдГруппыГ3   = 6;
КолИсхСтрокИдГруппыЖ3_1 = 1;
КолИсхСтрокИдГруппыЖ3_2 = 1;

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыА, СтруктураГруппыА);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыБ, СтруктураГруппыБ);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыВ, СтруктураГруппыВ);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыГ1Продолжение, СтруктураГруппыГ1Продолжение);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыГ2, СтруктураГруппыГ2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыГ3, СтруктураГруппыГ3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыЖ3_1, СтруктураГруппыЖ3_1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппыЖ3_2, СтруктураГруппыЖ3_2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыА, КолИсхСтрокИдГруппыА);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыБ, КолИсхСтрокИдГруппыБ);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыВ, КолИсхСтрокИдГруппыВ);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыГ1Продолжение, КолИсхСтрокИдГруппыГ1Продолжение);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыГ2, КолИсхСтрокИдГруппыГ2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыГ3, КолИсхСтрокИдГруппыГ3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыЖ3_1, КолИсхСтрокИдГруппыЖ3_1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппыЖ3_2, КолИсхСтрокИдГруппыЖ3_2);


ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = ПолучитьТаблицуМногостраничногоРаздела();
ТаблицаСтраницыРазделаДляМногострочныхРазделов=ПолучитьТаблицуМногостраничногоРаздела(Истина);
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел6", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("ЛистА", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("ЛистБ", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("ЛистГ1Продолжение", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("ЛистД", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());

мСтатусНалогоплательщика = 0;

// Версия формы
мВерсияФормы = "01/01/2010";

// Код отчета, равен КНД
мКодОтчета = "1151020";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.03", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ТочностьЕдиницыИзмерения = 2;
ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;