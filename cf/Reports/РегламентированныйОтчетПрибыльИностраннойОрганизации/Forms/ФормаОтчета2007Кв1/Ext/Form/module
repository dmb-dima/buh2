////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел1_3;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел4;
Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;
Перем мРаздел8;
Перем мРаздел9;
Перем мРаздел10;
Перем мРаздел10_Прил1;
Перем мРаздел11;
Перем мРаздел11_Прил1;
Перем мРаздел11_Прил2;

// Флаг, необходим при авторасчете раздела 1
Перем мИсключитьЗапускРасчета;

// Хранит номер телефона организации, используется в листе ФЛ, в качестве
// рабочего телефона физического лица в данной организации.
// Инициализируется в процедуре ЗаполнитьСведенияОбОрганизации
Перем мТелОрганизации;

Перем мВПрограммеИзмененаОрганизация;

// Хранят сведения об организации
Перем мОргТип;
Перем мОргКодИМНС;
Перем мОргКодОКАТО;
Перем мОргОГРН;

// Переменные содержащие ИНН и КПП текущей организации
Перем мИННЮЛ;
Перем мКППЮЛ;

// Хранят сведения о должностных лицах
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПред;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Список КБК до 2004 г
Перем мКодыБюджетнойКлассификации;
// Список КБК после 2004
Перем мКодыБюджетнойКлассификации2005;
// Список КБК после 2005
Перем мКодыБюджетнойКлассификации2006;

// Список КБК для раздела 1_2
Перем мКодыКБК2005Раздел1_2;

// Список КБК для раздела 1_3
Перем мКодыКБК2005Раздел1_3;

Перем мВидыДеятельности;

// Переменных для хранения целых значений, в представлении квадратных

// Раздел1_1

Перем мКодОКАТО1;

Перем мКБКвФБ_1_1;
Перем мКБКвФБ_1_2;
Перем мКБКвФБ_1_3;

Перем мСуммаНалога1_1;
Перем мСуммаНалУм1_1 ;
Перем мСуммаПерех1_1 ;

Перем мСуммаНалога1_2;
Перем мСуммаНалУм1_2 ;
Перем мСуммаПерех1_2 ;

Перем мСуммаНалога1_3;
Перем мСуммаНалУм1_3 ;
Перем мСуммаПерех1_3 ;

// Раздел1_2
Перем мКБКРаздел12;
Перем мКодОКАТОРаздел12;
Перем мСуммаДоплФедРаздел12;
Перем мСуммаУменФедРаздел12;

// Раздел1_3
Перем мКБКРаздел13;
Перем мКодОКАТОРаздел13;
Перем мСуммаДоплФедРаздел13;
Перем мСуммаУменФедРаздел13;

// Раздел2

Перем мКодСтраныСоглРаздел2;
Перем мКодСтраныРаздел2    ;
Перем мИННРО1Раздел2        ;
Перем мКППРО1Раздел2        ;
Перем мИННРО2Раздел2        ;
Перем мКППРО2Раздел2        ;

// Раздел7
Перем мСтавкаРаздел7;

// Раздел10
Перем мКолОтдРаздел10;
Перем мНалФБРаздел10;
Перем мНалМБРаздел10;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;
Перем ОбязРазделов Экспорт;
Перем РежимОтладки;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мФизЛицИнд;
Перем мДатаДок;
Перем мДатаРожд;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем МногострочныеИсключения;

Перем мДокументВосстановлен;

Перем мСоставПоказателей Экспорт;

// Переменная необходима для операций с листом ФЛ
// Хранит пустой образ листа фл, без ИНН, КПП, ФИО и других параметров,
// инифиализируется однажды в обработчике "ПриОткрытии" формы.

Перем мПустойОбразЛистаФЛ;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтатикРаздела
//
// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели)

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтатикСтраницРаздела()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина)

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Значение, ПрефиксНаЛисте, ЛистИсключение, ТолькоДляЛиста, ТолькоАктивныйЛистМногостраничнойчасти, ИспользоватьНомер, ЛистыМногостраничные);

КонецПроцедуры // ПроставитьНаВсехЛистах()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения

// Блок обязательных процедур
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицоФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1_3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 4
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 5
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 6
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";       // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 7
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет"; // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 8
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 9
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 10
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000100004004";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 5
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000110001000";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000111001000";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000112001000";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует струкутуру данных строк многострочных блоков табличного документа
// на заданной странице основной панели формы.
//
// Параметры
//  ИмяСтраницы  - строка - имя страницы основной панели формы.
//
// Возвращаемое значение:
//   структура   - элементы струкутуры содержат данные дополнительных строк страницы, где
//                 в качестве ключа используется имя многострочного блока, а в качестве
//                 значения - таблица показателей и их значений многострочного блока.
//
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Раздел2" Тогда

		// Так как Раздел 2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы1, ТаблицаДопСтрокГруппы1);

	ИначеЕсли ИмяСтраницы = "Раздел5" Тогда

		// Так как Раздел 2.1 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы2 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы2, ТаблицаДопСтрокГруппы2);

	ИначеЕсли ИмяСтраницы = "Раздел6" Тогда

		// Так как Раздел 2.2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы3 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы3, ТаблицаДопСтрокГруппы3);

	ИначеЕсли ИмяСтраницы = "Раздел7" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы4 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы4, ТаблицаДопСтрокГруппы4);

	ИначеЕсли ИмяСтраницы = "Раздел10_Прил1" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы5 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы5, ТаблицаДопСтрокГруппы5);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции // СформироватьСтруктуруДанныхДопСтрокСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 
	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если      ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел2;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел5;
	ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
		ТекТабличноеПоле = мРаздел6;
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
		ТекТабличноеПоле = мРаздел7;
	ИначеЕсли ИдГруппы = мИдГруппы5 Тогда
		ТекТабличноеПоле = мРаздел10_Прил1;
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если      ТекТабличноеПоле = мРаздел2 Тогда
		ИдГруппы = мИдГруппы1;
	ИначеЕсли ТекТабличноеПоле = мРаздел5 Тогда
		ИдГруппы = мИдГруппы2;
	ИначеЕсли ТекТабличноеПоле = мРаздел6 Тогда
		ИдГруппы = мИдГруппы3;
	ИначеЕсли ТекТабличноеПоле = мРаздел7 Тогда
		ИдГруппы = мИдГруппы4;
	ИначеЕсли ТекТабличноеПоле = мРаздел10_Прил1 Тогда
		ИдГруппы = мИдГруппы5;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если      ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10_Прил1" Тогда
		ИмяГруппы = мИдГруппы5;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция суммирует значения показателя по всему набору страниц многостраничного раздела.
//
// Параметры:
//   ИмяПоказателя        - строка, имя показателя;
//   ИмяПоказателяУсловие - строка, имя показателя, по которому строится условие суммирования;
//   Условие              - булево, накладываемое условие
//   ПарамЗначение        - значение параметра при выполнении условия.
//
// Возвращаемое значение:
//   число, сумма значений искомого показателя по всем страницам многостраничного раздела.
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;
	
	ВозвращаемоеЗнач = 0;
	
	// сначала определим имя табличного документа, содержащего показатель
	ИмяСтраницыОсновнойПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Если ИмяСтраницыОсновнойПанели = Неопределено Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыОсновнойПанели, ТаблицаСтраницРаздела) Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;

	// сначала определяем значение показателя по активной странице
	ЗначениеПоказателя = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателя].Значение;

	Если Не ИмяПоказателяУсловие = Неопределено Тогда
		ЗначПоказателяУсл = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателяУсловие].Значение;

		Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
			ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
		// Многостраничный раздел состоит из нескольких страниц.
		// Значение искомого реквизита суммируем по всем страницам.

		Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
			Если СтраницаРаздела.АктивнаяСтраница Тогда
				// по активной странице мы вычислили ранее
				Продолжить;
			КонецЕсли;

			СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

			Если СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Если ИмяПоказателяУсловие = Неопределено Тогда
					ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
				ИначеЕсли СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателяУсловие, ЗначПоказателяУсл) Тогда
					Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
						ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат ВозвращаемоеЗнач;
	
КонецФункции // СуммаПоказателяПоВсемСтраницам

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если (ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3") Тогда
			Если (Найти(ИмяПоказателя, "П0") > 0) И (Прав(ИмяПоказателя, 1) = "0") Тогда
				
				НомерСтроки = Сред(ИмяПоказателя, 9, 3);
				
				Если РегламентированнаяОтчетность.роЯвляетсяЧислом(НомерСтроки) Тогда
					Если Число(НомерСтроки) >= 190 Тогда
						Если ЗначениеПоказателя = "V" Тогда
							ЗначениеПоказателя = "1";
						Иначе
							ЗначениеПоказателя = "0";
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_1" Тогда

		СтруктураДанныхПоля.Вставить("КодОКАТО1", мКодОКАТО1);

		СтруктураДанныхПоля.Вставить("КБКвФБ_1_1", мКБКвФБ_1_1);
		СтруктураДанныхПоля.Вставить("КБКвФБ_1_2", мКБКвФБ_1_2);
		СтруктураДанныхПоля.Вставить("КБКвФБ_1_3", мКБКвФБ_1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога1_1", мСуммаНалога1_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога1_2", мСуммаНалога1_2);
		СтруктураДанныхПоля.Вставить("СуммаНалога1_3", мСуммаНалога1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалУм1_1", мСуммаНалУм1_1);
		СтруктураДанныхПоля.Вставить("СуммаНалУм1_2", мСуммаНалУм1_2);
		СтруктураДанныхПоля.Вставить("СуммаНалУм1_3", мСуммаНалУм1_3);
		
		СтруктураДанныхПоля.Вставить("СуммаПерех1_1", мСуммаПерех1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерех1_2", мСуммаПерех1_2);
		СтруктураДанныхПоля.Вставить("СуммаПерех1_3", мСуммаПерех1_3);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_2" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел12",          мКБКРаздел12         );
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел12",     мКодОКАТОРаздел12    );
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел12", мСуммаДоплФедРаздел12);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел12", мСуммаУменФедРаздел12);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_3" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел13",     мКБКРаздел13    );
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел13",       мКодОКАТОРаздел13);
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел13", мСуммаДоплФедРаздел13);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел13", мСуммаУменФедРаздел13);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ПодачаЗаПредПериодДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ПодачаЗаПредПериодНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020001000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020001000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020001000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		СтруктураДанныхПоля.Свойство("НачДеят", ЗначениеПоказателя1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020002000", "0");
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020002000", "1");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		СтруктураДанныхПоля.Свойство("КонДеят", ЗначениеПоказателя1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020003000", "0");
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020003000", "1");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ОсДеятвРФДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ОсДеятвРФНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020004000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020004000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020004000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ОсДеятвРФПредДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ОсДеятвРФПредНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020005000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020005000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020005000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;
		ЗначениеПоказателя3 = Неопределено;

		СтруктураДанныхПоля.Свойство("ТипОрг1", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ТипОрг2", ЗначениеПоказателя2);
		СтруктураДанныхПоля.Свойство("ТипОрг3", ЗначениеПоказателя3);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя3) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "");
		ИначеЕсли НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "331");
		ИначеЕсли НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "332");
		ИначеЕсли НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя3) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "333");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("РОВладИОДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("РОВладИОНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020013000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020013000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020013000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ИОВладРОДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ИОВладРОНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020017000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020017000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020017000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("СделкисАссЛицДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("СделкисАссЛицНет", ЗначениеПоказателя2);

		Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) И РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020021000", ""); // Неопределено.
		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020021000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020021000", "1"); // Да
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("КодСтраныСоглРаздел2", мКодСтраныСоглРаздел2);
		СтруктураДанныхПоля.Вставить("КодСтраныРаздел2", мКодСтраныРаздел2);
		СтруктураДанныхПоля.Вставить("ИННРО1Раздел2", мИННРО1Раздел2);
		СтруктураДанныхПоля.Вставить("КППРО1Раздел2", мКППРО1Раздел2);

		СтруктураДанныхПоля.Вставить("ИННРО2Раздел2", мИННРО2Раздел2);
		СтруктураДанныхПоля.Вставить("КППРО2Раздел2", мКППРО2Раздел2);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел7" Тогда
		СтруктураДанныхПоля.Вставить("СтавкаРаздел7", мСтавкаРаздел7);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел10" Тогда

		СтруктураДанныхПоля.Вставить("КолОтдРаздел10", мКолОтдРаздел10);
		СтруктураДанныхПоля.Вставить("НалФБРаздел10", мНалФБРаздел10);
		СтруктураДанныхПоля.Вставить("НалМБРаздел10", мНалМБРаздел10);
	КонецЕсли;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()
	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			ЕстьИзменения = Истина;

		КонецЕсли;
	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для Каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Функция ОбластьЯвляетсяЯчейкойСоставногоПоля
// проверяет, является ли переданное имя ячейки частью многоКвадратной
// группы ячеек на листе
// если да - то истина, иначе - Ложь
//
Функция ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки, БыстраяПроверка = Истина)
	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
		// не квадратичная ячейка
		Возврат Ложь;
	КонецЕсли;
	
	Если БыстраяПроверка Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
	Если ИмяСтраницыПанели = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
	
	// Получаем текущий счетчик
	//ТекущийСчетчик = Сред(ИмяЯчейки,АдресПоследнегоРазделителя+1,СтрДлина(ИмяЯчейки)-АдресПоследнегоРазделителя);
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
	Если СтрДлина(ТекущийСчетчик)>=2 Тогда
		
		Если Сред(ТекущийСчетчик,1,1) = "0" Тогда
			ПризнакСчетчикаСнулемВпереди = Истина;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь;
		КонецЕсли;
	Иначе
		ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
	КонецЕсли;
	
	Попытка
		ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1), ТекущийСчетчикЦел + 1);

	Попытка
		Проверка = ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение;
	Исключение
		Возврат Ложь
	КонецПопытки;
	// значение получено
	Возврат Истина;
КонецФункции // ОбластьЯвляетсяЯчейкойСоставногоПоля

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено)

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц Тогда
		мТитульный.Области.НалогПериод.Значение = "1";
		// в этой форме нет НомераКвартала
		мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН="), 1, 1);
		мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН="), 2, 1);
	Иначе
		//мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
		//мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

		Если НомерКвартала = "4" Тогда
			мТитульный.Области.НалогПериод.Значение = "0";
		ИначеЕсли НомерКвартала = "3" Тогда
			мТитульный.Области.НалогПериод.Значение = "9";
		ИначеЕсли НомерКвартала = "2" Тогда
			мТитульный.Области.НалогПериод.Значение = "6";
		ИначеЕсли НомерКвартала = "1" Тогда
			мТитульный.Области.НалогПериод.Значение = "3";
		КонецЕсли;

		мТитульный.Области.НомКвартал1.Значение = "0";
		мТитульный.Области.НомКвартал2.Значение = НомерКвартала;

	КонецЕсли;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// ПолучитьНазваниеДляИностраннойОрганизации
//
Функция ПолучитьНазваниеДляИностраннойОрганизации()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НаимИОПол"); // Наименование иностранной орг
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	НаимИОПол = "";
	ОргСведения.Свойство("НаимИОПол", НаимИОПол);
	Возврат НаимИОПол;

КонецФункции // ПолучитьНазваниеДляИностраннойОрганизации

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиУпП     = "";

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение),НЕ ЗначениеЗаполнено(мИННДиректор)) = 0 Тогда
		ДатаПодписиРук = ДатаПодписи; 
	КонецЕсли;
	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение),НЕ ЗначениеЗаполнено(мИННБухгалтер)) = 0 Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргУП.Значение),НЕ ЗначениеЗаполнено(мИННУпПред)) = 0 Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУпП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		//мФизЛица.  Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_1.Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_2.Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_3.Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицоФИО.Значение) Тогда
		// Функция проставит даты на всех листах многостраничного документа
		ПроставитьНаВсехЛистах(стрУказаннаяДата, "ДатаПодписи", , "ФизЛица", , Ложь, мВПрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОГРН"); // ОГРН
		Сведения.Добавить("", "ОКАТО"); // ОКАТО

		Сведения.Добавить("", "КодНО");  // Код Налогового Органа
		Сведения.Добавить("", "НаимНО"); // Наименование НО

		Сведения.Добавить("", "ТелОрганизации");  // ТелОрганизации

		Сведения.Добавить("", "СтрИО"); // Страна регистрации инкорп
		Сведения.Добавить("", "КодСтрИО"); // Код страны рег.

		Сведения.Добавить("", "СтрПостИО"); // Страна постоянного места нахожд
		Сведения.Добавить("", "КодСтрПостИО"); // Код страны постоянного места нахожд

		Сведения.Добавить("", "ТипНП"); // ТипНП

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ИННРук"); // ИНН руководителя

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера

	Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя
	Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя

	Сведения.Добавить("", "ФИО");

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		КодНО 	= ОргСведения.КодНО;
		КПП 	= ОргСведения.КППЮЛ;
	Иначе
		КодНО 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	КонецЕсли;
	
	ДанныеПредставителя = РегламентированнаяОтчетность.ПолучитьСведенияОПредставителе(ЭтаФорма, Ложь, КодНО, КПП);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ          = "";
		КППЮЛ          = "";
		НаимЮЛПол      = "";
		ОГРН           = "";
		ОКАТО          = "";
		КодНО          = "";
		НаимНО         = "";
		ТелОрганизации = "";
		СтрИО          = "";
		КодСтрИО       = "";
		ТипНП          = "";

	КонецЕсли;

	ФИОРук         = "";
	ИННРук         = "";
	ФИОБух         = "";
	ИННБух         = "";
	ФИОУпПред      = "";
	ИННУпПред      = "";
	ФИО            = "";

	СтрПостИО = "";    // Страна постоянного места нахожд
	КодСтрПостИО = ""; // Код страны постоянного места нахожд

	// Получаем данные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ"         , ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ"         , КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол"     , НаимЮЛПол);
		ОргСведения.Свойство("ОГРН"          , ОГРН);
		ОргСведения.Свойство("ОКАТО"         , ОКАТО);
		ОргСведения.Свойство("КодНО"         , КодНО);
		ОргСведения.Свойство("НаимНО"        , НаимНО);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("СтрИО"         , СтрИО);
		ОргСведения.Свойство("КодСтрИО"      , КодСтрИО);
		ОргСведения.Свойство("СтрПостИО"     , СтрПостИО);
		ОргСведения.Свойство("КодСтрПостИО"  , КодСтрПостИО);
		ОргСведения.Свойство("ТипНП"         , ТипНП);
	КонецЕсли;

	ОргСведения.Свойство("ФИОРук"        , ФИОРук);
	ОргСведения.Свойство("ИННРук"        , ИННРук);
	ОргСведения.Свойство("ФИОБух"        , ФИОБух);
	ОргСведения.Свойство("ИННБух"        , ИННБух);
	ОргСведения.Свойство("ФИОУпПред"     , ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред"     , ИННУпПред);
	ОргСведения.Свойство("ФИО"     , ФИО);

	ФИОУпПред = ДанныеПредставителя.ФИОУпПред;
	ИННУпПред = ДанныеПредставителя.ИННУпПред;

	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Если ПБОЮЛ Тогда
		НаимЮЛПол = ФИО;

		ФИОРук        = "";
		ИННРук        = "            ";
		мИННДиректор  = "            ";

		ФИОБух        = "";
		ИННБух        = "            ";
		мИННБухгалтер = "            ";

		ФИОУпПред = "";
		ИННУпПред  = "            ";
		мИННУпПред = "            ";

	КонецЕсли;

	// Производим операции связанные с текущей формой отчетности

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мТитульный.Области.ОргДиректор.Значение  = ФИОРук;

		мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;

		мТитульный.Области.ОргУП.Значение = ФИОУпПред;

		мИННДиректор = ИННРук;
		мИННБухгалтер= ИННБух;
		мИННУпПред = ИННУпПред;

		ПроставитьВКвадратыЗначения("Титульный", "ИННРук", 12, ИННРук);
		ПроставитьВКвадратыЗначения("Титульный", "ИННГБ" , 12, ИННБух);
		ПроставитьВКвадратыЗначения("Титульный", "ИННУП" , 12, ИННУпПред);

		Если ПБОЮЛ Тогда
			мТитульный.Области.ОргНазв.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	мТелОрганизации = ТелОрганизации;

	// Заполняем ИНН на всех листах декларации
	Если Не РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = "            ";
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
		КППЮЛ = "         ";
		//КППЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	// Проставлять ИНН и КПП только в новыхо открыты отчетах и при смене ЮЛ
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		ПроставитьНаВсехЛистах(ИННЮЛ, "ИНН", "", ,,, мВПрограммеИзмененаОрганизация);
		ПроставитьНаВсехЛистах(КППЮЛ, "КПП", "", ,,, мВПрограммеИзмененаОрганизация);
	КонецЕсли;

	Признаки = мТитульный.Области.ТипОрг1.Значение
	   + мТитульный.Области.ТипОрг2.Значение
	   + мТитульный.Области.ТипОрг3.Значение
	   + мТитульный.Области.ТипОрг4.Значение;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Признаки)) Тогда

		Если ТипНП = 5 Тогда
			мТитульный.Области.ТипОрг1.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";
			Назв = ПолучитьНазваниеДляИностраннойОрганизации();
			Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноОргНазв.Значение)) Тогда
				мТитульный.Области.ИноОргНазв.Значение = Назв;
			КонецЕсли;

		ИначеЕсли ТипНП = 3 Тогда
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "V";
			мТитульный.Области.ТипОрг4.Значение = "";
			мТитульный.Области.ИноОргНазв.Значение = "";

		Иначе // По умолчанию все на ТипОрг2
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "V";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";
			мТитульный.Области.ИноОргНазв.Значение = "";

		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноСтрКодПост1.Значение + мТитульный.Области.ИноСтрКодПост2.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение

		мТитульный.Области.ИноСтрКодПост1.Значение = Сред(КодСтрПостИО, 1, 1);
		мТитульный.Области.ИноСтрКодПост2.Значение = Сред(КодСтрПостИО, 2, 1);

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноСтранаПост.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ИноСтранаПост.Значение = СтрПостИО;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноСтрана.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ИноСтрана.Значение = СтрИО;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноСтрКод1.Значение + мТитульный.Области.ИноСтрКод2.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ИноСтрКод1.Значение = Сред(КодСтрИО, 1, 1);
		мТитульный.Области.ИноСтрКод2.Значение = Сред(КодСтрИО, 2, 1);
	КонецЕсли;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Тогда
		мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	// Работаем с ИНН руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННДиректор)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННРук, НомЯчейки, 1);
			мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННДиректор = ИННРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение)) Тогда
		мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ИНН бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННБухгалтер)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННБух, НомЯчейки, 1);
			мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННБухгалтер = ИННБух;
	КонецЕсли;

	// Работаем с ОГРН
	Если (ТипНП <> 3) И ((мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргОГРН))) Тогда
		ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, 13, " ");
		ПроставитьВКвадратыЗначения("Титульный", "ОГРН", 13, ОГРН);
		мОргОГРН = ОГРН;
	КонецЕсли;

	Если (ТипНП = 3) И (мВПрограммеИзмененаОрганизация) Тогда

		ПроставитьВКвадратыЗначения("Титульный", "ОГРН", 13, "             ");
		мОргОГРН = "";

	КонецЕсли;

	// Работаем с ОКАТО, значение мКодОКАТО предварительно считали из квадратиков
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мКодОКАТО1)) Тогда
		Если (ОбщегоНазначения.ТолькоЦифрыВСтроке(ОКАТО)) И (СтрДлина(ОКАТО) = 11) Тогда
			ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(ОКАТО, 11, " ");
			ПроставитьВКвадратыЗначения("Раздел1_1", "КодОКАТОР", 11, ОКАТО);
			мКодОКАТО1 = ОКАТО;
		КонецЕсли;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодИМНС)) Тогда
		КодНО = РегламентированнаяОтчетность.ДополнитьСтроку(КодНО, 4, " ");
		ПроставитьВКвадратыЗначения("Титульный", "КодИМНС", 4, КодНО);
		мОргКодИМНС = КодНО;
	КонецЕсли;

	// Работаем с наименованием инспекции
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргИМНС.Значение)) Тогда
		мТитульный.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	// Работаем с ФИО уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргУП.Значение)) Тогда
		мТитульный.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	// Работаем с ИНН уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННУпПред)) Тогда
		ИННУпПред = РегламентированнаяОтчетность.ДополнитьСтроку(ИННУпПред, 12, " ");
		ПроставитьВКвадратыЗначения("Титульный", "ИННУП", 12, ИННУпПред);
		мИННУпПред = ИННУпПред;
	КонецЕсли;

	// Работаем с телефоном организации
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ИноКТел.Значение)) Тогда
		мТитульный.Области.ИноКТел.Значение = ТелОрганизации;
	КонецЕсли;

	// Даты проставятся всегда при открытии документа или при изменении организации
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
	// Заполним даты формирования декларации (подписи)
		ЗаполнитьДатуВЯчейках();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;

	Если КодПоказателяПоСтруктуре = "КодОКАТО1" Тогда
		Рез = мКодОКАТО1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБ_1_1" Тогда
		Рез = мКБКвФБ_1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБ_1_2" Тогда
		Рез = мКБКвФБ_1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБ_1_3" Тогда
		Рез = мКБКвФБ_1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога1_1" Тогда
		Рез = мСуммаНалога1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога1_2" Тогда
		Рез = мСуммаНалога1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога1_3" Тогда
		Рез = мСуммаНалога1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалУм1_1" Тогда
		Рез = мСуммаНалУм1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалУм1_2" Тогда
		Рез = мСуммаНалУм1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалУм1_3" Тогда
		Рез = мСуммаНалУм1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерех1_1" Тогда
		Рез = мСуммаПерех1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерех1_2" Тогда
		Рез = мСуммаПерех1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерех1_3" Тогда
		Рез = мСуммаПерех1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел12" Тогда
		Рез = мКБКРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел12" Тогда
		Рез = мКодОКАТОРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплФедРаздел12" Тогда
		Рез = мСуммаДоплФедРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменФедРаздел12" Тогда
		Рез = мСуммаУменФедРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел13" Тогда
		Рез = мКБКРаздел13;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел13" Тогда
		Рез = мКодОКАТОРаздел13;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплФедРаздел13" Тогда
		Рез = мСуммаДоплФедРаздел13;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменФедРаздел13" Тогда
		Рез = мСуммаУменФедРаздел13;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодСтраныСоглРаздел2" Тогда
		Рез = мКодСтраныСоглРаздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодСтраныРаздел2" Тогда
		Рез = мКодСтраныРаздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "ИННРО1Раздел2" Тогда
		Рез = мИННРО1Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КППРО1Раздел2" Тогда
		Рез = мКППРО1Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "ИННРО2Раздел2" Тогда
		Рез = мИННРО2Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КППРО2Раздел2" Тогда
		Рез = мКППРО2Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СтавкаРаздел7" Тогда
		Рез = мСтавкаРаздел7;
	ИначеЕсли КодПоказателяПоСтруктуре = "КолОтдРаздел10" Тогда
		Рез = мКолОтдРаздел10;
	ИначеЕсли КодПоказателяПоСтруктуре = "НалФБРаздел10" Тогда
		Рез = мНалФБРаздел10;
	ИначеЕсли КодПоказателяПоСтруктуре = "НалМБРаздел10" Тогда
		Рез = мНалМБРаздел10;

	КонецЕсли;
	
	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			Показатель              = КодПоказателяПоСтруктуре;
			Раздел = ИмяПоляТаблДокумента;
			Если Показатель = "СуммаНалога1" Тогда
				Для ПереборныйИнд = 1 По 3 Цикл
					Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Показатель + "_" + Строка(ПереборныйИнд));
					ПроставитьВКвадратыЗначения(Раздел , "СуммаНалога" + Строка(ПереборныйИнд) + "_", 15, Значение, Истина);
				КонецЦикла;
			КонецЕсли;

			Если Показатель = "СуммаНалУм1" Тогда
				Для ПереборныйИнд = 1 По 3 Цикл
					Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Показатель + "_" + Строка(ПереборныйИнд));
					ПроставитьВКвадратыЗначения(Раздел , "СуммаНалУм" + Строка(ПереборныйИнд) + "_", 15, Значение, Истина);
				КонецЦикла;
			КонецЕсли;

			Если Показатель = "СуммаПерех1" Тогда
				Для ПереборныйИнд = 1 По 3 Цикл
					Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Показатель + "_" + Строка(ПереборныйИнд));
					ПроставитьВКвадратыЗначения(Раздел , "СуммаПерех" + Строка(ПереборныйИнд) + "_", 15, Значение, Истина);
				КонецЦикла;
			КонецЕсли;

			Если Показатель = "СуммаДоплФедРаздел12" Тогда

				Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаДоплФедРаздел12");
				ПроставитьВКвадратыЗначения(Раздел , "СуммаДоплФед", 15, Значение, Истина);

			КонецЕсли;

			Если Показатель = "СуммаУменФедРаздел12" Тогда

				Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаУменФедРаздел12");
				ПроставитьВКвадратыЗначения(Раздел , "СуммаУменФед", 15, Значение, Истина);

			КонецЕсли;

			Если Показатель = "СуммаДоплФедРаздел13" Тогда

				Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаДоплФедРаздел13");
				ПроставитьВКвадратыЗначения(Раздел , "Сумма2ДоплФед", 15, Значение, Истина);

			КонецЕсли;

			Если Показатель = "СуммаУменФедРаздел13" Тогда

				Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаУменФедРаздел13");
				ПроставитьВКвадратыЗначения(Раздел , "Сумма2УменФед", 15, Значение, Истина);

			КонецЕсли;

		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				Если (ИмяПоказателя = "П000010003000") ИЛИ (ИмяПоказателя = "П000010004000") Тогда
					// Отобразим суммы акциза в отдельных ячейках
					// в соответствии с заданнным форматом
					//ЗаполнитьСуммы_в_Квадратах();
				Иначе
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЕсли;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(КолСтрок + 1, "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
        НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	//НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      2, НомерНижнЯчейкиОбласти,     2);
	//НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 2, НомерНижнЯчейкиНовойОбласти,2);
	//ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
	//	ИсходныйНомер = Число(ПоследнийНомер);
	//Иначе
	//	ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	//КонецЕсли;

	//НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок + 1, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
   
	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
		Сообщить("Нельзя удалять не добавленные строки");
		Возврат;
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр - 1, "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число("0"+ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";

				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;
	
	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// ЗаполнитьСведенияОбФЛ_
//
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)
	Перем ТаблицаСтраницРаздела;

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

		СписокПоказателей.Добавить("", "ГраждРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");

	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

		СписокПоказателей.Добавить("", "ГраждБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");
		// Инициализируем данные о УП

		СписокПоказателей.Добавить("", "ГраждУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");

	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные = ВозвратитьПустойОбразЛистаФЛ();
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные = ВозвратитьПустойОбразЛистаФЛ();
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(мИННДиректор) Тогда

		ФИОДиректора = мТитульный.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицоФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда

		ФИОБухгалтера = мТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицоФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 2, Истина, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда
		Попытка
			ФИООргУП = мТитульный.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицоФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если АктивнаяСтр <> Неопределено Тогда

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, "ФизЛица");

	Иначе

		Сообщить("Ошибка установки активной страницы ФЛ");

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбФЛ()

// ВозвратитьПустойОбразЛистаФЛ
//
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции // ВозвратитьПустойОбразЛистаФЛ

// ВыводДанныхОФизическомЛице
// Выводит данные о физических лицах в структуру многостраничного раздела
//
// Параметры:
// СвязьУстановлена - если Истина, то данные в ячейки записываются не проверяя на пустоту хранящегося там значения
// предпологается, что в этом случае, лист пуст
// СвязьУстановлена - Ложь - Лист с данными по ФИО найден и данные нужно заменять, только если пустота в ячейки
// Данные
// ТипДанных - что выводим может быть 1. Руководитель 2. Бухгалтер 3. УП
// ОграниченияВыводаУчесть - в случае ограничений
// ТаблицаСтраницРазделаМ - таблица раздела ФизЛица
//
Процедура ВыводДанныхОФизическомЛице_(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	// Для авансов по ЕСН, парметры Ложь, т.к. лист ФЛ не заполняется
	СохранятьИННнаЛисте = Истина;
	СохранятьКППнаЛисте = Истина;
	ФизЛицСлТел = Истина;
	ФизЛицДомТел = Истина;
	ФизЛицДатаРожд = Истина;
	ЕстьПол = Истина;
	ГраждСтранаЕсть = Истина;
	ГраждСтранаКодЕсть = Истина;
	ФизЛицМестоР = Истина;

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";

	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	// Для УП
	Если ТипДанных = 3 Тогда
		ДанныеПредставителя = РегламентированнаяОтчетность.ПолучитьСведенияОПредставителе(ЭтаФорма, Ложь);
		ЗаполнитьЗначенияСвойств(Данные, ДанныеПредставителя);
	КонецЕсли;

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);

	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук", ?(ТипДанных = 2, "ГраждСтранаБух", ?(ТипДанных = 3, "ГраждСтранаУпПред",""))), ГраждСтрана);

	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы = Неопределено Тогда
			Сообщить("Ошибка установки активной страницы раздела ФЛ");
		КонецЕсли;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрТаблицаСтраницы.Данные.ФизЛицоФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные = ВозвратитьПустойОбразЛистаФЛ();

			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	Если СохранятьИННнаЛисте Тогда

		Для НомЯчейки = 1 По 12 Цикл

			ЦифраИНН = Сред(мИННЮЛ, НомЯчейки, 1);
			СтрокаДляВставкиДанных.Данные.Вставить("ИНН1_" + Строка(НомЯчейки), ЦифраИНН);

		КонецЦикла;

	КонецЕсли;

	Если СохранятьКППнаЛисте Тогда

		КППЮЛ = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
		Если НЕ ПустаяСтрока(КППЮЛ) Тогда
			мКППЮЛ = КППЮЛ;
		КонецЕсли;

		Для НомЯчейки = 1 По 9 Цикл

			ЦифраКПП = Сред(мКППЮЛ, НомЯчейки, 1);
			СтрокаДляВставкиДанных.Данные.Вставить("КПП1_" + Строка(НомЯчейки), ЦифраКПП);

		КонецЦикла;

	КонецЕсли;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицоФИО", ФИО);
		Представление = СтрокаДляВставкиДанных.Данные[РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, "ФизЛица", "ИмяПредставления")];
		СтрокаДляВставкиДанных.Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСлТел) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДомТел) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВид) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			ПроставитьВКвадратыЗначения("ФизЛица", "ФизЛицДок", 2, КодУдЛичн);
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДок1 + СтрокаДляВставкиДанных.Данные.ФизЛицДок2) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;


	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокСерияНомер) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				стрУказаннаяДата = Формат(ДатаРожд, "ДФ=""ддММгггг""");
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР1", Сред(стрУказаннаяДата, 1, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР2", Сред(стрУказаннаяДата, 2, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР3", Сред(стрУказаннаяДата, 3, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР4", Сред(стрУказаннаяДата, 4, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР5", Сред(стрУказаннаяДата, 5, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР6", Сред(стрУказаннаяДата, 6, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР7", Сред(стрУказаннаяДата, 7, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР8", Сред(стрУказаннаяДата, 8, 1));

			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицДатаР1
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР2
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР3
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР4
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР5
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР6
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР7
				   + СтрокаДляВставкиДанных.Данные.ФизЛицДатаР8) Тогда
					стрУказаннаяДата = Формат(ДатаРожд, "ДФ=""ддММгггг""");
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР1", Сред(стрУказаннаяДата, 1, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР2", Сред(стрУказаннаяДата, 2, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР3", Сред(стрУказаннаяДата, 3, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР4", Сред(стрУказаннаяДата, 4, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР5", Сред(стрУказаннаяДата, 5, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР6", Сред(стрУказаннаяДата, 6, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР7", Сред(стрУказаннаяДата, 7, 1));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР8", Сред(стрУказаннаяДата, 8, 1));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицМестоР", МестоРожд);
			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицМестоР) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицМестоР", МестоРожд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВыдан) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка

		Если (НЕ СвязьУстановлена) Тогда

			стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

			Для Инд = 1 По 8 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

			КонецЦикла;

		Иначе

			Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицДокДата1 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата2 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата3
			+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата4 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата5 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата6
			+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата7 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата8) Тогда

				стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

				Для Инд = 1 По 8 Цикл

					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			
			Для Инд = 1 По 6 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

			КонецЦикла;

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицИнд1 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд2 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд3
			+ СтрокаДляВставкиДанных.Данные.ФизЛицИнд4 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд5 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд6) Тогда

				Для Инд = 1 По 6 Цикл

					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСубъект) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);
			КонецЕсли;

		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицС1 + СтрокаДляВставкиДанных.Данные.ФизЛицС2) Тогда

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

			КонецЕсли;

		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

		КонецЕсли;

	КонецЕсли;

	Если ЕстьПол Тогда
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			ПолМ = СтрокаДляВставкиДанных.Данные.ФизЛицПолМ;
			ПолЖ = СтрокаДляВставкиДанных.Данные.ФизЛицПолЖ;

			Если (НЕ СвязьУстановлена) Тогда

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));

			Иначе

				Если (РегламентированнаяОтчетность.ПустоеЗначение(ПолЖ)) И (РегламентированнаяОтчетность.ПустоеЗначение(ПолМ)) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ГраждСтранаЕсть Тогда
		// Гражданство заполняем для всех, кроме главного бухгалтера
		Если ТипДанных <> 2 Тогда
			// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
			// чтобы сохранить универсальность и переносимость функции

			ГраждСтрана = ?(РегламентированнаяОтчетность.ПустоеЗначение(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГражданство", ГраждСтрана);
			Иначе
				Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицГражданство) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГражданство", ГраждСтрана);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТипДанных <> 2 Тогда
		// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
		// чтобы сохранить универсальность и переносимость функции

		КодСтраны = СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд1 + СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд2 + СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд3;

		Если (НЕ СвязьУстановлена) Тогда
			Для Инд = 1 По 3 Цикл
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКодГражд" + Строка(Инд), Сред(Гражд, Инд, 1));
			КонецЦикла;
		Иначе
			Если ПустаяСтрока(КодСтраны) Тогда
				Для Инд = 1 По 3 Цикл
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКодГражд" + Строка(Инд), Сред(Гражд, Инд, 1));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		КонецЕсли;

	// Выводим дату на лист ФЛ
	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицоФИО) Тогда

		Для Инд =1 По 8 Цикл
			СтрокаДляВставкиДанных.Данные.Вставить("ДатаПодписи" + Строка(Инд), Сред(стрУказаннаяДата, Инд, 1));
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры //ВыводДанныхОФизическомЛице

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Раздел) Экспорт

	РазделП = СтрЗаменить(Раздел, "ПолеТабличногоДокумента", "");

	Если РазделП = "Раздел1_1" Тогда

		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалога1_", 15, мСуммаНалога1_1, Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалУм1_", 15, мСуммаНалУм1_1,   Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаПерех1_", 15, мСуммаПерех1_1,   Истина);

		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалога2_", 15, мСуммаНалога1_2, Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалУм2_", 15, мСуммаНалУм1_2,   Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаПерех2_", 15, мСуммаПерех1_2,   Истина);

		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалога3_", 15, мСуммаНалога1_3, Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаНалУм3_", 15, мСуммаНалУм1_3,   Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаПерех3_", 15, мСуммаПерех1_3,   Истина);

	ИначеЕсли РазделП = "Раздел1_2" Тогда

		ПроставитьВКвадратыЗначения(РазделП, "СуммаДоплФед", 15, мСуммаДоплФедРаздел12, Истина);
		ПроставитьВКвадратыЗначения(РазделП, "СуммаУменФед", 15, мСуммаУменФедРаздел12, Истина);

	ИначеЕсли РазделП = "Раздел1_3" Тогда

		ПроставитьВКвадратыЗначения(РазделП, "Сумма2ДоплФед", 15, мСуммаДоплФедРаздел13, Истина);
		ПроставитьВКвадратыЗначения(РазделП, "Сумма2УменФед", 15, мСуммаУменФедРаздел13, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// ИмяГруппы = "П0020800140"

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			Если ИмяГруппы = "П0020800140" Тогда
				// номера строк исходной области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх + 1;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ - 1;
				СдвигСтрок = 3;

				ИсхКоординатаНомерНижнЯчейкиОбласти = НомерНижнЯчейкиОбласти;
				ИсхКоординатаНомерВерхЯчейкиОбласти = НомерВерхЯчейкиОбласти;

			Иначе

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			КонецЕсли;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			
			МаксимальноеКоличествоСтрокГруппы = 200;
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			ВысотаСтроки = 1;
			
			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			//Возврат;
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;
				
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ОбластьЯчейки.Очистить();
					Иначе
						// порядковый номер последней строки перед вставкой
						ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
						НовыйПорядковыйНомер = ИсходныйНомер + 1;

						ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
					КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, ИмяЛиста = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели    = ИмяЛиста;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	ИмяСтраницыР = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если ИмяСтраницыР = "ФизЛица" Тогда

		мФизЛицИнд = "";
		мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	ИначеЕсли ИмяСтраницыР = "Раздел1_1" Тогда

		мКодОКАТО1 = "";

		мКБКвФБ_1_1 = "";
		мКБКвФБ_1_2 = "";
		мКБКвФБ_1_3 = "";

		мСуммаНалога1_1 = 0;
		мСуммаНалУм1_1 = 0;
		мСуммаПерех1_1 = 0;

		мСуммаНалога1_2 = 0;
		мСуммаНалУм1_2 = 0;
		мСуммаПерех1_2 = 0;

		мСуммаНалога1_3 = 0;
		мСуммаНалУм1_3 = 0;
		мСуммаПерех1_3 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел1_2" Тогда

		мКБКРаздел12 = "";
		мКодОКАТОРаздел12 = "";
		мСуммаДоплФедРаздел12 = 0;
		мСуммаУменФедРаздел12 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел1_3" Тогда

		мКБКРаздел13 = "";
		мКодОКАТОРаздел13 = "";
		мСуммаДоплФедРаздел13 = 0;
		мСуммаУменФедРаздел13 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел2" Тогда

		мКодСтраныСоглРаздел2 = "";
		мКодСтраныРаздел2  = "";
		мИННРО1Раздел2 = "";
		мКППРО1Раздел2 = "";
		мИННРО2Раздел2 = "";
		мКППРО2Раздел2 = "";

	ИначеЕсли ИмяСтраницыР = "Раздел7" Тогда

		мСтавкаРаздел7 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел10" Тогда

		мКолОтдРаздел10 = 0;
		мНалФБРаздел10 = 0;
		мНалМБРаздел10 = 0;

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП

			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;

		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ИмяЛиста = ВыбТабличноеПоле.Имя;
	ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяЛиста, "ПредставлениеДанных");

	Если ПредставлениеДанных Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяЛиста);
	КонецЕсли;

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Функция РазделБудетПечататься (ИмяСтраницы)
// Возвращает, будет ли печататься, а значит есть ли такая страница
// Истина - ДА
// Ложь - НЕТ
// Используется в Расчет() для определения есть ли та или иная страница
//
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // РазделБудетПечататься

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

// Раздел3БВ в этом цикле не сохраняем, т.к. он многостраничный !!!
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;

	// всё прошло без ошибок
	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// ДанныеВариановАвтоЗаполнения - всегда восстанавливаем первее чем Данные Многостраничных Разделов
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	// восстановим сохраненные данные редактируемых ячеек
	// СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ТекТабличноеПоле.Имя,"ПолеТабличногоДокумента","");

		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяЛиста, ТаблицаМногостраничногоДокумента) Тогда
			// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
			// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
			// данные многостраничных разделов уже были выведены в соответствующие листы
			Продолжить;
		КонецЕсли;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если (ИмяТекТабличноеПоле = "ПолеТабличногоДокументаРаздел3") Тогда
				Если (Найти(ИмяПоказателя, "П0") > 0) И (Прав(ИмяПоказателя, 1) = "0") Тогда
					
					НомерСтроки = Сред(ИмяПоказателя, 9, 3);
					
					Если РегламентированнаяОтчетность.роЯвляетсяЧислом(НомерСтроки) Тогда
						Если Число(НомерСтроки) >= 190 Тогда
							Если ЗначениеПоказателя = "0" Тогда
								ЗначениеПоказателя = "";
							Иначе
								ЗначениеПоказателя = "V";
							КонецЕсли;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

		//Если ПредставлениеДанных Тогда
		//	ЗаполнениеЗначенийВКвадратиках(ИмяТекТабличноеПоле);
		//КонецЕсли;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "КодОКАТО1" Тогда
		мКодОКАТО1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_1" Тогда
		мКБКвФБ_1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_2" Тогда
		мКБКвФБ_1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_3" Тогда
		мКБКвФБ_1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога1_1" Тогда
		мСуммаНалога1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога1_2" Тогда
		мСуммаНалога1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога1_3" Тогда
		мСуммаНалога1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_1" Тогда
		мСуммаНалУм1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_2" Тогда
		мСуммаНалУм1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_3" Тогда
		мСуммаНалУм1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_1" Тогда
		мСуммаПерех1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_2" Тогда
		мСуммаПерех1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_3" Тогда
		мСуммаПерех1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел12" Тогда
		мКБКРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел12" Тогда
		мКодОКАТОРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел12" Тогда
		мСуммаДоплФедРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел12" Тогда
		мСуммаУменФедРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел13" Тогда
		мКБКРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел13" Тогда
		мКодОКАТОРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел13" Тогда
		мСуммаДоплФедРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел13" Тогда
		мСуммаУменФедРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодСтраныСоглРаздел2" Тогда
		мКодСтраныСоглРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодСтраныРаздел2" Тогда
		мКодСтраныРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРО1Раздел2" Тогда
		мИННРО1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КППРО1Раздел2" Тогда
		мКППРО1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРО2Раздел2" Тогда
		мИННРО2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КППРО2Раздел2" Тогда
		мКППРО2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СтавкаРаздел7" Тогда
		мСтавкаРаздел7 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КолОтдРаздел10" Тогда
		мКолОтдРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НалФБРаздел10" Тогда
		мНалФБРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НалМБРаздел10" Тогда
		мНалМБРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура "собирает" значения показателей по отдельным
// полям табличного документа на странице "Титульный" формы.
//
Процедура СохрЗначВКвадратиках()

	мОргТип = мТитульный.Области.ТипОрг1.Значение;
	
	мОргКодИМНС = мТитульный.Области.КодИМНС1.Значение
	            + мТитульный.Области.КодИМНС2.Значение
	            + мТитульный.Области.КодИМНС3.Значение
	            + мТитульный.Области.КодИМНС4.Значение;

	мИННДиректор = мТитульный.Области.ИННРук1.Значение
	             + мТитульный.Области.ИННРук2.Значение
	             + мТитульный.Области.ИННРук3.Значение
	             + мТитульный.Области.ИННРук4.Значение
	             + мТитульный.Области.ИННРук5.Значение
	             + мТитульный.Области.ИННРук6.Значение
	             + мТитульный.Области.ИННРук7.Значение
	             + мТитульный.Области.ИННРук8.Значение
	             + мТитульный.Области.ИННРук9.Значение
	             + мТитульный.Области.ИННРук10.Значение
	             + мТитульный.Области.ИННРук11.Значение
	             + мТитульный.Области.ИННРук12.Значение;
	
	мИННБухгалтер = мТитульный.Области.ИННГБ1.Значение
	              + мТитульный.Области.ИННГБ2.Значение
	              + мТитульный.Области.ИННГБ3.Значение
	              + мТитульный.Области.ИННГБ4.Значение
	              + мТитульный.Области.ИННГБ5.Значение
	              + мТитульный.Области.ИННГБ6.Значение
	              + мТитульный.Области.ИННГБ7.Значение
	              + мТитульный.Области.ИННГБ8.Значение
	              + мТитульный.Области.ИННГБ9.Значение
	              + мТитульный.Области.ИННГБ10.Значение
	              + мТитульный.Области.ИННГБ11.Значение
	              + мТитульный.Области.ИННГБ12.Значение;

	мИННУпПред = мТитульный.Области.ИННУП1.Значение
	           + мТитульный.Области.ИННУП2.Значение
	           + мТитульный.Области.ИННУП3.Значение
	           + мТитульный.Области.ИННУП4.Значение
	           + мТитульный.Области.ИННУП5.Значение
	           + мТитульный.Области.ИННУП6.Значение
	           + мТитульный.Области.ИННУП7.Значение
	           + мТитульный.Области.ИННУП8.Значение
	           + мТитульный.Области.ИННУП9.Значение
	           + мТитульный.Области.ИННУП10.Значение
	           + мТитульный.Области.ИННУП11.Значение
	           + мТитульный.Области.ИННУП12.Значение;

	мОргОГРН = мТитульный.Области.ОГРН1.Значение
	         + мТитульный.Области.ОГРН2.Значение
	         + мТитульный.Области.ОГРН3.Значение
	         + мТитульный.Области.ОГРН4.Значение
	         + мТитульный.Области.ОГРН5.Значение
	         + мТитульный.Области.ОГРН6.Значение
	         + мТитульный.Области.ОГРН7.Значение
	         + мТитульный.Области.ОГРН8.Значение
	         + мТитульный.Области.ОГРН9.Значение
	         + мТитульный.Области.ОГРН10.Значение
	         + мТитульный.Области.ОГРН11.Значение
	         + мТитульный.Области.ОГРН12.Значение
	         + мТитульный.Области.ОГРН13.Значение;

	мОргКодОКАТО = мРаздел1_1.Области.КодОКАТОР1.Значение
	             + мРаздел1_1.Области.КодОКАТОР2.Значение
	             + мРаздел1_1.Области.КодОКАТОР3.Значение
	             + мРаздел1_1.Области.КодОКАТОР4.Значение
	             + мРаздел1_1.Области.КодОКАТОР5.Значение
	             + мРаздел1_1.Области.КодОКАТОР6.Значение
	             + мРаздел1_1.Области.КодОКАТОР7.Значение
	             + мРаздел1_1.Области.КодОКАТОР8.Значение
	             + мРаздел1_1.Области.КодОКАТОР9.Значение
	             + мРаздел1_1.Области.КодОКАТОР10.Значение
	             + мРаздел1_1.Области.КодОКАТОР11.Значение;

	// Требуется для процедуры формирования данных по ФЛ

	мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ДатаДок = "";
	Для Инд = 1 По 8 Цикл
		ДатаДок = ДатаДок + мФизЛица.Области["ФизЛицДокДата" + Строка(Инд)].Значение + ?(Инд=2, ".", ?( Инд = 4, ".", ""));
	КонецЦикла;

	Если РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаДок + "0:00:00") Тогда
		мДатаДок = Дата(ДатаДок + "0:00:00");
	КонецЕсли;

	мФизЛицИнд = "";
	Для Инд = 1 По 6 Цикл
		мФизЛицИнд = мФизЛицИнд + мФизЛица.Области["ФизЛицИнд" + Строка(Инд)].Значение;
	КонецЦикла;

	мФизЛицИнд = ?(РегламентированнаяОтчетность.ПустоеЗначение(мФизЛицИнд), "", СтрЗаменить(Строка(мФизЛицИнд), Символ(160), ""));


КонецПроцедуры // СохрЗначВКвадратиках()

// Функция вычисляет итоговую сумму по конкретной графе по всем строкам
// многострочного раздела.
//
// Параметры:
// 	 Парам - строка  - показатель ячейки, по которой суммируются значения
//                     по всем строкам многострочного раздела.
//
// Возвращаемое значение:
//   число.
//
Функция РасчетСуммМногострочнойЧасти(Парам, НомерКолонки) 
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	СуммаПоГрафе = 0; 
	
	// идентификатор многострочного раздела
	ИмяГруппы = Лев(Парам, 11);
	
	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	Для Инд = 1 по КолСтрок Цикл
		ИмяЯчейкиСтроки = СтруктураГруппы.Колонки[НомерКолонки - 1].Имя + "_" + Формат(Инд, "ЧГ=0");
		ОбластьЯчейки 	= ТекТабличноеПоле.Области[ИмяЯчейкиСтроки];
		СуммаПоГрафе 	= СуммаПоГрафе + ОкруглитьЧислоПоФормату(ОбластьЯчейки.Значение);
	КонецЦикла;

	Возврат СуммаПоГрафе;
	
КонецФункции  // РасчетСуммМнч()

// РасчетЗависимыхРазделовДекларации
// Процедура рассчитывает зависимые листы декларации.
// Параметры:
//  ИмяТекущейСтраницыПанели - название раздела декларации
//  РазделВызвавшийПересчет - зарезервировано, пока не используется
//
Процедура РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, Сельхоз = Неопределено, РазделВызвавшийПересчет = Неопределено)

	Если ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		Расчет("Раздел5");
		Расчет("Раздел7");
		Расчет("Раздел10");
		Расчет("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		Расчет("Раздел3");
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		Расчет("Раздел4");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		Расчет("Раздел6");
		Расчет("Раздел5");
		Расчет("Раздел7");
		Расчет("Раздел10");
		Расчет("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		Расчет("Раздел7");
		Расчет("Раздел10");
		Расчет("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
		Расчет("Раздел8");
		Расчет("Раздел1_2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
		Расчет("Раздел9");
		Расчет("Раздел1_3");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10" Тогда
		Расчет("Раздел10");
		Расчет("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10_Прил1" Тогда
		Расчет("Раздел10_Прил1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11" Тогда
		Расчет("Раздел11");
		Расчет("Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил1" Тогда
		Расчет("Раздел11_Прил1");
		Расчет("Раздел11");
		Расчет("Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил2" Тогда
		Расчет("Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели <> "Титульный" Тогда

		Расчет(ИмяТекущейСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // РасчетЗависимыхРазделовДекларации

// УполномоченныйПредставительУстановить
// Процедура используется только для деклараций где представитель представлен как "Уполномоченный представитель" и учитываются данные
// хранящиеся в справочнике Регистрация в ИФНС и в регистре контактной информации.
//
// Параметров нет.
//
Процедура УполномоченныйПредставительУстановить()
	//
	// Проставить представителя на тит. листе.
	Представитель = РегламентированнаяОтчетность.ПолучитьСведенияОПредставителе(ЭтаФорма, Ложь);

	// Получим КПП с титульного листа, КПП должен быть проставлен актуальный.
	КППТитульныйЛист = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если Представитель.ПредставительФЛ = Истина Тогда
		// Получим текущего представителя.
		ТекПредставительФИО = мТитульный.Области.ОргУП.Значение;
		// Получим текущий ИНН представителя.
		ТекПредставительИНН = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИННУП");
		// Если текущий представитель отличается от представителя в ИБ, тогда выполним следующие действия.
		Если Представитель.ФИОУпПред <> ТекПредставительФИО Тогда
			// Заполним ФИО представителя.
			мТитульный.Области.ОргУП.Значение = Представитель.ФИОУпПред;
			// Заполним ИНН представителя.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП" , 12, Представитель.ИННУпПред);
			// Если у нового представителя нет ИНН, то перезаполним все экземпляры листа с данными ФЛ.
			Если ПустаяСтрока(Представитель.ИННУпПред) Тогда
				// Перезаполним весь лист с данными ФЛ.
				мИННУпПред = "";

				// Перезаполним лист с данными ФЛ.
				ЗаполнитьСведенияОбФЛ(Истина);

				Если ПустаяСтрока(мФизЛица.Области.ФизЛицоФИО.Значение) Тогда
					// Перепроставим КПП в структуре многостраничного раздела на листе с данными ФЛ.
					КППТитульныйЛист = "            ";
					ПроставитьНаВсехЛистах("            ", "ИНН", "", "ФизЛица",,, Истина);
				КонецЕсли;
				ПроставитьНаВсехЛистах(КППТитульныйЛист, "КПП", "", "ФизЛица",,, Истина);

				// Перезаполним даты.
				ЗаполнитьДатуВЯчейках();

				Возврат;
			КонецЕсли;
			// Присвоим новый ИНН переменной.
			мИННУпПред = Представитель.ИННУпПред;
			// Если у текущего представителя есть ИНН, а у прошлого ИННа не было, тогда следует найти и точечено удалить его данные.
			Если (НЕ ПустаяСтрока(Представитель.ИННУпПред)) И (ПустаяСтрока(ТекПредставительИНН)) Тогда
				ВсегоЭкземпляров = мСтруктураМногостраничныхРазделов.ФизЛица.Количество();
				Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
					Если мСтруктураМногостраничныхРазделов.ФизЛица[Инд].Данные.ФизЛицоФИО = ТекПредставительФИО Тогда
						// В случае, если лист активный и единственный в разделе.
						Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
							ОчиститьТабличноеПоле(мФизЛица);
							мФизЛица.Области.ФизЛицоФИО.Значение = "";
						КонецЕсли;

						// В случе, если лист активный, но не единственный в разделе.
						Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
							ИзменитьТаблицуПараметровАвтозаполнения(-1, "ФизЛица");
							УдалитьДополнительнуюСтраницу("ФизЛица");
							Прервать;
						КонецЕсли;

						// В случе, если лист НЕ активный.
						Если НЕ мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница Тогда
							// Отобразим.
							ПоказатьСтраницуМногостраничногоРаздела(Инд, "ФизЛица", Истина);
							// Удалим.
							ИзменитьТаблицуПараметровАвтозаполнения(-1, "ФизЛица");
							УдалитьДополнительнуюСтраницу("ФизЛица");
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Представитель.ПредставительФЛ = Неопределено Тогда
		мИННУпПред = "";
		ТекПредставительФИО = мТитульный.Области.ОргУП.Значение;
		мТитульный.Области.ОргУП.Значение = "";
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП" , 12, "");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПодписиУпП" , 8, "");

		// **********
		ВсегоЭкземпляров = мСтруктураМногостраничныхРазделов.ФизЛица.Количество();
		Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
			Если мСтруктураМногостраничныхРазделов.ФизЛица[Инд].Данные.ФизЛицоФИО = ТекПредставительФИО Тогда
				// В случае, если лист активный и единственный в разделе.
				Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
					ОчиститьТабличноеПоле(мФизЛица);
					мФизЛица.Области.ФизЛицоФИО.Значение = "";
				КонецЕсли;

				// В случе, если лист активный, но не единственный в разделе.
				Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
					ИзменитьТаблицуПараметровАвтозаполнения(-1, "ФизЛица");
					УдалитьДополнительнуюСтраницу("ФизЛица");
					Прервать;
				КонецЕсли;

				// В случе, если лист НЕ активный.
				Если НЕ мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница Тогда
					// Отобразим.
					ПоказатьСтраницуМногостраничногоРаздела(Инд, "ФизЛица", Истина);
					// Удалим.
					ИзменитьТаблицуПараметровАвтозаполнения(-1, "ФизЛица");
					УдалитьДополнительнуюСтраницу("ФизЛица");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПустаяСтрока(мФизЛица.Области.ФизЛицоФИО.Значение) Тогда
			// Перепроставим ИНН в структуре многостраничного раздела на листе с данными ФЛ.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ИНН1_" , 12, "            ");

			// Перепроставим КПП в структуре многостраничного раздела на листе с данными ФЛ.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "КПП1_" , 12, "            ");
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДатуВЯчейках();
КонецПроцедуры // УполномоченныйПредставительУстановить

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	Перем СтруктураГруппы5;

	Если (ФлажокОтклАвтоРасчет) Или (мИсключитьЗапускРасчета) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда

		П000110003000_ФБ = 0;
		П000110004000_ФБ = 0;
		П000110005000_ФБ = 0;
		П000110003000_СБ = 0;
		П000110004000_СБ = 0;
		П000110005000_СБ = 0;
		П000110003000_МБ = 0;
		П000110004000_МБ = 0;
		П000110005000_МБ = 0;

		// Заполняем строки 030 - 050 на основании сохраненных данных раздела 7 "Расчет суммы налога на прибыль".

		
		// Если иностранная организация осуществляет в РФ деятельность через группу отделений, каждое из которых
		// является постоянным представительством в рамках единого технологического процесса, то по показателям
		// "В бюджет субъекта РФ" и "В местный бюджет" отражаются результаты, исчисленные с учетом показателей
		// соответствующих строк раздела 10 "Расчет распределения налога на прибыль между отделениями иностранной
		// организации".

		// пункт Е1 раздела 7
		П000070017004 = СуммаПоказателяПоВсемСтраницам("П000070017004");
		// пункт  Е2 раздела 7
		П000070018004 = СуммаПоказателяПоВсемСтраницам("П000070018004");
		// пункт Е3 раздела 7
		П000070019004 = СуммаПоказателяПоВсемСтраницам("П000070019004");
		// пункт F раздела 7
		П000070020004 = СуммаПоказателяПоВсемСтраницам("П000070020004");
		// пункт G1 раздела 7
		П000070022004 = СуммаПоказателяПоВсемСтраницам("П000070022004");
		// пункт G2 раздела 7
		П000070023004 = СуммаПоказателяПоВсемСтраницам("П000070023004");
		// пункт G3 раздела 7
		П000070024004 = СуммаПоказателяПоВсемСтраницам("П000070024004");
		// пункт J1 раздела 7
		П000070028004 = СуммаПоказателяПоВсемСтраницам("П000070028004");
		// пункт J2 раздела 7
		П000070029004 = СуммаПоказателяПоВсемСтраницам("П000070029004");
		// пункт J3 раздела 7
		П000070030004 = СуммаПоказателяПоВсемСтраницам("П000070030004");
		// пункт K раздела 7
		П000070031004 = мРаздел7.Области.П000070031004.Значение;

		// СуммаПоказателяПоВсемСтраницам(ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)

		//СуммаПоказателяПоВсемСтраницам
		// пункт D раздела 10  (по всем отделениям)
		П000100007004 = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П000100007004"));
		// пункт F1 раздела 10 (по всем отделениям)
		П000100010004 = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П000100010004"));
		// пункт F2 раздела 10 (по всем отделениям)
		П000100011004 = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П000100011004"));
		// пункт G1 раздела 10 (по всем отделениям)
		П000100013004 = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П000100013004"));
		// пункт G2 раздела 10 (по всем отделениям)
		П000100014004 = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П000100014004"));

		// СУММЫ Налога
		// в Федеральный бюджет
		П000110003000_ФБ = Макс(П000070017004 - П000070020004 - П000070022004, 0);
		П000110004000_ФБ = Макс(П000070022004 + П000070020004 - П000070017004, 0);
		П000110005000_ФБ = ? (П000070031004<>0, П000070028004 / П000070031004, 0);

		// Заполнение показателей "В бюджет субъекта РФ" и "В местный бюджет" зависит от того,
		// осуществляет ли организация свою деятельность через группу отделений или нет.

		// в бюджет субъектов Федерации
		Если (П000100010004 <> 0) ИЛИ (П000100013004 <> 0) Тогда

			П000110003000_СБ = Макс(П000100010004 - П000100013004, 0);
			П000110004000_СБ = Макс(П000100013004 - П000100010004, 0);
			П000110005000_СБ = ? (П000070031004<>0, (П000070029004 / П000070031004) * (П000100007004 / 100), 0);
		Иначе

			П000110003000_СБ = Макс(П000070018004 - П000070023004, 0);
			П000110004000_СБ = Макс(П000070023004 - П000070018004, 0);
			П000110005000_СБ = ? (П000070031004<>0, П000070029004 / П000070031004, 0);
		КонецЕсли;

		// в местный бюджет 
		Если (П000100011004 <> 0) ИЛИ (П000100014004 <> 0) Тогда

			П000110003000_МБ = Макс(П000100011004 - П000100014004, 0);
			П000110004000_МБ = Макс(П000100014004 - П000100011004, 0);
			П000110005000_МБ = ? (П000070031004<>0, (П000070030004 / П000070031004) * (П000100007004 / 100), 0);
		Иначе

			П000110003000_МБ = Макс(П000070019004 - П000070024004, 0);
			П000110004000_МБ = Макс(П000070024004 - П000070019004, 0);
			П000110005000_МБ = ? (П000070031004<>0, П000070030004 / П000070031004, 0);
		КонецЕсли;

		//мСуммаНалога1_1 = П000110003000_ФБ;
		//мСуммаНалога1_2 = П000110004000_ФБ;
		//мСуммаНалога1_3 = П000110005000_ФБ;

		//мСуммаНалУм1_1 = П000110003000_СБ;
		//мСуммаНалУм1_2 = П000110004000_СБ;
		//мСуммаНалУм1_3 = П000110005000_СБ;

		//мСуммаПерех1_1 = П000110003000_МБ;
		//мСуммаПерех1_2 = П000110004000_МБ;
		//мСуммаПерех1_3 = П000110005000_МБ;

		мСуммаНалога1_1 = П000110003000_ФБ;
		мСуммаНалога1_2 = П000110003000_СБ; // П000110004000_ФБ;
		мСуммаНалога1_3 = П000110003000_МБ; // П000110005000_ФБ;

		мСуммаНалУм1_1 = П000110004000_ФБ;// П000110003000_СБ;
		мСуммаНалУм1_2 = П000110004000_СБ;
		мСуммаНалУм1_3 = П000110004000_МБ; // П000110005000_СБ;

		мСуммаПерех1_1 = П000110005000_ФБ; // П000110003000_МБ;
		мСуммаПерех1_2 = П000110005000_СБ; // П000110004000_МБ;
		мСуммаПерех1_3 = П000110005000_МБ;

		// Заполняем суммы налога в квадратиках
		ЗаполнениеЗначенийВКвадратиках("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		мСуммаДоплФедРаздел12 = ОкруглитьЧислоПоФормату( мРаздел8.Области.П000080005004.Значение );
		мСуммаУменФедРаздел12 = ОкруглитьЧислоПоФормату( мРаздел8.Области.П000080006004.Значение );

		ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		мСуммаДоплФедРаздел13  = ОкруглитьЧислоПоФормату( мРаздел9.Области.П000090007004.Значение );
		мСуммаУменФедРаздел13  = ОкруглитьЧислоПоФормату( мРаздел9.Области.П000090008004.Значение );

		ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ОП000030001004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030001004.Значение);
		ОП000030001005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030001005.Значение);
		ОП000030002004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002004.Значение);
		ОП000030002005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002005.Значение);
		ОП000030003004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030003004.Значение);
		ОП000030003005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030003005.Значение);
		ОП000030004004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004004.Значение);
		ОП000030004005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004005.Значение);
		ОП000030005004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005004.Значение);
		ОП000030005005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005005.Значение);
		ОП000030006004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006004.Значение);
		ОП000030006005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006005.Значение);
		ОП000030007004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030007004.Значение);
		ОП000030007005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030007005.Значение);
		ОП000030008004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030008004.Значение);
		ОП000030008005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030008005.Значение);
		ОП000030009004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009004.Значение);
		ОП000030009005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009005.Значение);
		ОП000030010004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010004.Значение);
		ОП000030010005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010005.Значение);
		ОП000030012004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012004.Значение);
		ОП000030012005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012005.Значение);
		ОП000030013004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030013004.Значение);
		ОП000030013005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030013005.Значение);
		ОП000030014004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030014004.Значение);
		ОП000030014005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030014005.Значение);
		ОП000030015004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030015004.Значение);
		ОП000030015005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030015005.Значение);
		ОП000030016004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030016004.Значение);
		ОП000030016005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030016005.Значение);
		ОП000030017004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030017004.Значение);
		ОП000030017005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030017005.Значение);
		
		// активы на начало периода
		мРаздел3.Области.П000030011004.Значение = ОП000030001004 + ОП000030002004 + ОП000030003004 + ОП000030004004 + ОП000030005004 +
		                                          ОП000030006004 + ОП000030008004 + ОП000030009004 + ОП000030010004;
		
		// активы на конец периода
		мРаздел3.Области.П000030011005.Значение = ОП000030001005 + ОП000030002005 + ОП000030003005 + ОП000030004005 + ОП000030005005 +
		                                          ОП000030006005 + ОП000030008005 + ОП000030009005 + ОП000030010005;               
		
		// пассивы на начало периода
		мРаздел3.Области.П000030018004.Значение = ОП000030012004 + ОП000030013004 + ОП000030014004 + 
		                                          ОП000030015004 + ОП000030016004 + ОП000030017004;
		
		// пассивы на конец периода
		мРаздел3.Области.П000030018005.Значение = ОП000030012005 + ОП000030013005 + ОП000030014005 + 
					                              ОП000030015005 + ОП000030016005 + ОП000030017005;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ОП000040001004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040001004.Значение);
		ОП000040002004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040002004.Значение);
		ОП000040003004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040003004.Значение);
		ОП000040004004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040004004.Значение);
		ОП000040005004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040005004.Значение);
		ОП000040006004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040006004.Значение);
		ОП000040008004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040008004.Значение);
		ОП000040009004 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040009004.Значение);
		
		// сумма налога (по законодательству РФ)
		
		мРаздел4.Области.П000040001006.Значение = ОкруглитьЧислоПоФормату(ОП000040001004 * мРаздел4.Области.П000040001005.Значение / 100);
		мРаздел4.Области.П000040002006.Значение = ОкруглитьЧислоПоФормату(ОП000040002004 * мРаздел4.Области.П000040002005.Значение / 100);
		мРаздел4.Области.П000040003006.Значение = ОкруглитьЧислоПоФормату(ОП000040003004 * мРаздел4.Области.П000040003005.Значение / 100);
		мРаздел4.Области.П000040004006.Значение = ОкруглитьЧислоПоФормату(ОП000040004004 * мРаздел4.Области.П000040004005.Значение / 100);
		мРаздел4.Области.П000040005006.Значение = ОкруглитьЧислоПоФормату(ОП000040005004 * мРаздел4.Области.П000040005005.Значение / 100);
		мРаздел4.Области.П000040006006.Значение = ОкруглитьЧислоПоФормату(ОП000040006004 * мРаздел4.Области.П000040006005.Значение / 100);
		мРаздел4.Области.П000040008006.Значение = ОкруглитьЧислоПоФормату(ОП000040008004 * мРаздел4.Области.П000040008005.Значение / 100);
		мРаздел4.Области.П000040009006.Значение = ОкруглитьЧислоПоФормату(ОП000040009004 * мРаздел4.Области.П000040009005.Значение / 100);
		
		// сумма дохода, всего
		мРаздел4.Области.П000040007004.Значение = ОП000040001004 + ОП000040002004 + ОП000040003004 + 
		                                          ОП000040004004 + ОП000040005004 + ОП000040006004;
		
		// сумма налога, всего
		мРаздел4.Области.П000040007006.Значение = мРаздел4.Области.П000040001006.Значение + мРаздел4.Области.П000040002006.Значение + мРаздел4.Области.П000040003006.Значение + 
		                                          мРаздел4.Области.П000040004006.Значение + мРаздел4.Области.П000040005006.Значение + мРаздел4.Области.П000040006006.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда

		ОП000050003004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050003004.Значение);
		ОП000050004004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050004004.Значение);
		ОП000050005004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050005004.Значение);
		ОП000050007004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050007004.Значение);
		ОП000050008004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050008004.Значение);
		ОП000050009004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050009004.Значение);
		ОП000050010004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050010004.Значение);
		ОП000050011004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050011004.Значение);
		ОП000050012004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050012004.Значение);
		ОП000050013004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050013004.Значение);
		ОП000050014004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050014004.Значение);
		ОП000050015004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050015004.Значение);
		ОП000050017004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050017004.Значение);
		ОП000050020004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050020004.Значение);
		ОП000050021004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050021004.Значение);
		ОП000050022004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050022004.Значение);
		ОП000050023004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050023004.Значение);
		ОП000050024004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050024004.Значение);
		ОП000050028004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050028004.Значение);
		ОП000050029104 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050029104.Значение);
		ОП000050030004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050030004.Значение);
		ОП000050032004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050032004.Значение);
		ОП000050033004 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П000050033004.Значение);

		// доходы от реализации - всего
		мРаздел5.Области.П000050002004.Значение = ОП000050003004 + ОП000050004004 + ОП000050005004;

		// внереализационные доходы - всего
		мРаздел5.Области.П000050006004.Значение = ОП000050007004 + ОП000050008004 + ОП000050010004 + ОП000050011004 +
		                                          ОП000050012004 + ОП000050013004 + ОП000050014004 + ОП000050015004;

		// доходы организации - всего
		мРаздел5.Области.П000050001004.Значение = мРаздел5.Области.П000050002004.Значение + мРаздел5.Области.П000050006004.Значение;

		// внереализационные расходы - всего
		мРаздел5.Области.П000050019004.Значение = ОП000050020004 + ОП000050021004 + ОП000050022004 +
		                                          ОП000050023004 + ОП000050024004;

		П000060016004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела("Раздел6", "Раздел5", "П000060016004");
		// Найдем индекс активной страницы.
		//ИндРаздела5 = мСтруктураМногостраничныхРазделов.Раздел5.Индекс(мСтруктураМногостраничныхРазделов.Раздел5.Найти(Истина, "АктивнаяСтраница"));
		//// Обратимся к разделу6, экземпляр раздела ИндРаздела5, по индеку раздела 5.
		//ТаблицаРаздела6 = мСтруктураМногостраничныхРазделов.Раздел6;
		//Если ИндРаздела5 > ТаблицаРаздела6.Количество() - 1 Тогда
		//	// В разделе 6 нет нужно экземпляра с индексом раздела 5. Поэтому вернем 0 по строке 160.
		//	П000060016004 = 0;
		//Иначе
		//	П000060016004 = 0;
		//	Если ТаблицаРаздела6[ИндРаздела5].АктивнаяСтраница Тогда
		//		П000060016004 = мРаздел6.Области.П000060016004.Значение;
		//	Иначе
		//		П000060016004 = ТаблицаРаздела6[ИндРаздела5].Данные.П000060016004;
		//	КонецЕсли;
		//КонецЕсли;

		мРаздел5.Области.П000050018004.Значение = ОкруглитьЧислоПоФормату(П000060016004);

		//Если мРаздел5.Области.П000050017004.Значение = 0 Тогда
		//	мРаздел5.Области.П000050017004.Значение = мРаздел5.Области.П000050018004.Значение;
		//КонецЕсли;

		// расходы организации - всего
		мРаздел5.Области.П000050016004.Значение = мРаздел5.Области.П000050017004.Значение + мРаздел5.Области.П000050019004.Значение;

		// прибыль (убыток) иностранной организации
		мРаздел5.Области.П000050025004.Значение = мРаздел5.Области.П000050002004.Значение + мРаздел5.Области.П000050006004.Значение - (мРаздел5.Области.П000050017004.Значение + мРаздел5.Области.П000050019004.Значение);

		// строка 260
		мРаздел5.Области.П000050026004.Значение = ОП000050007004;
		// строка 270
		мРаздел5.Области.П000050027004.Значение = ОП000050009004;

		// налоговая база
		мРаздел5.Области.П000050029004.Значение = Макс(0, мРаздел5.Области.П000050025004.Значение - ОП000050007004 - ОП000050009004 - ОП000050028004);
		
		// налоговая база с учетом суммы перенесенного убытка
		мРаздел5.Области.П000050031004.Значение = Макс(0, мРаздел5.Области.П000050029004.Значение + ОП000050029104 - ОП000050030004);
		
		// налоговая база для исчисления налога
		мРаздел5.Области.П000050034004.Значение = мРаздел5.Области.П000050031004.Значение;
		мРаздел5.Области.П000050035004.Значение = Макс(0, мРаздел5.Области.П000050031004.Значение - ОП000050032004);
		мРаздел5.Области.П000050036004.Значение = Макс(0, мРаздел5.Области.П000050031004.Значение - ОП000050033004);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ОП000060001004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060001004.Значение);
		ОП000060002004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060002004.Значение);
		ОП000060003004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060003004.Значение);
		ОП000060004004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060004004.Значение);
		ОП000060005004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060005004.Значение);
		ОП000060006004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060006004.Значение);
		ОП000060007004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060007004.Значение);
		ОП000060008004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060008004.Значение);
		ОП000060009004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060009004.Значение);
		ОП000060010004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060010004.Значение);
		ОП000060011004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060011004.Значение);
		ОП000060012004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060012004.Значение);
		ОП000060013004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060013004.Значение);
		ОП000060014004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060014004.Значение);
		ОП000060015004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000060015004.Значение);
		
		// Итого расходв
		мРаздел6.Области.П000060016004.Значение = ОП000060001004 + ОП000060002004 + ОП000060003004 + ОП000060004004 + ОП000060005004 +
		                                          ОП000060006004 + ОП000060007004 + ОП000060008004 + ОП000060009004 + ОП000060010004 +
		                                          ОП000060011004 + ОП000060012004 + ОП000060013004 + ОП000060014004 + ОП000060015004;
		
		// сумма расходов, переданных головным офисом
		мРаздел6.Области.П000060017004.Значение = РасчетСуммМногострочнойЧасти("П0000600180", 4);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда

		ОП000070006004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070006004.Значение);
		ОП000070007004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070007004.Значение);
		ОП000070008004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070008004.Значение);
		ОП000070009004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070009004.Значение);
		ОП000070020004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070020004.Значение);
		ОП000070022004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070022004.Значение);
		ОП000070023004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070023004.Значение);
		ОП000070024004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070024004.Значение);
		ОП000070028004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070028004.Значение);
		ОП000070029004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070029004.Значение);
		ОП000070030004 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070030004.Значение);

		// Строка А1.
		мРаздел7.Области.П000070002004.Значение = ПолучитьЗначениеИзСоответствующихЛистовРаздела("Раздел5", "Раздел7", "П000050034004");
		мРаздел7.Области.П000070003004.Значение = ПолучитьЗначениеИзСоответствующихЛистовРаздела("Раздел5", "Раздел7", "П000050035004");
		мРаздел7.Области.П000070004004.Значение = ПолучитьЗначениеИзСоответствующихЛистовРаздела("Раздел5", "Раздел7", "П000050036004");

		// налоговая база по операциям
		мРаздел7.Области.П000070005004.Значение = ОП000070006004 + ОП000070007004 + ОП000070008004 + ОП000070009004;

		// налоговая база для исчисления налога
		мРаздел7.Области.П000070010004.Значение = мРаздел7.Области.П000070002004.Значение + мРаздел7.Области.П000070005004.Значение;
		мРаздел7.Области.П000070011004.Значение = мРаздел7.Области.П000070003004.Значение + мРаздел7.Области.П000070005004.Значение;
		мРаздел7.Области.П000070012004.Значение = мРаздел7.Области.П000070004004.Значение + мРаздел7.Области.П000070005004.Значение;

		// сумма налога по расчету
		мРаздел7.Области.П000070017004.Значение = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070010004.Значение * мРаздел7.Области.П000070013004.Значение / 100);
		мРаздел7.Области.П000070018004.Значение = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070011004.Значение * мРаздел7.Области.П000070014004.Значение / 100);
		мРаздел7.Области.П000070019004.Значение = ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070012004.Значение * мРаздел7.Области.П000070015004.Значение / 100);
		// всего
		мРаздел7.Области.П000070016004.Значение = мРаздел7.Области.П000070017004.Значение + мРаздел7.Области.П000070018004.Значение + мРаздел7.Области.П000070019004.Значение;

		// начислено в бюдет
		мРаздел7.Области.П000070021004.Значение = ОП000070022004 + ОП000070023004 + ОП000070024004;
		
		// к доплате в бюджет, всего
		мРаздел7.Области.П000070025004.Значение = Макс( (мРаздел7.Области.П000070017004.Значение - ОП000070020004 - ОП000070022004)
		                                              + (мРаздел7.Области.П000070018004.Значение - ОП000070023004)                 
		                                              + (мРаздел7.Области.П000070019004.Значение - ОП000070024004), 0);

		// к уменьшению, всего
		мРаздел7.Области.П000070026004.Значение = Макс( (ОП000070020004 + ОП000070022004 - мРаздел7.Области.П000070017004.Значение)
		                                                               + (ОП000070023004 - мРаздел7.Области.П000070018004.Значение)
		                                                               + (ОП000070024004 - мРаздел7.Области.П000070019004.Значение), 0); 

		мРаздел7.Области.П000070027004.Значение = ОП000070028004 + ОП000070029004 + ОП000070030004;

		Если мРаздел7.Области.П000070031004.Значение <> 0 Тогда
			мРаздел7.Области.П000070032004.Значение = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070028004.Значение) / мРаздел7.Области.П000070031004.Значение +
			                                          ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070029004.Значение) / мРаздел7.Области.П000070031004.Значение +
			                                          ОкруглитьЧислоПоФормату(мРаздел7.Области.П000070030004.Значение) / мРаздел7.Области.П000070031004.Значение);
		Иначе
			мРаздел7.Области.П000070032004.Значение = 0;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда

		ОП000080001004 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П000080001004.Значение);
		ОП000080004004 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П000080004004.Значение);

		// сумма налога с дивидендов
		мРаздел8.Области.П000080003004.Значение = ОкруглитьЧислоПоФормату(ОП000080001004 * мРаздел8.Области.П000080002004.Значение / 100);

		// сумма налога к доплате
		мРаздел8.Области.П000080005004.Значение = Макс(0, мРаздел8.Области.П000080003004.Значение - ОП000080004004);
		
		// сумма налога к уменьшению
		мРаздел8.Области.П000080006004.Значение = Макс(0, ОП000080004004 - мРаздел8.Области.П000080003004.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		ОП000090001004 = ОкруглитьЧислоПоФормату(мРаздел9.Области.П000090001004.Значение);
		ОП000090002004 = ОкруглитьЧислоПоФормату(мРаздел9.Области.П000090002004.Значение);
		ОП000090006004 = ОкруглитьЧислоПоФормату(мРаздел9.Области.П000090006004.Значение);

		// налоговая база

		мРаздел9.Области.П000090003004.Значение = ОП000090001004 - ОП000090002004;

		// сумма налога, причитающаяся к уплате
		мРаздел9.Области.П000090005004.Значение = ОкруглитьЧислоПоФормату(мРаздел9.Области.П000090003004.Значение * мРаздел9.Области.П000090004004.Значение / 100);

		// сумма налога к доплате
		мРаздел9.Области.П000090007004.Значение = Макс(0, мРаздел9.Области.П000090005004.Значение - ОП000090006004);

		// сумма налога к уменьшению
		мРаздел9.Области.П000090008004.Значение = Макс(0, ОП000090006004 - мРаздел9.Области.П000090005004.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10" Тогда

		ОП000070011004 = СуммаПоказателяПоВсемСтраницам("П000070011004");
		ОП000070012004 = СуммаПоказателяПоВсемСтраницам("П000070012004");
		ОП000070029004 = СуммаПоказателяПоВсемСтраницам("П000070029004");
		ОП000070030004 = СуммаПоказателяПоВсемСтраницам("П000070030004");
		ОП000070031004 = мРаздел7.Области.П000070031004.Значение;

		мРаздел10.Области.П000100006004.Значение = ОП000070011004 + ОП000070012004;
		мРаздел10.Области.П000100015004.Значение = ? ( ОП000070031004 <> 0, ОкруглитьЧислоПоФормату(((ОП000070029004 + ОП000070030004) / ОП000070031004) * мРаздел10.Области.П000100007004.Значение / 100), 0);

		// строка 080
		мРаздел10.Области.П000100008004.Значение = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100006004.Значение * мРаздел10.Области.П000100007004.Значение / 100);

		// строка 100
		мРаздел10.Области.П000100010004.Значение = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100008004.Значение * мНалФБРаздел10 / 100);

		// строка 110
		мРаздел10.Области.П000100011004.Значение = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100008004.Значение * мНалМБРаздел10 / 100);

		// Выполним расчет в структуре, на всех листах
		РасчетВСтруктуре(ИмяТекущейСтраницыПанели);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10_Прил1" Тогда

			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы5);
		// расчет графы 9 многострочной таблицы
		Для Ном = 1 По СтруктураГруппы5.Количество() Цикл
			НомСтр = "_" + Формат(Ном, "ЧГ=0");

			мРаздел10_Прил1.Области["П000101001009"+НомСтр].Значение = 
			( Макс(мРаздел10_Прил1.Области["П000101001004"+НомСтр].Значение,
			мРаздел10_Прил1.Области["П000101001006"+НомСтр].Значение) +
			мРаздел10_Прил1.Области["П000101001008"+НомСтр].Значение ) / 2;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы5[Ном - 1];
			ТекСтрокаТаблицы.П000101001009 = мРаздел10_Прил1.Области["П000101001009"+НомСтр].Значение;
		КонецЦикла;

		// Если расчет отключен, то временно рассчитываем многострочную часть, т.к. признак из колонки 6 к многострочным частям пока не прикреплен
		Если ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;

		// итого по графе 3
		мРаздел10_Прил1.Области.П000101002003.Значение = РасчетСуммМногострочнойЧасти("П0001010010", 3);
		// итого по графе 5
		мРаздел10_Прил1.Области.П000101002005.Значение = РасчетСуммМногострочнойЧасти("П0001010010", 5);
		// итого по графе 7
		мРаздел10_Прил1.Области.П000101002007.Значение = РасчетСуммМногострочнойЧасти("П0001010010", 7);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11" Тогда

		ОП000110004003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110004003.Значение);
		ОП000110007003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110007003.Значение);
		ОП000110008003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110008003.Значение);
		ОП000110009003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110009003.Значение);
		ОП000110011003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110011003.Значение);
		ОП000110023003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110023003.Значение);
		ОП000110024003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110024003.Значение);
		ОП000110025003 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110025003.Значение);
		
		мРаздел11.Области.П000110003003.Значение = СуммаПоказателяПоВсемСтраницам("П000111007003", "П000111001000", , мРаздел11.Области.П000110001000.Значение);
		мРаздел11.Области.П000110012003.Значение = СуммаПоказателяПоВсемСтраницам("П000112012003", "П000112001000", , мРаздел11.Области.П000110001000.Значение);
		
		// строка 020
		мРаздел11.Области.П000110002003.Значение = мРаздел11.Области.П000110003003.Значение  + ОП000110004003;
		// строка 060
		мРаздел11.Области.П000110006003.Значение = ОП000110007003 + ОП000110008003;
		// строка 050
		мРаздел11.Области.П000110005003.Значение = мРаздел11.Области.П000110006003.Значение  + ОП000110009003;
		// строка 100
		мРаздел11.Области.П000110010003.Значение = мРаздел11.Области.П000110002003.Значение  - мРаздел11.Области.П000110005003.Значение;
		// строка 130
		мРаздел11.Области.П000110013003.Значение = ОП000110011003 - мРаздел11.Области.П000110012003.Значение;
		// строка 140
		мРаздел11.Области.П000110014003.Значение = мРаздел11.Области.П000110015003.Значение + мРаздел11.Области.П000110016003.Значение + мРаздел11.Области.П000110017003.Значение;
		// строка 190
		мРаздел11.Области.П000110019003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110013003.Значение * мРаздел11.Области.П000110015003.Значение / 100);
		// строка 200
		мРаздел11.Области.П000110020003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110013003.Значение * мРаздел11.Области.П000110016003.Значение / 100);
		// строка 210
		мРаздел11.Области.П000110021003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П000110013003.Значение * мРаздел11.Области.П000110017003.Значение / 100);	         
		// строка 180
		мРаздел11.Области.П000110018003.Значение = мРаздел11.Области.П000110019003.Значение + мРаздел11.Области.П000110020003.Значение + мРаздел11.Области.П000110021003.Значение;	
		// строка 220
		мРаздел11.Области.П000110022003.Значение = ОП000110023003 + ОП000110024003 + ОП000110025003;	           
		// строка 260
		мРаздел11.Области.П000110026003.Значение = Макс(мРаздел11.Области.П000110018003.Значение - мРаздел11.Области.П000110022003.Значение, 0);          
		// строка 270
		мРаздел11.Области.П000110027003.Значение = Макс(мРаздел11.Области.П000110022003.Значение - мРаздел11.Области.П000110018003.Значение, 0);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил1" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		мРаздел11_Прил1.Области.П000111006003.Значение = Макс( (мРаздел11_Прил1.Области.П000111002003.Значение - мРаздел11_Прил1.Области.П000111003003.Значение - мРаздел11_Прил1.Области.П000111004003.Значение) * мРаздел11_Прил1.Области.П000111005003.Значение, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил2" Тогда

		ОП000112003003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112003003.Значение);
		ОП000112004003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112004003.Значение);
		ОП000112005003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112005003.Значение);
		ОП000112006003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112006003.Значение);
		ОП000112007003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112007003.Значение);
		ОП000112008003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112008003.Значение);
		ОП000112009003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112009003.Значение);
		ОП000112010003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112010003.Значение);
		ОП000112011003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112011003.Значение);
		ОП000112012003 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П000112012003.Значение);

		// Переносим года.
		мРаздел11_Прил2.Области.П000112014001.Значение = мРаздел11_Прил2.Области.П000112003001.Значение;
		мРаздел11_Прил2.Области.П000112015001.Значение = мРаздел11_Прил2.Области.П000112004001.Значение;
		мРаздел11_Прил2.Области.П000112016001.Значение = мРаздел11_Прил2.Области.П000112005001.Значение;
		мРаздел11_Прил2.Области.П000112017001.Значение = мРаздел11_Прил2.Области.П000112006001.Значение;
		мРаздел11_Прил2.Области.П000112018001.Значение = мРаздел11_Прил2.Области.П000112007001.Значение;
		мРаздел11_Прил2.Области.П000112019001.Значение = мРаздел11_Прил2.Области.П000112008001.Значение;
		мРаздел11_Прил2.Области.П000112020001.Значение = мРаздел11_Прил2.Области.П000112009001.Значение;
		мРаздел11_Прил2.Области.П000112021001.Значение = мРаздел11_Прил2.Области.П000112010001.Значение;
		мРаздел11_Прил2.Области.П000112022001.Значение = мРаздел11_Прил2.Области.П000112011001.Значение;

		ОП000110010003 = СуммаПоказателяПоВсемСтраницам("П000110010003", "П000110001000", , мРаздел11_Прил2.Области.П000112001000.Значение);

		// строка 020
		мРаздел11_Прил2.Области.П000112002003.Значение = ОП000112003003 + ОП000112004003 + ОП000112005003
		                                               + ОП000112006003 + ОП000112007003 + ОП000112008003
		                                               + ОП000112009003 + ОП000112010003 + ОП000112011003;

		// строка 130
		мРаздел11_Прил2.Области.П000112013003.Значение = Макс(мРаздел11_Прил2.Области.П000112002003.Значение - ОП000112012003 + ОП000110010003, 0);

		// строки 140 - 220
		Остаток = Макс(ОП000112012003, 0);
		Списывается = Мин(Остаток, ОП000112003003);
		мРаздел11_Прил2.Области.П000112014003.Значение = ОП000112003003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112004003);
		мРаздел11_Прил2.Области.П000112015003.Значение = ОП000112004003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112005003);
		мРаздел11_Прил2.Области.П000112016003.Значение = ОП000112005003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112006003);
		мРаздел11_Прил2.Области.П000112017003.Значение = ОП000112006003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112007003);
		мРаздел11_Прил2.Области.П000112018003.Значение = ОП000112007003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112008003);
		мРаздел11_Прил2.Области.П000112019003.Значение = ОП000112008003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112009003);
		мРаздел11_Прил2.Области.П000112020003.Значение = ОП000112009003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112010003);
		мРаздел11_Прил2.Области.П000112021003.Значение = ОП000112010003 - Списывается + ОП000110010003;

		Остаток = Остаток - Списывается;
		Списывается = Мин(Остаток, ОП000112011003);
		мРаздел11_Прил2.Области.П000112022003.Значение = ОП000112011003 - Списывается + ОП000110010003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел11_Прил2");
		Расчет("Раздел11_Прил1");
		Расчет("Раздел11");
		Расчет("Раздел10_Прил1");
		Расчет("Раздел10_Прил1");

		Расчет("Раздел5");
		Расчет("Раздел7");

		Расчет("Раздел10");
		Расчет("Раздел9");
		Расчет("Раздел8");
		Расчет("Раздел7");
		Расчет("Раздел6");

		Расчет("Раздел4");
		Расчет("Раздел3");
		Расчет("Раздел1_3");
		Расчет("Раздел1_2");
		Расчет("Раздел1_1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// ПолучитьЗначениеИзСоответствующихЛистовРаздела
//
Функция ПолучитьЗначениеИзСоответствующихЛистовРаздела(ИзКакогоРаздела, НаОснованииРаздела, Показатель)
	НомАктив = мСтруктураМногостраничныхРазделов[НаОснованииРаздела].Найти(Истина, "АктивнаяСтраница");
	Если НомАктив = Неопределено Тогда
		// В том случае, когда проиходит удаление доп. листа. Расчет по разделу, который удален из структуры.
		Возврат 0;
	КонецЕсли;
	// Найдем индекс активной страницы.
	ИндРаздела = мСтруктураМногостраничныхРазделов[НаОснованииРаздела].Индекс(НомАктив);
	// Обратимся к разделу6, экземпляр раздела ИндРаздела5, по индеку раздела 5.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИзКакогоРаздела];
	Если ИндРаздела > ТаблицаРаздела.Количество() - 1 Тогда
		// В разделе 6 нет нужно экземпляра с индексом раздела 5. Поэтому вернем 0 по строке 160.
		Результат = 0;
	Иначе
		Результат = 0;
		Если ТаблицаРаздела[ИндРаздела].АктивнаяСтраница Тогда
			Результат = ЭлементыФормы["ПолеТабличногоДокумента" + ИзКакогоРаздела].Области[Показатель].Значение;
		Иначе
			Результат = ТаблицаРаздела[ИндРаздела].Данные[Показатель];
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции // ПолучитьЗначениеИзСоответствующихЛистовРаздела

// Выполняет расчет вычисляемых показателей на заданной странице отчета, В СТРУКТУРЕ!
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура РасчетВСтруктуре(ИмяТекущейСтраницыПанели = "")

	Если ИмяТекущейСтраницыПанели = "Раздел10" Тогда

		ТаблицаСтраницРаздела = Неопределено;

		Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел10", ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;

		//СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("Раздел23", Ложь);

		ОП000070011004 = СуммаПоказателяПоВсемСтраницам("П000070011004");
		ОП000070012004 = СуммаПоказателяПоВсемСтраницам("П000070012004");
		ОП000070029004 = СуммаПоказателяПоВсемСтраницам("П000070029004");
		ОП000070030004 = СуммаПоказателяПоВсемСтраницам("П000070030004");
		ОП000070031004 = мРаздел7.Области.П000070031004.Значение;

		П000100006004 = ОП000070011004 + ОП000070012004;
		П000100015004 = ? ( ОП000070031004 <> 0, ОкруглитьЧислоПоФормату(((ОП000070029004 + ОП000070030004 ) / ОП000070031004) * мРаздел10.Области.П000100007004.Значение / 100), 0);

		// строка 080
		П000100008004 = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100006004.Значение * мРаздел10.Области.П000100007004.Значение / 100);

		// строка 100
		П000100010004 = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100008004.Значение * мНалФБРаздел10 / 100);

		// строка 110
		П000100011004 = ОкруглитьЧислоПоФормату(мРаздел10.Области.П000100008004.Значение * мНалМБРаздел10 / 100);

		Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

			// В случае, когда вставляется страница, еще нет в структуре данных листов
			// в этом случае процедура Расчет сама рассчитает показатели
			Если (Страница.Данные = Неопределено) Или (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;

			Страница.Данные.Вставить("П000100006004", П000100006004);
			Страница.Данные.Вставить("П000100015004", П000100015004);
			Страница.Данные.Вставить("П000100008004", П000100008004);
			Страница.Данные.Вставить("П000100010004", П000100010004);
			Страница.Данные.Вставить("П000100011004", П000100010004);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РасчетВ Структуре

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	// 14.05.2005 + к написанному выше
	// В мДеревоВыбранныхСтраниц добавлен показатель ПорядокЗаполнения и 
	// перебор ведется последовательно до расчетного листа. Если он не указан,
	// то пересчитываются все листы. Для этого используется отсортированная
	// по этому показателю таблица ТаблицаПорядкаЗаполения.
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПорядкаЗаполения = Новый("ТаблицаЗначений");
	ТаблицаПорядкаЗаполения.Колонки.Добавить("ПорядокЗаполнения");
    ТаблицаПорядкаЗаполения.Колонки.Добавить("ИмяСтраницы");
	
	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл
		ВыгрузитьСтраницу = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыгрузитьСтраницу;
		ВыводНаПечать     = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
		Если (ВыгрузитьСтраницу = 1) ИЛИ (ВыводНаПечать = 1) Тогда
			НоваяСтрока = ТаблицаПорядкаЗаполения.Добавить();
			НоваяСтрока.ПорядокЗаполнения = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ПорядокЗаполнения;
			НоваяСтрока.ИмяСтраницы       = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
		КонецЕсли;
		ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	
	ТаблицаПорядкаЗаполения.Сортировать("ПорядокЗаполнения");
	
	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			Расчет(РасчетныйЛист);
		КонецЕсли;
		ПереборДо = ТаблицаПорядкаЗаполения.Индекс(ТаблицаПорядкаЗаполения.Найти(РасчетныйЛист,"ИмяСтраницы")) + 1;
	Иначе
		ПереборДо = ТаблицаПорядкаЗаполения.Количество(); 
	КонецЕсли;
	
	ПереборЗнач = 0;
	
	Пока ПереборЗнач < ПереборДо Цикл
		ИмяДляРасчета = ТаблицаПорядкаЗаполения.Получить(ПереборЗнач).ИмяСтраницы;		
        Расчет(ИмяДляРасчета);
		ПереборЗнач = ПереборЗнач+1;
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет (РасчетныйЛист = "")

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мИсключитьЗапускРасчета = Ложь;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица        = ЭлементыФормы.ПолеТабличногоДокументаФизЛица;
	мРаздел1_1      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел2        = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3        = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4        = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мРаздел5        = ЭлементыФормы.ПолеТабличногоДокументаРаздел5;
	мРаздел6        = ЭлементыФормы.ПолеТабличногоДокументаРаздел6;
	мРаздел7        = ЭлементыФормы.ПолеТабличногоДокументаРаздел7;
	мРаздел8        = ЭлементыФормы.ПолеТабличногоДокументаРаздел8;
	мРаздел9        = ЭлементыФормы.ПолеТабличногоДокументаРаздел9;
	мРаздел10       = ЭлементыФормы.ПолеТабличногоДокументаРаздел10;
	мРаздел10_Прил1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел10_Прил1;
	мРаздел11       = ЭлементыФормы.ПолеТабличногоДокументаРаздел11;
	мРаздел11_Прил1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел11_Прил1;
	мРаздел11_Прил2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел11_Прил2;

	мПустойОбразЛистаФЛ = СобратьДанныеТекущегоТаблПоля(мФизЛица);

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мДокументВосстановлен = Ложь;

	// Инициализируем все переменные хранящиеся в квадратных значениях
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		// Получаем список налоговых, кодов КБК и КБК 2005	
		ЗагрузитьПоказателиИзМакета("КодыКБК");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_2");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_3");
		ЗагрузитьПоказателиИзМакета("ВидыДеятельности");
		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный     .Области["ВидДок"].Значение = 1;

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
			НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	СохрЗначВКвадратиках();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ();
	КонецЕсли;
	ПолучитьИННКПП();

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	ДоступностьКнопокДобавитьУдалить();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
//
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// КнопкаДобавитьДопСтраницуРаздел5Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел5Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел5");
	ВставитьДополнительнуюСтраницу("Раздел5");
	мИсключитьЗапускРасчета = Ложь;
	РасчетЗависимыхРазделовДекларации("Раздел5");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел5Нажатие

// КнопкаДобавитьДопСтраницуРаздел6Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел6Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел6");
	ВставитьДополнительнуюСтраницу("Раздел6");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел6Нажатие

// КнопкаДобавитьДопСтраницуРаздел7Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел7Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел7");
	ВставитьДополнительнуюСтраницу("Раздел7");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел7Нажатие

// КнопкаПерейтиНаСтраницуРаздел5Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел5Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел5");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел5Нажатие

// КнопкаПерейтиНаСтраницуРаздел6Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел6Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел6");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел6Нажатие

// КнопкаПерейтиНаСтраницуРаздел7Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел7Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел7");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел7Нажатие

// КнопкаПредыдущаяСтраницаРаздел5Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел5");
	РасчетЗависимыхРазделовДекларации("Раздел5");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел5Нажатие

// КнопкаПредыдущаяСтраницаРаздел6Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел6Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел6");
	РасчетЗависимыхРазделовДекларации("Раздел6");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел6Нажатие

// КнопкаПредыдущаяСтраницаРаздел7Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел7Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел7");
	РасчетЗависимыхРазделовДекларации("Раздел7");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел7Нажатие

// КнопкаСледующаяСтраницаРаздел5Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел5");
	РасчетЗависимыхРазделовДекларации("Раздел5");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел5Нажатие

// КнопкаСледующаяСтраницаРаздел6Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел6Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел6");
	РасчетЗависимыхРазделовДекларации("Раздел6");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел6Нажатие

// КнопкаСледующаяСтраницаРаздел7Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел7Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел7");
	РасчетЗависимыхРазделовДекларации("Раздел7");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел7Нажатие

// КнопкаУдалитьДопСтраницуРаздел5Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел5Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел5");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел5");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел5Нажатие

// КнопкаУдалитьДопСтраницуРаздел6Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел6Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел6");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел6");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел6Нажатие

// КнопкаУдалитьДопСтраницуРаздел7Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел7Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел7");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел7");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел7Нажатие

// ПолеТабличногоДокументаРаздел11_Прил1Выбор
//
Процедура ПолеТабличногоДокументаРаздел11_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил1Выбор

// ПолеТабличногоДокументаРаздел11_Прил1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел11_Прил1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил1ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел5Выбор
//
Процедура ПолеТабличногоДокументаРаздел5Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел5Выбор

// ПолеТабличногоДокументаРаздел4Выбор
//
Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел4Выбор

// ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел10_Прил1Выбор
//
Процедура ПолеТабличногоДокументаРаздел10_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	// Строка КПП
	Если Найти(ОбластьИмя, "П000101001001_") > 0 Тогда

		ПервоначальноеЗначение = Элемент.ТекущаяОбласть.Значение;
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел10_Прил1", ОбластьИмя, ПервоначальноеЗначение, 10, 0, Ложь, "Введите ИНН", "", Неопределено, Неопределено, СтандартнаяОбработка);
	ИначеЕсли Найти(ОбластьИмя, "П000101001002_") > 0 Тогда

		ПервоначальноеЗначение = Элемент.ТекущаяОбласть.Значение;
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел10_Прил1", ОбластьИмя, ПервоначальноеЗначение, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка);

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел10_Прил1Выбор

Процедура ПолеТабличногоДокументаРаздел10_Прил1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры

// КнопкаПерейтиНаСтраницуРаздел11_Прил2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел11_Прил2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел11_Прил2");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел11_Прил2Нажатие

// КнопкаУдалитьДопСтраницуРаздел11_Прил2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел11_Прил2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел11_Прил2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел11_Прил2");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел11_Прил2Нажатие

// КнопкаДобавитьДопСтраницуРаздел11_Прил2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел11_Прил2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел11_Прил2");
	ВставитьДополнительнуюСтраницу("Раздел11_Прил2");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел11_Прил2Нажатие

// КнопкаСледующаяСтраницаРаздел11_Прил2Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел11_Прил2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел11_Прил2");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел11_Прил2Нажатие

// КнопкаПредыдущаяСтраницаРаздел11_Прил2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел11_Прил2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел11_Прил2");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел11_Прил2Нажатие

// КнопкаПерейтиНаСтраницуРаздел11_Прил1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел11_Прил1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел11_Прил1");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел11_Прил1Нажатие

// КнопкаУдалитьДопСтраницуРаздел11_Прил1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел11_Прил1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел11_Прил1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел11_Прил1");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел11_Прил1Нажатие

// КнопкаДобавитьДопСтраницуРаздел11_Прил1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел11_Прил1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел11_Прил1");
	ВставитьДополнительнуюСтраницу("Раздел11_Прил1");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел11_Прил1Нажатие

// КнопкаСледующаяСтраницаРаздел11_Прил1Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел11_Прил1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел11_Прил1");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел11_Прил1Нажатие

// КнопкаПредыдущаяСтраницаРаздел11_Прил1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел11_Прил1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел11_Прил1");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел11_Прил1Нажатие

// КнопкаПерейтиНаСтраницуРаздел11Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел11Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел11");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел11Нажатие

// КнопкаУдалитьДопСтраницуРаздел11Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел11Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел11");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел11");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел11Нажатие

// КнопкаДобавитьДопСтраницуРаздел11Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел11Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел11");
	ВставитьДополнительнуюСтраницу("Раздел11");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел11Нажатие

// КнопкаСледующаяСтраницаРаздел11Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел11Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел11");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел11Нажатие

// КнопкаПредыдущаяСтраницаРаздел11Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел11Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел11");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел11Нажатие

// КнопкаПерейтиНаСтраницуРаздел10Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел10Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел10");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел10Нажатие

// КнопкаУдалитьДопСтраницуРаздел10Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел10Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел10");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел10");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел10Нажатие

// КнопкаДобавитьДопСтраницуРаздел10Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел10Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел10");
	ВставитьДополнительнуюСтраницу("Раздел10");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел10Нажатие

// КнопкаСледующаяСтраницаРаздел10Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел10Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел10");
	РасчетЗависимыхРазделовДекларации("Раздел10");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел10Нажатие

// КнопкаПредыдущаяСтраницаРаздел10Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел10Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел10");
	РасчетЗависимыхРазделовДекларации("Раздел10");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел10Нажатие

// КнопкаПерейтиНаСтраницуФизЛицаНажатие
//
Процедура КнопкаПерейтиНаСтраницуФизЛицаНажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц();
КонецПроцедуры // КнопкаПерейтиНаСтраницуФизЛицаНажатие

// КнопкаПредыдущаяСтраницаФизЛицаНажатие
//
Процедура КнопкаПредыдущаяСтраницаФизЛицаНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "ФизЛица");
КонецПроцедуры // КнопкаПредыдущаяСтраницаФизЛицаНажатие

// КнопкаСледующаяСтраницаФизЛицаНажатие
//
Процедура КнопкаСледующаяСтраницаФизЛицаНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "ФизЛица");
КонецПроцедуры // КнопкаСледующаяСтраницаФизЛицаНажатие

// КнопкаУдалитьДопСтраницуФизЛицаНажатие
//
Процедура КнопкаУдалитьДопСтраницуФизЛицаНажатие(Элемент)

	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1);
	УдалитьДополнительнуюСтраницу("ФизЛица");

КонецПроцедуры // КнопкаУдалитьДопСтраницуФизЛицаНажатие

// КнопкаДобавитьДопСтраницуФизЛицаНажатие
//
Процедура КнопкаДобавитьДопСтраницуФизЛицаНажатие(Элемент)
	Предупреждение("Доп. листы с данными физических лиц формируются автоматически, в случае, если" + Символы.ПС
	             + "у руководителя, гл. бухгалтера или уполномоченного лица нет ИНН. Формирование" + Символы.ПС
	             + "происходит  при  первоначальном открытии  отчета  или  по  нажатию на  кнопку" + Символы.ПС
	             + """Обновить"", которая находится на верхней коммандной панели формы отчета.");
КонецПроцедуры // КнопкаДобавитьДопСтраницуФизЛицаНажатие

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
    СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	СохрЗначВКвадратиках();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьСведенияОбФЛ();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем показом статика, отображающего номер текущей страницы
	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	//ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	//ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

	//ПоследовательноеЗаполнениеЛистовДеклРасчет(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка
// авторасчета
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку. Общая.
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиЛист03_РазделАНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку. Общая.
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	Расчет(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);

КонецПроцедуры // КнопкаУдалитьДопСтрокиЛист03_РазделАНажатие()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОТ ТАБЛИЧНЫХ ПОЛЕЙ

// ПолеТабличногоДокументаТитульныйПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаТитульныйПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // 

// Процедура ПолеТабличногоДокументаТитульныйВыбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Область.Имя = "ТипОрг1" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ТипОрг2" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ТипОрг3" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ТипОрг4" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		Модифицированность = Истина;
	ИначеЕсли (Найти(Область.Имя, "КодИМНС") > 0) Или (Найти(Область.Имя, "ОргИМНС") > 0) Тогда
		ИФНСДоВыбора = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		РегламентированнаяОтчетность.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный");
		ИФНСПослеВыбора = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		Если ИФНСДоВыбора <> ИФНСПослеВыбора Тогда
			УполномоченныйПредставительУстановить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// ПолеТабличногоДокументаФизЛицаПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаФизЛицаПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаФизЛицаПриАктивизацииОбласти

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		// СтруктураАдресныхДанных.Вставить("Индекс", мФизЛицИнд);

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		   + мФизЛица.Области.ФизЛицИнд2.Значение
		   + мФизЛица.Области.ФизЛицИнд3.Значение
		   + мФизЛица.Области.ФизЛицИнд4.Значение
		   + мФизЛица.Области.ФизЛицИнд5.Значение
		   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			мФизЛицИнд = Индекс;
			ПроставитьВКвадратыЗначения("ФизЛица", "ФизЛицИнд", 6, Индекс);
			ПроставитьВКвадратыЗначения("ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Область.Имя = "ФизЛицПолМ")
	Или (Область.Имя = "ФизЛицПолЖ") Тогда

		СтандартнаяОбработка = Ложь;

		Если Область.ЗНачение = "V" Тогда
			Область.Значение = "";
			Модифицированность = Истина;
			Возврат;
		КонецЕсли;

		Область.ЗНачение = "V";
		Модифицированность = Истина;

		Если Область.Имя = "ФизЛицПолМ" Тогда
			мФизЛица.Области.ФизЛицПолЖ.Значение = "";
		Иначе
			мФизЛица.Области.ФизЛицПолМ.Значение = "";
		КонецЕсли;
	КонецЕсли;

	Если (Найти(Область.Имя,"ФизЛицДатаР")>0) ИЛИ
		 (Найти(Область.Имя,"ФизЛицДокДата")>0) Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// Процедура ПолеТабличногоДокументаРаздел1_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветАвто;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;
	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);

	Если (Найти(Область.Имя, "Сумма") > 0) Тогда
	// Узначем порядковый номер, если сумма

		Если Найти(Область.Имя, "СуммаНалога") Тогда
			НомерСуммы = Сред(Область.Имя, 12, 1);
			Префикс = "СуммаНалога1";
			ТекстС = "Введите сумму налога к доплате";
		ИначеЕсли Найти(Область.Имя, "СуммаНалУм") Тогда
			НомерСуммы = Сред(Область.Имя, 11, 1);
			Префикс = "СуммаНалУм1";
			ТекстС = "Введите сумму налога к уменьшению";
		ИначеЕсли Найти(Область.Имя, "СуммаПерех") Тогда
			НомерСуммы = Сред(Область.Имя, 11, 1);
			Префикс = "СуммаПерех1";
			ТекстС = "Введите сумму налога с базы переходного периода";
		КонецЕсли;

	КонецЕсли;

	Если Найти(Ячейка.Имя,"КодОКАТО")>0 Тогда
		НачЗначение = мКодОКАТО1;

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "КодОКАТОР", НачЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено, СтандартнаяОбработка, 11);
		Если Рез.ЗначениеВведено Тогда
			мКодОКАТО1 = Рез.Значение;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя,"КБКвФБ") > 0)
	      Или (Найти(Ячейка.Имя,"КБКвБС") > 0)
	      Или (Найти(Ячейка.Имя,"КБКвМБ") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если Найти(Ячейка.Имя,"КБКвФБ_") > 0 Тогда
			ТекКБК = мКБКвФБ_1_1;
			КодПоСтруктуре = "КБКвФБ_1_1";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвБС") > 0 Тогда
			ТекКБК = мКБКвФБ_1_2;
			КодПоСтруктуре = "КБКвФБ_1_2";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвМБ") > 0 Тогда
			ТекКБК = мКБКвФБ_1_3;
			КодПоСтруктуре = "КБКвФБ_1_3";
		КонецЕсли;

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
		ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
		КонецЕсли;

		КолЗнаков = 20;

		Если НЕ мАвтоВыборКодов Тогда

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(ТекКБК, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;
		КонецЕсли;
		
		Если мАвтоВыборКодов Тогда

			Если НЕ ВвестиСтроку(ТекКБК, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = ТекКБК;
			КонецЕсли;

		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат; // Отказались от выбора, окно закрыто
		КонецЕсли;

		ИтРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));
		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_1",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка.Имя), 20, ИтРезультат);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "Сумма") > 0) И (ФлажокОтклАвтоРасчет) Тогда

		СтандартнаяОбработка = Ложь;

		Сумма = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Префикс + "_" + НомерСуммы);

		Если ВвестиЧисло(Сумма, ТекстС, 14, 2) Тогда

			Если ОбновитьПеременныеМодуля(Префикс + "_" + НомерСуммы, Сумма) Тогда
				ПроставитьВКвадратыЗначения("Раздел1_1",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 15, Сумма, Истина);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

// Процедура ПолеТабличногоДокументаРаздел1_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветАвто;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;
	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);

	Если Найти(Ячейка.Имя,"КодОКАТО")>0 Тогда
		НачЗначение = мКодОКАТОРаздел12;
		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_2", "КодОКАТОР2", НачЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено, СтандартнаяОбработка, 11);

		Если Рез.ЗначениеВведено Тогда
			мКодОКАТОРаздел12 = Рез.Значение;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя,"КБК") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		ТекКБК = мКБКРаздел12;
		КодПоСтруктуре = "КБКРаздел12";

		ТЗДляВыбораКБК = мКодыКБК2005Раздел1_2;
		КолЗнаков = 20;

		Если НЕ мАвтоВыборКодов Тогда

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(ТекКБК, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;
		КонецЕсли;
		
		Если мАвтоВыборКодов Тогда

			Если НЕ ВвестиСтроку(ТекКБК, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = ТекКБК;
			КонецЕсли;

		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат; // Отказались от выбора, окно закрыто
		КонецЕсли;

		ИтРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));
		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_2",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка.Имя), 20, ИтРезультат);
			Модифицированность = Истина;
		КонецЕсли;
    	
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаДоплФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаДоплФедРаздел12, "Сумма налога к доплате", 15, 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_2","СуммаДоплФед", 15, мСуммаДоплФедРаздел12, Истина);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаУменФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаУменФедРаздел12, "Сумма налога к уменьшению", 15, 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_2","СуммаУменФед", 15, мСуммаУменФедРаздел12, Истина);
			Модифицированность = Истина;
		КонецЕсли;
    КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// Процедура ПолеТабличногоДокументаРаздел1_3Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветАвто;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;
	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);

	Если Найти(Ячейка.Имя,"КодОКАТО")>0 Тогда
		НачЗначение = мКодОКАТОРаздел13;

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_3", "КодОКАТОР3", НачЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено, СтандартнаяОбработка, 11);
		Если Рез.ЗначениеВведено Тогда
			мКодОКАТОРаздел13 = Рез.Значение;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя,"КБК") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		ТекКБК = мКБКРаздел13;
		КодПоСтруктуре = "КБКРаздел13";

		ТЗДляВыбораКБК = мКодыКБК2005Раздел1_3;
		КолЗнаков = 20;

		Если НЕ мАвтоВыборКодов Тогда

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(ТекКБК, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;
		КонецЕсли;
		
		Если мАвтоВыборКодов Тогда

			Если НЕ ВвестиСтроку(ТекКБК, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = ТекКБК;
			КонецЕсли;

		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат; // Отказались от выбора, окно закрыто
		КонецЕсли;

		ИтРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));
		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_3",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка.Имя), 20, ИтРезультат);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "Сумма2ДоплФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаДоплФедРаздел13, "Сумма налога к доплате", 15, 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_3","Сумма2ДоплФед", 15, мСуммаДоплФедРаздел13, Истина);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "Сумма2УменФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаУменФедРаздел13, "Сумма налога к уменьшению", 15, 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел1_3","Сумма2УменФед", 15, мСуммаУменФедРаздел13, Истина);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_3Выбор

// Процедура ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;

	Если Область.Имя = "ПодачаЗаПредПериодДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ПодачаЗаПредПериодНет.Значение = "";
		мПодачаЗаПредПериодРаздел2 = "1";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ПодачаЗаПредПериодНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ПодачаЗаПредПериодДа.Значение = "";
		мПодачаЗаПредПериодРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "НачДеят" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			мНачДеятРаздел2 = "0";
		Иначе
			Область.Значение = "Х";
			мНачДеятРаздел2 = "1";
		КонецЕсли;
			
	ИначеЕсли Область.Имя = "КонДеят" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			мКонДеятРаздел2 = "0";
		Иначе
			Область.Значение = "Х";
			мКонДеятРаздел2 = "1";
		КонецЕсли;
	ИначеЕсли Область.Имя = "ОсДеятвРФДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ОсДеятвРФНет.Значение = "";
		мОсДеятвРФРаздел2 = "1";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ОсДеятвРФНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ОсДеятвРФДа.Значение = "";
		мОсДеятвРФРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ОсДеятвРФПредДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ОсДеятвРФПредНет.Значение = "";
		мОсДеятвРФПредРаздел2 = "1";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ОсДеятвРФПредНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ОсДеятвРФПредДа.Значение = "";
		мОсДеятвРФПредРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Найти(Область.Имя,"КодСтраныСогл")>0 Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиСтроку(мКодСтраныСоглРаздел2, "Введите код", 2) Тогда
			Модифицированность = Истина;
			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мКодСтраныСоглРаздел2) Тогда
				мКодСтраныСоглРаздел2 = РегламентированнаяОтчетность.ДополнитьСтроку(мКодСтраныСоглРаздел2, 2,"0");
			КонецЕсли;

			Для Поз = 1 По 2 Цикл
				Элемент.Области["КодСтраныСогл" + Поз].Значение = Сред(мКодСтраныСоглРаздел2, Поз, 1);
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли Область.Имя = "ТипОрг1" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ТипОрг2.Значение = "";
		мРаздел2.Области.ТипОрг3.Значение = "";
		мТипОргРаздел2 = "331";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ТипОрг2" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ТипОрг1.Значение = "";
		мРаздел2.Области.ТипОрг3.Значение = "";
		мТипОргРаздел2 = "332";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ТипОрг3" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ТипОрг1.Значение = "";
		мРаздел2.Области.ТипОрг2.Значение = "";
		мТипОргРаздел2 = "333";
		Модифицированность = Истина;
	ИначеЕсли Найти(Область.Имя,"КодСтраны")>0 Тогда

		СтандартнаяОбработка = Ложь;

		Если ВвестиСтроку(мКодСтраныРаздел2, "Введите код", 2) Тогда

			Модифицированность = Истина;
			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мКодСтраныРаздел2) Тогда
				мКодСтраныРаздел2 = РегламентированнаяОтчетность.ДополнитьСтроку(мКодСтраныРаздел2, 2,"0");
			КонецЕсли;

			Для Поз = 1 По 2 Цикл
				Элемент.Области["КодСтраны" + Поз].Значение = Сред(мКодСтраныРаздел2, Поз, 1);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000020011000" Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить("I","(I) Государство инкорпорации");
		Список.Добавить("R","(R) Государство постоянного местопребывания");
		Список.Добавить("O","(O) Налоги не уплачиваются ни в одном из государств");
		Список.Добавить("","Пустое значение");
		// выдаем стандартный диалог
		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда
			Область.Значение = СписокЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли ((Найти(Область.Имя, "П000020012002")>0) ИЛИ (Найти(Область.Имя, "П000020012003")>0)) И (НЕ мАвтоВыборКодов)Тогда
		СтандартнаяОбработка = Ложь;
		НСтр = Сред(Область.Имя,15);
		Если (мРаздел2.Области["П000020012003_"+НСтр].Значение = "9999") И (Лев(Область.Имя,13)<>"П000020012003") Тогда
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;
		ТекКод = мРаздел2.Области["П000020012003_"+НСтр].Значение;
		ПоисковаяСтрока = мВидыДеятельности.Найти(ТекКод, "Код");
		Если ПоисковаяСтрока <> Неопределено Тогда
			Результат = мВидыДеятельности.ВыбратьСтроку("Выбор вида деятельности", ПоисковаяСтрока);
		Иначе
			Результат = мВидыДеятельности.ВыбратьСтроку("Выбор вида деятельности");
		КонецЕсли;
		// наименование видов деятельности указывается в столбце 2 только в случае,
		// если в столбце 3 "Код вида деятельности" проставлен код 9999"
		Если Результат <> Неопределено Тогда
			Если Результат[0] <> "9999" Тогда
				мРаздел2.Области["П000020012002_"+НСтр].Значение = "";
				мРаздел2.Области["П000020012003_"+НСтр].Значение = Результат[0];
			Иначе
				мРаздел2.Области["П000020012002_"+НСтр].Значение = Результат[1];
				мРаздел2.Области["П000020012003_"+НСтр].Значение = "9999";
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли (Найти(Область.Имя, "П000020012004")>0) ИЛИ (Найти(Область.Имя, "П000020012005")>0) Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "РОВладИОДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.РОВладИОНет.Значение = "";
		мРОВладИОРаздел2 = "1";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "РОВладИОНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.РОВладИОДа.Значение = "";
		мРОВладИОРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ИОВладРОДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мИОВладРОРаздел2 = "1";
		мРаздел2.Области.ИОВладРОНет.Значение = "";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ИОВладРОНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.ИОВладРОДа.Значение = "";
		мИОВладРОРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "СделкисАссЛицДа" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.СделкисАссЛицНет.Значение = "";
		мСделкисАссЛицРаздел2 = "1";
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "СделкисАссЛицНет" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "Х";
		мРаздел2.Области.СделкисАссЛицДа.Значение = "";
		мСделкисАссЛицРаздел2 = "0";
		Модифицированность = Истина;
	ИначеЕсли Найти(Область.Имя,"ИННРО1_")>0 Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "ИННРО1_", мИННРО1Раздел2, 10, 0, Ложь, "Введите ИНН российской организации", "", Неопределено, Неопределено, СтандартнаяОбработка, 10);
		Если Результат.ЗначениеВведено Тогда
			мИННРО1Раздел2 = Результат.Значение;
		КонецЕсли;
	ИначеЕсли Найти(Область.Имя,"КППРО1_")>0 Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КППРО1_", мКППРО1Раздел2, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка, 9);
		Если Результат.ЗначениеВведено Тогда
			мКППРО1Раздел2 = Результат.Значение;
		КонецЕсли;
	ИначеЕсли Найти(Область.Имя,"ИННРО2_")>0 Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "ИННРО2_", мИННРО2Раздел2, 10, 0, Ложь, "Введите ИНН российской организации", "", Неопределено, Неопределено, СтандартнаяОбработка, 10);
		Если Результат.ЗначениеВведено Тогда
			мИННРО2Раздел2 = Результат.Значение;
		КонецЕсли;
	ИначеЕсли Найти(Область.Имя,"КППРО2_")>0 Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КППРО2_", мКППРО2Раздел2, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка, 9);
		Если Результат.ЗначениеВведено Тогда
			мКППРО2Раздел2 = Результат.Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_3Выбор

// Процедура ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Лев(Область.Имя, 1) = "R") Или (Найти(Область.Имя, "НомСтр") > 0) Тогда

		Возврат;

	КонецЕсли;

	НСтр = Число(Сред(Область.Имя, 9, 3));
	Коло = Прав(Область.Имя, 1);;

	Если (НСтр > 180) И (Коло = "0") Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел3ПриИзменении
// 
Процедура ПолеТабличногоДокументаРаздел3ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел3");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел4ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел4ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел4");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел5ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел5ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел5");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриИзменении

// ПолеТабличногоДокументаРаздел6Выбор
//
Процедура ПолеТабличногоДокументаРаздел6Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел6Выбор

// ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел6ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел6ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел6");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел6ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел7Выбор
//
Процедура ПолеТабличногоДокументаРаздел7Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;
	
	Если (Найти(Ячейка.Имя, "Ставка") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСтавкаРаздел7, "Ставка налога", 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел7","Ставка", 2, мСтавкаРаздел7, Истина, Ложь);
			Модифицированность = Истина;
			РасчетЗависимыхРазделовДекларации("Раздел7");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел7Выбор

// ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел7ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел7ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел7");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел7ПриИзменении

// ПолеТабличногоДокументаРаздел8Выбор
//
Процедура ПолеТабличногоДокументаРаздел8Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел8Выбор

// Процедура ПолеТабличногоДокументаРаздел8ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел8ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел8");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел8ПриИзменении

// ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел9Выбор
//
Процедура ПолеТабличногоДокументаРаздел9Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел9Выбор

// Процедура ПолеТабличногоДокументаРаздел9ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел9ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел9");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел9ПриИзменении

// ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел10Выбор
//
Процедура ПолеТабличногоДокументаРаздел10Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть;

	Если (Найти(Ячейка.Имя, "КолОтд") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мКолОтдРаздел10, "Количество отделений", 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел10","КолОтд", 2, мКолОтдРаздел10, Истина, Ложь);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли (Найти(Ячейка.Имя, "НалФБ") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мНалФБРаздел10, "Ставка налога", 4, 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел10","НалФБ", 5, мНалФБРаздел10);
			РасчетЗависимыхРазделовДекларации("Раздел10");
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли (Найти(Ячейка.Имя, "НалМБ") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мНалМБРаздел10, "Ставка налога", 2) Тогда
			ПроставитьВКвадратыЗначения("Раздел10","НалМБ", 2, мНалМБРаздел10, Истина, Ложь);
			РасчетЗависимыхРазделовДекларации("Раздел10");
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Ячейка.Имя = "П000100004004" Тогда
		// Строка 020. ИНН.
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
		                                                   , "Раздел10"                 // Название раздела.
		                                                   , Ячейка.Имя                  // Имя ячейки для записи.
		                                                   , СокрЛП(Область.Значение)   // Первоначальное значение.
		                                                   , 10                         // РазмерностьЦ - возможная длинна ИННа.
		                                                   , 10                         // РазмерностьД - требуемый тип ввода ИНН.
		                                                   , Ложь                       // Это сумма?
		                                                   , "Введите ИНН"              // Текст ввода.
		                                                   , ""                         // Текст выбора из таблицы значений.
		                                                   , Неопределено               // Таблица выбора значений.
		                                                   , Неопределено               // Строка доп. ввода.
		                                                   , СтандартнаяОбработка       // Стандартная обработка.
		                                                   ,                            // Кол-во квадратиков, если в квадратах
		                                                   ,                            // Колонка поиска, если ТаблицаЗначений
		                                                   ,                            // Структура требований ручного ввода
		                                                   );

	ИначеЕсли Ячейка.Имя = "П000100005004" Тогда
		// Строка 030. КПП.
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
		                                                   , "Раздел10"                // Название раздела.
		                                                   , Ячейка.Имя                // Имя ячейки для записи.
		                                                   , СокрЛП(Область.Значение)  // Первоначальное значение.
		                                                   , 9                         // РазмерностьЦ - возможная длинна КППа.
		                                                   , 0                         // РазмерностьД - требуемый тип ввода ИНН.
		                                                   , Ложь                      // Это сумма?
		                                                   , "Введите КПП"             // Текст ввода.
		                                                   , ""                        // Текст выбора из таблицы значений.
		                                                   , Неопределено              // Таблица выбора значений.
		                                                   , Неопределено              // Строка доп. ввода.
		                                                   , СтандартнаяОбработка      // Стандартная обработка.
		                                                   ,                           // Кол-во квадратиков, если в квадратах
		                                                   ,                           // Колонка поиска, если ТаблицаЗначений
		                                                   ,                           // Структура требований ручного ввода
		                                                   );

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел10Выбор

// ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел10ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел10ПриИзменении(Элемент)

	Расчет("Раздел10");
	Расчет("Раздел1_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел10ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел10_Прил1ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел10_Прил1ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел10_Прил1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел10_Прил1ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел11ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел11ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел11");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел11ПриИзменении

// Процедура ПолеТабличногоДокументаРаздел11_Прил1ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел11_Прил1ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел11_Прил1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил1ПриИзменении

// ПолеТабличногоДокументаРаздел11_Прил2Выбор
//
Процедура ПолеТабличногоДокументаРаздел11_Прил2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил2Выбор

// ПолеТабличногоДокументаРаздел11_Прил2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел11_Прил2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил2ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаРаздел11_Прил2ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел11_Прил2ПриИзменении(Элемент)

	РасчетЗависимыхРазделовДекларации("Раздел11_Прил2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел11_Прил2ПриИзменении

// ПолеТабличногоДокументаРаздел11Выбор
//
Процедура ПолеТабличногоДокументаРаздел11Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел11Выбор

// ПолеТабличногоДокументаРаздел11ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел11ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
КонецПроцедуры // ПолеТабличногоДокументаРаздел11ПриАктивизацииОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)
// проставляет в квадратики необходимые значения
//
Процедура ПроставитьВКвадратыЗначения(Знач Лист, Знач Показатель, Знач Размерность,Знач Значение, ДополнитьЗначение = Ложь, НужноСтавитьЗнакРавенства = Истина) Экспорт

	Раздел = ЭлементыФормы["ПолеТабличногоДокумента" + СтрЗаменить(Лист, "ПолеТабличногоДокумента", "")];

	ПризнакДаты = Ложь;

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;
	Попытка // определим, есть ли дополнительный разряд или нет, ДЛЯ универсальности
		Тест = Раздел     .Области[Показатель + ДопРазряд+"1"].Значение;
	Исключение
		ТестОк = Ложь;
	КонецПопытки;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку("", Размерность," ");

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки) + ?(НужноСтавитьЗнакРавенства, "=", "");
			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ",1);

		КонецЕсли;

		Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;
	Для НомЯчейки = 1 По Размерность Цикл

			Если ПризнакДаты Тогда
				Если (НомЯчейки = 3) Или (НомЯчейки = 5) Тогда
					ДопЗначение = ДопЗначение+1; // перескакиваем точкку
				КонецЕсли;
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки + ДопЗначение, 1);
			Иначе
попытка
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);
исключение
сообщить("ош");
конецпопытки;
			КонецЕсли; // ПризнакДаты
	КонецЦикла;
КонецПроцедуры // ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				// Если многострочность, то специальный механизм
				Если (ЗначениеВКвадратах) И ((ИмяПоказателя = "П000110003000")
				Или (ИмяПоказателя = "П000110004000")
				Или (ИмяПоказателя = "П000110005000")) Тогда // КБК

					Если ИмяПоказателя = "П000110003000" Тогда
						МногострочностьИВариантыЗаполнения("СуммаНалога1_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаНалога2_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаНалога3_1",    ВариантЗаполнения);

					ИначеЕсли ИмяПоказателя = "П000110004000" Тогда
						МногострочностьИВариантыЗаполнения("СуммаНалУм1_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаНалУм2_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаНалУм3_1",    ВариантЗаполнения);

					ИначеЕсли ИмяПоказателя = "П000110005000" Тогда
						МногострочностьИВариантыЗаполнения("СуммаПерех1_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаПерех2_1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаПерех3_1",    ВариантЗаполнения);
					КонецЕсли;

					Продолжить;
				КонецЕсли;

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					СвойстваГрупповыхЗначений(ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// МногострочностьИВариантыЗаполнения
//
Процедура МногострочностьИВариантыЗаполнения(Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;

	Ключ = "_" + ВариантЗаполнения;
	мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

	Если ВариантЗаполнения = 4 Тогда
		Действие1 = "УстановитьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	Иначе
		Действие1 = "СнятьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	КонецЕсли;

	СвойстваГрупповыхЗначений(ПервыйПоказатель, Действие1, , "Раздел1_1");
	СвойстваГрупповыхЗначений(ПервыйПоказатель, Действие2, ЦветФона, "Раздел1_1");

КонецПроцедуры // МногострочностьИВариантыЗаполнения

// Загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2005Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				Если РазделВМакете = "Льготы" Тогда
					// НовСтрока = мНалоговыеЛьготыИмущество.Добавить();
				КонецЕсли;

				Если РазделВМакете = "КодыКБК" Тогда
					НовСтрока = мКодыБюджетнойКлассификации.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_2" Тогда
					НовСтрока = мКодыКБК2005Раздел1_2.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_3" Тогда
					НовСтрока = мКодыКБК2005Раздел1_3.Добавить();
				ИначеЕсли РазделВМакете = "ВидыДеятельности" Тогда
					НовСтрока = мВидыДеятельности.Добавить();
				КонецЕсли;

				НовСтрока.Код = КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло2    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПорядокЗаполнения",        ОписаниеТиповЧисло2);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 16;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 17;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 18;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 3;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 4;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 5;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 7;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 6;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 8;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел 8";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел8";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 11;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9";
	СтрокаУровня1.Представление            = "Раздел 9";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел9";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 12;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10";
	СтрокаУровня1.Представление            = "Раздел 10";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел10";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 9;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Разделу 10";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел10_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 10;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел11";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 15;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Разделу 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел11_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 13;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к Разделу 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел11_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 14;
		
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура возвращает таблицу значений информацией с листов ФизЛица. Строки таблицы
// соответствуют страницам раздела.
//
// Параметры:
//	СтруктураМногостраничныхРазделов - структура, на основании информации из которой
//			следует заполнить строки таблицы-результата. Если параметр не задан, то
//			будет использована аналогичная переменная модуля
//
// Возвращаемое значение:
//	ТаблицаЗначений с информацией из листов раздела ФизЛица
//
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицоФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицоФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицоФИО = СтрДанных.ФизЛицоФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДатаР = СтрДанных.ФизЛицДатаР1 + СтрДанных.ФизЛицДатаР2 + "."
										  + СтрДанных.ФизЛицДатаР3 + СтрДанных.ФизЛицДатаР4 + "."
										  + СтрДанных.ФизЛицДатаР5 + СтрДанных.ФизЛицДатаР6  
										  + СтрДанных.ФизЛицДатаР7 + СтрДанных.ФизЛицДатаР8;
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд1+СтрДанных.ФизЛицКодГражд2+СтрДанных.ФизЛицКодГражд3;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок1 + СтрДанных.ФизЛицДок2;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата1 + СтрДанных.ФизЛицДокДата2 + "."
										  + СтрДанных.ФизЛицДокДата3 + СтрДанных.ФизЛицДокДата4 + "."
										  + СтрДанных.ФизЛицДокДата5 + СтрДанных.ФизЛицДокДата6  
										  + СтрДанных.ФизЛицДокДата7 + СтрДанных.ФизЛицДокДата8;
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд1+СтрДанных.ФизЛицИнд2+СтрДанных.ФизЛицИнд3+СтрДанных.ФизЛицИнд4+СтрДанных.ФизЛицИнд5+СтрДанных.ФизЛицИнд6;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС1 + СтрДанных.ФизЛицС2;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции // ПолучитьДанныеФизЛиц()

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	
	Если БратьИзФормы Тогда
		
		ОбновитьСтруктуруМногострочныхРазделов();

		ОбновитьСтруктуруМногостраничныхРазделов();
		
		ПоказателиОтчета = Новый Структура();

		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
		
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//СтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц( ?(СтруктураМногостраничныхРазделов = Неопределено, мСтруктураМногостраничныхРазделов, СтруктураМногостраничныхРазделов));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	
	ОргИНН = Орг.ИНН;
	ДокПредставляется = 331;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	
	НаимИОПол = ПоказателиТитульный.ИноОргНазв;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	СтрИО = ПоказателиТитульный.ИноСтрана;
	КодСтрИО = ПоказателиТитульный.ИноСтрКод;
	ТелИО = ПоказателиТитульный.ИноКТел;
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргУП = ПоказателиТитульный.ОргУП;
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг);
	Если НЕ ЭтоПБОЮЛ Тогда
		Если РабочаяДата >= '20080101' И ПустаяСтрока(ОргДиректор) И ПустаяСтрока(ОргУП) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН организации!", СтатусСообщения.Важное);
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(НаимИОПол) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано название иностранной организации!", "Титульный", "ИноОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано полное название организации!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН индивидуального предпринимателя!", СтатусСообщения.Важное);
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество физического лица содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = Орг.ИНН;
	ДокПредставляется = 331;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	
	НаимИОПол = Лев(ПоказателиТитульный.ИноОргНазв, 1000);
	ОргНазв = Лев(ПоказателиТитульный.ОргНазв, 1000);
	СтрИО = Лев(ПоказателиТитульный.ИноСтрана, 120);
	КодСтрИО = ПоказателиТитульный.ИноСтрКод;
	ТелИО = Лев(ПоказателиТитульный.ИноКТел, 20);
	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргУП = ПоказателиТитульный.ОргУП;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	Конецпопытки;
	
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	
	ПризнОтчетногоПериода = ПоказателиТитульный.НалогПериод;
	НомерКварталаМесяца = СокрЛП(ПоказателиТитульный.НомКвартал);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг);
	Если НЕ ЭтоПБОЮЛ Тогда
		Текст.ДобавитьСтроку("НаимИОПол:" + ?(ПустаяСтрока(НаимИОПол), "-", ВРег(СокрЛП(СтрЗаменить(НаимИОПол, Символы.ПС, "")))));
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ?(ПустаяСтрока(ОргНазв), "-", ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, "")))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + СокрЛП(ОргИНН));  
		Текст.ДобавитьСтроку("КППЮЛ:" + ?(ПустаяСтрока(ОргКПП), "-", СокрЛП(ОргКПП)));
		Текст.ДобавитьСтроку("СтрИО:" + ?(ПустаяСтрока(СтрИО), "-", ВРЕГ(СокрЛП(СтрИО))));
		Текст.ДобавитьСтроку("КодСтрИО:" + ?(ПустаяСтрока(КодСтрИО), "-", ВРЕГ(СокрЛП(КодСтрИО))));
		Текст.ДобавитьСтроку("ТелИО:" + ?(ПустаяСтрока(ТелИО), "-", ВРЕГ(СокрЛП(Лев(ТелИО, 20)))));
		Текст.ДобавитьСтроку("###");
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
		Текст.ДобавитьСтроку("###");
	Иначе
		Текст.ДобавитьСтроку("НаимИОПол:" + ?(ПустаяСтрока(НаимИОПол), "-", ВРег(СокрЛП(СтрЗаменить(НаимИОПол, Символы.ПС, "")))));
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("СтрИО:" + ?(ПустаяСтрока(СтрИО), "-", ВРЕГ(СокрЛП(СтрИО))));
		Текст.ДобавитьСтроку("КодСтрИО:" + ?(ПустаяСтрока(КодСтрИО), "-", ВРЕГ(СокрЛП(КодСтрИО))));
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00003");
	Текст.ДобавитьСтроку("ПериодВерОтч:04.04.2007,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:"      + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		ОбновитьСтруктуруМногострочныхРазделов();

		// обновляем структуру многостраничных разделов
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		// !!!
		Если ИмяРаздела = "Раздел11" ИЛИ ИмяРаздела = "Раздел11_Прил1" ИЛИ ИмяРаздела = "Раздел11_Прил2" Тогда
			Продолжить;
		КонецЕсли;
		
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку в текст с электронным представлением отчета
// Строка добавляется в формате ИмяПоказателя:ЗначениеПоказателя
// Параметры:
// Текст          - ТекстовыйДокумент, в который требуется добавить строку.
// ЗначениеЯчейки - значение показателя, который следует вывести.
// ИмяЯчейки      - имя показателя, который следует вывести.
// ПризнакФормата - строка с описанием формата показателя
// ФорматВыгрузки - второй параметр функции Формат (для показателей с признаком "Е" и "С")
Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки)
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если РегламентированнаяОтчетность.ПустоеЗначение(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			//Если ЗначениеЯчейки = "0" Тогда
			//	Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			//Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	//*************************************************************************************************************************
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
КонецФункции

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		// !!!
		Если ИмяРаздела = "Раздел11" ИЛИ ИмяРаздела = "Раздел11_Прил1" ИЛИ ИмяРаздела = "Раздел11_Прил2" Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	Замена = Новый Соответствие;
	Замена.Вставить("П000020002000:", Истина);
	Замена.Вставить("П000020003000:", Истина);
	Замена.Вставить("П000030019004:", Истина);
	Замена.Вставить("П000030020004:", Истина);
	Замена.Вставить("П000030021004:", Истина);
	Замена.Вставить("П000030022004:", Истина);
	Замена.Вставить("П000030023004:", Истина);
	Замена.Вставить("П000030024004:", Истина);
	Замена.Вставить("П000030025004:", Истина);
	Замена.Вставить("П000030026004:", Истина);
	Замена.Вставить("П000030027004:", Истина);
	Замена.Вставить("П000030028004:", Истина);
	Замена.Вставить("П000030029004:", Истина);
	Замена.Вставить("П000030030004:", Истина);
	Замена.Вставить("П000030031004:", Истина);
	Замена.Вставить("П000030032004:", Истина);
	Замена.Вставить("П000030033004:", Истина);
	Замена.Вставить("П000030034004:", Истина);
	
	ОбрезаниеСтрок = Новый Соответствие;
	ОбрезаниеСтрок.Вставить("П000020006000", 120);
	ОбрезаниеСтрок.Вставить("П000020009000", 254);
	ОбрезаниеСтрок.Вставить("П000020012002", 120);
	ОбрезаниеСтрок.Вставить("П000020014000", 1000);
	ОбрезаниеСтрок.Вставить("П000020018000", 1000);
	ОбрезаниеСтрок.Вставить("П000030021002", 120);
	ОбрезаниеСтрок.Вставить("П000030026002", 120);
	ОбрезаниеСтрок.Вставить("П000030031002", 120);
	ОбрезаниеСтрок.Вставить("П000030034002", 120);
	ОбрезаниеСтрок.Вставить("П000050037001", 120);
	ОбрезаниеСтрок.Вставить("П000050037002", 1000);
	ОбрезаниеСтрок.Вставить("П000050037003", 25);
	ОбрезаниеСтрок.Вставить("П000060018002", 120);
	ОбрезаниеСтрок.Вставить("П000070033001", 120);
	ОбрезаниеСтрок.Вставить("П000070033002", 1000);
	ОбрезаниеСтрок.Вставить("П000070033003", 25);
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если Замена[ТекСтрока] = Истина Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":0");
		КонецЕсли;
		
		ДлинаСтроки = ОбрезаниеСтрок[Тек13Симв];
		Если ДлинаСтроки <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + ДлинаСтроки)));
		КонецЕсли;
		
		Если Тек13Симв = "П000020012003" Тогда
			КодВидаДеятельности = Сред(ТекСтрока, 15);
			Если СокрЛП(КодВидаДеятельности) = "," Тогда
				Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":");
			ИначеЕсли НЕ ПустаяСтрока(КодВидаДеятельности) Тогда
				Текст.ЗаменитьСтроку(ТекИнд, ТекСтрока + "," + КодВидаДеятельности);
			КонецЕсли;
		КонецЕсли;
		
		Если Тек13Симв = "П000070032001" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СтрЗаменить(Сред(ТекСтрока, 18, 7), ".", ","));
		КонецЕсли;
			
	КонецЦикла;
	
Конецпроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	Модифицированность = Истина;
КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2007Кв1";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мКодыБюджетнойКлассификации = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации.Колонки.Добавить("Код",,,5);
мКодыБюджетнойКлассификации.Колонки.Добавить("Название");

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,,19);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 55);

мКодыБюджетнойКлассификации2006 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Код",,,19);
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Название",,, 55);

мПрибыльКодыВидовПоступлений = Новый ТаблицаЗначений;
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Код",,,9);
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Название",,,55);

мКодыКБК2005Раздел1_2 = Новый ТаблицаЗначений;
мКодыКБК2005Раздел1_2.Колонки.Добавить("Код",,,19);
мКодыКБК2005Раздел1_2.Колонки.Добавить("Название",,,55);

мКодыКБК2005Раздел1_3 = Новый ТаблицаЗначений;
мКодыКБК2005Раздел1_3.Колонки.Добавить("Код",,, 19);
мКодыКБК2005Раздел1_3.Колонки.Добавить("Название",,, 55);

мВидыДеятельности = Новый ТаблицаЗначений;
мВидыДеятельности.Колонки.Добавить("Код",,, 5);
мВидыДеятельности.Колонки.Добавить("Название",,, 60);

// Цвета раскраски автозаполняемых ячеек
ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
ЦветАвто                         = Новый Цвет(0, 0, 0);        // Белый, Ввод запрещен

// Структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Описание типов данных
ОписаниеТиповЧисло172   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);
ОписаниеТиповЧисло6     = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6, 0);
ОписаниеТиповЧисло3     = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3, 0);
ОписаниеТиповСтрока1000 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000);
ОписаниеТиповСтрока120  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120);
ОписаниеТиповСтрока25   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(25);
ОписаниеТиповСтрока13   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(13);
ОписаниеТиповСтрока10   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока9    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока4    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока1    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0000200120"; // Раздел2
мИдГруппы2 = "П0000500370"; // Раздел5
мИдГруппы3 = "П0000600180"; // Раздел6
мИдГруппы4 = "П0000700330"; // Раздел7
мИдГруппы5 = "П0001010010"; // Раздел10_Прил1

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 10;
КолИсхСтрокИдГруппы2 =  9;
КолИсхСтрокИдГруппы3 = 18;
КолИсхСтрокИдГруппы4 =  9;
КолИсхСтрокИдГруппы5 = 10;

// структура строк многострочных разделов
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000020012001", ОписаниеТиповСтрока4);
СтруктураГруппы1.Колонки.Добавить("П000020012002", ОписаниеТиповСтрока120);
СтруктураГруппы1.Колонки.Добавить("П000020012003", ОписаниеТиповСтрока9);
СтруктураГруппы1.Колонки.Добавить("П000020012004", ОписаниеТиповСтрока1);
СтруктураГруппы1.Колонки.Добавить("П000020012005", ОписаниеТиповСтрока1);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000050037001", ОписаниеТиповСтрока120);
СтруктураГруппы2.Колонки.Добавить("П000050037002", ОписаниеТиповСтрока1000);
СтруктураГруппы2.Колонки.Добавить("П000050037003", ОписаниеТиповСтрока25);
СтруктураГруппы2.Колонки.Добавить("П000050037004", ОписаниеТиповДата);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000060018001", ОписаниеТиповСтрока4);
СтруктураГруппы3.Колонки.Добавить("П000060018002", ОписаниеТиповСтрока120);
СтруктураГруппы3.Колонки.Добавить("П000060018003", ОписаниеТиповСтрока13);
СтруктураГруппы3.Колонки.Добавить("П000060018004", ОписаниеТиповЧисло172);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000070033001", ОписаниеТиповСтрока120);
СтруктураГруппы4.Колонки.Добавить("П000070033002", ОписаниеТиповСтрока1000);
СтруктураГруппы4.Колонки.Добавить("П000070033003", ОписаниеТиповСтрока25);
СтруктураГруппы4.Колонки.Добавить("П000070033004", ОписаниеТиповДата);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000101001001", ОписаниеТиповСтрока10);
СтруктураГруппы5.Колонки.Добавить("П000101001002", ОписаниеТиповСтрока9);
СтруктураГруппы5.Колонки.Добавить("П000101001003", ОписаниеТиповЧисло6);
СтруктураГруппы5.Колонки.Добавить("П000101001004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2));
СтруктураГруппы5.Колонки.Добавить("П000101001005", ОписаниеТиповЧисло172);
СтруктураГруппы5.Колонки.Добавить("П000101001006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2));
СтруктураГруппы5.Колонки.Добавить("П000101001007", ОписаниеТиповЧисло172);
СтруктураГруппы5.Колонки.Добавить("П000101001008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2));
СтруктураГруппы5.Колонки.Добавить("П000101001009", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2));

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;


ТаблицаДляМногостраничныхДокСодержащихМногострочность            = Новый ТаблицаЗначений;
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Данные");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.ДанныеДопСтрок     = Неопределено;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц ФизЛица
ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", ТаблицаСтраницыФизЛиц);

// Элемент структуры - данные дополнительных страниц Раздела 5
ТаблицаСтраницыРаздела5 = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел5", ТаблицаСтраницыРаздела5);

// Элемент структуры - данные дополнительных страниц Раздела 6
ТаблицаСтраницыРаздела6 = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел6", ТаблицаСтраницыРаздела6);

// Элемент структуры - данные дополнительных страниц Раздела 7
ТаблицаСтраницыРаздела7 = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел7", ТаблицаСтраницыРаздела7);

// Элемент структуры - данные дополнительных страниц Раздела 10
ТаблицаСтраницыРаздела10 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел10", ТаблицаСтраницыРаздела10);

// Элемент структуры - данные дополнительных страниц Раздела 11
ТаблицаСтраницыРаздела11 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел11", ТаблицаСтраницыРаздела11);

// Элемент структуры - данные дополнительных страниц Раздела 11 Приложения 1
ТаблицаСтраницыРаздела11_Прил1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел11_Прил1", ТаблицаСтраницыРаздела11_Прил1);

// Элемент структуры - данные дополнительных страниц Раздела 11 Приложения 2
ТаблицаСтраницыРаздела11_Прил2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел11_Прил2", ТаблицаСтраницыРаздела11_Прил2);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = 1151038;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1_1");
ОбязРазделов.Добавить("Раздел2");
ОбязРазделов.Добавить("Раздел5");
ОбязРазделов.Добавить("Раздел6");
ОбязРазделов.Добавить("Раздел7");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00003", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151038";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ПРИБЫЛЬ ИНОСТРАННОЙ ОРГАНИЗАЦИИ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

МногострочныеИсключения = Новый СписокЗначений;
МногострочныеИсключения.Добавить("П000110003000");
МногострочныеИсключения.Добавить("П000110004000");
МногострочныеИсключения.Добавить("П000110005000");

РежимОтладки = Ложь;
