////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел21;
Перем мРаздел22;
Перем мРаздел3;
Перем мРаздел4;
Перем мРаздел5;

Перем мВПрограммеИзмененаОрганизация;
Перем мОргКодОКАТО;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Хранят имена многострочных разделов
Перем мИдГруппы0; // Раздел 3
Перем мИдГруппы1; // Раздел 4
Перем мИдГруппы2; // Раздел 5

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

Перем мКодРегионаРаздел5;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

Перем мПорядковыйНомерРаздел1_2;
Перем мПорядковыйНомерРаздел22;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Хранятся переменные для вставки в структуру
Перем мСуммаНалогДоплата;
Перем мСуммаНалогУменьш;

Перем мСуммаНалогаРаздел1_2;

// Переменные для ИННов оставлены, т.к. вводятся без 00, отображаюстя с ведущими 00, а для выгрузки без 00.
Перем мИННРаздел12;
Перем мИННРаздел22;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

// Список КБК для выбора
Перем мКБК2005;
Перем мКБК2006;

Перем мНдсОперацииРаздел4;
Перем мНдсОперацииРаздел5;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

// Возводится в Истина, при печати, по окончании печати, возвращается в Ложь.
Перем мРежимПечати;

Перем мОписаниеТиповБулево;

Перем мБезОткрытияФормы;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

	Если ИмяТекущейСтраницыПанели <> Неопределено Тогда

		Если (ИмяТекущейСтраницыПанели = "Раздел1_2") Или (ИмяТекущейСтраницыПанели = "Раздел22") Тогда
			ПерепроставитьПорядковыеНомера();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	// Обеспечим синхронность страниц раздела 1_2 и 2-2
	Если (ТекущаяСтраницаПанели = "Раздел1_2") Или (ТекущаяСтраницаПанели = "Раздел22") Тогда

		АльтернативнаяСтраница = ?(ТекущаяСтраницаПанели = "Раздел22", "Раздел1_2", "Раздел22");
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ТекущаяСтраницаПанели, ТаблицаСтраницРаздела);
		АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		АктивнаяСтраницаВИнд = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
		ПоказатьСтраницуМногостраничногоРаздела(АктивнаяСтраницаВИнд, АльтернативнаяСтраница, Истина);

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		ПерепроставитьПорядковыеНомера();
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры // Очистить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("ПерестановкаСтраницЗапрещена", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000120000200";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000220001000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_АдресДляПользователя";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ШиринаСтрокиМногострочнойЧасти"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Определяет, из скольких строк состоит строчка многострочного раздела
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НазваниеМногострочнаяЧасть", ОписаниеТиповСтрока254); // Определяет, из скольких строк состоит строчка многострочного раздела

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел3";
	НовСтр.мИдГруппы                = мИдГруппы0;
	НовСтр.РазмерПоОсиХ             = 40;
	НовСтр.РазмерПоОсиУ             = 46;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 10; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 41; // Строчка по У

	НовСтр.НомерГраницыСтр          = 1;
	НовСтр.ОсновнаяЧастьУСтр        = 43;

	НовСтр.ШиринаСтрокиМногострочнойЧасти = 4;
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел4";
	НовСтр.мИдГруппы                = мИдГруппы1;
	НовСтр.РазмерПоОсиХ             = 39;
	НовСтр.РазмерПоОсиУ             = 44;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 8; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 39; // Строчка по У

	НовСтр.НомерГраницыСтр          = 1;
	НовСтр.ОсновнаяЧастьУСтр        = 41;

	НовСтр.ШиринаСтрокиМногострочнойЧасти = 0;
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел5";
	НовСтр.мИдГруппы                = мИдГруппы2;
	НовСтр.РазмерПоОсиХ             = 59;
	НовСтр.РазмерПоОсиУ             = 64;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 7; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 59; // Строчка по У

	НовСтр.НомерГраницыСтр          = 1;
	НовСтр.ОсновнаяЧастьУСтр        = 61;

	НовСтр.ШиринаСтрокиМногострочнойЧасти = 2;
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы0 Тогда
		ТекТабличноеПоле = мРаздел3;
	ИначеЕсли ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел4;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел5;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел3 Тогда
		ИдГруппы = мИдГруппы0;
	ИначеЕсли ТекТабличноеПоле = мРаздел4 Тогда
		ИдГруппы = мИдГруппы1;
	ИначеЕсли ТекТабличноеПоле = мРаздел5 Тогда
		ИдГруппы = мИдГруппы2;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = мИдГруппы0;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = мИдГруппы2;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел3" Тогда
		СтруктураГруппы0 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы0, СтруктураГруппы0);
	КонецЕсли;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел3"
		   И Найти(ИмяПоказателя, "П000030001005") > 0 Тогда
			НомерСтроки = Сред(ИмяПоказателя, 15);
			ЗначениеПоказателя = СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005;
		КонецЕсли;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1_1" Тогда
		СтруктураДанныхПоля.Вставить("СуммаНалогДоплата", мСуммаНалогДоплата);
		СтруктураДанныхПоля.Вставить("СуммаНалогУменьш", мСуммаНалогУменьш);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1_2" Тогда
		СтруктураДанныхПоля.Вставить("СуммаНалогаРаздел1_2", мСуммаНалогаРаздел1_2);
		СтруктураДанныхПоля.Вставить("ИННРаздел12ДляВыгрузки", мИННРаздел12);
		СтруктураДанныхПоля.Вставить("ПорядковыйНомерРаздел1_2", мПорядковыйНомерРаздел1_2);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел22" Тогда

		СтруктураДанныхПоля.Вставить("ИННРаздел22ДляВыгрузки", мИННРаздел22);
		СтруктураДанныхПоля.Вставить("ПорядковыйНомерРаздел22", мПорядковыйНомерРаздел22);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел5" Тогда

		Адрес1 = СобратьАдресИзТабличногоПоля("БезТекстаРегиона");
		Адрес2 = СобратьАдресИзТабличногоПоля("СТекстомРегиона");
		СтруктураДанныхПоля.Вставить("_АдресРаздел5", Адрес1);
		СтруктураДанныхПоля.Вставить("_АдресДляПользователя", РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адрес2));
		СтруктураДанныхПоля.Вставить("КодРегионаРаздел5",мКодРегионаРаздел5);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// СобратьАдресИзТабличногоПоля
//
Функция СобратьАдресИзТабличногоПоля(Знач Парам)

	ПочтИндекс = "";

	Для Инд = 1 По 6 Цикл
		ПочтИндекс = ПочтИндекс + мРаздел5.Области["ПочтИндекс" + Строка(Инд)].Значение;
	КонецЦикла;

	//СубъектРФ = мРаздел5.Области.КодРегион1.Значение + мРаздел5.Области.КодРегион2.Значение;
	СубъектРФ = мКодРегионаРаздел5;
	ТекстРегиона = мРаздел5.Области.СубъектРФ.Значение;
	Район     = мРаздел5.Области.Район.Значение;
	Город     = мРаздел5.Области.Город.Значение;
	НП        = мРаздел5.Области.НаселенныйПункт.Значение;
	Улица     = мРаздел5.Области.Улица.Значение;
	Дома      = мРаздел5.Области.НомерДома.Значение;
	Корпус    = мРаздел5.Области.НомерСтроения.Значение;
	Квартира  = мРаздел5.Области.НомерКвартиры.Значение;

	АдресРезультат = "643," + СокрЛП(ПочтИндекс) + ","
	                + СокрЛП(СубъектРФ) + ","

	+ ?(Парам = "СТекстомРегиона", ТекстРегиона, "")

	                + СокрЛП(Район) + ","
	                + СокрЛП(Город) + ","
	                + СокрЛП(НП) + ","
	                + СокрЛП(Улица) + ","
	                + СокрЛП(Дома) + ","
	                + СокрЛП(Корпус) + ","
	                + СокрЛП(Квартира);

	Возврат АдресРезультат;

КонецФункции // СобратьАдресИзТабличногоПоля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1_1" Тогда

		мСуммаНалогДоплата = 0;
		мСуммаНалогУменьш = 0;

	ИначеЕсли Страница = "Раздел1_2" Тогда

		мСуммаНалогаРаздел1_2 = 0;
		мИННРаздел12 = "";
		мПорядковыйНомерРаздел1_2 = 1;

	ИначеЕсли Страница = "Раздел22" Тогда
		мИННРаздел22 = "";
		мПорядковыйНомерРаздел22 = 1;
	ИначеЕсли Страница = "Раздел5" Тогда
		мКодРегионаРаздел5 = "";
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1_1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаНалогДоплата", 15, мСуммаНалогДоплата, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаНалогУменьш", 15, мСуммаНалогУменьш, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_2" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","СуммаНалога", 15, мСуммаНалогаРаздел1_2, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;

			// не нужно обновлять колонку адреса, т.к. в этом случае из Табл. поля запишется в таблицу
			// данные по представлению адреса, а не для выгрузки.

			Если ИмяКолонки = "П000030001005" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц Тогда

		мТитульный.Области.НалогПериод.Значение = "1";

		мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 1, 1);
		мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 2, 1);

	Иначе

		мТитульный.Области.НалогПериод.Значение = "3";

		мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
		мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

	КонецЕсли;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	// Период в заголовке отчета
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);

КонецПроцедуры // ПоказатьПериод()

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиИП      = "";

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	Если РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = "        ";
	Иначе
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = "        ";
	Иначе
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	ДатаПодписиИП  = ?(ЧП, ДатаПодписи, "        ");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиИП,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		мРаздел1_1.Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_1.Области["ДатаПодписи2_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_1.Области["ДатаПодписи3_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиИП,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		//мРаздел1_2.Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		//мРаздел1_2.Области["ДатаПодписи2_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		//мРаздел1_2.Области["ДатаПодписи3_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиИП,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	Если ЧП Тогда
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        ", "ДатаПодписи1_",, "Раздел1_2",, Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        ", "ДатаПодписи2_",, "Раздел1_2",, Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "ДатаПодписи3_",, "Раздел1_2",, Ложь);
	Иначе
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), "ДатаПодписи1_",, "Раздел1_2",, Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), "ДатаПодписи2_",, "Раздел1_2",, Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        ", "ДатаПодписи3_",, "Раздел1_2",, Ложь);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОГРН, ОКАТО, КодНО, НаимНО, ТипНП, ТелОрганизации, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух, ФИО";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "КодОКАТОРаздел1_", 11, Результат.ОКАТО);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			Если КодПоказателяПоСтруктуре = "СуммаНалогДоплата" Тогда
				Показатель =                "СуммаНалогДоплата";
				Раздел = "Раздел1_1";
				Значение = мСуммаНалогДоплата;
			КонецЕсли;

			Если КодПоказателяПоСтруктуре = "СуммаНалогУменьш" Тогда
				Показатель =                "СуммаНалогУменьш";
				Раздел = "Раздел1_1";
				Значение = мСуммаНалогУменьш;
			КонецЕсли;

			Если КодПоказателяПоСтруктуре = "СуммаНалогаРаздел1_2" Тогда
				Показатель =                "СуммаНалога";
				Раздел = "Раздел1_2";
				Значение = мСуммаНалогаРаздел1_2;
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел, Показатель, 15, Значение, Истина);

		КонецЕсли;


		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;

			Иначе

				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

	//// определяем вставляемую область
	//ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	//// добавляем в таблицу новую строку
	//ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     2, НомерНижнЯчейкиОбласти,     2);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,2, НомерНижнЯчейкиНовойОбласти,2);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// СпециальногоУдаленияСтроки
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
	Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
	Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
	Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	НазваниеМногострочнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НазваниеМногострочнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	//возврат;
	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		Область.Объединить();
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			Область.Объединить();
		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// КонецСпециального режима удаления

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Верх + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,47,, 500);
	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел4" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,45,, 500);
	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел5" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,65,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	// Восстановим координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области.ПравоеПрисоединение.Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
		МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(16, , 43,);
		МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(16, 39, 19, 39);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;
		КонецЕсли;

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел4" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области.ПравоеПрисоединение.Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
		МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(19, , 26,);
		МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел5" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области.ПравоеПрисоединение.Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
		МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(25, , 32,);
		МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(25, 58, 26, 58);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	// сохраним имеющиеся настройки правой присоединяющейся части (((

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
	Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
	Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
	Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти, РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		Область.Объединить();
		Область.Имя = ФормаКНД;
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			ТекТабличноеПоле.Области[Страница].Имя = "";
			Область.Объединить();
			Область.Имя = Страница;
		КонецЕсли;

	КонецЕсли;

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Верх + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,47,, 500);
	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел4" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,45,, 500);
	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел5" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,65,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ПравПрисоед = "ПравоеПрисоединение" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
	//Восстановим
	Если ТекТабличноеПоле.Области.Найти(ПравПрисоед) <> Неопределено Тогда
		ТекТабличноеПоле.Области[ПравПрисоед].Имя = "";
	КонецЕсли;

	СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
	СледующаяЧасть.Имя = ПравПрисоед;

КонецПроцедуры // СпециальногоДобавленияСтроки

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	//Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
	//	Сообщить("Нельзя удалять не добавленные строки");
	//	Возврат;
	//КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Запустим единую процедуру удаляющая строку по специальному алгоритму
		// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
		СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

//		// Определим область удаляемой строки
//		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

//		// непосредственно удаляем область строки табличного документа
//		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";

				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	// Включим видимость флажка проверки, по умолчанию - выключено.
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// ОШИБКА
	// Процедура ПоказатьСтраницуМногостраничногоРаздела.
	// Перед ней не нужно убирать у всех признак Активная Страница
	
	// ТаблицаСтраницРаздела.ЗаполнитьЗначения(Ложь, "АктивнаяСтраница");
	// ТаблицаСтраницРаздела.Получить(ИсходныйИндекс).АктивнаяСтраница = Истина;
	
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

	// В режиме печати, не показываем листы парой, т.к. в этом нет необходимости.
	// Не нужно этот код убирать!
	Если НЕ мРежимПечати Тогда
		// Обеспечим показ альтернативной страницы, с учетом связки разделов 1.2 и 2.2
		// Важно для процедуры роАктивизироватьЯчейку.

		Если (ИмяТекущейСтраницыПанели = "Раздел1_2") Или (ИмяТекущейСтраницыПанели = "Раздел22") Тогда
			АльтернативнаяСтраница = ?(ИмяТекущейСтраницыПанели = "Раздел22", "Раздел1_2", "Раздел22");
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, АльтернативнаяСтраница, ПоказатьПоИндексу);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

			//// определяем вставляемую область
			//ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			//// добавляем в таблицу новую строку
			//ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				Если ИмяГруппы = мИдГруппы0 И КолонкаТаблицы.Имя = "П000030001005" Тогда
					ЗначениеЯчейки = ПредставлениеАдресаВФормате9ЗапятыхБезКодаСтраны(ЗначениеЯчейки);
				КонецЕсли;

				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

				// Обеспечим маску ввода ИННа 10 символов.
				Если Найти(ОбластьЯчейкиТаблицы.Имя, "П000030001003") > 0 Тогда
					ОбластьЯчейкиТаблицы.ЭлементУправления.Маска = "9999999999";
				КонецЕсли;

				// Обеспечим маску ввода КПП 9 символов.
				Если Найти(ОбластьЯчейкиТаблицы.Имя, "П000030001004") > 0 Тогда
					ОбластьЯчейкиТаблицы.ЭлементУправления.Маска = "999999999";
				КонецЕсли;

				// Обеспечим маску ввода кода в разделе 4, колонка 1
				Если Найти(ОбластьЯчейкиТаблицы.Имя, "П000040001001") > 0 Тогда
					ОбластьЯчейкиТаблицы.ЭлементУправления.Маска = "9999999";
				КонецЕсли;

				// Обеспечим маску ввода для года в разделе 5, колонка 1.
				Если Найти(ОбластьЯчейкиТаблицы.Имя, "П000050002001") > 0 Тогда
					ОбластьЯчейкиТаблицы.ЭлементУправления.Маска = "9999";
				КонецЕсли;

				// Обеспечим маску ввода для кода в разделе 5, колонка 2.
				Если Найти(ОбластьЯчейкиТаблицы.Имя, "П000050002002") > 0 Тогда
					ОбластьЯчейкиТаблицы.ЭлементУправления.Маска = "9999999";
				КонецЕсли;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле) Экспорт

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

				//// Определим область удаляемой строки
				//УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				//// непосредственно удаляем область строки табличного документа
				//ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если ИмяГруппыДопСтрок = мИдГруппы0 Тогда
		СтруктураГруппы0 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы0, СтруктураГруппы0);
	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ИмяГруппыДопСтрок = мИдГруппы0 Тогда
			Если Найти(ТекущаяОбласть.Имя, "П000030001005") > 0 Тогда
				// Непосредственно очистим адрес в таблице многострочной группы, т.к.
				// в процедуре обновить адрес из табличного поля не будет переходить в таблицу.

				НомерСтроки = Сред(ТекущаяОбласть.Имя, 15);
				СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005 = "";
			КонецЕсли;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);
	ЗаполнениеЗначенийВКвадратиках(ИмяСтраницыПанели);

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// Не должно загружаться, дерево инициализируется при восстановлении и при открытии
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	// При печати, расчет выполнятся не должен при любых обстоятельствах, для всех листов.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, мБезОткрытияФормы);
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции // Сохранить()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий				 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ТаблПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		// По умолчанию выключим процедуры проверки.
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// Пропутим всегда 5-ю колонку 3- го раздела, Адрес, т.к. ее вывели в процедуре 
			// вывода блока многострочных частей.
			Если Найти(ИмяПоказателя, "П000030001005") > 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Выводим дату подписания отчета
	// ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "СуммаНалогДоплата" Тогда
		мСуммаНалогДоплата = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалогУменьш" Тогда
		мСуммаНалогУменьш = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалогаРаздел1_2" Тогда
		мСуммаНалогаРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРаздел12ДляВыгрузки" Тогда
		мИННРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРаздел22ДляВыгрузки" Тогда
		мИННРаздел22 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодРегионаРаздел5" Тогда
		мКодРегионаРаздел5 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ПорядковыйНомерРаздел1_2" Тогда
		мПорядковыйНомерРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ПорядковыйНомерРаздел22" Тогда
		мПорядковыйНомерРаздел22 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// ВзаимныеПереходыПозиций
//
Процедура ВзаимныеПереходыПозиций(ОбластьИмя)

	// Взаимные переходы
	Если ОбластьИмя = "П000210014004" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210014006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210014004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210015004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210014006" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210015004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210015006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210016004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210015004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210017006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210016006" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210017006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210017006" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210018006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210025004" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210026004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210026004" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210027004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210027004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210031004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210027004" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210028004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210032004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210032004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210032004" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210033004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210034004" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210034004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220012006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220013004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220012004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220013004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220012004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220012006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220013004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220014004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220013006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220014004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220014004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220015004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220014006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220015004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220015004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220016004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220015006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220016004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220016004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220017004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220016006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220017004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220017004" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220018004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220017006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220018004", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001007_4" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001008_4", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001007_4" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_5", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001007_5" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_5", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001007_5" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_6", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001008_4" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_5", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000030001008_5" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_6", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002010_1" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_2", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002010_2" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_3", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002010_3" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_4", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002011_1" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_2", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002011_2" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_3", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000050002011_3" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000050002001_4", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040002004" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040003000" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040001004_8" Тогда
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_9") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_9", ОбластьИмя);
		КонецЕсли;
	ИначеЕсли ОбластьИмя = "П000040001004_9" Тогда
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_10") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_11", ОбластьИмя);
		КонецЕсли;
	ИначеЕсли ОбластьИмя = "П000040001004_10" Тогда
		// Определим, есть ли строка 11
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_11") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_11", ОбластьИмя);
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000040001004_11" Тогда
		// Определим, есть ли строка 12
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_12") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_12", ОбластьИмя);
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000040001004_12" Тогда
		// Определим, есть ли строка 13
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_13") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_13", ОбластьИмя);
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000040001004_13" Тогда
		// Определим, есть ли строка 14
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_14") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_14", ОбластьИмя);
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000040001004_14" Тогда
		// Определим, есть ли строка 15
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_15") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_15", ОбластьИмя);
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000040001004_15" Тогда
		// Определим, есть ли строка 16
		ДалееСтрокиНет = ?(мРаздел4.Области.Найти("П000040001004_16") = Неопределено, Истина, Ложь);
		Если ДалееСтрокиНет Тогда
			Если ФлажокОтклАвтоРасчет Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040002002", ОбластьИмя);
			Иначе
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040003000", ОбластьИмя);
			КонецЕсли;
		Иначе
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040001001_16", ОбластьИмя);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВзаимныеПереходыПозиций

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Перем СтруктураГруппы0;
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы2;

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы0, СтруктураГруппы0);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		мСуммаНалогаРаздел1_2 = мРаздел22.Области.П000220019006.Значение;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаНалога", 15, мСуммаНалогаРаздел1_2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		// Расчет показателей Раздела 2

		ОкрП000210001004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001004.Значение);
		ОкрП000210001006 = ОкруглитьЧислоПоФормату(ОкрП000210001004 * 20/100);
		мРаздел21.Области.П000210001006.Значение = ОкрП000210001006;

		ОкрП000210002004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210002004.Значение);
		ОкрП000210002006 = ОкруглитьЧислоПоФормату(ОкрП000210002004 * 18/100);
		мРаздел21.Области.П000210002006.Значение = ОкрП000210002006;

		// Строка 030
		ОкрП000210003004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210003004.Значение);
		ОкрП000210003006 = ОкруглитьЧислоПоФормату(ОкрП000210003004 * 10/100);
		мРаздел21.Области.П000210003006.Значение = ОкрП000210003006;

		// Строка 040
		ОкрП000210004004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210004004.Значение);
		ОкрП000210004006 = ОкруглитьЧислоПоФормату(ОкрП000210004004 * 20/120);
		мРаздел21.Области.П000210004006.Значение = ОкрП000210004006;

		// Строка 050
		ОкрП000210005004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210005004.Значение);
		ОкрП000210005006 = ОкруглитьЧислоПоФормату(ОкрП000210005004 * 18/118);
		мРаздел21.Области.П000210005006.Значение = ОкрП000210005006;

		// Строка 060
		ОкрП000210006004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210006004.Значение);
		ОкрП000210006006 = ОкруглитьЧислоПоФормату(ОкрП000210006004 * 10/110);
		мРаздел21.Области.П000210006006.Значение = ОкрП000210006006;

		//**************************************

		// Строка 090
		ОкрП000210009004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210009004.Значение);
		ОкрП000210009006 = ОкруглитьЧислоПоФормату(ОкрП000210009004 * 18/100);
		мРаздел21.Области.П000210009006.Значение = ОкрП000210009006;

		// Строка 100
		ОкрП000210010004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210010004.Значение);
		ОкрП000210010006 = ОкруглитьЧислоПоФормату(ОкрП000210010004 * 10/100);
		мРаздел21.Области.П000210010006.Значение = ОкрП000210010006;

		// Строка 110
		ОкрП000210011004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210011004.Значение);
		ОкрП000210011006 = ОкруглитьЧислоПоФормату(ОкрП000210011004 * 18/100);
		мРаздел21.Области.П000210011006.Значение = ОкрП000210011006;

		// Строка 120
		ОкрП000210012004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210012004.Значение);
		ОкрП000210012006 = ОкруглитьЧислоПоФормату(ОкрП000210012004 * 18/118);
		мРаздел21.Области.П000210012006.Значение = ОкрП000210012006;

		// Строка 130
		ОкрП000210013004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210013004.Значение);
		ОкрП000210013006 = ОкруглитьЧислоПоФормату(ОкрП000210013004 * 10/110);
		мРаздел21.Области.П000210013006.Значение = ОкрП000210013006;

		// Строка 140
		ОкрП000210014004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210014004.Значение);
		ОкрП000210014006 = ОкруглитьЧислоПоФормату(ОкрП000210014004 * 18/118);
		мРаздел21.Области.П000210014006.Значение = ОкрП000210014006;

		// Строка 150
		ОкрП000210015004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210015004.Значение);
		ОкрП000210015006 = ОкруглитьЧислоПоФормату(ОкрП000210015004 * 10/110);
		мРаздел21.Области.П000210015006.Значение = ОкрП000210015006;

		ОкрП000210008004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210008004.Значение);
		ОкрП000210008006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210008006.Значение);
		ОкрП000210009004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210009004.Значение);
		ОкрП000210010004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210010004.Значение);
		ОкрП000210011004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210011004.Значение);
		ОкрП000210012004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210012004.Значение);
		ОкрП000210013004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210013004.Значение);
		ОкрП000210014004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210014004.Значение);
		ОкрП000210015004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210015004.Значение);

		мРаздел21.Области.П000210016004.Значение = ОкрП000210001004
		                                          + ОкрП000210002004
		                                          + ОкрП000210003004
		                                          + ОкрП000210004004
		                                          + ОкрП000210005004
		                                          + ОкрП000210006004

		                                          + ОкрП000210008004
		                                          + ОкрП000210009004
		                                          + ОкрП000210010004
		                                          + ОкрП000210011004
		                                          + ОкрП000210012004
		                                          + ОкрП000210013004
		                                          + ОкрП000210014004
		                                          + ОкрП000210015004;

		мРаздел21.Области.П000210016006.Значение = ОкрП000210001006
		                                        + ОкрП000210002006
		                                        + ОкрП000210003006
		                                        + ОкрП000210004006
		                                        + ОкрП000210005006
		                                        + ОкрП000210006006

		                                        + ОкрП000210008006
		                                        + ОкрП000210009006
		                                        + ОкрП000210010006
		                                        + ОкрП000210011006
		                                        + ОкрП000210012006
		                                        + ОкрП000210013006
		                                        + ОкрП000210014006
		                                        + ОкрП000210015006;

		ОкрП000210016006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210016006.Значение);
		ОкрП000210017006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210017006.Значение);

		мРаздел21.Области.П000210018006.Значение = ОкрП000210016006 + ОкрП000210017006;

		// Лист 2 раздела 2

		// Строка 190
		// ОкрП000210019004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210020004.Значение);
		//мРаздел21.Области.П000210019004.Значение = ОкрП000210019004;

		// Строка 240
		//мРаздел21.Области.П000210024004.Значение = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210022004.Значение) - ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210023004.Значение);

		// Строка 260. В соответствии с инструкцией, показатель по стр. 260 должен быть равен стр. 030 всех экземпляров раздела 1.2.
		// В раздел 1.2 в стр. 030 сумма попадает из расчета раздела 2.2.
		ЗаполнитьПоказательПоСтроке260Раздела21();

		// Строка 280
		мРаздел21.Области.П000210028004.Значение = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210019004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210021004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210022004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210025004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210026004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210027004.Значение);

		// Лист 3 раздела 2

		// Строка 290
		мРаздел21.Области.П000210029004.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210018006.Значение) - ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210028004.Значение), 0);

		// Строка 300
		мРаздел21.Области.П000210030004.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210028004.Значение) - ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210018006.Значение), 0);

		ОбщаяСуммаНДС = (мРаздел21.Области.П000210029004.Значение + мРаздел21.Области.П000210031004.Значение)
					  - (мРаздел21.Области.П000210030004.Значение + ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210032004.Значение));

		мРаздел21.Области.П000210033004.Значение = Макс(ОбщаяСуммаНДС, 0);
		мРаздел21.Области.П000210034004.Значение = Макс(-ОбщаяСуммаНДС, 0);

		// Сразу переносим данные в раздел 1.1
		СуммаНалогаКУплате     = мРаздел21.Области.П000210033004.Значение;
		СуммаНалогаКУменьшению = мРаздел21.Области.П000210034004.Значение;

		П000110003000 = Макс(СуммаНалогаКУплате     - СуммаНалогаКУменьшению, 0);
		мСуммаНалогДоплата = П000110003000;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаНалогДоплата", 15, мСуммаНалогДоплата, Истина);

		П000110004000 = Макс(СуммаНалогаКУменьшению - СуммаНалогаКУплате,     0);
		мСуммаНалогУменьш = П000110004000;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаНалогУменьш", 15, мСуммаНалогУменьш, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда

		ОкрП000220004004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220004004.Значение);
		мРаздел22.Области.П000220004006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220004004 * 18/118);

		ОкрП000220005004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220005004.Значение);
		мРаздел22.Области.П000220005006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220005004 * 10/110);

		ОкрП000220006004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220006004.Значение);
		мРаздел22.Области.П000220006006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220006004 * 18/118);

		ОкрП000220007004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220007004.Значение);
		мРаздел22.Области.П000220007006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220007004 * 10/110);

		ОкрП000220008004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220008004.Значение);
		мРаздел22.Области.П000220008006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220008004 * 18/118);

		ОкрП000220009004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220009004.Значение);
		мРаздел22.Области.П000220009006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220009004 * 18/118);

		ОкрП000220010004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение);
		мРаздел22.Области.П000220010006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220010004 * 20/100);

		ОкрП000220011004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220011004.Значение);
		мРаздел22.Области.П000220011006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220011004 * 18/100);

		ОкрП000220012004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220012004.Значение);
		мРаздел22.Области.П000220012006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220012004 * 10/100);

		ОкрП000220013004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220013004.Значение);
		мРаздел22.Области.П000220013006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220013004 * 18/118);

		ОкрП000220014004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220014004.Значение);
		мРаздел22.Области.П000220014006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220014004 * 10/110);

		ОкрП000220015004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220015004.Значение);
		мРаздел22.Области.П000220015006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220015004 * 18/100);

		ОкрП000220016004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220016004.Значение);
		мРаздел22.Области.П000220016006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220016004 * 10/100);

		ОкрП000220017004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220017004.Значение);
		мРаздел22.Области.П000220017006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220017004 * 18/118);

		ОкрП000220018004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220018004.Значение);
		мРаздел22.Области.П000220018006.Значение = ОкруглитьЧислоПоФормату(ОкрП000220018004 * 10/110);

		мРаздел22.Области.П000220019004.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220004004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220005004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220006004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220007004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220008004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220009004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220011004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220012004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220013004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220014004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220015004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220016004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220017004.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220018004.Значение);

		мРаздел22.Области.П000220019006.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220004006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220005006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220006006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220007006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220008006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220009006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220011006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220012006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220013006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220014006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220015006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220016006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220017006.Значение)
		                                         + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220018006.Значение);

		мСуммаНалогаРаздел1_2 = мРаздел22.Области.П000220019006.Значение;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаНалога", 15, мСуммаНалогаРаздел1_2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		Итог60 = 0;
		Итог70 = 0;
		Итог80 = 0;

		Счетчик = 0;
		Для Каждого Стр Из СтруктураГруппы0 Цикл
			Счетчик = Счетчик + 1;
			Итог60 = Итог60 + ОкруглитьЧислоПоФормату(Стр.П000030001006);
			Итог70 = Итог70 + ОкруглитьЧислоПоФормату(Стр.П000030001007);

			Стр.П000030001008 = ОкруглитьЧислоПоФормату(мРаздел3.Области["П000030001006_" + Строка(Счетчик)].Значение)
			   - ОкруглитьЧислоПоФормату(мРаздел3.Области["П000030001007_" + Строка(Счетчик)].Значение);
			мРаздел3.Области["П000030001008_" + Строка(Счетчик)].Значение = Стр.П000030001008;

			Итог80 = Итог80 + ОкруглитьЧислоПоФормату(Стр.П000030001008);
		КонецЦикла;

		мРаздел3.Области.П000030002006.Значение = Итог60;
		мРаздел3.Области.П000030002007.Значение = Итог70;
		мРаздел3.Области.П000030002008.Значение = Итог80;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда

		//// Расчет показателей Раздела 4

		Итог20 = 0;
		Итог30 = 0;
		Итог40 = 0;

		Для Каждого Стр Из СтруктураГруппы1 Цикл
			Итог20 = Итог20 + ОкруглитьЧислоПоФормату(Стр.П000040001002);
			Итог30 = Итог30 + ОкруглитьЧислоПоФормату(Стр.П000040001003);
			Итог40 = Итог40 + ОкруглитьЧислоПоФормату(Стр.П000040001004);
		КонецЦикла;

		мРаздел4.Области.П000040002002.Значение = Итог20;
		мРаздел4.Области.П000040002003.Значение = Итог30;
		мРаздел4.Области.П000040002004.Значение = Итог40;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда

		// Для данного раздела Расчет показателей не предусмотрен.
		//
		Итог = 0;
		Инд = 1;
		Для Каждого Стр Из СтруктураГруппы2 Цикл
			Если НЕ ЗначениеЗаполнено(Стр.П000050002008) Тогда
				мРаздел5.Области["П000050002009_" + Строка(Инд)].Значение = 0;
				мРаздел5.Области["П000050002010_" + Строка(Инд)].Значение = 0;
				мРаздел5.Области["П000050002011_" + Строка(Инд)].Значение = 0;
			Иначе
				Итог = ОкруглитьЧислоПоФормату(Стр.П000050002007 * 1/10);
				мРаздел5.Области["П000050002009_" + Строка(Инд)].Значение = Итог;
            КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы

		Расчет("Раздел5");
		Расчет("Раздел4");
		Расчет("Раздел3");
		Расчет("Раздел22");
		Расчет("Раздел21");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;
	
	//ИнициализацияСоставаПоказателей();//

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	ФормироватьСтруктуруСвойствСтраниц();

	// При печати, расчет выполнятся не должен при любых обстоятельствах.
	мРежимПечати = Ложь;

	мСтараяВерсияФормы = мВерсияФормы;

	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел21  = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;
	мРаздел22  = ЭлементыФормы.ПолеТабличногоДокументаРаздел22;
	мРаздел3   = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4   = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мРаздел5   = ЭлементыФормы.ПолеТабличногоДокументаРаздел5;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мБезОткрытияФормы = БезОткрытияФормы;

	Если НЕ БезОткрытияФормы Тогда
		ЗагрузитьПоказателиИзМакета("КБК2005");
		ЗагрузитьПоказателиИзМакета("КБК2006");

		ЗагрузитьПоказателиИзМакета("НдсОперацииРаздел4");
		ЗагрузитьПоказателиИзМакета("НдсОперацииРаздел5");

		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

		// Маски на года.
		мРаздел5.Области.П000050001910.ЭлементУправления.Маска = "9999";
		мРаздел5.Области.П000050001900.ЭлементУправления.Маска = "9999";
		мРаздел5.Области.П000050000100.ЭлементУправления.Маска = "9999";

	КонецЕсли;

	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;

						// Обеспечим маску ввода ИННа 10 символов.
						Если Найти(ОбластьЯчейки.Имя, "П000030001003") > 0 Тогда
							ОбластьЯчейки.ЭлементУправления.Маска = "9999999999";
						КонецЕсли;

						// Обеспечим маску ввода КПП 9 символов.
						Если Найти(ОбластьЯчейки.Имя, "П000030001004") > 0 Тогда
							ОбластьЯчейки.ЭлементУправления.Маска = "999999999";
						КонецЕсли;

						// Обеспечим маску ввода кода в разделе 4, колонка 1
						Если Найти(ОбластьЯчейки.Имя, "П000040001001") > 0 Тогда
							ОбластьЯчейки.ЭлементУправления.Маска = "9999999";
						КонецЕсли;

						// Обеспечим маску ввода для года в разделе 5, колонка 1.
						Если Найти(ОбластьЯчейки.Имя, "П000050002001") > 0 Тогда
							ОбластьЯчейки.ЭлементУправления.Маска = "9999";
						КонецЕсли;

						// Обеспечим маску ввода для кода в разделе 5, колонка 2.
						Если Найти(ОбластьЯчейки.Имя, "П000050002002") > 0 Тогда
							ОбластьЯчейки.ЭлементУправления.Маска = "9999999";
						КонецЕсли;

					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.

			// Установим реквизиты формы по умолчанию
			Если НЕ БезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;

			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный.Области.ВидДок.Значение = "1";

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			ПерепроставитьПорядковыеНомера();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// ЗаполнитьПоказательПоСтроке260Раздела21
// Процедура подсчитывает сумму строк 030 раздела 1.2 и переносит общую сумму в строку 260 раздела 2.1.
Процедура ЗаполнитьПоказательПоСтроке260Раздела21()

	ОбщСумма = 0;
	ЗаписыватьДанные = Истина;
	Для каждого Экз Из мСтруктураМногостраничныхРазделов.Раздел1_2 Цикл
		Если Экз.АктивнаяСтраница Тогда
			ОбщСумма = ОбщСумма + мСуммаНалогаРаздел1_2;
		Иначе
			Попытка
				ОбщСумма = ОбщСумма + Экз.Данные.СуммаНалогаРаздел1_2;
			Исключение
				ЗаписыватьДанные = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	Если ЗаписыватьДанные Тогда
		// Запишем в раздел 2.1, в показатель по строке 260 графы 4.
		мРаздел21.Области.П000210026004.Значение = ОбщСумма;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоказательПоСтроке260Раздела21()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
//
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2006Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005" Тогда
					НовСтрока = мКБК2005.Добавить();
				ИначеЕсли РазделВМакете = "КБК2006" Тогда
					НовСтрока = мКБК2006.Добавить();
				ИначеЕсли РазделВМакете = "НдсОперацииРаздел4" Тогда
					НовСтрока = мНдсОперацииРаздел4.Добавить();
				ИначеЕсли РазделВМакете = "НдсОперацииРаздел5" Тогда
					НовСтрока = мНдсОперацииРаздел5.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

Процедура ЗаполнитьАвто() Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьАвто15(); 
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто15()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	// ЗАПОЛНЕНИЕ ТАБЛИЧНОГО ПОЛЯ  "Раздел2_1"
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Если не ВидДокумента = 0 Тогда
		Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи),ДатаПодписи, КонецДня(ДатаПодписи)));
	КонецЕсли; 
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеНачислениеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеНачислениеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеНачислениеВосстановлениеНДС", СобытиеНачислениеВосстановлениеНДС);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеОплата = Новый СписокЗначений;
	СобытиеОплата.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытиеОплата", СобытиеОплата);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 110 декларации по НДС
	ВидыЦенностиСтр090_100 =  Новый СписокЗначений;
	ВидыЦенностиСтр090_100.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр090_100", ВидыЦенностиСтр090_100);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 110 декларации по НДС
	ВидыЦенностиСтр110 =  Новый СписокЗначений;
	ВидыЦенностиСтр110.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр110", ВидыЦенностиСтр110);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 120 и 130 декларации по НДС
	ВидыЦенностиСтр120_130 =  Новый СписокЗначений;
	ВидыЦенностиСтр120_130.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр120_130", ВидыЦенностиСтр120_130);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 140 и 150 декларации по НДС
	ВидыЦенностиСтр140_150 =  Новый СписокЗначений;
	ВидыЦенностиСтр140_150.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр140_150", ВидыЦенностиСтр140_150);
	
	ВидыЦенностиНалоговыйАгент =  Новый СписокЗначений;
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностиНалоговыйАгент", ВидыЦенностиНалоговыйАгент);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС20", 	 Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("СтавкаНДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	СтавкаНДСХХ = Новый СписокЗначений;
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("СтавкаНДСХХ", СтавкаНДСХХ);
	
	СтавкаНДСХХ_ХХХ = Новый СписокЗначений;
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	Запрос.УстановитьПараметр("СтавкаНДСХХ_ХХХ", СтавкаНДСХХ_ХХХ);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210001004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210002004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210003004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210004004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210005004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210006004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ_ХХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210007004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210007006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210009004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210010004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210011004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр120_130) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210012004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр120_130) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210013004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210014004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210015004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210031004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачислениеВосстановлениеНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210017006
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|		&НачалоПериода,
		|		&КонецПериода,
		|		,
		|		Организация = &Организация
		|			И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210001004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210002004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210003004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210004004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210005004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210006004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) ТОГДА ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ_ХХХ) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210007004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210007006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210009004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр090_100) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210010004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210011004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр120_130) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210012004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр120_130) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210013004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210014004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210015004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210031004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачислениеВосстановлениеНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000210017006
		|ИЗ
		|	(ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|		    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация = &Организация
		|		    И ЗаписьДополнительногоЛиста
		|		    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие) КАК НДСЗаписиКнигиПродажОбороты";
		
	КонецЕсли;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
				   
	//СобытиеВосстановленНДС = Новый СписокЗначений;
	//СобытиеВосстановленНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	//Запрос.УстановитьПараметр("СобытиеВосстановленНДС", СобытиеВосстановленНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 200 декларации по НДС
	ВидыЦенностиСтр200 =  Новый СписокЗначений;
	ВидыЦенностиСтр200.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр200", ВидыЦенностиСтр200);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 210 декларации по НДС
	ВидыЦенностиСтр210 =  Новый СписокЗначений;
	ВидыЦенностиСтр210.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр210", ВидыЦенностиСтр210);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 220 и 230 декларации по НДС
	ВидыЦенностиСтр220_230 =  Новый СписокЗначений;
	ВидыЦенностиСтр220_230.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностиСтр220_230.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр220_230", ВидыЦенностиСтр220_230);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 250 декларации по НДС
	ВидыЦенностиСтр250 =  Новый СписокЗначений;
	ВидыЦенностиСтр250.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр250", ВидыЦенностиСтр250);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 260 декларации по НДС
	ВидыЦенностиСтр260 =  Новый СписокЗначений;
	ВидыЦенностиСтр260.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиСтр260.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр260", ВидыЦенностиСтр260);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 270 декларации по НДС
	ВидыЦенностиСтр270 =  Новый СписокЗначений;
	ВидыЦенностиСтр270.Добавить(Перечисления.ВидыЦенностей.Возврат);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр270", ВидыЦенностиСтр270);
	
	ВидыЦенностиСтр190 = Новый СписокЗначений;
	Для т = 0 По Перечисления.ВидыЦенностей.Количество() - 1 Цикл
		ВидЦенности = Перечисления.ВидыЦенностей.Получить(т);
		Если ВидыЦенностиСтр110.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр220_230.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр250.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр260.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр270.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностиСтр190.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностиСтр190", ВидыЦенностиСтр190);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		//|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеВосстановленНДС) ТОГДА -НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210017006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр190) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210019004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр200) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210020004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр210) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210021004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220_230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210022004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220_230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210023004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр250) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210025004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр260) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210026004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210027004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210032004
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация И (Событие В (&СобытиеПредъявленКВычетуНДС) ИЛИ Событие В (&СобытиеПредъявленКВычетуНДС0)) И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты //Событие В (&СобытиеВосстановленНДС) ИЛИ ";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		//|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеВосстановленНДС) ТОГДА -НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210017006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр190) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210019004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр200) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210020004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр210) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210021004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220_230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210022004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220_230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210023004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр250) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210025004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр260) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210026004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210027004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000210032004
		|ИЗ
		|
		|(ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПокупокОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПокупокОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			    И (Событие В (&СобытиеПредъявленКВычетуНДС) ИЛИ Событие В (&СобытиеПредъявленКВычетуНДС0)) //Событие В (&СобытиеВосстановленНДС) ИЛИ 
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|		НДСЗаписиКнигиПокупокОбороты.Событие,
		|		НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация = &Организация
		|			    И (Событие В (&СобытиеПредъявленКВычетуНДС) ИЛИ Событие В (&СобытиеПредъявленКВычетуНДС0)) //Событие В (&СобытиеВосстановленНДС) ИЛИ 
		|			    И ЗаписьДополнительногоЛиста
		|			    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПокупокОбороты) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.Событие) КАК НДСЗаписиКнигиПокупокОбороты
		| ";
	КонецЕсли;	
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Автоматическое заполнение строк с 410 - 420 (на основе анализа регистра подсистемы учета НДС: "НДСЗаписиКнигиПокупок" и "НДСЗаписиКнигиПродаж") 
	ПринятКВычетуНДС_НеПодтвержден0 = Новый СписокЗначений;
	ПринятКВычетуНДС_НеПодтвержден0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("ПринятКВычетуНДС_НеПодтвержден0", ПринятКВычетуНДС_НеПодтвержден0);
	
	НачисленНДС_НеПодтвержден0 = Новый СписокЗначений;
	НачисленНДС_НеПодтвержден0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("НачисленНДС_НеПодтвержден0", НачисленНДС_НеПодтвержден0);

	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС) > 0
		|			ТОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000210031004,
		|	ВЫБОР
		|		КОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС) > 0
		|			ТОГДА 0
		|		ИНАЧЕ -1 * СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС)
		|	КОНЕЦ КАК П000210032004
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&НачисленНДС_НеПодтвержден0)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		-1 * НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&ПринятКВычетуНДС_НеПодтвержден0)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты) КАК РазницаНачисленияИВычетаПоНеподтверждению";
	Иначе
		// Заполнение с учетом записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС) > 0
		|			ТОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000210031004,
		|	ВЫБОР
		|		КОГДА СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС) > 0
		|			ТОГДА 0
		|		ИНАЧЕ -1 * СУММА(РазницаНачисленияИВычетаПоНеподтверждению.НДС)
		|	КОНЕЦ КАК П000210032004
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&НачисленНДС_НеПодтвержден0)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		-1 * НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&ПринятКВычетуНДС_НеПодтвержден0)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&НачисленНДС_НеПодтвержден0)
		|			    И ЗаписьДополнительногоЛиста
		|			    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		-1 * НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация = &Организация
		|			    И Событие В (&ПринятКВычетуНДС_НеПодтвержден0)
		|			    И ЗаписьДополнительногоЛиста
		|			    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПокупокОбороты) КАК РазницаНачисленияИВычетаПоНеподтверждению";

	КонецЕсли;
					
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	// ЗАПОЛНЕНИЕ ТАБЛИЧНОГО ПОЛЯ  "Раздел2_2"
	
	// Автоматическое заполнение листов декларации, касающихся уплаты организацией НДС в качестве налогового агента
	Запрос.УстановитьПараметр("ВидыЦенностей40_50", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей80", 	Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	Запрос.УстановитьПараметр("ВидыЦенностей150_160", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000220001000,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Контрагент,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН КАК КонтрагентИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП КАК КонтрагентКПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КодПоОКПО КАК КонтрагентКодПоОКПО,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей40_50) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220004004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей40_50) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220005004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей80) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220008004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей150_160) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220015004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей150_160) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220016004
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|					И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|			ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|		КОНЕЦ КАК Покупатель,
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие Как Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			   И (Событие В (&СобытиеНачисленНДС) или Событие в (&СобытиеРеализация)) И ВидЦенности В (&ВидыЦенностейНА)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты

		|ИТОГИ СУММА(П000220004004), СУММА(П000220005004), СУММА(П000220008004), СУММА(П000220015004), СУММА(П000220016004) ПО
		|	П000220001000
		|АВТОУПОРЯДОЧИВАНИЕ";	

	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000220001000,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Контрагент,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН КАК КонтрагентИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП КАК КонтрагентКПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КодПоОКПО КАК КонтрагентКодПоОКПО,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей40_50) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220004004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей40_50) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220005004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей80) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220008004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей150_160) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220015004,
		|	ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей150_160) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот ИНАЧЕ 0 КОНЕЦ КАК П000220016004
		|ИЗ
		|	(ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|					И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|			ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|		КОНЕЦ Как Покупатель,
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие Как Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|			   И (Событие В (&СобытиеНачисленНДС) или Событие в (&СобытиеРеализация)) И ВидЦенности В (&ВидыЦенностейНА)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|					И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|			ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|		КОНЕЦ,
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация = &Организация
		|			   И (Событие В (&СобытиеНачисленНДС) или Событие в (&СобытиеРеализация)) И ВидЦенности В (&ВидыЦенностейНА)
		|			    И ЗаписьДополнительногоЛиста
		|			    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,НДСЗаписиКнигиПродажОбороты.Событие) КАК НДСЗаписиКнигиПродажОбороты
		|ИТОГИ СУММА(П000220004004), СУММА(П000220005004), СУММА(П000220008004), СУММА(П000220015004), СУММА(П000220016004) ПО
		|	П000220001000
		|АВТОУПОРЯДОЧИВАНИЕ";	
	КонецЕсли;
	
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКонтрагенту = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагенту.Следующий() Цикл
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			// При добавлении страницы по Разделу 2.2 необходимо синхронно
			// добавлять страницу и в Раздел 1.2.

			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1_2");
			ВставитьДополнительнуюСтраницу("Раздел1_2");

			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел22");
			ВставитьДополнительнуюСтраницу("Раздел22");

		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			Если Найти(Колонка.Имя, "Контрагент")  = 1 Тогда
				Продолжить;
			КонецЕсли; 
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, ВыборкаПоКонтрагенту[Колонка.Имя]);
		КонецЦикла; 
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000120000200", ВыборкаПоКонтрагенту.П000220001000);
		Значение = ВыборкаПоКонтрагенту.КонтрагентИНН;
		мИННРаздел12 = Значение;
		мИННРаздел22 = мИННРаздел12;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","ИННРаздел12_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","ИННРаздел22_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
		
		Значение = ВыборкаПоКонтрагенту.КонтрагентКПП;
		мКППРаздел12 = Значение;
		мКППРаздел22 = мКППРаздел12;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КППРаздел12_", 9, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 9, " "));
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","КППРаздел22_", 9, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 9, " "));
		
		Значение = ВыборкаПоКонтрагенту.КонтрагентКодПоОКПО;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "КодОКАТОРаздел12_", 11, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 11, "0"));
		
		Расчет("Раздел22");
	КонецЦикла; 
	
	ЗаполнитьАвтоРаздел5();
	
	// Расчет автовычисляемых полей
	Расчет();

	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьСтрокуРаздел5(НомерСтроки, Данные, Год, КодОперации, СуммаНДС, СуммаНДСВосстановлена);
	
	мРаздел5.Области["П000050002001_"+ НомерСтроки].Значение = Формат(Год, "ЧГ=0");
	мРаздел5.Области["П000050002002_"+ НомерСтроки].Значение = КодОперации;
	СтрокаНазванияПоКоду = мНдсОперацииРаздел5.Найти(КодОперации, "Код");
	Если СтрокаНазванияПоКоду <> Неопределено И СтрокаНазванияПоКоду.Название <> "Пустое значение" Тогда
		мРаздел5.Области["П000050002003_"+ НомерСтроки].Значение = СтрокаНазванияПоКоду.Название;
	КонецЕсли;
	мРаздел5.Области["П000050002004_"+ НомерСтроки].Значение = Данные.ДатаВводаВЭксплуатациюБУ;
	мРаздел5.Области["П000050002005_"+ НомерСтроки].Значение = Данные.ДатаНачисленияАмортизацииНУ;
	мРаздел5.Области["П000050002006_"+ НомерСтроки].Значение = Данные.СтоимостьОбъектаНедвижимости;
	мРаздел5.Области["П000050002007_"+ НомерСтроки].Значение = СуммаНДС;
	Если Данные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		мРаздел5.Области["П000050002008_"+ НомерСтроки].Значение = Данные.ДатаНачалаИспользованияДляОпераций;
		мРаздел5.Области["П000050002010_"+ НомерСтроки].Значение = Данные.ДоляВыручкиНеОблагаемаяНДС;
		мРаздел5.Области["П000050002011_"+ НомерСтроки].Значение = СуммаНДСВосстановлена;
	Иначе
		мРаздел5.Области["П000050002008_"+ НомерСтроки].Значение = Данные.ДатаНачалаИспользованияДляОпераций;
		мРаздел5.Области["П000050002010_"+ НомерСтроки].Значение = Данные.ДоляВыручкиНеОблагаемаяНДС;
		мРаздел5.Области["П000050002011_"+ НомерСтроки].Значение = СуммаНДСВосстановлена;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАвтоРаздел5()

	// Предварительно очищаем раздел 5.
	ОчисткаРаздела5();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектыНедвижимости.(
	               |		ОбъектНедвижимости,
	               |		ОбъектНедвижимости.АдресМестонахождения КАК АдресМестонахождения,
	               |		ОбъектНедвижимости.КодРегиона КАК КодРегиона,
	               |		ИспользуетсяДляОперацийНеОблагаемыхНДС,
	               |		ДатаВводаВЭксплуатациюБУ,
	               |		ДатаНачисленияАмортизацииНУ,
	               |		ДатаНачалаИспользованияДляОпераций,
	               |		СтоимостьОбъектаНедвижимости,
	               |		СуммаНДСПоПодряднымРаботам,
	               |		СуммаНДСПоСМРДляСобственногоПотребления,
	               |		СуммаНДСПоОбъектуНедвижимости,
	               |		ДоляВыручкиНеОблагаемаяНДС,
	               |		СуммаНДСПоПодряднымРаботамВосстановлена,
	               |		СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена,
	               |		СуммаНДСПоОбъектуНедвижимостиВосстановлена
	               |	),
	               |	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Дата) КАК П000050000100
	               |ИЗ
	               |	Документ.ВосстановлениеНДСпоОбъектамНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
	               |ГДЕ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.Организация = &Организация
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Дата >= &НачалоПериода
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Дата <= &КонецПериода
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Проведен";
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектыНедвижимости = Выборка.ОбъектыНедвижимости.Выбрать();
		
		Пока ОбъектыНедвижимости.Следующий() Цикл
			
			НомерСтроки = 0;
			Если Не ПерваяСтраница Тогда

				ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел5");
				ВставитьДополнительнуюСтраницу("Раздел5");

			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
				
			мРаздел5.Области["П000050000100"].Значение = Формат(Выборка.П000050000100, "ЧГ=0");
			
			мКодРегионаРаздел5 = ОбъектыНедвижимости.КодРегиона;
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(ОбъектыНедвижимости.АдресМестонахождения);
			Если Не СтруктураАдреса = Неопределено Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел5","ПочтИндекс", 6, РегламентированнаяОтчетность.ДополнитьСтроку(СтруктураАдреса.Индекс, 6, "-"));
				мРаздел5.Области.СубъектРФ.Значение = СтруктураАдреса.Регион;
				мРаздел5.Области.Район.Значение = СтруктураАдреса.Район;
				мРаздел5.Области.Город.Значение = СтруктураАдреса.Город;
				мРаздел5.Области.НаселенныйПункт.Значение = СтруктураАдреса.НаселенныйПункт;
				мРаздел5.Области.Улица.Значение = СтруктураАдреса.Улица;
				мРаздел5.Области.НомерДома.Значение = СтруктураАдреса.Дом;
				мРаздел5.Области.НомерСтроения.Значение = СтруктураАдреса.Корпус;
				мРаздел5.Области.НомерКвартиры.Значение = СтруктураАдреса.Квартира;
			КонецЕсли;
			
			мРаздел5.Области["П000050001900"].Значение = Формат(Выборка.П000050000100, "ЧГ=0");
			мРаздел5.Области["П000050001910"].Значение = Формат(Выборка.П000050000100, "ЧГ=0");
			
			Если ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам = 0
				И ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления = 0 
				И ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости = 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьСтрокуРаздел5(НомерСтроки, ОбъектыНедвижимости, Выборка.П000050000100, "", 
										0, 
										0);
			Иначе	
				Если ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуРаздел5(НомерСтроки, ОбъектыНедвижимости, Выборка.П000050000100, "1011801", 
											ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам, 
											ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботамВосстановлена);
				КонецЕсли;
				
				Если ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуРаздел5(НомерСтроки, ОбъектыНедвижимости, Выборка.П000050000100, "1011802", 
											ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления, 
											ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена);
				КонецЕсли;
				
				Если ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуРаздел5(НомерСтроки, ОбъектыНедвижимости, Выборка.П000050000100, "1011803", 
											ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости, 
											ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимостиВосстановлена);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
			
			Расчет("Раздел5");
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

// ОчисткаРаздела5
// Используется для ЗаполнитьАвто
// В начале автозаполнения
//
Процедура ОчисткаРаздела5()
	Перем ТаблицаСтраницРаздела5;

	// Очистим Раздел5 от имеющихся или не имеющихся на нем данных
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел5", ТаблицаСтраницРаздела5) Тогда
		Возврат;
	КонецЕсли;

	ОчиститьТабличноеПоле(мРаздел5);

	// Удалим доп. страницы, если они есть
	Если ТаблицаСтраницРаздела5.Количество() > 1 Тогда

		ИндексСтраницы = 0;
		Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела5.Количество()-1)) Цикл
			// Пропускаем активную страницу по той причине,
			// что данные активной страницы былы очищены ранее.
			СтрокаТаблицы = ТаблицаСтраницРаздела5[ИндексСтраницы];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				// удаляем дополнительную страницу
				ТаблицаСтраницРаздела5.Удалить(СтрокаТаблицы);

				Продолжить;
			КонецЕсли;

			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЦикла;

	КонецЕсли;

	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел5", Ложь);
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел5");
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел5");

КонецПроцедуры // ОчисткаРаздела5

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////

// ПолеТабличногоДокументаРаздел22Выбор
//
Процедура ПолеТабличногоДокументаРаздел22Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Найти(Область.Имя, "ИННРаздел22") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел22", "ИННРаздел22_"));

		Значение = мИННРаздел22;

		Если ВвестиСтроку(Значение, "Введите ИНН", 12) Тогда
			Модифицированность = Истина;
			Если Не РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
				мИННРаздел22 = Значение;
				мИННРаздел12 = мИННРаздел22;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","ИННРаздел22_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","ИННРаздел12_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
			Иначе
				мИННРаздел22 = "";
				мИННРаздел12 = "";
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","ИННРаздел22_", 12, мИННРаздел22);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","ИННРаздел12_", 12, мИННРаздел12);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "КППРаздел22") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел22", "КППРаздел22_"));

		Если ВвестиСтроку(Значение, "Введите КПП", 9) Тогда
			Модифицированность = Истина;
			Если Не РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","КППРаздел22_", 9, Значение);
			Иначе
				Значение = "";
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","КППРаздел22_", 9, "");
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КППРаздел12_", 9, Значение);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел22Выбор

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// КоманднаяПанельФормыПроверкаПоказателей
//
Процедура КоманднаяПанельФормыПроверкаПоказателей(Кнопка)
	РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь, Истина);
КонецПроцедуры // КоманднаяПанельФормыПроверкаПоказателей

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если Область.Защита Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел22";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;


КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.1" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел21ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел21ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.1" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел21ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел21ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 5"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти()

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (НЕ мАвтоВыборКодов) И (Найти(Область.Имя, "П000030001005") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		// Получим номер строчки ввода данных
		НомерСтроки = Сред(Область.Имя, 15);
		
		СтруктураГруппы0 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы0, СтруктураГруппы0);
		Адр9Зпт = СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", Адр9Зпт);

		Если ВводАдреса.ОткрытьМодально() Тогда

			ПолученныйАдрес = СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.КодСтраны)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Индекс)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Регион)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Район)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Город)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.НаселенныйПункт)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Улица)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Дом)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Корпус)
			   + "," + СокрЛП(ВводАдреса.НачальноеЗначениеВыбора.Квартира);

			// Здесь переделано. Откажемся от представления адреса в пользовательском формате.
			// Т.к. на листе задан в заголовке пример, как должен отображаться адрес, это сов-
			// падает с форматом выгрузки, поэтому не будем перекидывать в пользоват. представление.

			// в табл. запишем адрес для выгрузки, а на лист, адрес для пользователя.
			Если ПолученныйАдрес = ",,,,,,,,," Тогда
				СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005 = "643,,,,,,,,,";
			Иначе
				СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005 = ПолученныйАдрес;
			КонецЕсли;

			// Запишем на лист адрес для пользователя.
			Область.Значение = ПредставлениеАдресаВФормате9ЗапятыхБезКодаСтраны(ПолученныйАдрес);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПредставлениеАдресаВФормате9ЗапятыхБезКодаСтраны
//
Функция ПредставлениеАдресаВФормате9ЗапятыхБезКодаСтраны(Знач Адрес)

	Адрес = СокрЛП(Адрес);
	Результат = Адрес;
	Если Сред(Адрес, 1, 3) = "643" Тогда
		Результат = Сред(Адрес, 5);
	КонецЕсли;

	Если Результат = ",,,,,,,,," Или Результат = ",,,,,,,," Тогда
		Результат = "";
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПредставлениеАдресаВФормате9ЗапятыхБезКодаСтраны

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 6"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздел1_2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1_2");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1_2Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздел1_2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1_2");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1_2Нажатие()

// ПерепроставитьПорядковыеНомера
// Раздел 2.2 и 1.2 имеют порядковые номера, при удалении сбивается номер и нарушается порядок,
// данная процедура перенумерует оба раздела с 0
Процедура ПерепроставитьПорядковыеНомера()

	ТаблицаСтраницРаздела1_2 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1_2", ТаблицаСтраницРаздела1_2);
	ТаблицаСтраницРаздела1 = ТаблицаСтраницРаздела1_2;

	Для Инд1 = 0 По ТаблицаСтраницРаздела1.Количество() - 1 Цикл

		НомерСтраницы = РегламентированнаяОтчетность.ДополнитьСтроку(Строка(Инд1 + 1), 6, "0", 0);

		Если (ТаблицаСтраницРаздела1[Инд1].Данные = Неопределено) Тогда
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел1_2");
		КонецЕсли;

		Для Инд2 = 1 По 6 Цикл
			ТаблицаСтраницРаздела1[Инд1].Данные.Вставить("Номер" + Строка(Инд2), Сред(НомерСтраницы, Инд2, 1));
		КонецЦикла;

		ТаблицаСтраницРаздела1[Инд1].Данные.Вставить("ПорядковыйНомерРаздел1_2", Инд1 + 1);

		Если ТаблицаСтраницРаздела1[Инд1].АктивнаяСтраница Тогда
			мПорядковыйНомерРаздел1_2 = Инд1 + 1;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","Номер", 6, НомерСтраницы);
		КонецЕсли;

	КонецЦикла;

//
	ТаблицаСтраницРаздела22 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел22", ТаблицаСтраницРаздела22);
	ТаблицаСтраницРаздела1 = ТаблицаСтраницРаздела22;

	Для Инд1 = 0 По ТаблицаСтраницРаздела1.Количество() - 1 Цикл

		НомерСтраницы = РегламентированнаяОтчетность.ДополнитьСтроку(Строка(Инд1 + 1), 6, "0", 0);

		Если (ТаблицаСтраницРаздела1[Инд1].Данные = Неопределено) Тогда
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел22");
		КонецЕсли;

		Для Инд2 = 1 По 6 Цикл
			ТаблицаСтраницРаздела1[Инд1].Данные.Вставить("НомПлатРаздел22_" + Строка(Инд2), Сред(НомерСтраницы, Инд2, 1));
		КонецЦикла;

		ТаблицаСтраницРаздела1[Инд1].Данные.Вставить("ПорядковыйНомерРаздел22", Инд1 + 1);

		Если ТаблицаСтраницРаздела1[Инд1].АктивнаяСтраница Тогда
			мПорядковыйНомерРаздел22 = Инд1 + 1;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","НомПлатРаздел22_", 6, НомерСтраницы);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПерепроставитьПорядковыеНомера

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела5Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел5");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела5Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел5");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела1_2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1_2");
	ВставитьДополнительнуюСтраницу("Раздел1_2");

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел22");
	ВставитьДополнительнуюСтраницу("Раздел22");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел5");
	ВставитьДополнительнуюСтраницу("Раздел5");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела1_2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1_2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1_2");

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел22");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел22");

	ПерепроставитьПорядковыеНомера();
	Расчет("Раздел21");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел5");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел5");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела1_2Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела5Нажатие()

// КнопкаПерейтиНаСтраницуРаздел22Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел22Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел22Нажатие

// КнопкаУдалитьДопСтраницуРаздел22Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел22Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел22");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел22");

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1_2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1_2");

	ПерепроставитьПорядковыеНомера();
	Расчет("Раздел21");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел22Нажатие

// КнопкаДобавитьДопСтраницуРаздел22Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел22Нажатие(Элемент)

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1_2", Ложь);
	СуммаРаздела12 = мСуммаНалогаРаздел1_2;
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел22");
	ВставитьДополнительнуюСтраницу("Раздел22");

	мСуммаНалогаРаздел1_2 = СуммаРаздела12;
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1_2");
	ВставитьДополнительнуюСтраницу("Раздел1_2");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел22Нажатие

// КнопкаСледующаяСтраницаРаздел22Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел22Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел22");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел22Нажатие

// КнопкаПредыдущаяСтраницаРаздел22Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел22Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел22");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел22Нажатие

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела5Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел4Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку на странице "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел4Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	Расчет("Раздел4");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Раздел 6" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел3Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел3Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Раздел 6" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел5Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел5Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку на странице "Раздел 6" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел3Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	Расчет("Раздел3");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку на странице "Раздел 6" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел5Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел5Нажатие()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// ПолеТабличногоДокументаРаздел1_1Выбор
// обработка "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Найти(Область.Имя, "КБКРаздел1") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2005 Тогда
				ТЗ = мКБК2005;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				ТЗ = мКБК2006;
			КонецЕсли;

			КБКРаздел1_2 = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_1", "КБКРаздел1_"));
			СтрокаПоиска = ТЗ.Найти(КБКРаздел1_2,"Код");

			Если СтрокаПоиска <> Неопределено Тогда
				Результат = ТЗ.ВыбратьСтроку("Выбор КБК", СтрокаПоиска);
			Иначе
				Результат = ТЗ.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		КонецЕсли; // НЕ АВТОвыбор

		Если мАвтоВыборКодов Тогда
			Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_1", "КБКРаздел1_"));;
			СтандартнаяОбработка = Ложь;

			Если НЕ ВвестиСтроку(Значение,"Введите КБК (20 знаков)", 20) Тогда
				// Если отказались от ввода, то входим, ничего не сохраняя
				Возврат;
			КонецЕсли;
			Результат = Значение;
		КонецЕсли; // галочка стоит, ввод только вручную

		Если Результат <> Неопределено Тогда
			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			КБКРаздел1_2 = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","КБКРаздел1_", 20, КБКРаздел1_2);
			Модифицированность = Истина;
		Конецесли;

	ИначеЕсли Найти(Область.Имя, "КодОКАТОРаздел1") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_1","КодОКАТОРаздел1_"));

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите код ОКАТО", 11) Тогда
			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "КодОКАТОРаздел1_", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;

			Иначе
				Сообщить("Код ОКАТО должен состоять из 11 цифр.");
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(Область.Имя, "СуммаНалогДоплата") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = мСуммаНалогДоплата;
		Если ВвестиЧисло(Значение, "Сумма налога, исчисленная к уплате", 14, 2) Тогда
			мСуммаНалогДоплата = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаНалогДоплата", 15, мСуммаНалогДоплата, Истина);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(Область.Имя, "СуммаНалогУменьш") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = мСуммаНалогУменьш;
		Если ВвестиЧисло(Значение, "Сумма налога, исчисленная к уменьшению", 14, 2) Тогда
			мСуммаНалогУменьш = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаНалогУменьш", 15, мСуммаНалогУменьш, Истина);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1Выбор

// ПолеТабличногоДокументаРаздел1_2Выбор
// Процедура обработчик события "Выбор"
// Активизируется при "входе" в ячейку отчета
//
Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Найти(Область.Имя, "КБКРаздел12") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2005 Тогда
				ТЗ = мКБК2005;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				ТЗ = мКБК2006;
			КонецЕсли;

			КБКРаздел1_2 = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_2", "КБКРаздел12_"));
			СтрокаПоиска = ТЗ.Найти(КБКРаздел1_2,"Код");

			Если СтрокаПоиска <> Неопределено Тогда
				Результат = ТЗ.ВыбратьСтроку("Выбор КБК", СтрокаПоиска);
			Иначе
				Результат = ТЗ.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		КонецЕсли; // НЕ АВТОвыбор

		Если мАвтоВыборКодов Тогда

			Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_2", "КБКРаздел12_"));
			СтандартнаяОбработка = Ложь;

			Если НЕ ВвестиСтроку(Значение,"Введите КБК (20 знаков)", 20) Тогда
				// Если отказались от ввода, то входим, ничего не сохраняя
				Возврат;
			КонецЕсли;

			Результат = Значение;

		КонецЕсли; // галочка стоит, ввод только вручную

		Если Результат <> Неопределено Тогда
			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			КБКРаздел1_2 = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КБКРаздел12_", 20, КБКРаздел1_2);
			Модифицированность = Истина;
		Конецесли;

	ИначеЕсли Найти(Область.Имя, "КодОКАТОРаздел12") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_2","КодОКАТОРаздел12_"));

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите код ОКАТО", 11) Тогда
			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "КодОКАТОРаздел12_", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "КППРаздел12") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_2", "КППРаздел12_"));

		Если ВвестиСтроку(Значение, "Введите КПП", 9) Тогда

			Модифицированность = Истина;
			Если Не РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КППРаздел12_", 9, Значение);
			Иначе
				Значение = "";
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КППРаздел12_", 9, Значение);
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","КППРаздел22_", 9, Значение);

		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "ИННРаздел12") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Значение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_2", "ИННРаздел12_"));

		Значение = мИННРаздел12;

		Если ВвестиСтроку(Значение, "Введите ИНН", 12) Тогда
			Модифицированность = Истина;
			Если Не РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
				мИННРаздел12 = Значение;
				мИННРаздел22 = мИННРаздел12;

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","ИННРаздел12_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","ИННРаздел22_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(Значение, 12, "0"));
			Иначе
				мИННРаздел12 = "";
				мИННРаздел22 = мИННРаздел12;

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","ИННРаздел12_", 12, мИННРаздел12);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел22","ИННРаздел22_", 12, мИННРаздел22);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(Область.Имя, "СуммаНалога") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = мСуммаНалогаРаздел1_2;
		Если ВвестиЧисло(Значение, "Введите сумму налога", 14, 2) Тогда
			мСуммаНалогаРаздел1_2 = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","СуммаНалога", 15, мСуммаНалогаРаздел1_2, Истина);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ПолеТабличногоДокументаРаздел5Выбор
//
Процедура ПолеТабличногоДокументаРаздел5Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (НЕ мАвтоВыборКодов) И ((Найти(Область.Имя, "ПочтИндекс") > 0)
	   Или (Найти(Область.Имя, "КодРегион") > 0)
	   Или (Область.Имя = "СубъектРФ")
	   Или (Область.Имя = "Район")
	   Или (Область.Имя = "Город")
	   Или (Область.Имя = "НаселенныйПункт")
	   Или (Область.Имя = "Улица")
	   Или (Область.Имя = "НомерДома")
	   Или (Область.Имя = "НомерСтроения")
	   Или (Область.Имя = "НомерКвартиры")) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс = "";

		Для Инд = 1 По 6 Цикл
			ПочтИндекс = ПочтИндекс + мРаздел5.Области["ПочтИндекс" + Строка(Инд)].Значение;
		КонецЦикла;

		СубъектРФ       = мРаздел5.Области.СубъектРФ.Значение;
		СубъектРФКод    = мКодРегионаРаздел5;
		Район           = мРаздел5.Области.Район.Значение;
		Город           = мРаздел5.Области.Город.Значение;
		НаселенныйПункт = мРаздел5.Области.НаселенныйПункт.Значение;
		Улица           = мРаздел5.Области.Улица.Значение;
		НомерДома       = мРаздел5.Области.НомерДома.Значение;
		НомерСтроения   = мРаздел5.Области.НомерСтроения.Значение;
		НомерКвартиры   = мРаздел5.Области.НомерКвартиры.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФКод); // код
		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", СубъектРФ);
		СтруктураАдресныхДанных.Вставить("Район", Район);
		СтруктураАдресныхДанных.Вставить("Город", Город);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НаселенныйПункт);
		СтруктураАдресныхДанных.Вставить("Улица", Улица);
		СтруктураАдресныхДанных.Вставить("Дом", НомерДома);
		СтруктураАдресныхДанных.Вставить("Корпус", НомерСтроения);
		СтруктураАдресныхДанных.Вставить("Квартира", НомерКвартиры);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел5", "ПочтИндекс", 6, Индекс);
			мКодРегионаРаздел5 = Регион;
			// РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел5", "КодРегион", 2, Регион);

			мРаздел5.Области.СубъектРФ.Значение = НазваниеРегиона;
			мРаздел5.Области.Район.Значение = Район;
			мРаздел5.Области.Город.Значение = Город;
			мРаздел5.Области.НаселенныйПункт.Значение = НаселенныйПункт;
			мРаздел5.Области.Улица.Значение = Улица;

			мРаздел5.Области.НомерДома.Значение = Дом;
			мРаздел5.Области.НомерСтроения.Значение = Корпус;
			мРаздел5.Области.НомерКвартиры.Значение = Квартира;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "П000050002002") > 0) И (Не мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		ПоисковоеЗначение = Область.Значение;
		НайденнаяСтрока = мНдсОперацииРаздел5.Найти(ПоисковоеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мНдсОперацииРаздел5.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
		Иначе
			Результат = мНдсОперацииРаздел5.ВыбратьСтроку("Выбор кода");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Область.Значение = Результат.Получить(0);
			Модифицированность = Истина;
			Если Результат.Получить(1) <> "Пустое значение" Тогда
				мРаздел5.Области["П000050002003_" + Сред(Область.Имя,15)].Значение = Результат.Получить(1);
			Иначе
				мРаздел5.Области["П000050002003_" + Сред(Область.Имя,15)].Значение = "";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "П000050002003") > 0) И (Не мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		ПоисковоеЗначение = Область.Значение;
		НайденнаяСтрока = мНдсОперацииРаздел5.Найти(ПоисковоеЗначение, "Название");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мНдсОперацииРаздел5.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
		Иначе
			Результат = мНдсОперацииРаздел5.ВыбратьСтроку("Выбор кода");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Если Результат.Получить(1) <> "Пустое значение" Тогда
				Область.Значение = Результат.Получить(1);
			Иначе
				Область.Значение = "";
			КонецЕсли;
			мРаздел5.Области["П000050002002_" + Сред(Область.Имя,15)].Значение = Результат.Получить(0);
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел5Выбор

// ПолеТабличногоДокументаРаздел4Выбор
//
Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (Найти(Область.Имя, "П000040001001") > 0) И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ПоисковоеЗначение = Область.Значение;
		НайденнаяСтрока = мНдсОперацииРаздел4.Найти(ПоисковоеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мНдсОперацииРаздел4.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
		Иначе
			Результат = мНдсОперацииРаздел4.ВыбратьСтроку("Выбор кода");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Область.Значение = Результат.Получить(0);
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел4Выбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	//определение источников данных для проверки
	Если БратьИзформы Тогда
	     Орг = Организация;
	Иначе
		Если мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = мСохраненныйДок.Организация;
	КонецЕсли;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе//КатегорияНП = 2
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20)));
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = Число(ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	Если мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда	
		ПризнОтчетногоПериода = 1; // представляется ежемесячно
	Иначе
		ПризнОтчетногоПериода = 3; // представляется ежеквартально
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ПоказателиТитульный.ОГРН));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ОГРНИП:"  + СокрЛП(ПоказателиТитульный.ОГРНИП));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00005");
	Текст.ДобавитьСтроку("ПериодВерОтч:02.02.2006,13.12.2006");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		ОбновитьСтруктуруМногострочныхРазделов();

		// обновляем структуру многостраничных разделов
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			//проверка на то, что раздел пуст
			//ПустойРаздел = Истина;
			//СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			//Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			//	
			//	КодПоказателя = Стр3.КодПоказателяПоСоставу;
			//	ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			//	ПризнакФормата = Стр3.ТипДанныхПоказателя;
			//	
			//	Если КодПоказателя="###" Тогда
			//		Продолжить;
			//	ИначеЕсли КодПоказателя="===" Тогда
			//		Прервать;	
			//	КонецЕсли;
			//	
			//	ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			//	Если Найти(ЧтоПроверять, "1") <> 0 Тогда
			//		
			//		Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, Ложь) = 1 Тогда
			//			ПустойРаздел = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	Если ВыводитьСообщения Тогда
			//		Сообщить(ПредставлениеОтчета + "Обязательный к заполнению " + ИмяРаздела + " пуст!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	СтатусПроверки = 1;
			//КонецЕсли;
			//конец проверки на пустой раздел
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь);
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если Тек13Симв = "П000120000200" Тогда
			СледСтрока = Текст.ПолучитьСтроку(ТекИнд + 1);
			ИННП000120000300 = Сред(СледСтрока, 15);
			Если СтрДлина(ИННП000120000300) = 12 И (Лев(ИННП000120000300, 2) <> "00") Тогда
				Текст.ЗаменитьСтроку(ТекИнд, "П000120000200:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(ТекСтрока, 15)));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Тек13Симв = "П000220001000" Тогда
			СледСтрока = Текст.ПолучитьСтроку(ТекИнд + 1);
			ИННП000220002000 = Сред(СледСтрока, 15);
			Если СтрДлина(ИННП000220002000) = 12 И (Лев(ИННП000220002000, 2) <> "00") Тогда
				Текст.ЗаменитьСтроку(ТекИнд, "П000220001000:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(ТекСтрока, 15)));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Текст.УстановитьТекст(СтрЗаменить(Текст.ПолучитьТекст(), "П000030001005:" + Символы.ПС, "П000030001005:643,,,,,,,,," + Символы.ПС));
	Текст.УстановитьТекст(СтрЗаменить(Текст.ПолучитьТекст(), "П000050001000:" + Символы.ПС, "П000050001000:643,,,,,,,,," + Символы.ПС));
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",ОписаниеТиповСтрока50);

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре   = КодПоказателяПоСтруктуре;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	Если ИмяТекущейСтраницыПанели = "Раздел21" Тогда
		Расчет("Раздел21");
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда
		Расчет("Раздел22");
		Расчет("Раздел1_2");
		Расчет("Раздел21");
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		СтруктураГруппы0 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы0, СтруктураГруппы0);

		Если Найти(ОбластьИмя, "П000030001005") > 0 Тогда
			НомерСтроки = Сред(ОбластьИмя, 15);

			Если мАвтоВыборКодов Тогда
				СтруктураГруппы0[Число(НомерСтроки) - 1].П000030001005 = Элемент.ТекущаяОбласть.Значение;
			КонецЕсли;

		ИначеЕсли (Найти(ОбластьИмя, "П000030001006") > 0)
		      Или (Найти(ОбластьИмя, "П000030001007") > 0)
		      Или (Найти(ОбластьИмя, "П000030001008") > 0) Тогда
		      НомерСтроки = Сред(ОбластьИмя, 15);
		      СтруктураГруппы0[Число(НомерСтроки) - 1][Сред(ОбластьИмя, 1, 13)] = Элемент.ТекущаяОбласть.Значение;
		      Расчет("Раздел3");
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда

		Если (Найти(ОбластьИмя, "П000040001002") > 0)
		      Или (Найти(ОбластьИмя, "П000040001003") > 0)
		      Или (Найти(ОбластьИмя, "П000040001004") > 0) Тогда
		      НомерСтроки = Сред(ОбластьИмя, 15);

			СтруктураГруппы1 = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

			СтруктураГруппы1[Число(НомерСтроки) - 1][Сред(ОбластьИмя, 1, 13)] = Элемент.ТекущаяОбласть.Значение;
			Расчет("Раздел4");

		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда

		Если (Найти(ОбластьИмя, "П000050002007") > 0) 
		   Или (Найти(ОбластьИмя, "П000050002010") > 0) 
		   Или (Найти(ОбластьИмя, "П000050002008") > 0) Тогда

			НомерСтроки = Сред(ОбластьИмя, 15);

			СтруктураГруппы2 = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);

			СтруктураГруппы2[Число(НомерСтроки) - 1][Сред(ОбластьИмя, 1, 13)] = Элемент.ТекущаяОбласть.Значение;

			Если НЕ ФлажокОтклАвтоРасчет Тогда
				
				Если мРаздел5.Области["П000050002008" + "_" + НомерСтроки].Значение = '00010101' Тогда

					мРаздел5.Области["П000050002009" + "_" + НомерСтроки].Значение = 0;
					мРаздел5.Области["П000050002010" + "_" + НомерСтроки].Значение = 0;
					мРаздел5.Области["П000050002011" + "_" + НомерСтроки].Значение = 0;
					
				Иначе
					
					Итог = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(мРаздел5.Области["П000050002007" + "_" + НомерСтроки].Значение) * 1 / 10);
					мРаздел5.Области["П000050002009" + "_" + НомерСтроки].Значение = Итог;

					мРаздел5.Области["П000050002011" + "_" + НомерСтроки].Значение = 
					ОкруглитьЧислоПоФормату(Итог * мРаздел5.Области["П000050002010" + "_" + НомерСтроки].Значение / 100);
					
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

	ВзаимныеПереходыПозиций(ОбластьИмя);

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

// ПроверитьСоотношенияПоказателей
// Функция перенаправляет вызовы от обработки соотношений.
//
Функция ПроверитьСоотношенияПоказателей(НазваниеОбработки, ОбъектКС, СтруктураПараметров) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	Результат = СтруктураРезультата;

	Если НазваниеОбработки = "ПроверкаПравильностиЗаполненияРаздела12" Тогда
		Результат = ПроверкаПравильностиЗаполненияРаздела12(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаРаздела3" Тогда
		Результат = ПроверкаРаздела3(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаРаздела4" Тогда
		Результат = ПроверкаРаздела4(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаРаздела5" Тогда
		Результат = ПроверкаРаздела5(ОбъектКС, СтруктураПараметров);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьСоотношенияПоказателей

// ПроверкаПравильностиЗаполненияРаздела12
// Функция проверяет на заполненность раздел 1.2 и 2.2 проверяется ИНН и взаимоувязка двух листов
//
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПроверкаПравильностиЗаполненияРаздела12(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел1_2";
	КоммКОшибке = "";

	ТаблКоординатовДляРасш = Новый ТаблицаЗначений;
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаЛЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаПЧ");

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		КолВоСтраницРаздел12 = Док.ДанныеМногостраничныхРазделов[ТребуемыйРаздел].Количество();
		МассивКоординатПустыхЛистов = Новый Массив;
		ТаблСообщений = Новый ТаблицаЗначений;
		ТаблСообщений.Колонки.Добавить("ЭтоОшибка"); // Булево
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
		ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки"); // Таблица, название показателя и значение
		ТаблСообщений.Колонки.Добавить("Описание"); // Текст, выводимый в колонку "Описание нарушения".

		ТекстФормулы = "Проверяется соответствие листов раздела 1.2 и листов раздела 2.2 декларации";

		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов[ТребуемыйРаздел] Цикл
			// Получим ИНН, КПП и КБК с раздела 1.2
			ИННРаздел12 = Раздел.Данные.ИННРаздел12ДляВыгрузки;
			КППРаздел12 = СобратьЗначениеВКвадратиках(Раздел.Данные, "КППРаздел12_");
			КБК12 = СобратьЗначениеВКвадратиках(Раздел.Данные, "КБКРаздел12_");

			НаимПродРаздел12 = Раздел.Данные.П000120000200;
			ОКАТОРаздел12 = СобратьЗначениеВКвадратиках(Раздел.Данные, "КодОКАТОРаздел12_");
			СуммаНалогаРаздел12 = ОбработкаКС.ОкруглитьЧислоПоФормату(Раздел.Данные.СуммаНалогаРаздел1_2);

			// Текущий номер в экземпляре
			НомерТекСтрРаздел12 = Док.ДанныеМногостраничныхРазделов[ТребуемыйРаздел].Индекс(Раздел);
			Попытка
				СтруктураСоответствующегоЛистаРаздела22 = Док.ДанныеМногостраничныхРазделов.Раздел22[НомерТекСтрРаздел12].Данные;
			Исключение
				// Гипотетическая ошибка, когда для раздела 1.2 нет соответствующего листа раздела 2.2
				// В самой декларации листы добавляются и удаляются синхранно, если такая ошибка проявляется,
				// необходимо проверять механизмы декларации по работе с этими разделами.

				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ЭтоОшибка = Истина;
				ТекстФормулы = "Проверяется соответствие листов раздела 1.2 и листов раздела 2.2 декларации";

				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нет соответствующего листа к разделу 1.2 из листов раздела 2.2 декларации");
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "");
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы);
				Продолжить;

			КонецПопытки;

			ИННРаздел22 = СтруктураСоответствующегоЛистаРаздела22.ИННРаздел22ДляВыгрузки;
			КППРаздел22 = СобратьЗначениеВКвадратиках(Раздел.Данные, "КППРаздел22_");
			НаимПродРаздел22 = СтруктураСоответствующегоЛистаРаздела22.П000220001000;
			Раздел22ЕстьЗаполненныеПоказатели = ВРазделе22ЕстьЗаполненныеПоказатели(СтруктураСоответствующегоЛистаРаздела22);
			СуммаНалогаРаздел22 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтруктураСоответствующегоЛистаРаздела22.П000220019006);

			// Определим, есть ли данные в разделах 1.2 и 2.2.
			Если ПустаяСтрока(ИННРаздел12) И ПустаяСтрока(ИННРаздел22)
			   И ПустаяСтрока(КППРаздел12) И ПустаяСтрока(КППРаздел22)
			   И ПустаяСтрока(НаимПродРаздел12) И ПустаяСтрока(НаимПродРаздел22)
			   И ПустаяСтрока(КБК12) И ПустаяСтрока(ОКАТОРаздел12)
			   И (НЕ Раздел22ЕстьЗаполненныеПоказатели) Тогда
				СвязкаРазделов12и22НеДолжноБытьЛистыНеЗаполнены = Истина;
			Иначе
				СвязкаРазделов12и22НеДолжноБытьЛистыНеЗаполнены = Ложь;
			КонецЕсли;

			Если СвязкаРазделов12и22НеДолжноБытьЛистыНеЗаполнены Тогда
				МассивКоординатПустыхЛистов.Добавить(НомерТекСтрРаздел12);
				Продолжить;
			КонецЕсли;

			// Провериим показатели на заполненность ИНН из раздела 1.2 и 2.2.

			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "ИННРаздел12_1";
			НовСтрКоординат.ЗначениеЛЧ = ИННРаздел12;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
			НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

			НовСтрКоординат.ИмяЯчейкиПЧ = "ИННРаздел22_1";
			НовСтрКоординат.ЗначениеПЧ = ИННРаздел22;
			НовСтрКоординат.ИмяЛистаПЧ = "Раздел22";
			НовСтрКоординат.НомерЛистаПЧ = НомерТекСтрРаздел12; // Синхронные страницы.

			// Добавим запись в общую таблицу анализа.
			НовСтр = ТаблСообщений.Добавить();
			Если ПустаяСтрока(ИННРаздел12) И ПустаяСтрока(ИННРаздел22) Тогда
				НовСтр.ЭтоОшибка = Истина;
			Иначе
				НовСтр.ЭтоОшибка = Ложь;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Показатели по строкам 003 Раздела 1.2 и 020 Раздела 2.2 (ИНН продавца) должны быть заполнены";
			НовСтр.ТекстВыводимыйВРасш = "Строка 003 Раздела 1.2 и строка 020 Раздела 2.2";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Не указаны ИНН - налогоплательщика продавца"; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность ИНН

			// Провериим показатели на точно равенство друг другу.
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "ИННРаздел12_1";
			НовСтрКоординат.ЗначениеЛЧ = ИННРаздел12;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
			НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

			НовСтрКоординат.ИмяЯчейкиПЧ = "ИННРаздел22_1";
			НовСтрКоординат.ЗначениеПЧ = ИННРаздел22;
			НовСтрКоординат.ИмяЛистаПЧ = "Раздел22";
			НовСтрКоординат.НомерЛистаПЧ = НомерТекСтрРаздел12; // Синхронные страницы.

			// Добавим запись в общую таблицу анализа.
			НовСтр = ТаблСообщений.Добавить();
			Если ИННРаздел12 <> ИННРаздел22 Тогда
				НовСтр.ЭтоОшибка = Истина;
			Иначе
				НовСтр.ЭтоОшибка = Ложь;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Показатели по строкам 003 Раздела 1.2 и 020 Раздела 2.2 (ИНН продавца) должны быть равны";
			НовСтр.ТекстВыводимыйВРасш = "Строка 003 Раздела 1.2 и строка 020 Раздела 2.2";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Для соответствующих страниц раздела 1.2 и 2.2 указанные ИНН не равны"; // Текст выводимый в колонку "Описание нарушения"
			// Окончаниче проверки на заполненность ИНН

// *******
			Если (НЕ ПустаяСтрока(ИННРаздел12)) Тогда

				// Провериим показатели на точно равенство друг другу.
				ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

				НовСтрКоординат = ТаблКоординатов.Добавить();
				НовСтрКоординат.ИмяЯчейкиЛЧ = "ИННРаздел12_1";
				НовСтрКоординат.ЗначениеЛЧ = ИННРаздел12;
				НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
				НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

				// Добавим запись в общую таблицу анализа.
				НовСтр = ТаблСообщений.Добавить();

				Если РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННРаздел12) Тогда
					НовСтр.ЭтоОшибка = Ложь;
				Иначе
					НовСтр.ЭтоОшибка = Истина;
				КонецЕсли;

				НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка правильности указания ИНН по строке 003 Раздела 1.2";
				НовСтр.ТекстВыводимыйВРасш = "ИНН (Раздел 1.2, строка 003)";
				НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
				НовСтр.Описание = "Не верно указан ИНН налогоплательщика - продавца в разделе 1.2"; // Текст выводимый в колонку "Описание нарушения"
			КонецЕсли;

			// Окончаниче проверки на заполненность ИНН

			// Проверка КПП
			Если (НЕ ПустаяСтрока(КППРаздел12)) Тогда

				// Провериим показатели на точно равенство друг другу.
				ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

				НовСтрКоординат = ТаблКоординатов.Добавить();
				НовСтрКоординат.ИмяЯчейкиЛЧ = "КППРаздел12_1";
				НовСтрКоординат.ЗначениеЛЧ = КППРаздел12;
				НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
				НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

				// Добавим запись в общую таблицу анализа.
				НовСтр = ТаблСообщений.Добавить();

				Если РегламентированнаяОтчетность.КППСоответствуетТребованиям(КППРаздел12) Тогда
					НовСтр.ЭтоОшибка = Ложь;
				Иначе
					НовСтр.ЭтоОшибка = Истина;
				КонецЕсли;

				НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка правильности указания КПП по строке 003 Раздела 1.2";
				НовСтр.ТекстВыводимыйВРасш = "КПП (Раздел 1.2, строка 003)";
				НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
				НовСтр.Описание = "Не верно указан КПП налогоплательщика - продавца в разделе 1.2"; // Текст выводимый в колонку "Описание нарушения"
			КонецЕсли;
			// Окончаниче проверки на заполненность ИНН

// ****
			// Проверка правильности указания КПП в зависимости от ИНН для ФЛ указан КПП не должен.
			Если (НЕ ПустаяСтрока(ИННРаздел12)) Тогда

				// Провериим показатели на точно равенство друг другу.
				ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

				НовСтрКоординат = ТаблКоординатов.Добавить();
				НовСтрКоординат.ИмяЯчейкиЛЧ = "КППРаздел12_1";
				НовСтрКоординат.ЗначениеЛЧ = КППРаздел12;
				НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
				НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

				// Добавим запись в общую таблицу анализа.
				НовСтр = ТаблСообщений.Добавить();

				Если (СтрДлина(ИННРаздел12) = 12) И (НЕ ПустаяСтрока(КППРаздел12)) Тогда
					НовСтр.ЭтоОшибка = Истина;
				Иначе
					НовСтр.ЭтоОшибка = Ложь;
				КонецЕсли;

				НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка необходимости указания КПП по строке 004 Раздела 1.2";
				НовСтр.ТекстВыводимыйВРасш = "КПП (Раздел 1.2, строка 004)";
				НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
				НовСтр.Описание = "КПП налогоплательщика - продавца не должен быть указан, т.к. у физических лиц КПП отсутствует"; // Текст выводимый в колонку "Описание нарушения"
			КонецЕсли;

			// Проверка правильности указания КПП в зависимости от ИНН для ЮЛ указан КПП должен обязательно.
			Если (НЕ ПустаяСтрока(ИННРаздел12)) Тогда

				// Провериим показатели на точно равенство друг другу.
				ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

				НовСтрКоординат = ТаблКоординатов.Добавить();
				НовСтрКоординат.ИмяЯчейкиЛЧ = "КППРаздел12_1";
				НовСтрКоординат.ЗначениеЛЧ = КППРаздел12;
				НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
				НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

				// Добавим запись в общую таблицу анализа.
				НовСтр = ТаблСообщений.Добавить();

				Если (СтрДлина(ИННРаздел12) = 10) И (ПустаяСтрока(КППРаздел12)) Тогда
					НовСтр.ЭтоОшибка = Истина;
				Иначе
					НовСтр.ЭтоОшибка = Ложь;
				КонецЕсли;

				НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка необходимости указания КПП по строке 004 Раздела 1.2";
				НовСтр.ТекстВыводимыйВРасш = "КПП (Раздел 1.2, строка 004)";
				НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
				НовСтр.Описание = "Не указан КПП налогоплательщика (Раздел 1.2, строка 004)"; // Текст выводимый в колонку "Описание нарушения"
			КонецЕсли;

// **************************
			// Проверка правильности указания КПП в зависимости от ИНН для ЮЛ указан КПП должен обязательно.
			// Провериим показатели на точно равенство друг другу.
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "СуммаНалога1";
			НовСтрКоординат.ЗначениеЛЧ = Формат(СуммаНалогаРаздел12, "ЧРД=.;ЧН=0");
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
			НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

			НовСтрКоординат.ИмяЯчейкиПЧ = "П000220019006";
			НовСтрКоординат.ЗначениеПЧ = Формат(СуммаНалогаРаздел22, "ЧРД=.;ЧН=0");
			НовСтрКоординат.ИмяЛистаПЧ = "Раздел22";
			НовСтрКоординат.НомерЛистаПЧ = НомерТекСтрРаздел12;

			// Добавим запись в общую таблицу анализа.
			НовСтр = ТаблСообщений.Добавить();

			Если СуммаНалогаРаздел12 = СуммаНалогаРаздел22 Тогда
				НовСтр.ЭтоОшибка = Ложь;
			Иначе
				НовСтр.ЭтоОшибка = Истина;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Сумма налога, исчисленна к уплате в бюджет (Раздел 1.2, строка 030), должна быть равна сумме налога, подлежащей перечислению налоговым агентом (Раздел 2.2, графа 6, строка 190)";
			НовСтр.ТекстВыводимыйВРасш = "Сумма налога, исчисленна к уплате в бюджет (Раздел 1.2, строка 030), должна быть равна сумме налога, подлежащей перечислению налоговым агентом (Раздел 2.2, графа 6, строка 190)";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации."; // Текст выводимый в колонку "Описание нарушения"

// **************************

			// Проверка правильности указания КПП в зависимости от ИНН для ЮЛ указан КПП должен обязательно.
			// Провериим показатели на точно равенство друг другу.
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000120000200";
			НовСтрКоординат.ЗначениеЛЧ = НаимПродРаздел12;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел1_2";
			НовСтрКоординат.НомерЛистаЛЧ = НомерТекСтрРаздел12;

			// Добавим запись в общую таблицу анализа.
			НовСтр = ТаблСообщений.Добавить();

			Если (ПустаяСтрока(НаимПродРаздел12)) Тогда
				НовСтр.ЭтоОшибка = Истина;
			Иначе
				НовСтр.ЭтоОшибка = Ложь;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка заполнения строки 002 Раздела 1.2";
			НовСтр.ТекстВыводимыйВРасш = "Показатель по строке 002 Раздела 1.2";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Не указано наименование налогоплательщика - продавца (Раздел 1.2, строка 002)"; // Текст выводимый в колонку "Описание нарушения"

		КонецЦикла;

		// Выводим данные об ошибках
		Для каждого Запись Из ТаблСообщений Цикл
			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
			// Регистрируем формулу
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(Запись.ТекстВыводимыйВРасш);
			// Регистрируем показатели
			НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиЛЧ, "РегламентированныйОтчетНДС"));
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиЛЧ
															 , НазваниеПоказателя
															  , Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ
															  , ""
															  , Стр.СсылкаНаРО
															  , Запись.ТаблицаДляРасшифровки[0].ИмяЛистаЛЧ
															  , Неопределено
															  , Строка(Запись.ТаблицаДляРасшифровки[0].НомерЛистаЛЧ + 1));

			Если Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ <> Неопределено Тогда
				ПраваяЧастьЕсть = Истина;
			Иначе
				ПраваяЧастьЕсть = Ложь;
			КонецЕсли;

			Если ПраваяЧастьЕсть Тогда
				НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ, "РегламентированныйОтчетНДС"));

			// В некоторых проверках правой части может не быть, поэтому делаем проверку.
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ
																 , НазваниеПоказателя
																  , Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ
																  , ""
																  , Стр.СсылкаНаРО
																  , Запись.ТаблицаДляРасшифровки[0].ИмяЛистаПЧ
																  , Неопределено
																  , Строка(Запись.ТаблицаДляРасшифровки[0].НомерЛистаПЧ + 1));
			КонецЕсли;

			Описание = Запись.Описание;
			Если ПраваяЧастьЕсть Тогда
				Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ = ?(НЕ ЗначениеЗаполнено(Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ), "Пустое значение", Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ);
			КонецЕсли;
			Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ = ?(НЕ ЗначениеЗаполнено(Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ), "Пустое значение", Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ);
			Если ПраваяЧастьЕсть Тогда
				РасшифровкаТекст = Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ + " = " + Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ + ", страница № " + Строка(Запись.ТаблицаДляРасшифровки[0].НомерЛистаЛЧ + 1);
			Иначе
				РасшифровкаТекст = Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ + ", страница № " + Строка(Запись.ТаблицаДляРасшифровки[0].НомерЛистаЛЧ + 1);
			КонецЕсли;

			НомерФормулыРасшифровки = ОбработкаКС.мСчетчикФормулДляРасшифровок;
			ЭтоОшибка =Запись.ЭтоОшибка;

			Если ЭтоОшибка Тогда
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			КонецЕсли;

			ТекстовоеПредставлениеФормулы = Запись.ТекстВыводимыйНаОсновнойЛист;

			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Описание);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаТекст);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		КонецЦикла;
		Если МассивКоординатПустыхЛистов.Количество() > 0 И КолВоСтраницРаздел12 > 1 Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;

			Расшифровка = "";
			Для каждого Зап Из МассивКоординатПустыхЛистов Цикл
				Расшифровка = ?(Расшифровка = "", "", Расшифровка + ", ") + Строка(Зап + 1);
			КонецЦикла;

			Если Найти(Расшифровка, ",") > 0 Тогда
				Обращение = "Номера страниц: ";
			Иначе
				Обращение = "Номер страницы: ";
			КонецЕсли;

			ТекстовоеПредставлениеФормулы = "Найдены незаполненные экземпляры раздела 1.2 и 2.2. " + Обращение + Расшифровка;

			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Обращение + Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Истина);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Проверка заполнения связанных разделов 1.2 и 2.2 декларации. Наличие пустых экземпляров разделов");

		КонецЕсли;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаПравильностиЗаполненияРаздела12

// ПроверкаРаздела3
//
Функция ПроверкаРаздела3(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел3";

	ТаблКоординатовДляРасш = Новый ТаблицаЗначений;
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяЛЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаПЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяПЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиПЧ2");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеПЧ2");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаПЧ2");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаПЧ2");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяПЧ2");

	ТаблКоординатовДляРасш.Колонки.Добавить("ПолнаяРасшифровка");

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		ТаблСообщений = Новый ТаблицаЗначений;
		ТаблСообщений.Колонки.Добавить("ЭтоОшибка"); // Булево
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
		ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки"); // Таблица, название показателя и значение
		ТаблСообщений.Колонки.Добавить("Описание"); // Текст, выводимый в колонку "Описание нарушения".

		ТекстФормулы = "Проверка Раздела 3";

		НакопительнаяСуммаКолонка6 = 0;
		НакопительнаяСуммаКолонка7 = 0;
		НакопительнаяСуммаКолонка8 = 0;

		ТаблицаДляИтоговыхПроверок = Новый ТаблицаЗначений;
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки6");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки7");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки8");

		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение6");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение7");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение8");

		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название6");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название7");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название8");

		Для каждого СтрокаМнЧ Из Док.ДанныеМногострочныхРазделов.П0000300010 Цикл
			НаименованиеОрг = СтрокаМнЧ.П000030001002;
			ИННОрг = СтрокаМнЧ.П000030001003;
			КППОрг = СтрокаМнЧ.П000030001004;
			Адрес = СтрокаМнЧ.П000030001005;
			СуммаКолонка6 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000030001006);
			СуммаКолонка7 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000030001007);
			СуммаКолонка8 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000030001008);

			НакопительнаяСуммаКолонка6 = НакопительнаяСуммаКолонка6 + СуммаКолонка6;
			НакопительнаяСуммаКолонка7 = НакопительнаяСуммаКолонка7 + СуммаКолонка7;
			НакопительнаяСуммаКолонка8 = НакопительнаяСуммаКолонка8 + СуммаКолонка8;

			НомСтр = Док.ДанныеМногострочныхРазделов.П0000300010.Индекс(СтрокаМнЧ) + 1;
			НомСтрСтр = Формат(НомСтр, "ЧРД=.;ЧН=0;ЧО=0");

			// Проверим на правильность указания ИНН
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000030001003_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеЛЧ = ИННОрг;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаЛЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяЛЧ = "ИНН по строке " + НомСтрСтр + ", таблицы Раздела 3.";

			Если (ПустаяСтрока(ИННОрг))
			   И (ПустаяСтрока(НаименованиеОрг))
			   И (ПустаяСтрока(КППОрг))
			   И (ПустаяСтрока(Адрес))
			   И(СуммаКолонка6 = 0)
			   И(СуммаКолонка7 = 0)
			   И(СуммаКолонка8 = 0) Тогда
				// Считаме строчку не заполненной, пропускаем.
				ТекущаяСтрокаМнЧНеЗаполнена = Истина;
			Иначе
				ТекущаяСтрокаМнЧНеЗаполнена = Ложь;
			КонецЕсли;

			Если ТекущаяСтрокаМнЧНеЗаполнена Тогда
				Продолжить;
			КонецЕсли;

			// Добавим запись в общую таблицу анализа.
			НовСтр = ТаблСообщений.Добавить();

			Если РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННОрг) Тогда
				НовСтр.ЭтоОшибка = Ложь;
			Иначе
				НовСтр.ЭтоОшибка = Истина;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка правильности указания ИНН";
			НовСтр.ТекстВыводимыйВРасш = "ИНН";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Неверно указан ИНН в строке " + НомСтрСтр + " основной таблицы Раздела 3."; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность ИНН

			// Добавим запись в общую таблицу анализа.

			// Проверим на правильность указания КПП
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000030001004_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеЛЧ = КППОрг;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаЛЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяЛЧ = "КПП по строке " + НомСтрСтр + ", таблицы Раздела 3.";

			НовСтр = ТаблСообщений.Добавить();

			Если РегламентированнаяОтчетность.КППСоответствуетТребованиям(КППОрг) Тогда
				НовСтр.ЭтоОшибка = Ложь;
			Иначе
				НовСтр.ЭтоОшибка = Истина;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка правильности указания КПП";
			НовСтр.ТекстВыводимыйВРасш = "КПП";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Неверно указан КПП в строке " + НомСтрСтр + ", основной таблицы Раздела 3."; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность КПП

			// Проверим на правильность указания наименование организации
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000030001002_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеЛЧ = НаименованиеОрг;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаЛЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяЛЧ = "Наименование отделения организации по строке " + НомСтрСтр + ", таблицы Раздела 3.";

			НовСтр = ТаблСообщений.Добавить();

			Если ПустаяСтрока(НаименованиеОрг) Тогда
				НовСтр.ЭтоОшибка = Истина;
			Иначе
				НовСтр.ЭтоОшибка = Ложь;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка указания наименования отделения организации (колонка № 2) в таблице Раздела 3";
			НовСтр.ТекстВыводимыйВРасш = "Наименование отделения организации";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Показатель по строке " + НомСтрСтр + ", основной таблицы Раздела 3 -""Наименование отделения организации"" не заполнен."; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность Наименование организации

			// Проверим на правильность указания адреса, пустой и отсутствие 9-ти зпт.
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000030001005_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеЛЧ = Адрес;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаЛЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяЛЧ = "Адрес отделения по строке " + НомСтрСтр + ", таблицы Раздела 3.";

			НовСтр = ТаблСообщений.Добавить();

			Если ПустаяСтрока(Адрес) ИЛИ (СтрЧислоВхождений(Адрес, ",") <> 9 И СтрЧислоВхождений(Адрес, ",") <> 12) Тогда
				НовСтр.ЭтоОшибка = Истина;
			Иначе
				НовСтр.ЭтоОшибка = Ложь;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Проверка правильности указания адреса (колонка № 5) в таблице Раздела 3";
			НовСтр.ТекстВыводимыйВРасш = "Адрес, указанный по строке " + НомСтрСтр + ", таблицы Раздела 3";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Незаполнен или неверно указан адрес отделения. Строка № " + НомСтрСтр + ", основной таблицы Раздела 3 (колонка № 5)"; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность Наименование организации

			// Проверим на правильность указания адреса, пустой и отсутствие 9-ти зпт.
			ТаблКоординатов = ТаблКоординатовДляРасш.Скопировать();

			НовСтрКоординат = ТаблКоординатов.Добавить();
			НовСтрКоординат.ИмяЯчейкиЛЧ = "П000030001008_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеЛЧ = СуммаКолонка8;
			НовСтрКоординат.ИмяЛистаЛЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаЛЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяЛЧ = "Сумма налога, подлежащая уплате/возмещению (строка " + НомСтрСтр + "), таблицы Раздела 3.";

			НовСтрКоординат.ИмяЯчейкиПЧ = "П000030001006_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеПЧ = СуммаКолонка6;
			НовСтрКоординат.ИмяЛистаПЧ = "Раздел3";
			НовСтрКоординат.НомерЛистаПЧ = Неопределено;
			НовСтрКоординат.НазваниеПоказателяПЧ = "Сумма налога, исчисленная по операциям, подлежащим налогообложению (строка " + НомСтрСтр + "), таблицы Раздела 3.";

			НовСтрКоординат.ИмяЯчейкиПЧ2 = "П000030001007_" + НомСтрСтр;
			НовСтрКоординат.ЗначениеПЧ2 = СуммаКолонка7;
			НовСтрКоординат.ИмяЛистаПЧ2 = "Раздел3";
			НовСтрКоординат.НомерЛистаПЧ2 = Неопределено;
			НовСтрКоординат.НазваниеПоказателяПЧ2 = "Сумма налоговых вычетов (строка " + НомСтрСтр + "), таблицы Раздела 3.";

			СуммаКолонка8С = Формат(СуммаКолонка8, "ЧРД=.;ЧН=0");
			СуммаКолонка6С = Формат(СуммаКолонка6, "ЧРД=.;ЧН=0");
			СуммаКолонка7С = Формат(СуммаКолонка7, "ЧРД=.;ЧН=0");
			РезС = Формат(СуммаКолонка6 - СуммаКолонка7, "ЧРД=.;ЧН=0");

			НовСтрКоординат.ПолнаяРасшифровка = СуммаКолонка8С + " Итог [" + СуммаКолонка8С + "] = " + СуммаКолонка6С + " - " + СуммаКолонка7С + " Итог [" + РезС + "], строка таблицы № " + НомСтрСтр;

			НовСтр = ТаблСообщений.Добавить();

			Если СуммаКолонка8 = СуммаКолонка6 - СуммаКолонка7 Тогда
				НовСтр.ЭтоОшибка = Ложь;
			Иначе
				НовСтр.ЭтоОшибка = Истина;
			КонецЕсли;

			НовСтр.ТекстВыводимыйНаОсновнойЛист = ТекстФормулы + ". Сумма налога, подлежащая уплате/возмещению (Раздел 3, графа 8, строка таблицы " + НомСтрСтр + "), должна быть равна разнице между показателями соответствующей строки графы 6 и 7.";
			НовСтр.ТекстВыводимыйВРасш = "Сумма налога, подлежащая уплате/возмещению (Раздел 3, графа 6, строка таблицы " + НомСтрСтр + "), должна быть равна разнице между показателями соответствующей строки графы 6 и 7.";
			НовСтр.ТаблицаДляРасшифровки = ТаблКоординатов.Скопировать(); // Структура, название показателя и значение
			НовСтр.Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации. Строка " + НомСтрСтр + ", основной таблицы Раздела 3 (колонка № 8)"; // Текст выводимый в колонку "Описание нарушения"

			// Окончаниче проверки на заполненность Наименование организации

			Инд = 8;
			Пока Инд >= 6 Цикл
				НовЗап = ТаблицаДляИтоговыхПроверок.Добавить();
				НовЗап["ИмяЯчейки" + Строка(Инд)] = "П00003000100" + Строка(Инд) + "_" + НомСтрСтр;
				НовЗап["Значение" + Строка(Инд)] = ?(Инд = 6, СуммаКолонка6, ?(Инд = 7, СуммаКолонка7, СуммаКолонка8));
				НовЗап["Название" + Строка(Инд)] = ?(Инд = 6, ТаблКоординатов[0].НазваниеПоказателяПЧ, ?(Инд = 7, ТаблКоординатов[0].НазваниеПоказателяПЧ2, ТаблКоординатов[0].НазваниеПоказателяЛЧ));
				Инд = Инд - 1;
			КонецЦикла;
		КонецЦикла;

		// Проверим итоговый цифры по суммам по колонкам 6, 7 и 8. Проверим колонку 8.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Общая сумма налога, подлежащая уплате/возмещению (Раздел 3, графа 8, строка 020), должна быть равна сумме всех заполненных показателей по графе 8.");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000030002008);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000030002008", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000030002008", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел3");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение8 = Неопределено Или Элемент.Значение8 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки8, Элемент.Название8, Элемент.Значение8, "", Стр.СсылкаНаРО, "Раздел3");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение8 < 0, "(", "") + Формат(Элемент.Значение8, "ЧРД=.;ЧН=0") + ?(Элемент.Значение8 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка8, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка8;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Общая сумма налога, подлежащая уплате/возмещению (Раздел 3, графа 8, строка 020), должна быть равна сумме всех заполненных показателей по графе 8.";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		// Проверим итоговый цифры по суммам по колонкам 6, 7 и 8. Проверим колонку 7.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Общая сумма налоговых вычетов (Раздел 3, графа 7, строка 020) должна быть равна сумме всех заполненных показателей по графе 7.");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000030002007);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000030002007", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000030002007", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел3");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение7 = Неопределено Или Элемент.Значение7 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки7, Элемент.Название7, Элемент.Значение7, "", Стр.СсылкаНаРО, "Раздел3");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение7 < 0, "(", "") + Формат(Элемент.Значение7, "ЧРД=.;ЧН=0") + ?(Элемент.Значение7 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка7, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка7;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Общая сумма налоговых вычетов (Раздел 3, графа 7, строка 020) должна быть равна сумме всех заполненных показателей по графе 7.";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		// Проверим итоговый цифры по суммам по колонкам 6, 7 и 8. Проверим колонку 6.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Общая сумма налога, исчисленная по операциям, подлежащим налогообложению (Раздел 3, графа 6, строка 020), должна быть равна сумме всех заполненных показателей по графе 6.");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000030002006);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000030002006", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000030002006", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел3");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение6 = Неопределено Или Элемент.Значение6 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки6, Элемент.Название6, Элемент.Значение6, "", Стр.СсылкаНаРО, "Раздел3");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение6 < 0, "(", "") + Формат(Элемент.Значение6, "ЧРД=.;ЧН=0") + ?(Элемент.Значение6 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка6, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка6;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Общая сумма налога, исчисленная по операциям, подлежащим налогообложению (Раздел 3, графа 6, строка 020), должна быть равна сумме всех заполненных показателей по графе 6.";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		// Выводим данные об остальных ошибках, которые записаны в таблице ТаблСообщений.
		Для каждого Запись Из ТаблСообщений Цикл
			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
			// Регистрируем формулу
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(Запись.ТекстВыводимыйВРасш);
			// Регистрируем показатели
			Если Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяЛЧ = Неопределено Тогда
				НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиЛЧ, "РегламентированныйОтчетНДС"));
			Иначе
				НазваниеПоказателя = Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяЛЧ;
			КонецЕсли;

			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиЛЧ
															 , НазваниеПоказателя
															  , Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ
															  , ""
															  , Стр.СсылкаНаРО
															  , Запись.ТаблицаДляРасшифровки[0].ИмяЛистаЛЧ
															  , Неопределено
															  , Неопределено); // Номер листа

			Если Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ <> Неопределено Тогда
				ПраваяЧастьЕсть = Истина;
			Иначе
				ПраваяЧастьЕсть = Ложь;
			КонецЕсли;

			Если ПраваяЧастьЕсть Тогда
				Если Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяПЧ = Неопределено Тогда
					НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ, "РегламентированныйОтчетНДС"));
				Иначе
					НазваниеПоказателя = Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяПЧ;
				КонецЕсли;

			// В некоторых проверках правой части может не быть, поэтому делаем проверку.
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ
																 , НазваниеПоказателя
																  , Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ
																  , ""
																  , Стр.СсылкаНаРО
																  , Запись.ТаблицаДляРасшифровки[0].ИмяЛистаПЧ
																  , Неопределено
																  , Неопределено);
			КонецЕсли;

// **
			Если Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ2 <> Неопределено Тогда
				ПраваяЧастьЕсть2 = Истина;
			Иначе
				ПраваяЧастьЕсть2 = Ложь;
			КонецЕсли;

			Если ПраваяЧастьЕсть2 Тогда
				Если Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяПЧ2 = Неопределено Тогда
					НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ2, "РегламентированныйОтчетНДС"));
				Иначе
					НазваниеПоказателя = Запись.ТаблицаДляРасшифровки[0].НазваниеПоказателяПЧ2;
				КонецЕсли;

			// В некоторых проверках правой части может не быть, поэтому делаем проверку.
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Запись.ТаблицаДляРасшифровки[0].ИмяЯчейкиПЧ2
																 , НазваниеПоказателя
																  , Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ2
																  , ""
																  , Стр.СсылкаНаРО
																  , Запись.ТаблицаДляРасшифровки[0].ИмяЛистаПЧ2
																  , Неопределено
																  , Неопределено);
			КонецЕсли;

// **
			Описание = Запись.Описание;

			Если ПраваяЧастьЕсть Тогда
				Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ = ?(НЕ ЗначениеЗаполнено(Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ), "Пустое значение", Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ);
			КонецЕсли;

			Если ПраваяЧастьЕсть2 Тогда
				Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ2 = ?(НЕ ЗначениеЗаполнено(Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ2), "Пустое значение", Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ2);
			КонецЕсли;

			Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ = ?(НЕ ЗначениеЗаполнено(Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ), "Пустое значение", Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ);

			Если Запись.ТаблицаДляРасшифровки[0].ПолнаяРасшифровка = Неопределено Тогда
				Если ПраваяЧастьЕсть Тогда
					РасшифровкаТекст = Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ + " = " + Запись.ТаблицаДляРасшифровки[0].ЗначениеПЧ;
				Иначе
					РасшифровкаТекст = Запись.ТаблицаДляРасшифровки[0].ЗначениеЛЧ;
				КонецЕсли;
			Иначе
				РасшифровкаТекст = Запись.ТаблицаДляРасшифровки[0].ПолнаяРасшифровка;
			КонецЕсли;

			НомерФормулыРасшифровки = ОбработкаКС.мСчетчикФормулДляРасшифровок;
			ЭтоОшибка =Запись.ЭтоОшибка;

			Если ЭтоОшибка Тогда
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			КонецЕсли;

			ТекстовоеПредставлениеФормулы = Запись.ТекстВыводимыйНаОсновнойЛист;

			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Описание);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаТекст);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела3

// ПроверкаРаздела4
//
Функция ПроверкаРаздела4(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел4";

	ТаблКоординатовДляРасш = Новый ТаблицаЗначений;
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяЛЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ПолнаяРасшифровка");

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		ТаблСообщений = Новый ТаблицаЗначений;
		ТаблСообщений.Колонки.Добавить("ЭтоОшибка"); // Булево
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
		ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки"); // Таблица, название показателя и значение
		ТаблСообщений.Колонки.Добавить("Описание"); // Текст, выводимый в колонку "Описание нарушения".

		ТекстФормулы = "Проверка Раздела 4";

		НакопительнаяСуммаКолонка2 = 0;
		НакопительнаяСуммаКолонка3 = 0;
		НакопительнаяСуммаКолонка4 = 0;

		ТаблицаДляИтоговыхПроверок = Новый ТаблицаЗначений;
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки2");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки3");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("ИмяЯчейки4");

		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение2");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение3");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Значение4");

		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название2");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название3");
		ТаблицаДляИтоговыхПроверок.Колонки.Добавить("Название4");

		НазваниеКолонка2 = "Стоимость реализованных (переданных) товаров (работ, услуг), без НДС";
		НазваниеКолонка3 = "Стоимость приобретенных товаров (работ, услуг), необлагаемых НДС";
		НазваниеКолонка4 = "Сумма НДС по приобретенным товарам (работам, услугам), не подлежащая вычету";

		Для каждого СтрокаМнЧ Из Док.ДанныеМногострочныхРазделов.П0000400010 Цикл
			СуммаКолонка2 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000040001002);
			СуммаКолонка3 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000040001003);
			СуммаКолонка4 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000040001004);

			НакопительнаяСуммаКолонка2 = НакопительнаяСуммаКолонка2 + СуммаКолонка2;
			НакопительнаяСуммаКолонка3 = НакопительнаяСуммаКолонка3 + СуммаКолонка3;
			НакопительнаяСуммаКолонка4 = НакопительнаяСуммаКолонка4 + СуммаКолонка4;

			НомСтр = Док.ДанныеМногострочныхРазделов.П0000400010.Индекс(СтрокаМнЧ) + 1;
			НомСтрСтр = Формат(НомСтр, "ЧРД=.;ЧН=0;ЧО=0");

			Инд = 4;
			Пока Инд >= 2 Цикл
				НовЗап = ТаблицаДляИтоговыхПроверок.Добавить();
				НовЗап["ИмяЯчейки" + Строка(Инд)] = "П00004000100" + Строка(Инд) + "_" + НомСтрСтр;
				НовЗап["Значение" + Строка(Инд)] = ?(Инд = 2, СуммаКолонка2, ?(Инд = 3, СуммаКолонка3, СуммаКолонка4));
				НовЗап["Название" + Строка(Инд)] = ?(Инд = 2, НазваниеКолонка2, ?(Инд = 3, НазваниеКолонка3, НазваниеКолонка4)) + " (строка № " + НомСтрСтр + ")";
				Инд = Инд - 1;
			КонецЦикла;
		КонецЦикла;

		// Проверим итоговый цифры по суммам по колонкам 2, 3 и 4. Проверим колонку 2.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Итоговая стоимость реализованных (переданных) товаров (работ, услу), без НДС (Раздел 4, колонка 2, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.П000040002002);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000040002002", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000040002002", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел4");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение2 = Неопределено Или Элемент.Значение2 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки2, Элемент.Название2, Элемент.Значение2, "", Стр.СсылкаНаРО, "Раздел4");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение2 < 0, "(", "") + Формат(Элемент.Значение2, "ЧРД=.;ЧН=0") + ?(Элемент.Значение2 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка2, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка2;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Итоговая стоимость реализованных (переданных) товаров (работ, услу), без НДС (Раздел 4, колонка 2, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

		// Проверим итоговый цифры по суммам по колонкам 2, 3 и 4. Проверим колонку 3.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Стоимость приобретенных товаров (работ, услуг), необлагаемых НДС (Раздел 4, колонка 3, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.П000040002003);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000040002003", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000040002003", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел4");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение3 = Неопределено Или Элемент.Значение3 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки3, Элемент.Название3, Элемент.Значение3, "", Стр.СсылкаНаРО, "Раздел4");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение3 < 0, "(", "") + Формат(Элемент.Значение3, "ЧРД=.;ЧН=0") + ?(Элемент.Значение3 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка3, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка3;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Итоговая стоимость приобретенных товаров (работ, услуг), необлагаемых НДС (Раздел 4, колонка 3, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

// ********
		// Проверим итоговый цифры по суммам по колонкам 2, 3 и 4. Проверим колонку 4.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Итоговая сумма НДС по приобретенным товарам (работам, услугам), не подлежащая вычету (раздел 4, графа 4, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки");

		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.П000040002004);
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("П000040002004", "РегламентированныйОтчетНДС"));
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000040002004", НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел4");

		РасшифровкаКолонки = "";
		Для каждого Элемент из ТаблицаДляИтоговыхПроверок Цикл
			Если Элемент.Значение4 = Неопределено Или Элемент.Значение4 = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Элемент.ИмяЯчейки4, Элемент.Название4, Элемент.Значение4, "", Стр.СсылкаНаРО, "Раздел4");
			РасшифровкаКолонки = ?(РасшифровкаКолонки = "", "", РасшифровкаКолонки + " + ") + ?(Элемент.Значение4 < 0, "(", "") + Формат(Элемент.Значение4, "ЧРД=.;ЧН=0") + ?(Элемент.Значение4 < 0, ")", "");
		КонецЦикла;
		РасшифровкаКолонки = РасшифровкаКолонки + " Итог [" + Формат(НакопительнаяСуммаКолонка4, "ЧРД=.;ЧН=0") + "]";

		ПраваяЧасть = НакопительнаяСуммаКолонка4;
		РасшифровкаКолонки = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + РасшифровкаКолонки;

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		ТекстовоеПредставлениеФормулы = "Итоговая сумма НДС по приобретенным товарам (работам, услугам), не подлежащая вычету (раздел 4, графа 4, строка 020), должна быть равна арифметической сумме показателей по каждой строке соответствующей колонки";
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.");
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), РасшифровкаКолонки);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела4

// ПроверкаРаздела5
//
Функция ПроверкаРаздела5(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел5";

	ТаблКоординатовДляРасш = Новый ТаблицаЗначений;
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяЛЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ПолнаяРасшифровка");

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		ТаблСообщений = Новый ТаблицаЗначений;
		ТаблСообщений.Колонки.Добавить("ЭтоОшибка"); // Булево
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
		ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки"); // Таблица, название показателя и значение
		ТаблСообщений.Колонки.Добавить("Описание"); // Текст, выводимый в колонку "Описание нарушения".

		ТекстФормулы = "Проверка Раздела 5";

		НазваниеКолонка7 = "Сумма НДС, принятая к вычету по объекту недвижимости";
		НазваниеКолонка9 = "1/10 часть суммы НДС, принятой к вычету по объекту недвижимости";
		НазваниеКолонка10 = "Доля отгруженных товаров, имущественных прав, не облагаемых НДС в общей стоимости отгрузки";
		НазваниеКолонка11 = "Сумма НДС, подлежащая восстановлению и уплате в бюджет";

		Для каждого Страница Из Док.ДанныеМногостраничныхРазделов.Раздел5 Цикл
			НомерСтраницы = Строка(Док.ДанныеМногостраничныхРазделов.Раздел5.Индекс(Страница) + 1);
			Для каждого СтрокаМнЧ Из Страница.ДанныеДопСтрок Цикл
				НомСтр = Страница.ДанныеДопСтрок.Индекс(СтрокаМнЧ) + 1;
				НомСтрСтр = Формат(НомСтр, "ЧРД=.;ЧН=0;ЧО=0");

				Если ПустаяСтрока(СтрокаМнЧ["П000050002001"])
				 И ПустаяСтрока(СтрокаМнЧ["П000050002002"])
				 И ПустаяСтрока(СтрокаМнЧ["П000050002003"])
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000050002004"])
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000050002005"])
				 И СтрокаМнЧ["П000050002006"] = 0
				 И СтрокаМнЧ["П000050002007"] = 0
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000050002008"])
				 И СтрокаМнЧ["П000050002009"] = 0
				 И СтрокаМнЧ["П000050002010"] = 0
				 И СтрокаМнЧ["П000050002011"] = 0 Тогда
					ПропуститьДанные = Истина;
				Иначе
					ПропуститьДанные = Ложь;
				КонецЕсли;

				Если ПропуститьДанные Тогда
					// Вся строка многострочной части не заполнена. Пропускаем строку.
					Продолжить;
				КонецЕсли;

				// Проверяем колонку 9.
				ОписаниеКС = "Значение в колонке 9, таблицы в Разделе 5, должно быть равно 1/10 части суммы НДС, принятой к вычету по объекту недвижимости";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				// Зарегистрируем левую часть соотношения.
				ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000050002009"]);
				НазваниеПоказателя = НазваниеКолонка9 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002009_" + НомСтрСтр, НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				ПраваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000050002007"]);
				ПраваяЧастьРезультат = ОбработкаКС.ОкруглитьЧислоПоФормату(ПраваяЧасть * 1/10);
				ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
				ПраваяЧастьРезультатСтр = Формат(ПраваяЧастьРезультат, "ЧРД=.;ЧН=0");

				// Добавляем расшифровку для колонки 7.
				НазваниеПоказателя = "Сумма НДС, принятая к вычету по объекту недвижимости" + " (колонка № 7, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002007_" + НомСтрСтр, НазваниеПоказателя, ПраваяЧасть, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + ПраваяЧастьСтр + " * 1/10 Итог[" + ПраваяЧастьРезультатСтр + "]";

				// Проверяем соотношение только в том случае, если колонка 8 в таблице заполнена.
				// В соответствии с инструкцией по заполнению, если колонка 8 не заполнена, то 9-11 должны быть пустыми.
				Если (ЛеваяЧасть <> ПраваяЧастьРезультат) И (ЗначениеЗаполнено(СтрокаМнЧ["П000050002008"])) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации. Строка № " + НомСтрСтр);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Окончание проверки колонки 9.

				// Проверяем колонку 11.
				ОписаниеКС = "Значение в колонке 11, таблицы в Разделе 5, должно быть равно произведению колонок 9 и 10, деленное на 100";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				// Зарегистрируем левую часть соотношения.
				ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000050002011"]);

				Колонка9 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000050002009"]);
				Колонка10 = СтрокаМнЧ["П000050002010"];

				ПраваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Колонка9 * Колонка10 / 100);
				ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");

				Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = (" + Колонка9 + " * " + Колонка10 + " / 100 Итог[" + ПраваяЧастьСтр + "]";

				НазваниеПоказателя = НазваниеКолонка11 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002011_" + НомСтрСтр, НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				НазваниеПоказателя = НазваниеКолонка9 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002009_" + НомСтрСтр, НазваниеПоказателя, Колонка9, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				НазваниеПоказателя = НазваниеКолонка10 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002010_" + НомСтрСтр, НазваниеПоказателя, Колонка10, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				// Проверяем соотношение только в том случае, если колонка 8 в таблице заполнена.
				// В соответствии с инструкцией по заполнению, если колонка 8 не заполнена, то 9-11 должны быть пустыми.
				Если (ЛеваяЧасть <> ПраваяЧасть) И (ЗначениеЗаполнено(СтрокаМнЧ["П000050002008"])) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации. Строка № " + НомСтрСтр);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Окончание проверки колонки 11.

				// Проверим правильность указания года в колонке № 1
				Колонка1 = СтрокаМнЧ.П000050002001;

				ОписаниеКС = "В колонке 1, таблицы в Разделе 5 (Экземпляр листа № " + НомерСтраницы + "), должен быть указан год";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Колонка1)) Или (СтрДлина(Колонка1) <> 4) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Календарный год" + " (колонка № 1, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002001_" + НомСтрСтр, НазваниеПоказателя, Колонка1, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Не указан год в колонке № 1 по строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Колонка1);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки колонки 1.

				// Проверим правильность указания года в колонке № 2
				Колонка2 = СтрокаМнЧ.П000050002002;

				ОписаниеКС = "В колонке 2, таблицы в Разделе 5, должен быть указан код объекта недвижимости, состоящий из 7 цифр.";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Колонка2)) Или (СтрДлина(Колонка2) <> 7) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Код объекта недвижимости" + " (колонка № 2, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002002_" + НомСтрСтр, НазваниеПоказателя, Колонка2, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Не указан или неверно указан код объекта недвижимости в колонке № 2 по строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Колонка2);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки колонки 2.

				// Проверим правильность указания заполнения колонок 9-11 в зависимости от даты указанной в колонке 8
				Колонка8 = СтрокаМнЧ.П000050002008;
				Колонка9 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000050002009);
				Колонка10 = СтрокаМнЧ.П000050002010;
				Колонка11 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000050002011);

				ОписаниеКС = "В  случае если у налогоплательщика в течение календарного года, за который составляется Приложение, отсутствуют случаи использования данного объекта недвижимости для осуществления операций, указанных в пункте 2 статьи 170 Кодекса, то в графах 8 - 11 по строке 020 ставятся прочерки.";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (НЕ ЗначениеЗаполнено(Колонка8) И (Колонка9 <> 0 Или Колонка10 <> 0 Или Колонка11 <>0) ) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Дата начала использования объекта для операций указанных в п.2 ст. 170 НК РФ" + " (колонка № 8, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002008_" + НомСтрСтр, НазваниеПоказателя, Формат(Колонка8, "ДЛФ=Д"), "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "1/10 часть суммы НДС, принятой к вычету по объекту недвижимости" + " (колонка № 9, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002009_" + НомСтрСтр, НазваниеПоказателя, Колонка9, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "Доля отгруженных товаров" + " (колонка № 10, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002010_" + НомСтрСтр, НазваниеПоказателя, Колонка10, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "Сумма НДС, подлежащая восстановлению и уплате в бюджет" + " (колонка № 11, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000050002011_" + НомСтрСтр, НазваниеПоказателя, Колонка11, "", Стр.СсылкаНаРО, "Раздел5", Неопределено, НомерСтраницы);

				Колонка9С = Формат(Колонка9, "ЧРД=.;ЧН=0;ЧО=0");
				Колонка10С = Формат(Колонка10, "ЧРД=.;ЧН=0;ЧО=0");
				Колонка11С = Формат(Колонка11, "ЧРД=.;ЧН=0;ЧО=0");

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "В строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы + ", колонки 9-11 должны быть пустыми");
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Колонки 9-11: " + Колонка9С + ", " + Колонка10С + ", " + Колонка11С);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки правильности заполнения колонок 9-11 в зависимости от даты в колонке 8.

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела5

// СобратьЗначениеВКвадратиках
//
Функция СобратьЗначениеВКвадратиках(СтруктураДанных, Префикс)
	Инд = 1;
	Результат = "";
	Пока СтруктураДанных.Свойство(Префикс + Строка(Инд)) Цикл
		Результат = Результат + СтруктураДанных[Префикс + Строка(Инд)];
		Инд = Инд + 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции // СобратьЗначениеВКвадратиках

// ВРазделе22ЕстьЗаполненныеПоказатели
// Функция проверяет есть ли заполненные данные в структуре экземпляра раздела 2.2.
// Параметры:
//  СтруктураДанныхРаздела22 - структура данных
// Возвращаемое значение:
//  Булево. Истана - в разделе есть заполенные показатели, ложь - нет.
//
Функция ВРазделе22ЕстьЗаполненныеПоказатели(СтруктураДанныхРаздела22)
	Результат = Ложь;
	Для каждого Пок Из СтруктураДанныхРаздела22 Цикл
		Если (Прав(Пок.Ключ, 3) = "004") Или (Прав(Пок.Ключ, 3) = "006") Тогда
			Если Пок.Значение <> 0 Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ВРазделе22ЕстьЗаполненныеПоказатели

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// ПолеТабличногоДокументаРаздел1_П000120000200ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел1_П000120000200ПриИзменении(Элемент)

	мРаздел22.Области.П000220001000.Значение = мРаздел1_2.Области.П000120000200.Значение;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_П000120000200ПриИзменении

// ПолеТабличногоДокументаРаздел22_П000220001000ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел22_П000220001000ПриИзменении(Элемент)

	мРаздел1_2.Области.П000120000200.Значение = мРаздел22.Области.П000220001000.Значение;

КонецПроцедуры // ПолеТабличногоДокументаРаздел22_П000220001000ПриИзменении

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2006Кв1";

мКБК2005 = Новый ТаблицаЗначений;
мКБК2005.Колонки.Добавить("Код",,, 20);
мКБК2005.Колонки.Добавить("Название",,, 55);

мКБК2006 = Новый ТаблицаЗначений;
мКБК2006.Колонки.Добавить("Код",,, 20);
мКБК2006.Колонки.Добавить("Название",,, 55);

мНдсОперацииРаздел4 = Новый ТаблицаЗначений;
мНдсОперацииРаздел4.Колонки.Добавить("Код",,, 8);
мНдсОперацииРаздел4.Колонки.Добавить("Название",,, 55);

мНдсОперацииРаздел5 = Новый ТаблицаЗначений;
мНдсОперацииРаздел5.Колонки.Добавить("Код",,, 8);
мНдсОперацииРаздел5.Колонки.Добавить("Название",,, 55);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповЧисло4_1 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4, 1);

ОписаниеТиповСтрока3  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока4  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока7  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(7);
ОписаниеТиповСтрока9  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);

ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы0  = "П0000300010";
мИдГруппы1  = "П0000400010";
мИдГруппы2  = "П0000500020";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы0 = 7;
КолИсхСтрокИдГруппы1 = 8;
КолИсхСтрокИдГруппы2 = 4;

// структура строк многострочного раздела на странице
СтруктураГруппы0 = Новый ТаблицаЗначений;
СтруктураГруппы0.Колонки.Добавить("П000030001001", ОписаниеТиповСтрока3);
СтруктураГруппы0.Колонки.Добавить("П000030001002", ОписаниеТиповСтрока254);
СтруктураГруппы0.Колонки.Добавить("П000030001003", ОписаниеТиповСтрока10);
СтруктураГруппы0.Колонки.Добавить("П000030001004", ОписаниеТиповСтрока9);
СтруктураГруппы0.Колонки.Добавить("П000030001005", ОписаниеТиповСтрока254);
СтруктураГруппы0.Колонки.Добавить("П000030001006", мОписаниеТиповЧислоЕ);
СтруктураГруппы0.Колонки.Добавить("П000030001007", мОписаниеТиповЧислоЕ);
СтруктураГруппы0.Колонки.Добавить("П000030001008", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000040001001", ОписаниеТиповСтрока7);
СтруктураГруппы1.Колонки.Добавить("П000040001002", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000040001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000040001004", мОписаниеТиповЧислоЕ);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000050002001", ОписаниеТиповСтрока4);
СтруктураГруппы2.Колонки.Добавить("П000050002002", ОписаниеТиповСтрока7);
СтруктураГруппы2.Колонки.Добавить("П000050002003", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000050002004", ОписаниеТиповДата);
СтруктураГруппы2.Колонки.Добавить("П000050002005", ОписаниеТиповДата);
СтруктураГруппы2.Колонки.Добавить("П000050002006", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050002007", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050002008", ОписаниеТиповДата);
СтруктураГруппы2.Колонки.Добавить("П000050002009", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050002010", ОписаниеТиповЧисло4_1);
СтруктураГруппы2.Колонки.Добавить("П000050002011", мОписаниеТиповЧислоЕ);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы0, СтруктураГруппы0);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы0, КолИсхСтрокИдГруппы0);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыФизЛиц.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Элемент структуры - данные дополнительных страниц Раздела 1.2
ТаблицаСтраницыРаздела1_2 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела1_2.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2", ТаблицаСтраницыРаздела1_2);

// Элемент структуры - данные дополнительных страниц Раздела 2.2
ТаблицаСтраницыРаздела22 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела22.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Раздел22", ТаблицаСтраницыРаздела22);

// Элемент структуры - данные дополнительных страниц Раздела 2

// Раздел 2 не является многостраничным документом.

// Элемент структуры - данные дополнительных страниц Раздела 5
ТаблицаСтраницыРаздела5 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела5.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Раздел5", ТаблицаСтраницыРаздела5);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2006"; // Первая версия


// Код отчета, равен КНД
мКодОтчета   = 1151001;

РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1_1");
ОбязРазделов.Добавить("Раздел21");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00005", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151001";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ДОБАВЛЕННУЮ СТОИМОСТЬ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
