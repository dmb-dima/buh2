////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличных документов
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел3_Прил1;
Перем мРаздел3_Прил2;
Перем мРаздел4;
Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;

// Хранит имена многострочных разделов
Перем мИдГруппы31, мИдГруппы32, мИдГруппы4, мИдГруппы5, мИдГруппы6, мИдГруппы7;
Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 16, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем СписокСтатейЗатрат;
Перем ПС;
Перем СпП Экспорт;

Перем ЦветЗаполняетсяАвтоАрифметика;
//Перем мНеВызыватьРасчет;

// Переменная для установки соответствия кода раздела (код показателя по составу) и поля табличного документа раздела.
Перем мСоотвествиеКодаИРаздела;
Перем мСписокОрганизаций;

Перем мБезКонсолидации Экспорт;

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// ПолучитьТаблицуМногостраничногоРаздела
// флМногострочность - Булево, для многостраничных разделов, являющихся многострочными = Истина
// Возвращаемое значение:
//  ТаблицаЗначений, эталонная таблица многостраничного раздела, с одним экземпляром и активной страницей.
//
Функция ПолучитьТаблицуМногостраничногоРаздела(флМногострочность = Ложь)
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление", ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	Если флМногострочность Тогда
		ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");	
	КонецЕсли;
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

	СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
	СтрПерваяСтраница.Представление = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	Возврат ТаблицаСтраницыРаздела;

КонецФункции // ПолучитьТаблицуМногостраничногоРаздела
                
// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную, ТипЗнчСуммы);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант, Показатель = Неопределено)

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если НовыйВариант = 3 И (ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ") Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1			= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	мСвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОписаниеТиповЧисло1);
	//максимальное количество экземпляров (страниц) многостраничного раздела (листа)
	//0-9 (0 - неограниченное количество экземпляров. Значения 1-9 имеют смысл при значении в колонке МногостраничностьВРазделе = Истина)
	
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела", ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел31 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел31.Добавить();
	НовСтр.ИдГруппы = мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;
	
	МнгРаздел32 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел32.Добавить();
	НовСтр.ИдГруппы = мИдГруппы32;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;
	
	МнгРаздел4 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел4.Добавить();
	НовСтр.ИдГруппы = мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;
	
	МнгРаздел5 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел5.Добавить();
	НовСтр.ИдГруппы = мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;

	МнгРаздел6 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел6.Добавить();
	НовСтр.ИдГруппы = мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;

	МнгРаздел7 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел7.Добавить();
	НовСтр.ИдГруппы = мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 3;

	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел31;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел32;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел4;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел5;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел6;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел7;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры
                                   
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет цветом фона ячеек 60, 80, 90, 100 на Листе 2
//
Процедура ИзменитьЦветЯчеек()

	КодОперации = СокрЛП(мРаздел2.Области.П000200007003.Значение);
	Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" ИЛИ КодОперации = "" Тогда
		//Если КодОперации = "" Тогда
		//	ИзменитьВариантЗаполненияЯчейки(3, "П000200006003");
		//Иначе		
			Если ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(0, "П000200006003");
			Иначе	
				ИзменитьВариантЗаполненияЯчейки(4, "П000200006003");
			КонецЕсли;
		//КонецЕсли;
		ИзменитьВариантЗаполненияЯчейки(3, "П000200008003");
		ИзменитьВариантЗаполненияЯчейки(3, "П000200009003");
		ИзменитьВариантЗаполненияЯчейки(0, "П000200010003");
		
	Иначе	
		ИзменитьВариантЗаполненияЯчейки(3, "П000200006003");
		ИзменитьВариантЗаполненияЯчейки(5, "П000200008003");
		ИзменитьВариантЗаполненияЯчейки(5, "П000200009003");
		ИзменитьВариантЗаполненияЯчейки(5, "П000200010003");
		мРаздел2.Области.П000200008003.Значение = "";
		мРаздел2.Области.П000200009003.Значение = "";
		мРаздел2.Области.П000200010003.Значение = "";
		
		
	КонецЕсли;
	

КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()
	
	Если СокрЛП(мТитульный.Области.Период1.Значение + мТитульный.Области.Период2.Значение) = "" ИЛИ мСкопированаФорма <> Неопределено Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "22");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "23");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "24");
		
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(мДатаКонцаПериодаОтчета)];
		мТитульный.Области.Период1.Значение = Сред(КодОтчетногоПериода, 1, 1);
		мТитульный.Области.Период2.Значение = Сред(КодОтчетногоПериода, 2, 1);
	КонецЕсли; 
	
	
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	мТитульный.Области.ОтчетГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	// задаем заголовок формы
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);

КонецПроцедуры // ЗаполнитьДатуПодписи()

Процедура ЗаполнитьСведенияОПредставителе(РегистрацияВИФНС = Неопределено)
	
	УполномоченноеЛицоПредставителя = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	ТипПодписанта = "1";
	Если ЗначениеЗаполнено(РегистрацияВИФНС) Тогда
		Если ТипЗнч(РегистрацияВИФНС) = Тип("Строка") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	РегистрацияВИФНС.Код,
			                      |	РегистрацияВИФНС.КПП,
			                      |	РегистрацияВИФНС.Представитель,
			                      |	РегистрацияВИФНС.ДокументПредставителя,
			                      |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя
			                      |ИЗ
			                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
			                      |ГДЕ
			                      |	РегистрацияВИФНС.Код = &Код
			                      |	И РегистрацияВИФНС.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Код", РегистрацияВИФНС);
			Запрос.УстановитьПараметр("Владелец", Организация);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	РегистрацияВИФНС.Код,
			                      |	РегистрацияВИФНС.КПП,
			                      |	РегистрацияВИФНС.Представитель,
			                      |	РегистрацияВИФНС.ДокументПредставителя,
			                      |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя
			                      |ИЗ
			                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
			                      |ГДЕ
			                      |	РегистрацияВИФНС.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", РегистрацияВИФНС);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
			ТипПредставителя = ТипЗнч(Выборка.Представитель);
			Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
				УполномоченноеЛицоПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
				НаименованиеОрганизацииПредставителя = СокрЛП(Выборка.Представитель);
			Иначе
				УполномоченноеЛицоПредставителя = СокрЛП(Выборка.Представитель);
			КонецЕсли;
			ДокументПредставителя = СокрЛП(Выборка.ДокументПредставителя);
			ТипПодписанта = "2";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипПодписанта = "1" тогда
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			УполномоченноеЛицоПредставителя = "";
			НаименованиеОрганизацииПредставителя = "";
			ДокументПредставителя = "";
		Иначе
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			УполномоченноеЛицоПредставителя = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	КонецЕсли;
	
	мТитульный.Области.ПрПодп.Значение = ТипПодписанта;
	мТитульный.Области.ОргПодписант.Значение = УполномоченноеЛицоПредставителя;
	мТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	мТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = ИНН + "-";
		КонецЦикла;
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
			КПП = КПП + "-";
		КонецЦикла;
		
		Для Сч=1 По 9 Цикл
			ПроставитьНаВсехЛистах("ИНН" + Сч + "_", ИНН);
			ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
		КонецЦикла;		
		
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			мТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		// заполняем наименование организации
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		мТитульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		// заполняем телефон организации
		мТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		// заполняем сведения о представителе
		ЗаполнитьСведенияОПредставителе(КодНО);
		
		//заполняем код ОКВЭД
		мТитульный.Области.ОКВЭД.Значение=СокрЛП(СведенияОбОрганизации.ОКВЭД);
		//заполняем код ОКАТО
		мРаздел1.Области.П000100001003.Значение = СведенияОбОрганизации.ОКАТО;
		
	Иначе
		
		// обновляем сведения о руководстве организации
		Если СокрЛП(мТитульный.Области.ПрПодп.Значение) = "1" тогда
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			мТитульный.Области.ОргПодписант.Значение = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = мТитульный.Области.КодИМНС1.Значение + мТитульный.Области.КодИМНС2.Значение
			+ мТитульный.Области.КодИМНС3.Значение + мТитульный.Области.КодИМНС4.Значение;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьЕдиницыИзмерения) * Делитель;

КонецФункции // ОкруглитьЧислоПоФормату()

////////////////////////////////////////////////////////////////////////////////
//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ+++

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  – <Структура> – данные экземпляра раздела
//                 
//  <Условия>  – <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(ТаблПоле);
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			//нет условий или они все выполняются
			Результат = ДанныеТаблПоле.Показатель;	
		КонецЕсли;
		Возврат ?(Округлять, ОкруглитьЧислоПоФормату(Результат), Результат);
	Иначе
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
				//проверка экземпляра	
				Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
					//нет условий или они все выполняются
					Результат = Результат + ОкруглитьЧислоПоФормату(ДанныеТаблПоле[Показатель]);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СуммаПоказателяПоВсемСтраницамСпец

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
Процедура РасчетВСтруктуре(ИмяЛиста)
	                                                      
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
			
		Данные = Страница.Данные;
		
		Если ИмяЛиста = "Раздел2" Тогда
			
			КодОперации = СокрЛП(Данные.П000200007003);
			ОкрП000200008003 = ОкруглитьЧислоПоФормату(Данные.П000200008003);
			ОкрП000200009003 = ОкруглитьЧислоПоФормату(Данные.П000200009003);
			ОкрП000200010003 = ОкруглитьЧислоПоФормату(Данные.П000200010003);
			
			
			Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда 
				
				Если ОкрП000200008003 = 0 Тогда
					Данные.П000200006003 = ОкрП000200009003;
				Иначе
					Данные.П000200006003 = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел3_Прил1" Тогда
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			// если расчет производится для очищения защищенных ячеек 
			// при очищении табличного поля после добавления новой страницы,
			// у которой еще не заполнено свойство ДанныеДопСтрок, то выполнять расчет 
			// в этом многосточном блоке не требуется
			Если ТаблицаБлока <> Неопределено Тогда
				
				Колонка4 = 0;
				
				Для каждого Зап Из ТаблицаБлока Цикл
					НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
					
					П000310008004 = ОкруглитьЧислоПоФормату(Зап.П000310008004);
					
					//аккумулирование общих итогов
					Колонка4 = Колонка4 + П000310008004;
				КонецЦикла;
				
				Данные.П000310009004 = Колонка4;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел5" Тогда
			
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			// если расчет производится для очищения защищенных ячеек 
			// при очищении табличного поля после добавления новой страницы,
			// у которой еще не заполнено свойство ДанныеДопСтрок, то выполнять расчет 
			// в этом многосточном блоке не требуется
			Если ТаблицаБлока <> Неопределено Тогда
				
				Колонка3 = 0;
				Колонка5 = 0;
				
				Для каждого Зап Из ТаблицаБлока Цикл
					НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
					
					П000500000303 = ОкруглитьЧислоПоФормату(Зап.П000500000303);
					П000500000305 = ОкруглитьЧислоПоФормату(Зап.П000500000305);
					
					//аккумулирование общих итогов
					Колонка3 = Колонка3 + П000500000303;
					Колонка5 = Колонка5 + П000500000305;
				КонецЦикла;
				
				Данные.П000500001003 = Колонка3;
				Данные.П000500001005 = Колонка5;				
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если ТипЗнч(ЭлементДанных.Значение) <> Тип("Число") 
					ИЛИ СтрДлина(ЭлементДанных.Ключ) < 13
					ИЛИ НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;			
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры // РасчетВСтруктуре

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяСтраницыПанели = "") Экспорт
	Перем ТаблицаБлока;
	
	Если (мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		МногострочностьЕсть = (ИмяГруппы <> Неопределено);
		Если МногостраничностьЕсть Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Ложь);
		ИначеЕсли МногострочностьЕсть Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);	
		КонецЕсли;
	КонецЕсли;
	
	Если (ФлажокОтклАвтоРасчет) Тогда
		// отключен режим авторасчета
		
		//даже при отключенном авторасчете необходимо рассчитывать итоговые показатели приложений 1 и 2 раздела 3
		Если ИмяСтраницыПанели = "" Тогда
			Расчет("Раздел3_Прил1");
			Расчет("Раздел3_Прил2");
		КонецЕсли;
		
		Если ИмяСтраницыПанели <> "Раздел3_Прил1" И ИмяСтраницыПанели <> "Раздел3_Прил2" Тогда
			Возврат; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		ОкрП000300023003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300023003.Значение);
		ОкрП000300024003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300024003.Значение);
		
		ОкрП000400001000 = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000400001000.Значение);
		
		ОкрП000500001003 = СуммаПоказателяПоВсемСтраницам("Раздел5", "П000500001003", Истина);
		ОкрП000500001005 = СуммаПоказателяПоВсемСтраницам("Раздел5", "П000500001005", Истина);
		
		ОкрП000600002004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000600002004.Значение);
		ОкрП000600003004 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П000600003004.Значение);
		
		СуммаНалога = (ОкрП000300023003 + ОкрП000600002004) 
					- (ОкрП000300024003 + ОкрП000400001000 + ОкрП000500001003 + ОкрП000500001005 + ОкрП000600003004);
		
		мРаздел1.Области.П000100004003.Значение = Макс(СуммаНалога, 0);
		мРаздел1.Области.П000100005003.Значение = Макс(-СуммаНалога, 0);
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
	    РасчетВСтруктуре("Раздел2");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		//П000300001005, П000300002005, П000300003005, П000300004005, П000300006005
		ОкрП000300001003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300001003.Значение);
		ОкрП000300002003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300002003.Значение);
		ОкрП000300003003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300003003.Значение);
		ОкрП000300004003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300004003.Значение);
		ОкрП000300006003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300006003.Значение);

		мРаздел3.Области.П000300001005.Значение = ОкрП000300001003 * 18 / 100;
		мРаздел3.Области.П000300002005.Значение = ОкрП000300002003 * 10 / 100;
		мРаздел3.Области.П000300003005.Значение = ОкрП000300003003 * 18 / 118;
		мРаздел3.Области.П000300004005.Значение = ОкрП000300004003 * 10 / 110;
		мРаздел3.Области.П000300006005.Значение = ОкрП000300006003 * 18 / 100;
		
		//П000300012005
		ОкрП000300001005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300001005.Значение);
		ОкрП000300002005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300002005.Значение);
		ОкрП000300003005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300003005.Значение);
		ОкрП000300004005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300004005.Значение);
		ОкрП000300005005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300005005.Значение);
		ОкрП000300006005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300006005.Значение);
		ОкрП000300007005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300007005.Значение);
		ОкрП000300008005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300008005.Значение);
		ОкрП000300009005 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300009005.Значение);
		
		мРаздел3.Области.П000300012005.Значение = ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005
												+ ОкрП000300004005 + ОкрП000300005005 + ОкрП000300006005
												+ ОкрП000300007005 + ОкрП000300008005 + ОкрП000300009005;
												
		//П000300017003										
		ОкрП000300018003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300018003.Значение);
		ОкрП000300019003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300019003.Значение);
		
		мРаздел3.Области.П000300017003.Значение = ОкрП000300018003 + ОкрП000300019003;
		
		//П000300022003
		ОкрП000300013003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300013003.Значение);
		ОкрП000300015003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300015003.Значение);
		ОкрП000300016003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300016003.Значение);
		ОкрП000300017003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300017003.Значение);
		ОкрП000300020003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300020003.Значение);
		ОкрП000300021003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000300021003.Значение);
		
		мРаздел3.Области.П000300022003.Значение = ОкрП000300013003 + ОкрП000300015003 + ОкрП000300016003
		                                        + ОкрП000300017003 + ОкрП000300020003 + ОкрП000300021003;
												
		//П000300023003
		мРаздел3.Области.П000300023003.Значение = Макс(мРаздел3.Области.П000300012005.Значение - мРаздел3.Области.П000300022003.Значение, 0);												
		
		//П000300024003
		мРаздел3.Области.П000300024003.Значение = Макс(мРаздел3.Области.П000300022003.Значение - мРаздел3.Области.П000300012005.Значение, 0);												
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил1" Тогда
		
		РасчетВСтруктуре("Раздел3_Прил1");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил2" Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы32, ТаблицаБлока);
		Колонка2 = 0;
		Колонка3 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			П000320000102 = ОкруглитьЧислоПоФормату(Зап.П000320000102);
			П000320000103 = ОкруглитьЧислоПоФормату(Зап.П000320000103);
			
			//аккумулирование общих итогов
			Колонка2 = Колонка2 + П000320000102;
			Колонка3 = Колонка3 + П000320000103;
		КонецЦикла;
		
		мРаздел3_Прил2.Области.П000320000202.Значение = Колонка2;		
		мРаздел3_Прил2.Области.П000320000203.Значение = Колонка3;		
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ТаблицаБлока);
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка5 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			П000400000103 = ОкруглитьЧислоПоФормату(Зап.П000400000103);
			П000400000104 = ОкруглитьЧислоПоФормату(Зап.П000400000104);
			П000400000105 = ОкруглитьЧислоПоФормату(Зап.П000400000105);
			
			//аккумулирование общих итогов
			Колонка3 = Колонка3 + П000400000103;
			Колонка4 = Колонка4 + П000400000104;
			Колонка5 = Колонка5 + П000400000105;
		КонецЦикла;
		
		мРаздел4.Области.П000400001000.Значение = Макс(Колонка3 + Колонка4 - Колонка5, 0);
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		РасчетВСтруктуре("Раздел5");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел6" Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ТаблицаБлока);
		Колонка2 = 0;
		Колонка3 = 0;
		Колонка4 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			//заполнение итогов по строке в структуре многострочного раздела
			П000600000102 = ОкруглитьЧислоПоФормату(Зап.П000600000102);
			П000600000103 = ОкруглитьЧислоПоФормату(Зап.П000600000103);
			П000600000104 = ОкруглитьЧислоПоФормату(Зап.П000600000104);
			
			//аккумулирование общих итогов
			Колонка2 = Колонка2 + П000600000102;
			Колонка3 = Колонка3 + П000600000103;
			Колонка4 = Колонка4 + П000600000104;
		КонецЦикла;

		мРаздел6.Области.П000600001002.Значение = Колонка2;
		мРаздел6.Области.П000600001003.Значение = Колонка3;
		мРаздел6.Области.П000600001004.Значение = Колонка4;
		
		мРаздел6.Области.П000600002004.Значение = Макс(Колонка3 - Колонка4, 0);
		мРаздел6.Области.П000600003004.Значение = Макс(Колонка4 - Колонка3, 0);
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.

		Расчет("Раздел2");
		Расчет("Раздел3_Прил1");
		Расчет("Раздел3_Прил2");
		Расчет("Раздел3");
		Расчет("Раздел4");
		Расчет("Раздел5");
		Расчет("Раздел6");
		Расчет("Раздел7");
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ---
////////////////////////////////////////////////////////////////////////////////

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	Если ИмяРаздела = "Раздел1" 
	 ИЛИ ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
		Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	Иначе
	    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2));
	КонецЕсли; 

	Возврат Результат; 
КонецФункции // ПолучитьЧислоЕДляРаздела()
 
Процедура УстановитьМаскиВПоляхВвода()
	
	// титульный
	Для Инд = 1 По 2 Цикл
		мТитульный.Области["Период" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["ПоМесту" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	//Раздел1
	//ОКАТО
	мРаздел1.Области.П000100001003.ЭлементУправления.Маска = "99999999999";
	//КБК
	мРаздел1.Области.П000100002003.ЭлементУправления.Маска = "99999999999999999999";
	
	//Раздел2
	//КПП
	мРаздел2.Области.П000200001003.ЭлементУправления.Маска = "999999999";
	//ИНН
	мРаздел2.Области.П000200003003.ЭлементУправления.Маска = "999999999999";
	//КБК
	мРаздел2.Области.П000200004003.ЭлементУправления.Маска = "99999999999999999999";
	//ОКАТО
	мРаздел2.Области.П000200005003.ЭлементУправления.Маска = "99999999999";
	//код операции
	мРаздел2.Области.П000200007003.ЭлементУправления.Маска = "9999999";
	
	//Раздел3Прил1
	//почтовый индекс
	мРаздел3_Прил1.Области.П000310002000_01.ЭлементУправления.Маска = "999999";
	//код субъекта РФ
	мРаздел3_Прил1.Области.П000310002000_02.ЭлементУправления.Маска = "99";
	//код операции
	мРаздел3_Прил1.Области.П000310003000.ЭлементУправления.Маска = "9999999";
	//год
	Для Инд = 1 По 10 Цикл
		мРаздел3_Прил1.Области["П000310008001_" + Инд].ЭлементУправления.Маска = "9999";
	КонецЦикла;
	
	//Раздел3Прил2
	Для Инд = 1 По 23 Цикл
		//КПП
		мРаздел3_Прил2.Области["П000320000101_" + Инд].ЭлементУправления.Маска = "999999999";
	КонецЦикла;
	
	//Раздел5
	//год
	мРаздел5.Области.П000500000100.ЭлементУправления.Маска = "9999";
	//код НП
	мРаздел5.Области.П000500000200.ЭлементУправления.Маска = "99";
	
	//Раздел7
	Для Инд = 1 По 17 Цикл
		//код операции
		мРаздел7.Области["П000700001001_" + Инд].ЭлементУправления.Маска = "9999999";
	КонецЦикла;
	
	// области номера страницы
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		НомерБлока = 1;
		Пока ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_1") <> Неопределено Цикл
			Для НомерОбластиВБлоке = 1 По 3 Цикл
				ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_" + НомерОбластиВБлоке).ЭлементУправления.Маска = "9";
			КонецЦикла;
			НомерБлока = НомерБлока + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если мДатаНачалаПериодаОтчета < '20100401' Тогда
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Значение = "Приложение №1 к приказу Министерства финансов Российской Федерации от 15.10.2009 № 104н";
	Иначе
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Значение = "Приложение №1 к приказу Министерства финансов Российской Федерации от 15.10.2009 № 104н (в редакции приказа Минфина России от 21.04.2010 № 36н)";
	КонецЕсли;

	
	мБезОткрытияФормы = БезОткрытияФормы;

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный		= ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1		= ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2		= ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3		= ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел3_Прил1 	= ЭлементыФормы.ПолеТабличногоДокументаРаздел3_Прил1;
	мРаздел3_Прил2	= ЭлементыФормы.ПолеТабличногоДокументаРаздел3_Прил2;
	мРаздел4		= ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мРаздел5		= ЭлементыФормы.ПолеТабличногоДокументаРаздел5;
	мРаздел6		= ЭлементыФормы.ПолеТабличногоДокументаРаздел6;
	мРаздел7		= ЭлементыФормы.ПолеТабличногоДокументаРаздел7;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	
	УстановитьМаскиВПоляхВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
			
		КонецЕсли;
		ЗаполнитьДатуПодписи();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	//Иначе
	//	УправлениеЛистами();
	КонецЕсли;

	//начальное заполнение структуры данных
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись33.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись33.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись33.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;
	КонецЕсли;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				//ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяПоляТаблДокумента);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					//ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяПоляТаблДокумента);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		//РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Выполняет вывод полей запроса в табличный документ
//
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл

			// Для разделов, где есть многострочность, необходимо записывать значение показателя на лист,
			// не используя процедуру роУстановитьЗначениеПоказателя.
			// Определяем, что показатель принадлежит многострочной части, по признаку символа "_" в имени показателя.
			// Если есть символ "_", тогда запись в раздел делаем на прямую, через мИмяРаздела.Области[ИмяПоказателя].Значение = Результат;

			Если Найти(Колонка.Имя, "_") > 0 Тогда
				// Здесь необходимо определить, к какому разделу относится показатель.
				НомерРаздела = ПолучитьНомерРазделаПоИмениПоказателя(Колонка.Имя);
				ТекущийРаздел = мСоотвествиеКодаИРаздела[НомерРаздела];
				Если не ТекущийРаздел = Неопределено Тогда
					ТекущийРаздел.Области[Колонка.Имя].Значение = Выборка[Колонка.Имя];
				Иначе 
					ОбщегоНазначения.СообщитьОбОшибке("Не установлено значение показателя: "+Колонка.Имя);
				КонецЕсли; 
			Иначе
				РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// ПодготовкаОтчетаКАвтоЗаполнению
// Процедура выполнит необходимые действия с отчетом, перед его автозаполнением из ИБ.
// а) будет произведена очистка автозаполняемых показателей, для всех разделов, где они есть.
// б) удалены многостраничные разделы, которые заполняются из ИБ (Раздел 2 и Приложение 1 к разделу 3 к декларации).
// в) перепроставлен порядковый номер листа в Разделе 2
// г) Очищены показатели, которые заполняются из ИБ, но нет признака Автозаполнения, т.к. они входят в многострочность.
// д) обновление многострочных блоков (необходимо для процедуры Расчет)
// е) запуск процедуры Расчет() для пересчета показателей с признаком автовычисления равным 4.
//
//  Параметров нет.
//
Процедура ПодготовкаОтчетаКАвтоЗаполнению()
	// Очистим только автовычисляемые показатели и многостраничные заполняемые разделы: Раздел 2 и Приложение к декларации.
	РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, "Раздел2, Раздел3_Прил1");

	// Перепроставим порядковый номер в разделе 2.
	//ПерепроставитьПорядковыеНомера("Раздел2");

	// Обновим статус КПП в разделе 2 (по умолчанию).
	//ОперацияСКППНаЛисте(мРаздел2);

	// Очистим показатели, у которых не стоит признак автозаполнения из ИБ, т.к. они входят в многострочную часть.
	// Раздел 4.
	мРаздел4.Области.П000400000102_1.Значение = 0;
	мРаздел4.Области.П000400000103_1.Значение = 0;

    // Раздел 6.
	мРаздел6.Области.П000600000102_1.Значение = 0;
	мРаздел6.Области.П000600000103_1.Значение = 0;
	мРаздел6.Области.П000600000104_1.Значение = 0;
	
	// Обновим структуру многострочных разделов.
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраницаПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		УстановитьЦветФонаЯчейки(,, ТекущаяСтраницаПанели);
	КонецЕсли;

	
	
	// Запустим расчет, для пересчета автовычисляемых ячеек, которые были очищены.
	Расчет();
	// Нужно, если лист 2 не заполнится. Изменим цвет 60,80,90 ячеек
	ИзменитьЦветЯчеек();


КонецПроцедуры // ПодготовкаОтчетаКАвтоЗаполнению

// ПерепроставитьПорядковыеНомера
// Раздел 2.2 и 1.2 имеют порядковые номера, при удалении сбивается номер и нарушается порядок,
// данная процедура перенумерует оба раздела с 0
Процедура ПерепроставитьПорядковыеНомера(Раздел)

	ТаблицаСтраницРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела);

	КолВоЯчеек = ?(Раздел = "Раздел2", 6, 3);
	Для Инд1 = 0 По ТаблицаСтраницРаздела.Количество() - 1 Цикл

		
		НомерСтраницы = РегламентированнаяОтчетность.ДополнитьСтроку(Строка(Инд1 + 1), КолВоЯчеек, "0", 0);

		Если (ТаблицаСтраницРаздела[Инд1].Данные = Неопределено) Тогда
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, Раздел);
		КонецЕсли;

		Для Инд2 = 1 По КолВоЯчеек Цикл
			ТаблицаСтраницРаздела[Инд1].Данные.Вставить("Номер" + Строка(Инд2), Сред(НомерСтраницы, Инд2, 1));
		КонецЦикла;

		ТаблицаСтраницРаздела[Инд1].Данные.Вставить("ПорядковыйНомер" + Раздел, Инд1 + 1);

		Если ТаблицаСтраницРаздела[Инд1].АктивнаяСтраница Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел,"Номер", КолВоЯчеек, НомерСтраницы);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПерепроставитьПорядковыеНомера

Функция ПолучитьНомерРазделаПоИмениПоказателя(ИмяПоказателя)

	Номер = Лев(ИмяПоказателя,5);
	// удаление префикса из номера документа
	Если Найти(Номер, "П")=1 Тогда 
		Номер = Сред(Номер, 2);
	КонецЕсли;
			
	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;
	
КонецФункции // ПолучитьномерРазделаПоИмениПоказателя()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

Процедура ЗаполнитьАвто() Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// код заполнения по данным ИБ
	
	мСоотвествиеКодаИРаздела = Новый Соответствие;
	мСоотвествиеКодаИРаздела.Вставить("1", мРаздел1);
	мСоотвествиеКодаИРаздела.Вставить("2", мРаздел2);
	мСоотвествиеКодаИРаздела.Вставить("3", мРаздел3);
	мСоотвествиеКодаИРаздела.Вставить("3_Прил1", мРаздел3_Прил1);
	мСоотвествиеКодаИРаздела.Вставить("3_Прил2", мРаздел3_Прил2);
	мСоотвествиеКодаИРаздела.Вставить("4", мРаздел4);
	мСоотвествиеКодаИРаздела.Вставить("5", мРаздел5);
	мСоотвествиеКодаИРаздела.Вставить("6", мРаздел6);
	мСоотвествиеКодаИРаздела.Вставить("7", мРаздел7);
	
	ПодготовкаОтчетаКАвтоЗаполнению();
	
	мСписокОрганизаций = Новый СписокЗначений;
	мСписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, мСписокОрганизаций);
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "БГУ" Тогда
		ЗаполнитьАвтоРаздел2_БГУ();
		ЗаполнитьАвтоРаздел3_БГУ();
	Иначе	
		ЗаполнитьАвтоРаздел2();
		ЗаполнитьАвтоРаздел3();
		ЗаполнитьАвтоРаздел3_Прил1();
	 	ЗаполнитьАвтоРаздел4();
		ЗаполнитьАвтоРаздел6();
	КонецЕсли;	
	
	// Расчет автовычисляемых полей
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	Расчет();

	Модифицированность = Истина;
	
	////////////////////////////////////////////
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоРаздел2()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
		
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	// Виды ценностей
	Запрос.УстановитьПараметр("ВидыЦенностей_1011711", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", 	ВидыЦенностей_1011703);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
	               |				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	               |				И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
	               |		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	               |	КОНЕЦ КАК Покупатель,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (Событие В (&СобытиеНачисленНДС)
	               |					ИЛИ Событие В (&СобытиеПолученАванс)
	               |					ИЛИ Событие В (&СобытиеРеализация))
	               |				И ВидЦенности В (&ВидыЦенностейНА)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
	               |				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	               |				И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
	               |		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	               |	КОНЕЦ,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.Событие,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И (Событие В (&СобытиеНачисленНДС)
	               |					ИЛИ Событие В (&СобытиеПолученАванс)
	               |					ИЛИ Событие В (&СобытиеРеализация))
	               |				И ВидЦенности В (&ВидыЦенностейНА)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП КАК П000200001003,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000200002003,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН КАК П000200003003,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК П000200007003,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК П000200006003,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|						И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|					ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000200008003,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000200009003
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ
		|АВТОУПОРЯДОЧИВАНИЕ";	
		
		
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
			ВставитьДополнительнуюСтраницу("Раздел2");
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДанныеЛистаРаздел2ФИО = (Выборка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);

		мРаздел2.Области.П000200001003.Значение = Выборка.П000200001003;
		мРаздел2.Области.П000200002003.Значение = Выборка.П000200002003;
		мРаздел2.Области.П000200003003.Значение = Выборка.П000200003003;
		мРаздел2.Области.П000200006003.Значение = Выборка.П000200006003;
		мРаздел2.Области.П000200007003.Значение = Выборка.П000200007003;
		мРаздел2.Области.П000200008003.Значение = Выборка.П000200008003;
		мРаздел2.Области.П000200009003.Значение = Выборка.П000200009003;
		
		Если ДанныеЛистаРаздел2ФИО Тогда
			мРаздел2.Области.П000200001003.Значение = "";
			ФамилияРаздел2 = "";
			ИмяРаздел2 = "";
			ОтчествоРаздел2 = "";
			// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
			П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
			ОбщегоНазначения.ФамилияИнициалыФизЛица(П000200002003, ФамилияРаздел2, ИмяРаздел2, ОтчествоРаздел2);

			ФамилияРаздел2 = СокрЛП(ФамилияРаздел2);
			ИмяРаздел2 = СокрЛП(ИмяРаздел2);
			ОтчествоРаздел2 = СокрЛП(ОтчествоРаздел2);

			// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
			П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
		Иначе
			ФамилияРаздел2 = "";
			ИмяРаздел2 = "";
			ОтчествоРаздел2 = "";
		КонецЕсли;
		
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
		Расчет("Раздел2");
		// Посмотрим код в 70 строке, и согласно ему окрасим ячейки 80,90,100
		ИзменитьЦветЯчеек();

	КонецЦикла; 

	// Обновим порядковые номера в разделе 2.
	ПерепроставитьПорядковыеНомера("Раздел2");
	
КонецПроцедуры

Процедура ЗаполнитьАвтоРаздел3()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр080 =  Новый СписокЗначений;
	ВидыЦенностейСтр080.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр080", ВидыЦенностейСтр080);
	
	ВидыЦенностейСтр110 =  Новый СписокЗначений;
	ВидыЦенностейСтр110.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр110", ВидыЦенностейСтр110);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр200 =  Новый СписокЗначений;
	ВидыЦенностейСтр200.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр200", ВидыЦенностейСтр200);
	
	ВидыЦенностейСтр210 =  Новый СписокЗначений;
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр210", ВидыЦенностейСтр210);
	
	ВидыЦенностейСтр130 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр200.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр210.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр130.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСЗаписиКнигиПродажОбороты.Событие,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДСЗаписиКнигиПродажОбороты.Событие,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300001003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300002003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300003003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300004003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300006003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300007003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300007005,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300008003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300008005,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300009005,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр110)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300011005
	               |ИЗ
	               |	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
	
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСЗаписиКнигиПокупокОбороты.Событие,
	               |	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДСЗаписиКнигиПокупокОбороты.Событие,
	               |	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300013003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300014003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300015003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300016003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300018003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр200)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300020003,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр210)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300021003
	               |ИЗ
	               |	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
				   
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
КонецПроцедуры

Процедура ЗаполнитьАвтоРаздел3_Прил1()

	Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецГода(мДатаКонцаПериодаОтчета) Тогда
		// Раздел заполняется только в последнем налоговом периоде года
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
	               |			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
	               |		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
	               |	КОНЕЦ КАК П000310001000,
	               |	ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.АдресМестонахождения, 1, 250) КАК АдресМестонахождения,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона КАК П000310002000_02,
	               |	ВЫБОР
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
	               |			ТОГДА ""1011803""
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
	               |			ТОГДА ""1011801""
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
	               |			ТОГДА ""1011802""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК П000310003000,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ КАК П000310004000,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ КАК П000310005000,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости КАК П000310006000,
	               |	СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДС) КАК П000310007000,
	               |	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата) КАК П000310008001_,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций КАК П000310008002_,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС КАК П000310008003_,
	               |	СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен) КАК П000310008004_
	               |ИЗ
	               |	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
	               |		ПО ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка
	               |			И ВосстановлениеНДСпоОбъектамНедвижимости.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки
	               |ГДЕ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Организация В(&Организация)
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата <= &КонецПериода
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости,
	               |	ВЫБОР
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
	               |			ТОГДА ""1011803""
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
	               |			ТОГДА ""1011801""
	               |		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
	               |			ТОГДА ""1011802""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций,
	               |	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата),
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости,
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС,
	               |	ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.АдресМестонахождения, 1, 250),
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
	               |			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
	               |		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	П000310008001_
	               |ИТОГИ
	               |	СУММА(П000310006000),
	               |	СУММА(П000310007000),
	               |	СУММА(П000310008001_),
	               |	СУММА(П000310008003_),
	               |	СУММА(П000310008004_)
	               |ПО
	               |	ОбъектНедвижимости,
	               |	П000310003000
	               |АВТОУПОРЯДОЧИВАНИЕ";
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбъектыНедвижимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ОбъектыНедвижимости.Следующий() Цикл
		
		КодыОпераций = ОбъектыНедвижимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока КодыОпераций.Следующий() Цикл
			
			Если Не ПерваяСтраница Тогда

				ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел3_Прил1");
				ВставитьДополнительнуюСтраницу("Раздел3_Прил1");

			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
					
			мРаздел3_Прил1.Области.П000310001000.Значение = ОбъектыНедвижимости.П000310001000;
					
			Год = КодыОпераций.Выбрать();
			
			НомерСтроки = 0;
			
			Пока Год.Следующий() Цикл
				
				Если НомерСтроки = 0 Тогда
					СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(Год.АдресМестонахождения);
					Если Не СтруктураАдреса = Неопределено Тогда
						мРаздел3_Прил1.Области.П000310002000_01.Значение = СтруктураАдреса.Индекс;
						мРаздел3_Прил1.Области.П000310002000_02.Значение = Год.П000310002000_02;
						мРаздел3_Прил1.Области.П000310002000_03.Значение = СтруктураАдреса.Район;
						мРаздел3_Прил1.Области.П000310002000_04.Значение = СтруктураАдреса.Город;
						мРаздел3_Прил1.Области.П000310002000_05.Значение = СтруктураАдреса.НаселенныйПункт;
						мРаздел3_Прил1.Области.П000310002000_06.Значение = СтруктураАдреса.Улица;
						мРаздел3_Прил1.Области.П000310002000_07.Значение = СтруктураАдреса.Дом;
						мРаздел3_Прил1.Области.П000310002000_08.Значение = СтруктураАдреса.Корпус;
						мРаздел3_Прил1.Области.П000310002000_09.Значение = СтруктураАдреса.Квартира;
					КонецЕсли;
					
					мРаздел3_Прил1.Области.П000310003000.Значение = Год.П000310003000;
					мРаздел3_Прил1.Области.П000310004000.Значение = Год.П000310004000;
					мРаздел3_Прил1.Области.П000310005000.Значение = Год.П000310005000;
					мРаздел3_Прил1.Области.П000310006000.Значение = Год.П000310006000;
					мРаздел3_Прил1.Области.П000310007000.Значение = Год.П000310007000;
				КонецЕсли;
			
				НомерСтроки = НомерСтроки + 1;
				
				мРаздел3_Прил1.Области["П000310008001_" + НомерСтроки].Значение = Формат(Год.П000310008001_, "ЧГ=0");
				мРаздел3_Прил1.Области["П000310008002_" + НомерСтроки].Значение = Год.П000310008002_;
				мРаздел3_Прил1.Области["П000310008003_" + НомерСтроки].Значение = Год.П000310008003_;
				мРаздел3_Прил1.Области["П000310008004_" + НомерСтроки].Значение = Год.П000310008004_;
				
				//ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы31);
				
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел3_Прил1", Ложь);
				
				Расчет("Раздел3_Прил1");
				
				// Восстановление должно быть отражено в течении 10 лет.
				Если НомерСтроки = 10 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАвтоРаздел4()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	// События
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2)) КАК П000400000102_1
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПродаж
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеПодтвержденаСтавка0)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2))
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеПодтвержденаСтавка0)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(НДСЗаписиКнигиПродаж.П000400000102_1) КАК П000400000102_1
	               |ИЗ
	               |	НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
				   
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2)) КАК П000400000103_1
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПокупок
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеПредъявленКВычетуНДС0)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2))
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеПредъявленКВычетуНДС0)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(НДСЗаписиКнигиПокупок.П000400000103_1) КАК П000400000103_1
	               |ИЗ
	               |	НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок";
				   
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
КонецПроцедуры

Процедура ЗаполнитьАвтоРаздел6()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	// События
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000102_1,
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000103_1
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПродаж
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)
	               |				И Событие В (&СобытиеНеПодтвержденаСтавка0)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2))),
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ЧИСЛО(15, 2)))
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеНеПодтвержденаСтавка0)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(НДСЗаписиКнигиПродаж.П000600000102_1) КАК П000600000102_1,
	               |	СУММА(НДСЗаписиКнигиПродаж.П000600000103_1) КАК П000600000103_1
	               |ИЗ
	               |	НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
				   
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000104_1
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПокупок
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)
	               |				И Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0)) КАК НДСЗаписиКнигиПокупокОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2)))
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(НДСЗаписиКнигиПокупок.П000600000104_1) КАК П000600000104_1
	               |ИЗ
	               |	НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок";
				   
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДЛЯ БГУ

Процедура ЗаполнитьАвтоРаздел2_БГУ()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Организации.КодОКАТО КАК П000200005003
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.Ссылка = &ТекОрганизация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НДС_КнигаПродажОбороты.СчетФактура.Контрагент КАК Контрагент,
	               |	НДС_КнигаПродажОбороты.ПричинаНалогообложения КАК ПричинаНалогообложения,
	               |	ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.СчетФактура.Контрагент.ВидКонтрагента = &ФизЛицо
	               |			ТОГДА """" + НДС_КнигаПродажОбороты.СчетФактура.Контрагент.Фамилия + "" "" + НДС_КнигаПродажОбороты.СчетФактура.Контрагент.Имя + "" "" + НДС_КнигаПродажОбороты.СчетФактура.Контрагент.Отчество
	               |		КОГДА ПОДСТРОКА(НДС_КнигаПродажОбороты.СчетФактура.Контрагент.НаименованиеПолное, 1, 250) = """"
	               |			ТОГДА НДС_КнигаПродажОбороты.СчетФактура.Контрагент.Наименование
	               |		ИНАЧЕ ПОДСТРОКА(НДС_КнигаПродажОбороты.СчетФактура.Контрагент.НаименованиеПолное, 1, 250)
	               |	КОНЕЦ КАК НаименованиеПродавца,
				   //|	НДС_КнигаПродажОбороты.СчетФактура.Контрагент.КПП КАК КПППродавца,
	               |	НДС_КнигаПродажОбороты.СчетФактура.Контрагент.ИНН КАК ИННПродавца,
	               |	НДС_КнигаПродажОбороты.СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения = &ПокупкаУНерезидентаНалоговыйАгент
	               |			ТОГДА ""1011711""
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения = &ПокупкаНалоговыйАгент
	               |			ТОГДА ""1011703""
	               |	КОНЕЦ КАК КодОперации,
	               |	НДС_КнигаПродажОбороты.СуммаНДСОборот КАК СуммаНДСОборот
	               |ПОМЕСТИТЬ ТаблицаОборотов
	               |ИЗ
	               |	РегистрНакопления.НДС_КнигаПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И ПричинаНалогообложения В (&МассивПН)) КАК НДС_КнигаПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент,
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения,
	               |	ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.ВидКонтрагента = &ФизЛицо
	               |			ТОГДА """" + НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.Фамилия + "" "" + НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.Имя + "" "" + НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.Отчество
	               |		КОГДА ПОДСТРОКА(НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.НаименованиеПолное, 1, 250) = """"
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.Наименование
	               |		ИНАЧЕ ПОДСТРОКА(НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.НаименованиеПолное, 1, 250)
	               |	КОНЕЦ,
				   //|	НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.КПП,
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.СчетФактура.Контрагент.ИНН,
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения = &ПокупкаУНерезидентаНалоговыйАгент
	               |			ТОГДА ""1011711""
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения = &ПокупкаНалоговыйАгент
	               |			ТОГДА ""1011703""
	               |	КОНЕЦ,
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДС_ДополнительныеЛистыКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И ПричинаНалогообложения В (&МассивПН)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДС_ДополнительныеЛистыКнигиПродажОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОборотов.Контрагент КАК Контрагент,
	               |	ТаблицаОборотов.НаименованиеПродавца КАК П000200002003,
				   //|	ТаблицаОборотов.КПППродавца КАК П000200001003,
	               |	ТаблицаОборотов.ИННПродавца КАК П000200003003,
	               |	ТаблицаОборотов.КодОперации КАК П000200007003,
	               |	СУММА(ТаблицаОборотов.СуммаНДСОборот) КАК П000200006003
	               |ИЗ
	               |	ТаблицаОборотов КАК ТаблицаОборотов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОборотов.Контрагент,
	               |	ТаблицаОборотов.НаименованиеПродавца,
				   //|	ТаблицаОборотов.КПППродавца,
	               |	ТаблицаОборотов.ИННПродавца,
	               |	ТаблицаОборотов.КодОперации
	               |ИТОГИ ПО
	               |	Контрагент,
	               |	П000200007003";
				   
	Запрос = Новый Запрос(ТекстЗапроса);			   
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ВидыКонтрагентов.ФизЛицо);
	Запрос.УстановитьПараметр("ПокупкаУНерезидентаНалоговыйАгент", Перечисления.НДС_ПричиныНалогообложения.ПокупкаУНерезидентаНалоговыйАгент);
	Запрос.УстановитьПараметр("ПокупкаНалоговыйАгент", Перечисления.НДС_ПричиныНалогообложения.ПокупкаНалоговыйАгент);
	
	МассивПН = Новый Массив;
	МассивПН.Добавить(Перечисления.НДС_ПричиныНалогообложения.ПокупкаНалоговыйАгент);
	МассивПН.Добавить(Перечисления.НДС_ПричиныНалогообложения.ПокупкаУНерезидентаНалоговыйАгент);
	Запрос.УстановитьПараметр("МассивПН", МассивПН);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка1 = МассивРезультатов[0].Выбрать();
	Если Выборка1.Следующий() Тогда
		КодОКАТО = Выборка1.П000200005003;
	КонецЕсли;	
	
	ПерваяСтраница = Истина;
	ВыборкаПоКонтрагентам = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		ВыборкаПоКодамОпераций = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКодамОпераций.Следующий() Цикл
			Выборка = ВыборкаПоКодамОпераций.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не ПерваяСтраница Тогда
					// Создаем дополнительную страницу в декларации
					ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
					ВставитьДополнительнуюСтраницу("Раздел2");
				Иначе
					// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
					ПерваяСтраница = Ложь;
				КонецЕсли;
				
				//мРаздел2.Области.П000200001003.Значение = Выборка.П000200001003;
				мРаздел2.Области.П000200002003.Значение = Выборка.П000200002003;
				мРаздел2.Области.П000200003003.Значение = Выборка.П000200003003;
				мРаздел2.Области.П000200005003.Значение = КодОКАТО;
				мРаздел2.Области.П000200006003.Значение = Выборка.П000200006003;
				мРаздел2.Области.П000200007003.Значение = Выборка.П000200007003;
				мРаздел2.Области.П000200008003.Значение = "";
				мРаздел2.Области.П000200009003.Значение = "";
				
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
				Расчет("Раздел2");
				// Посмотрим код в 70 строке, и согласно ему окрасим ячейки 80,90,100
				ИзменитьЦветЯчеек();
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Обновим порядковые номера в разделе 2.
	ПерепроставитьПорядковыеНомера("Раздел2");
	
КонецПроцедуры	

Процедура ЗаполнитьАвтоРаздел3_БГУ()
	Запрос = Новый Запрос();			   
	Запрос.УстановитьПараметр("Организация", мСписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", Не ВидДокумента = 0);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, КонецДня(ДатаПодписи)));
	
	ПН_ВнутреннееПотребление             = Перечисления.НДС_ПричиныНалогообложения.ВнутреннееПотребление;
	ПН_Реализация                        = Перечисления.НДС_ПричиныНалогообложения.Реализация;
	ПН_РеализацияАрендаФИ                = Перечисления.НДС_ПричиныНалогообложения.РеализацияАрендаФИ;
	ПН_АвансПолученный                   = Перечисления.НДС_ПричиныНалогообложения.АвансПолученный;
	ПН_СМРХозяйственнымСпособом          = Перечисления.НДС_ПричиныНалогообложения.СМРХозяйственнымСпособом;
	ПН_СМРПодряднымСпособом              = Перечисления.НДС_ПричиныНалогообложения.СМРПодряднымСпособом;
	ПН_ВозвратПоставщику                 = Перечисления.НДС_ПричиныНалогообложения.ВозвратПоставщику;
	ПН_АвансВыданный                     = Перечисления.НДС_ПричиныНалогообложения.АвансВыданный;
	ПН_ПокупкаНалоговыйАгент             = Перечисления.НДС_ПричиныНалогообложения.ПокупкаНалоговыйАгент;
	ПН_ПокупкаУНерезидентаНалоговыйАгент = Перечисления.НДС_ПричиныНалогообложения.ПокупкаУНерезидентаНалоговыйАгент;
	ПН_Реализация0                       = Перечисления.НДС_ПричиныНалогообложения.Реализация0;
	ПН_ТаможенныеПлатежи                 = Перечисления.НДС_ПричиныНалогообложения.ТаможенныеПлатежи;
	ПН_Покупка                           = Перечисления.НДС_ПричиныНалогообложения.Покупка;
	ПН_ВозвратОтПокупателя               = Перечисления.НДС_ПричиныНалогообложения.ВозвратОтПокупателя;
	
	Запрос.УстановитьПараметр("ПН_АвансВыданный", ПН_АвансВыданный);
	
	МассивПН_Начислений = Новый Массив;
	МассивПН_Начислений.Добавить(ПН_Реализация);
	МассивПН_Начислений.Добавить(ПН_РеализацияАрендаФИ);
	МассивПН_Начислений.Добавить(ПН_АвансПолученный);
	МассивПН_Начислений.Добавить(ПН_ВозвратПоставщику);
	МассивПН_Начислений.Добавить(ПН_СМРХозяйственнымСпособом);
	МассивПН_Начислений.Добавить(ПН_СМРПодряднымСпособом);
	МассивПН_Начислений.Добавить(ПН_АвансВыданный);
	МассивПН_Начислений.Добавить(ПН_ВнутреннееПотребление);
	МассивПН_Начислений.Добавить(ПН_ТаможенныеПлатежи);
	Запрос.УстановитьПараметр("МассивПН_Начислений", МассивПН_Начислений);
	
	МассивПН_010_040 = Новый Массив;
	МассивПН_010_040.Добавить(ПН_СМРХозяйственнымСпособом);
	МассивПН_010_040.Добавить(ПН_АвансПолученный);
	МассивПН_010_040.Добавить(ПН_ВозвратПоставщику);
	МассивПН_010_040.Добавить(ПН_АвансВыданный);
	Запрос.УстановитьПараметр("МассивПН_010_040", МассивПН_010_040);
	
	Ставка18     = Перечисления.СтавкиНДС.НДС18;
	Ставка10     = Перечисления.СтавкиНДС.НДС10;
	Ставка18_118 = Перечисления.СтавкиНДС.НДС18_118;
	Ставка10_110 = Перечисления.СтавкиНДС.НДС10_110;
	Запрос.УстановитьПараметр("Ставка18", Ставка18);
	Запрос.УстановитьПараметр("Ставка10", Ставка10);
	Запрос.УстановитьПараметр("Ставка18_118", Ставка18_118);
	Запрос.УстановитьПараметр("Ставка10_110", Ставка10_110);
	
	МассивСтавок10_18 = Новый Массив;
	МассивСтавок10_18.Добавить(Ставка18);
	МассивСтавок10_18.Добавить(Ставка10);
	МассивСтавок10_18.Добавить(Ставка18_118);
	МассивСтавок10_18.Добавить(Ставка10_110);
	Запрос.УстановитьПараметр("МассивСтавок10_18", МассивСтавок10_18);
	
	МассивПН_060 = Новый Массив;
	МассивПН_060.Добавить(ПН_СМРХозяйственнымСпособом);
	Запрос.УстановитьПараметр("МассивПН_060", МассивПН_060);
	
	МассивПН_070 = Новый Массив;
	МассивПН_070.Добавить(ПН_АвансПолученный);
	Запрос.УстановитьПараметр("МассивПН_070", МассивПН_070);
	
	МассивПН_090_110 = Новый Массив;
	МассивПН_090_110.Добавить(ПН_ВозвратПоставщику);
	МассивПН_090_110.Добавить(ПН_АвансВыданный);
	Запрос.УстановитьПараметр("МассивПН_090_110", МассивПН_090_110);
	
	МассивПН_Вычеты = Новый Массив;
	МассивПН_Вычеты.Добавить(ПН_Покупка);
	МассивПН_Вычеты.Добавить(ПН_ТаможенныеПлатежи);
	МассивПН_Вычеты.Добавить(ПН_СМРПодряднымСпособом);
	МассивПН_Вычеты.Добавить(ПН_ВозвратОтПокупателя);
	МассивПН_Вычеты.Добавить(ПН_АвансВыданный);
	МассивПН_Вычеты.Добавить(ПН_СМРХозяйственнымСпособом);
	МассивПН_Вычеты.Добавить(ПН_АвансПолученный);
	МассивПН_Вычеты.Добавить(ПН_ПокупкаНалоговыйАгент);
	МассивПН_Вычеты.Добавить(ПН_ПокупкаУНерезидентаНалоговыйАгент);
	Запрос.УстановитьПараметр("МассивПН_Вычеты", МассивПН_Вычеты);
	
	МассивПН_130_140 = Новый Массив;
	МассивПН_130_140.Добавить(ПН_Покупка);
	МассивПН_130_140.Добавить(ПН_СМРПодряднымСпособом);
	МассивПН_130_140.Добавить(ПН_ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("МассивПН_130_140", МассивПН_130_140);
	
	Запрос.УстановитьПараметр("ПН_СМРПодряднымСпособом", ПН_СМРПодряднымСпособом);
	Запрос.УстановитьПараметр("ПН_АвансВыданный", ПН_АвансВыданный);
	
	МассивПН_150 = Новый Массив;
	МассивПН_150.Добавить(ПН_АвансВыданный);
	Запрос.УстановитьПараметр("МассивПН_150", МассивПН_150);
	
	МассивПН_160 = Новый Массив;
	МассивПН_160.Добавить(ПН_СМРХозяйственнымСпособом);
	Запрос.УстановитьПараметр("МассивПН_160", МассивПН_160);
	
	МассивПН_170_190 = Новый Массив;
	МассивПН_170_190.Добавить(ПН_ТаможенныеПлатежи);
	Запрос.УстановитьПараметр("МассивПН_170_190", МассивПН_170_190);
	
	МассивПН_200 = Новый Массив;
	МассивПН_200.Добавить(ПН_АвансПолученный);
	Запрос.УстановитьПараметр("МассивПН_200", МассивПН_200);
	
	МассивПН_210 = Новый Массив;
	МассивПН_210.Добавить(ПН_ПокупкаНалоговыйАгент);
	МассивПН_210.Добавить(ПН_ПокупкаУНерезидентаНалоговыйАгент);
	Запрос.УстановитьПараметр("МассивПН_210", МассивПН_210);
	
// Запрос по начислениям
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НДС_КнигаПродажОбороты.СтавкаНДС,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.СтавкаНДС = &Ставка18 И НЕ НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300001003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.СтавкаНДС = &Ставка10 И НЕ НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300002003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.СтавкаНДС = &Ставка18_118 И НЕ НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300003003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.СтавкаНДС = &Ставка10_110 И НЕ НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300004003,
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_060)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300006003,
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_070)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300007005,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_070)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300007003,
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения В (&МассивПН_090_110)
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300009005,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПродажОбороты.ПричинаНалогообложения = &ПН_АвансВыданный
	               |			ТОГДА НДС_КнигаПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300011005
				   
				   |ПОМЕСТИТЬ ТаблицаОборотов
	               |ИЗ
	               |	РегистрНакопления.НДС_КнигаПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И (ПричинаНалогообложения В (&МассивПН_Начислений))
	               |				И СтавкаНДС В (&МассивСтавок10_18)) КАК НДС_КнигаПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС = &Ставка18 И НЕ НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС = &Ставка10 И НЕ НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС = &Ставка18_118 И НЕ НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СтавкаНДС = &Ставка10_110 И НЕ НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_010_040)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_060)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
				   
				   |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_070)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_070)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаБезНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_090_110)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения = &ПН_АвансВыданный
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2))
				   
	               |ИЗ
	               |	РегистрНакопления.НДС_ДополнительныеЛистыКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И (ПричинаНалогообложения В (&МассивПН_Начислений))
	               |				И СтавкаНДС В (&МассивСтавок10_18)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДС_ДополнительныеЛистыКнигиПродажОбороты
	               |;
				   
	               |
	               |// 1 //////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ТаблицаОборотов.П000300001003) КАК П000300001003,
	               |	СУММА(ТаблицаОборотов.П000300002003) КАК П000300002003,
	               |	СУММА(ТаблицаОборотов.П000300003003) КАК П000300003003,
	               |	СУММА(ТаблицаОборотов.П000300004003) КАК П000300004003,
	               |	СУММА(ТаблицаОборотов.П000300006003) КАК П000300006003,
	               |	СУММА(ТаблицаОборотов.П000300007005) КАК П000300007005,
	               |	СУММА(ТаблицаОборотов.П000300007003) КАК П000300007003,
	               |	СУММА(ТаблицаОборотов.П000300009005) КАК П000300009005,
	               |	СУММА(ТаблицаОборотов.П000300011005) КАК П000300011005
	               |ИЗ
	               |	ТаблицаОборотов КАК ТаблицаОборотов";
				   
	Запрос.Текст = ТекстЗапроса;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
// Запрос по вычетам
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_130_140)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300013003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения = &ПН_СМРПодряднымСпособом
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300014003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_150)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300015003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_160)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300016003,
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_170_190)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300017003,
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_200)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300020003,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_КнигаПокупокОбороты.ПричинаНалогообложения В (&МассивПН_210)
	               |			ТОГДА НДС_КнигаПокупокОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)) КАК П000300021003
				   
				   |ПОМЕСТИТЬ ТаблицаОборотов
	               |ИЗ
	               |	РегистрНакопления.НДС_КнигаПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И ПричинаНалогообложения В (&МассивПН_Вычеты)) КАК НДС_КнигаПокупокОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_130_140)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения = &ПН_СМРПодряднымСпособом
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_150)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_160)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_170_190)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
				   
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_200)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |		КОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.ПричинаНалогообложения В (&МассивПН_210)
	               |			ТОГДА НДС_ДополнительныеЛистыКнигиПродажОбороты.СуммаНДСОборот
	               |	КОНЕЦ КАК ЧИСЛО(18,2))
				   
	               |ИЗ
	               |	РегистрНакопления.НДС_ДополнительныеЛистыКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Учреждение В (&Организация)
	               |				И ПричинаНалогообложения В (&МассивПН_Вычеты)
	               |				И ВЫБОР
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДС_ДополнительныеЛистыКнигиПродажОбороты
	               |;
				   
	               |
	               |// 1 //////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ТаблицаОборотов.П000300013003) КАК П000300013003,
	               |	СУММА(ТаблицаОборотов.П000300014003) КАК П000300014003,
	               |	СУММА(ТаблицаОборотов.П000300015003) КАК П000300015003,
	               |	СУММА(ТаблицаОборотов.П000300016003) КАК П000300016003,
	               |	СУММА(ТаблицаОборотов.П000300017003) КАК П000300017003,
	               |	СУММА(ТаблицаОборотов.П000300020003) КАК П000300020003,
	               |	СУММА(ТаблицаОборотов.П000300021003) КАК П000300021003
	               |ИЗ
	               |	ТаблицаОборотов КАК ТаблицаОборотов";
				   
	Запрос.Текст = ТекстЗапроса;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
КонецПроцедуры	

//********* КОНЕЦ ЗАПОЛНЕНИЯ ДЛЯ БГУ ************************************************

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ИзменитьЦветЯчеек();
		
	КонецЕсли;
	
	
КонецПроцедуры


//обработчики кнопок многостраничных страниц+++

//обработчики кнопок многостраничных страниц---

//обработка выбора на всех страницах+++
Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;

	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	//форма заполнения приложения 1 раздела 3
	Если   (ИмяЯчейки = "П000310002000_01")
	   ИЛИ (ИмяЯчейки = "П000310002000_02") 
	   ИЛИ (ИмяЯчейки = "П000310002000_03") 
	   ИЛИ (ИмяЯчейки = "П000310002000_04") 
	   ИЛИ (ИмяЯчейки = "П000310002000_05") 
	   ИЛИ (ИмяЯчейки = "П000310002000_06")
	   ИЛИ (ИмяЯчейки = "П000310002000_07") 
	   ИЛИ (ИмяЯчейки = "П000310002000_08") 
	   ИЛИ (ИмяЯчейки = "П000310002000_09") Тогда 

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс		= мРаздел3_Прил1.Области.П000310002000_01.Значение;
		СубъектРФНом 	= мРаздел3_Прил1.Области.П000310002000_02.Значение;
		РайонОб     	= мРаздел3_Прил1.Области.П000310002000_03.Значение;
		ГородОб     	= мРаздел3_Прил1.Области.П000310002000_04.Значение;
		НПОб        	= мРаздел3_Прил1.Области.П000310002000_05.Значение;
		УлицаОб     	= мРаздел3_Прил1.Области.П000310002000_06.Значение;
		ДомаОб      	= мРаздел3_Прил1.Области.П000310002000_07.Значение;
		КорпусОб    	= мРаздел3_Прил1.Области.П000310002000_08.Значение;
		КвартираОб  	= мРаздел3_Прил1.Области.П000310002000_09.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФНом); // код
		СтруктураАдресныхДанных.Вставить("Район", РайонОб);
		СтруктураАдресныхДанных.Вставить("Город", ГородОб);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб);
		СтруктураАдресныхДанных.Вставить("Улица", УлицаОб);
		СтруктураАдресныхДанных.Вставить("Дом", ДомаОб);
		СтруктураАдресныхДанных.Вставить("Корпус", КорпусОб);
		СтруктураАдресныхДанных.Вставить("Квартира", КвартираОб);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ПочтИндекс = ФормаВводаАдреса.НачальноеЗначениеВыбора.Индекс;
			СубъектРФНом = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;

			РайонОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Район;
			ГородОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Город;
			НПОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.НаселенныйПункт;
			УлицаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Улица;
			ДомаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Дом;
			КорпусОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Корпус;
			КвартираОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Квартира;

			Модифицированность = Истина;

		КонецЕсли;

		мРаздел3_Прил1.Области.П000310002000_01.Значение = ПочтИндекс;
		мРаздел3_Прил1.Области.П000310002000_02.Значение = СубъектРФНом;
		мРаздел3_Прил1.Области.П000310002000_03.Значение = РайонОб;
		мРаздел3_Прил1.Области.П000310002000_04.Значение = ГородОб;
		мРаздел3_Прил1.Области.П000310002000_05.Значение = НПОб;
		мРаздел3_Прил1.Области.П000310002000_06.Значение = УлицаОб;
		мРаздел3_Прил1.Области.П000310002000_07.Значение = ДомаОб;
		мРаздел3_Прил1.Области.П000310002000_08.Значение = КорпусОб;
		мРаздел3_Прил1.Области.П000310002000_09.Значение = КвартираОб;
		
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		//Определение ТребРезультат+++
		//проверка и удаление вариантов происходит для отдельных показателей
		//внутри происходит проверка: требуется ли сокращать список и по какому значению результата проверки
		//если будет требуемый результат проверки условий, отличный от нуля, то будет проверка
		//конструкция проверки должна предусматривать наличие нескольких критериев
		//Примечание: для последующего корректного удаления ТребРезультат следует определять числом
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерКвартала = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"));
			
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		//Определение ТребРезультат---
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		ТЗВыбора.Колонки.Удалить(2);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
		Если ИмяЯчейки = "П000200007003" Тогда
			ИзменитьЦветЯчеек()	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
				   |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	ПервоначальноеЗначение = СокрЛП(мТитульный.Области.КодИМНС1.Значение) + СокрЛП(мТитульный.Области.КодИМНС2.Значение)
						   + СокрЛП(мТитульный.Области.КодИМНС3.Значение) + СокрЛП(мТитульный.Области.КодИМНС4.Значение);
						   
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		ТекСтрока = ТаблицаВыбора.Найти(ПервоначальноеЗначение, "КодНО");
		Если ТекСтрока = Неопределено Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите налоговый орган");
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите налоговый орган", ТекСтрока);
		КонецЕсли;
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			Для Инд = 1 По 4 Цикл
				мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			ЗаполнитьСведенияОПредставителе(Ссылки[ТаблицаВыбора.Индекс(РезультатВыбора)]);
			ПроставитьНаВсехЛистах("КПП1_", РезультатВыбора.КПП);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ПервоначальноеЗначение) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяРаздела = Сред(Элемент.Имя, 24);
	//Если НЕ мНеВызыватьРасчет Тогда
		Если ИмяРаздела = "Раздел1" 
		 ИЛИ ИмяРаздела = "Раздел2" 
		 ИЛИ ИмяРаздела = "Раздел3" 
		 ИЛИ ИмяРаздела = "Раздел3_Прил1" 
		 ИЛИ ИмяРаздела = "Раздел3_Прил2" 
		 ИЛИ ИмяРаздела = "Раздел4" 
		 ИЛИ ИмяРаздела = "Раздел5" 
		 ИЛИ ИмяРаздела = "Раздел6" 
		 ИЛИ ИмяРаздела = "Раздел7" Тогда
			Расчет();
		КонецЕсли;
	//Иначе
	//	мНеВызыватьРасчет = Ложь;
	//КонецЕсли;
КонецПроцедуры

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов+++
//и связанные с ними процедуры - функции по работе с многострочными блоками

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;
	
	Раздел = ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
		
		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
		
		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;
		
		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
		
		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		
		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;
			
			РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(СтруктураГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);
			
		КонецЦикла;
		
		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);
		
		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
			
			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы31 Тогда
		ТекТабличноеПоле = мРаздел3_Прил1;
	ИначеЕсли ИдГруппы = мИдГруппы32 Тогда 
		ТекТабличноеПоле = мРаздел3_Прил2;
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда 
		ТекТабличноеПоле = мРаздел4;
	ИначеЕсли ИдГруппы = мИдГруппы5 Тогда 
		ТекТабличноеПоле = мРаздел5;
	ИначеЕсли ИдГруппы = мИдГруппы6 Тогда 
		ТекТабличноеПоле = мРаздел6;
	ИначеЕсли ИдГруппы = мИдГруппы7 Тогда 
		ТекТабличноеПоле = мРаздел7;
	КонецЕсли;

	Возврат ТекТабличноеПоле;
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3_Прил1" Тогда
		ИмяГруппы = мИдГруппы31;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел3_Прил2" Тогда
		ИмяГруппы = мИдГруппы32;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = мИдГруппы4;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = мИдГруппы5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = мИдГруппы6;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = мИдГруппы7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;
	
	Расчет();

КонецПроцедуры // УдалитьДополнительнуюСтроку()

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов---
//и связанные с ними процедуры-функции по работе с многострочными блоками

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	ЗаполнитьАвто();
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3_Прил1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3_Прил1");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3_Прил2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3_Прил2");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел4");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел5");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел6");
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел7");
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ИзменитьЦветЯчеек()
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к разделу 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к разделу 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		КодОперации = СокрЛП(мРаздел2.Области.П000200007003.Значение);
		Если ФлажокОтклАвтоРасчет И (КодОперации = "1011705" ИЛИ КодОперации = "1011707") Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П000200006003");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2009Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодов_Титульный"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500000200", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодов_Раздел5"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 11, "ОКАТО");
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200005003", 11, "ОКАТО");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200004003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200007003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310003000", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел3_Прил1"]);
	
	Если мДатаНачалаПериодаОтчета >= '20100701' Тогда
		ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел7_2010кв3"]);
	ИначеЕсли мДатаНачалаПериодаОтчета >= '20100101' Тогда
		ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел7_2010"]);
	Иначе	
		ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел7"]);
	КонецЕсли;
		
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора=ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок=ТекстВыбора;
	ФормаВыбора.СписокКодов=ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки=ИсходнаяСтрока.Код;
	КонецЕсли;
	
	
	РезультатВыбора=ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВПолеВводаВПолеТабличногоДокумента(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ЭлементыФормы.Найти("ПолеТабличногоДокумента" + ИмяТекущейСтраницы) <> Неопределено Тогда
		Область = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницы].ТекущаяОбласть;
	Иначе
		Возврат;
	КонецЕсли;
		
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Текст) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Текст));
		Для Инд = ДлинаЗначения+1 По 11 Цикл
			Текст = СокрЛП(Текст) + "0";
		КонецЦикла;
	КонецЕсли;
	
	
	Если СтрДлина(СокрЛП(Текст)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Текст)) <> ПараметрВводаПоля.Длина Тогда
		Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Элемент.Значение=Текст;
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ИзменитьЦветЯчеек()
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Расчет();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// !!!
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из ДанныеРаздела2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
		ФИО = РазложитьФИО(СокрЛП(ДанныеЛистаРаздела2.П000200002003));
		ДанныеЛистаРаздела2.Вставить("П000200002003_1", ФИО.Фамилия);
		ДанныеЛистаРаздела2.Вставить("П000200002003_2", ФИО.Имя);
		ДанныеЛистаРаздела2.Вставить("П000200002003_3", ФИО.Отчество);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",			"1151001");
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ГодПериодОтч",	Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	Параметры.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("ВидДок",		Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	Параметры.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	Параметры.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	Параметры.Вставить("ИННОрг",		СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	Параметры.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РазложитьФИО(Титульный.НаимОрг);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух, ТелБух");
	Если Параметры.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		Параметры.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		Параметры.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОИП.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		Параметры.Вставить("ТелОтв",		?(Параметры.Свойство("ТелОрг"), Параметры.ТелОрг, ""));
	Иначе
		ФИОБух = РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		Параметры.Вставить("ДолжОтв",		"Главный бухгалтер");
		Параметры.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОБух.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		Параметры.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	Параметры.Вставить("ИмяФайлаСхемы",				"NO_NDS_1_003_00_05_01_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_NDS");
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДС");
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ЭкземплярРазделаПуст(ДеревоВыгрузки, ИДРаздела, Данные, ПоказателиИсключения = Неопределено)
	
	Исключения = Новый Структура;
	Если ПоказателиИсключения <> Неопределено Тогда
		Исключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	РезультатыПоиска = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", ИДРаздела), Истина);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		ИДПоказателя = СокрЛП(РезультатПоиска.Ключ);
		ПоказательЯвляетсяСуммой = (РезультатПоиска.Формат = "N" И РезультатПоиска.МаксРазмерность >= 10 И РезультатПоиска.МинРазмерность = 99999);
		Если НЕ ЗначениеЗаполнено(ИДПоказателя) ИЛИ Исключения.Свойство(ИДПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		Если СвойствоОпределено(Данные, ИДПоказателя) И ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя], ПоказательЯвляетсяСуммой) Тогда
			Возврат Ложь;
		ИначеЕсли СвойствоОпределено(Данные, ИДПоказателя + "_1") Тогда
			Инд = 1;
			Пока СвойствоОпределено(Данные, ИДПоказателя + "_" + Формат(Инд, "ЧГ=")) Цикл
				Если ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя + "_" + Формат(Инд, "ЧГ=")], ПоказательЯвляетсяСуммой) Тогда
					Возврат Ложь;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция МногострочнаяЧастьПуста(Данные, СтрПоказатели, СтрПоказателиСуммы = Неопределено)
	
	Если ЗначениеЗаполнено(СтрПоказателиСуммы) Тогда
		ПоказателиСуммы = Новый Структура(СтрПоказателиСуммы);
	Иначе
		ПоказателиСуммы = Новый Структура;
	КонецЕсли;
	
	СтруктураПоказателей = Новый Структура(СтрПоказатели);
	Для Каждого Эл Из СтруктураПоказателей Цикл
		Инд = 1;
		Пока СвойствоОпределено(Данные, Эл.Ключ + "_" + Формат(Инд, "ЧГ=")) Цикл
			Если ЗначениеПоказателяЗаполнено(Данные[Эл.Ключ + "_" + Формат(Инд, "ЧГ=")], ПоказателиСуммы.Свойство(Эл.Ключ)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("400");
	
	ВозможныеКодыПериода = Новый Массив;
	
	ВозможныеКодыПериода.Добавить("21");
	ВозможныеКодыПериода.Добавить("22");
	ВозможныеКодыПериода.Добавить("23");
	ВозможныеКодыПериода.Добавить("24");
	
	ВозможныеКодыПериода.Добавить("51");
	ВозможныеКодыПериода.Добавить("54");
	ВозможныеКодыПериода.Добавить("55");
	ВозможныеКодыПериода.Добавить("56");
	
	ВозможныеКодыПериодаРаздел5 = Новый Массив;
	ВозможныеКодыПериодаРаздел5.Добавить("01");
	ВозможныеКодыПериодаРаздел5.Добавить("02");
	ВозможныеКодыПериодаРаздел5.Добавить("03");
	ВозможныеКодыПериодаРаздел5.Добавить("04");
	ВозможныеКодыПериодаРаздел5.Добавить("05");
	ВозможныеКодыПериодаРаздел5.Добавить("06");
	ВозможныеКодыПериодаРаздел5.Добавить("07");
	ВозможныеКодыПериодаРаздел5.Добавить("08");
	ВозможныеКодыПериодаРаздел5.Добавить("09");
	ВозможныеКодыПериодаРаздел5.Добавить("10");
	ВозможныеКодыПериодаРаздел5.Добавить("11");
	ВозможныеКодыПериодаРаздел5.Добавить("12");
	
	ВозможныеКодыПериодаРаздел5.Добавить("21");
	ВозможныеКодыПериодаРаздел5.Добавить("22");
	ВозможныеКодыПериодаРаздел5.Добавить("23");
	ВозможныеКодыПериодаРаздел5.Добавить("24");
	
	Титульный			= мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1				= мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2				= мДанныеОтчета.Раздел2;
	Раздел3				= мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3Прил1		= мДанныеОтчета.Раздел3_Прил1;
	Раздел3Прил2		= мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4				= мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5				= мДанныеОтчета.Раздел5;
	Раздел6				= мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7				= мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ПериодОтч) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код отчетного периода!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(Параметры.ПериодОтч) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код отчетного периода!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(Параметры.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Параметры.ТипПодписанта = "2" И ПустаяСтрока(Параметры.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка раздела 1
	Если ЗначениеСуммыЗаполнено(Раздел1.П000100003003) ИЛИ ЗначениеСуммыЗаполнено(Раздел1.П000100004003) ИЛИ ЗначениеСуммыЗаполнено(Раздел1.П000100005003) Тогда
		
		// проверяем ОКАТО
		ОКАТОРаздел1 = СокрЛП(Раздел1.П000100001003);
		ДлинаОКАТОРаздел1 = СтрДлина(ОКАТОРаздел1);
		Если ДлинаОКАТОРаздел1 <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаОКАТОРаздел1 = 0, "", "верно") + " задан код по ОКАТО!", "Раздел1", "П000100001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем КБК
		КБКРаздел1 = СокрЛП(Раздел1.П000100002003);
		ДлинаКБКРаздел1 = СтрДлина(КБКРаздел1);
		Если ДлинаКБКРаздел1 <> 20 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБКРаздел1 = 0, "", "верно") + " задан КБК!", "Раздел1", "П000100002003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// проверка раздела 2
	Раздел2Пуст = Истина;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
		
		НомерЛиста = НомерЛиста + 1;
		
		// если раздел пуст, то не проверяем
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел2", ДанныеЛистаРаздела2) Тогда
			Продолжить;
		КонецЕсли;
		
		Раздел2Пуст = Ложь;
		
		// проверяем КПП по строке 010
		КППРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200001003);
		ДлинаКППРаздел2 = СтрДлина(КППРаздел2);
		Если ДлинаКППРаздел2 <> 0 И ДлинаКППРаздел2 <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " неверно задан КПП подразделения иностранной организации!", "Раздел2", "П000200001003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем ИНН налогоплательщика-продавца
		ИННРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200003003);
		ДлинаИННРаздел2 = СтрДлина(ИННРаздел2);
		Если ДлинаИННРаздел2 <> 0 И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННРаздел2) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " задано некорректное значение ИНН!", "Раздел2", "П000200003003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем правильность заполнения наименования налогоплательщика-продавца
		Если (ДанныеЛистаРаздела2.П000200007003 = "1011711" ИЛИ ДанныеЛистаРаздела2.П000200007003 = "1011712" ИЛИ ДанныеЛистаРаздела2.П000200007003 = "1011703")
		И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано наименование налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИННРаздел2 = 10 И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано наименование налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИННРаздел2 = 12 Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_1) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано имя налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_2) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задана фамилия налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем заполнение ИНН при коде операции 1011703
		Если ДанныеЛистаРаздела2.П000200007003 = "1011703" И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200003003) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задан ИНН!", "Раздел2", "П000200003003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение КБК
		КБКРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200004003);
		ДлинаКБКРаздел2 = СтрДлина(КБКРаздел2);
		Если ДлинаКБКРаздел2 <> 20 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не" + ?(ДлинаКБКРаздел2 = 0, "", "верно") + " задан КБК!", "Раздел2", "П000200004003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение ОКАТО
		ОКАТОРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200005003);
		ДлинаОКАТОРаздел2 = СтрДлина(ОКАТОРаздел2);
		Если ДлинаОКАТОРаздел2 <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не" + ?(ДлинаОКАТОРаздел2 = 0, "", "верно") + " задан код по ОКАТО!", "Раздел2", "П000200005003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение кода операции
		КодОперацииРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200007003);
		ДлинаКодОперацииРаздел2 = СтрДлина(КодОперацииРаздел2);
		Если ДлинаКодОперацииРаздел2 <> 7 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задан код операции!", "Раздел2", "П000200007003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если Раздел1Пуст И Раздел2Пуст Тогда
	//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен один из двух разделов: 1 или 2!", "Раздел1", "П000100001003");
	//	СтатусПроверки = Ложь;
	//КонецЕсли;
	
	// проверка приложения 1 к разделу 3
	НомерЛиста = 0;
	Для Каждого ЛистРаздела3Прил1 Из Раздел3Прил1 Цикл
		ДанныеЛистаРаздела3Прил1 = ЛистРаздела3Прил1.Данные;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел3_Прил1", ДанныеЛистаРаздела3Прил1) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем заполнение наименования объекта недвижимости
		НаимНедв = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310001000);
		Если ПустаяСтрока(НаимНедв) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задано наименование объекта недвижимости!", "Раздел3_Прил1", "П000310001000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение почтового индекса из адреса
		ПочтовыйИндекс = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002000_01);
		ДлинаИндекса = СтрДлина(ПочтовыйИндекс);
		Если ДлинаИндекса <> 0 И ДлинаИндекса <> 6 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " неверно задан почтовый индекс!", "Раздел3_Прил1", "П000310002000_01", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение кода субъекта из адреса
		КодСубъекта = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002000_02);
		ДлинаКодСубъектаРФ = СтрДлина(КодСубъекта);
		Если ДлинаКодСубъектаРФ <> 2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не" + ?(ДлинаКодСубъектаРФ = 0, "", "верно") + " задан код субъекта Российской Федерации!", "Раздел3_Прил1", "П000310002000_02", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение кода операции
		КодОперацииРаздел3Прил1 = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310003000);
		ДлинаКодОперацииРаздел3Прил1 = СтрДлина(КодОперацииРаздел3Прил1);
		Если ДлинаКодОперацииРаздел3Прил1 <>7 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не" + ?(ДлинаКодОперацииРаздел3Прил1 = 0, "", "верно") + " задан код операции по объекту недвижимости!", "Раздел3_Прил1", "П000310003000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение даты ввода объекта в эксплуатацию
		Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310004000) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации!", "Раздел3_Прил1", "П000310004000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение даты начала амортизационных отчислений по объекту недвижимости
		Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310005000) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана дата начала амортизационных отчислений по объекту недвижимости!", "Раздел3_Прил1", "П000310005000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// должна быть заполнения хотя бы одна строка табличной части
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела3Прил1, "П000310008001, П000310008002, П000310008003, П000310008004", "П000310008004") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана ни одна строка табличной части!", "Раздел3_Прил1", "П000310008001_1", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// перебираем все строки табличной части
		НомерСтроки = 1;
		Пока СвойствоОпределено(ДанныеЛистаРаздела3Прил1, "П000310008001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			П000310008001 = СокрЛП(ДанныеЛистаРаздела3Прил1["П000310008001_" + Формат(НомерСтроки, "ЧГ=")]);
			П000310008002 = ДанныеЛистаРаздела3Прил1["П000310008002_" + Формат(НомерСтроки, "ЧГ=")];
			П000310008003 = ДанныеЛистаРаздела3Прил1["П000310008003_" + Формат(НомерСтроки, "ЧГ=")];
			П000310008004 = ДанныеЛистаРаздела3Прил1["П000310008004_" + Формат(НомерСтроки, "ЧГ=")];
			
			// на этом этапе проверяем только правильность заполнения года там, где он указан
			Если ЗначениеЗаполнено(П000310008001) ИЛИ ЗначениеЗаполнено(П000310008002) ИЛИ ЗначениеЗаполнено(П000310008003) ИЛИ ЗначениеСуммыЗаполнено(П000310008004) Тогда
				
				ДлинаП000310008001 = СтрДлина(П000310008001);
				Если ДлинаП000310008001 <> 4 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " в строке " + НомерСтроки + " не" + ?(ДлинаП000310008001 = 0, "", "верно") + " задан год!", "Раздел3_Прил1", "П000310008001_" + Формат(НомерСтроки, "ЧГ="), НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				//Если НЕ ЗначениеЗаполнено(П000310008002) Тогда
				//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " в строке " + НомерСтроки + " не задана дата начала использования объекта недвижимости!", "Раздел3_Прил1", "П000310008002_" + Формат(НомерСтроки, "ЧГ="), НомерЛиста);
				//	СтатусПроверки = Ложь;
				//КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// проверка приложения 2 к разделу 3
	НомерСтроки = 1;
	Пока СвойствоОпределено(Раздел3Прил2, "П000320000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000320000101 = СокрЛП(Раздел3Прил2["П000320000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000320000102 = Раздел3Прил2["П000320000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000320000103 = Раздел3Прил2["П000320000103_" + Формат(НомерСтроки, "ЧГ=")];
		
		// проверяем правильность заполнения КПП в выгружаемых строках
		Если ЗначениеЗаполнено(П000320000101) ИЛИ ЗначениеСуммыЗаполнено(П000320000102) ИЛИ ЗначениеСуммыЗаполнено(П000320000103) Тогда
			ДлинаП000320000101 = СтрДлина(П000320000101);
			Если ДлинаП000320000101 <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 2 к разделу 3"" в строке " + НомерСтроки + " не" + ?(ДлинаП000320000101 = 0, "", "верно") + " задан КПП подразделения иностранной организации!", "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// проверка раздела 5
	НомерЛиста = 0;
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел5", ДанныеЛистаРаздела5, "П000500000301") Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем заполнение года
		ГодРаздел5 = СокрЛП(ДанныеЛистаРаздела5.П000500000100);
		ДлинаГодРаздел5 = СтрДлина(ГодРаздел5);
		Если ДлинаГодРаздел5 <> 4 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не" + ?(ДлинаГодРаздел5 = 0, "", "верно") + " задан отчетный год!", "Раздел5", "П000500000100", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение налогового периода
		НалоговыйПериодРаздел5 = СокрЛП(ДанныеЛистаРаздела5.П000500000200);
		ДлинаНалоговыйПериодРаздел5 = СтрДлина(НалоговыйПериодРаздел5);
		Если ВозможныеКодыПериодаРаздел5.Найти(НалоговыйПериодРаздел5) = Неопределено Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не" + ?(ДлинаНалоговыйПериодРаздел5 = 0, "", "верно") + " задан код налогового периода!", "Раздел5", "П000500000200", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем заполнение табличной части
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела5, "П000500000302, П000500000303, П000500000304, П000500000305", "П000500000302, П000500000303, П000500000304, П000500000305") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не задана ни одна строка табличной части!", "Раздел5", "П000500000302_1", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			
			// перебираем строки табличной части
			ИндексСтроки = 1;
			Пока ДанныеЛистаРаздела5.Свойство("П000500000301_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
				СтрИндексСтроки = Формат(ИндексСтроки, "ЧГ=");
				
				// проверка доп. условий из "бумажного" формата
				Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000302_" + СтрИндексСтроки])
				И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000303_" + СтрИндексСтроки]) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов по графе 3!", "Раздел5", "П000500000303_" + СтрИндексСтроки, НомерЛиста);
					СтатусПроверки = Ложь;
				Конецесли;
				
				// проверка доп. условий из "бумажного" формата
				Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000304_" + СтрИндексСтроки])
				И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000305_" + СтрИндексСтроки]) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов по графе 5!", "Раздел5", "П000500000305_" + СтрИндексСтроки, НомерЛиста);
					СтатусПроверки = Ложь;
				Конецесли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			// итог по графе 3 не может быть пуст, если эта графа заполнена хотя бы в одной строке (доп. условие из бумажного формата)
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500001003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500000303_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000303_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 3!", "Раздел5", "П000500001003", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// итог по графе 5 не может быть пуст, если эта графа заполнена хотя бы в одной строке (доп. условие из бумажного формата)
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500001005) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500000305_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000305_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 5!", "Раздел5", "П000500001005", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверка раздела 6
	// если заполнена хотя бы одна сумма в графе 4, то должен быть заполнен итог по этой графе
	Если НЕ ЗначениеСуммыЗаполнено(Раздел6.П000600001004) И НЕ МногострочнаяЧастьПуста(Раздел6, "", "П000600000104") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 6 не задана итоговая сумма налога, исчисленная к уплате в бюджет!", "Раздел6", "П000600001004");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 7
	НомерСтроки = 1;
	Пока СвойствоОпределено(Раздел7, "П000700001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000700001001 = СокрЛП(Раздел7["П000700001001_" + Формат(НомерСтроки, "ЧГ=")]);
		П000700001002 = Раздел7["П000700001002_" + Формат(НомерСтроки, "ЧГ=")];
		П000700001003 = Раздел7["П000700001003_" + Формат(НомерСтроки, "ЧГ=")];
		П000700001004 = Раздел7["П000700001004_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000700001001) ИЛИ ЗначениеСуммыЗаполнено(П000700001002) ИЛИ ЗначениеСуммыЗаполнено(П000700001003) ИЛИ ЗначениеСуммыЗаполнено(П000700001004) Тогда
			ДлинаП000700001001 = СтрДлина(П000700001001);
			Если ДлинаП000700001001 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 7 в строке " + НомерСтроки + " не" + ?(ДлинаП000700001001 = 0, "", "верно") + " задан код операции!", "Раздел7", "П000700001001_" + Формат(НомерСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
		
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Титульный			= мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1				= мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2				= мДанныеОтчета.Раздел2;
	Раздел3				= мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3_Прил1		= мДанныеОтчета.Раздел3_Прил1;
	Раздел3_Прил2		= мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4				= мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5				= мДанныеОтчета.Раздел5;
	Раздел6				= мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7				= мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// выгружаем раздел 1
	УзелСумУплНП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНП");
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "ОКАТО", Раздел1.П000100001003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "КБК", Раздел1.П000100002003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.5", Раздел1.П000100003003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.1", ?(ЗначениеСуммыЗаполнено(Раздел1.П000100005003), -Раздел1.П000100005003, Раздел1.П000100004003));
	
	// выгружаем раздел 2
	УзелСумУплНАШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНА");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		
		УзелСумУплНА = СкопироватьУзел(УзелРодитель, УзелСумУплНАШаблон);
		ЗаполнитьДаннымиУзел(ЛистРаздела2.Данные, УзелСумУплНА);
		
		ИННЭкземпляраРаздела = СокрЛП(ЛистРаздела2.Данные.П000200003003);
		Если СтрДлина(ИННЭкземпляраРаздела) = 10 ИЛИ НЕ ЗначениеЗаполнено(ИННЭкземпляраРаздела) Тогда
			УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродФЛ"));
		ИначеЕсли СтрДлина(ИННЭкземпляраРаздела) = 12 Тогда
			УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродЮЛ"));
		КонецЕсли;
		
	КонецЦикла;
	
	// выгружаем раздел 3
	УзелСумУпл164 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУпл164");
	ЗадатьЗначениеЭлемента(УзелСумУпл164, "НалПУ164", ?(ЗначениеСуммыЗаполнено(Раздел3.П000300024003), -Раздел3.П000300024003, Раздел3.П000300023003));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалОб"));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалВыч"));
	
	// выгружаем раздел 3 прил. 1
	УзелСумВосУплШаблон = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВосУпл");
	Для Каждого ЛистРаздел3Прил1 Из Раздел3_Прил1 Цикл
		УзелСумВосУпл = СкопироватьУзел(УзелСумУпл164, УзелСумВосУплШаблон);
		ДанныеЛистРаздел3Прил1 = ЛистРаздел3Прил1.Данные;
		Для Каждого Узел Из УзелСумВосУпл.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистРаздел3Прил1[Узел.Ключ]);
			ИначеЕсли Узел.Код = "АдрМННед" Тогда
				ЗаполнитьДаннымиУзел(ДанныеЛистРаздел3Прил1, Узел);
			КонецЕсли;
		КонецЦикла;
		УзелСведНалГодШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВосУпл, "СведНалГод");
		Инд = 1;
		Пока СвойствоОпределено(ДанныеЛистРаздел3Прил1, "П000310008001_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСведНалГод = СкопироватьУзел(УзелСумВосУпл, УзелСведНалГодШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистРаздел3Прил1, УзелСведНалГод, Инд);
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// выгружаем раздел 3 прил. 2
	УзелСумВычИн = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВычИн");
	УзелСведНалГодИШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВычИн, "СведНалГодИ");
	Инд = 1;
	Пока СвойствоОпределено(Раздел3_Прил2, "П000320000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСведНалГодИ = СкопироватьУзел(УзелСумВычИн, УзелСведНалГодИШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел3_Прил2, УзелСведНалГодИ, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
	// выгружаем раздел 4
	УзелНалПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалПодтв0, "СумУменИтог", Раздел4.П000400001000);
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер4");
	Инд = 1;
	Пока СвойствоОпределено(Раздел4, "П000400000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, УзелСумОпер, Инд, "П000400000101");
		Инд = Инд + 1;
	КонецЦикла;
	
	// выгружаем раздел 5
	УзелНалВычПред0Шаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалВычПред0");
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные;
		УзелЛистаРаздела5 = СкопироватьУзел(УзелРодитель, УзелНалВычПред0Шаблон);
		Для Каждого Узел Из УзелЛистаРаздела5.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистаРаздела5[Узел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелЛистаРаздела5, "СумОпер5");
		Инд = 1;
		Пока СвойствоОпределено(ДанныеЛистаРаздела5, "П000500000301_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСумОпер = СкопироватьУзел(УзелЛистаРаздела5, УзелСумОперШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистаРаздела5, УзелСумОпер, Инд, "П000500000301");
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// выгружаем раздел 6
	УзелНалНеПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалНеПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалБазаИт", Раздел6.П000600001002);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "СумНал164Ит", Раздел6.П000600001003);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалВычНеПодИт", Раздел6.П000600001004);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалИсчислИт", ?(ЗначениеСуммыЗаполнено(Раздел6.П000600003004), -Раздел6.П000600003004, Раздел6.П000600002004));
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер6");
	Пока СвойствоОпределено(Раздел6, "П000600000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалНеПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел6, УзелСумОпер, Инд, "П000600000101");
		Инд = Инд + 1;
	КонецЦикла;
	
	// выгружаем раздел 7
	УзелОперНеНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОперНеНал");
	ЗадатьЗначениеЭлемента(УзелОперНеНал, "ОплПостСв6Мес", Раздел7.П000700002000);
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелОперНеНал, "СумОпер7");
	Пока СвойствоОпределено(Раздел7, "П000700001001_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелОперНеНал, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел7, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки); // !!!
	
КонецПроцедуры

Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	// решаем, оставлять ли узел СумПУ_173.1 (раздел 1)
	УзелСумПУ_173_1 = УзелНДС.Строки.Найти("СумПУ_173.1", "Код", Истина);
	Если УзелПуст(УзелСумПУ_173_1) Тогда
		
		// если узел пуст и не выполняются условия его присутствия, то удаляем узел
		Если УзелНДС.Строки.Найти("СумУпл164", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалПодтв0", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалВычПред0", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалНеПодтв0", "Код") = Неопределено Тогда
			УзелСумПУ_173_1.Родитель.Строки.Удалить(УзелСумПУ_173_1);
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узел НалИсчСМР (раздел 3)
	УзелНалИсчСМР = УзелНДС.Строки.Найти("НалИсчСМР", "Код", Истина);
	Если УзелНалИсчСМР <> Неопределено И УзелПуст(УзелНалИсчСМР) И УзелНалИсчСМР.Родитель.Родитель.Строки.Найти("ВыпСМРСоб", "Код", Истина) = Неопределено Тогда
		
		// удаляем НалИсчСМР
		УзелНалИсчСМР.Родитель.Строки.Удалить(УзелНалИсчСМР);
		
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНалВосст (раздел 3)
	УзелСумНалВосст = УзелНДС.Строки.Найти("СумНалВосст", "Код", Истина);
	Если УзелСумНалВосст <> Неопределено И УзелПуст(УзелСумНалВосст) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыДатаИсп170 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "ДатаИсп170"), Истина);
		Если УзлыДатаИсп170.Количество() = 0 Тогда
			
			// удаляем узел СумНалВосст
			УзелСумНалВосст.Родитель.Строки.Удалить(УзелСумНалВосст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалОб пуст и СумНалИсч отсутствует, то удалим СумНалОб (раздел 3)
	// узел СумНалОб проверяем на пустоту именно по количеству подчиненных строк,
	// потому что возможны ситуации, когда узлу подчинен пустой узел СумНалВосст (см. выше)
	УзелСумНалОб = УзелНДС.Строки.Найти("СумНалОб", "Код", Истина);
	Если УзелСумНалОб <> Неопределено И УзелСумНалОб.Строки.Количество() = 1 И УзелПуст(УзелСумНалОб.Строки[0]) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыСумНалИсч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумНалИсч"), Истина);
		Если УзлыСумНалИсч.Количество() = 0 Тогда
			
			// удаляем узел СумНалОб
			УзелСумНалОб.Родитель.Строки.Удалить(УзелСумНалОб);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалВыч пуст и нет ни одного (СумНалВыч, подчиненного СумВычИн),
	// то удалим СумНалВыч
	УзелСумУпл164 = УзелНДС.Строки.Найти("СумУпл164", "Код", Истина);
	Если УзелСумУпл164 <> Неопределено Тогда
		
		// ищем СумНалВыч в подчинении СумУпл164
		УзелСумНалВычСложный = УзелСумУпл164.Строки.Найти("СумНалВыч", "Код");
		Если УзелСумНалВычСложный <> Неопределено Тогда
			
			// если остался только НалВычОбщ и он пустой
			Если УзелСумНалВычСложный.Строки.Количество() = 1 И УзелПуст(УзелСумНалВычСложный.Строки[0]) Тогда
				
				// если при этом нет ни одного заполненного СумНалВыч(П000320000103), то удаляем сложный СумНалВыч
				УзлыСумНалВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код, Ключ", "СумНалВыч", "П000320000103"), Истина);
				Если УзлыСумНалВыч.Количество() = 0 Тогда
					УзелСумНалВычСложный.Родитель.Строки.Удалить(УзелСумНалВычСложный);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узлы ДоляНеОбл и НалГод
	УзлыСведНалГод = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СведНалГод"), Истина);
	Для Каждого УзелСведНалГод Из УзлыСведНалГод Цикл
		
		УзелДатаИсп170 = УзелСведНалГод.Строки.Найти("ДатаИсп170", "Код");
		Если УзелДатаИсп170 = Неопределено ИЛИ УзелПуст(УзелДатаИсп170) Тогда
			
			УзелДоляНеОбл = УзелСведНалГод.Строки.Найти("ДоляНеОбл", "Код");
			Если УзелПуст(УзелДоляНеОбл) Тогда
				УзелСведНалГод.Строки.Удалить(УзелДоляНеОбл);
			КонецЕсли;
			
			УзелНалГод = УзелСведНалГод.Строки.Найти("НалГод", "Код");
			Если УзелПуст(УзелНалГод) Тогда
				УзелСведНалГод.Строки.Удалить(УзелНалГод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел СумУменИтог (раздел 4)
	УзелСумУменИтог = УзелНДС.Строки.Найти("СумУменИтог", "Код", Истина);
	Если УзелСумУменИтог <> Неопределено И УзелПуст(УзелСумУменИтог) Тогда
		Если УзелСумУменИтог.Родитель.Строки.Найти("НалВычПод", "Код", Истина) = Неопределено
		И УзелСумУменИтог.Родитель.Строки.Найти("НалНеПод", "Код", Истина) = Неопределено
		И УзелСумУменИтог.Родитель.Строки.Найти("НалВосст", "Код", Истина) = Неопределено Тогда
			УзелСумУменИтог.Родитель.Строки.Удалить(УзелСумУменИтог);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узлы СтПриобТов и НалНеВыч
	УзлыСумОпер7 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумОпер7"), Истина);
	Для Каждого УзелСумОпер7 Из УзлыСумОпер7 Цикл
		
		УзелКодОпер = УзелСумОпер7.Строки.Найти("КодОпер", "Код");
		Если Лев(СокрЛП(УзелКодОпер.Значение), 5) <> "10102" Тогда
			
			УзелСтПриобТов = УзелСумОпер7.Строки.Найти("СтПриобТов", "Код");
			Если УзелПуст(УзелСтПриобТов) Тогда
				УзелСумОпер7.Строки.Удалить(УзелСтПриобТов);
			КонецЕсли;
			
			УзелНалНеВыч = УзелСумОпер7.Строки.Найти("НалНеВыч", "Код");
			Если УзелПуст(УзелНалНеВыч) Тогда
				УзелСумОпер7.Строки.Удалить(УзелНалНеВыч);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел ОплПостСв6Мес
	УзелОплПостСв6Мес = УзелНДС.Строки.Найти("ОплПостСв6Мес", "Код", Истина);
	Если УзелОплПостСв6Мес <> Неопределено И УзелПуст(УзелОплПостСв6Мес) Тогда
		
		// если узлы НалНеВыч присутствуют в дереве выгрузки, то удалим пустой узел ОплПостСв6Мес
		УзлыНалНеВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "НалНеВыч"), Истина);
		Если УзлыНалНеВыч.Количество() > 0 Тогда
			УзелОплПостСв6Мес.Родитель.Строки.Удалить(УзелОплПостСв6Мес);
		КонецЕсли;
		
	КонецЕсли;
	
	//СтрокиСумОпер5 = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", "СумОпер5"), Истина);
	//Для Каждого СтрокаСумОпер5 Из СтрокиСумОпер5 Цикл
	//	
	//	// если НалВычПод не заполнен, а НалБазаПод уже удален, то удалим и НалВычПод
	//	УзелНалБазаПод		= СтрокаСумОпер5.Строки.Найти("НалБазаПод",	"Код");
	//	УзелНалВычПод		= СтрокаСумОпер5.Строки.Найти("НалВычПод",		"Код");
	//	Если УзелПуст(УзелНалВычПод) И УзелНалБазаПод = Неопределено Тогда
	//		СтрокаСумОпер5.Строки.Удалить(УзелНалВычПод);
	//	КонецЕсли;
	//	
	//	// если НалВычНеПод не заполнен, а НалБазаНеПод уже удален, то удалим и НалВычНеПод
	//	УзелНалБазаНеПод	= СтрокаСумОпер5.Строки.Найти("НалБазаНеПод",	"Код");
	//	УзелНалВычНеПод		= СтрокаСумОпер5.Строки.Найти("НалВычНеПод",	"Код");
	//	Если УзелПуст(УзелНалВычНеПод) И УзелНалБазаНеПод = Неопределено Тогда
	//		СтрокаСумОпер5.Строки.Удалить(УзелНалВычНеПод);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
////////////////////////////////////////////////////////////////////////////////

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//используется для удаления значений итоговых показателей на листах МЧБ, образованных многострочными разделами (кроме последнего)
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
		
		ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
		ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
		
		Для Каждого Обл Из ТаблДок.Области Цикл
			Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
				И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
				И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная
				Тогда
					Обл.Текст = "-";
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли
КонецПроцедуры

Процедура Печать(ВидПечати) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный",		"МЧБ_2009кв4_1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",			"МЧБ_2009кв4_2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",			"МЧБ_2009кв4_3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел3",			"МЧБ_2009кв4_4");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел3_Прил1",	"МЧБ_2009кв4_5");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел3_Прил2",	"МЧБ_2009кв4_6");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел4",			"МЧБ_2009кв4_7");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел5",			"МЧБ_2009кв4_8");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел6",			"МЧБ_2009кв4_9");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел7",			"МЧБ_2009кв4_10");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 0;
	МакетМЧБ.ПолеСправа = 0;
	МакетМЧБ.ПолеСнизу = 0;
	МакетМЧБ.ПолеСлева = 0;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	//Определение: является ли раздел многострочным 
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Сред(Параметры.ИмяТабличногоПоля,24));
	Если ИдГруппы <> Неопределено Тогда
		//определение исходного количества строк на листе МЧБ
		ИсхКолвоСтрокБлока = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы,ИсхКолвоСтрокБлока);
		ТекКолвоСтрокБлока = мСтруктураМногострочныхРазделов[ИдГруппы].Количество();
		Если ТекКолвоСтрокБлока > ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			Для каждого КолонкаСтруктуры Из мСтруктураМногострочныхРазделов[ИдГруппы].Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				//переименование+++ (начиная со второго листа)
				Если Сч > 1 Тогда
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							//проверка на вхождение в данную многострочную часть
							Продолжить;
						КонецЕсли;
						
						//определение и обрасывание НомерЯчейки
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						//определение СмысловаяЧасть и ТекущийСчетчик
						СмысловаяЧастьСРазделителем = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						//Окончательная проверка на вхождение в данную многострочную часть
						Если Найти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ИсхКолвоСтрокБлока;
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							//очищение происходит после этого цикла
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						//Подготовка к переименованию
						//заполнение списка: значение - область, представление - будущее имя
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
					КонецЦикла;
					
					//Очищение
					Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = "-";
					КонецЦикла;
					
					//Переименование
					Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
					КонецЦикла;
							
				КонецЕсли; 
				//переименование---
				//
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Параметры, ЛистМЧБ);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ЛистМЧБ, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
				
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
		
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Если Область.Имя = "Приказ" Тогда
			Область.Значение = Значение;
		Иначе
			Область.Значение = ВРЕГ(Значение);
		КонецЕсли;
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПолеТабличногоДокументаТитульныйR20C27ПриИзменении(Элемент)
	
	Если НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Элемент.Значение) Тогда
		Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
		Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
		Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

//КнопкаПредыдущаяСтраница
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел2");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел5");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел3_Прил1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел3_Прил1");
КонецПроцедуры

//КнопкаСледующаяСтраница
Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел5");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел3_Прил1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел3_Прил1");
КонецПроцедуры

//КнопкаДобавитьДопСтраницу
Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	ВставитьДополнительнуюСтраницу("Раздел2");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел3_Прил1Нажатие(Элемент)
	ВставитьДополнительнуюСтраницу("Раздел3_Прил1");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел5Нажатие(Элемент)
	ВставитьДополнительнуюСтраницу("Раздел5");
КонецПроцедуры

//КнопкаУдалитьДопСтраницу
Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	УдалитьДополнительнуюСтраницу("Раздел2");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел5Нажатие(Элемент)
	УдалитьДополнительнуюСтраницу("Раздел5");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел3_Прил1Нажатие(Элемент)
	УдалитьДополнительнуюСтраницу("Раздел3_Прил1");
КонецПроцедуры

//КнопкаПерейтиНаСтраницу
Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел5Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел5");
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел3_Прил1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел3_Прил1");
КонецПроцедуры

//КнопкаДобавитьДопСтроки
Процедура КнопкаДобавитьДопСтрокиРаздел3_Прил2Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел7Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

//КнопкаУдалитьДопСтроки
Процедура КнопкаУдалитьДопСтрокиРаздел3_Прил2Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел7Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел3ПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел3ПриИзменении(Элемент)
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел3ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;
КонецПроцедуры

 
////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура Надпись33Нажатие(Элемент)
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2009Кв4";

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);

мОписаниеТиповДата 		= Новый ОписаниеТипов(МассивДата, КвалификаторДата);
мОписаниеТиповЧислоЕ 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));
мОписаниеТиповСтрока4   = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4));
мОписаниеТиповСтрока7   = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(7));
мОписаниеТиповСтрока9   = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9));
мОписаниеТиповЧисло41 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1));
                                                                   
// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы31 = "П0003100080";
мИдГруппы32 = "П0003200001";
мИдГруппы4  = "П0004000001";
мИдГруппы5  = "П0005000003";
мИдГруппы6  = "П0006000001";
мИдГруппы7  = "П0007000010";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы31 = 10;
КолИсхСтрокИдГруппы32 = 23;
КолИсхСтрокИдГруппы4  = 17;
КолИсхСтрокИдГруппы5  = 17;
КолИсхСтрокИдГруппы6  = 17;
КолИсхСтрокИдГруппы7  = 21;

// структура строк многострочного раздела на странице
СтруктураГруппы31 = Новый ТаблицаЗначений;
СтруктураГруппы31.Колонки.Добавить("П000310008001", мОписаниеТиповСтрока4);
СтруктураГруппы31.Колонки.Добавить("П000310008002", мОписаниеТиповДата);
СтруктураГруппы31.Колонки.Добавить("П000310008003", мОписаниеТиповЧисло41);
СтруктураГруппы31.Колонки.Добавить("П000310008004", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел3_Прил1"));

СтруктураГруппы32 = Новый ТаблицаЗначений;
СтруктураГруппы32.Колонки.Добавить("П000320000101", мОписаниеТиповСтрока9);
СтруктураГруппы32.Колонки.Добавить("П000320000102", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел3_Прил2"));
СтруктураГруппы32.Колонки.Добавить("П000320000103", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел3_Прил2"));

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000400000102", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел4"));
СтруктураГруппы4.Колонки.Добавить("П000400000103", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел4"));
СтруктураГруппы4.Колонки.Добавить("П000400000104", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел4"));
СтруктураГруппы4.Колонки.Добавить("П000400000105", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел4"));

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000500000302", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел5"));
СтруктураГруппы5.Колонки.Добавить("П000500000303", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел5"));
СтруктураГруппы5.Колонки.Добавить("П000500000304", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел5"));
СтруктураГруппы5.Колонки.Добавить("П000500000305", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел5"));

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000600000102", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел6"));
СтруктураГруппы6.Колонки.Добавить("П000600000103", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел6"));
СтруктураГруппы6.Колонки.Добавить("П000600000104", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел6"));

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000700001001", мОписаниеТиповСтрока7);
СтруктураГруппы7.Колонки.Добавить("П000700001002", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел7"));
СтруктураГруппы7.Колонки.Добавить("П000700001003", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел7"));
СтруктураГруппы7.Колонки.Добавить("П000700001004", ПолучитьОписаниеТипаЧислаЕДляРаздела("Раздел7"));

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы31, СтруктураГруппы31);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы32, СтруктураГруппы32);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4,  СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5,  СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6,  СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7,  СтруктураГруппы7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы31, КолИсхСтрокИдГруппы31);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы32, КолИсхСтрокИдГруппы32);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4,  КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5,  КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6,  КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7,  КолИсхСтрокИдГруппы7);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = ПолучитьТаблицуМногостраничногоРаздела();
ТаблицаСтраницыРазделаДляМногострочныхРазделов=ПолучитьТаблицуМногостраничногоРаздела(Истина);
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел3_Прил1", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел5", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());

// Версия формы
мВерсияФормы = "19/03/2009";

// Код отчета, равен КНД
мКодОтчета = "1151001";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.01", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
