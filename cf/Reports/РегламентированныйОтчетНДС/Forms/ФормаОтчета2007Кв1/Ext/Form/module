////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел4;
Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;
Перем мРаздел8;
Перем мРаздел9;
Перем мПриложение; // Примечание.

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Переменная используется для пересбора данных об организации и при копировании отчета по F9.
Перем мВПрограммеИзмененаОрганизация;

// Хранят имена многострочных разделов
Перем мИдГруппы1; // Раздел 4
Перем мИдГруппы2; // Раздел 5
Перем мИдГруппы3; // Раздел 6
Перем мИдГруппы4; // Раздел 7
Перем мИдГруппы5; // Раздел 8
Перем мИдГруппы6; // Раздел 9
Перем мИдГруппы7; // Раздел 10 (Приложение)

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Хранятся переменные для вставки в структуру
Перем мСуммаНалогДоплата;
Перем мСуммаНалогУменьш;
Перем мОКВЭДРаздел1; // Код ОКВЭД в Разделе 1.1

Перем мСтрока090Раздел2;
Перем мСтрока110Раздел2;
Перем мСтрока120Раздел2;
Перем мСтрока130Раздел2;
Перем мОКВЭДРаздел2;  // Код ОКВЭД в разделе 2.

// Переменная для хранения кода региона для раздела 10.
Перем мКодРегионаПриложение;

// Переменные для ИННов оставлены, т.к. вводятся без 00, отображаюстя с ведущими 00, а для выгрузки без 00.
Перем мИННРаздел2ДляВыгрузки;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

// Список КБК для выбора
Перем мКБК2005;
Перем мКБК2006;
Перем мКБК2006Раздел2; // Для раздела 2, с одним КБК
Перем мТаблКодыОперацийРаздел2;
Перем мТаблКодыОперацийРаздел2_2008;
Перем мТаблКодыОперацийРаздел2_2009;
Перем мНдсОперацииПриложение; // Приложение
Перем мНдсОперацииПриложение_2008;
Перем мФильтрКодовДляРаздела2; // Для раздела 2, фильтр по агентам.

// Переменные Раздела 2 Фио.
Перем мФИОДляВыгрузкиРаздел2;   // Строка для выгрузки
Перем мДанныеЛистаРаздел2ФИО;  // Флаг, выбран фл. - Истина, юр. - Ложь.
Перем мФамилияРаздел2;          // Фамилия.
Перем мИмяРаздел2;              // Имя.
Перем мОтчествоРаздел2;         // Отчество.

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

// Для явной установки типа Булево.
Перем мОписаниеТиповБулево;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

// Однозначный признак восстановления отчета черзе процедуру ВосстановитьСохраненныеДанные
Перем мДокументВосстановлен;

// Возводится в Истина, при печати, по окончании печати, возвращается в Ложь.
Перем мРежимПечати Экспорт;

// Флаг, форма открыта или без открытия вызвана, из формы ЦУО.
Перем мБезОткрытияФормы Экспорт;

// Поля для поиска в таблице показателей.
Перем мПоляПоискаПоказателяВТСП Экспорт;

// Переменная для хранения координато масок и сами маски.
Перем мМаскиЯчейки;

// Переменная для установки соответствия кода раздела (код показателя по составу) и поля табличного документа раздела.
Перем мСоотвествиеКодаИРаздела;

Перем мБезКонсолидации Экспорт;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		ОперацияСКППНаЛисте(мРаздел2);
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		ПерепроставитьПорядковыеНомера("Раздел2");
		ПерепроставитьПорядковыеНомера("Раздел6");
		ПерепроставитьПорядковыеНомера("Раздел8");
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры // Очистить()

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	// Если УдалениДопЭкз = Истина, тогда пересчитаем порядковые номера в этих многостраничных разделах.
	Если ИмяСтраницы = "Раздел2" Тогда
		ОперацияСКППНаЛисте(мРаздел2);
		Если УдалениДопЭкз Тогда
			ПерепроставитьПорядковыеНомера("Раздел2");
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Раздел6" Тогда
		Если УдалениДопЭкз Тогда
			ПерепроставитьПорядковыеНомера("Раздел6");
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Раздел8" Тогда
		Если УдалениДопЭкз Тогда
			ПерепроставитьПорядковыеНомера("Раздел8");
		КонецЕсли;
	КонецЕсли;
	// Перерассчитываем связанные разделы.
	РасчетЗависимыхРазделовДекларации(ИмяСтраницы);

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("ПерестановкаСтраницЗапрещена", мОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", мОписаниеТиповБулево);

	МнгРаздел4 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел4.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел5 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел5.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел6 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел6.Добавить();
	НовСтр.ИдГруппы = мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел7 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел7.Добавить();
	НовСтр.ИдГруппы = мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.НезаполняемыеПоказателиЕсть = Истина;
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел8 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел8.Добавить();
	НовСтр.ИдГруппы = мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел9 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел9.Добавить();
	НовСтр.ИдГруппы = мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгПриложение = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение.Добавить();
	НовСтр.ИдГруппы = мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020003000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	// СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел4;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела5
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел5;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела6
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел6;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	// СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела7
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел7;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела8
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел8;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	// СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела8
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел9;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела8
	СтрокаУровня1.ИмяСтраницы                          = "Приложение";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_АдресДляПользователя";
	СтрокаУровня1.ПредставлениеДанных                  = Истина; // Код региона отдельно для каждого экз. листа раздела 10.
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел4;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда // Раздел 4 Тогда
		ТекТабличноеПоле = мРаздел5;
	ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
		ТекТабличноеПоле = мРаздел6;
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
		ТекТабличноеПоле = мРаздел7;
	ИначеЕсли ИдГруппы = мИдГруппы5 Тогда
		ТекТабличноеПоле = мРаздел8;
	ИначеЕсли ИдГруппы = мИдГруппы6 Тогда
		ТекТабличноеПоле = мРаздел9;
	ИначеЕсли ИдГруппы = мИдГруппы7 Тогда
		ТекТабличноеПоле = мПриложение;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
		ИмяГруппы = мИдГруппы5;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
		ИмяГруппы = мИдГруппы6;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение" Тогда
		ИмяГруппы = мИдГруппы7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда
		СтруктураДанныхПоля.Вставить("СуммаНалогДоплата", мСуммаНалогДоплата);
		СтруктураДанныхПоля.Вставить("СуммаНалогУменьш", мСуммаНалогУменьш);
		СтруктураДанныхПоля.Вставить("ОКВЭДРаздел1", мОКВЭДРаздел1);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда
		СтруктураДанныхПоля.Вставить("Строка090Раздел2", мСтрока090Раздел2);
		СтруктураДанныхПоля.Вставить("Строка110Раздел2", мСтрока110Раздел2);
		СтруктураДанныхПоля.Вставить("Строка120Раздел2", мСтрока120Раздел2);
		СтруктураДанныхПоля.Вставить("Строка130Раздел2", мСтрока130Раздел2);

		СтруктураДанныхПоля.Вставить("ОКВЭДРаздел2", мОКВЭДРаздел2);

		СтруктураДанныхПоля.Вставить("ИННРаздел2ДляВыгрузки", мИННРаздел2ДляВыгрузки);

		Номер = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "Номер");
		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Номер) Тогда
			Номер = Число(Номер);
		Иначе
			Инд = мСтруктураМногостраничныхРазделов.Раздел2.Найти(Истина, "АктивнаяСтраница");
			Номер = мСтруктураМногостраничныхРазделов.Раздел2.Индекс(Инд) + 1;
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("ПорядковыйНомерРаздел2", Номер);

		// ФИО
		СтруктураДанныхПоля.Вставить("ФИОДляВыгрузкиРаздел2"               , мФИОДляВыгрузкиРаздел2);
		СтруктураДанныхПоля.Вставить("ДанныеЛистаРаздел2ФИО"               , мДанныеЛистаРаздел2ФИО);
		СтруктураДанныхПоля.Вставить("ФамилияРаздел2"                      , мФамилияРаздел2);
		СтруктураДанныхПоля.Вставить("ИмяРаздел2"                          , мИмяРаздел2);
		СтруктураДанныхПоля.Вставить("ОтчествоРаздел2"                     , мОтчествоРаздел2);

		// Используется только для проверки соотношений.
		СтруктураДанныхПоля.Вставить("_КодОперацииПоСтроке100Раздела2", РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КодОперацииРаздел2_"));

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел6" Тогда
		Номер = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел6", "Номер");
		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Номер) Тогда
			Номер = Число(Номер);
		Иначе
			Инд = мСтруктураМногостраничныхРазделов.Раздел6.Найти(Истина, "АктивнаяСтраница");
			Номер = мСтруктураМногостраничныхРазделов.Раздел6.Индекс(Инд) + 1;
		КонецЕсли;
		СтруктураДанныхПоля.Вставить("ПорядковыйНомерРаздел6", Номер);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел8" Тогда
		Номер = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел8", "Номер");
		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Номер) Тогда
			Номер = Число(Номер);
		Иначе
			Инд = мСтруктураМногостраничныхРазделов.Раздел8.Найти(Истина, "АктивнаяСтраница");
			Номер = мСтруктураМногостраничныхРазделов.Раздел8.Индекс(Инд) + 1;
		КонецЕсли;
		СтруктураДанныхПоля.Вставить("ПорядковыйНомерРаздел8", Номер);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаПриложение" Тогда

		Адрес1 = СобратьАдресИзТабличногоПоля("БезТекстаРегиона");
		Адрес2 = СобратьАдресИзТабличногоПоля("СТекстомРегиона");
		СтруктураДанныхПоля.Вставить("_АдресПриложение", Адрес1);
		СтруктураДанныхПоля.Вставить("_АдресДляПользователя", РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адрес2));

		СтруктураДанныхПоля.Вставить("КодРегионаПриложение", мКодРегионаПриложение);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// СобратьАдресИзТабличногоПоля
//
Функция СобратьАдресИзТабличногоПоля(Знач Парам)

	ПочтИндекс = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Приложение", "ПочтИндекс");

	СубъектРФ = мКодРегионаПриложение;
	ТекстРегиона = мПриложение.Области.СубъектРФ.Значение;
	Район     = мПриложение.Области.Район.Значение;
	Город     = мПриложение.Области.Город.Значение;
	НП        = мПриложение.Области.НаселенныйПункт.Значение;
	Улица     = мПриложение.Области.Улица.Значение;
	Дома      = мПриложение.Области.НомерДома.Значение;
	Корпус    = мПриложение.Области.НомерСтроения.Значение;
	Квартира  = мПриложение.Области.НомерКвартиры.Значение;

	АдресРезультат = "643," + СокрЛП(ПочтИндекс) + ","
	                + ?(Парам = "СТекстомРегиона", ТекстРегиона, СокрЛП(СубъектРФ)) + ","

	                + СокрЛП(Район) + ","
	                + СокрЛП(Город) + ","
	                + СокрЛП(НП) + ","
	                + СокрЛП(Улица) + ","
	                + СокрЛП(Дома) + ","
	                + СокрЛП(Корпус) + ","
	                + СокрЛП(Квартира);

	Возврат АдресРезультат;

КонецФункции // СобратьАдресИзТабличногоПоля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли Страница = "Раздел1" Тогда

		мСуммаНалогДоплата = 0;
		мСуммаНалогУменьш = 0;
		мОКВЭДРаздел1 = "";

	ИначеЕсли Страница = "Раздел2" Тогда

		мСтрока090Раздел2 = 0;
		мСтрока110Раздел2 = 0;
		мСтрока120Раздел2 = 0;
		мСтрока130Раздел2 = 0;

		мИННРаздел2ДляВыгрузки = "";

		мФИОДляВыгрузкиРаздел2 = "";
		мДанныеЛистаРаздел2ФИО = Ложь;
		мФамилияРаздел2 = "";
		мИмяРаздел2 = "";
		мОтчествоРаздел2 = "";
		мОКВЭДРаздел2 = "";

	ИначеЕсли Страница = "Приложение" Тогда
		мКодРегионаПриложение = "";
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","СуммаНалогДоплата", 15, мСуммаНалогДоплата, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","СуммаНалогУменьш", 15, мСуммаНалогУменьш, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел2" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","Сумма090Раздел2_", 15, мСтрока090Раздел2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","Сумма110Раздел2_", 15, мСтрока110Раздел2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","Сумма120Раздел2_", 15, мСтрока120Раздел2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","Сумма130Раздел2_", 15, мСтрока130Раздел2, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период в заголовке отчета
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);

	Если (мДокументВосстановлен) И (мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММ");
	НомерКвартала = РегламентированнаяОтчетность.ДополнитьСтроку(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"), 2, "0");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц Тогда
		мТитульный.Области.НалогПериод.Значение = "1";
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомКвартал", 2, НомерМесяца);
	Иначе
		мТитульный.Области.НалогПериод.Значение = "3";
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомКвартал", 2, НомерКвартала);
	КонецЕсли;

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, НомерГода);

КонецПроцедуры // ПоказатьПериод()

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиИП      = "";

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	ДатаПодписиРук = стрУказаннаяДата;
	ДатаПодписиУпПред = стрУказаннаяДата;
	ДатаПодписиИП = стрУказаннаяДата;
	Если (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Или (ЧП) Тогда
		ДатаПодписиРук = "        ";
	КонецЕсли;

	Если (ПустаяСтрока(мТитульный.Области.ОргУп.Значение)) Тогда
		ДатаПодписиУпПред = "        ";
	КонецЕсли;

	ДатаПодписиИП  = ?(ЧП, стрУказаннаяДата, "        ");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(ДатаПодписиРук, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп"  + НомЯчейки].Значение = Сред(ДатаПодписиУпПред, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(ДатаПодписиИП, НомЯчейки, 1);

	КонецЦикла;

	Если ЧП Тогда
		// У ИП не может быть директора, бухгалтера и представителя.
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        ", "ДатаПодписи1_", "Титульный, Приложение", , , Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи4_", "Титульный, Приложение", , , Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиИП, "ДатаПодписи3_", "Титульный, Приложение", , , Ложь);
	Иначе
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиРук, "ДатаПодписи1_", "Титульный, Приложение", , , Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи4_", "Титульный, Приложение", , , Ложь);
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиИП, "ДатаПодписи3_", "Титульный, Приложение", , , Ложь);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Ложь);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "КППЮЛ, НаимЮЛПол, ОКАТО, КодНО, НаимНО, ТипНП, ТелОрганизации, ОКВЭД, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИО";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		Если СтрДлина(Результат.ОКАТО) = 11 И ОбщегоНазначения.ТолькоЦифрыВСтроке(Результат.ОКАТО) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТОРаздел1_", 11, Результат.ОКАТО);
		КонецЕсли;

		// В случае Обновить, вторым параметров должно быть Ложь.
		РегламентированнаяОтчетность.ПроставитьИННКППНаВсехЛистахРегОтчета(ЭтаФорма, НЕ мВпрограммеИзмененаОрганизация);

		ОКВЭДСправочникОрг = Результат.ОКВЭД;
		// Уберем точки и зпт. из строки
		ОКВЭДСправочникОрг = СтрЗаменить(ОКВЭДСправочникОрг, ",", "");
		ОКВЭДСправочникОрг = СтрЗаменить(ОКВЭДСправочникОрг, ".", "");
		ОКВЭДСправочникОрг = СтрЗаменить(ОКВЭДСправочникОрг, " ", "");

		Если НЕ ПустаяСтрока(ОКВЭДСправочникОрг) Тогда
			// Выделим секции кода.
			ПерваяСекция = Сред(ОКВЭДСправочникОрг, 1, 2);
			ВтораяСекция = Сред(ОКВЭДСправочникОрг, 3, 2);
			ТретьяСекция = Сред(ОКВЭДСправочникОрг, 5, 2);
			// Составим код ОКВЭД.
			мОКВЭДРаздел1 = ПерваяСекция + "." + ВтораяСекция + "." + ТретьяСекция;
			// Уберем точки для отображения.
			ОКВЭД = СтрЗаменить(мОКВЭДРаздел1, ".", "");
			ОКВЭД = РегламентированнаяОтчетность.ДополнитьСтроку(ОКВЭД, 6, " ", 1);
			// Выведем в форму отчета.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКВЭДРаздел1_", 6, ОКВЭД);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	// Включим видимость флажка проверки, по умолчанию - выключено.
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	//ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ОперацияСКППНаЛисте(мРаздел2, Ложь);
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	Если ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы).Имя = "ПолеТабличногоДокументаПриложение" Тогда
		УстановитьКНДВРазделе10();
	КонецЕсли;
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт

	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение" Тогда
		УстановитьКНДВРазделе10();
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// Не должно загружаться, дерево инициализируется при восстановлении и при открытии
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	// При печати, расчет выполнятся не должен при любых обстоятельствах, для всех листов.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, мБезОткрытияФормы);
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		// Многостраничность - не записываем в Показатели отчета !!!
		//
		СтраницаПанелиИмя = СтраницаПанели.Имя;
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанелиИмя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанелиИмя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции

// СохранитьДеревоСтраницОтчета
//
Процедура СохранитьДеревоСтраницОтчета()
	Если мСохраненныйДок <> Неопределено Тогда
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СохранитьДеревоСтраницОтчета

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий				 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// Добавим процедуру очистки варианта заполнения показателя по строке 090 в разделе 2.
	Если мСтруктураВариантыЗаполнения.Свойство("Раздел2") Тогда
		Если ТипЗнч(мСтруктураВариантыЗаполнения.Раздел2) = Тип("Массив") Тогда
			мСтруктураВариантыЗаполнения.Удалить("Раздел2");
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;
	КонецЕсли;

	// Для раздела 2 декларации, добавим показатель _КодОперацииПоСтроке100Раздела2, представляющий целое значение кода по строке 100
	// необходимо для проверки соотношений, показателя стр. 090.
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2") Тогда
		Для каждого Экз Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
			Если ТипЗнч(Экз.Данные) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ Экз.Данные.Свойство("_КодОперацииПоСтроке100Раздела2") Тогда
				КодПоСтроке100 = Экз.Данные.КодОперацииРаздел2_1 + Экз.Данные.КодОперацииРаздел2_2 + Экз.Данные.КодОперацииРаздел2_3
				               + Экз.Данные.КодОперацииРаздел2_4 + Экз.Данные.КодОперацииРаздел2_5 + Экз.Данные.КодОперацииРаздел2_6
				               + Экз.Данные.КодОперацииРаздел2_7;
				Экз.Данные.Вставить("_КодОперацииПоСтроке100Раздела2", КодПоСтроке100);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", ФлажокОтклАвтоРасчет);

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Выводим дату подписания отчета
	// ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	ОперацияСКППНаЛисте(мРаздел2, Ложь);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре) Экспорт
	Рез = 0;
	// Раздел 1
	Если КодПоказателяПоСтруктуре = "СуммаНалогДоплата" Тогда
		Рез = мСуммаНалогДоплата;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалогУменьш" Тогда
		Рез = мСуммаНалогУменьш;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКВЭДРаздел1" Тогда
		Рез = мОКВЭДРаздел1;
	// Раздел 2
	ИначеЕсли КодПоказателяПоСтруктуре = "Строка090Раздел2" Тогда
		Рез = мСтрока090Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Строка110Раздел2" Тогда
		Рез = мСтрока110Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Строка120Раздел2" Тогда
		Рез = мСтрока120Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Строка130Раздел2" Тогда
		Рез = мСтрока130Раздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКВЭДРаздел2" Тогда
		Рез = мОКВЭДРаздел2;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалогДоплата" Тогда
		мСуммаНалогДоплата = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалогУменьш" Тогда
		мСуммаНалогУменьш = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКВЭДРаздел1" Тогда
		мОКВЭДРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	// Раздел 1.2
	ИначеЕсли ИмяПоказателя = "Строка090Раздел2" Тогда
		мСтрока090Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Строка110Раздел2" Тогда
		мСтрока110Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Строка120Раздел2" Тогда
		мСтрока120Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Строка130Раздел2" Тогда
		мСтрока130Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРаздел2ДляВыгрузки" Тогда
		мИННРаздел2ДляВыгрузки = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКВЭДРаздел2" Тогда
		мОКВЭДРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	// Раздел 2
	ИначеЕсли ИмяПоказателя = "ФИОДляВыгрузкиРаздел2" Тогда
		мФИОДляВыгрузкиРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДанныеЛистаРаздел2ФИО" Тогда
		мДанныеЛистаРаздел2ФИО = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияРаздел2" Тогда
		мФамилияРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяРаздел2" Тогда
		мИмяРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоРаздел2" Тогда
		мОтчествоРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	// Раздел 10.
	ИначеЕсли ИмяПоказателя = "КодРегионаПриложение" Тогда
		мКодРегионаПриложение = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// ВзаимныеПереходыПозиций
//
Процедура ВзаимныеПереходыПозиций(ОбластьИмя)

	// Взаимные переходы
	Если (ОбластьИмя = "П000030021006") Или (ОбластьИмя = "П000030020006") Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030022004", ОбластьИмя);
	КонецЕсли;

КонецПроцедуры // ВзаимныеПереходыПозиций

// ЭтотПоказательНеЗаполняется
//
Функция ЭтотПоказательНеЗаполняется(Знач КодПоказателя) Экспорт

	Если   КодПоказателя = "П000070001004_1"
	   Или КодПоказателя = "П000070001003_2"
	   Или КодПоказателя = "П000070001004_3"
	   Или КодПоказателя = "П000070001003_4"
	   Или КодПоказателя = "П000070001004_5"
	   Или КодПоказателя = "П000070001004_6"
	   Или КодПоказателя = "П000070001004_7"
	   Или КодПоказателя = "П000070001004_8"
	   Или КодПоказателя = "П000070001004_9"
	   Или КодПоказателя = "П000070001004_10"
	   Или КодПоказателя = "П000070001003_11"
	   Или КодПоказателя = "П000070001004_12"
	   Или КодПоказателя = "П000070001004_13"
	   Или КодПоказателя = "П000070001004_14"
	   Или КодПоказателя = "П000070001004_15"
	   Или КодПоказателя = "П000070001003_16" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЭтотПоказательНеЗаполняется

// УстановитьКНДВРазделе10
//
Процедура УстановитьКНДВРазделе10()
	мПриложение.Область("R30C167:R38C169").Объединить();
	НайденнаяОбласть = мПриложение.Области.Найти("ПравоеПрисоединение");
	Если НайденнаяОбласть <> Неопределено Тогда
		НайденнаяОбласть.Имя = "";
	КонецЕсли;
	мПриложение.Область("R2C167:R38C181").Имя = "ПравоеПрисоединение";
КонецПроцедуры // УстановитьКНДВРазделе10

// ПолучитьСуммуПоказателей
//
Функция ПолучитьСуммуПоказателей(ИмяРаздела, Показатель)
	Перем ТаблицаРаздела;
	мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	ИтогРезультат = 0;
	мРаздел = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	Для каждого Экз Из ТаблицаРаздела Цикл
		Если Экз.АктивнаяСтраница Тогда
			ИтогРезультат = ИтогРезультат + ОкруглитьЧислоПоФормату(мРаздел.Области[Показатель].Значение);
		Иначе
			ИтогРезультат = ИтогРезультат + ОкруглитьЧислоПоФормату(Экз.Данные[Показатель]);
		КонецЕсли;
	КонецЦикла;
	Возврат ИтогРезультат;
КонецФункции // ПолучитьСуммуПоказателей

// ОперацияСКППНаЛисте
// Делает недоступным ввод в ячейку КПП в прилоежнии 6 или 7.
//
Процедура ОперацияСКППНаЛисте(ТаблПоле, ОчищатьКПП = Истина)
	Если ТаблПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		КПП = "КППРаздел2_1";
		РежимФЛ = мДанныеЛистаРаздел2ФИО;
	КонецЕсли;

	Если РежимФЛ Тогда
		ЦветФона = мСтруктураЦветовРаскраски._5;
		РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, КПП, "УстановитьЗащиту");
	Иначе
		ЦветФона = мСтруктураЦветовРаскраски._0;
		РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, КПП, "СнятьЗащиту");
	КонецЕсли;

	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, КПП, "ПроставитьЦветРаскраски", ЦветФона);
	Если ОчищатьКПП Тогда
		РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, КПП, "Очистить");
	КонецЕсли;
КонецПроцедуры // ОперацияСКППНаЛисте

// ВводКода
//
Процедура ВводКода(Раздел, ОбластьИмя, ПервоначальноеЗнач, КолВоСимволов, ТекстВвода, СтандартнаяОбработка, КолВоСимволовВКвадратах = Неопределено)

	Название = СтрЗаменить(Раздел.Имя, "ПолеТабличногоДокумента", "");

	СтруктураКонтроля = Новый Структура;
	СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
	СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", КолВоСимволов);

	РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
									   , Название                   // Название раздела.
									   , ОбластьИмя                 // Имя ячейки для записи.
									   , СокрЛП(ПервоначальноеЗнач) // Первоначальное значение.
									   , КолВоСимволов              // РазмерностьЦ - возможная длинна ИННа.
									   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
									   , Ложь                       // Это сумма?
									   , ТекстВвода                 // Текст ввода.
									   , ""                         // Текст выбора из таблицы значений.
									   , Неопределено               // Таблица выбора значений.
									   , Неопределено               // Строка доп. ввода.
									   , СтандартнаяОбработка       // Стандартная обработка.
									   , КолВоСимволовВКвадратах    // Кол-во квадратиков, если в квадратах
									   ,                            // Колонка поиска, если ТаблицаЗначений
									   , СтруктураКонтроля          // Структура требований ручного ввода
									   );

КонецПроцедуры // ВводКода

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//  НужнаяСтрокаИлиКолонка - номер нужно строки расчета или номер нужной колонки по которому производить расчет.
//                 В случае, если не указано, тогда расчет производится по всем строкам и всем колонкам многострочной части.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", НужнаяСтрокаИлиКолонка = Неопределено) Экспорт
	Перем ТаблицаБлока;

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		П000030035004 = мРаздел3.Области.П000030035004.Значение;
		ОкрП000030036004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030036004.Значение);
		П000050003000 = мРаздел5.Области.П000050003000.Значение;
		П000060006003 = ПолучитьСуммуПоказателей("Раздел6", "П000060006003");
		П000070003005 = мРаздел7.Области.П000070003005.Значение;
		П000070004005 = мРаздел7.Области.П000070004005.Значение;
		П000080006003 = ПолучитьСуммуПоказателей("Раздел8", "П000080006003");

		// Строка 030 = (350 раздел3 + 030 раздел7) - (360 раздела3 + 030 раздела5 + 060 раздела6 + 040 раздела7 + 060 раздела8)
		Строка030 = (П000030035004 + П000070003005) - (ОкрП000030036004 + П000050003000 + П000060006003 + П000070004005 + П000080006003);
		мСуммаНалогДоплата = Макс(Строка030, 0);

		// Строка 040 = (350 раздел3 + 030 раздела 7) - (360 раздела3 + 030 раздела5 + 040 раздела6 + 040 раздела7 + 040 раздела8)
		Строка040 = (П000030035004 + П000070003005) - (ОкрП000030036004 + П000050003000 + П000060006003 + П000070004005 + П000080006003);
		мСуммаНалогУменьш = Мин(Строка040, 0) * (-1);

		ЗаполнениеЗначенийВКвадратиках("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		// Строка 010.
		ОкрП000030001004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030001004.Значение);
		ОкрП000030001006 = ОкруглитьЧислоПоФормату(ОкрП000030001004 * 20/100);
		мРаздел3.Области.П000030001006.Значение = ОкрП000030001006;

		// Строка 020.
		ОкрП000030002004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002004.Значение);
		ОкрП000030002006 = ОкруглитьЧислоПоФормату(ОкрП000030002004 * 18/100);
		мРаздел3.Области.П000030002006.Значение = ОкрП000030002006;

		// Строка 030
		ОкрП000030003004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030003004.Значение);
		ОкрП000030003006 = ОкруглитьЧислоПоФормату(ОкрП000030003004 * 10/100);
		мРаздел3.Области.П000030003006.Значение = ОкрП000030003006;

		// Строка 040
		ОкрП000030004004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004004.Значение);
		ОкрП000030004006 = ОкруглитьЧислоПоФормату(ОкрП000030004004 * 20/120);
		мРаздел3.Области.П000030004006.Значение = ОкрП000030004006;

		// Строка 050
		ОкрП000030005004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005004.Значение);
		ОкрП000030005006 = ОкруглитьЧислоПоФормату(ОкрП000030005004 * 18/118);
		мРаздел3.Области.П000030005006.Значение = ОкрП000030005006;

		// Строка 060
		ОкрП000030006004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006004.Значение);
		ОкрП000030006006 = ОкруглитьЧислоПоФормату(ОкрП000030006004 * 10/110);
		мРаздел3.Области.П000030006006.Значение = ОкрП000030006006;

		// Строка 110
		ОкрП000030011004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030011004.Значение);
		ОкрП000030011006 = ОкруглитьЧислоПоФормату(ОкрП000030011004 * 18/100);
		мРаздел3.Области.П000030011006.Значение = ОкрП000030011006;

		// Строка 120
		ОкрП000030012004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012004.Значение);
		ОкрП000030012006 = ОкруглитьЧислоПоФормату(ОкрП000030012004 * 10/100);
		мРаздел3.Области.П000030012006.Значение = ОкрП000030012006;

		// Строка 130
		ОкрП000030013004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030013004.Значение);
		ОкрП000030013006 = ОкруглитьЧислоПоФормату(ОкрП000030013004 * 18/100);
		мРаздел3.Области.П000030013006.Значение = ОкрП000030013006;

		// Строка 140
		ОкрП000030014004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030014004.Значение);
		ОкрП000030014006 = ОкруглитьЧислоПоФормату(ОкрП000030014004 * 18/118);
		мРаздел3.Области.П000030014006.Значение = ОкрП000030014006;

		// Строка 150
		ОкрП000030015004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030015004.Значение);
		ОкрП000030015006 = ОкруглитьЧислоПоФормату(ОкрП000030015004 * 10/110);
		мРаздел3.Области.П000030015006.Значение = ОкрП000030015006;

		// Строка 160
		ОкрП000030016004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030016004.Значение);
		ОкрП000030016006 = ОкруглитьЧислоПоФормату(ОкрП000030016004 * 18/118);
		мРаздел3.Области.П000030016006.Значение = ОкрП000030016006;

		// Строка 170
		ОкрП000030017004 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030017004.Значение);
		ОкрП000030017006 = ОкруглитьЧислоПоФормату(ОкрП000030017004 * 10/110);
		мРаздел3.Области.П000030017006.Значение = ОкрП000030017006;

		// Строка 180, графа 4.
		мРаздел3.Области.П000030018004.Значение = ОкрП000030001004
		                                        + ОкрП000030002004
		                                        + ОкрП000030003004
		                                        + ОкрП000030004004
		                                        + ОкрП000030005004
		                                        + ОкрП000030006004
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010004.Значение)
		                                        + ОкрП000030014004
		                                        + ОкрП000030015004
		                                        + ОкрП000030016004
		                                        + ОкрП000030017004;

		// Строка 180, графа 6.
		мРаздел3.Области.П000030018006.Значение = ОкрП000030001006
		                                        + ОкрП000030002006
		                                        + ОкрП000030003006
		                                        + ОкрП000030004006
		                                        + ОкрП000030005006
		                                        + ОкрП000030006006
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010006.Значение)
		                                        + ОкрП000030014006
		                                        + ОкрП000030015006
		                                        + ОкрП000030016006
		                                        + ОкрП000030017006;

		// Строка 210, графа 6.
		мРаздел3.Области.П000030021006.Значение = мРаздел3.Области.П000030018006.Значение
		                                        + мРаздел3.Области.П000030019006.Значение
		                                        + мРаздел3.Области.П000030020006.Значение;

		// Строка 340, графа 4.
		мРаздел3.Области.П000030034004.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030022004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030026004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030027004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030030004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030031004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030032004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030033004.Значение);

		ОбщаяСуммаНДС = мРаздел3.Области.П000030021006.Значение
		              - мРаздел3.Области.П000030034004.Значение;

		// Строка 350, графа 4.
		мРаздел3.Области.П000030035004.Значение = Макс(ОбщаяСуммаНДС, 0);
		мРаздел3.Области.П000030036004.Значение = Макс(-ОбщаяСуммаНДС, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаБлока);
		Колонка4 = 0;
		Колонка5 = 0;
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка4 = Колонка4 + ОкруглитьЧислоПоФормату(Зап.П000040001004);
			Колонка5 = Колонка5 + ОкруглитьЧислоПоФормату(Зап.П000040001005);
		КонецЦикла;
		мРаздел4.Области.П000040002004.Значение = Колонка4;
		мРаздел4.Области.П000040002005.Значение = Колонка5;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ТаблицаБлока);
		Колонка2 = 0;
		Колонка4 = 0;
		Колонка5 = 0;
		Колонка6 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка2 = Колонка2 + ОкруглитьЧислоПоФормату(Зап.П000050001002);
			Колонка4 = Колонка4 + ОкруглитьЧислоПоФормату(Зап.П000050001004);
			Колонка5 = Колонка5 + ОкруглитьЧислоПоФормату(Зап.П000050001005);
			Колонка6 = Колонка6 + ОкруглитьЧислоПоФормату(Зап.П000050001006);
		КонецЦикла;

		мРаздел5.Области.П000050002002.Значение = Колонка2;
		мРаздел5.Области.П000050002004.Значение = Колонка4;
		мРаздел5.Области.П000050002005.Значение = Колонка5;
		мРаздел5.Области.П000050002006.Значение = Колонка6;

		// Значение по стр. 030 не может быть менее 0.
		мРаздел5.Области.П000050003000.Значение = Макс(Колонка4 + Колонка5 - Колонка6, 0);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ТаблицаБлока);
		Колонка3 = 0;
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка3 = Колонка3 + ОкруглитьЧислоПоФормату(Зап.П000060005003);
		КонецЦикла;

		мРаздел6.Области.П000060006003.Значение = Колонка3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ТаблицаБлока);
		Колонка2 = 0;
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка5 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл

			НомерСтроки = ТаблицаБлока.Индекс(Зап) + 1;
			НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=0");

			ОкрП000070001002 = ОкруглитьЧислоПоФормату(Зап.П000070001002);

			Если (НомерСтроки = 1) Или (НомерСтроки = 3) Или ((НомерСтроки >= 5) И (НомерСтроки <= 10)) Или ((НомерСтроки >= 12) И (НомерСтроки <= 15)) Тогда
				ОкрП000070001003 = ОкруглитьЧислоПоФормату(ОкрП000070001002 * 18 / 100);
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы4, НомерСтрокиСтр, "П000070001003", ОкрП000070001003);
				мРаздел7.Области["П000070001003_" + НомерСтрокиСтр].Значение = ОкрП000070001003;
				ОкрП000070001004 = 0;
			Иначе
				ОкрП000070001003 = 0;

				ОкрП000070001004 = ОкруглитьЧислоПоФормату(ОкрП000070001002 * 10 / 100);
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы4, НомерСтрокиСтр, "П000070001004", ОкрП000070001004);
				мРаздел7.Области["П000070001004_" + НомерСтрокиСтр].Значение = ОкрП000070001004;

			КонецЕсли;

			ОкрП000070001005 = ОкруглитьЧислоПоФормату(Зап.П000070001005);

			Колонка2 = Колонка2 + ОкрП000070001002;
			Колонка3 = Колонка3 + ОкрП000070001003;
			Колонка4 = Колонка4 + ОкрП000070001004;
			Колонка5 = Колонка5 + ОкрП000070001005;
			
		КонецЦикла;

		мРаздел7.Области.П000070002002.Значение = Колонка2;
		мРаздел7.Области.П000070002003.Значение = Колонка3;
		мРаздел7.Области.П000070002004.Значение = Колонка4;
		мРаздел7.Области.П000070002005.Значение = Колонка5;

		мРаздел7.Области.П000070003005.Значение = Макс((Колонка3 + Колонка4) - Колонка5, 0);
		мРаздел7.Области.П000070004005.Значение = Макс(Колонка5 - (Колонка3 + Колонка4), 0);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ТаблицаБлока);
		Колонка3 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка3 = Колонка3 + ОкруглитьЧислоПоФормату(Зап.П000080005003);
		КонецЦикла;

		мРаздел8.Области.П000080006003.Значение = Колонка3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ТаблицаБлока);
		Колонка2 = 0;
		Колонка3 = 0;
		Колонка4 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка2 = Колонка2 + ОкруглитьЧислоПоФормату(Зап.П000090001002);
			Колонка3 = Колонка3 + ОкруглитьЧислоПоФормату(Зап.П000090001003);
			Колонка4 = Колонка4 + ОкруглитьЧислоПоФормату(Зап.П000090001004);
		КонецЦикла;

		мРаздел9.Области.П000090002002.Значение = Колонка2;
		мРаздел9.Области.П000090002003.Значение = Колонка3;
		мРаздел9.Области.П000090002004.Значение = Колонка4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение" Тогда
		// Данный раздел может авторассчитываться по строчно.
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, ТаблицаБлока);
		Инд = 0;
		Если НужнаяСтрокаИлиКолонка = Неопределено Тогда
			// Если номер рассчитываемой строки не передан, то рассчитываем весь блок многострочной части.
			ВсегоСтрок = ТаблицаБлока.Количество() - 1;
		Иначе
			// Если передан номер строки, которую необходимо рассчитать, тогда определим индекс в таблице.
			НужнаяСтрокаИлиКолонкаТип = ТипЗнч(НужнаяСтрокаИлиКолонка);
			Если НужнаяСтрокаИлиКолонкаТип = Тип("Строка") Тогда
				НеобходимаяСтрЧисло = Число(НужнаяСтрокаИлиКолонка) - 1;
			ИначеЕсли НужнаяСтрокаИлиКолонкаТип = Тип("Число") Тогда
				НеобходимаяСтрЧисло = НужнаяСтрокаИлиКолонка - 1;
			КонецЕсли;
			// НеобходимаяСтрЧисло - Это номер строки в таблице многострочного блока.
			// Расчет будет идти в цикле от Инд, который будет равен НеобходимаяСтрЧисло до ВсегоСтрок (тоже НеобходимаяСтрЧисло);

			Инд = НеобходимаяСтрЧисло;
			ВсегоСтрок = Инд;
		КонецЕсли;

		Для Итер = Инд По ВсегоСтрок Цикл

			ИндСтр = Формат(Итер + 1, "ЧГ=0");

			// В случае, если дата в колонке 8 не заполнена, тогда колонки 9, 10 и 11 обнуляем, по инструкции они не заполняются.
			Если ТаблицаБлока[Итер].П000100002008 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы7, ИндСтр, "П000100002009", 0);
				мПриложение.Области["П000100002009_" + ИндСтр].Значение = 0;

				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы7, ИндСтр, "П000100002010", 0);
				мПриложение.Области["П000100002010_" + ИндСтр].Значение = 0;

				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы7, ИндСтр, "П000100002011", 0);
				мПриложение.Области["П000100002011_" + ИндСтр].Значение = 0;
			Иначе
				Колонка9 = ОкруглитьЧислоПоФормату((ОкруглитьЧислоПоФормату(ТаблицаБлока[Итер].П000100002007) * 1 / 10));
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы7, ИндСтр, "П000100002009", Колонка9);

				Колонка10 = ТаблицаБлока[Итер].П000100002010;

				Колонка11 = ОкруглитьЧислоПоФормату(Колонка9 * Колонка10 / 100);
				РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы7, ИндСтр, "П000100002011", Колонка11);
				мПриложение.Области["П000100002009_" + ИндСтр].Значение = Колонка9;
				мПриложение.Области["П000100002011_" + ИндСтр].Значение = Колонка11;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы

		Расчет("Приложение");
		Расчет("Раздел9");
		Расчет("Раздел8");
		Расчет("Раздел7");
		Расчет("Раздел6");
		Расчет("Раздел5");
		Расчет("Раздел4");
		Расчет("Раздел3");
		Расчет("Раздел1");

	КонецЕсли;
КонецПроцедуры // Расчет()

// ВернутьМаскуДляКолонки
//
Функция ВернутьМаскуДляКолонки(ИмяКолонки) // ВернутьМаскуДляКолонки
	Возврат мМаскиЯчейки.Получить(ИмяКолонки);
КонецФункции // ВернутьМаскуДляКолонки

// НачальныеОперацииСМногострочнымиБлоками
//
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			НомерСтроки = Формат(НСтр, "ЧГ=0");
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + НомерСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;

					МаскаДляКолонки = ВернутьМаскуДляКолонки(ИмяКолонки);
					Если МаскаДляКолонки <> Неопределено Тогда
						ОбластьЯчейки.ЭлементУправления.Маска = МаскаДляКолонки;
					КонецЕсли;

				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если мДатаНачалаПериодаОтчета >= '20090101' Тогда
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Текст = "Приложение № 1 к приказу Минфина РФ от 07.11.2006 № 136н (в редакции приказов Минфина РФ от 21.11.2007 № 113н, от 11.09.08 № 94н)";
	ИначеЕсли мДатаНачалаПериодаОтчета >= '20080101' И мДатаНачалаПериодаОтчета < '20090101' Тогда
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Текст = "Приложение № 1 к приказу Министерства финансов Российской Федерации от 07.11.2006 № 136н (в редакции приказа Минфина России от 21.11.2007 № 113н)";
	Иначе
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Текст = "Приложение № 1 к приказу Министерства финансов Российской Федерации от 07.11.2006 № 136н";
	КонецЕсли;
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	ФормироватьСтруктуруСвойствСтраниц();

	// При печати, расчет выполнятся не должен при любых обстоятельствах.
	мРежимПечати = Ложь;

	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мРаздел5 = ЭлементыФормы.ПолеТабличногоДокументаРаздел5;
	мРаздел6 = ЭлементыФормы.ПолеТабличногоДокументаРаздел6;
	мРаздел7 = ЭлементыФормы.ПолеТабличногоДокументаРаздел7;
	мРаздел8 = ЭлементыФормы.ПолеТабличногоДокументаРаздел8;
	мРаздел9 = ЭлементыФормы.ПолеТабличногоДокументаРаздел9;
	мПриложение = ЭлементыФормы.ПолеТабличногоДокументаПриложение;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мБезОткрытияФормы = БезОткрытияФормы;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

		ЗагрузитьПоказателиИзМакета("КБК2005");
		ЗагрузитьПоказателиИзМакета("КБК2006");
		ЗагрузитьПоказателиИзМакета("КБК2006Раздел2");

		ЗагрузитьПоказателиИзМакета("ФильтрКодовДляРаздела2");
		// Загрузим список кодов для 2007 г. и ранее
		Если Год(мДатаНачалаПериодаОтчета) < 2008 Тогда
		    ЗагрузитьПоказателиИзМакета("ТаблКодыОперацийРаздел2");
			ЗагрузитьПоказателиИзМакета("НдсОперацииПриложение");
		ИначеЕсли Год(мДатаНачалаПериодаОтчета) < 2009 Тогда
			// Загрузим список кодов для 2008 г.
			// Приказ Минфина РФ от 21 ноября 2007 г. № 113н.
			ЗагрузитьПоказателиИзМакета("ТаблКодыОперацийРаздел2_2008");
			ЗагрузитьПоказателиИзМакета("НдсОперацииПриложение_2008");
		ИначеЕсли Год(мДатаНачалаПериодаОтчета) >= 2009 Тогда
			// Загрузим список кодов для 2009 г. и позже
			// письмо ФНС от 25.06.2010 N ШС-37-3/5063@  
			ЗагрузитьПоказателиИзМакета("ТаблКодыОперацийРаздел2_2009");
			ЗагрузитьПоказателиИзМакета("НдсОперацииПриложение_2008");   
		КонецЕсли;

		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

		// Маски по разделу 6.
		мРаздел6.Области.П000060001000.ЭлементУправления.Маска = "9";

		мРаздел6.Области.НомКвМес1.ЭлементУправления.Маска = "9";
		мРаздел6.Области.НомКвМес2.ЭлементУправления.Маска = "9";

		мРаздел6.Области.ГодРаздел6_1.ЭлементУправления.Маска = "9";
		мРаздел6.Области.ГодРаздел6_2.ЭлементУправления.Маска = "9";
		мРаздел6.Области.ГодРаздел6_3.ЭлементУправления.Маска = "9";
		мРаздел6.Области.ГодРаздел6_4.ЭлементУправления.Маска = "9";

		// Маски по разделу 8.
		мРаздел8.Области.П000080001000.ЭлементУправления.Маска = "9";

		мРаздел8.Области.НомКвМес1.ЭлементУправления.Маска = "9";
		мРаздел8.Области.НомКвМес2.ЭлементУправления.Маска = "9";

		мРаздел8.Области.ГодРаздел8_1.ЭлементУправления.Маска = "9";
		мРаздел8.Области.ГодРаздел8_2.ЭлементУправления.Маска = "9";
		мРаздел8.Области.ГодРаздел8_3.ЭлементУправления.Маска = "9";
		мРаздел8.Области.ГодРаздел8_4.ЭлементУправления.Маска = "9";

	КонецЕсли;

	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе

			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			Если НЕ БезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;

			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный.Области.ВидДок.Значение = "1";

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			ПерепроставитьПорядковыеНомера("Раздел2");
			ПерепроставитьПорядковыеНомера("Раздел6");
			ПерепроставитьПорядковыеНомера("Раздел8");

			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
		КонецЕсли;

	Иначе
		Если НЕ БезОткрытияФормы Тогда
			// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.НадписьОрганизация.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.НадписьОрганизация.ГиперСсылка = Истина;
		ЭлементыФормы.НадписьОрганизация.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;
	КонецЕсли;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			Если РазделВМакете = "КБК2005" Тогда
				НовСтрока = мКБК2005.Добавить();
			ИначеЕсли РазделВМакете = "КБК2006" Тогда
				НовСтрока = мКБК2006.Добавить();
			ИначеЕсли РазделВМакете = "ТаблКодыОперацийРаздел2" Тогда
				НовСтрока = мТаблКодыОперацийРаздел2.Добавить();
			ИначеЕсли РазделВМакете = "ТаблКодыОперацийРаздел2_2008" Тогда
				НовСтрока = мТаблКодыОперацийРаздел2_2008.Добавить();
			ИначеЕсли РазделВМакете = "ТаблКодыОперацийРаздел2_2009" Тогда
				НовСтрока = мТаблКодыОперацийРаздел2_2009.Добавить();
			ИначеЕсли РазделВМакете = "НдсОперацииПриложение" Тогда
				НовСтрока = мНдсОперацииПриложение.Добавить();
			ИначеЕсли РазделВМакете = "НдсОперацииПриложение_2008" Тогда
				НовСтрока= мНдсОперацииПриложение_2008.Добавить();
			ИначеЕсли РазделВМакете = "ФильтрКодовДляРаздела2" Тогда
				НовСтрока = мФильтрКодовДляРаздела2.Добавить();
			ИначеЕсли РазделВМакете = "КБК2006Раздел2" Тогда
				НовСтрока = мКБК2006Раздел2.Добавить();
			КонецЕсли;

			НовСтрока.Код= КодПоказателя;
			НовСтрока.Название = Название;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// ПодготовкаОтчетаКАвтоЗаполнению
// Процедура выполнит необходимые действия с отчетом, перед его автозаполнением из ИБ.
// а) будет произведена очистка автозаполняемых показателей, для всех разделов, где они есть.
// б) удалены многостраничные разделы, которые заполняются из ИБ (Раздел 2 и Приложение к декларации).
// в) перепроставлен порядковый номер листа в Разделе 2
// г) Очищены показатели, которые заполняются из ИБ, но нет признака Автозаполнения, т.к. они входят в многострочность.
// д) обновление многострочных блоков (необходимо для процедуры Расчет)
// е) запуск процедуры Расчет() для пересчета показателей с признаком автовычисления равным 4.
//
//  Параметров нет.
//
Процедура ПодготовкаОтчетаКАвтоЗаполнению()
	// Очистим только автовычисляемые показатели и многостраничные заполняемые разделы: Раздел 2 и Приложение к декларации.
	РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, "Раздел2, Приложение");

	// Перепроставим порядковый номер в разделе 2.
	ПерепроставитьПорядковыеНомера("Раздел2");

	// Обновим статус КПП в разделе 2 (по умолчанию).
	ОперацияСКППНаЛисте(мРаздел2);

	// Очистим показатели, у которых не стоит признак автозаполнения из ИБ, т.к. они входят в многострочную часть.
	// Раздел 5.
	мРаздел5.Области.П000050001002_1.Значение = 0;
	мРаздел5.Области.П000050001004_1.Значение = 0;

	// Раздел 7.
	мРаздел7.Области.П000070001002_1.Значение = 0;
	мРаздел7.Области.П000070001003_1.Значение = 0;
	мРаздел7.Области.П000070001005_1.Значение = 0;
	мРаздел7.Области.П000070001002_2.Значение = 0;
	мРаздел7.Области.П000070001004_2.Значение = 0;

	// Обновим структуру многострочных разделов.
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраницаПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		УстановитьЦветФонаЯчейки(,, ТекущаяСтраницаПанели);
	КонецЕсли;

	// Запустим расчет, для пересчета автовычисляемых ячеек, которые были очищены.
	Расчет();

КонецПроцедуры // ПодготовкаОтчетаКАвтоЗаполнению

Процедура ЗаполнитьАвто() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли;

	ПодготовкаОтчетаКАвтоЗаполнению();

	мСоотвествиеКодаИРаздела = Новый Соответствие;
	мСоотвествиеКодаИРаздела.Вставить("1", мРаздел1);
	мСоотвествиеКодаИРаздела.Вставить("2", мРаздел2);
	мСоотвествиеКодаИРаздела.Вставить("3", мРаздел3);
	мСоотвествиеКодаИРаздела.Вставить("4", мРаздел4);
	мСоотвествиеКодаИРаздела.Вставить("5", мРаздел5);
	мСоотвествиеКодаИРаздела.Вставить("6", мРаздел6);
	мСоотвествиеКодаИРаздела.Вставить("7", мРаздел7);
	мСоотвествиеКодаИРаздела.Вставить("8", мРаздел8);
	мСоотвествиеКодаИРаздела.Вставить("9", мРаздел9);
	мСоотвествиеКодаИРаздела.Вставить("10", мПриложение);
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	
	// ЗАПОЛНЕНИЕ ТАБЛИЧНОГО ПОЛЯ  "Раздел3"
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Если не ВидДокумента = 0 Тогда
		Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ?(НЕ ЗначениеЗаполнено(ДатаПодписи),ДатаПодписи, КонецДня(ДатаПодписи)));
	КонецЕсли; 
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеНачислениеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеНачислениеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеНачислениеВосстановлениеНДС", СобытиеНачислениеВосстановлениеНДС);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеОплата = Новый СписокЗначений;
	СобытиеОплата.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытиеОплата", СобытиеОплата);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 130 декларации по НДС
	ВидыЦенностиСтр110_120 =  Новый СписокЗначений;
	ВидыЦенностиСтр110_120.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр110_120", ВидыЦенностиСтр110_120);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 130 декларации по НДС
	ВидыЦенностиСтр130 =  Новый СписокЗначений;
	ВидыЦенностиСтр130.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр130", ВидыЦенностиСтр130);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 140 и 150 декларации по НДС
	ВидыЦенностиСтр140_150 =  Новый СписокЗначений;
	ВидыЦенностиСтр140_150.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр140_150", ВидыЦенностиСтр140_150);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 160 и 170 декларации по НДС
	ВидыЦенностиСтр160_170 =  Новый СписокЗначений;
	ВидыЦенностиСтр160_170.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр160_170", ВидыЦенностиСтр160_170);
	
	ВидыЦенностиНалоговыйАгент =  Новый СписокЗначений;
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностиНалоговыйАгент", ВидыЦенностиНалоговыйАгент);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС20", 	 Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("СтавкаНДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкаНДСХХ = Новый СписокЗначений;
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкаНДСХХ.Добавить(Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("СтавкаНДСХХ", СтавкаНДСХХ);
	
	СтавкаНДСХХ_ХХХ = Новый СписокЗначений;
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкаНДСХХ_ХХХ.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	Запрос.УстановитьПараметр("СтавкаНДСХХ_ХХХ", СтавкаНДСХХ_ХХХ);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030001004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030002004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030003004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030004004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030005004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030006004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170)) ТОГДА ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ_ХХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030007004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170)) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030007006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА (НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130)) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030010004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА (НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130)) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030010006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030011004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030012004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030013004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030014004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030015004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030016004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030017004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачислениеВосстановлениеНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030019006
		|	, СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) или НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001002_1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) или НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001003_1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001002_2,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001004_2
		|	, СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПодтвержденаСтавка0) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000050001002_1
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|		&НачалоПериода,
		|		&КонецПериода,
		|		,
		|		Организация В (&Организация)
		|			И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030001004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030002004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030003004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС20_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030004004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030005004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) И НЕ (НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиНалоговыйАгент) или НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030006004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) ТОГДА ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ_ХХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030007004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеОплата) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030007006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА (НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130)) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030010004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА (НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130)) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДСХХ) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030010006,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030011004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр110_120) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030012004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр130) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030013004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030014004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр140_150) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030015004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118))  ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030016004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС) И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностиСтр160_170) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030017004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачислениеВосстановлениеНДС) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000030019006
		|	, СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) или НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001002_1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18) или НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001003_1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001002_2,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНеПодтвержденаСтавка0) И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10) ИЛИ НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)) ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000070001004_2
		|	, СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПодтвержденаСтавка0) ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000050001002_1
		|ИЗ
		|	(ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|		    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие,
		|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|		    И ЗаписьДополнительногоЛиста
		|		    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие) КАК НДСЗаписиКнигиПродажОбороты";
		
	КонецЕсли;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
				   
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 230 декларации по НДС
	ВидыЦенностиСтр230 =  Новый СписокЗначений;
	ВидыЦенностиСтр230.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр230", ВидыЦенностиСтр230);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 260 декларации по НДС
	ВидыЦенностиСтр260 =  Новый СписокЗначений;
	ВидыЦенностиСтр260.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр260", ВидыЦенностиСтр260);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 270 и 280 декларации по НДС
	ВидыЦенностиСтр270_280 =  Новый СписокЗначений;
	ВидыЦенностиСтр270_280.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностиСтр270_280.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр270_280", ВидыЦенностиСтр270_280);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 300 декларации по НДС
	ВидыЦенностиСтр300 =  Новый СписокЗначений;
	ВидыЦенностиСтр300.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр300", ВидыЦенностиСтр300);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 310 декларации по НДС
	ВидыЦенностиСтр310 =  Новый СписокЗначений;
	ВидыЦенностиСтр310.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиСтр310.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиСтр310.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиСтр310.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр310", ВидыЦенностиСтр310);
	
	// Задание групп видов ценностей, реализация которых отражается в строке 320 декларации по НДС
	ВидыЦенностиСтр320 =  Новый СписокЗначений;
	ВидыЦенностиСтр320.Добавить(Перечисления.ВидыЦенностей.Возврат);
	Запрос.УстановитьПараметр("ВидыЦенностиСтр320", ВидыЦенностиСтр320);
	
	ВидыЦенностиСтр220 = Новый СписокЗначений;
	Для т = 0 По Перечисления.ВидыЦенностей.Количество() - 1 Цикл
		ВидЦенности = Перечисления.ВидыЦенностей.Получить(т);
		Если ВидыЦенностиСтр260.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр270_280.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр300.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр310.НайтиПоЗначению(ВидЦенности) = Неопределено И
			ВидыЦенностиСтр320.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностиСтр220.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностиСтр220", ВидыЦенностиСтр220);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030022004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030023004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр260) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030026004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270_280) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030027004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270_280) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030028004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр300) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030030004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр310) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030031004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр320) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030032004
		|	,СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000050001004_1
		|	,СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000070001005_1
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|		&НачалоПериода,
		|		&КонецПериода,
		|		,
		|		Организация В (&Организация)
		|		    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр220) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030022004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр230) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030023004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр260) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030026004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270_280) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030027004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр270_280) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030028004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр300) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030030004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр310) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030031004,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностиСтр320) И НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000030032004
		|	,СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000050001004_1
		|	,СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0) ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот КОНЕЦ КАК Число(15,2))) КАК П000070001005_1
		|ИЗ
		|
		|(ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПокупокОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПокупокОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|			    И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|		НДСЗаписиКнигиПокупокОбороты.Событие,
		|		НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|			    И ЗаписьДополнительногоЛиста
		|			    И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПокупокОбороты) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.Событие) КАК НДСЗаписиКнигиПокупокОбороты
		| ";
	КонецЕсли;	
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// ЗАПОЛНЕНИЕ ТАБЛИЧНОГО ПОЛЯ  "Раздел2"
	
	// Автоматическое заполнение листов декларации, касающихся уплаты организацией НДС в качестве налогового агента
	Запрос.УстановитьПараметр("ВидыЦенностей_1011701", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", 	ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	Если ВидДокумента = 0 Тогда
		// Заполнение без учета записей дополнительных листов книги
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН КАК ПокупательИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП КАК ПокупательКПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000020003000,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
		|			ТОГДА ""1011701""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
		|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодОперацииРаздел2,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК Сумма090Раздел2,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|						И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|					ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|						И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма110Раздел2,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма120Раздел2
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|					И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|					И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|			ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|		КОНЕЦ КАК Покупатель,
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация В (&Организация)
		|					И (Событие В (&СобытиеНачисленНДС)
		|						ИЛИ Событие В (&СобытиеПолученАванс)
		|						ИЛИ Событие В (&СобытиеРеализация))
		|					И ВидЦенности В (&ВидыЦенностейНА)
		|					И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
		|			ТОГДА ""1011701""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
		|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ
		|ИТОГИ
		|	СУММА(Сумма090Раздел2),
		|	СУММА(Сумма110Раздел2),
		|	СУММА(Сумма120Раздел2)
		|ПО
		|	Покупатель,
		|	КодОперацииРаздел2
		|АВТОУПОРЯДОЧИВАНИЕ";	
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН КАК ПокупательИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП КАК ПокупательКПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000020003000,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
		|			ТОГДА ""1011701""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
		|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодОперацииРаздел2,
		|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК Сумма090Раздел2,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|						И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|					ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|						И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма110Раздел2,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|					И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма120Раздел2
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
		|		НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|		НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|						И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|					ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|				ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|			КОНЕЦ КАК Покупатель,
		|			НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|			НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|			НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|			НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|		ИЗ
		|			РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|					&НачалоПериода,
		|					&КонецПериода,
		|					,
		|					Организация В (&Организация)
		|						И (Событие В (&СобытиеНачисленНДС)
		|							ИЛИ Событие В (&СобытиеПолученАванс)
		|							ИЛИ Событие В (&СобытиеРеализация))
		|						И ВидЦенности В (&ВидыЦенностейНА)
		|						И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|						И (НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|					ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|				ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|			КОНЕЦ,
		|			НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|			НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|			НДСЗаписиКнигиПродажОбороты.Событие,
		|			НДСЗаписиКнигиПродажОбороты.НДСОборот
		|		ИЗ
		|			РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|					&НачалоПериода,
		|					&КонецПериодаУчитываемыхКорректировок,
		|					,
		|					Организация В (&Организация)
		|						И (Событие В (&СобытиеНачисленНДС)
		|							ИЛИ Событие В (&СобытиеПолученАванс)
		|							ИЛИ Событие В (&СобытиеРеализация))
		|						И ВидЦенности В (&ВидыЦенностейНА)
		|						И ЗаписьДополнительногоЛиста
		|						И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
		|			ТОГДА ""1011701""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
		|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ИНН,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.КПП,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель.ЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.Покупатель.Наименование
		|		ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПродажОбороты.Покупатель.НаименованиеПолное, 1, 250)
		|	КОНЕЦ
		|ИТОГИ
		|	СУММА(Сумма090Раздел2),
		|	СУММА(Сумма110Раздел2),
		|	СУММА(Сумма120Раздел2)
		|ПО
		|	Покупатель,
		|	КодОперацииРаздел2
		|АВТОУПОРЯДОЧИВАНИЕ";	
	КонецЕсли;
	
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКонтрагенту = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагенту.Следующий() Цикл
		
		ВыборкаПоКодуОперации = ВыборкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКодуОперации.Следующий() Цикл
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
				ВставитьДополнительнуюСтраницу("Раздел2");
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			Расшифровка = ВыборкаПоКодуОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Расшифровка.Следующий();
			
			мДанныеЛистаРаздел2ФИО = (Расшифровка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
			мИННРаздел2ДляВыгрузки = Расшифровка.ПокупательИНН;

			ЗначениеКПП = "";
			Если НЕ мДанныеЛистаРаздел2ФИО Тогда
				ЗначениеКПП = Расшифровка.ПокупательКПП;
			КонецЕсли;
			
			Строка030 = Расшифровка.П000020003000;

			Если мДанныеЛистаРаздел2ФИО Тогда
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				Строка030 = СтрЗаменить(Строка030, ",", "");
				ОбщегоНазначения.ФамилияИнициалыФизЛица(Строка030, мФамилияРаздел2, мИмяРаздел2, мОтчествоРаздел2);

				мФамилияРаздел2 = СокрЛП(мФамилияРаздел2);
				мИмяРаздел2 = СокрЛП(мИмяРаздел2);
				мОтчествоРаздел2 = СокрЛП(мОтчествоРаздел2);

				мФИОДляВыгрузкиРаздел2 = мФамилияРаздел2 + "," + мИмяРаздел2 + "," + мОтчествоРаздел2;
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				Строка030 = СокрЛП(мФамилияРаздел2 + " " + мИмяРаздел2 + " " + мОтчествоРаздел2);
			Иначе
				мФамилияРаздел2 = "";
				мИмяРаздел2 = "";
				мОтчествоРаздел2 = "";
				мФИОДляВыгрузкиРаздел2 = "";
			КонецЕсли;
			
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020003000", Строка030);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","ИННРаздел2_", 12, РегламентированнаяОтчетность.ДополнитьСтроку(мИННРаздел2ДляВыгрузки, 12, " "));
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2","КППРаздел2_", 9, РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеКПП, 9, " "));

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "КодОперацииРаздел2_", 7, РегламентированнаяОтчетность.ДополнитьСтроку(ВыборкаПоКодуОперации.КодОперацииРаздел2, 7, " "));

			мСтрока090Раздел2 = ВыборкаПоКодуОперации.Сумма090Раздел2;
			мСтрока110Раздел2 = ВыборкаПоКодуОперации.Сумма110Раздел2;
			мСтрока120Раздел2 = ВыборкаПоКодуОперации.Сумма120Раздел2;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "Сумма090Раздел2_", 15, мСтрока090Раздел2,Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "Сумма110Раздел2_", 15, мСтрока110Раздел2,Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "Сумма120Раздел2_", 15, мСтрока120Раздел2,Истина);
			
			ОперацияСКППНаЛисте(мРаздел2, мДанныеЛистаРаздел2ФИО);
			
			Расчет("Раздел2");
		КонецЦикла;
	КонецЦикла; 

	// Обновим порядковые номера в разделе 2.
	ПерепроставитьПорядковыеНомера("Раздел2");

	ЗаполнитьАвтоПриложение();
	
	// Расчет автовычисляемых полей
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	Расчет();

	Модифицированность = Истина;
	
	////////////////////////////////////////////
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

// Выполняет вывод полей запроса в табличный документ
//
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл

			// Для разделов, где есть многострочность, необходимо записывать значение показателя на лист,
			// не используя процедуру роУстановитьЗначениеПоказателя.
			// Определяем, что показатель принадлежит многострочной части, по признаку символа "_" в имени показателя.
			// Если есть символ "_", тогда запись в раздел делаем на прямую, через мИмяРаздела.Области[ИмяПоказателя].Значение = Результат;

			Если Найти(Колонка.Имя, "_") > 0 Тогда
				// Здесь необходимо определить, к какому разделу относится показатель.
				НомерРаздела = ПолучитьНомерРазделаПоИмениПоказателя(Колонка.Имя);
				ТекущийРаздел = мСоотвествиеКодаИРаздела[НомерРаздела];
				Если не ТекущийРаздел = Неопределено Тогда
					ТекущийРаздел.Области[Колонка.Имя].Значение = Выборка[Колонка.Имя];
				Иначе 
					ОбщегоНазначения.СообщитьОбОшибке("Не установлено значение показателя: "+Колонка.Имя);
				КонецЕсли; 
			Иначе
				РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьНомерРазделаПоИмениПоказателя(ИмяПоказателя)

	Номер = Лев(ИмяПоказателя,6);
	// удаление префикса из номера документа
	Если Найти(Номер, "П")=1 Тогда 
		Номер = Сред(Номер, 2);
	КонецЕсли;
			
	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;
	
КонецФункции // ПолучитьномерРазделаПоИмениПоказателя()

Процедура ЗаполнитьСтрокуПриложение(НомерСтроки, Данные, Год, КодОперации, СуммаНДС, СуммаНДСВосстановлена);
	
	мПриложение.Области["П000100002001_"+ НомерСтроки].Значение = Формат(Год, "ЧГ=0");
	мПриложение.Области["П000100002002_"+ НомерСтроки].Значение = КодОперации;
	СтрокаНазванияПоКоду = мНдсОперацииПриложение.Найти(КодОперации, "Код");
	Если СтрокаНазванияПоКоду <> Неопределено И СтрокаНазванияПоКоду.Название <> "Пустое значение" Тогда
		мПриложение.Области["П000100002003_"+ НомерСтроки].Значение = СтрокаНазванияПоКоду.Название;
	КонецЕсли;
	мПриложение.Области["П000100002004_"+ НомерСтроки].Значение = Данные.ДатаВводаВЭксплуатациюБУ;
	мПриложение.Области["П000100002005_"+ НомерСтроки].Значение = Данные.ДатаНачисленияАмортизацииНУ;
	мПриложение.Области["П000100002006_"+ НомерСтроки].Значение = Данные.СтоимостьОбъектаНедвижимости;
	мПриложение.Области["П000100002007_"+ НомерСтроки].Значение = СуммаНДС;
	Если Данные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		мПриложение.Области["П000100002008_"+ НомерСтроки].Значение = Данные.ДатаНачалаИспользованияДляОпераций;
		мПриложение.Области["П000100002010_"+ НомерСтроки].Значение = Данные.ДоляВыручкиНеОблагаемаяНДС;
		мПриложение.Области["П000100002011_"+ НомерСтроки].Значение = СуммаНДСВосстановлена;
	Иначе
		мПриложение.Области["П000100002008_"+ НомерСтроки].Значение = Данные.ДатаНачалаИспользованияДляОпераций;
		мПриложение.Области["П000100002010_"+ НомерСтроки].Значение = Данные.ДоляВыручкиНеОблагаемаяНДС;
		мПриложение.Области["П000100002011_"+ НомерСтроки].Значение = СуммаНДСВосстановлена;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАвтоПриложение()

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектыНедвижимости.(
	               |		ОбъектНедвижимости,
	               |		ОбъектНедвижимости.АдресМестонахождения КАК АдресМестонахождения,
	               |		ОбъектНедвижимости.КодРегиона КАК КодРегиона,
	               |		ИспользуетсяДляОперацийНеОблагаемыхНДС,
	               |		ДатаВводаВЭксплуатациюБУ,
	               |		ДатаНачисленияАмортизацииНУ,
	               |		ДатаНачалаИспользованияДляОпераций,
	               |		СтоимостьОбъектаНедвижимости,
	               |		СуммаНДСПоПодряднымРаботам,
	               |		СуммаНДСПоСМРДляСобственногоПотребления,
	               |		СуммаНДСПоОбъектуНедвижимости,
	               |		ДоляВыручкиНеОблагаемаяНДС,
	               |		СуммаНДСПоПодряднымРаботамВосстановлена,
	               |		СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена,
	               |		СуммаНДСПоОбъектуНедвижимостиВосстановлена
	               |	),
	               |	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Дата) КАК П000100000100
	               |ИЗ
	               |	Документ.ВосстановлениеНДСпоОбъектамНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
	               |ГДЕ
	               |	ВосстановлениеНДСпоОбъектамНедвижимости.Организация В (&Организация)
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Дата >= &НачалоПериода
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Дата <= &КонецПериода
	               |	И ВосстановлениеНДСпоОбъектамНедвижимости.Проведен";
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектыНедвижимости = Выборка.ОбъектыНедвижимости.Выбрать();
		
		Пока ОбъектыНедвижимости.Следующий() Цикл
			
			НомерСтроки = 0;
			Если Не ПерваяСтраница Тогда

				ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение");
				ВставитьДополнительнуюСтраницу("Приложение");

			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
				
			мПриложение.Области["П000100000100"].Значение = Формат(Выборка.П000100000100, "ЧГ=0");
			
			мКодРегионаПриложение = ОбъектыНедвижимости.КодРегиона;
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(ОбъектыНедвижимости.АдресМестонахождения);
			Если Не СтруктураАдреса = Неопределено Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение","ПочтИндекс", 6, РегламентированнаяОтчетность.ДополнитьСтроку(СтруктураАдреса.Индекс, 6, "-"));
				мПриложение.Области.СубъектРФ.Значение = СтруктураАдреса.Регион;
				мПриложение.Области.Район.Значение = СтруктураАдреса.Район;
				мПриложение.Области.Город.Значение = СтруктураАдреса.Город;
				мПриложение.Области.НаселенныйПункт.Значение = СтруктураАдреса.НаселенныйПункт;
				мПриложение.Области.Улица.Значение = СтруктураАдреса.Улица;
				мПриложение.Области.НомерДома.Значение = СтруктураАдреса.Дом;
				мПриложение.Области.НомерСтроения.Значение = СтруктураАдреса.Корпус;
				мПриложение.Области.НомерКвартиры.Значение = СтруктураАдреса.Квартира;
			КонецЕсли;
			
			Если ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам = 0
				И ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления = 0 
				И ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости = 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьСтрокуПриложение(НомерСтроки, ОбъектыНедвижимости, Выборка.П000100000100, "", 
										0, 
										0);
			Иначе	
				Если ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуПриложение(НомерСтроки, ОбъектыНедвижимости, Выборка.П000100000100, "1011801", 
											ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботам, 
											ОбъектыНедвижимости.СуммаНДСПоПодряднымРаботамВосстановлена);
				КонецЕсли;
				
				Если ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуПриложение(НомерСтроки, ОбъектыНедвижимости, Выборка.П000100000100, "1011802", 
											ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребления, 
											ОбъектыНедвижимости.СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена);
				КонецЕсли;
				
				Если ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости <> 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьСтрокуПриложение(НомерСтроки, ОбъектыНедвижимости, Выборка.П000100000100, "1011803", 
											ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимости, 
											ОбъектыНедвижимости.СуммаНДСПоОбъектуНедвижимостиВосстановлена);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
			
			Расчет("Приложение");
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаТитульныйОргУпПриИзменении
//
Процедура ПолеТабличногоДокументаТитульныйОргУпПриИзменении(Элемент)
	ЗаполнитьДатуВЯчейках();
КонецПроцедуры // ПолеТабличногоДокументаТитульныйОргУпПриИзменении

// ПолеТабличногоДокументаПриложениеВыбор
//
Процедура ПолеТабличногоДокументаПриложениеВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	//Если (НЕ мАвтоВыборКодов) И ((Найти(ОбластьИмя, "ПочтИндекс") > 0)
	// Отключена возможность вводить адрес без формы ввода адреса, т.к. код региона в этом случае ввести нельзя, а он присутствует в выгрузке.
	Если ОбластьИмя = "П000100000100" Тогда
		СтандартнаяОбработка = Ложь;
		ВводКода(мПриложение, ОбластьИмя, Формат(Область.Значение, "ЧГ=0"), 4, "Календарный год", СтандартнаяОбработка);
	ИначеЕсли Найти(ОбластьИмя, "П000100002001") > 0 Тогда
		ВводКода(мПриложение, ОбластьИмя, Формат(Область.Значение, "ЧГ=0"), 4, "Календарный год", СтандартнаяОбработка);
	ИначеЕсли ((Найти(ОбластьИмя, "ПочтИндекс") > 0)
	   Или (Найти(ОбластьИмя, "КодРегион") > 0)
	   Или (ОбластьИмя = "СубъектРФ")
	   Или (ОбластьИмя = "Район")
	   Или (ОбластьИмя = "Город")
	   Или (ОбластьИмя = "НаселенныйПункт")
	   Или (ОбластьИмя = "Улица")
	   Или (ОбластьИмя = "НомерДома")
	   Или (ОбластьИмя = "НомерСтроения")
	   Или (ОбластьИмя = "НомерКвартиры")) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Приложение", "ПочтИндекс");

		СубъектРФ       = мПриложение.Области.СубъектРФ.Значение;
		СубъектРФКод    = мКодРегионаПриложение;
		Район           = мПриложение.Области.Район.Значение;
		Город           = мПриложение.Области.Город.Значение;
		НаселенныйПункт = мПриложение.Области.НаселенныйПункт.Значение;
		Улица           = мПриложение.Области.Улица.Значение;
		НомерДома       = мПриложение.Области.НомерДома.Значение;
		НомерСтроения   = мПриложение.Области.НомерСтроения.Значение;
		НомерКвартиры   = мПриложение.Области.НомерКвартиры.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФКод); // код
		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", СубъектРФ);
		СтруктураАдресныхДанных.Вставить("Район", Район);
		СтруктураАдресныхДанных.Вставить("Город", Город);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НаселенныйПункт);
		СтруктураАдресныхДанных.Вставить("Улица", Улица);
		СтруктураАдресныхДанных.Вставить("Дом", НомерДома);
		СтруктураАдресныхДанных.Вставить("Корпус", НомерСтроения);
		СтруктураАдресныхДанных.Вставить("Квартира", НомерКвартиры);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение", "ПочтИндекс", 6, Индекс);
			мКодРегионаПриложение = Регион;

			мПриложение.Области.СубъектРФ.Значение = НазваниеРегиона;
			мПриложение.Области.Район.Значение = Район;
			мПриложение.Области.Город.Значение = Город;
			мПриложение.Области.НаселенныйПункт.Значение = НаселенныйПункт;
			мПриложение.Области.Улица.Значение = Улица;

			мПриложение.Области.НомерДома.Значение = Дом;
			мПриложение.Области.НомерСтроения.Значение = Корпус;
			мПриложение.Области.НомерКвартиры.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(ОбластьИмя, "П000100002002") > 0) И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		ПоисковоеЗначение = Область.Значение;

		// Для 2008 г. необходимо использовать коды в соответствии с
		// приказом Минфина РФ от 21 ноября 2007 г. № 113н.

		Если Год(мДатаНачалаПериодаОтчета) >= 2008 Тогда
			ТаблицаКодов = мНдсОперацииПриложение_2008;
		Иначе
			ТаблицаКодов = мНдсОперацииПриложение;
		КонецЕсли;

		НайденнаяСтрока = ТаблицаКодов.Найти(ПоисковоеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = ТаблицаКодов.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
		Иначе
			Результат = ТаблицаКодов.ВыбратьСтроку("Выбор кода");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Область.Значение = Результат.Получить(0);
			Модифицированность = Истина;
			Если Результат.Получить(1) <> "Пустое значение" Тогда
				мПриложение.Области["П000100002003_" + Сред(ОбластьИмя,15)].Значение = Результат.Получить(1);
			Иначе
				мПриложение.Области["П000100002003_" + Сред(ОбластьИмя,15)].Значение = "";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(ОбластьИмя, "П000100002002") > 0) И (мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ВводКода(мПриложение, ОбластьИмя, Область.Значение, 7, "Код операции по объекту недвижимости", СтандартнаяОбработка);
	ИначеЕсли (Найти(ОбластьИмя, "П000100002003") > 0) И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		ПоисковоеЗначение = Область.Значение;

		// Для 2008 г. необходимо использовать коды в соответствии с
		// приказом Минфина РФ от 21 ноября 2007 г. № 113н.

		Если Год(мДатаНачалаПериодаОтчета) >= 2008 Тогда
			ТаблицаКодов = мНдсОперацииПриложение_2008;
		Иначе
			ТаблицаКодов = мНдсОперацииПриложение;
		КонецЕсли;

		НайденнаяСтрока = ТаблицаКодов.Найти(ПоисковоеЗначение, "Название");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = ТаблицаКодов.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
		Иначе
			Результат = ТаблицаКодов.ВыбратьСтроку("Выбор кода");
		КонецЕсли;

		НайденнаяСтрока = ТаблицаКодов.Найти(ПоисковоеЗначение, "Название");

		Если Результат <> Неопределено Тогда
			Если Результат.Получить(1) <> "Пустое значение" Тогда
				Область.Значение = Результат.Получить(1);
			Иначе
				Область.Значение = "";
			КонецЕсли;
			мПриложение.Области["П000100002002_" + Сред(ОбластьИмя,15)].Значение = Результат.Получить(0);
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложениеВыбор

// КнопкаПерейтиНаСтраницуПриложениеНажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложениеНажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение");
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложениеНажатие

// КнопкаУдалитьДопСтраницуПриложениеНажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложениеНажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение");
КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложениеНажатие

// КнопкаДобавитьДопСтраницуПриложениеНажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложениеНажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение");
	ВставитьДополнительнуюСтраницу("Приложение");
КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложениеНажатие

// КнопкаСледующаяСтраницаПриложениеНажатие
//
Процедура КнопкаСледующаяСтраницаПриложениеНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение");
КонецПроцедуры // КнопкаСледующаяСтраницаПриложениеНажатие

// КнопкаПредыдущаяСтраницаПриложениеНажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложениеНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение");
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложениеНажатие

// КнопкаУдалитьДопСтрокиПриложениеНажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложениеНажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	// Расчет("Приложение"); Не следует запускать расчет, т.к. нет итоговый показателей.
	УстановитьКНДВРазделе10();

КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложениеНажатие

// КнопкаДобавитьДопСтрокиПриложениеНажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложениеНажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	КолВоСтрок = мСтруктураМногострочныхРазделов[мИдГруппы7].Количество();
	Если КолВоСтрок <= 5 Тогда
		УстановитьКНДВРазделе10();
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложениеНажатие

// ПолеТабличногоДокументаПриложениеПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложениеПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение");
КонецПроцедуры // ПолеТабличногоДокументаПриложениеПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПолеТабличногоДокументаРаздел4Выбор
//
Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	// Строка КПП
	Если Найти(ОбластьИмя, "П000040001003_") > 0 Тогда

		ПервоначальноеЗначение = Элемент.ТекущаяОбласть.Значение;
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел4", ОбластьИмя, ПервоначальноеЗначение, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел4Выбор

// ПолеТабличногоДокументаРаздел5Выбор
//
Процедура ПолеТабличногоДокументаРаздел5Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел5Выбор

// ПолеТабличногоДокументаРаздел7Выбор
//
Процедура ПолеТабличногоДокументаРаздел7Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел7Выбор

// ПолеТабличногоДокументаРаздел9Выбор
//
Процедура ПолеТабличногоДокументаРаздел9Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (Найти(ОбластьИмя, "П000090001001") > 0) И (НЕ мАвтоВыборКодов) Тогда
		ПервоначальноеЗначение = Область.Значение;

		    // Используем список кодов для 2007 г. и ранее
		Если Год(мДатаНачалаПериодаОтчета) < 2008 Тогда
		    ТаблицаКодовОпераций = мТаблКодыОперацийРаздел2;
		ИначеЕсли Год(мДатаНачалаПериодаОтчета) < 2009 Тогда
			// Используем список кодов для 2008 г.
			// Приказ Минфина РФ от 21 ноября 2007 г. № 113н.
			ТаблицаКодовОпераций = мТаблКодыОперацийРаздел2_2008;
		ИначеЕсли Год(мДатаНачалаПериодаОтчета) >= 2009 Тогда
			// Используем список кодов для 2009 г. и позже
			// письмо ФНС от 25.06.2010 N ШС-37-3/5063@  
			ТаблицаКодовОпераций = мТаблКодыОперацийРаздел2_2009;   
		КонецЕсли;
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел9", ОбластьИмя, ПервоначальноеЗначение, 7, 0, Ложь, "Введите код операции", "Выбор кода операции", ТаблицаКодовОпераций, Неопределено, СтандартнаяОбработка);
		Если Результат.ЗначениеВведено Тогда
			// Сохраним в таблице многострочного блока.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы6, Сред(ОбластьИмя, 15), "П000090001001", Результат.Значение);
		КонецЕсли;

	ИначеЕсли (Найти(ОбластьИмя, "П000090001001") > 0) И (мАвтоВыборКодов) Тогда
		ВводКода(мРаздел9, ОбластьИмя, Область.Значение, 7, "Код операции", СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел9Выбор

// ПолеТабличногоДокументаРаздел6Выбор
//
Процедура ПолеТабличногоДокументаРаздел6Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (ОбластьИмя = "П000060001000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;

		Список.Добавить("1","1 (Месяц)");
		Список.Добавить("3","3 (Квартал)");
		Список.Добавить("0","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(мРаздел6.Области.П000060001000.Значение);
		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			мРаздел6.Области.НомКвМес1.Значение = "";
			мРаздел6.Области.НомКвМес2.Значение = "";
			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "0") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли (Найти(ОбластьИмя, "НомКвМес") > 0) И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Если мРаздел6.Области.П000060001000.Значение = "1" Тогда
			ВведенМесяц = Истина;
		ИначеЕсли мРаздел6.Области.П000060001000.Значение = "3" Тогда
			ВведенМесяц = Ложь;
		Иначе
			ВведенМесяц = Неопределено;
		КонецЕсли;

		Если ВведенМесяц = Неопределено Тогда
			Список.Добавить("01","01 (Январь/I квартал)");
			Список.Добавить("02","02 (Февраль/II квартал)");
			Список.Добавить("03","03 (Март/III квартал)");
			Список.Добавить("04","04 (Апрель/IV квартал)");
			Список.Добавить("05","05 (Май)");
			Список.Добавить("06","06 (Июнь)");
			Список.Добавить("07","07 (Июль)");
			Список.Добавить("08","08 (Август)");
			Список.Добавить("09","09 (Сентябрь)");
			Список.Добавить("10","10 (Октябрь)");
			Список.Добавить("11","11 (Ноябрь)");
			Список.Добавить("12","12 (Декабрь)");
			Список.Добавить("0","Пустое значение");
		ИначеЕсли ВведенМесяц = Истина Тогда
			Список.Добавить("01","01 (Январь)");
			Список.Добавить("02","02 (Февраль)");
			Список.Добавить("03","03 (Март)");
			Список.Добавить("04","04 (Апрель)");
			Список.Добавить("05","05 (Май)");
			Список.Добавить("06","06 (Июнь)");
			Список.Добавить("07","07 (Июль)");
			Список.Добавить("08","08 (Август)");
			Список.Добавить("09","09 (Сентябрь)");
			Список.Добавить("10","10 (Октябрь)");
			Список.Добавить("11","11 (Ноябрь)");
			Список.Добавить("12","12 (Декабрь)");
			Список.Добавить("0","Пустое значение");
		ИначеЕсли НЕ ВведенМесяц Тогда
			Список.Добавить("01","01 (I квартал)");
			Список.Добавить("02","02 (II квартал)");
			Список.Добавить("03","03 (III квартал)");
			Список.Добавить("04","04 (IV квартал)");
			Список.Добавить("0","Пустое значение");
		КонецЕсли;

		ОбластьЗначение = мРаздел6.Области.НомКвМес1.Значение + мРаздел6.Области.НомКвМес2.Значение;
		НайденнаяСтрока = Список.НайтиПоЗначению(ОбластьЗначение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (ОбластьЗначение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "0") Тогда
				мРаздел6.Области.НомКвМес1.Значение = "";
				мРаздел6.Области.НомКвМес2.Значение = "";
			Иначе
				мРаздел6.Области.НомКвМес1.Значение = Сред(СписокЭлемент.Значение, 1, 1);
				мРаздел6.Области.НомКвМес2.Значение = Сред(СписокЭлемент.Значение, 2, 1);
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(ОбластьИмя, "НомКвМес") > 0) И (мАвтоВыборКодов) Тогда
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел6", "НомКвМес"));
		ВводКода(мРаздел6, "НомКвМес", ПервоначальноеЗначение, 2, "Номер квартала или месяца", СтандартнаяОбработка, 2);
	ИначеЕсли Найти(ОбластьИмя, "ГодРаздел6_") > 0 Тогда
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел6", "ГодРаздел6_"));
		ВводКода(мРаздел6, "ГодРаздел6_", ПервоначальноеЗначение, 4, "Год", СтандартнаяОбработка, 4);
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел6Выбор

// ПолеТабличногоДокументаРаздел8Выбор
//
Процедура ПолеТабличногоДокументаРаздел8Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (ОбластьИмя = "П000080001000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;

		Список.Добавить("1","1 (Месяц)");
		Список.Добавить("3","3 (Квартал)");
		Список.Добавить("0","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(мРаздел8.Области.П000080001000.Значение);
		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			мРаздел8.Области.НомКвМес1.Значение = "";
			мРаздел8.Области.НомКвМес2.Значение = "";
			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "0") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли (Найти(ОбластьИмя, "НомКвМес") > 0) И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Если мРаздел8.Области.П000080001000.Значение = "1" Тогда
			ВведенМесяц = Истина;
		ИначеЕсли мРаздел8.Области.П000080001000.Значение = "3" Тогда
			ВведенМесяц = Ложь;
		Иначе
			ВведенМесяц = Неопределено;
		КонецЕсли;

		Если ВведенМесяц = Неопределено Тогда
			Список.Добавить("01","01 (Январь/I квартал)");
			Список.Добавить("02","02 (Февраль/II квартал)");
			Список.Добавить("03","03 (Март/III квартал)");
			Список.Добавить("04","04 (Апрель/IV квартал)");
			Список.Добавить("05","05 (Май)");
			Список.Добавить("06","06 (Июнь)");
			Список.Добавить("07","07 (Июль)");
			Список.Добавить("08","08 (Август)");
			Список.Добавить("09","09 (Сентябрь)");
			Список.Добавить("10","10 (Октябрь)");
			Список.Добавить("11","11 (Ноябрь)");
			Список.Добавить("12","12 (Декабрь)");
			Список.Добавить("0","Пустое значение");
		ИначеЕсли ВведенМесяц = Истина Тогда
			Список.Добавить("01","01 (Январь)");
			Список.Добавить("02","02 (Февраль)");
			Список.Добавить("03","03 (Март)");
			Список.Добавить("04","04 (Апрель)");
			Список.Добавить("05","05 (Май)");
			Список.Добавить("06","06 (Июнь)");
			Список.Добавить("07","07 (Июль)");
			Список.Добавить("08","08 (Август)");
			Список.Добавить("09","09 (Сентябрь)");
			Список.Добавить("10","10 (Октябрь)");
			Список.Добавить("11","11 (Ноябрь)");
			Список.Добавить("12","12 (Декабрь)");
			Список.Добавить("0","Пустое значение");
		ИначеЕсли НЕ ВведенМесяц Тогда
			Список.Добавить("01","01 (I квартал)");
			Список.Добавить("02","02 (II квартал)");
			Список.Добавить("03","03 (III квартал)");
			Список.Добавить("04","04 (IV квартал)");
			Список.Добавить("0","Пустое значение");
		КонецЕсли;

		ОбластьЗначение = мРаздел8.Области.НомКвМес1.Значение + мРаздел8.Области.НомКвМес2.Значение;
		НайденнаяСтрока = Список.НайтиПоЗначению(ОбластьЗначение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (ОбластьЗначение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "0") Тогда
				мРаздел8.Области.НомКвМес1.Значение = "";
				мРаздел8.Области.НомКвМес2.Значение = "";
			Иначе
				мРаздел8.Области.НомКвМес1.Значение = Сред(СписокЭлемент.Значение, 1, 1);
				мРаздел8.Области.НомКвМес2.Значение = Сред(СписокЭлемент.Значение, 2, 1);
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(ОбластьИмя, "НомКвМес") > 0) И (мАвтоВыборКодов) Тогда
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел8", "НомКвМес"));
		ВводКода(мРаздел8, "НомКвМес", ПервоначальноеЗначение, 2, "Номер квартала или месяца", СтандартнаяОбработка, 2);
	ИначеЕсли Найти(ОбластьИмя, "ГодРаздел8_") > 0 Тогда
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел8", "ГодРаздел8_"));
		ВводКода(мРаздел8, "ГодРаздел8_", ПервоначальноеЗначение, 4, "Год", СтандартнаяОбработка, 4);
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел8Выбор

// КнопкаПерейтиНаСтраницуРаздел6Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел6Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел6");
	ПерепроставитьПорядковыеНомера("Раздел6");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел6Нажатие

// КнопкаПерейтиНаСтраницуРаздел8Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел8Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел8");
	ПерепроставитьПорядковыеНомера("Раздел8");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел8Нажатие

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздел6Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел6");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел6");

	ПерепроставитьПорядковыеНомера("Раздел6");
	РасчетЗависимыхРазделовДекларации("Раздел6");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздел8Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел8");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел8");

	ПерепроставитьПорядковыеНомера("Раздел8");
	РасчетЗависимыхРазделовДекларации("Раздел8");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела8Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздел6Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел6");
	ВставитьДополнительнуюСтраницу("Раздел6");
	ПерепроставитьПорядковыеНомера("Раздел6");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел6Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздел8Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел8");
	ВставитьДополнительнуюСтраницу("Раздел8");
	ПерепроставитьПорядковыеНомера("Раздел8");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел8Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздел6Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел6");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел6Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздел8Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел8");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел8Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздел6Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел6");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел6Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздел8Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел8");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел8Нажатие()

// КнопкаУдалитьДопСтрокиРаздел4Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел4Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Раздел4");
КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4Нажатие

// КнопкаУдалитьДопСтрокиРаздел9Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел9Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Раздел9");
КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4Нажатие

// КнопкаДобавитьДопСтрокиРаздел4Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел4Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел4Нажатие

// КнопкаДобавитьДопСтрокиРаздел9Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел9Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел9Нажатие

// КоманднаяПанельФормыПроверкаПоказателей
//
Процедура КоманднаяПанельФормыПроверкаПоказателей(Кнопка)
	РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь, Истина);
КонецПроцедуры // КоманднаяПанельФормыПроверкаПоказателей

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел 8";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел8";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9";
	СтрокаУровня1.Представление            = "Раздел 9";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел9";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = "Приложение";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.1" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.1" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 4"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел4");

КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 5"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел5");

КонецПроцедуры // ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 7"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел7");

КонецПроцедуры // ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 9"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел8");

КонецПроцедуры // ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 5"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел6");

КонецПроцедуры // ПолеТабличногоДокументаРаздел6ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 9"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок "Добавить" и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел9");

КонецПроцедуры // ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел2Нажатие()

// ПерепроставитьПорядковыеНомера
// Раздел 2.2 и 1.2 имеют порядковые номера, при удалении сбивается номер и нарушается порядок,
// данная процедура перенумерует оба раздела с 0
Процедура ПерепроставитьПорядковыеНомера(Раздел)

	ТаблицаСтраницРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела);

	КолВоЯчеек = ?(Раздел = "Раздел2", 6, 3);
	Для Инд1 = 0 По ТаблицаСтраницРаздела.Количество() - 1 Цикл

		
		НомерСтраницы = РегламентированнаяОтчетность.ДополнитьСтроку(Строка(Инд1 + 1), КолВоЯчеек, "0", 0);

		Если (ТаблицаСтраницРаздела[Инд1].Данные = Неопределено) Тогда
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, Раздел);
		КонецЕсли;

		Для Инд2 = 1 По КолВоЯчеек Цикл
			ТаблицаСтраницРаздела[Инд1].Данные.Вставить("Номер" + Строка(Инд2), Сред(НомерСтраницы, Инд2, 1));
		КонецЦикла;

		ТаблицаСтраницРаздела[Инд1].Данные.Вставить("ПорядковыйНомер" + Раздел, Инд1 + 1);

		Если ТаблицаСтраницРаздела[Инд1].АктивнаяСтраница Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел,"Номер", КолВоЯчеек, НомерСтраницы);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПерепроставитьПорядковыеНомера

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
	ВставитьДополнительнуюСтраницу("Раздел2");
	ПерепроставитьПорядковыеНомера("Раздел2");
	ОперацияСКППНаЛисте(мРаздел2);

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");

	ПерепроставитьПорядковыеНомера("Раздел2");
	ОперацияСКППНаЛисте(мРаздел2, Ложь);

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
	ПерепроставитьПорядковыеНомера("Раздел2");
	ОперацияСКППНаЛисте(мРаздел2, Ложь);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела5Нажатие()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// ПолеТабличногоДокументаРаздел1Выбор
// обработка "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "КБКРаздел1") > 0 Тогда
		КБКРаздел1 = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1", "КБКРаздел1_"));

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТЗ = мКБК2005;
		ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
			ТЗ = мКБК2006;
		КонецЕсли;

		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КБКРаздел1_", КБКРаздел1, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ТЗ, Неопределено,СтандартнаяОбработка, 20);

	ИначеЕсли Найти(ОбластьИмя, "КодОКАТОРаздел1") > 0 Тогда
		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1","КодОКАТОРаздел1_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КодОКАТОРаздел1_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
	ИначеЕсли Найти(ОбластьИмя, "КодОКВЭДРаздел1") > 0 Тогда
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("ОКВЭДРаздел1");

		СтандартнаяОбработка = Ложь;
		ВводЗначений = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВводаОКВЭД");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОКВЭД", НачЗначение);
		ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;

		Если ВводЗначений.ОткрытьМодально() Тогда

			Модифицированность = Истина;
			РезультатВвода = ВводЗначений.НачальноеЗначениеВыбора.ОКВЭД;

			Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
				РезультатВвода = "";
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("ОКВЭДРаздел1", РезультатВвода) Тогда
				РезультатВвода2 = СтрЗаменить(РезультатВвода, ".", "");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКВЭДРаздел1_", 6, РезультатВвода2);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(ОбластьИмя, "СуммаНалогДоплата") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СуммаНалогДоплата", мСуммаНалогДоплата, 17, 2, Истина, "Сумма налога, исчисленная к уплате", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаНалогДоплата = Результат.Значение;
		КонецЕсли;
	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(ОбластьИмя, "СуммаНалогУменьш") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СуммаНалогУменьш", мСуммаНалогУменьш, 17, 2, Истина, "Сумма налога, исчисленная к уменьшению", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаНалогУменьш = Результат.Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел2Выбор
// Процедура обработчик события "Выбор"
// Активизируется при "входе" в ячейку отчета
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	// Строка 020
	Если Найти(ОбластьИмя, "КППИнРаздел2_") > 0 Тогда

		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КППИнРаздел2_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КППИнРаздел2_", ПервоначальноеЗначение, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка, 9);

	// Строка 030. Наименование продавца.
	ИначеЕсли Найти(ОбластьИмя, "П000020003000") > 0 Тогда

		//КППИностраннойОрг = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КППИнРаздел2_");
		//КППИностраннойОргВведено = ?(ПустаяСтрока(КППИностраннойОрг), Ложь, Истина);

		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Значение",,"Значение реквизита",90);
		НовСтр = ТЗ.Добавить();
		НовСтр.Значение = "Пустое значение";

		НовСтр = ТЗ.Добавить();

		ДопТекст = "";
		Если НЕ мДанныеЛистаРаздел2ФИО Тогда
			ДопТекст = "/откорректировать";
		КонецЕсли;

		СтрокаСведений = "Ввести" + ?(ПустаяСтрока(Область.Значение), "", ДопТекст) + " наименование налогоплательщика - продавца (юр. лицо)";
		НовСтр.Значение = СтрокаСведений;

		НовСтр = ТЗ.Добавить();
		ДопТекст = "";
		Если мДанныеЛистаРаздел2ФИО Тогда
			ДопТекст = "/откорректировать";
		КонецЕсли;

		СтрокаСведений = "Ввести" + ?(ПустаяСтрока(Область.Значение), "", ДопТекст) + " наименование налогоплательщика - продавца (физ. лицо)";
		НовСтр.Значение = СтрокаСведений;

		ПервоначальноеЗначение = Область.Значение;
		НайденнаяСтрока = Неопределено;
		Если НЕ ПустаяСтрока(ПервоначальноеЗначение) Тогда
			НайденнаяСтрока = ТЗ[?(мДанныеЛистаРаздел2ФИО, 2, 1)];
		КонецЕсли;

		Если НайденнаяСтрока = Неопределено Тогда
			Результат = ТЗ.ВыбратьСтроку("Выбор варианта");
		Иначе
			Результат = ТЗ.ВыбратьСтроку("Выбор варианта", НайденнаяСтрока);
		КонецЕсли;

		Если Результат = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		Вариант = ТЗ.Индекс(Результат); // 0-пустое значение, 1 - юр., 2-физ.лицо.
		Если Вариант = 0 Тогда
			Модифицированность = Истина;
			мДанныеЛистаРаздел2ФИО = Ложь;
			Область.Значение = "";
			СтандартнаяОбработка = Ложь;

			Если СтрДлина(мИННРаздел2ДляВыгрузки) = 12 Тогда
				мИННРаздел2ДляВыгрузки = "";
				// Очистим квадратики в таблице.
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ИННРаздел2_", 12, "            ");
			КонецЕсли;

			// Очистим переменные ФИО.
			мФИОДляВыгрузкиРаздел2 = "";
			мФамилияРаздел2 = "";
			мИмяРаздел2 = "";
			мОтчествоРаздел2 = "";

			// Обработаем КПП.
			ОперацияСКППНаЛисте(мРаздел2, Ложь);
			Возврат;

		ИначеЕсли Вариант = 1 Тогда
			НужноОчистить = мДанныеЛистаРаздел2ФИО И НЕ ПустаяСтрока(мРаздел2.Области.П000020003000.Значение);
			мДанныеЛистаРаздел2ФИО = Ложь;

			// Очистим переменные ФИО.
			мФИОДляВыгрузкиРаздел2 = "";
			мФамилияРаздел2 = "";
			мИмяРаздел2 = "";
			мОтчествоРаздел2 = "";

			СтандартнаяОбработка = Истина;
			Если СтрДлина(мИННРаздел2ДляВыгрузки) = 12 Тогда
				мИННРаздел2ДляВыгрузки = "";
				// Очистим квадратики в таблице.
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ИННРаздел2_", 12, "            ");
			КонецЕсли;
			Если НужноОчистить Тогда
				мРаздел2.Области.П000020003000.Значение = "";
			КонецЕсли;
			Модифицированность = Истина;
			ОперацияСКППНаЛисте(мРаздел2, Ложь);
			Возврат;

		ИначеЕсли Вариант = 2 Тогда
			ВводЗначений = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВводаФИО");
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Фамилия",  мФамилияРаздел2);
			СтруктураПараметров.Вставить("Имя",      мИмяРаздел2);
			СтруктураПараметров.Вставить("Отчество", мОтчествоРаздел2);

			ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;
			СтандартнаяОбработка = Ложь;

			Если ВводЗначений.ОткрытьМодально() Тогда
				Модифицированность = Истина;
				мФамилияРаздел2 = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Фамилия);
				мИмяРаздел2 = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Имя);
				мОтчествоРаздел2 = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Отчество);

				ФИО = мФамилияРаздел2 + " " + мИмяРаздел2 + " " + мОтчествоРаздел2;
				мФИОДляВыгрузкиРаздел2 = мФамилияРаздел2 + "," + мИмяРаздел2 + "," + мОтчествоРаздел2;
				мДанныеЛистаРаздел2ФИО = Истина;
				мРаздел2.Области.П000020003000.Значение = ФИО;
				// Очистим КПП.
				ОперацияСКППНаЛисте(мРаздел2);

				// Если раньше был введен ИНН 10-ти значный от фирмы, то очистим его, т.к. выбрали фл.
				Если СтрДлина(мИННРаздел2ДляВыгрузки) = 10 Тогда
					мИННРаздел2ДляВыгрузки = "";
					// Очистим квадратики в таблице.
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ИННРаздел2_", 12, "            ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	// Строка 040
	ИначеЕсли Найти(ОбластьИмя, "ИННРаздел2") > 0 Тогда

		ВозможнаяДлинаИНН = 10;
		Если мДанныеЛистаРаздел2ФИО Тогда
			ВозможнаяДлинаИНН = 12;
		КонецЕсли;

		МодифЗнач = Модифицированность;
		НачальноеЗначениеИНН = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "ИННРаздел2_"));
		ВводИНН = Истина;
		// Организуем ввод ИНН. Если ИНН не соответствует признаку Физ или ЮР. введенному в строку 030, будет выдано сообщение.
		Пока ВводИНН Цикл
			ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "ИННРаздел2_"));
			Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "ИННРаздел2_", ПервоначальноеЗначение, 12, 0, Ложь, "Введите ИНН налогоплательщика - продавца", "", Неопределено, Неопределено, СтандартнаяОбработка, 12);
			Если Результат.ЗначениеВведено Тогда
				ВведенныйИНН = Результат.Значение;
				Если (СтрДлина(ВведенныйИНН) = ВозможнаяДлинаИНН) Или (ПустаяСтрока(ВведенныйИНН)) Тогда
					мИННРаздел2ДляВыгрузки = ?(ПустаяСтрока(ВведенныйИНН), "", ВведенныйИНН);
					Модифицированность = Истина;
					Прервать;
				Иначе
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ИННРаздел2_", 12, НачальноеЗначениеИНН);
					Сообщить("Необходимо указать ИНН " + ?(ВозможнаяДлинаИНН = 12, "физ. лица (12 знаков).", "юридического лица (10 знаков)."), СтатусСообщения.Важное);
					Модифицированность = МодифЗнач;
				КонецЕсли;
			Иначе
				Модифицированность = МодифЗнач;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	// Строка 050
	ИначеЕсли Найти(ОбластьИмя, "КППРаздел2") > 0 Тогда

		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КППРаздел2_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КППРаздел2_", ПервоначальноеЗначение, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка, 9);

	// Строка 060
	ИначеЕсли Найти(ОбластьИмя, "КБКРаздел2") > 0 Тогда

		КБКРаздел2 = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КБКРаздел2_"));

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТЗ = мКБК2005;
		ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
			ТЗ = мКБК2006Раздел2;
		КонецЕсли;

		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КБКРаздел2_", КБКРаздел2, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ТЗ, Неопределено,СтандартнаяОбработка, 20);

	// Строка 070
	ИначеЕсли Найти(ОбластьИмя, "КодОКАТОРаздел2") > 0 Тогда

		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2","КодОКАТОРаздел2_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КодОКАТОРаздел2_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено, СтандартнаяОбработка, 11);

	// Строка 080
	ИначеЕсли (Найти(ОбластьИмя, "КодОКВЭДРаздел2") > 0) Тогда

		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("ОКВЭДРаздел2");

		СтандартнаяОбработка = Ложь;
		ВводЗначений = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВводаОКВЭД");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОКВЭД", НачЗначение);
		ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;

		Если ВводЗначений.ОткрытьМодально() Тогда

			Модифицированность = Истина;
			РезультатВвода = ВводЗначений.НачальноеЗначениеВыбора.ОКВЭД;
			Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
				РезультатВвода = "";
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("ОКВЭДРаздел2", РезультатВвода) Тогда
				РезультатВвода2 = СтрЗаменить(РезультатВвода, ".", "");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "КодОКВЭДРаздел2_", 6, РезультатВвода2);
			КонецЕсли;
		КонецЕсли;

	// Строка 090
	ИначеЕсли (Найти(ОбластьИмя, "Сумма090Раздел2") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "Сумма090Раздел2_", мСтрока090Раздел2, 17, 2, Истина, "Сумма налога, исчисленная к уплате", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтрока090Раздел2 = Результат.Значение;
		КонецЕсли;

	// Строка 100
	ИначеЕсли Найти(ОбластьИмя, "КодОперацииРаздел2") > 0 Тогда

		ПервоначальноеЗначение = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2", "КодОперацииРаздел2_"));
		Если НЕ мАвтоВыборКодов Тогда
			РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КодОперацииРаздел2_", ПервоначальноеЗначение, 7, 0, Ложь, "Введите код операции", "Выбор кода операции", мФильтрКодовДляРаздела2, Неопределено, СтандартнаяОбработка, 7);
		Иначе
			ВводКода(мРаздел2, РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ОбластьИмя), ПервоначальноеЗначение, 7, "Код операции", СтандартнаяОбработка, 7);
		КонецЕсли;

	// Строка 110
	ИначеЕсли (Найти(ОбластьИмя, "Сумма110Раздел2") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "Сумма110Раздел2_", мСтрока110Раздел2, 17, 2, Истина, "Сумма налога, исчисленная при отгрузке товаров", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтрока110Раздел2 = Результат.Значение;
		КонецЕсли;

	// Строка 120
	ИначеЕсли (Найти(ОбластьИмя, "Сумма120Раздел2") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "Сумма120Раздел2_", мСтрока120Раздел2, 17, 2, Истина, "Сумма налога, исчисленная с оплаты", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтрока120Раздел2 = Результат.Значение;
		КонецЕсли;

	// Строка 130
	ИначеЕсли (Найти(ОбластьИмя, "Сумма130Раздел2") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "Сумма130Раздел2_", мСтрока130Раздел2, 17, 2, Истина, "Сумма налога, исчисленная налоговым агентом", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтрока130Раздел2 = Результат.Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Если мСохраненныйДок = Неопределено Тогда
		Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг) Тогда
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргУП) И ПустаяСтрока(ОргДиректор) Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество руководителя организации!", "Титульный", "ОргДиректор");
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество руководителя организации!", "Титульный", "ОргДиректор");
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	УпПред = ПоказателиТитульный.ОргУп;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20))); 
	ПризнВидаДок = Число(ПоказателиТитульный.ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	Если мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда	
		ПризнОтчетногоПериода = 1; // представляется ежемесячно
	Иначе
		ПризнОтчетногоПериода = 3; // представляется ежеквартально
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ПоказателиТитульный.ДокументПредставителя), "-", ВРЕГ(СокрЛП(ПоказателиТитульный.ДокументПредставителя))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ПоказателиТитульный.ДокументПредставителя), "-", ВРЕГ(СокрЛП(ПоказателиТитульный.ДокументПредставителя))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00006"); 
	Текст.ДобавитьСтроку("ПериодВерОтч:13.12.2006,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					ном = ном + 1;
				КонецЦикла;
				~ВыходИзДвойногоЦикла_:
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;
		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦиклаВ:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_В:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Возврат СтатусПроверки <> 1;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах() И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь);
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	ПоказателиОКВЭД = Новый Массив;
	ПоказателиОКВЭД.Добавить("П000010003000");
	ПоказателиОКВЭД.Добавить("П000020008000");
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П000020004000" Тогда
			СледСтрока = Текст.ПолучитьСтроку(ТекИнд - 1);
			ИННП000020004000 = Сред(ТекСтрока, 15);
			Если СтрДлина(ИННП000020004000) = 12 И (Лев(ИННП000020004000, 2) <> "00") Тогда
				Текст.ЗаменитьСтроку(ТекИнд - 1, "П000020003000:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(СледСтрока, 15)));
			КонецЕсли;
		КонецЕсли;
		Если ПоказателиОКВЭД.Найти(Тек13Симв) <> Неопределено Тогда
			ИсходныйОКВЭД = Сред(ТекСтрока, 15);
			КонечныйОКВЭД = СтрЗаменить(СокрЛП(СтрЗаменить(ИсходныйОКВЭД, ".", " ")), " ", ".");
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + КонечныйОКВЭД);
		КонецЕсли;
		Если ТекСтрока = "П000100001000:,,,,,,,,," ИЛИ ТекСтрока = "П000100001000:643,,,,,,,,," ИЛИ ТекСтрока = "П000100001000:643,,,,,,,,,,,," Тогда
			Текст.ЗаменитьСтроку(ТекИнд, "П000100001000:");
		КонецЕсли;
	КонецЦикла;
	
	ПС = Символы.ПС;
	
	ТекстВыгрузки = Текст.ПолучитьТекст();
    ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки
		,	ПС + "П000050001001:1010401" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010402" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010403" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010404" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010405" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010407" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010408" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010409" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010411" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010412" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010413" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010414" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010415" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010416" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010417" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050001001:1010418" + ПС + "П000050001002:" + ПС + "П000050001004:" + ПС + "П000050001005:" + ПС + "П000050001006:" + ПС + "###"
		+	ПС + "П000050002002:" + ПС + "П000050002004:" + ПС + "П000050002005:" + ПС + "П000050002006:" + ПС + "П000050003000:" + ПС + "###"
		,	"");
    ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки
		,	ПС + "П000060001000:" + ПС + "П000060002000:" + ПС + "П000060003000:" + ПС + "П000060004000:1" + ПС + "###"
		+	ПС + "П000060005001:1010401" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010402" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010403" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010404" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010405" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010407" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010408" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010409" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010411" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010412" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010413" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010414" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010415" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010416" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010417" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060005001:1010418" + ПС + "П000060005002:" + ПС + "П000060005003:" + ПС + "###"
		+	ПС + "П000060006003:" + ПС + "###"
		,	"");
    ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки
		,	ПС + "П000070001001:1010401" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010402" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010403" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010404" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010405" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010407" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010408" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010409" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010411" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010412" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010413" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010414" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010415" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010416" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010417" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070001001:1010418" + ПС + "П000070001002:" + ПС + "П000070001003:" + ПС + "П000070001004:" + ПС + "П000070001005:" + ПС + "###"
		+	ПС + "П000070002002:" + ПС+ "П000070002003:" + ПС + "П000070002004:" + ПС + "П000070002005:" + ПС + "П000070003005:" + ПС + "П000070004005:" + ПС + "###"
		,	"");
    ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки
	 	,	ПС + "П000080001000:"		 + ПС + "П000080002000:" + ПС + "П000080003000:" + ПС + "П000080004000:1" + ПС + "###"
        +	ПС + "П000080005001:1010401" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010402" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010403" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010404" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010405" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010407" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010408" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010409" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010411" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010412" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010413" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010414" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010415" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010416" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010417" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080005001:1010418" + ПС + "П000080005002:" + ПС + "П000080005003:" + ПС + "###"
		+	ПС + "П000080006003:" + ПС + "###"
		,	"");
	Текст.УстановитьТекст(ТекстВыгрузки);
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей2007Кв1");
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	Если Найти(ОбластьИмя, "НомСтр") = 1 Тогда
		Возврат;
	КонецЕсли;
	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		РасчетЗависимыхРазделовДекларации("Раздел3");

	ИначеЕсли (ИмяТекущейСтраницыПанели = "Раздел4")
	      Или (ИмяТекущейСтраницыПанели = "Раздел5")
	      Или (ИмяТекущейСтраницыПанели = "Раздел6")
	      Или (ИмяТекущейСтраницыПанели = "Раздел7")
	      Или (ИмяТекущейСтраницыПанели = "Раздел8")
	      Или (ИмяТекущейСтраницыПанели = "Раздел9")
	      Или (ИмяТекущейСтраницыПанели = "Приложение") Тогда

		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
		КонецЕсли;

		// Далее следуют колонки, изменения которых трубует перезапуска процедуры Расчет()
		Если ИмяТекущейСтраницыПанели = "Приложение" Тогда
			Если (Найти(ОбластьИмя, "П000100002007") > 0)
			 Или (Найти(ОбластьИмя, "П000100002008") > 0)
			 Или (Найти(ОбластьИмя, "П000100002010") > 0) Тогда
				РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, НомерСтрокиМнгЧ);
			КонецЕсли;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
			Если НЕ (Найти(ОбластьИмя, "П000090001001") > 0) Тогда
				РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
			Если (Найти(ОбластьИмя, "П000080005003") > 0) Тогда
				РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
			Если (Найти(ОбластьИмя, "П000060005003") > 0) Тогда
				РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
			Если (Найти(ОбластьИмя, "П000040001004") > 0) Или (Найти(ОбластьИмя, "П000040001005") > 0) Тогда
				РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
			КонецЕсли;

		Иначе
			РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

	ВзаимныеПереходыПозиций(ОбластьИмя);

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// РасчетЗависимыхРазделовДекларации
// в процедуре сформированы взаимосвязи разделов декларации. Данные на каких листах вызывают
// перерасчет в других разделах.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - имя раздела декларации.
//
Процедура РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, НомерСтрокиИлиКолонки = Неопределено)

	Расчет(ИмяТекущейСтраницыПанели, НомерСтрокиИлиКолонки);

	Если (ИмяТекущейСтраницыПанели = "Раздел3")
	 Или (ИмяТекущейСтраницыПанели = "Раздел5")
	 Или (ИмяТекущейСтраницыПанели = "Раздел6")
	 Или (ИмяТекущейСтраницыПанели = "Раздел7")
	 Или (ИмяТекущейСтраницыПанели = "Раздел8") Тогда
		Расчет("Раздел1");
	КонецЕсли;

КонецПроцедуры // РасчетЗависимыхРазделовДекларации

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

// ПроверитьСоотношенияПоказателей
// Функция перенаправляет вызовы от обработки соотношений.
//
Функция ПроверитьСоотношенияПоказателей(НазваниеОбработки, ОбъектКС, СтруктураПараметров) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	Результат = СтруктураРезультата;

	Если НазваниеОбработки = "ПроверкаРаздела10" Тогда
		Результат = ПроверкаРаздела10(ОбъектКС, СтруктураПараметров);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьСоотношенияПоказателей

// ПроверкаРаздела10
//
Функция ПроверкаРаздела10(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Приложение";

	ТаблКоординатовДляРасш = Новый ТаблицаЗначений;
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЯчейкиЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ЗначениеЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("ИмяЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НомерЛистаЛЧ");
	ТаблКоординатовДляРасш.Колонки.Добавить("НазваниеПоказателяЛЧ");

	ТаблКоординатовДляРасш.Колонки.Добавить("ПолнаяРасшифровка");

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		ТаблСообщений = Новый ТаблицаЗначений;
		ТаблСообщений.Колонки.Добавить("ЭтоОшибка"); // Булево
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
		ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
		ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки"); // Таблица, название показателя и значение
		ТаблСообщений.Колонки.Добавить("Описание"); // Текст, выводимый в колонку "Описание нарушения".

		ТекстФормулы = "Проверка Приложения к декларации";

		НазваниеКолонка7 = "Сумма НДС, принятая к вычету по объекту недвижимости";
		НазваниеКолонка9 = "1/10 часть суммы НДС, принятой к вычету по объекту недвижимости";
		НазваниеКолонка10 = "Доля отгруженных товаров, имущественных прав, не облагаемых НДС в общей стоимости отгрузки";
		НазваниеКолонка11 = "Сумма НДС, подлежащая восстановлению и уплате в бюджет";

		Для каждого Страница Из Док.ДанныеМногостраничныхРазделов.Приложение Цикл
			НомерСтраницы = Строка(Док.ДанныеМногостраничныхРазделов.Приложение.Индекс(Страница) + 1);
			Для каждого СтрокаМнЧ Из Страница.ДанныеДопСтрок Цикл
				НомСтр = Страница.ДанныеДопСтрок.Индекс(СтрокаМнЧ) + 1;
				НомСтрСтр = Формат(НомСтр, "ЧРД=.;ЧН=0;ЧО=0");

				Если СтрокаМнЧ["П000100002001"] = 0
				 И ПустаяСтрока(СтрокаМнЧ["П000100002002"])
				 И ПустаяСтрока(СтрокаМнЧ["П000100002003"])
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000100002004"])
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000100002005"])
				 И СтрокаМнЧ["П000100002006"] = 0
				 И СтрокаМнЧ["П000100002007"] = 0
				 И НЕ ЗначениеЗаполнено(СтрокаМнЧ["П000100002008"])
				 И СтрокаМнЧ["П000100002009"] = 0
				 И СтрокаМнЧ["П000100002010"] = 0
				 И СтрокаМнЧ["П000100002011"] = 0 Тогда
					ПропуститьДанные = Истина;
				Иначе
					ПропуститьДанные = Ложь;
				КонецЕсли;

				Если ПропуститьДанные Тогда
					// Вся строка многострочной части не заполнена. Пропускаем строку.
					Продолжить;
				КонецЕсли;

				// Проверяем колонку 9.
				ОписаниеКС = "Значение в колонке 9, таблицы в Приложении к декларации, должно быть равно 1/10 части суммы НДС, принятой к вычету по объекту недвижимости";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				// Зарегистрируем левую часть соотношения.
				ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000100002009"]);
				НазваниеПоказателя = НазваниеКолонка9 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002009_" + НомСтрСтр, НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				ПраваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000100002007"]);
				ПраваяЧастьРезультат = ОбработкаКС.ОкруглитьЧислоПоФормату(ПраваяЧасть * 1/10);
				ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
				ПраваяЧастьРезультатСтр = Формат(ПраваяЧастьРезультат, "ЧРД=.;ЧН=0");

				// Добавляем расшифровку для колонки 7.
				НазваниеПоказателя = "Сумма НДС, принятая к вычету по объекту недвижимости" + " (колонка № 7, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002007_" + НомСтрСтр, НазваниеПоказателя, ПраваяЧасть, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + ПраваяЧастьСтр + " * 1/10 Итог[" + ПраваяЧастьРезультатСтр + "]";

				// Проверяем соотношение только в том случае, если колонка 8 в таблице заполнена.
				// В соответствии с инструкцией по заполнению, если колонка 8 не заполнена, то 9-11 должны быть пустыми.
				Если (ЛеваяЧасть <> ПраваяЧастьРезультат) И (ЗначениеЗаполнено(СтрокаМнЧ["П000100002008"])) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации. Строка № " + НомСтрСтр);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Окончание проверки колонки 9.

				// Проверяем колонку 11.
				ОписаниеКС = "Значение в колонке 11, таблицы в Приложении к декларации, должно быть равно произведению колонок 9 и 10, деленное на 100";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				// Зарегистрируем левую часть соотношения.
				ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000100002011"]);

				Колонка9 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ["П000100002009"]);
				Колонка10 = СтрокаМнЧ["П000100002010"];

				ПраваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Колонка9 * Колонка10 / 100);
				ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");

				Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = (" + Колонка9 + " * " + Колонка10 + " / 100 Итог[" + ПраваяЧастьСтр + "]";

				НазваниеПоказателя = НазваниеКолонка11 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002011_" + НомСтрСтр, НазваниеПоказателя, ЛеваяЧасть, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				НазваниеПоказателя = НазваниеКолонка9 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002009_" + НомСтрСтр, НазваниеПоказателя, Колонка9, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				НазваниеПоказателя = НазваниеКолонка10 + " (строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002010_" + НомСтрСтр, НазваниеПоказателя, Колонка10, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				// Проверяем соотношение только в том случае, если колонка 8 в таблице заполнена.
				// В соответствии с инструкцией по заполнению, если колонка 8 не заполнена, то 9-11 должны быть пустыми.
				Если (ЛеваяЧасть <> ПраваяЧасть) И (ЗначениеЗаполнено(СтрокаМнЧ["П000100002008"])) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации. Строка № " + НомСтрСтр);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Окончание проверки колонки 11.

				// Проверим правильность указания года в колонке № 1
				Колонка1 = Формат(СтрокаМнЧ.П000100002001, "ЧГ=0");

				ОписаниеКС = "В колонке 1, таблицы в Приложении к декларации (Экземпляр листа № " + НомерСтраницы + "), должен быть указан год";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (СтрДлина(Колонка1) <> 4) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Календарный год" + " (колонка № 1, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002001_" + НомСтрСтр, НазваниеПоказателя, Колонка1, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Не указан год в колонке № 1 по строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Колонка1);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки колонки 1.

				// Проверим правильность указания года в колонке № 2
				Колонка2 = СтрокаМнЧ.П000100002002;

				ОписаниеКС = "В колонке 2, таблицы в Приложении к деклараации, должен быть указан код объекта недвижимости, состоящий из 7 цифр.";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Колонка2)) Или (СтрДлина(Колонка2) <> 7) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Код объекта недвижимости" + " (колонка № 2, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002002_" + НомСтрСтр, НазваниеПоказателя, Колонка2, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Не указан или неверно указан код объекта недвижимости в колонке № 2 по строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Колонка2);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки колонки 2.

				// Проверим правильность указания заполнения колонок 9-11 в зависимости от даты указанной в колонке 8
				Колонка8 = СтрокаМнЧ.П000100002008;
				Колонка9 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000100002009);
				Колонка10 = СтрокаМнЧ.П000100002010;
				Колонка11 = ОбработкаКС.ОкруглитьЧислоПоФормату(СтрокаМнЧ.П000100002011);

				ОписаниеКС = "В  случае если у налогоплательщика в течение календарного года, за который составляется Приложение, отсутствуют случаи использования данного объекта недвижимости для осуществления операций, указанных в пункте 2 статьи 170 Кодекса, то в графах 8 - 11 по строке 020 ставятся прочерки.";
				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

				Если (НЕ ЗначениеЗаполнено(Колонка8) И (Колонка9 <> 0 Или Колонка10 <> 0 Или Колонка11 <>0) ) Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				КонецЕсли;

				НазваниеПоказателя = "Дата начала использования объекта для операций указанных в п.2 ст. 170 НК РФ" + " (колонка № 8, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002008_" + НомСтрСтр, НазваниеПоказателя, Формат(Колонка8, "ДЛФ=Д"), "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "1/10 часть суммы НДС, принятой к вычету по объекту недвижимости" + " (колонка № 9, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002009_" + НомСтрСтр, НазваниеПоказателя, Колонка9, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "Доля отгруженных товаров" + " (колонка № 10, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002010_" + НомСтрСтр, НазваниеПоказателя, Колонка10, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				НазваниеПоказателя = "Сумма НДС, подлежащая восстановлению и уплате в бюджет" + " (колонка № 11, строка № " + НомСтрСтр + ")";
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000100002011_" + НомСтрСтр, НазваниеПоказателя, Колонка11, "", Стр.СсылкаНаРО, "Приложение", Неопределено, НомерСтраницы);

				Колонка9С = Формат(Колонка9, "ЧРД=.;ЧН=0;ЧО=0");
				Колонка10С = Формат(Колонка10, "ЧРД=.;ЧН=0;ЧО=0");
				Колонка11С = Формат(Колонка11, "ЧРД=.;ЧН=0;ЧО=0");

				ТекстовоеПредставлениеФормулы = ТекстФормулы + ". " + ОписаниеКС;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "В строке № " + НомСтрСтр + ", экземпляр листа № " + НомерСтраницы + ", колонки 9-11 должны быть пустыми");
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Колонки 9-11: " + Колонка9С + ", " + Колонка10С + ", " + Колонка11С);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
				СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
				// Конец процерки правильности заполнения колонок 9-11 в зависимости от даты в колонке 8.

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела10

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

Процедура НадписьОрганизацияНажатие(Элемент)
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2007Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

мКБК2005 = Новый ТаблицаЗначений;
мКБК2005.Колонки.Добавить("Код",,, 20);
мКБК2005.Колонки.Добавить("Название",,, 55);

мКБК2006 = Новый ТаблицаЗначений;
мКБК2006.Колонки.Добавить("Код",,, 20);
мКБК2006.Колонки.Добавить("Название",,, 55);

мКБК2006Раздел2 = Новый ТаблицаЗначений;
мКБК2006Раздел2.Колонки.Добавить("Код",,, 20);
мКБК2006Раздел2.Колонки.Добавить("Название",,, 55);

мТаблКодыОперацийРаздел2 = Новый ТаблицаЗначений;
мТаблКодыОперацийРаздел2.Колонки.Добавить("Код",,, 8);
мТаблКодыОперацийРаздел2.Колонки.Добавить("Название",,, 55);

мТаблКодыОперацийРаздел2_2008 = Новый ТаблицаЗначений;
мТаблКодыОперацийРаздел2_2008.Колонки.Добавить("Код",,, 8);
мТаблКодыОперацийРаздел2_2008.Колонки.Добавить("Название",,, 55);

мТаблКодыОперацийРаздел2_2009 = Новый ТаблицаЗначений;
мТаблКодыОперацийРаздел2_2009.Колонки.Добавить("Код",,, 8);
мТаблКодыОперацийРаздел2_2009.Колонки.Добавить("Название",,, 55);

мФильтрКодовДляРаздела2 = Новый ТаблицаЗначений;
мФильтрКодовДляРаздела2.Колонки.Добавить("Код",,, 8);
мФильтрКодовДляРаздела2.Колонки.Добавить("Название",,, 55);

мНдсОперацииПриложение = Новый ТаблицаЗначений;
мНдсОперацииПриложение.Колонки.Добавить("Код",,, 8);
мНдсОперацииПриложение.Колонки.Добавить("Название",,, 55);

мНдсОперацииПриложение_2008 = Новый ТаблицаЗначений;
мНдсОперацииПриложение_2008.Колонки.Добавить("Код",,, 8);
мНдсОперацииПриложение_2008.Колонки.Добавить("Название",,, 55);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповСтрока7  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(7);
ОписаниеТиповСтрока4  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока9  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);

ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

мИдГруппы1 = "П0000400010";
мИдГруппы2 = "П0000500010";
мИдГруппы3 = "П0000600050";
мИдГруппы4 = "П0000700010";
мИдГруппы5 = "П0000800050";
мИдГруппы6 = "П0000900010";
мИдГруппы7 = "П0001000020";

мМаскиЯчейки = Новый Соответствие;
мМаскиЯчейки.Вставить("П000040001003", "999999999");
мМаскиЯчейки.Вставить("П000100002002", "9999999");

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 15;
КолИсхСтрокИдГруппы2 = 16;
КолИсхСтрокИдГруппы3 = 16;
КолИсхСтрокИдГруппы4 = 16;
КолИсхСтрокИдГруппы5 = 16;
КолИсхСтрокИдГруппы6 = 7;
КолИсхСтрокИдГруппы7 = 4;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000040001001", ОписаниеТиповСтрока7);
СтруктураГруппы1.Колонки.Добавить("П000040001002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
СтруктураГруппы1.Колонки.Добавить("П000040001003", ОписаниеТиповСтрока9);
СтруктураГруппы1.Колонки.Добавить("П000040001004", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000040001005", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000050001001", ОписаниеТиповСтрока7);
СтруктураГруппы2.Колонки.Добавить("П000050001002", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050001004", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050001005", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000050001006", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000060005001", ОписаниеТиповСтрока7);
СтруктураГруппы3.Колонки.Добавить("П000060005002", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000060005003", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000070001001", ОписаниеТиповСтрока7);
СтруктураГруппы4.Колонки.Добавить("П000070001002", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000070001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000070001004", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000070001005", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000080005001", ОписаниеТиповСтрока7);
СтруктураГруппы5.Колонки.Добавить("П000080005002", мОписаниеТиповЧислоЕ);
СтруктураГруппы5.Колонки.Добавить("П000080005003", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000090001001", ОписаниеТиповСтрока7);
СтруктураГруппы6.Колонки.Добавить("П000090001002", мОписаниеТиповЧислоЕ);
СтруктураГруппы6.Колонки.Добавить("П000090001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы6.Колонки.Добавить("П000090001004", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000100002001", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4));
СтруктураГруппы7.Колонки.Добавить("П000100002002", ОписаниеТиповСтрока7);
СтруктураГруппы7.Колонки.Добавить("П000100002003",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
СтруктураГруппы7.Колонки.Добавить("П000100002004", ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("П000100002005", ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("П000100002006", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000100002007", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000100002008", ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("П000100002009", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000100002010", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4, 1));
СтруктураГруппы7.Колонки.Добавить("П000100002011", мОписаниеТиповЧислоЕ);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыФизЛиц.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Элемент структуры - данные дополнительных страниц Раздела 1.2
ТаблицаСтраницыРаздела2 = ТаблицаСтраницыРаздела.Скопировать();

СтрПерваяСтраница = ТаблицаСтраницыРаздела2.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРаздела6 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела6.Добавить();
СтрПерваяСтраница.Представление = "НоваяСтраница";
СтрПерваяСтраница.АктивнаяСтраница = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено;

ТаблицаСтраницыРаздела8 = ТаблицаСтраницыРаздела6.Скопировать();
ТаблицаСтраницыРаздела10 = ТаблицаСтраницыРаздела6.Скопировать();

мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздела2);
мСтруктураМногостраничныхРазделов.Вставить("Раздел6", ТаблицаСтраницыРаздела6);
мСтруктураМногостраничныхРазделов.Вставить("Раздел8", ТаблицаСтраницыРаздела8);
мСтруктураМногостраничныхРазделов.Вставить("Приложение", ТаблицаСтраницыРаздела10);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007"; // Первая версия


// Код отчета, равен КНД
мКодОтчета   = 1151001;

РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00006", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151001";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ДОБАВЛЕННУЮ СТОИМОСТЬ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
