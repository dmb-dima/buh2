// Отбирает из переданной таблицы строки по заданным критериям.
//
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента. Таблица-источник.
//  СтруктураКритериев - Структура. Названия отборов и значения, по которым нужно отобрать строки.
//  СтруктураСложныхКритериев - Структура. Если свойство передано, то значение содержит вид сравнения.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица с нужными строками.
//
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено)

	Перем ВидСравненияСложный;

	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);

	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);

		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);

		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ПостроительЗапроса.Результат;

КонецФункции // ОтобратьСтрокиПоКритериям()

// Обновляет отчет.
//
Процедура ОбновитьОтчет()

	Если НЕ ЗначениеЗаполнено(ДатаНач) Или НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		Предупреждение("Не выбран период!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Предупреждение("Не выбран склад!");
		Возврат;
	КонецЕсли;

	мТабДок = ЭлементыФормы.ДокументРезультат;

	мТабДок.Очистить();

	Макет = ЭтотОбъект.ПолучитьМакет("Макет");

	// Выведем заголовок.
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаКон);

	ВыбМОЛ = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(КонецДня(ДатаКон), Новый Структура("СтруктурнаяЕдиница", Склад)).ФизическоеЛицо;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаСоставления = РабочаяДата;
	ОбластьМакета.Параметры.ДатаНачала = ДатаНач;
	ОбластьМакета.Параметры.ДатаКонца = ДатаКон;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.МОЛ = ?(НЕ ЗначениеЗаполнено(ВыбМОЛ), "", ВыбМОЛ);
	ОбластьМакета.Параметры.МОЛТабельныйНомер = ?(НЕ ЗначениеЗаполнено(ВыбМОЛ), "", ВыбМОЛ.Код);

	ОбластьМакета.Параметры.Номер = НомерОтчета;
	ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;

	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ПовторятьПриПечатиСтроки = мТабДок.Область(1 + ВысотаЗаголовка, ,2 + ВысотаЗаголовка);

	мТабДок.Вывести(ОбластьМакета);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("СчетТары", ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ДатаДок,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Док,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер КАК НомерДок,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК ПризнакПрихода,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК ПризнакРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет <> &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачОст,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачОстТары,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет <> &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПриходТары,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет <> &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расход,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасходТары,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет <> &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК КонОст,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = &СчетТары
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
    |			ИНАЧЕ 0
	|		КОНЕЦ) КАК КонОстТары
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , Счет В (&Счета), &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДок";
	
	РезультатЗапроса = Запрос.Выполнить();

	ТЗОстатки = РезультатЗапроса.Выгрузить();
	Если ТЗОстатки.Количество() = 0 Тогда
		НачОст = 0;
		КонОст = 0;
		НачОстТары = 0;
		КонОстТары = 0;
	Иначе
		НачОст = ТЗОстатки[0].НачОст;
		КонОст = ТЗОстатки[ТЗОстатки.Количество() - 1].КонОст;
		НачОстТары = ТЗОстатки[0].НачОстТары;
		КонОстТары = ТЗОстатки[ТЗОстатки.Количество() - 1].КонОстТары;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокНачала");
	ОбластьМакета.Параметры.ДатаНачала = "Остаток на " + Формат(ДатаНач, "ДЛФ=Д");
	ОбластьМакета.Параметры.НачСтоимостьВсего = ОбщегоНазначения.ФорматСумм(НачОст);
	ОбластьМакета.Параметры.НачСтоимостьТара = ОбщегоНазначения.ФорматСумм(НачОстТары);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Приход");
	мТабДок.Вывести(ОбластьМакета);

	ТЗПриходы = ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("ПризнакПрихода", 0),
	            Новый Структура("ПризнакПрихода", ВидСравнения.НеРавно)).Выгрузить();

	ТЗПриходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаПрихода Из ТЗПриходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаПрихода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаПрихода.Док);
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначения.ФорматСумм(СтрокаПрихода.Приход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначения.ФорматСумм(СтрокаПрихода.ПриходТары);
		мТабДок.Вывести(ОбластьМакета);
	КонецЦикла;

	Приход = ТЗПриходы.Итог("Приход");
	ПриходТары = ТЗПриходы.Итог("ПриходТары");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПриход");
	ОбластьМакета.Параметры.ПрихСтоимостьВсего = ОбщегоНазначения.ФорматСумм(Приход);
	ОбластьМакета.Параметры.ПрихСтоимостьТара = ОбщегоНазначения.ФорматСумм(ПриходТары);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоПриход");
	ОбластьМакета.Параметры.ПриходСОстатком = ОбщегоНазначения.ФорматСумм(Приход + НачОст);
	ОбластьМакета.Параметры.ПриходСОстаткомТара = ОбщегоНазначения.ФорматСумм(ПриходТары + НачОстТары);
	мТабДок.Вывести(ОбластьМакета);

	мТабДок.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета = Макет.ПолучитьОбласть("Расход");
	мТабДок.Вывести(ОбластьМакета);

	ТЗРасходы = ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("ПризнакРасхода", 0),
	            Новый Структура("ПризнакРасхода", ВидСравнения.НеРавно)).Выгрузить();

	ТЗРасходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаРасхода Из ТЗРасходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаРасхода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаРасхода.Док);
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначения.ФорматСумм(СтрокаРасхода.Расход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначения.ФорматСумм(СтрокаРасхода.РасходТары);
		мТабДок.Вывести(ОбластьМакета);
	КонецЦикла;

	Расход = ТЗРасходы.Итог("Расход");
	РасходТары = ТЗРасходы.Итог("РасходТары");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРасход");
	ОбластьМакета.Параметры.РасхСтоимостьВсего = ОбщегоНазначения.ФорматСумм(Расход);
	ОбластьМакета.Параметры.РасхСтоимостьТара = ОбщегоНазначения.ФорматСумм(РасходТары);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокКонец");
	ОбластьМакета.Параметры.ДатаКонца = "Остаток на " + Формат(ДатаКон, "ДЛФ=Д");
	ОбластьМакета.Параметры.КонСтоимостьВсего = ОбщегоНазначения.ФорматСумм(КонОст);
	ОбластьМакета.Параметры.КонСтоимостьТара = ОбщегоНазначения.ФорматСумм(КонОстТары);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	мТабДок.Вывести(ОбластьМакета);

	мТабДок.ПовторятьПриПечатиСтроки = ПовторятьПриПечатиСтроки;

	НомерОтчета = НомерОтчета + 1;

КонецПроцедуры // ОбновитьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Нажатие" кнопки "НастройкаПериода".
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));

	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Обработчик события "Нажатие" кнопки "Сформировать".
//
Процедура КоманднаяПанель1Сформировать(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // КоманднаяПанель1Сформировать()

Процедура ПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = глЗначениеПеременной("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		СкладПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		Если ЗначениеЗаполнено(СкладПоУмолчанию) И 
			(НЕ СкладПоУмолчанию.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
			
			Склад = СкладПоУмолчанию;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,Элемент,);
	
	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.Оптовый;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.НачальноеЗначениеВыбора												 = Склад;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

