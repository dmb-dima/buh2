#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт; 

// Настройка периода
Перем НП Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураСвязиПоказателейИИзмерений Экспорт; // содержит связь показателей и измерений

Перем мМассивШиринКолонок Экспорт; // массив ширин колонок табличного документа для сохранения между формированиями отчета

Перем мИсходныйМакетОтчета; // исходный макет, используемый для отчета. По умолчанию "Макет", но может быть переопределен

Перем мНазваниеОтчета Экспорт; // название отчета

Перем мВыбиратьИмяРегистра Экспорт; // признак выбора (изменения) имени регистра (вида отчета)

Перем мВыбиратьИспользованиеСвойств Экспорт; // признак выбора (изменения) флажка использования свойств и категорий

Перем СтруктураФорматаПолей Экспорт; // хранит формат полей примитивных типов

Перем мСтруктураДляОтбораПоКатегориям Экспорт; // предназначена для связи отборов Построителя с категориями из соединяемых таблиц

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Выполняет настройку отчета по умолчанию для заданного регистра накопления.
//
// Параметры: 
//	ИмяРегистра   - строка, имя регистра накопления
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мТаблицаПоказатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;

	Показатели.Очистить();

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 

	Если ПустаяСтрока(ИмяРегистра) Тогда 
		Возврат 
	КонецЕсли;

	УправлениеОтчетами.ЗаполнитьНачальныеНастройкиПоМетаданнымРегистра(СтруктураПредставлениеПолей, МассивОтбора, ЭтотОбъект, "ОстаткиИОбороты");

	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 

		// Расшифровка по регистратору, если его еще нет
		Если ПостроительОтчета.ДоступныеПоля.Найти("Регистратор")<>Неопределено Тогда

			Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор")=Неопределено Тогда

				СписокВыбора.Добавить(0, "По документам движения");

			КонецЕсли; 

		КонецЕсли;

		Если СписокВыбора.Количество()>0 Тогда

			Выбор = СписокВыбора.ВыбратьЭлемент("Выберите способ расшифровки", СписокВыбора[СписокВыбора.Количество()-1]);

		Иначе

			Выбор = Неопределено;

		КонецЕсли; 

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// Настройка отчета
		Отчет = Отчеты[ЭтотОтчет.Метаданные().Имя].Создать();
		Параметры = Новый Соответствие;
		
		// Поместим в параметры исходную расшифровку
		Для Каждого ЭлементРасшифровки Из Расшифровка Цикл
			
			Параметры.Вставить(ЭлементРасшифровки.Ключ, ЭлементРасшифровки.Значение);
			
		КонецЦикла;
		
		Параметры.Вставить("ИмяРегистра", ИмяРегистра);
		Параметры.Вставить("ДатаНач", ДатаНач);
		Параметры.Вставить("ДатаКон", ДатаКон);
		
		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ПоказыватьЗаголовок",     ПоказыватьЗаголовок);
		Параметры.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
		Параметры.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
		Параметры.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
		Параметры.Вставить("РаскрашиватьИзмерения",   РаскрашиватьИзмерения);

		// Перенос табличной части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");
		ТабОтбор.Индексы.Добавить("Имя");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;


		// Текущий отчет с детальными записями по документам
		Если Выбор.Значение = 0 Тогда
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();

			Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");

			Форма.ОбновитьОтчет();

		Иначе

			// Текущий отчет с дополнительным измерением

			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(Выбор.Значение, Выбор.Значение);

			Форма.ОбновитьОтчет();
		КонецЕсли;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляОсновногоРеквизита(УниверсальныйОтчет) Экспорт
	РеквизитыЭтогоОбъекта = ЭтотОбъект.Метаданные().Реквизиты;
	Для каждого Реквизит из РеквизитыЭтогоОбъекта Цикл
		ЭтотОбъект[Реквизит.Имя] = УниверсальныйОтчет[Реквизит.Имя];
	КонецЦикла;
	СтруктураФорматаПолей.Вставить("Период", "ДЛФ=D");
	
	// Все возможные показатели
	мТаблицаПоказатели = УниверсальныйОтчет.мТаблицаПоказатели; 
	
	// Настройка периода
	НП = УниверсальныйОтчет.НП;
	
	// Соответствия, содержащая назначения свойств и категорий именам
	мСоответствиеНазначений = УниверсальныйОтчет.мСоответствиеНазначений;
	
	мСтруктураСвязиПоказателейИИзмерений = УниверсальныйОтчет.мСтруктураСвязиПоказателейИИзмерений; // содержит связь показателей и измерений
	
	мМассивШиринКолонок = УниверсальныйОтчет.мМассивШиринКолонок; // массив ширин колонок табличного документа для сохранения между формированиями отчета
	
	мНазваниеОтчета  = УниверсальныйОтчет.мНазваниеОтчета; // название отчета
	
	мВыбиратьИмяРегистра  = УниверсальныйОтчет.мВыбиратьИмяРегистра; // признак выбора (изменения) имени регистра (вида отчета)
	
	мВыбиратьИспользованиеСвойств = УниверсальныйОтчет.мВыбиратьИспользованиеСвойств; // признак выбора (изменения) флажка использования свойств и категорий
	
	СтруктураФорматаПолей  = УниверсальныйОтчет.СтруктураФорматаПолей; // хранит формат полей примитивных типов
	
	мСтруктураДляОтбораПоКатегориям  = УниверсальныйОтчет.мСтруктураДляОтбораПоКатегориям; // предназначена для связи отборов Построителя с категориями из соединяемых таблиц
	
	УниверсальныйОтчет = ЭтотОбъект;
КонецПРоцедуры

// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПоляВОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	ИмяРегистра = Параметры["ИмяРегистра"];
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	// Настраиваем по умолчанию
	ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
	
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	// Прочие свойства
	ПоказыватьЗаголовок        = Параметры["ПоказыватьЗаголовок"];
	ВыводитьПоказателиВСтроку  = Параметры["ВыводитьПоказателиВСтроку"];
	ВыводитьИтогиПоВсемУровням = Параметры["ВыводитьИтогиПоВсемУровням"];
	ВыводитьДополнительныеПоляВОтдельнойКолонке = Параметры["ВыводитьДополнительныеПоляВОтдельнойКолонке"];
	РаскрашиватьИзмерения      = Параметры["РаскрашиватьИзмерения"];
	
	Если НЕ (Параметры["ЗаполнитьПоУмолчанию"] = Истина) Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Имя = ПостроительОтчета.Отбор[Инд].Имя Тогда					
					ПостроительОтчета.Отбор[Инд].ВидСравнения = Строка.ВидСравнения;
					ПостроительОтчета.Отбор[Инд].Использование = Истина;
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];					
				КонецЕсли;
				
			КонецЦикла; 			
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Имя);				
				ПостроительОтчета.Отбор[Инд].ВидСравнения = Строка.ВидСравнения;
				ПостроительОтчета.Отбор[Инд].Использование = Истина;
				
				//ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				
			КонецЕсли; 
			
			Если Строка.Значение <> Null Тогда				
				ЭлементОтбора.Значение = Строка.Значение;
			КонецЕсли;
			Если Строка.ЗначениеС <> Null Тогда				
				ЭлементОтбора.ЗначениеС = Строка.ЗначениеС;
			КонецЕсли;
			Если Строка.ЗначениеПо <> Null Тогда				
				ЭлементОтбора.ЗначениеПо = Строка.ЗначениеПо;
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

// Возвращает основную форму отчета
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   основная форма отчета
//
Функция ПолучитьОсновнуюФорму() Экспорт

	Возврат ПолучитьФорму();

КонецФункции // ПолучитьОсновнуюФорму()

// Добавляет в структуру общие для всех отчетов параметры настройки
//
// Параметры:
//	Нет.
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок) Экспорт
	
	Если ТипЗнч(СтруктураНастроек)<>Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели", Показатели.Выгрузить());
	СтруктураНастроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураНастроек.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
	СтруктураНастроек.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	СтруктураНастроек.Вставить("ЗаголовокПомечен", ПоказыватьЗаголовок);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()()

// Заполняет из структуры настроек общие параметры отчетов
//
// Параметры:
//	СтруктураСНастройками - структура,
//	ПоказыватьЗаголовок - булево, признак вывода заголовка.
//	Отчет - ОтчетОбъект, который вызвал процедуру. По умолчанию - общий отчет. Используется для доступа к его процедурам
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок, Отчет = Неопределено) Экспорт
	Перем ТабПоказатели;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если отчет, вызвавший процедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;
	
	
	ИмяРегистраДо = ИмяРегистра;
	
	СтруктураСНастройками.Свойство("ИмяРегистра", ИмяРегистра);
	
	// Заполнение нач. настроек, если поменялся один из параметров, определяющих начальный вид запроса
	Если
		НЕ (
		ИмяРегистраДо = ИмяРегистра 
		) Тогда
		
		Отчет.ЗаполнитьНачальныеНастройки();
	КонецЕсли;
	
	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("Показатели", ТабПоказатели);
	Если ТипЗнч(ТабПоказатели) = Тип("ТаблицаЗначений") Тогда
		Показатели.Загрузить(ТабПоказатели);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураСНастройками.Свойство("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
	СтруктураСНастройками.Свойство("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
	СтруктураСНастройками.Свойство("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	СтруктураСНастройками.Свойство("ЗаголовокПомечен", ПоказыватьЗаголовок);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки)()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
// 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь,  ЕстьОшибки = Ложь)	Экспорт

    // Проверка на пустые значения
	Если ПустаяСтрока(ПостроительОтчета.Текст) Тогда
		
		Предупреждение("Не определен запрос отчета!");
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли; 

	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		ЕстьОшибки = Истина;
		возврат;
	КонецЕсли;

	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		мМассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=2 По ДокументРезультат.ШиринаТаблицы Цикл
				мМассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли; 
	
	Если Показатели.Количество() > 0 Тогда
		
		ЕстьПоказатели = Ложь;
		
		Для Каждого Показатель Из Показатели Цикл
			
			Если Показатель.Использование Тогда
				
				ЕстьПоказатели = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьПоказатели Тогда
			
			Предупреждение("Не выбраны показатели!", 30);
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Добавим показатели в выбранные поля
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "НачальныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "КонечныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "Приход", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "Расход", ПостроительОтчета);
		КонецЕсли;
	КонецЦикла;

	УправлениеОтчетами.ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	//Добавим показатели в выбранные поля
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля.Найти(Показатель.Имя + "НачальныйОстаток"));
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля.Найти(Показатель.Имя + "КонечныйОстаток"));
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля.Найти(Показатель.Имя + "Приход"));
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля.Найти(Показатель.Имя + "Расход"));
		КонецЕсли;
	КонецЦикла;

	// Признак вывода детальных записей: в кросс-таблице не выводятся, в списке - в зависимости от связи с измерениями
	ВыводитьДетальныеЗаписи = Ложь;
	
	
	// Если это отчет-список, то нужно определить, выводить ли детальные записи
	МассивИндексовНезависимыхВыбранныхПолей = Новый Массив;
	
	// Определим, нужно ли выводить детальные записи:
	// Если выбранное поле подчинено измерению, то выводим рядом с измерением,
	// Если выбранное поле не связано ни с обним измерением, то выводим его в детальных записях
	
	ЕстьНесвязанныеПоля = Ложь;
	
	Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
		
		НайденаСвязь = Ложь;
		
		Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
			
			// Если поле совпадает с измерением, то считаем, что его нужно выводить в детальных записях
			Если Измерение.ПутьКДанным = ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным Тогда
				Прервать;
			КонецЕсли;
			
			// Если поле - подчиненное
			Если Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
				
				НайденаСвязь = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ НайденаСвязь Тогда
			
			МассивИндексовНезависимыхВыбранныхПолей.Добавить(Инд);
			
		КонецЕсли;
		
		ЕстьНесвязанныеПоля  = ЕстьНесвязанныеПоля ИЛИ НЕ НайденаСвязь;
	КонецЦикла;
	
	// Детальные записи выводим, если есть несвязанные выбранные поля
	ВыводитьДетальныеЗаписи = ЕстьНесвязанныеПоля;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);

	Если ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон)); // виртуальная таблица генерируется на дату включая границу
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;

	// Макет по умолчанию может быть переопределен
	Если мИсходныйМакетОтчета = Неопределено Тогда
		МакетОтчета = ПолучитьМакет("Макет");
	Иначе
		МакетОтчета = мИсходныйМакетОтчета;
	КонецЕсли; 

	// Оформление измерений
	//МассивОформлениеИзмерений = Новый Массив;
	ОформлениеДетальныхЗаписей = Неопределено;

	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый ТаблицаЗначений;
	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = МакетОтчета.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;
							
		КонецЦикла;

		Если ВыводитьДетальныеЗаписи Тогда

			// Удаляем последний цвет из оформлений
			Если ОформлениеСтроки.Количество()>0 Тогда
				ОформлениеСтроки.Удалить(ОформлениеСтроки.ВГраница());
			КонецЕсли;
			Если ОформлениеСтрокиИерархии.Количество()>0 Тогда
				ОформлениеСтрокиИерархии.Удалить(ОформлениеСтрокиИерархии.ВГраница());
			КонецЕсли;

			ТабДокОформлениеДеталей = МакетОтчета.ПолучитьОбласть("ОформлениеДеталей");

		КонецЕсли; 

	КонецЕсли; 

	Если ПостроительОтчета.ДоступныеПоля.Найти("Периодичность") <> Неопределено Тогда
		Периодичность=Неопределено;
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодГод")<>Неопределено Тогда
			Периодичность = 9;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодПолугодие")<>Неопределено Тогда
			Периодичность = 8;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодКвартал")<>Неопределено Тогда
			Периодичность = 7;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодМесяц")<>Неопределено Тогда
			Периодичность = 6;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДекада")<>Неопределено Тогда
			Периодичность = 5;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодНеделя")<>Неопределено Тогда
			Периодичность = 4;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДень")<>Неопределено Тогда
			Периодичность = 3;
		КонецЕсли; 

		Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор")<>Неопределено Тогда
			Периодичность = 2;
		КонецЕсли; 

		НайденаПериодичность=Ложь;

		Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

			ПолеОтбора = ПостроительОтчета.Отбор[Инд];

			Если Найти(ПолеОтбора.Представление, "Периодичность")>0 Тогда
				НайденаПериодичность=Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если Периодичность<>Неопределено Тогда
			Если Не НайденаПериодичность Тогда
				ПолеОтбора = ПостроительОтчета.Отбор.Добавить("Периодичность");

			Иначе

				ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ПолеОтбора));

				ПолеОтбора = ПостроительОтчета.Отбор.Добавить("Периодичность");

			КонецЕсли; 

			ПолеОтбора.Значение = Периодичность;
			ПолеОтбора.Использование = (Периодичность<>Неопределено);
		КонецЕсли;

	КонецЕсли;

	// Расшифровки
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;

	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;
	//ПостроительОтчета.АвтоДетальныеЗаписи = Истина;

    // Добавление необходимого количества строк или колонок для вывода показателей 
	ОбластьСтрока = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");

	ОбластьКолонкаНачальныйОстаток = МакетОтчета.Область("НачальныйОстаток");
	ОбластьКолонкаКонечныйОстаток = МакетОтчета.Область("КонечныйОстаток");
	ОбластьКолонкаПриход = МакетОтчета.Область("Приход");
	ОбластьКолонкаРасход = МакетОтчета.Область("Расход");

	КоличествоПоказателей = 0;
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование = Истина Тогда

			Если КоличествоПоказателей>0 Тогда

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.ВставитьОбласть(ОбластьОбщиеИтоги,     ОбластьОбщиеИтоги,     ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьДетали,         ОбластьДетали,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрока,         ОбластьСтрока,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрокаИерархии, ОбластьСтрокаИерархии, ТипСмещенияТабличногоДокумента.ПоВертикали);

					ОбластьСтрока = МакетОтчета.Область("Строка");
					ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
					ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
					ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");
				Иначе
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаКонечныйОстаток, ОбластьКолонкаКонечныйОстаток, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаРасход,          ОбластьКолонкаРасход,          ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаПриход,          ОбластьКолонкаПриход,          ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаНачальныйОстаток,ОбластьКолонкаНачальныйОстаток,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

					ОбластьКолонкаНачальныйОстаток = МакетОтчета.Область("НачальныйОстаток");
					ОбластьКолонкаКонечныйОстаток = МакетОтчета.Область("КонечныйОстаток");
					ОбластьКолонкаПриход = МакетОтчета.Область("Приход");
					ОбластьКолонкаРасход = МакетОтчета.Область("Расход");
					
				КонецЕсли;
			КонецЕсли;

			КоличествоПоказателей = КоличествоПоказателей+1;
		КонецЕсли;
	КонецЦикла;

    // Добавление необходимого количества колонок для вывода выбранных полей
    ОбластьПоле = МакетОтчета.Область("Поле");

	КоличествоКолонок = 1;

	ВыводДопРеквизитов = Ложь;
	
	// Либо выводятся детальные записи, либо доп. поля в отдельной колонке
	Если ВыводитьДетальныеЗаписи Тогда
		ВыводитьДополнительныеПоляВОтдельнойКолонке = Ложь;
	КонецЕсли;

	Если ВыводитьДетальныеЗаписи Тогда

		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

		Иначе

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицы");

		КонецЕсли; 

		Для Сч=1 По МассивИндексовНезависимыхВыбранныхПолей.Количество()-1 Цикл  // на 1(2) меньше количества полей - одно уже есть
			
			МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
			КоличествоКолонок = КоличествоКолонок+1;
			
			ОбластьПоле = МакетОтчета.Область("Поле");
		КонецЦикла;

		// Все поля, которые не подчинены группировкам, будут колонками детальных записей
		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			// В заголовке колонки детальной записи оставим только название последнего поля
			ЗаголовокКолонки = ПостроительОтчета.ВыбранныеПоля[Инд].Представление;
			
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
			
			Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
				ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
			КонецЦикла;
			
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
			
			МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Низ,1+1+Сч).Текст = ЗаголовокКолонки;
			
			Сч = Сч+1;
		КонецЦикла; 

		Если ВыводитьПоказателиВСтроку Тогда
			МакетОтчета.Область(ОбластьДетали.Верх,1+1,
								ОбластьДетали.Верх,1+КоличествоКолонок+4*КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;


		Если ВыводитьПоказателиВСтроку Тогда
			МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1,
								ОбластьДетали.Верх,1+КоличествоКолонок+4*КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;

		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			Поле = ПостроительОтчета.ВыбранныеПоля[Инд];

			ФорматПоляДетальнойЗаписи = "";
			СтруктураФорматаПолей.Свойство(Поле.Имя, ФорматПоляДетальнойЗаписи);
			// Определим, можно ли использовать представление поля. Для этого попытаемся разобрать автоматический макет, область "Детали" построителя
			Попытка
				Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть("Детали").Параметры[Поле.Имя+"Представление"];
				ЕстьПредставление = Истина;
			Исключение
				ЕстьПредставление = Ложь;
			КонецПопытки;
			
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Параметр            = Поле.Имя + ?(ЕстьПредставление, "Представление", "");
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).ПараметрРасшифровки = Поле.Имя;
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Формат              = ФорматПоляДетальнойЗаписи;
			
			Сч = Сч+1;
		КонецЦикла;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+1,
					                    ОбластьДетали.Верх+Кол,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				Иначе
					МакетОтчета.Область(ОбластьДетали.Верх,1+1,
					                    ОбластьДетали.Верх,1+КоличествоКолонок+4*КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				КонецЕсли;

				Если Кол=0 Тогда
					Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

						Если НЕ ВыводитьПоказателиВСтроку Тогда
							Если КоличествоПоказателей>1 Тогда
								МакетОтчета.Область(ОбластьДетали.Верх,1+Инд, 
            								ОбластьДетали.Верх+КоличествоПоказателей-1, 1+Инд).Объединить();
							КонецЕсли; 
						КонецЕсли; 

					КонецЦикла;
				КонецЕсли;

				Если НЕ ВыводитьПоказателиВСтроку Тогда

					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+2).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+3).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+4).Параметр = ИмяПоказателя+"КонечныйОстаток";
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1,
					                    ОбластьДетали.Верх+Кол,1+КоличествоКолонок+4).Формат= ФорматПоказателя;
				Иначе
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"КонечныйОстаток";
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		Если НЕ ВыводитьПоказателиВСтроку Тогда
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх+Кол-1);
		Иначе
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
		КонецЕсли;
	Иначе

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			// Определим, нужна ли дополнительная колонка для реквизитов измерений
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

					Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
						И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда

						ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;;

						ВыводДопРеквизитов = Истина;
						
						МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
						КоличествоКолонок = КоличествоКолонок+1;
						ОбластьПоле = МакетОтчета.Область("Поле");

					КонецЕсли;

				КонецЦикла;
			КонецЦикла;

		КонецЕсли; 

	КонецЕсли; 

	// Если выводятся только итоги или количество колонок =1, увеличим ширину первой колонки 
	Если НЕ ВыводитьДетальныеЗаписи ИЛИ КоличествоКолонок=1 Тогда
		//ОбластьПоле.ШиринаКолонки = ОбластьПоле.ШиринаКолонки*2;
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли; 


	// Формирование макета заголовка отчета
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).Очистить(Истина);
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).ПоВыделеннымКолонкам = Истина;
	
	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");

	Заголовок = мНазваниеОтчета;
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	СписокКолонок = "";
	СписокПолейДетальныхЗаписей = "";
	Для Сч=0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

		Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			Если ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным <> ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным
				И Найти(ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным, ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) >0 Тогда
		
				СписокКолонок = СписокКолонок +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;
			КонецЕсли;

		КонецЦикла;
		Если ВыводитьДетальныеЗаписи Тогда
		
			СписокПолейДетальныхЗаписей = СписокПолейДетальныхЗаписей +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;
		
		КонецЕсли; 
		
	КонецЦикла;

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = Заголовок;
	ЗаголовокОтчета.Параметры.Период     = "Период: "+ОписаниеПериода;

	СтрокаГруппировок = УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	Если НЕ ПустаяСтрока(СтрокаГруппировок) Тогда
		СтрокаГруппировок = "Группировки строк: " + СтрокаГруппировок;
	КОнецЕсли;
	ЗаголовокОтчета.Параметры.Измерения  = СтрокаГруппировок;

	ЗаголовокОтчета.Параметры.Показатели = "Показатели: " +Сред(СписокПоказателей,2);
	
	ЗаголовокОтчета.Параметры.Колонки = 
	?((ПостроительОтчета.ИзмеренияСтроки.Количество()>0 И Не ПустаяСтрока(СписокКолонок)), "Дополнительные поля: "+ Сред(СписокКолонок, 2)+" ", "") 
	+ ?(ВыводитьДетальныеЗаписи, "Поля детальных записей: "+Сред(СписокПолейДетальныхЗаписей, 2),"");
	
	СтрокаОтборов = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		СтрокаОтборов = "Отбор: " + СтрокаОтборов;
	КонецЕсли; 
	ЗаголовокОтчета.Параметры.Отбор      = СтрокаОтборов;
	
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		ДокументРезультат.Вывести(ЗаголовокОтчета);
		ДокументРезультат.ТекущаяОбласть = ДокументРезультат.Область(1,1);

		Возврат;
	
	КонецЕсли; 

	// Назначение имен колонкам шапки
	ОбластьШапкаТаблицы = МакетОтчета.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");
	
	Если ВыводитьПоказателиВСтроку Тогда

		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+0*КоличествоПоказателей, ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1*КоличествоПоказателей).Объединить();
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+1*КоличествоПоказателей, ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+2*КоличествоПоказателей).Объединить();
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+2*КоличествоПоказателей, ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+3*КоличествоПоказателей).Объединить();
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+3*КоличествоПоказателей, ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+4*КоличествоПоказателей).Объединить();
		
		Кол =0 ;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование = Истина Тогда
				Стр = мТаблицаПоказатели.Найти(Показатель.Имя);
				Если Стр <> Неопределено Тогда
					Представление = Стр.ПредставлениеПоля;
				Иначе
					Представление = Показатель.Имя;
				КонецЕсли;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Текст = Представление;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Текст = Представление;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Текст = Представление;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Текст = Представление;
				Кол=Кол+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;
	
	Если НЕ ВыводитьИтогиПоВсемУровням Тогда

		СтруктураФлагов = Новый Структура;

		СтруктураОтборНаРавенствоПоСвязанномуИзмерению = Новый Структура;

		// Перенесем отбор в таблицу для поиска
		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");
		ТабОтбор.Индексы.Добавить("Имя");

		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 
		
		Для Каждого Показатель Из Показатели Цикл

			// Сбрасываем флаги
			СтруктураФлагов.Вставить(Показатель.Имя, Ложь);
			СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Ложь);

			// Поищем, есть ли отбор на равенство по связанному измерению. Если есть, то показатель можно выводить
			// по всем уровням.
			СвязанныеИзмерения = Неопределено;
			Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда

				Если СвязанныеИзмерения <> Неопределено Тогда
					
					Для каждого СвязанноеИзмерение Из СвязанныеИзмерения Цикл
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Имя",СвязанноеИзмерение.Ключ);
						
						НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);
						
						Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл
							
							// Не добавляем измерения по отборам на равенство - в них будет один элемент
							Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
								
								СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
								Прервать;
								
								// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
								// или плана видов характеристик - в них будет один элемент
							ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
								ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
								
								Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
									ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;
									
									МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
									
									Если МетаданныеОбъекта<>Неопределено Тогда
										Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
											ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда
											
											Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда
												
												// Этот отбор тоже можно считать отбором на равенство
												СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
												Прервать;
												
											КонецЕсли; 
										КонецЕсли; 
									КонецЕсли; 
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтруктураОтборНаРавенствоПоСвязанномуИзмерению[Показатель.Имя] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	ИспользоватьОформление = РаскрашиватьИзмерения;
	
	// Если Дополнительные поля выводятся в отдельных колонках, нужно объединить их колонки
	Если НЕ ВыводитьПоказателиВСтроку 
		И ВыводДопРеквизитов И КоличествоКолонок>1 Тогда // колонки с дополнительными реквизитом
		
		Для Сч = 1 По КоличествоКолонок-1 Цикл
			МакетОтчета.Область(ОбластьСтрока.Верх,1+1+Сч, 
			ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+1+Сч).Объединить();
		КонецЦикла;
		
	КонецЕсли;
	
	СписокПроверенныхВыбранныхПолей = Новый СписокЗначений;

	// Зададим макет для каждого измерения строки. Макет должен иметь соответствующие параметры, 
	// отформатирован и раскрашен
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

		Если ОформлениеСтроки.Количество()>0 Тогда
			Индекс = Сдвиг+((Сч) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Сч)/(ОформлениеСтроки.Количество()-Сдвиг)));
		Иначе
			ИспользоватьОформление = Ложь;
		КонецЕсли;;

		ФорматПоля = "";
		СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоля);
		
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,
							ОбластьСтрока.Верх,1+КоличествоКолонок+4*?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1)).Заполнение = 
							ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		// Первая колонка имеет для элементов стандартную расшифровку
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;
		
		// Как называется поле для вывода измерения, узнаем из макета по-умолчанию
		Попытка
			Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[Измерение.Имя+"Представление"];
			ИспользоватьПредставлениеИзмерения = Истина;
		Исключение
			ИспользоватьПредставлениеИзмерения = Ложь;
		КонецПопытки;

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Формат= ФорматПоля;
		КонецЕсли;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ = Сч;

		Если ИспользоватьОформление Тогда

			Область = МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+4*?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1));
								
			//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
			Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
			//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
			//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;
		КонецЕсли;


		Если ИспользоватьОформление Тогда
			Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
										  ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку,4*КоличествоПоказателей,4));
			//Область.Шрифт      = ОформлениеСтрокиИерархии[Индекс].Шрифт;
			Область.ЦветФона   = ОформлениеСтрокиИерархии[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтрокиИерархии[Индекс].ЦветТекста;
			//Область.Узор       = ОформлениеСтрокиИерархии[Индекс].Узор;
			//Область.ЦветУзора  = ОформлениеСтрокиИерархии[Индекс].ЦветУзора;
		КонецЕсли;

		// Объединение области измерения, если выводится несколько показателей, или колонок детальных записей
		Если ВыводитьДетальныеЗаписи Тогда
			Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх,1+КоличествоКолонок).Объединить();
				КонецЕсли; 

			КонецЕсли;
		Иначе
			Если КоличествоПоказателей>1 Тогда
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+1).Объединить();
				КонецЕсли;

			КонецЕсли; 
		КонецЕсли;

		// Вывод дополнительных реквизитов рядом со значением измерения
		Если ВыводДопРеквизитов Тогда
			
			Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
				
				Если СписокПроверенныхВыбранныхПолей.НайтиПоЗначению(ПостроительОтчета.ВыбранныеПоля[Инд]) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Попытка

					Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
					СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);

					ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
					
					ФорматПоляРеквизита = "";
					СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоляРеквизита);
					
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Параметр = ИмяПараметра;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Формат = ФорматПоляРеквизита;

				Исключение // Если доп.колонки - есть, а поле не связано с измерением, то очищаем
					Если Инд<(КоличествоКолонок-1) Тогда
						МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Параметр = Неопределено;
						МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Формат = Неопределено;
					КОнецЕсли;
				КонецПопытки;
					
				ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
				
				ФорматПоляРеквизита = "";
				СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоляРеквизита);
				
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Параметр = ИмяПараметра;
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1+Инд).Формат = ФорматПоляРеквизита;
					
			КонецЦикла;
		Иначе
		
			Шаблон = "["+Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "") +"]";

			ВсегоВЯчейке=1;
			Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

				Если СписокПроверенныхВыбранныхПолей.НайтиПоЗначению(ПостроительОтчета.ВыбранныеПоля[Инд]) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Если Показатели.Найти(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, "Имя")<> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Если поле совпадает с измерением, выводим его только в строке детальных записей
				Если Измерение.ПутьКДанным = ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным Тогда
					СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
				Иначе
					Попытка
						
						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
						
						СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
						
						Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
						ВсегоВЯчейке = ВсегоВЯчейке+1;
						
					Исключение 
						
						Попытка
							
							Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"Представление"];
							
							СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
							
							Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"Представление]";
							ВсегоВЯчейке = ВсегоВЯчейке+1;
						Исключение
							
						КонецПопытки;
						
					КонецПопытки;
				КонецЕсли;

			КонецЦикла;

			Если ВсегоВЯчейке>1 Тогда
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон; 
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Текст = Шаблон;

			Иначе // Выводим через параметр
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр; 
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Формат= ФорматПоля;
			КонецЕсли; 

		КонецЕсли; 

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
		                    ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+
							?(ВыводитьПоказателиВСтроку,4*КоличествоПоказателей,4)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Отступ = Сч;

		Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
			Если Не ВыводитьПоказателиВСтроку Тогда
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
			Иначе
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
			КонецЕсли;
		КонецЕсли; 

		Кол = 0;
		
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;


				// Ограничение вывода показателей по уровням группировки задается значением ВыводитьИтогиПоВсемУровням
				// По умолчанию, если ВыводитьИтогиПоВсемУровням=Ложь или для показателя не задан ключ, то он выводится.
				ВыводитьПоказатель = Истина;
				ВыводитьПоказательПоИерархии = Истина;
				
				Если НЕ ВыводитьИтогиПоВсемУровням Тогда

					СвязанныеИзмерения = Неопределено;
					Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда

						Если СвязанныеИзмерения <> Неопределено Тогда
							
							// Поищем в структуре отбора на равенство по связанному измерению
							ВыводитьПоВсем = Ложь;
							СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Свойство(Показатель.Имя, ВыводитьПоВсем);
							
							// Если нет связи, или отбор
							Если СвязанныеИзмерения.Количество()=0 
								ИЛИ ВыводитьПоВсем = Истина Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Истина;
								
								// Если это связанное измерение
							ИначеЕсли СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Ложь;
								
							Иначе
								ВыводитьПоказательПоИерархии = СтруктураФлагов[Показатель.Имя];
							КонецЕсли;
							
							ВыводитьПоказатель = СтруктураФлагов[Показатель.Имя];
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
									    ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
									    ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					Если ИспользоватьОформление Тогда

						// Устанавливаем оформление для строк показателей
						Область = МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
													ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;

						Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
													ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+4);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;
					КонецЕсли;
				КонецЕсли;

				
				Если Не ВыводитьПоказателиВСтроку Тогда
					
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+2).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+3).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4).Параметр = ИмяПоказателя+"КонечныйОстаток";
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1,
					                    ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4).ПараметрРасшифровки = "Расшифровка";

					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1,
					                    ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
					
						МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1,
						                    ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+4).Очистить(Истина);
					
					КонецЕсли; 
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"КонечныйОстаток";
					
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";

					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					
					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
						
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Очистить(Истина);
						
					КонецЕсли;
					
				КонецЕсли;

				Если Не ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+2).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+3).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+4).Параметр = ИмяПоказателя+"КонечныйОстаток";

					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1,
					                    ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+4).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1,
						                    ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+4).Очистить(Истина);
					КонецЕсли;
					
				Иначе
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"НачальныйОстаток";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Приход";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Расход";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"КонечныйОстаток";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Очистить(Истина);
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Очистить(Истина);
					КонецЕсли;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		Если Не ВыводитьПоказателиВСтроку Тогда
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх+Кол-1);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх+Кол-1);
		Иначе
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);
		КонецЕсли;

	КонецЦикла;

	// Формирование макета общих итогов
	МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1,
						ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+
						?(ВыводитьПоказателиВСтроку,4*КоличествоПоказателей,4)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

	Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
		Если Не ВыводитьПоказателиВСтроку Тогда
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, 
								ОбластьОбщиеИтоги.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
		Иначе
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, 
								ОбластьОбщиеИтоги.Верх, 1+КоличествоКолонок).Объединить();
		КонецЕсли;
	КонецЕсли; 
	
	Кол = 0;
	КолНеВыводимыхПоказателей = 0; // При ограничении НЕ ВыводитьИтогиПоВсемУровням

	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			
			ИмяПоказателя = Показатель.Имя;

			ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

			ВыводитьПоказатель = Истина;
			
			Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
				Если НЕ ВыводитьИтогиПоВсемУровням Тогда
					
					ВыводитьПоказатель = Ложь;

					// В общем итоге выводятся только показатели, по которым нет ограничений
					СвязанныеИзмерения = Неопределено;
					Если НЕ мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда

						Если СвязанныеИзмерения <> Неопределено Тогда
							
							Если СвязанныеИзмерения.Количество()=0 Тогда
								ВыводитьПоказатель = Истина;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ВыводитьИтогиПоВсемУровням Тогда

				СвязанныеИзмерения = Неопределено;
				Если мСтруктураСвязиПоказателейИИзмерений.Свойство(ИмяПоказателя, СвязанныеИзмерения) Тогда

					Если СвязанныеИзмерения <> Неопределено Тогда
						
						// Поищем в структуре отбора на равенство по связанному измерению
						ВыводитьПоВсем = Ложь;
						СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Свойство(ИмяПоказателя, ВыводитьПоВсем);
						
						// Если нет связи, или отбор
						Если СвязанныеИзмерения.Количество()=0 
							ИЛИ ВыводитьПоВсем = Истина Тогда
							
							ВыводитьОбщийИтог = Истина;
						Иначе
							ВыводитьОбщийИтог = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					ВыводитьОбщийИтог = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ВыводитьПоказателиВСтроку Тогда
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1,
				ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя+"НачальныйОстаток";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+2).Параметр = ИмяПоказателя+"Приход";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+3).Параметр = ИмяПоказателя+"Расход";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+4).Параметр = ИмяПоказателя+"КонечныйОстаток";

				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1,
				ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+4).Формат= ФорматПоказателя;

				Если НЕ ВыводитьИтогиПоВсемУровням И ВыводитьОбщийИтог = Ложь Тогда
					МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1,
										ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+4).Очистить(Истина);

					КолНеВыводимыхПоказателей = КолНеВыводимыхПоказателей+1;
				КонецЕсли;

			Иначе

				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"НачальныйОстаток";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Приход";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"Расход";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя+"КонечныйОстаток";
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
				
				Если НЕ ВыводитьИтогиПоВсемУровням И ВыводитьОбщийИтог = Ложь Тогда

					МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
					МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+1*КоличествоПоказателей+Кол).Очистить(Истина);
					МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+2*КоличествоПоказателей+Кол).Очистить(Истина);
					МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+3*КоличествоПоказателей+Кол).Очистить(Истина);

					КолНеВыводимыхПоказателей = КолНеВыводимыхПоказателей+1;
				КонецЕсли;
			КонецЕсли;
			Кол = Кол+1;
		КонецЕсли; 

	КонецЦикла; 

	Если НЕ ВыводитьПоказателиВСтроку И ВыводитьДетальныеЗаписи И ПостроительОтчета.ИзмеренияСтроки.Количество()=0 Тогда
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");

	ИначеЕсли ВыводитьПоказателиВСтроку ИЛИ ВыводитьДетальныеЗаписи Тогда
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицыОбщая");
	Иначе
		
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;

	Если Не ВыводитьПоказателиВСтроку Тогда
	
		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх+Кол-1);
	
	Иначе
	
		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх);
	
	КонецЕсли; 

	// Если в результате ограничения вывода итогов по уровням в общем итоге не выводится ни одного показателя, то ...
	Если НЕ ВыводитьИтогиПоВсемУровням И (КолНеВыводимыхПоказателей = КоличествоПоказателей) Тогда

		ПостроительОтчета.МакетОбщихИтогов.Область(1, ,ПостроительОтчета.МакетОбщихИтогов.ВысотаТаблицы).Видимость = Ложь;
	
	КонецЕсли; 

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

		// В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
		
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
		
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
		
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	ИначеЕсли НЕ ВыводитьДетальныеЗаписи Тогда
		МакетШапкиТаблицы.Область(2,1+1).Текст = "Общий итог";
	КонецЕсли; 
	
	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	// Объединение ячеек в шапке
	Если Не ВыводитьДетальныеЗаписи Тогда
		
		Если КоличествоКолонок>1 Тогда
			МакетШапкиТаблицы.Область(2, 1+1,
			?(ВыводитьПоказателиВСтроку, 3, 2), 1+КоличествоКолонок).Объединить();
		ИначеЕсли ВыводитьПоказателиВСтроку Тогда
			МакетШапкиТаблицы.Область(2, 1+1,3, 1+1).Объединить();
		КонецЕсли; 
		
	Иначе
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			Если КоличествоКолонок>1 Тогда
				МакетШапкиТаблицы.Область(2, 1+1,
				2, 1+КоличествоКолонок).Объединить();
			КонецЕсли; 

		ИначеЕсли ПостроительОтчета.ИзмеренияСтроки.Количество()=0 И ВыводитьПоказателиВСтроку Тогда

			Если КоличествоКолонок>1 Тогда
				Для Сч=1 По КоличествоКолонок Цикл
					МакетШапкиТаблицы.Область(2, 1+Сч,
					3, 1+Сч).Объединить();
				КонецЦикла;
			КонецЕсли; 

		КонецЕсли; 
	КонецЕсли;

	// Объединение ячеек "Начальный остаток", "Конечный остаток", "Приход", "Расход", если выводятся измерения и детальные записи
	Если ВыводитьДетальныеЗаписи И НЕ ВыводитьПоказателиВСтроку 
		И НЕ ПостроительОтчета.ИзмеренияСтроки.Количество()=0 Тогда
		
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+1,3, 1+КоличествоКолонок+1).Объединить();
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+2,3, 1+КоличествоКолонок+2).Объединить();
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+3,3, 1+КоличествоКолонок+3).Объединить();
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+4,3, 1+КоличествоКолонок+4).Объединить();
	КонецЕсли;

	// Шапка таблицы имеет внизу граница той же линией, что и вверху
	ШиринаТаблицы = 1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, 4*КоличествоПоказателей, 4);
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, 
	                          МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу =
	Новый Линия(
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, 
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);

	// Линия в заголовке таблицы, когда выводится несколько колонок
	Если КоличествоКолонок>1 И ВыводитьДетальныеЗаписи Тогда
		ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,0);
		ЛинияТонкаяЛиния = 
		Новый Линия(
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.ТипЛинии,
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.Толщина);

		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2+1, МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСлева = ЛинияТонкаяЛиния;
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2,   МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок-1).ГраницаСправа = ЛинияНетЛинии;
	КонецЕсли;

	// Назначим построителю сформированный макет шапки
	ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;

	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;

	//Добавим показатели в выбранные поля
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "НачальныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "КонечныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "Приход", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя + "Расход", ПостроительОтчета);
		КонецЕсли;
	КонецЦикла;

	Если ПостроительОтчета.ВыбранныеПоля.Количество() = 0 И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 И ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		// Выводить нечего, да еще и валится при этом, ругаясь на отсутствие SELECT
		Возврат;
	КонецЕсли; 
	
	// Вывод в макет

	ПостроительОтчета.Выполнить();

	ДокументРезультат.Очистить();

	ПостроительОтчета.Вывести(ДокументРезультат);

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ШиринаТаблицы+1);

	
	// Обводим таблицу той же линией, что и слева в шапке таблицы
	ЛинияГраницы = Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 
	                          2, 
							  ДокументРезультат.ВысотаТаблицы-1, 
							  ШиринаТаблицы).Обвести(ЛинияГраницы, ЛинияГраницы, ЛинияГраницы, ЛинияГраницы);

	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + ПостроительОтчета.МакетШапкиТаблицы.ВысотаТаблицы;

	// Восстановление ширин колонок
	Если ТипЗнч(мМассивШиринКолонок) = Тип("Массив") Тогда
		Если мМассивШиринКолонок.Количество() = ДокументРезультат.ШиринаТаблицы-1 Тогда
			Инд = 0;
			Для Каждого Элемент Из мМассивШиринКолонок Цикл
				ДокументРезультат.Область(,2+Инд, , 2+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОстаткиИОбороты "+мНазваниеОтчета;

	//попрячем показатели из доступных полей
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда

			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя + "НачальныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя + "КонечныйОстаток", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя + "Приход", ПостроительОтчета);
			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя + "Расход", ПостроительОтчета);

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

мТаблицаПоказатели  = Новый ТаблицаЗначений;
// Инициализация таблиц всех возможных показателей, группировок,  фильтров

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мМассивШиринКолонок = Новый Массив;

мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

мСоответствиеНазначений = Новый Соответствие;

мНазваниеОтчета = "";

мВыбиратьИмяРегистра = Истина;
мВыбиратьИспользованиеСвойств = Истина;

ПоказыватьЗаголовок = Истина;

СтруктураФорматаПолей = Новый Структура;
СтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
СтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = """"""Декада с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""");

#КонецЕсли