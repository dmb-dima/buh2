Перем ПутьМакета, УчетнаяПолитика, ДатаИзмененияУПпоНДС;
Перем ОбработкаУправленияПоследовательностью;
Перем КонтролироватьПоследовательностьПроведения;

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	ТиповыеОтчеты.НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
	ПроверитьПоследовательность();
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект) Тогда
		
		НачалоПериода = НачалоКвартала(ОбщегоНазначения.ПолучитьРабочуюДату());
		КонецПериода = КонецКвартала(ОбщегоНазначения.ПолучитьРабочуюДату());
		
		СтруктураОбщихПараметров = ВосстановитьЗначение("ОбщиеПараметрыОтчетовХозрасчетный");
		Если ТипЗнч(СтруктураОбщихПараметров) = Тип("Структура") Тогда
			
			
			СтруктураОбщихПараметров.Свойство("Организация", Организация);
			СтруктураОбщихПараметров.Свойство("НачалоПериода", НачалоПериода);
			СтруктураОбщихПараметров.Свойство("КонецПериода", КонецПериода);
			
			Если НачалоПериода = '00010101' тогда
				НачалоПериода = НачалоКвартала(ОбщегоНазначения.ПолучитьРабочуюДату());
			КонецЕсли;
			
			Если КонецПериода = '00010101' тогда
				КонецПериода = КонецКвартала(ОбщегоНазначения.ПолучитьРабочуюДату());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

Процедура ПриОткрытии()
	
	ТекущийМакет = "МакетКарты";
	ПутьМакета = "";
	
	УстановитьДоступность();
	ЗначениеПараметраОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	
	Если ЗначениеПараметраОрганизация <> Неопределено Тогда
		ЗначениеПараметраОрганизация.Значение = Организация;
		ЗначениеПараметраОрганизация.Использование = Истина;
	КонецЕсли;
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
	ПроверитьПоследовательность();
	ВывестиСхему();
		
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ПроверитьПоследовательность();
	
	ЗначениеПараметраОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	
	Если ЗначениеПараметраОрганизация <> Неопределено Тогда
		ЗначениеПараметраОрганизация.Значение = Организация;
		ЗначениеПараметраОрганизация.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПоследовательность()
	
	Если КонтролироватьПоследовательностьПроведения Тогда
		Если (Не ЗначениеЗаполнено(Организация)) или (Не ЗначениеЗаполнено(КонецПериода)) Тогда
			ЭлементыФормы.НадписьПоследовательность.Заголовок = "";
			Возврат;
		КонецЕсли;
		
		Если ОбработкаУправленияПоследовательностью = Неопределено Тогда
			ОбработкаУправленияПоследовательностью = Обработки.УправлениеПоследовательностями.Создать();				
		КонецЕсли;
		
		ЗначениеГраницы = Неопределено;
		Результат = ОбработкаУправленияПоследовательностью.ПроверитьПоследовательность(Организация, КонецДня(КонецПериода), ЗначениеГраницы);
		Если ЗначениеЗаполнено(ЗначениеГраницы) Тогда
			ЭлементыФормы.НадписьПоследовательность.ЦветТекста = ?(Результат, ЦветаСтиля.ТекстИнформационнойНадписи, Новый Цвет(255,0,0));
			ЭлементыФормы.НадписьПоследовательность.Заголовок = ?(Результат, "Документы проведены в хронологической последовательности", "Нарушена последовательность проведения документов");
		Иначе
			ЭлементыФормы.НадписьПоследовательность.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			ЭлементыФормы.НадписьПоследовательность.Заголовок = "Хронология проведения документов не контролируется";
		КонецЕсли;
	Иначе
		ЭлементыФормы.НадписьПоследовательность.Видимость = Ложь;
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецПериода, Ложь, Организация);
	
	//Контроль изменеий параметра признания расходов по НДС
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.ПорядокПризнанияРасходовПоНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|	И УчетнаяПолитикаОрганизаций.Период < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	ДатаИзмененияУПпоНДС = '00010101';
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийРежимНДС = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущийРежимНДС = Неопределено Тогда
			ТекущийРежимНДС = Выборка.ПорядокПризнанияРасходовПоНДС;
			ДатаТекущегоРежима = Выборка.Период;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ПорядокПризнанияРасходовПоНДС) И ТекущийРежимНДС <> Выборка.ПорядокПризнанияРасходовПоНДС Тогда
			ДатаИзмененияУПпоНДС = ДатаТекущегоРежима;
			Прервать;
		Иначе
			ДатаТекущегоРежима = Выборка.Период;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаИзмененияУПпоНДС > НачалоПериода Тогда
		Предупреждение("Отчет не может включать периоды с различным порядком признания расходов по входящему НДС.
						|Начальная дата изменена.");
		НачалоПериода = ДатаИзмененияУПпоНДС;
		ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
		ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

Процедура НадписьПоследовательностьНажатие(Элемент)
	Если НЕ ОбработкаУправленияПоследовательностью = Неопределено Тогда
		ОбработкаУправленияПоследовательностью.ПериодНач = НачалоМесяца(НачалоПериода);
		ОбработкаУправленияПоследовательностью.ПериодКон = КонецМесяца(КонецПериода);
		ОбработкаУправленияПоследовательностью.Организация = Организация;
		Форма = ОбработкаУправленияПоследовательностью.ПолучитьФорму("Форма");
		Форма.ОткрытьМодально();
		ПроверитьПоследовательность();
	КонецЕсли;
КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	
	ПроверитьПоследовательность();
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
				
КонецПроцедуры

// Обновление отчета
//
// Параметры:
//  Нет.
//
Процедура ОбновитьОтчет(Элемент = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация!");
		Возврат;
	КонецЕсли;
	Если Не (ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода))  Тогда
		Предупреждение("Не задан период отчета!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Предупреждение("Не указаны параметры учетной политики!");
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Предупреждение("Выбранная организация не применяет упрощенную систему налогообложения!");
		Возврат;
	КонецЕсли;  	
	
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	ВнешниеНаборыДанных = Неопределено;
	
	Если ТекущийМакет = "МакетКарты" Тогда
		ЗаполнитьДанныеСхемы(ЭлементыФормы.Результат, ВыделятьНДСУСН);
		Обводка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ЭлементыФормы.Результат.Рамка = Обводка;
		ЭлементыФормы.ПанельКнопок.ЦветФона = Новый Цвет(255, 255, 255);
	Иначе
		
		ЗначениеПараметраОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
		Если ЗначениеПараметраОрганизация <> Неопределено Тогда
			ЗначениеПараметраОрганизация.Значение = Организация;
			ЗначениеПараметраОрганизация.Использование = Истина;
		КонецЕсли;
		
		ЗначениеПараметраДатаИзмененияУПпоНДС = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаИзмененияУПпоНДС"));
		Если ЗначениеПараметраДатаИзмененияУПпоНДС <> Неопределено Тогда
			ЗначениеПараметраДатаИзмененияУПпоНДС.Значение = ДатаИзмененияУПпоНДС;
			ЗначениеПараметраДатаИзмененияУПпоНДС.Использование = Истина;
		КонецЕсли;
		
		ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
		ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
		
		Если ТекущийМакет = "МакетРасшифровкиРаспределения" Тогда
			ВнешниеНаборыДанных = ПолучитьДанныеДляОтчетаПоРаспределению();
		КонецЕсли;
		
		СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ЭтаФорма.ДанныеРасшифровки, , ВнешниеНаборыДанных);
		
		Обводка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		ЭлементыФормы.Результат.Рамка = Обводка;
		ЭлементыФормы.ПанельКнопок.ЦветФона = Новый Цвет(248, 242, 229);
	КонецЕсли;
	
	Если Найти(ТекущийМакет, "МакетРасшифровкиПоНоменклатуре") ИЛИ Найти(ТекущийМакет, "МакетКарты") Тогда
		
		ТабДокумент = ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), , Ложь);
		ТабДокумент.Вывести(ЭлементыФормы.Результат);
		Структура = Новый Структура;
		Структура.Вставить("Результат", ТабДокумент);
		Структура.Вставить("ФиксацияСверху",    ЭлементыФормы.Результат.ФиксацияСверху);
		Структура.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
		
		КэшОтчетов.Вставить(ТекущийМакет, Структура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	Если Найти(ТекущийМакет, "МакетКарты") Тогда
		
		ЗначениеРасшифровки = Расшифровка;
		
		Если ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
			
			ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоНоменклатуре", "МакетРасшифровкиПоНоменклатуре2009");
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			
			ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоТЗР", "МакетРасшифровкиПоТЗР2009");
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("МакетРасшифровкиПоСотрудникам");
			УстановитьНастройки("МакетРасшифровкиПоСотрудникам");
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = "МакетРасшифровкиПоСотрудникам";
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.Налоги Тогда
			
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("МакетРасшифровкиПоНалогам");
			УстановитьНастройки("МакетРасшифровкиПоНалогам");
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = "МакетРасшифровкиПоНалогам";
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.Услуги Тогда
			
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("МакетРасшифровкиПоУслугам");
			УстановитьНастройки("МакетРасшифровкиПоУслугам");
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = "МакетРасшифровкиПоУслугам";
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.РБП Тогда
			
			ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоРБП", "МакетРасшифровкиПоРБП2009");
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = Перечисления.ВидыРасходовУСН.НДС Тогда
			
			ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоНДС", "МакетРасшифровкиПоНДС2009");
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
			ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = "Распределение по видам деятельности" Тогда
			
			ИмяМакета = "МакетРасшифровкиРаспределения";
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
            ОбновитьОтчет();
			
		ИначеЕсли ЗначениеРасшифровки = "Прочее" Тогда
			
			ИмяМакета = "МакетРасшифровкиПрочее";
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
            ОбновитьОтчет();
			
		ИначеЕсли ТипЗнч(ЗначениеРасшифровки) = Тип("Число") Тогда
			
			ИмяМакета = "МакетРасшифровкиДоходов";
			СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
			УстановитьНастройки(ИмяМакета);
			Для Каждого Таблица Из КомпоновщикНастроек.Настройки.Структура Цикл
				Таблица.Использование = (Таблица.Имя = Строка(ЗначениеРасшифровки));
			КонецЦикла;
			
			ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
			ТекущийМакет = ИмяМакета;
			
            ОбновитьОтчет();
			
		КонецЕсли;
		
	Иначе
		
		ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
		ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля();
		
		Если Найти(ТекущийМакет, "МакетРасшифровкиПоНоменклатуре") Тогда 
			
			ПолеРасшифровки = "ЭлементРасхода";
			СтрокаЗначенияРасшифровки = ЭлементРасшифровкиДанныхПоля.Найти(ПолеРасшифровки);
			ЗначениеРасшифровки = ?(СтрокаЗначенияРасшифровки = Неопределено, Неопределено, СтрокаЗначенияРасшифровки.Значение);
			
			Если ЗначениеРасшифровки = Неопределено Тогда
				МассивРасшифровок = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ,);
				Для Каждого Элемент Из МассивРасшифровок Цикл
					Если Элемент.Поле = ПолеРасшифровки Тогда
						ЗначениеРасшифровки = Элемент.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
				
				ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиНоменклатурыПоДокументам", "МакетРасшифровкиНоменклатурыПоДокументам2009");
				СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
				УстановитьНастройки(ИмяМакета);
				
				ПутьМакета = ТекущийМакет + "/" + ПутьМакета;
				ТекущийМакет = ИмяМакета;
				
				ЗначениеПараметраНоменклатура = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Номенклатура"));
				
				Если ЗначениеПараметраНоменклатура <> Неопределено Тогда
					ЗначениеПараметраНоменклатура.Значение = ЗначениеРасшифровки;
					ЗначениеПараметраНоменклатура.Использование = Истина;
				КонецЕсли;
				
				ОбновитьОтчет();
			КонецЕсли;
			
		Иначе
			
			МассивРасшифровок = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ,);
			Для Каждого Элемент Из МассивРасшифровок Цикл
				Если Найти(Элемент.Поле, "Регистратор") Тогда
					ЗначениеРасшифровки = Элемент.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ЗначениеРасшифровки) И ТипЗнч(ЗначениеРасшифровки) <> Тип("Строка") Тогда
				ЗначениеРасшифровки.ПолучитьФорму().Открыть();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура УстановитьНастройки(ИмяМакета)
	
	Если КоллекцияНастроек.Свойство(ИмяМакета) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(КоллекцияНастроек[ИмяМакета]);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ?(СтрДлина(ПутьМакета) = 0, ЭлементыФормы.ПанельКнопок.Страницы.Основная, ЭлементыФормы.ПанельКнопок.Страницы.Дополнительная);
	ЭлементыФормы.Результат.ВертикальнаяПолосаПрокрутки = (СтрДлина(ПутьМакета) > 0);
	ЭлементыФормы.Результат.ГоризонтальнаяПолосаПрокрутки = (СтрДлина(ПутьМакета) > 0);
			
КонецПроцедуры

Процедура НазадНажатие(Элемент = Неопределено)
	
	ТочкаРазделителя = Найти(ПутьМакета, "/");
	Если ТочкаРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяМакета = Лев(ПутьМакета, ТочкаРазделителя - 1);
	
	Если НЕ ИмяМакета = "МакетКарты" Тогда
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
		УстановитьНастройки(ИмяМакета);
		ЭлементыФормы.ПанельКнопок.ЦветФона = Новый Цвет(248, 242, 229);
	Иначе
		Обводка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ЭлементыФормы.Результат.Рамка = Обводка;
		ЭлементыФормы.ПанельКнопок.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	ПутьМакета = СтрЗаменить(ПутьМакета, ИмяМакета + "/", "");
	ТекущийМакет = ИмяМакета;
	
	КэшРезультата = Неопределено;
	КэшОтчетов.Свойство(ТекущийМакет, КэшРезультата);
	Если КэшРезультата = Неопределено Тогда
		ОбновитьОтчет();
	Иначе
		// Загрузим результат, если есть сохраненный
		ЭлементыФормы.Результат.Очистить();
		ЭлементыФормы.Результат.ФиксацияСверху = 0;
		
		ЭлементыФормы.Результат.Вывести(КэшРезультата.Результат);
		ДанныеРасшифровки = КэшРезультата.ДанныеРасшифровки;
		ЭлементыФормы.Результат.ФиксацияСверху = КэшРезультата.ФиксацияСверху;
		Обновить();
		
	КонецЕсли;
		
	УстановитьДоступность();
	
КонецПроцедуры

Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПроверитьПоследовательность();
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

// Функции подготовки внешних наборов данных
Функция ПолучитьДанныеДляОтчетаПоРаспределению()
	
	//Вывод отчета с внешними данными
	ЗначениеПараметраОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ЗначениеПараметраОрганизация <> Неопределено Тогда
		ЗначениеПараметраОрганизация.Значение = Организация;
		ЗначениеПараметраОрганизация.Использование = Истина;
	КонецЕсли;
	
	Если ЭтаФорма <> Неопределено Тогда
		ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
		ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РаспеределениеУСНЕНВД", Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗакрытиеМесяца.Ссылка КАК Документ,
	|	0 КАК Коэфф
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.ВидОперации = &РаспеределениеУСНЕНВД
	|	И ЗакрытиеМесяца.Организация = &Организация
	|	И ЗакрытиеМесяца.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
	
	МетодРаспределения = УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности;
	БазаРаспределения = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности;
	Метод = ?(МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
	База = ?(БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
	?(БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
	
	Для Каждого Строка Из ТаблицаКоэффициентов Цикл
		Строка.Коэфф = ПолучитьКоэффРаспределенияЕНВД(Строка.Документ.Организация, Строка.Документ.Дата, Метод, База);
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции			

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//Вопрос задаем только при закрытии отчета из вложенных расшифровок
	Если Найти(ТекущийМакет, "МакетКарты") = 0 Тогда
		
		ТекстВопроса = "Завершить работу с отчетом?";
						
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСхему()
	
	ДокументРезультат = ЭлементыФормы.Результат;
	ДокументРезультат.Очистить();
	ДокументРезультат.ФиксацияСверху = 0;
	Секция = ПолучитьМакет("МакетКарты");
	ДокументРезультат.Вывести(Секция);
	
КонецПроцедуры

Процедура ДействияФормыОсновныеПечать(Кнопка)
	ЭлементыФормы.Результат.Напечатать(Ложь);
КонецПроцедуры

Процедура ДействияФормыДополнительныеНастройка(Кнопка)
	
    ЭтотОбъект.ПолучитьФормуНастроек().ОткрытьМодально();
	КоллекцияНастроек.Вставить(ТекущийМакет, КомпоновщикНастроек.ПолучитьНастройки());
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыРасшифровкаВернутьсяКСхеме(Кнопка)
	ТекущийМакет = "МакетКарты";
	ПутьМакета = "";
	
	КэшРезультата = Неопределено;
	КэшОтчетов.Свойство(ТекущийМакет, КэшРезультата);
	Если КэшРезультата = Неопределено Тогда
		ОбновитьОтчет();
	Иначе
		// Загрузим результат, если есть сохраненный
		ЭлементыФормы.Результат.Очистить();
		ЭлементыФормы.Результат.ФиксацияСверху = 0;
		
		ЭлементыФормы.Результат.Вывести(КэшРезультата.Результат);
		ДанныеРасшифровки = КэшРезультата.ДанныеРасшифровки;
		ЭлементыФормы.Результат.ФиксацияСверху = КэшРезультата.ФиксацияСверху;
		Обновить();
	КонецЕсли;
	
	Обводка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ЭлементыФормы.Результат.Рамка = Обводка;
	ЭлементыФормы.ПанельКнопок.ЦветФона = Новый Цвет(255, 255, 255);
		
	УстановитьДоступность();
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьНастройку();
КонецПроцедуры

КонтролироватьПоследовательностьПроведения = Константы.КонтролироватьПоследовательностьПроведения.Получить();