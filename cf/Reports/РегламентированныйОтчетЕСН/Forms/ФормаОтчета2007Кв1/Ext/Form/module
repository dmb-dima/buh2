////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел21;
Перем мРаздел21Продолжение;
Перем мРаздел3;
Перем мРаздел31;

// Хранят сведения о должностных лицах

// Хранят имена многострочных разделов
Перем мИдГруппы1;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Признак "горячей" смены организации в декларации
Перем мВПрограммеИзмененаОрганизация;

// Коды КБК для раздела 1 с 2005 года
Перем мКБК2005Раздел1;

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

// Тип НП
Перем мТипНалогоплательщика;

Перем мПечатныеФормы Экспорт;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Переменные для 9-й колонки, квадратное представление
// Не входят в многострочную часть
Перем мКодПлательщикаРаздел1;
Перем мОКАТОРаздел1;

// Входят в многострочную часть
Перем мКБКРаздел1_1;
Перем мСуммаМес0Раздел1_1;
Перем мСуммаМес1Раздел1_1;
Перем мСуммаМес2Раздел1_1;
Перем мСуммаМес3Раздел1_1;

Перем мКБКРаздел1_2;
Перем мСуммаМес0Раздел1_2;
Перем мСуммаМес1Раздел1_2;
Перем мСуммаМес2Раздел1_2;
Перем мСуммаМес3Раздел1_2;

Перем мКБКРаздел1_3;
Перем мСуммаМес0Раздел1_3;
Перем мСуммаМес1Раздел1_3;
Перем мСуммаМес2Раздел1_3;
Перем мСуммаМес3Раздел1_3;

Перем мКБКРаздел1_4;
Перем мСуммаМес0Раздел1_4;
Перем мСуммаМес1Раздел1_4;
Перем мСуммаМес2Раздел1_4;
Перем мСуммаМес3Раздел1_4;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;
Перем мПечатаемыеРазделы Экспорт;

// Поля поиска показателей в таблице состава показателей.
// Должна быть не во всех отчетах, используется в функции роОпределитьСтраницуПанели
Перем мПоляПоискаПоказателяВТСП Экспорт;

// Переменная для определения режима печати.
Перем мРежимПечати;

Перем ОбязРазделов Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;
Перем МногострочныеИсключения;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;

Перем СвойстваЗаполненияОтчета Экспорт;
Перем ИДКонфигурации;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если      ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел3;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);
		
	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КодПлательщикаРаздел1"  , мКодПлательщикаРаздел1);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1"           , мОКАТОРаздел1);

		// Запишем первую группу
		СтруктураДанныхПоля.Вставить("КБКРаздел1_1", мКБКРаздел1_1 );

		СтруктураДанныхПоля.Вставить("СуммаМес0Раздел1_1", мСуммаМес0Раздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаМес1Раздел1_1", мСуммаМес1Раздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаМес2Раздел1_1", мСуммаМес2Раздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаМес3Раздел1_1", мСуммаМес3Раздел1_1);

		// Запишем вторую группу
		СтруктураДанныхПоля.Вставить("КБКРаздел1_2", мКБКРаздел1_2 );
		СтруктураДанныхПоля.Вставить("СуммаМес0Раздел1_2", мСуммаМес0Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМес1Раздел1_2", мСуммаМес1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМес2Раздел1_2", мСуммаМес2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМес3Раздел1_2", мСуммаМес3Раздел1_2);

		// Запишем третью группу
		СтруктураДанныхПоля.Вставить("КБКРаздел1_3", мКБКРаздел1_3 );
		СтруктураДанныхПоля.Вставить("СуммаМес0Раздел1_3", мСуммаМес0Раздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаМес1Раздел1_3", мСуммаМес1Раздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаМес2Раздел1_3", мСуммаМес2Раздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаМес3Раздел1_3", мСуммаМес3Раздел1_3);

		// Запишем четвертую группу
		СтруктураДанныхПоля.Вставить("КБКРаздел1_4", мКБКРаздел1_4 );
		СтруктураДанныхПоля.Вставить("СуммаМес0Раздел1_4", мСуммаМес0Раздел1_4);
		СтруктураДанныхПоля.Вставить("СуммаМес1Раздел1_4", мСуммаМес1Раздел1_4);
		СтруктураДанныхПоля.Вставить("СуммаМес2Раздел1_4", мСуммаМес2Раздел1_4);
		СтруктураДанныхПоля.Вставить("СуммаМес3Раздел1_4", мСуммаМес3Раздел1_4);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда

		НомерСтроки = 1;

		Пока мРаздел3.Области.Найти("П000030001004_" + Формат(НомерСтроки,"ЧГ=0")) <> Неопределено Цикл
			Дата1 = мРаздел3.Области["П000030001004_" + Формат(НомерСтроки, "ЧГ=0")].Значение;
			Дата2 = мРаздел3.Области["П000030001010_" + Формат(НомерСтроки, "ЧГ=0")].Значение;

			Дата1Стр = ?(НЕ ЗначениеЗаполнено(Дата1), "", Формат(Дата1, "ДФ=""дд.ММ.гггг"""));
			Дата2Стр = ?(НЕ ЗначениеЗаполнено(Дата2), "", Формат(Дата2, "ДФ=""дд.ММ.гггг"""));

			СтрокаДляВыгрузки = Дата1Стр + "," + Дата2Стр;
			Если СтрокаДляВыгрузки = "," Тогда
				СтрокаДляВыгрузки = "";
			КонецЕсли;

			СтруктураДанныхПоля.Вставить("_СрокИнвалидности_" + Формат(НомерСтроки,"ЧГ=0"), СтрокаДляВыгрузки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КодПлательщикаРаздел1" Тогда
		Рез = мКодПлательщикаРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1" Тогда
		Рез = мОКАТОРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_1" Тогда
		Рез = мКБКРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_2" Тогда
		Рез = мКБКРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_3" Тогда
		Рез = мКБКРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_4" Тогда
		Рез = мКБКРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес1Раздел1_1" Тогда
		Рез = мСуммаМес1Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес1Раздел1_2" Тогда
		Рез = мСуммаМес1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес1Раздел1_3" Тогда
		Рез = мСуммаМес1Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес1Раздел1_4" Тогда
		Рез = мСуммаМес1Раздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес0Раздел1_1" Тогда
		Рез = мСуммаМес0Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес0Раздел1_2" Тогда
		Рез = мСуммаМес0Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес0Раздел1_3" Тогда
		Рез = мСуммаМес0Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес0Раздел1_4" Тогда
		Рез = мСуммаМес0Раздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес2Раздел1_1" Тогда
		Рез = мСуммаМес2Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес2Раздел1_2" Тогда
		Рез = мСуммаМес2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес2Раздел1_3" Тогда
		Рез = мСуммаМес2Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес2Раздел1_4" Тогда
		Рез = мСуммаМес2Раздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес3Раздел1_1" Тогда
		Рез = мСуммаМес3Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес3Раздел1_2" Тогда
		Рез = мСуммаМес3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес3Раздел1_3" Тогда
		Рез = мСуммаМес3Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес3Раздел1_4" Тогда
		Рез = мСуммаМес3Раздел1_4;
	КонецЕсли;


	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	// Раздел 1.
	ИначеЕсли ИмяПоказателя = "КодПлательщикаРаздел1" Тогда
		мКодПлательщикаРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_1" Тогда
		мКБКРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_2" Тогда
		мКБКРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_3" Тогда
		мКБКРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_4" Тогда
		мКБКРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_1" Тогда
		мСуммаМес1Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_2" Тогда
		мСуммаМес1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_3" Тогда
		мСуммаМес1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_4" Тогда
		мСуммаМес1Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес0Раздел1_1" Тогда
		мСуммаМес0Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес0Раздел1_2" Тогда
		мСуммаМес0Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес0Раздел1_3" Тогда
		мСуммаМес0Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес0Раздел1_4" Тогда
		мСуммаМес0Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_1" Тогда
		мСуммаМес2Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_2" Тогда
		мСуммаМес2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_3" Тогда
		мСуммаМес2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_4" Тогда
		мСуммаМес2Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_1" Тогда
		мСуммаМес3Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_2" Тогда
		мСуммаМес3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_3" Тогда
		мСуммаМес3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_4" Тогда
		мСуммаМес3Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				// Если многострочность, то специальный механизм
				Если (ЗначениеВКвадратах) И (
				(ИмяПоказателя = "П000010003000")
				Или (ИмяПоказателя = "П000010004000")
				Или (ИмяПоказателя = "П000010006000")
				Или (ИмяПоказателя = "П000010005000")) Тогда // КБК
					Если ИмяПоказателя = "П000010003000" Тогда
						МногострочностьИВариантыЗаполнения("СумНал1_1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНал2_1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНал3_1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНал4_1",   ВариантЗаполнения);
					ИначеЕсли ИмяПоказателя = "П000010004000" Тогда
						МногострочностьИВариантыЗаполнения("СумНалогМ1ФБ1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ1ФСС1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ1ФФОМС1", ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ1ТФОМС1", ВариантЗаполнения);
					ИначеЕсли ИмяПоказателя = "П000010005000" Тогда
						МногострочностьИВариантыЗаполнения("СумНалогМ2ФБ1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ2ФСС1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ2ФФОМС1", ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ2ТФОМС1", ВариантЗаполнения);
					ИначеЕсли ИмяПоказателя = "П000010006000" Тогда
						МногострочностьИВариантыЗаполнения("СумНалогМ3ФБ1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ3ФСС1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ3ФФОМС1", ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СумНалогМ3ТФОМС1", ВариантЗаполнения);
					КонецЕсли;

					Продолжить;
				КонецЕсли;

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// МногострочностьИВариантыЗаполнения
//
Процедура МногострочностьИВариантыЗаполнения(Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;

	Ключ = "_" + ВариантЗаполнения;
	мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

	Если ВариантЗаполнения = 4 Тогда
		Действие1 = "УстановитьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	Иначе
		Действие1 = "СнятьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	КонецЕсли;

	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие1, , "Раздел1");
	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие2, ЦветФона, "Раздел1");

КонецПроцедуры // МногострочностьИВариантыЗаполнения

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = НомерМесяца;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиИП      = "";
	ДатаПодписиУпПред  = "";

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	ДатаПодписиРук = стрУказаннаяДата;
	ДатаПодписиИП = стрУказаннаяДата;
	ДатаПодписиУпПред = стрУказаннаяДата;

	Если (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Или (ЧП) Тогда
		ДатаПодписиРук = "        ";
	КонецЕсли;

	Если (ПустаяСтрока(мТитульный.Области.ОргУп.Значение)) Тогда
		ДатаПодписиУпПред = "        ";
	КонецЕсли;

	ДатаПодписиИП  = ?(ЧП, стрУказаннаяДата, "        ");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(ДатаПодписиРук, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп"  + НомЯчейки].Значение = Сред(ДатаПодписиУпПред, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(ДатаПодписиИП, НомЯчейки, 1);

	КонецЦикла;

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ДатаПодписи1_", 8, стрУказаннаяДата);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ДатаПодписи1_", 8, стрУказаннаяДата);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел21", "ДатаПодписи1_", 8, стрУказаннаяДата);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел21Продолжение", "ДатаПодписи1_", 8, стрУказаннаяДата);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "ДатаПодписи1_", 8, стрУказаннаяДата);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ДатаПодписи1_", 8, стрУказаннаяДата);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Ложь);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Сведения = "";
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОКАТО, КодНО, НаимНО, ТипНП, ТелОрганизации, ОКВЭДКвадратикиТочкиРазделения, ";
		КонецЕсли;
		
		Сведения = Сведения + "ФИОРук, ФИО";
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);
		
		Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда
			ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(Результат.ОКАТО, 11, " ");
			мОКАТОРаздел1 = ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО", 11, ОКАТО);
			
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";
			мТитульный.Области.ТипОрг5.Значение = "";
			
			// Если Обособленное подразделение.
			Если Результат.ТипНП = 1 Тогда
				мТитульный.Области.ТипОрг1.Значение = "V";
			ИначеЕсли Результат.ТипНП = 2 Тогда
				мТитульный.Области.ТипОрг2.Значение = "V";
			ИначеЕсли Результат.ТипНП = 3 Тогда
				мТитульный.Области.ТипОрг3.Значение = "V";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	Если ТипНП = 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВПрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП <> 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЧП", мВПрограммеИзмененаОрганизация);
	КонецЕсли;

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);

	Для Инд = 1 По 5 Цикл
		мТитульный.Области["ТипОрг" + Инд].ЦветФона = ЦветФонаРазБлокировки;
		мТитульный.Области["ТипОрг" + Инд].Защита = Ложь;
	КонецЦикла;

	Если ТипНП = 1 Тогда
		// Росс. орг.

		мТитульный.Области.ТипОрг2.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг2.Защита = Истина;

		мТитульный.Области.ТипОрг3.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг3.Защита = Истина;

	ИначеЕсли ТипНП = 2 Тогда
		// Обособленное подразделение.

		мТитульный.Области.ТипОрг1.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг1.Защита = Истина;

		мТитульный.Области.ТипОрг3.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг3.Защита = Истина;

		мТитульный.Области.ТипОрг4.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг4.Защита = Истина;

		мТитульный.Области.ТипОрг5.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг5.Защита = Истина;

	ИначеЕсли ТипНП = 3 Тогда
		// ПБОЮЛ
		мТитульный.Области.ТипОрг1.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг1.Защита = Истина;

		мТитульный.Области.ТипОрг2.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг2.Защита = Истина;

		мТитульный.Области.ТипОрг4.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг4.Защита = Истина;

		мТитульный.Области.ТипОрг5.ЦветФона = ЦветФонаБлокировки;
		мТитульный.Области.ТипОрг5.Защита = Истина;
	КонецЕсли;

КонецПроцедуры // УправлениеЛистами

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЧП"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;

	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг4" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг5" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");

	НазванияЯчеекОтносящихсяКЧП = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг3" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);

	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЧП;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЧП" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЧП;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, Комманда       ,                   , Страница);
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);

				Если Очищать Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			Если КодПоказателяПоСтруктуре = "СуммаМес1Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ1ФБ",    15, мСуммаМес1Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ1ФСС",   15, мСуммаМес1Раздел1_2, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ1ФФОМС", 15, мСуммаМес1Раздел1_3, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ1ТФОМС", 15, мСуммаМес1Раздел1_4, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес2Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ2ФБ",    15, мСуммаМес2Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ2ФСС",   15, мСуммаМес2Раздел1_2, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ2ФФОМС", 15, мСуммаМес2Раздел1_3, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ2ТФОМС", 15, мСуммаМес2Раздел1_4, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес3Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ3ФБ",    15, мСуммаМес3Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ3ФСС",   15, мСуммаМес3Раздел1_2, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ3ФФОМС", 15, мСуммаМес3Раздел1_3, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогМ3ТФОМС", 15, мСуммаМес3Раздел1_4, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМес0Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНал1_", 15, мСуммаМес0Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНал2_", 15, мСуммаМес0Раздел1_2, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНал3_", 15, мСуммаМес0Раздел1_3, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНал4_", 15, мСуммаМес0Раздел1_4, Истина);

			КонецЕсли;

		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда

				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				//ФорматируемаяОбласть.ЭлементУправления.МаксимальноеЗначение = 999999999999999;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;

			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					//ФорматируемаяОбласть.ЭлементУправления.МаксимальноеЗначение = 999999999999999;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяРаздела = Неопределено)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяРаздела = Неопределено Тогда
		
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();

		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	Иначе 
		ИмяГруппы = ИмяРаздела
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если КолСтрок < 14 Тогда
		СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе

		// определяем вставляемую область
		 ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// добавляем в таблицу новую строку
		 ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КонецЕсли;

	Предел = 10000;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	// МаксимальноеКоличествоСтрокГруппы

	Если НомераСтрокиНоваяОбласть.СодержитЗначение Тогда
		НомераСтрокиНоваяОбласть.Значение = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0") + ".", "");
	Иначе
		НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0") + ".", "");
	КонецЕсли;
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	Если ИмяРаздела = Неопределено Тогда
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		Если НомУдаляемойСтроки > 14 Тогда
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		Иначе
			СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат((НСтр - 1), "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";

				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=0");

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// СпециальногоУдаленияСтроки
// Процедура предназначена для удаления строки с сохранением правой части табличного документа.
// Параметры:
//  ТекТабличноеПоле - поле табл. документа, где необходимо удалить доп. строку
//  ИмяГруппы        - имя группы доп. строк.
//  НомерВерхЯчейкиОбласти - номер верхней ячейки области.
//  НомерНижнЯчейкиОбласти - номер нижней ячейки области.
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхСтраница  = ТекТабличноеПоле.Области.Страница.Верх;
	Ч1ЛевоСтраница  = ТекТабличноеПоле.Области.Страница.Лево;
	Ч1НизСтраница   = ТекТабличноеПоле.Области.Страница.Низ;
	Ч1ПравоСтраница = ТекТабличноеПоле.Области.Страница.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Верх;
	Ч1ЛевоНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Лево;
	Ч1НизНазваниеКНД   = ТекТабличноеПоле.Области.НазваниеКНД.Низ;
	Ч1ПравоНазваниеКНД = ТекТабличноеПоле.Области.НазваниеКНД.Право;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	НазваниеМногострочнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НазваниеМногострочнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		Если ТекТабличноеПоле.Области.Найти(ФормаКНД) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		КонецЕсли;

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхНазваниеКНД, Ч1ЛевоНазваниеКНД, Ч1НизНазваниеКНД, Ч1ПравоНазваниеКНД);
		СледующаяЧасть.Имя = ФормаКНД;
		СледующаяЧасть.Объединить();
		СледующаяЧасть.Текст = " Форма по КНД 1151046";
		СледующаяЧасть.ОриентацияТекста = 270;
		СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.Раздел.Шрифт);

	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

			Если ТекТабличноеПоле.Области.Найти(Страница) <> Неопределено Тогда
				ТекТабличноеПоле.Области[Страница].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхСтраница, Ч1ЛевоСтраница, Ч1НизСтраница, Ч1ПравоСтраница);
			СледующаяЧасть.Имя = Страница;
			СледующаяЧасть.Объединить();
			СледующаяЧасть.Текст = "Стр.";
			СледующаяЧасть.ОриентацияТекста = 270;
			СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.КПП.Шрифт);

		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	//Предупреждение("Ок3");
	// КонецСпециального режима удаления

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,63,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	// Восстановим координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области["ПравоеПрисоединение"].Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		Если ТекТабличноеПоле.Области.Найти(НазваниеМногострочнаяЧасть) <> Неопределено Тогда
			ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(14, , 79,);
			МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;
		КонецЕсли;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(14, 56, 19, 56);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	// сохраним имеющиеся настройки правой присоединяющейся части (((

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока !!! Ппустая строка без доп. строк или складывать необходимо.
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		Область.Объединить();
		Область.Имя = ФормаКНД;
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			ТекТабличноеПоле.Области[Страница].Имя = "";
			Область.Объединить();
			Область.Имя = Страница;
		КонецЕсли;

	КонецЕсли;

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел3" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,63,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ПравПрисоед = "ПравоеПрисоединение" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	//Восстановим
	Если ТекТабличноеПоле.Области.Найти(ПравПрисоед) <> Неопределено Тогда
		ТекТабличноеПоле.Области[ПравПрисоед].Имя = "";
	КонецЕсли;

	СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
	СледующаяЧасть.Имя = ПравПрисоед;

КонецПроцедуры // СпециальногоДобавленияСтроки

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			Если НомИсходнойСтроки < 14 Тогда
				СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			Иначе

				// определяем вставляемую область
				ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// добавляем в таблицу новую строку
				ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			КонецЕсли;

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧГ=0") + ".";
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				Если Найти(ЗначениеЯчейки, ".") = 0 Тогда
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки + ".";
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;


		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел3 Тогда
		ИдГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				Если НСтр > 14 Тогда
					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				Иначе
					СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				КонецЕсли;

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ВыбТабличноеПоле.Имя, "ПредставлениеДанных") Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ВыбТабличноеПоле.Имя);
	КонецЕсли;

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыПанели);
		//ПоследовательноеЗаполнениеЛистовДеклРасчет();
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Функция РазделБудетПечататься (ИмяСтраницы)
// Возвращает, будет ли печататься, а значит есть ли такая страница
// Истина - ДА
// Ложь - НЕТ
// Используется в Расчет() для определения есть ли та или иная страница
//
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // РазделБудетПечататься

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			мСтараяВерсияФормы = ВерсияФормы;

		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;


	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение

			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	// Выводим дату подписания отчета
	ЗаполнитьДатуВЯчейках();

	УстановитьФорматВывода();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНал1_",        15, мСуммаМес0Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ1ФБ",    15, мСуммаМес1Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ2ФБ",    15, мСуммаМес2Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ3ФБ",    15, мСуммаМес3Раздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНал2_",        15, мСуммаМес0Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ1ФСС",   15, мСуммаМес1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ2ФСС",   15, мСуммаМес2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ3ФСС",   15, мСуммаМес3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНал3_",        15, мСуммаМес0Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ1ФФОМС", 15, мСуммаМес1Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ2ФФОМС", 15, мСуммаМес2Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ3ФФОМС", 15, мСуммаМес3Раздел1_3, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНал4_",        15, мСуммаМес0Раздел1_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ1ТФОМС", 15, мСуммаМес1Раздел1_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ2ТФОМС", 15, мСуммаМес2Раздел1_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалогМ3ТФОМС", 15, мСуммаМес3Раздел1_4, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Суммы платежей, подлежащие уплате в ФБ
		П000010004000_ФБ    = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020062003.Значение);
		П000010005000_ФБ    = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020063003.Значение);
		П000010006000_ФБ    = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020064003.Значение);

		// Суммы платежей, подлежащие уплате в ФСС РФ
		П000010004000_ФСС   = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020092003.Значение);
		П000010005000_ФСС   = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020093003.Значение);
		П000010006000_ФСС   = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020094003.Значение);

		// Суммы платежей, подлежащие уплате в ФФОМС
		П000010004000_ФФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020062005.Значение);
		П000010005000_ФФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020063005.Значение);
		П000010006000_ФФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020064005.Значение);

		// Суммы платежей, подлежащие уплате в ТФОМС
		П000010004000_ТФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020062006.Значение);
		П000010005000_ТФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020063006.Значение);
		П000010006000_ТФОМС = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020064006.Значение);

		//// Присваиваем переменным значения
		//// ФБ
		мСуммаМес1Раздел1_1 = П000010004000_ФБ;
		мСуммаМес2Раздел1_1 = П000010005000_ФБ;
		мСуммаМес3Раздел1_1 = П000010006000_ФБ;

		// Можно получать сумму по стр. 030 путем сложения 3-х мес., но возьмем из строки 600
		// раздела 2
		//мСуммаМес0Раздел1_1 = мСуммаМес1Раздел1_1 + мСуммаМес2Раздел1_1 + мСуммаМес3Раздел1_1;
		мСуммаМес0Раздел1_1 = мРаздел2.Области.П000020060003.Значение;

		//// ФСС
		мСуммаМес1Раздел1_2 = П000010004000_ФСС;
		мСуммаМес2Раздел1_2 = П000010005000_ФСС;
		мСуммаМес3Раздел1_2 = П000010006000_ФСС;

		//мСуммаМес0Раздел1_2 = мСуммаМес1Раздел1_2 + мСуммаМес2Раздел1_2 + мСуммаМес3Раздел1_2;
		// Фонда социального страхования Российской Федерации (ФСС) – из графы 3 строки 0900;
		мСуммаМес0Раздел1_2 = мРаздел2.Области.П000020090003.Значение;

		//// ФФОМС
		мСуммаМес1Раздел1_3 = П000010004000_ФФОМС;
		мСуммаМес2Раздел1_3 = П000010005000_ФФОМС;
		мСуммаМес3Раздел1_3 = П000010006000_ФФОМС;

		//мСуммаМес0Раздел1_3 = мСуммаМес1Раздел1_3 + мСуммаМес2Раздел1_3 + мСуммаМес3Раздел1_3;
		мСуммаМес0Раздел1_3 = мРаздел2.Области.П000020060005.Значение;

		// ТФОМС
		мСуммаМес1Раздел1_4 = П000010004000_ТФОМС;
		мСуммаМес2Раздел1_4 = П000010005000_ТФОМС;
		мСуммаМес3Раздел1_4 = П000010006000_ТФОМС;

		// мСуммаМес0Раздел1_4 = мСуммаМес1Раздел1_4 + мСуммаМес2Раздел1_4 + мСуммаМес3Раздел1_4;
		мСуммаМес0Раздел1_4 = мРаздел2.Области.П000020060006.Значение;

		ЗаполнениеЗначенийВКвадратиках("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// Строка 0110
		мРаздел2.Области.П000020011003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);

		мРаздел2.Области.П000020011004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012004.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014004.Значение);
		мРаздел2.Области.П000020011005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012005.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014005.Значение);

		// Строка 0210
		мРаздел2.Области.П000020021003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024003.Значение);
		мРаздел2.Области.П000020021004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022004.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024004.Значение);
		мРаздел2.Области.П000020021005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022005.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024005.Значение);
		мРаздел2.Области.П000020021006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022006.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023006.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024006.Значение);

		// Строка 0310
		мРаздел2.Области.П000020031003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение);

		// Строка 0410
		мРаздел2.Области.П000020041003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044003.Значение);
		мРаздел2.Области.П000020041004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042004.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044004.Значение);

		// Строка 0510
		мРаздел2.Области.П000020051003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054003.Значение);
		мРаздел2.Области.П000020051004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052004.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054004.Значение);
		мРаздел2.Области.П000020051005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052005.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054005.Значение);
		мРаздел2.Области.П000020051006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052006.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053006.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054006.Значение); 

		// Строка 0600
		мРаздел2.Области.П000020060003.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020050003.Значение), 0);
		П000020060004 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020004.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020050004.Значение), 0);
		мРаздел2.Области.П000020060004.Значение = П000020060004;
		мРаздел2.Области.П000020060005.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020005.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020050005.Значение), 0);
		мРаздел2.Области.П000020060006.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020006.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020050006.Значение), 0);

		// Строка 0620
		П000020062003 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052003.Значение), 0);
		П000020062004 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022004.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052004.Значение), 0);
		П000020062005 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022005.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052005.Значение), 0);
		П000020062006 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022006.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052006.Значение), 0);

		//// Переменные будут использоваться далее, поэтому сразу на лист не пишем
		мРаздел2.Области.П000020062003.Значение = П000020062003;
		мРаздел2.Области.П000020062004.Значение = П000020062004;
		мРаздел2.Области.П000020062005.Значение = П000020062005;
		мРаздел2.Области.П000020062006.Значение = П000020062006;

		//// Строка 0630
		П000020063003 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053003.Значение), 0);
		П000020063004 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023004.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053004.Значение), 0);
		П000020063005 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023005.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053005.Значение), 0);
		П000020063006 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023006.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053006.Значение), 0);

		// Переменные будут использоваться далее, поэтому сразу на лист не пишем
		мРаздел2.Области.П000020063003.Значение = П000020063003;
		мРаздел2.Области.П000020063004.Значение = П000020063004;
		мРаздел2.Области.П000020063005.Значение = П000020063005;
		мРаздел2.Области.П000020063006.Значение = П000020063006;

		// Строка 0640
		П000020064003 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054003.Значение), 0);  
		П000020064004 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024004.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054004.Значение), 0);
		П000020064005 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024005.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054005.Значение), 0);
		П000020064006 = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024006.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054006.Значение), 0); 

		мРаздел2.Области.П000020064003.Значение = П000020064003;
		мРаздел2.Области.П000020064004.Значение = П000020064004;
		мРаздел2.Области.П000020064005.Значение = П000020064005;
		мРаздел2.Области.П000020064006.Значение = П000020064006;

		// Строка 0610
		мРаздел2.Области.П000020061003.Значение = П000020062003 + П000020063003 + П000020064003;
		мРаздел2.Области.П000020061004.Значение = П000020062004 + П000020063004 + П000020064004;
		мРаздел2.Области.П000020061005.Значение = П000020062005 + П000020063005 + П000020064005;
		мРаздел2.Области.П000020061006.Значение = П000020062006 + П000020063006 + П000020064006;

		// Строка 0710
		мРаздел2.Области.П000020071003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020072003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020073003.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020074003.Значение);

		// Строка 0810
		мРаздел2.Области.П000020081003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020082003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020083003.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020084003.Значение);

		// Строка 0900
		мРаздел2.Области.П000020090003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020080003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020070003.Значение) + П000020060004;

		// Строки 0920 - 0940
		П000020092003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020082003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020072003.Значение) + П000020062004;
		П000020093003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020083003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020073003.Значение) + П000020063004;
		П000020094003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020084003.Значение) - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020074003.Значение) + П000020064004;
		// Строка 0910
		П000020091003 = П000020092003 + П000020093003 + П000020094003;

		мРаздел2.Области.П000020091003.Значение = П000020091003;
		мРаздел2.Области.П000020092003.Значение = П000020092003;
		мРаздел2.Области.П000020093003.Значение = П000020093003;
		мРаздел2.Области.П000020094003.Значение = П000020094003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		ОП000210001003 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001003.Значение);
		ОП000210001004 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001004.Значение);
		ОП000210001005 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001005.Значение);

		ОП000210002203 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210002203.Значение);
		ОП000210002204 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210002204.Значение);
		ОП000210002205 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210002205.Значение);

		ОП000210003203 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210003203.Значение);
		ОП000210003204 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210003204.Значение);
		ОП000210003205 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210003205.Значение);

		П000210002106 = мРаздел21.Области.П000210002106.Значение;
		П000210002107 = мРаздел21.Области.П000210002107.Значение;
		П000210002108 = мРаздел21.Области.П000210002108.Значение;

		П000210002103 = ОкруглитьЧислоПоФормату(280000 * П000210002106);
		П000210002104 = ОкруглитьЧислоПоФормату(280000 * П000210002107);
		П000210002105 = ОкруглитьЧислоПоФормату(280000 * П000210002108);

		мРаздел21.Области.П000210002103.Значение = П000210002103;
		мРаздел21.Области.П000210002104.Значение = П000210002104;
		мРаздел21.Области.П000210002105.Значение = П000210002105;

		П000210003106 = мРаздел21.Области.П000210003106.Значение;
		П000210003107 = мРаздел21.Области.П000210003107.Значение;
		П000210003108 = мРаздел21.Области.П000210003108.Значение;

		П000210003103 = ОкруглитьЧислоПоФормату(600000 * П000210003106);
		П000210003104 = ОкруглитьЧислоПоФормату(600000 * П000210003107);
		П000210003105 = ОкруглитьЧислоПоФормату(600000 * П000210003108);

		мРаздел21.Области.П000210003103.Значение = П000210003103;
		мРаздел21.Области.П000210003104.Значение = П000210003104;
		мРаздел21.Области.П000210003105.Значение = П000210003105;

		// Строка 020
		П000210002006 = П000210002106;
		П000210002007 = П000210002107;
		П000210002008 = П000210002108;

		мРаздел21.Области.П000210002006.Значение = П000210002006;
		мРаздел21.Области.П000210002007.Значение = П000210002007;
		мРаздел21.Области.П000210002008.Значение = П000210002008;

		П000210002003 = П000210002103 + ОП000210002203;
		П000210002004 = П000210002104 + ОП000210002204;
		П000210002005 = П000210002105 + ОП000210002205;

		мРаздел21.Области.П000210002003.Значение = П000210002003;
		мРаздел21.Области.П000210002004.Значение = П000210002004;
		мРаздел21.Области.П000210002005.Значение = П000210002005;

		// Строка 030
		П000210003006 = П000210003106;
		П000210003007 = П000210003107;
		П000210003008 = П000210003108;

		мРаздел21.Области.П000210003006.Значение = П000210003006;
		мРаздел21.Области.П000210003007.Значение = П000210003007;
		мРаздел21.Области.П000210003008.Значение = П000210003008;

		П000210003003 = П000210003103 + ОП000210003203;
		П000210003004 = П000210003104 + ОП000210003204;
		П000210003005 = П000210003105 + ОП000210003205;

		мРаздел21.Области.П000210003003.Значение = П000210003003;
		мРаздел21.Области.П000210003004.Значение = П000210003004;
		мРаздел21.Области.П000210003005.Значение = П000210003005;

		// Строка 040
		мРаздел21.Области.П000210004003.Значение = ОП000210001003 + П000210002003 + П000210003003;
		мРаздел21.Области.П000210004004.Значение = ОП000210001004 + П000210002004 + П000210003004;
		мРаздел21.Области.П000210004005.Значение = ОП000210001005 + П000210002005 + П000210003005;

		мРаздел21.Области.П000210004006.Значение = мРаздел21.Области.П000210001006.Значение + П000210002006 + П000210003006;
		мРаздел21.Области.П000210004007.Значение = мРаздел21.Области.П000210001007.Значение + П000210002007 + П000210003007;
		мРаздел21.Области.П000210004008.Значение = мРаздел21.Области.П000210001008.Значение + П000210002008 + П000210003008;

	// Страница 2 раздела 2.1 (продолжение).
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21Продолжение" Тогда

		ОП000210005003 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210005003.Значение);
		ОП000210005004 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210005004.Значение);
		ОП000210005005 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210005005.Значение);
		// !!! ОП000210006103 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210006103.Значение);
		// !!! ОП000210006104 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210006104.Значение);
		// !!! ОП000210006105 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210006105.Значение);
		ОП000210006203 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210006203.Значение);
		ОП000210006204 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210006204.Значение);
		ОП000210006205 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210006205.Значение);
		// !!! ОП000210007103 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210007103.Значение);
		// !!! ОП000210007104 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210007104.Значение);
		// !!! ОП000210007105 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210007105.Значение);
		ОП000210007203 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210007203.Значение);
		ОП000210007204 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210007204.Значение);
		ОП000210007205 = ОкруглитьЧислоПоФормату(мРаздел21Продолжение.Области.П000210007205.Значение);

		П000210006106 = мРаздел21Продолжение.Области.П000210006106.Значение;
		П000210006107 = мРаздел21Продолжение.Области.П000210006107.Значение;
		П000210006108 = мРаздел21Продолжение.Области.П000210006108.Значение;

		П000210006103 = ОкруглитьЧислоПоФормату(75000 * П000210006106);
		П000210006104 = ОкруглитьЧислоПоФормату(75000 * П000210006107);
		П000210006105 = ОкруглитьЧислоПоФормату(75000 * П000210006108);

		мРаздел21Продолжение.Области.П000210006103.Значение = П000210006103;
		мРаздел21Продолжение.Области.П000210006104.Значение = П000210006104;
		мРаздел21Продолжение.Области.П000210006105.Значение = П000210006105;

		П000210007106 = мРаздел21Продолжение.Области.П000210007106.Значение;
		П000210007107 = мРаздел21Продолжение.Области.П000210007107.Значение;
		П000210007108 = мРаздел21Продолжение.Области.П000210007108.Значение;

		П000210007103 = ОкруглитьЧислоПоФормату(600000 * П000210007106);
		П000210007104 = ОкруглитьЧислоПоФормату(600000 * П000210007107);
		П000210007105 = ОкруглитьЧислоПоФормату(600000 * П000210007108);

		мРаздел21Продолжение.Области.П000210007103.Значение = П000210007103;
		мРаздел21Продолжение.Области.П000210007104.Значение = П000210007104;
		мРаздел21Продолжение.Области.П000210007105.Значение = П000210007105;

		П000210006006 = П000210006106;
		П000210006007 = П000210006107;
		П000210006008 = П000210006108;

		мРаздел21Продолжение.Области.П000210006006.Значение = П000210006006;
		мРаздел21Продолжение.Области.П000210006007.Значение = П000210006007;
		мРаздел21Продолжение.Области.П000210006008.Значение = П000210006008;

		П000210006003 = П000210006103 + ОП000210006203;
		П000210006004 = П000210006104 + ОП000210006204;
		П000210006005 = П000210006105 + ОП000210006205;

		мРаздел21Продолжение.Области.П000210006003.Значение = П000210006003;
		мРаздел21Продолжение.Области.П000210006004.Значение = П000210006004;
		мРаздел21Продолжение.Области.П000210006005.Значение = П000210006005;

		П000210007006 = П000210007106;
		П000210007007 = П000210007107;
		П000210007008 = П000210007108;

		мРаздел21Продолжение.Области.П000210007006.Значение = П000210007006;
		мРаздел21Продолжение.Области.П000210007007.Значение = П000210007007;
		мРаздел21Продолжение.Области.П000210007008.Значение = П000210007008;

		П000210007003 = П000210007103 + ОП000210007203;
		П000210007004 = П000210007104 + ОП000210007204;
		П000210007005 = П000210007105 + ОП000210007205;

		мРаздел21Продолжение.Области.П000210007003.Значение = П000210007003;
		мРаздел21Продолжение.Области.П000210007004.Значение = П000210007004;
		мРаздел21Продолжение.Области.П000210007005.Значение = П000210007005;

		мРаздел21Продолжение.Области.П000210008003.Значение = ОП000210005003 + П000210006003 + П000210007003;
		мРаздел21Продолжение.Области.П000210008004.Значение = ОП000210005004 + П000210006004 + П000210007004;
		мРаздел21Продолжение.Области.П000210008005.Значение = ОП000210005005 + П000210006005 + П000210007005;

		мРаздел21Продолжение.Области.П000210008006.Значение = мРаздел21Продолжение.Области.П000210005006.Значение + П000210006006 + П000210007006;
		мРаздел21Продолжение.Области.П000210008007.Значение = мРаздел21Продолжение.Области.П000210005007.Значение + П000210006007 + П000210007007;
		мРаздел21Продолжение.Области.П000210008008.Значение = мРаздел21Продолжение.Области.П000210005008.Значение + П000210006008 + П000210007008;	
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

		Итог50 = 0;
		Итог60 = 0;
		Итог70 = 0;
		Итог80 = 0;
		Итог90 = 0;

		НомерСтроки = 1;
		Для Каждого Стр Из СтруктураГруппы1 Цикл

			Колонка6 =
			   мРаздел3.Области["П000030001007_" + Формат(НомерСтроки,"ЧГ=0")].Значение
			 + мРаздел3.Области["П000030001008_" + Формат(НомерСтроки,"ЧГ=0")].Значение
			 + мРаздел3.Области["П000030001009_" + Формат(НомерСтроки,"ЧГ=0")].Значение;

			Стр.П000030001006 = Колонка6;

			мРаздел3.Области["П000030001006_" + Формат(НомерСтроки,"ЧГ=0")].Значение = Колонка6;

			НомерСтроки = НомерСтроки + 1;

			Итог50 = Итог50 + ОкруглитьЧислоПоФормату(Стр.П000030001005);
			Итог60 = Итог60 + ОкруглитьЧислоПоФормату(Стр.П000030001006);
			Итог70 = Итог70 + ОкруглитьЧислоПоФормату(Стр.П000030001007);
			Итог80 = Итог80 + ОкруглитьЧислоПоФормату(Стр.П000030001008);
			Итог90 = Итог90 + ОкруглитьЧислоПоФормату(Стр.П000030001009);

		КонецЦикла;

		мРаздел3.Области.П000030002005.Значение = Итог50;
		мРаздел3.Области.П000030002006.Значение = Итог60;
		мРаздел3.Области.П000030002007.Значение = Итог70;
		мРаздел3.Области.П000030002008.Значение = Итог80;
		мРаздел3.Области.П000030002009.Значение = Итог90;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда

		ОП000310017003 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310017003.Значение);
		ОП000310017004 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310017004.Значение);
		ОП000310017005 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310017005.Значение);
		ОП000310018003 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310018003.Значение);
		ОП000310018004 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310018004.Значение);
		ОП000310018005 = ОкруглитьЧислоПоФормату(мРаздел31.Области.П000310018005.Значение);

		П000310011003 = мРаздел31.Области.П000310011003.Значение;
		П000310011004 = мРаздел31.Области.П000310011004.Значение;
		П000310011005 = мРаздел31.Области.П000310011005.Значение;

		// строка 130
		мРаздел31.Области.П000310013003.Значение  = ? (П000310011003  <> 0, (мРаздел31.Области.П000310012003.Значение  / П000310011003)  * 100, 0);
		мРаздел31.Области.П000310013004.Значение  = ? (П000310011004  <> 0, (мРаздел31.Области.П000310012004.Значение  / П000310011004)  * 100, 0);
		мРаздел31.Области.П000310013005.Значение  = ? (П000310011005  <> 0, (мРаздел31.Области.П000310012005.Значение  / П000310011005)  * 100, 0);

		П000310014003 = мРаздел31.Области.П000310014003.Значение;
		П000310014004 = мРаздел31.Области.П000310014004.Значение;
		П000310014005 = мРаздел31.Области.П000310014005.Значение;

		// строка 160
		мРаздел31.Области.П000310016003.Значение = ? (П000310014003  <> 0, (мРаздел31.Области.П000310015003.Значение  / П000310014003)  * 100, 0);
		мРаздел31.Области.П000310016004.Значение = ? (П000310014004  <> 0, (мРаздел31.Области.П000310015004.Значение  / П000310014004)  * 100, 0);
		мРаздел31.Области.П000310016005.Значение = ? (П000310014005  <> 0, (мРаздел31.Области.П000310015005.Значение  / П000310014005)  * 100, 0);
		
		// строка 190
		мРаздел31.Области.П000310019003.Значение = ? (ОП000310017003 <> 0, (ОП000310018003 / ОП000310017003) * 100, 0);
		мРаздел31.Области.П000310019004.Значение = ? (ОП000310017004 <> 0, (ОП000310018004 / ОП000310017004) * 100, 0);
		мРаздел31.Области.П000310019005.Значение = ? (ОП000310017005 <> 0, (ОП000310018005 / ОП000310017005) * 100, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел31");
		Расчет("Раздел3");
		Расчет("Раздел21");
		Расчет("Раздел21Продолжение");
		Расчет("Раздел2");
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			Расчет(РасчетныйЛист);
		КонецЕсли;
	КонецЕсли;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл

			ВыводНаПечать = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
			
			Если ВыводНаПечать = 1 Тогда
				ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
				Расчет(ИмяДляРасчета);
			КонецЕсли;
			ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет (РасчетныйЛист = "")

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "ЗБУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	НачальнаяПодготовкаФормы();
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
	
		Если ИДКонфигурации <> "ЗУП" Тогда
			РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровать");
		КонецЕсли;
		
	КонецЕсли;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	
КонецПроцедуры

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний(ВсеДанные = Истина) Экспорт

	Если НЕ ФлажокВнешДанные Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если ВсеДанные Тогда
			Предупреждение("Необходимо указать организацию!");
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если ВсеДанные Тогда
			
		ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);

		Если ПрерватьАвтоЗаполнение Тогда
			// Пользователь нажал кнопку "Нет".
			Возврат;
		КонецЕсли;

		мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
		Если ФлажокВнешДанные Тогда
			мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
			Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
				Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
				Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Ложь;
			РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод", Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(мДатаКонцаПериодаОтчета));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Делитель", мДелитель);
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); 
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	// Сформируем текст запроса выборки месяцев налогового периода
	МесяцыНПТекст = "ВЫБРАТЬ 1 КАК МЕСЯЦ ПОМЕСТИТЬ ВТМесяцыНП";
	Для Сч = 2 По 12 Цикл
    	МесяцыНПТекст = МесяцыНПТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ " + Сч;
	КонецЦикла;
	
	Запрос.Текст = МесяцыНПТекст;
	Запрос.Выполнить();
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица ВТУчетнаяПолитикаНалоговыйУчет - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УСН
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация И (ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ)";	
	Иначе
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|			И (УчетнаяПолитикаНалоговыйУчет.УСН)";	
	КонецЕсли;

	Запрос.Текст = УчетнаяПолитикаНалоговыйУчетТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаБезНалоговойБазы
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
	|	И (НЕ ЕСНСведенияОДоходах.ОблагаетсяЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНСведенияОДоходах.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФОМС
	|				ТОГДА ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|			ИНАЧЕ 0
	|		КОНЕЦ) < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// ДоходыЕСН
	// Описание: выбирает зарегистрированные доходы ЕСН по физлицам, месяцам и кодам дохода
	//	         относящиеся к видам деятельности, облагаемым налогом на прибыль за те месяцы,
	//	         когда организация НЕ применяет УСН
	//	 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МесяцыНП.Месяц КАК Месяц,
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	ЕСНСведенияОДоходах.Организация.ВидСтавокЕСНиПФР КАК ВидСтавокЕСНиПФР,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	|					ТОГДА ЕСНСведенияОДоходах.Результат
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ВыплатыЗаСчетПрибыли,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|					ТОГДА ЕСНСведенияОДоходах.Результат
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПособияЗаСчетФСС,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом))
	|					ТОГДА ЕСНСведенияОДоходах.Результат
	|				ИНАЧЕ ЕСНСведенияОДоходах.Скидка
	|			КОНЕЦ), 0) КАК НеОблагаетсяПоСт238ФедеральныйБюджет,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораГПХ), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом))
	|					ТОГДА ЕСНСведенияОДоходах.Результат
	|				ИНАЧЕ ЕСНСведенияОДоходах.Скидка
	|			КОНЕЦ), 0) КАК НеОблагаетсяПоСт238ФСС,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
	|						И ФизлицаБезНалоговойБазы.ФизЛицо ЕСТЬ NULL 
	|					ТОГДА ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК БазаФедеральныйБюджет,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС
	|						И ФизлицаБезНалоговойБазы.ФизЛицо ЕСТЬ NULL 
	|					ТОГДА ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК БазаФСС,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФОМС
	|						И ФизлицаБезНалоговойБазы.ФизЛицо ЕСТЬ NULL 
	|					ТОГДА ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК БазаФОМС
	|ПОМЕСТИТЬ ВТДоходыЕСНПоФизлицам
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетУСН
	|			ПО (МЕСЯЦ(ЕСНСведенияОДоходах.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаБезНалоговойБазы КАК ФизлицаБезНалоговойБазы
	|			ПО ЕСНСведенияОДоходах.ФизЛицо = ФизлицаБезНалоговойБазы.ФизЛицо
	|		ПО (МесяцыНП.Месяц >= МЕСЯЦ(ЕСНСведенияОДоходах.Период))
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
	|	И (НЕ ЕСНСведенияОДоходах.ОблагаетсяЕНВД)
	|	И УчетнаяПолитикаНалоговыйУчетУСН.Месяц ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыНП.Месяц,
	|	ЕСНСведенияОДоходах.Организация.ВидСтавокЕСНиПФР,
	|	ЕСНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	ФизЛицо";
	Запрос.Выполнить();
	
	ДоходыНарастающимИтогомТекст = 
	"ВЫБРАТЬ
	|	ДоходыЕСН.Месяц КАК Месяц,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.ПособияЗаСчетФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ПособияЗаСчетФСС,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.НеОблагаетсяПоСт238ФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК НеОблагаетсяПоСт238ФСС,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.НеОблагаетсяПоСт238ФедеральныйБюджет) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК НеОблагаетсяПоСт238ФедеральныйБюджет,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.ВыплатыЗаСчетПрибыли) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ВыплатыЗаСчетПрибыли,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.БазаФедеральныйБюджет) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК БазаФедеральныйБюджет,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.БазаФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК БазаФСС,
	|	(ВЫРАЗИТЬ(СУММА(ДоходыЕСН.БазаФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК БазаФОМС
	|ПОМЕСТИТЬ ВТДоходыЕСН
	|ИЗ
	|	ВТДоходыЕСНПоФизлицам КАК ДоходыЕСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыЕСН.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	Запрос.Текст  = СтрЗаменить(ДоходыНарастающимИтогомТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	Запрос.Выполнить();
	
	//НалоговыеБазыРаздела2Текст
	// Описание:
	//  Выбираются данные из таблицы ВТДоходыЕСН, необходимые для заполнения показетелей раздела 2.
	
	//НалоговыеБазыРаздела2Текст
	// Описание:
	//  Выбираются данные из таблицы ВТДоходыЕСН, необходимые для заполнения показетелей раздела 2.
	
	НалоговыеБазыРаздела2Текст = 
	"ВЫБРАТЬ
	// строка 0100 - за отчетный период  
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФедеральныйБюджет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020010003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020010004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФОМС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020010005,
	// Строка 0120 - налоговая база за 1 месяц
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц1
	|				ТОГДА Доходы.БазаФедеральныйБюджет - ЕСТЬNULL(ДоходыПредМесяца.БазаФедеральныйБюджет, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц1
	|				ТОГДА Доходы.БазаФСС - ЕСТЬNULL(ДоходыПредМесяца.БазаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц1
	|				ТОГДА Доходы.БазаФОМС - ЕСТЬNULL(ДоходыПредМесяца.БазаФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012005,
	// Строка 0130 - налоговая база за 2 месяц
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц2
	|				ТОГДА Доходы.БазаФедеральныйБюджет - ЕСТЬNULL(ДоходыПредМесяца.БазаФедеральныйБюджет, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц2
	|				ТОГДА Доходы.БазаФСС - ЕСТЬNULL(ДоходыПредМесяца.БазаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц2
	|				ТОГДА Доходы.БазаФОМС - ЕСТЬNULL(ДоходыПредМесяца.БазаФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013005,
	// Строка 0140 - налоговая база за 3 месяц
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФедеральныйБюджет - ЕСТЬNULL(ДоходыПредМесяца.БазаФедеральныйБюджет, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФСС - ЕСТЬNULL(ДоходыПредМесяца.БазаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.БазаФОМС - ЕСТЬNULL(ДоходыПредМесяца.БазаФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014005,
	// Строки 0700, 0720, 0730, 0740 - расходы на цели социального страхования за год и по месяцам отчетного периода 
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.ПособияЗаСчетФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020070003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц1
	|				ТОГДА Доходы.ПособияЗаСчетФСС - ЕСТЬNULL(ДоходыПредМесяца.ПособияЗаСчетФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020072003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц2
	|				ТОГДА Доходы.ПособияЗаСчетФСС - ЕСТЬNULL(ДоходыПредМесяца.ПособияЗаСчетФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020073003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.ПособияЗаСчетФСС - ЕСТЬNULL(ДоходыПредМесяца.ПособияЗаСчетФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020074003,
	// Строка 1000 - справочно выплаты за счет прибыли за год
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.ВыплатыЗаСчетПрибыли
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020100003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.ВыплатыЗаСчетПрибыли
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020100004,
	// Строка 1100 - справочно суммы не подлежащие налогообложению по ст. 238 НК РФ
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.НеОблагаетсяПоСт238ФедеральныйБюджет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020110003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.Месяц = &Месяц3
	|				ТОГДА Доходы.НеОблагаетсяПоСт238ФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020110004
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЕСН КАК Доходы
	|		ПО МесяцыНП.Месяц = Доходы.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЕСН КАК ДоходыПредМесяца
	|		ПО МесяцыНП.Месяц - 1 = ДоходыПредМесяца.Месяц";
	
	
	// НалоговаяБазаПоФизлицамПределам
	// Описание:
	//  Выбираются налоговые базы из таблицы ВТДоходыЕСН. Данные нужны для раздела 2.1.
	
	НалоговаяБазаПоФизлицамПределам = 
	"ВЫБРАТЬ
	|	ДоходыЕСНВсего.БазаФедеральныйБюджет - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3
	|				ТОГДА СтавкиФедеральныйБюджет.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2
	|				ТОГДА СтавкиФедеральныйБюджет.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001003,
	|	ДоходыЕСНВсего.БазаФСС - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФСС.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФСС.НомерСтрокиСтавок = 3
	|				ТОГДА СтавкиФСС.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФСС.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФСС.НомерСтрокиСтавок = 2
	|				ТОГДА СтавкиФСС.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001004,
	|	ДоходыЕСНВсего.БазаФОМС - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3
	|				ТОГДА СтавкиФОМС.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) - (ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель - СУММА(ВЫБОР
	|			КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2
	|				ТОГДА СтавкиФОМС.СуммаДоходаС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001005,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001006,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФСС.НомерСтрокиСтавок = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001007,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФОМС.НомерСтрокиСтавок = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210001008,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210002106,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФСС.НомерСтрокиСтавок = 2
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210002107,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210002108,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210002203,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФСС.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210002204,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2
	|					ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210002205,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210003106,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФСС.НомерСтрокиСтавок = 3
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210003107,
	|	СУММА(ВЫБОР
	|			КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000210003108,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210003203,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФСС.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210003204,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3
	|					ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000210003205
	|ИЗ
	|	ВТДоходыЕСНПоФизлицам КАК ДоходыПоФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЕСН КАК ДоходыЕСНВсего
	|		ПО ДоходыПоФЛ.Месяц = ДоходыЕСНВсего.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФедеральныйБюджет
	|		ПО ДоходыПоФЛ.ВидСтавокЕСНиПФР = СтавкиФедеральныйБюджет.ВидСтавокЕСНиПФР
	|			И (СтавкиФедеральныйБюджет.Год = &парамГод)
	|			И ДоходыПоФЛ.БазаФедеральныйБюджет > СтавкиФедеральныйБюджет.СуммаДоходаС
	|			И ДоходыПоФЛ.БазаФедеральныйБюджет <= СтавкиФедеральныйБюджет.СуммаДоходаПо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФСС
	|		ПО ДоходыПоФЛ.ВидСтавокЕСНиПФР = СтавкиФСС.ВидСтавокЕСНиПФР
	|			И (СтавкиФСС.Год = &парамГод)
	|			И ДоходыПоФЛ.БазаФСС > СтавкиФСС.СуммаДоходаС
	|			И ДоходыПоФЛ.БазаФСС <= СтавкиФСС.СуммаДоходаПо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФОМС
	|		ПО ДоходыПоФЛ.ВидСтавокЕСНиПФР = СтавкиФОМС.ВидСтавокЕСНиПФР
	|			И (СтавкиФОМС.Год = &парамГод)
	|			И ДоходыПоФЛ.БазаФОМС > СтавкиФОМС.СуммаДоходаС
	|			И ДоходыПоФЛ.БазаФОМС <= СтавкиФОМС.СуммаДоходаПо
	|ГДЕ
	|	ДоходыПоФЛ.Месяц = &Месяц3
	|	И ДоходыПоФЛ.ФизЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыЕСНВсего.БазаФедеральныйБюджет,
	|	ДоходыЕСНВсего.БазаФСС,
	|	ДоходыЕСНВсего.БазаФОМС";
	НалоговаяБазаПоФизлицамПределам  = СтрЗаменить(НалоговаяБазаПоФизлицамПределам,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	
	// ИсчисленныйНалогПоМесяцам
	// Описание:
	//	Суммирует исчисленные налоги по месяцам налогового периода и физлицам
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.Организация.ВидСтавокЕСНиПФР КАК ВидСтавокЕСНиПФР,
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	МЕСЯЦ(ЕСНИсчисленный.Период) КАК Месяц,
	|	СУММА(ЕСНИсчисленный.ФедеральныйБюджет) КАК ФБ,
	|	СУММА(ЕСНИсчисленный.ФСС) КАК ФСС,
	|	СУММА(ЕСНИсчисленный.ФФОМС) КАК ФФОМС,
	|	СУММА(ЕСНИсчисленный.ТФОМС) КАК ТФОМС,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная + ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРНакопительнаяЕНВД - ЕСНИсчисленный.ПФРСтраховаяЕНВД) КАК ЛьготаПоВзносамВПФР,
	|	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) КАК ПримененнаяЛьготаФБ,
	|	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) КАК ПримененнаяЛьготаФСС,
	|	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФОМС) КАК ПримененнаяЛьготаФОМС
	|ПОМЕСТИТЬ ВТИсчисленныйНалогПоМесяцам
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|ГДЕ
	|	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНИсчисленный.Организация = &парамГоловнаяОрганизация
	|	И ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
	|
	|СГРУППИРОВАТЬ ПО
	|	МЕСЯЦ(ЕСНИсчисленный.Период),
	|	ЕСНИсчисленный.ФизЛицо,
	|	ЕСНИсчисленный.Организация.ВидСтавокЕСНиПФР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	Запрос.Выполнить();
	
	НалогНарастающимИтогомТекст =
	"ВЫБРАТЬ
	|	СуммыПоМесяцам.Месяц КАК Месяц,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ФБ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ФБ,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ФСС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ФФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ФФОМС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ТФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ТФОМС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ЛьготаПоВзносамВПФР) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ЛьготаПоВзносамВПФР,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ПримененнаяЛьготаФБ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ПримененнаяЛьготаФБ,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ПримененнаяЛьготаФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ПримененнаяЛьготаФСС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ПримененнаяЛьготаФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ПримененнаяЛьготаФОМС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ЛьготаФБ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ЛьготаФБ,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ЛьготаФСС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ЛьготаФСС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ЛьготаФФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ЛьготаФФОМС,
	|	(ВЫРАЗИТЬ(СУММА(СуммыПоМесяцам.ЛьготаТФОМС) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ЛьготаТФОМС
	|ПОМЕСТИТЬ ВТИсчисленныйНалогНарастающимИтогом
	|ИЗ
	|	(ВЫБРАТЬ
	|		МЕСЯЦ(Периоды.Период) КАК Месяц,
	|		ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|		СУММА(ЕСНИсчисленный.ФБ) КАК ФБ,
	|		СУММА(ЕСНИсчисленный.ФСС) КАК ФСС,
	|		СУММА(ЕСНИсчисленный.ФФОМС) КАК ФФОМС,
	|		СУММА(ЕСНИсчисленный.ТФОМС) КАК ТФОМС,
	|		СУММА(ЕСНИсчисленный.ЛьготаПоВзносамВПФР) КАК ЛьготаПоВзносамВПФР,
	|		СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) КАК ПримененнаяЛьготаФБ,
	|		СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) КАК ПримененнаяЛьготаФСС,
	|		СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФОМС) КАК ПримененнаяЛьготаФОМС,
	|		ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) * (МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах - МаксСтавкиЕСН.ПФРСтраховая1вПроцентах - МаксСтавкиЕСН.ПФРНакопительная1вПроцентах) / 100 КАК ЧИСЛО(15, 1)) КАК ЛьготаФБ,
	|		ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) * МаксСтавкиЕСН.ФССвПроцентах / 100 КАК ЧИСЛО(15, 1)) КАК ЛьготаФСС,
	|		ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФОМС) * МаксСтавкиЕСН.ФФОМСвПроцентах / 100 КАК ЧИСЛО(15, 1)) КАК ЛьготаФФОМС,
	|		ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФОМС) * МаксСтавкиЕСН.ТФОМСвПроцентах / 100 КАК ЧИСЛО(15, 1)) КАК ЛьготаТФОМС
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалогПоМесяцам КАК ЕСНИсчисленный
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК МаксСтавкиЕСН
	|				ПО ЕСНИсчисленный.ВидСтавокЕСНиПФР = МаксСтавкиЕСН.ВидСтавокЕСНиПФР
	|					И (МаксСтавкиЕСН.Год = &парамГод)
	|					И (МаксСтавкиЕСН.НомерСтрокиСтавок = 1)
	|			ПО (МЕСЯЦ(Периоды.Период) >= ЕСНИсчисленный.Месяц)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСНИсчисленный.ФизЛицо,
	|		МЕСЯЦ(Периоды.Период),
	|		МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах,
	|		МаксСтавкиЕСН.ПФРСтраховая1вПроцентах,
	|		МаксСтавкиЕСН.ПФРНакопительная1вПроцентах,
	|		МаксСтавкиЕСН.ФССвПроцентах,
	|		МаксСтавкиЕСН.ФФОМСвПроцентах,
	|		МаксСтавкиЕСН.ТФОМСвПроцентах) КАК СуммыПоМесяцам
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыПоМесяцам.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
	// округлим результаты, как указал пользователь в учетной политике
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		НалогНарастающимИтогомТекст = СтрЗаменить(НалогНарастающимИтогомТекст,"ЧИСЛО(15, 1)","ЧИСЛО(15, 5)");
	Иначе 	
		ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
			НалоговыйУчет = РегламентированнаяОтчетность;
		КонецЕсли;
		НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), НачалоГода(мДатаКонцаПериодаОтчета), Организация);
		УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета))][Организация];
		
		Если УчетнаяПолитика.ТочностьИсчисленияЕСН = Перечисления.ПорядкиОкругленияЕСН.ВРубляхИКопейках Тогда
			НалогНарастающимИтогомТекст = СтрЗаменить(НалогНарастающимИтогомТекст,"ЧИСЛО(15, 1)","ЧИСЛО(15, 2)");
		ИначеЕсли УчетнаяПолитика.ТочностьИсчисленияЕСН = Перечисления.ПорядкиОкругленияЕСН.ВРублях Тогда
			НалогНарастающимИтогомТекст = СтрЗаменить(НалогНарастающимИтогомТекст,"ЧИСЛО(15, 1)","ЧИСЛО(15, 0)");
		Иначе 	
			НалогНарастающимИтогомТекст = СтрЗаменить(НалогНарастающимИтогомТекст,"ЧИСЛО(15, 1)","ЧИСЛО(15, 5)");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст  = СтрЗаменить(НалогНарастающимИтогомТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	Запрос.Выполнить();
	
	//ИсчисленныеНалогиРаздела2Текст								
	// Описание:
	//  Выбираются данные из таблицы ВТИсчисленныйНалогПоМесяцам, необходимые для заполнения показетелей раздела 2.
	//
	ИсчисленныеНалогиРаздела2Текст = 
	"ВЫБРАТЬ
	//  Исчисленные налоги за год - строка 0200
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФБ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020020003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020020004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФФОМС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020020005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ТФОМС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020020006,
	//  Исчисленные налоги за 1 месяц отчетного периода - строка 0220
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ФБ - ЕСТЬNULL(НалогиПредМесяца.ФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020022003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ФСС - ЕСТЬNULL(НалогиПредМесяца.ФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020022004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ФФОМС - ЕСТЬNULL(НалогиПредМесяца.ФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020022005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ТФОМС - ЕСТЬNULL(НалогиПредМесяца.ТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020022006,
	//  Исчисленные налоги за 2 месяц отчетного периода - строка 0230
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ФБ - ЕСТЬNULL(НалогиПредМесяца.ФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020023003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ФСС - ЕСТЬNULL(НалогиПредМесяца.ФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020023004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ФФОМС - ЕСТЬNULL(НалогиПредМесяца.ФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020023005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ТФОМС - ЕСТЬNULL(НалогиПредМесяца.ТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020023006,
	//  Исчисленные налоги за 3 месяц отчетного периода - строка 0240
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФБ - ЕСТЬNULL(НалогиПредМесяца.ФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020024003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФСС - ЕСТЬNULL(НалогиПредМесяца.ФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020024004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ФФОМС - ЕСТЬNULL(НалогиПредМесяца.ФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020024005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ТФОМС - ЕСТЬNULL(НалогиПредМесяца.ТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020024006,
	//  Налоговый вычет за год и по месяцам - строки 0300, 0320, 0330, 0340
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаПоВзносамВПФР
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020030003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ЛьготаПоВзносамВПФР - ЕСТЬNULL(НалогиПредМесяца.ЛьготаПоВзносамВПФР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020032003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ЛьготаПоВзносамВПФР - ЕСТЬNULL(НалогиПредМесяца.ЛьготаПоВзносамВПФР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020033003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаПоВзносамВПФР - ЕСТЬNULL(НалогиПредМесяца.ЛьготаПоВзносамВПФР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020034003,
	//  Налоговая льгота инвалидам за год  - строка 0400
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ПримененнаяЛьготаФБ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020040003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ПримененнаяЛьготаФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020040004,
	//  Налоговая льгота инвалидам за 1 месяц отчетного периода  - строка 0420
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ПримененнаяЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020042003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ПримененнаяЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020042004,
	//  Налоговая льгота инвалидам за 2 месяц отчетного периода  - строка 0430
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ПримененнаяЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020043003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ПримененнаяЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020043004,
	//  Налоговая льгота инвалидам за 3 месяц отчетного периода  - строка 0440
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ПримененнаяЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020044003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ПримененнаяЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ПримененнаяЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020044004,
	//  Сумма налога с налоговой льготы инвалидам за год  - строка 0500
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФБ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020050003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020050004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФФОМС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020050005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаТФОМС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020050006,
	//  Сумма налога с налоговой льготы инвалидам за 1 месяц отчетного периода  - строка 0520
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020052003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020052004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ЛьготаФФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020052005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц1
	|				ТОГДА Налоги.ЛьготаТФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020052006,
	//  Сумма налога с налоговой льготы инвалидам за 2 месяц отчетного периода  - строка 0530
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020053003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020053004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ЛьготаФФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020053005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц2
	|				ТОГДА Налоги.ЛьготаТФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020053006,
	//  Сумма налога с налоговой льготы инвалидам за 3 месяц отчетного периода  - строка 0540
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФБ - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020054003,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФСС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФСС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020054004,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаФФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаФФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020054005,
	|	СУММА(ВЫБОР
	|			КОГДА Налоги.Месяц = &Месяц3
	|				ТОГДА Налоги.ЛьготаТФОМС - ЕСТЬNULL(НалогиПредМесяца.ЛьготаТФОМС, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020054006
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалогНарастающимИтогом КАК Налоги
	|		ПО (МЕСЯЦ(Периоды.Период) = Налоги.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалогНарастающимИтогом КАК НалогиПредМесяца
	|		ПО (МЕСЯЦ(Периоды.Период) - 1 = НалогиПредМесяца.Месяц)";
	
    // ДанныеОбИнвалидности
	// Таблица Данных об инвалидности: - это список инвалидов и периодов инвалидности
	// поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//  Строим псевдосрез последних для месяцев текущего налогового периода (таблица ВТПериоды)
	//		и физлиц с зарегистрированными льготами по ЕСН (таблица ВТИсчисленныйНалогПоМесяцам)
	//  условие: что физлицо - Инвалид
	// 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МЕСЯЦ(Периоды.Период) КАК Месяц,
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТДанныеОбИнвалидности
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	ГДЕ
	|		СведенияОбИнвалидностиФизлиц.Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СписокФизлиц.Физлицо
	|				ИЗ
	|					ВТИсчисленныйНалогПоМесяцам КАК СписокФизлиц)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО Периоды.ПериодРегистра = СведенияОбИнвалидностиФизлиц.Период
	|			И Периоды.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|			И (СведенияОбИнвалидностиФизлиц.Инвалидность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Месяц";
	Запрос.Выполнить();
	
	// ЛьготыНарастающимИтогом
	// Описание:
	//	Суммирует инвалидные доходы по месяцам налогового периода и физлицам
	
	ЛьготыНарастающимИтогомТекст =
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	МесяцыНП.Месяц КАК Месяц,
	|	(ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК ПримененнаяЛьготаФБ
	|ПОМЕСТИТЬ ВТЛьготыНарастающимИтогом
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалогПоМесяцам КАК ЕСНИсчисленный
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбИнвалидности КАК СведенияОбИнвалидности
	|			ПО ЕСНИсчисленный.ФизЛицо = СведенияОбИнвалидности.Физлицо
	|				И ЕСНИсчисленный.Месяц = СведенияОбИнвалидности.Месяц
	|		ПО МесяцыНП.Месяц >= ЕСНИсчисленный.Месяц
	|ГДЕ
	|	СведенияОбИнвалидности.Физлицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыНП.Месяц,
	|	ЕСНИсчисленный.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	Запрос.Текст  = СтрЗаменить(ЛьготыНарастающимИтогомТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	Запрос.Выполнить();
	
	// СуммыЛьготИнвалидов_Раздела3Текст
	// В качестве льготы покажем суммы предоставленные льготы по федеральному бюджету
	СуммыЛьготИнвалидов_Раздела3Текст = 
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ЕСНИсчисленный.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
	|	КОНЕЦ КАК ФИО,
	|	"""" + СведенияОбИнвалидности.СерияСправки + "" "" + СведенияОбИнвалидности.НомерСправки КАК СерияНомерСправки,
	|	СведенияОбИнвалидности.Период КАК Период,
	|	СведенияОбИнвалидности.ДатаВыдачи КАК ДатаВыдачи,
	|	СведенияОбИнвалидности.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	СведенияОбИнвалидности.СрокДействияСправки КАК СрокДействияСправки,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНИсчисленный.Месяц = &Месяц3
	|				ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛьготаЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНИсчисленный.Месяц = &Месяц1
	|				ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ - ЕСТЬNULL(ЕСНИсчисленныйПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛьготаЗа1Месяц,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНИсчисленный.Месяц = &Месяц2
	|				ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ - ЕСТЬNULL(ЕСНИсчисленныйПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛьготаЗа2Месяц,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНИсчисленный.Месяц = &Месяц3
	|				ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ - ЕСТЬNULL(ЕСНИсчисленныйПредМесяца.ПримененнаяЛьготаФБ, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛьготаЗа3Месяц
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛьготыНарастающимИтогом КАК ЕСНИсчисленный
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|					&парамКонецОтчетногоПериода,
	|					Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СписокФизлиц.Физлицо
	|						ИЗ
	|							ВТДанныеОбИнвалидности КАК СписокФизлиц)) КАК ФИОФизЛиц
	|			ПО ЕСНИсчисленный.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
	|					&парамКонецОтчетногоПериода,
	|					Физлицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СписокФизлиц.Физлицо
	|							ИЗ
	|								ВТДанныеОбИнвалидности КАК СписокФизлиц)
	|						И Инвалидность) КАК СведенияОбИнвалидности
	|			ПО ЕСНИсчисленный.ФизЛицо = СведенияОбИнвалидности.Физлицо
	|		ПО МесяцыНП.Месяц = ЕСНИсчисленный.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛьготыНарастающимИтогом КАК ЕСНИсчисленныйПредМесяца
	|		ПО (МесяцыНП.Месяц - 1 = ЕСНИсчисленныйПредМесяца.Месяц)
	|			И (ЕСНИсчисленный.ФизЛицо = ЕСНИсчисленныйПредМесяца.ФизЛицо)
	|ГДЕ
	|	ЕСНИсчисленный.ФизЛицо ЕСТЬ НЕ NULL 
	|	И СведенияОбИнвалидности.Физлицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбИнвалидности.Период,
	|	СведенияОбИнвалидности.ДатаВыдачи,
	|	СведенияОбИнвалидности.ГруппаИнвалидности,
	|	СведенияОбИнвалидности.СрокДействияСправки,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ЕСНИсчисленный.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
	|	КОНЕЦ,
	|	ЕСНИсчисленный.ФизЛицо,
	|	"""" + СведенияОбИнвалидности.СерияСправки + "" "" + СведенияОбИнвалидности.НомерСправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	
	// Раздел 2
	
	Запрос.Текст = НалоговыеБазыРаздела2Текст;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = ИсчисленныеНалогиРаздела2Текст;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Если ВсеДанные Тогда
		Если Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный") <> Неопределено Тогда

			// ВозмещеноФССТекст 
			// Описание:
			//  Выбираются отраженные в бухгалтерском учете суммы денежных средств, полученных из фонда социального страхования.
			//	Запрос выполняется для списка обособленных подразделений. Данные нужны для разделов 2 и 2.2. 
			
			// Строки 0800, 0820, 0830 и 0840 - Возмещено ФСС за год и по месяцам отчетного периода
			ВозмещеноФССТекст = 
			"ВЫБРАТЬ
			|	СУММА(БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт) КАК П000020080003,
			|	СУММА(ВЫБОР
			|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц1
			|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000020082003,
			|	СУММА(ВЫБОР
			|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц2
			|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000020083003,
			|	СУММА(ВЫБОР
			|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц3
			|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000020084003
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			Месяц,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС),
			|			,
			|			Организация В (&СписокОбособленныхПодразделений)
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда),
			|			,
			|			) КАК БухОбороты";
			
			Запрос.Текст = ВозмещеноФССТекст;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		КонецЕсли;
	КонецЕсли;

	// Раздел 2.1
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел 3 

	ОчиститьТабличноеПоле(мРаздел3);

	// Запрашиваем необходимые данные и формируем для каждого физлица отдельную строку
	Запрос.Текст = СуммыЛьготИнвалидов_Раздела3Текст;
	ВыборкаЛьготПоФизлицам = Запрос.Выполнить().Выбрать();
	НомерСтроки = 1;
	Пока ВыборкаЛьготПоФизлицам.Следующий() Цикл

		Если НомерСтроки > 11 Тогда
			ВставитьДополнительнуюСтроку("П0000300010");
		КонецЕсли;

		НомерСтрокиСтр = Формат(НомерСтроки,"ЧГ=0");

		// суммы начислений
		УстановитьЗначениеПоказателя("П000030001002_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ФИО);
		Если ЗначениеЗаполнено(ВыборкаЛьготПоФизлицам.СрокДействияСправки) Тогда
			УстановитьЗначениеПоказателя("П000030001004_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.Период);
		КонецЕсли;
		УстановитьЗначениеПоказателя("П000030001010_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.СрокДействияСправки);

		УстановитьЗначениеПоказателя("П000030001003_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ДатаВыдачи);
		УстановитьЗначениеПоказателя("П000030001005_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ЛьготаЗаГод);
		УстановитьЗначениеПоказателя("П000030001007_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ЛьготаЗа1Месяц);
		УстановитьЗначениеПоказателя("П000030001008_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ЛьготаЗа2Месяц);
		УстановитьЗначениеПоказателя("П000030001009_" + НомерСтрокиСтр, ВыборкаЛьготПоФизлицам.ЛьготаЗа3Месяц);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	// Обновим структуру многострочного раздела для Расчет()
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);

	Если ВсеДанные Тогда
		// Добавляем показатели в отчет из xml файла.
		ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер );

		// -------------------------------------------------------------------------------
		// Расчет автовычисляемых полей

		Расчет();


		Модифицированность = Истина;

		// По окончании ЗаполнитьАвто будет запускаться Расчет с проставлением
		// связей внутри декларации. Не стирать!

		ПоследовательноеЗаполнениеЛистовДеклРасчет();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний()Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, "П0000300010", 11, 0);
	
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					СтрУровня2Имя = СтрУровня2.Имя;
					СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
					Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
						Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
							ВставитьДополнительнуюСтроку(СвойстваМнЧ.ИД);
						КонецЕсли;
						СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
						НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
						Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
							УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение);
						КонецЦикла;
						ОбновитьСтруктуруМногострочногоРаздела(СвойстваМнЧ.ИД);
					Иначе // это показатель
						УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// добавляем показатели в внешнего файла
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);

	Расчет();

	Модифицированность = Истина;

	// По окончании ЗаполнитьАвто будет запускаться Расчет с проставлением связей внутри декларации. Не стирать!
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	

КонецПроцедуры


// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Перебор по страницам.
	Инд = 0;
	Для каждого Раздел Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Раздел.Данные[0].СтруктураДанных);

		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "ПредставлениеДанных", Ложь);
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногострочностьВРазделе", 0);

		ПределНеДостигнут = Истина;

		Для каждого Срез Из Раздел.Данные Цикл

			ПеременныеОбновлены = Ложь;

			Для каждого ПоказательОтчета Из Срез.СтруктураДанных Цикл

				Показатель = ПоказательОтчета.Ключ;
				Значение = СокрЛП(ПоказательОтчета.Значение);

				КоличествоСтрокВБлоке = 0;
				Если МногострочностьВРазделе > 0 Тогда

					// Определим, принмадлежит ли показатель к группе многострочности.
					КоличествоСтрокВБлоке = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, Показатель);

					Если КоличествоСтрокВБлоке > 0 Тогда
						Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
							ВставитьДополнительнуюСтроку(Сред(Показатель, 1, 11));

							// Если вставка строки по какой-либо причине не состоялась, пропустим показатель.
							Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
								Продолжить;
							КонецЕсли;

						КонецЕсли;

						Если Найти(Показатель, "П000030001004_") > 0 Или Найти(Показатель, "П000030001010_") > 0 Тогда
							// Т.к. в составе показателей нет 4-й и 10-й колонки, то поиск по таблице состава показателей ничего не даст
							// и показатель может быть пропущен, поэтому берем колонку 3, тоже дата.
							ПоказательДляПоискаВТаблицеСоставаПоказателей = "П000030001003";
						Иначе
							ПоказательДляПоискаВТаблицеСоставаПоказателей = Сред(Показатель, 1, 13);
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

				Если КоличествоСтрокВБлоке = 0 Тогда
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, мПоляПоискаПоказателяВТСП);
				Иначе
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(ПоказательДляПоискаВТаблицеСоставаПоказателей, мПоляПоискаПоказателяВТСП);
				КонецЕсли;

				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если ИмяРаздела = "Раздел1" Тогда
						Если (Найти(Показатель, "СуммаМес") = 1) И 
						     (Найти(Показатель,"Раздел1") > 0) Тогда
							ТипДанных = "Е";
						ИначеЕсли (Найти(Показатель, "КБКРаздел1_") > 0)
						      Или (Показатель = "КБКРаздел1_2")
						      Или  (Показатель = "КодПлательщикаРаздел1")
						      Или  (Показатель = "ОКАТОРаздел1") Тогда
							ТипДанных = "С";
						Иначе
							// Показателя нет в составе показателей и нет в квадратных ячейках.
							Продолжить;
						КонецЕсли;
					Иначе
						// Показатель не обнаружен в составе показателей. Пропускаем.
						Продолжить;
					КонецЕсли;
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;

				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;

				ДанныеИмпортированы = Истина;
				Если ПредставлениеДанных Тогда
					Если ОбновитьПеременныеМодуля(Показатель, Значение) Тогда
						ПеременныеОбновлены = Истина;
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если КоличествоСтрокВБлоке > 0 Тогда
					Попытка
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области[Показатель].Значение = Значение;
					Исключение
						Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
					КонецПопытки;
					Продолжить;
				КонецЕсли;

				Попытка
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
				Исключение
					Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
				КонецПопытки;

			КонецЦикла;

			Если ПеременныеОбновлены Тогда
				ОтобразитьДанныеВКвадратиках(ИмяРаздела);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
КонецПроцедуры // УстановитьЗначениеПоказателя

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

// ОтобразитьДанныеВКвадратиках
// Отобразить данные в квадратном представлении
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОтобразитьДанныеВКвадратиках(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1" Тогда

		ЗаполнениеЗначенийВКвадратиках("Раздел1");

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ТипНП", 2, мКодПлательщикаРаздел1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО", 11, мОКАТОРаздел1);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФБ_", 20, мКБКРаздел1_1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФСС_", 20, мКБКРаздел1_2);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФФОМС_", 20, мКБКРаздел1_3);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвТФОМС_", 20, мКБКРаздел1_4);


	КонецЕсли;

КонецПроцедуры // ОтобразитьДанныеВКвадратиках

Процедура НачальнаяПодготовкаФормы() Экспорт 
	
	Перем ИсходноеКоличествоСтрокГруппы;

	мСтараяВерсияФормы = мВерсияФормы;

	мАвтоВыборКодов = Ложь;

	мТитульный           = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1             = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2             = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел21            = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;
	мРаздел21Продолжение = ЭлементыФормы.ПолеТабличногоДокументаРаздел21Продолжение;
	мРаздел3             = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел31            = ЭлементыФормы.ПолеТабличногоДокументаРаздел31;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мРежимПечати = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	ЗагрузитьПоказателиИзМакета("ТипНалогоплательщика");
	// Установим маски на ввод только чисел.
	РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			мТитульный.Области.ВидДок.Значение = "1";

			УстановитьФорматВывода();
			
			
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФБ_", 20, "18210201010011000110");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФСС_", 20, "18210201020071000110");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвФФОМС_", 20, "18210201030081000110");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвТФОМС_", 20, "18210201040091000110");
			
			ОбновитьПеременныеМодуля("КБКРаздел1_1", "18210201010011000110");
			ОбновитьПеременныеМодуля("КБКРаздел1_2", "18210201020071000110");
			ОбновитьПеременныеМодуля("КБКРаздел1_3", "18210201030081000110");
			ОбновитьПеременныеМодуля("КБКРаздел1_4", "18210201040091000110");

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, т.к. он не входит в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");
	
	Если Страница = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";
		
	ИначеЕсли Страница = "Раздел1" Тогда
		мКодПлательщикаРаздел1 = "";
		мОКАТОРаздел1 = "";

	// Входят в многострочную часть
		мКБКРаздел1_1 = "";
		мСуммаМес1Раздел1_1 = 0;
		мСуммаМес2Раздел1_1 = 0;
		мСуммаМес3Раздел1_1 = 0;
		мСуммаМес0Раздел1_1 = 0;

		мКБКРаздел1_2 = "";
		мСуммаМес1Раздел1_2 = 0;
		мСуммаМес2Раздел1_2 = 0;
		мСуммаМес3Раздел1_2 = 0;
		мСуммаМес0Раздел1_2 = 0;

		мКБКРаздел1_3 = "";
		мСуммаМес1Раздел1_3 = 0;
		мСуммаМес2Раздел1_3 = 0;
		мСуммаМес3Раздел1_3 = 0;
		мСуммаМес0Раздел1_3 = 0;

		мКБКРаздел1_4 = "";
		мСуммаМес1Раздел1_4 = 0;
		мСуммаМес2Раздел1_4 = 0;
		мСуммаМес3Раздел1_4 = 0;
		мСуммаМес0Раздел1_4 = 0;

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();

КонецПроцедуры // ПередОткрытием()

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура расшифровывает ячейки отчета
//
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		РасшифроватьВнутренний();
	Иначе
		РасшифроватьВнешний();
	КонецЕсли;

КонецПроцедуры

// Процедура расшифровывает ячейки отчета
//
Процедура РасшифроватьВнутренний()Экспорт
	
	ОтчетРасшифровки = Отчеты.АнализНачисленныхНалоговИВзносов.Создать();
	ОтчетРасшифровкиФорма = ОтчетРасшифровки.ПолучитьФорму("ФормаОтчета", ЭтаФорма);	
	ОтчетРасшифровкиФорма.ЭтоОтработкаРасшифровки = истина;
	
	ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Организация", Организация);
	
	Поле         = "";
	ИмяЯчейки    = "";
	НомерРаздела = "";
	НомерСтроки  = "";
	НомерКолонки = "";
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2" Тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2.ТекущаяОбласть;
		ИмяЯчейки	   = ТекущаяОбласть.Имя;
		НомерРаздела   = "2";
		НомерТаблицы   = Сред(ИмяЯчейки, 8, 2);
		НомерСтроки    = Сред(ИмяЯчейки, 10, 2);
		НомерКолонки   = Прав(ИмяЯчейки, 2);
		
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
		// установим период формирования отчета
		Если НомерСтроки = "00" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		ИначеЕсли НомерСтроки = "10" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		ИначеЕсли НомерСтроки = "20" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ИначеЕсли НомерСтроки = "30" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета))+1);
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  НачалоМесяца(мДатаКонцаПериодаОтчета)-1);
		ИначеЕсли НомерСтроки = "40" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		КонецЕсли;
		
		Если НомерТаблицы = "01" тогда
			Поле = Поле + "База";
			Если НомерКолонки = "03" тогда
				Поле = "ЕСН.ФБ." + Поле + "ФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС." + Поле + "ФСС";
			ИначеЕсли НомерКолонки = "05" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ФОМС";
			КонецЕсли;
		ИначеЕсли НомерТаблицы = "02" тогда
			Поле = Поле + "Исчислено";			
			Если НомерКолонки = "03" тогда
				Поле = "ЕСН.ФБ." + Поле + "ФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС." + Поле + "ФСС";
			ИначеЕсли НомерКолонки = "05" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ФФОМС";
			ИначеЕсли НомерКолонки = "06" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ТФОМС";
			КонецЕсли;
		ИначеЕсли НомерТаблицы = "03" тогда
			Поле = "ПФР." + Поле + "ЛьготаПФР";
		ИначеЕсли НомерТаблицы = "04" тогда
			Поле = "ПФР." + Поле + "ПримененнаяЛьгота";
			Если НомерКолонки = "03" тогда
				Поле = "ЕСН.ФБ." + Поле + "ФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС." + Поле + "ФСС";
			КонецЕсли;
		ИначеЕсли НомерТаблицы = "05" тогда
			Поле = Поле + "НеОблагается";
			Если НомерКолонки = "03" тогда
				Поле = "ЕСН.ФБ." + Поле + "ФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС." + Поле + "ФСС";
			ИначеЕсли НомерКолонки = "05" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ФФОМС";
			ИначеЕсли НомерКолонки = "06" тогда
				Поле = "ЕСН.ФОМС." +Поле + "ТФОМС";
			КонецЕсли;
		ИначеЕсли НомерТаблицы = "06" тогда
			Поле = Поле + "НалогКУплате";
			Если НомерКолонки = "03" тогда
				Поле = "ЕСН.ФБ." + Поле + "ФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС." + Поле + "ФСС";
			ИначеЕсли НомерКолонки = "05" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ФФОМС";
			ИначеЕсли НомерКолонки = "06" тогда
				Поле = "ЕСН.ФОМС." + Поле + "ТФОМС";
			КонецЕсли;
		ИначеЕсли НомерТаблицы = "07" тогда
			Поле = "ЕСН." + Поле + "Начислено";
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "КодДохода", Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
		ИначеЕсли НомерТаблицы = "10" тогда
			Поле = "ЕСН." + Поле + "Начислено";
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "КодДохода", Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли);
		ИначеЕсли НомерТаблицы = "11" тогда
			Если НомерКолонки = "03" тогда
				Поле = Поле + "UserFields.field1";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = Поле + "UserFields.field2";
			КонецЕсли;
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение", "По данным в учете");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
		Если НомерТаблицы = "01" тогда
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ВидРасчета");
		КонецЕсли;
		Если Поле = "" тогда
			Предупреждение("Расшифровка данного раздела не поддерживается");
			Возврат;		
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетРасшифровки.КомпоновщикНастроек, Поле);
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел21" Тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел21.ТекущаяОбласть;
		ИмяЯчейки	   = ТекущаяОбласть.Имя;		
		НомерРаздела   = "21";
		НомерТаблицы   = Сред(ИмяЯчейки, 8, 2);
		НомерСтроки    = Сред(ИмяЯчейки, 10, 2);
		НомерКолонки   = Прав(ИмяЯчейки, 2);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		Если НомерКолонки = "03" или НомерКолонки = "04"  или НомерКолонки = "05" тогда
			Если НомерКолонки = "03"тогда
				Поле = "ЕСН.ФБ.БазаФБ";
			ИначеЕсли НомерКолонки = "04" тогда
				Поле = "ЕСН.ФСС.БазаФСС";
			ИначеЕсли НомерКолонки = "05" тогда
				Поле = "ЕСН.ФОМС.БазаФОМС";
			КонецЕсли;
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение", "По данным в учете");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ВидРасчета");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетРасшифровки.КомпоновщикНастроек, Поле);
		Иначе
			Группировка                 = ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник.ФизЛицо");
			ВыбранноеПоле               = Группировка.Выбор.Элементы.Вставить(0, Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("SystemFields.GroupSerialNumber");
			ВыбранноеПоле.Использование = истина;
		КонецЕсли;
		
		ПолеДляОтбора = "";
		Если НомерКолонки = "03" или НомерКолонки = "06" тогда
			ПолеДляОтбора = "ЕСН.ФБ.НомерСтрокиСтавокФБ";
		ИначеЕсли НомерКолонки = "04" или НомерКолонки = "07" тогда
			ПолеДляОтбора = "ЕСН.ФСС.НомерСтрокиСтавокФСС";
		ИначеЕсли НомерКолонки = "05"  или НомерКолонки = "08" тогда
			ПолеДляОтбора = "ЕСН.ФОМС.НомерСтрокиСтавокФОМС";
		КонецЕсли;
	
		Если НомерСтроки = "10" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, ПолеДляОтбора, 1);
		ИначеЕсли НомерСтроки = "20" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, ПолеДляОтбора, 2);
		ИначеЕсли НомерСтроки = "30" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, ПолеДляОтбора, 3);
		ИначеЕсли НомерСтроки = "40" тогда
			ГруппаИЛИ = ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.Использование = Истина;
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, ПолеДляОтбора, 1);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, ПолеДляОтбора, 2);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, ПолеДляОтбора, 3);
		Иначе
			Предупреждение("Расшифровка данного раздела не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		Предупреждение("Расшифровка данного раздела не поддерживается");
		Возврат;		
	КонецЕсли;
		
	Если Найти(ИмяЯчейки,"R") > 0 Тогда
		Предупреждение("Расшифровка данной ячейки не поддерживается");
		Возврат;
	КонецЕсли;

	// установи отбор, что бы не показывались пустые строки в отчете
	МассивГруппировокОтчета = ТиповыеОтчеты.ПолучитьПоляГруппировок(ОтчетРасшифровки.КомпоновщикНастроек);
	Для каждого ПолеГруппировки из МассивГруппировокОтчета Цикл
		Группировка = ТиповыеОтчеты.ПолучитьЭлементСтруктурыПоПолюГруппировки(Новый ПолеКомпоновкиДанных(ПолеГруппировки.Значение), ОтчетРасшифровки.КомпоновщикНастроек);
		ТиповыеОтчеты.ДобавитьОтбор(Группировка.Отбор, Поле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ПараметрВывода = Группировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		ПараметрВывода.Использование = истина;
	КонецЦикла;
	ОтчетРасшифровкиФорма.ОбновитьОтчет();
	ОтчетРасшифровкиФорма.Открыть();	
	
КонецПроцедуры //КоманднаяПанельФормыРасшифровать

Процедура РасшифроватьВнешний() Экспорт

	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчетЕСН", ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;

КонецПроцедуры //РасшифроватьВнешний()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеТабличногоДокументаРаздел31Выбор
//
Процедура ПолеТабличногоДокументаРаздел31Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел31Выбор

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПолеТабличногоДокументаРаздел21Выбор
//
Процедура ПолеТабличногоДокументаРаздел21Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел21Выбор

// ПолеТабличногоДокументаРаздел21ПродолжениеВыбор
//
Процедура ПолеТабличногоДокументаРаздел21ПродолжениеВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Область.Имя;

	Если Найти(ОбластьИмя, "ТипОрг") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Для Инд = 1 По 5 Цикл
			мТитульный.Области["ТипОрг" + Инд].Значение = "";
		КонецЦикла;
		Область.Значение = "V";
		Модифицированность = Истина;
	ИначеЕсли Найти(ОбластьИмя, "ОКВЭД") > 0 Тогда
		РегламентированнаяОтчетность.УстановитьКодОКВЭДНаТитульномЛисте(ЭтаФорма, СтандартнаяОбработка);	
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// КнопкаДобавитьДопСтрокиРаздел3Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел3Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел3Нажатие

// КнопкаУдалитьДопСтрокиРаздел3Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел3Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	Расчет("Раздел3");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел3Нажатие

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

Процедура ВыполнитьИзменениеТочностиПоказателей()

	РегламентированнаяОтчетность.ПроверитьТочность(ЭтаФорма);
	УстановитьФорматВывода();

	// перезаполним поля "за месяц", "за квартал" и "за отчетный период" по данным ИБ, применяя  
	// новое округление к показателям, рассчитываемым нарастающим итогом
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф <> "ББУ" И ИдКонф <> "БГУ" И НЕ ФлажокВнешДанные Тогда
		ТекстВопроса = "Для получения точных значений показателей, рассчитываемых нарастающим итогом за налоговый период, рекомендуется перезаполнить эти показатели по данным информационной базы.";
		ТекстВопроса = ТекстВопроса + Символы.ПС + "Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьАвтоВнутренний(Ложь); 
		КонецЕсли;
	КонецЕсли;
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ВыполнитьИзменениеТочностиПоказателей();
	Иначе
		ПроверитьТочность();
		УстановитьФорматВывода();
		
		// Итоговые поля надо пересчитывать, потому что при расчете они округлются
		// в соответствии с установленной единицей изменения и точностью.
		ПоследовательноеЗаполнениеЛистовДеклРасчет();
		
		Модифицированность = Истина;    
	КонецЕсли;


КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ВыполнитьИзменениеТочностиПоказателей();
	Иначе
		ПроверитьТочность();
		УстановитьФорматВывода();
		
		// Итоговые поля надо пересчитывать, потому что при расчете они округлются
		// в соответствии с установленной единицей изменения и точностью.
		ПоследовательноеЗаполнениеЛистовДеклРасчет();
		
		Модифицированность = Истина;    
	КонецЕсли;
	
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21Продолжение";
	СтрокаУровня1.Представление            = "Раздел 2.1 (продолжение)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21Продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2.1 (продолжение)
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21Продолжение";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела32
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела32
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ШиринаСтрокиМногострочнойЧасти"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Определяет, из скольких строк состоит строчка многострочного раздела
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НазваниеМногострочнаяЧасть", ОписаниеТиповСтрока254); // Определяет, из скольких строк состоит строчка многострочного раздела

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел3";
	НовСтр.мИдГруппы                = мИдГруппы1;
	НовСтр.РазмерПоОсиХ             = 56;
	НовСтр.РазмерПоОсиУ             = 62;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 20; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 57; // Строчка по У

	НовСтр.НомерГраницыСтр          = 5;
	НовСтр.ОсновнаяЧастьУСтр        = 59;

	НовСтр.ШиринаСтрокиМногострочнойЧасти = 6;
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// При печати, расчет выполнятся не должен при любых обстоятельствах.

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Загружает данные из Списков
// Параметры:
// РазделвМакете - раздел в макете
// КодДляКБКБюджет - код для кбк, чтоб выбор был из соответствующих бюджетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете, КодДляКБКБюджет = Неопределено)

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	// Очистим
	Если РазделВМакете = "КБК2005Раздел1" Тогда

		Если мКБК2005Раздел1 <> Неопределено Тогда
			Если мКБК2005Раздел1.Количество() > 0 Тогда
				мКБК2005Раздел1.Очистить();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ТекОбласть <> Неопределено Тогда

		НеобходимоДобавитьСтроку = Неопределено;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда

				Прервать;

			Иначе

				Если (РазделВМакете = "КБК2005Раздел1") И (КодПоказателя = "") Тогда

					НеобходимоДобавитьСтроку = Истина; // Пустое значение

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 1) Тогда

					Если (КодПоказателя = "18210201010011000110") ИЛИ (КодПоказателя = "18210909010011000110") Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 2) Тогда

					Если (КодПоказателя = "18210201020071000110") ИЛИ (КодПоказателя = "18210909020071000110") Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 3) Тогда

					Если (КодПоказателя = "18210201030081000110") ИЛИ (КодПоказателя = "18210909030081000110") Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 4) Тогда

					Если (КодПоказателя = "18210201040091000110") ИЛИ (КодПоказателя = "18210909040091000110") Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;


				ИначеЕсли РазделВМакете = "ТипНалогоплательщика" Тогда

					НовСтрока = мТипНалогоплательщика.Добавить();

				КонецЕсли;

					Если НеобходимоДобавитьСтроку <> Неопределено Тогда

						Если НеобходимоДобавитьСтроку Тогда
							НовСтрока = мКБК2005Раздел1.Добавить();
							НовСтрока.Код= КодПоказателя;
							НовСтрока.Название = Название;
							НеобходимоДобавитьСтроку = Ложь;
						КонецЕсли;

					Иначе
						НовСтрока.Код= КодПоказателя;
						НовСтрока.Название = Название;

					КонецЕсли;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Если мСохраненныйДок = Неопределено Тогда
		Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг) Тогда
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(ОргУП) И ПустаяСтрока(ОргДиректор) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество руководителя организации!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	УпПред = ПоказателиТитульный.ОргУп;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20))); 
	ПризнВидаДок = Число(ПоказателиТитульный.ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	ОКВЭД = СокрЛП(ПоказателиТитульный.ОКВЭД1 + ПоказателиТитульный.ОКВЭД2)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД3 + ПоказателиТитульный.ОКВЭД4)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД5 + ПоказателиТитульный.ОКВЭД6);
	ОКВЭД = СтрЗаменить(СокрЛП(СтрЗаменить(ОКВЭД, ".", " ")), " ", ".");
	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 334;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг5) Тогда
		ДокПредставляется = 213;
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ОКВЭД:"  + ?(ОКВЭД = "", "-", СокрЛП(ОКВЭД)));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			ДокументПредставителя = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120)));
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ДокументПредставителя), "-", ВРЕГ(СокрЛП(ДокументПредставителя))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ОКВЭД:"  + ?(ОКВЭД = "", "-", СокрЛП(ОКВЭД)));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			ДокументПредставителя = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120)));
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ДокументПредставителя), "-", ВРЕГ(СокрЛП(ДокументПредставителя))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00003");
	Текст.ДобавитьСтроку("ПериодВерОтч:18.02.2008,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:0");
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ИмяРаздела = "Раздел21" И ПустойРаздел Тогда //!!!
			Если НЕ РазделПуст(КлючИЗначениеПоКлючу("Раздел21Продолжение", Разделы), ПоказателиОтчета) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					ном = ном + 1;
				КонецЦикла;
				~ВыходИзДвойногоЦикла_:
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;
		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦиклаВ:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_В:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Возврат СтатусПроверки <> 1;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П000030001002" И ТекСтрока <> "П000030001002:" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, "П000030001002:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(ТекСтрока, 15)));
		КонецЕсли;
		Если ТекСтрока = "П000030001004:," Тогда
			Текст.ЗаменитьСтроку(ТекИнд, "П000030001004:");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",ОписаниеТиповСтрока50);

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре   = КодПоказателяПоСтруктуре;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Найти(Область.Имя, "КБКв") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		ОпределениеБюджета = Сред(Область.Имя, 4);

		Если Найти(ОпределениеБюджета, "ФБ") > 0 Тогда
			ТипКБК = 1;
			ПервоначальноеЗначение = мКБКРаздел1_1;
		ИначеЕсли Найти(ОпределениеБюджета, "ФСС") > 0 Тогда
			ТипКБК = 2;
			ПервоначальноеЗначение = мКБКРаздел1_2;
		ИначеЕсли Найти(ОпределениеБюджета, "ФФОМС") > 0 Тогда
			ТипКБК = 3;
			ПервоначальноеЗначение = мКБКРаздел1_3;
		ИначеЕсли Найти(ОпределениеБюджета, "ТФОМС") > 0 Тогда
			ТипКБК = 4;
			ПервоначальноеЗначение = мКБКРаздел1_4;
		КонецЕсли;

		МаксДлина = 20; // ?(Год(ДатаПодписи) <= 2004, 7, 20);

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите КБК", МаксДлина) Тогда

				Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, МаксДлина, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			КонецЕсли;

			Возврат;

		КонецЕсли;

		ЗагрузитьПоказателиИзМакета("КБК2005Раздел1", ТипКБК);

		НайденнаяСтрока = мКБК2005Раздел1.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК", НайденнаяСтрока);
		Иначе
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 20, Результат.Получить(0));
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "СумНалог") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СуммаДля = Сред(Область.Имя, 11);
		МесяцСуммы = Сред(Область.Имя, 10, 1);
		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		СтандартнаяОбработка = Ложь;

		Если Найти(СуммаДля, "ФБ") > 0 Тогда
			ТипСуммы = 1;
		ИначеЕсли Найти(СуммаДля, "ФСС") > 0 Тогда
			ТипСуммы = 2;
		ИначеЕсли Найти(СуммаДля, "ФФОМС") > 0 Тогда
			ТипСуммы = 3;
		ИначеЕсли Найти(СуммаДля, "ТФОМС") > 0 Тогда
			ТипСуммы = 4;
		КонецЕсли;

		ИмяПеременной = "СуммаМес" + Строка(МесяцСуммы) + "Раздел1_" + Строка(ТипСуммы);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(ИмяПеременной);

		Если ВвестиЧисло(ПервоначальноеЗначение, "Введите сумму", 14, 2) Тогда
			Если ОбновитьПеременныеМодуля(ИмяПеременной, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 15, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "СумНал") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		НомерСуммы = Сред(Область.Имя, 7, 1);

		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаМес0Раздел1_" + НомерСуммы);

		Если ВвестиЧисло(ПервоначальноеЗначение, "Введите сумму", 14, 2) Тогда
			Если ОбновитьПеременныеМодуля("СуммаМес0Раздел1_" + НомерСуммы, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНал" + НомерСуммы + "_", 15, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "КодОКАТО") > 0) Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мОКАТОРаздел1;

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите ОКАТО", 11) Тогда

			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение) Тогда

				Если ОбновитьПеременныеМодуля("ОКАТОРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 11, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из цифр.");

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "ТипНП") > 0 Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодПлательщикаРаздел1;

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите тип налогоплательщика", 2) Тогда
				Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;

			Возврат;

		КонецЕсли;

		НайденнаяСтрока = мТипНалогоплательщика.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТипНалогоплательщика.ВыбратьСтроку(мТипНалогоплательщика, НайденнаяСтрока);
		Иначе
			Результат = мТипНалогоплательщика.ВыбратьСтроку(мТипНалогоплательщика);
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, Результат.Получить(0));
				Модифицированность = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти

// ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел21ПродолжениеПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел21ПродолжениеПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел21Продолжение");
	
КонецПроцедуры

// ПолеВыбораВариантЗаполненияРаздел2ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении

// ПолеВводаКомментарийРаздел2ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2ПриИзменении

// ПолеВыбораВариантЗаполненияРаздел21ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел21ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел21ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении

// ПолеВводаКомментарийРаздел21ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел21ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел21ПриИзменении

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если ИмяТекущейСтраницыПанели <> "Титульный" Тогда

		Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда

			Расчет("Раздел2");
			Расчет("Раздел1");

			Если ОбластьИмя = "П000020044004" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020050003", ОбластьИмя);
			ИначеЕсли ОбластьИмя = "П000020064006" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020070003", ОбластьИмя);
			КонецЕсли;

		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

			Если ОбластьИмя = "П000210004008" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210004008", ОбластьИмя);
			КонецЕсли;

			Расчет("Раздел21");
			
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21Продолжение" Тогда

			Если ОбластьИмя = "П000210008008" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210008008", ОбластьИмя);
			КонецЕсли;

			Расчет("Раздел21Продолжение");	

		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

			Если ОбластьИмя = "П000030001009_7" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_8", ОбластьИмя);
			ИначеЕсли ОбластьИмя = "П000030001009_8" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030001001_9", ОбластьИмя);
			КонецЕсли;

			Если (Найти(ОбластьИмя, "П000030001005") > 0) Или (Найти(ОбластьИмя, "П000030001006") > 0)
			   Или (Найти(ОбластьИмя, "П000030001007") > 0) Или (Найти(ОбластьИмя, "П000030001008") > 0)
			   Или (Найти(ОбластьИмя, "П000030001009") > 0) Тогда

				СтруктураГруппы1 = Неопределено;
				мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

				НомерСтроки = Сред(ОбластьИмя, 15);
				СтруктураГруппы1[Число(НомерСтроки) - 1][Сред(ОбластьИмя, 1, 13)] = Элемент.ТекущаяОбласть.Значение;
				Расчет("Раздел3");

			КонецЕсли;

		
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда

			Если ОбластьИмя = "П000310019005" Тогда
				мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", ОбластьИмя, ОбластьИмя);
			КонецЕсли;

			Расчет(ИмяТекущейСтраницыПанели);

		КонецЕсли;

		Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Процедуры и Функции для совместимости разных конфигураций. Временно до выравнивания модуля РО.

мСоставПоказателей = "СоставПоказателей2007Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКБК2005Раздел1 = Новый ТаблицаЗначений;
мКБК2005Раздел1.Колонки.Добавить("Код",,, 18);
мКБК2005Раздел1.Колонки.Добавить("Название",,, 50);

мТипНалогоплательщика = Новый ТаблицаЗначений;
мТипНалогоплательщика.Колонки.Добавить("Код",,, 3);
мТипНалогоплательщика.Колонки.Добавить("Название",,, 50);

мОписаниеТиповЧислоЕ   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока9   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000300010";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 11;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000030001001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(6));
СтруктураГруппы1.Колонки.Добавить("П000030001002", ОписаниеТиповСтрока254); // ФИО
СтруктураГруппы1.Колонки.Добавить("П000030001003", ОписаниеТиповДата); // Дата1
СтруктураГруппы1.Колонки.Добавить("П000030001004", ОписаниеТиповДата); // Дата2
СтруктураГруппы1.Колонки.Добавить("П000030001005", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000030001006", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000030001007", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000030001008", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000030001009", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000030001010", ОписаниеТиповДата);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// В данной декларации не многостраничных разделов. Объявим пустую структуру.
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА

// Версия формы
мВерсияФормы = "01/01/2007"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = "1151046";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");
ОбязРазделов.Добавить("Раздел21");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00003", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151046";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО ЕДИНОМУ СОЦИАЛЬНОМУ НАЛОГУ ДЛЯ НАЛОГОПЛАТЕЛЬЩИКОВ, ПРОИЗВОДЯЩИХ ВЫПЛАТЫ ФИЗИЧЕСКИМ ЛИЦАМ";

МногострочныеИсключения = Новый СписокЗначений;
МногострочныеИсключения.Добавить("П000010003000");
МногострочныеИсключения.Добавить("П000010004000");
МногострочныеИсключения.Добавить("П000010005000");
МногострочныеИсключения.Добавить("П000010006000");