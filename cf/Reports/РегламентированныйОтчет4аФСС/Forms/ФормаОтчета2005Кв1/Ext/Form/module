////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел21;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;
Перем мСтараяВерсияФормы;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Переменная для работы с адресом в удобном для пользователя виде
Перем мОргЮрАдресМНС;

Перем СвойстваЗаполненияОтчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ОргЮрАдрес", мОргЮрАдресМНС);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
	Если (ИДКонфигурации = "БП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "1.5")
		ИЛИ ИДКонфигурации = "БПКОРП"
		ИЛИ ИДКонфигурации = "БАУКОРП"
		ИЛИ ИДКонфигурации = "БАУ"
		ИЛИ (ИДКонфигурации = "ЗУП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "2.1") Тогда
				МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1БП11");
			Иначе
				МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");
			КонецЕсли;

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если (ИДКонфигурации = "БП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "1.5")
		ИЛИ ИДКонфигурации = "БПКОРП"
		ИЛИ ИДКонфигурации = "БАУКОРП"
		ИЛИ ИДКонфигурации = "БАУ"
		ИЛИ (ИДКонфигурации = "ЗУП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "2.1") Тогда
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1БП11");
	Иначе
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");
	КонецЕсли;

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		// установим цвет ячейки
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = Ложь;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

			Иначе

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;

			КонецЕсли;

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	// Период на титульном листе
	//мТитульный.Области.ПериодОтчета.Значение = СтрПериодОтчета;
	
	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
	Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
	Номер3МесяцаКвартала = НомерКвартала * 3;
	
	Название1МесяцаКвартала = Формат(Дата(НомерГода, Номер1МесяцаКвартала, 1), "ДФ=ММММ");
	Название2МесяцаКвартала = Формат(Дата(НомерГода, Номер2МесяцаКвартала, 1), "ДФ=ММММ");
	Название3МесяцаКвартала = Формат(Дата(НомерГода, Номер3МесяцаКвартала, 1), "ДФ=ММММ");
	
	мРаздел1.Области.Название1МесяцаКварталаВСтроке3.Значение = Название1МесяцаКвартала;
	мРаздел1.Области.Название2МесяцаКварталаВСтроке3.Значение = Название2МесяцаКвартала;
	мРаздел1.Области.Название3МесяцаКварталаВСтроке3.Значение = Название3МесяцаКвартала;

	мРаздел1.Области.Название1МесяцаКварталаВСтроке4.Значение = Название1МесяцаКвартала;
	мРаздел1.Области.Название2МесяцаКварталаВСтроке4.Значение = Название2МесяцаКвартала;
	мРаздел1.Области.Название3МесяцаКварталаВСтроке4.Значение = Название3МесяцаКвартала;

	мРаздел1.Области.Название1МесяцаКварталаВСтроке5.Значение = Название1МесяцаКвартала;
	мРаздел1.Области.Название2МесяцаКварталаВСтроке5.Значение = Название2МесяцаКвартала;
	мРаздел1.Области.Название3МесяцаКварталаВСтроке5.Значение = Название3МесяцаКвартала;

	мТитульный.Области.Период.Значение = "за " + СтрПериодОтчета;

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мТитульный.Области.ДатаПредставления.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения.Добавить("", "ИННЮЛ"); // ИНН
			Сведения.Добавить("", "КППЮЛ"); // КПП
			
			Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
			
			Сведения.Добавить("", "ОГРН");   // ОГРН
			Сведения.Добавить("", "КодНО");  // Код Налогового Органа
			Сведения.Добавить("", "РегистрационныйНомерФСС");
			
			Если ПБОЮЛ Тогда
				Сведения.Добавить("", "АдрПрописки");
			Иначе
				Сведения.Добавить("", "АдрЮР");
			КонецЕсли;
			
		КонецЕсли;
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ИННРук"); // ИНН руководителя
		
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
		
		Сведения.Добавить("", "ФИО");
		
		Сведения.Добавить("", "ФИОИсп");
		Сведения.Добавить("", "ТелИсп");
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		КППЮЛ = ""; // КПП
		
		НаимЮЛПол = ""; // Полное наименование 
		
		ФИОРук = ""; // ФИО руководителя
		ИННРук = ""; // ИНН руководителя
		
		ФИОБух = ""; // ФИО бухгалтера
		ИННБух = ""; // ИНН бухгалтера
		
		ОГРН = ""; // ОГРН
		КодНО = "";
		
		АдрЮР = "";
		
		ФИО = "";
		
		АдрПрописки = "";
		
		РегистрационныйНомерФСС = "";
		
		ФИОИсп = "";
		ТелИсп = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			
			// Получаем данные
			ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
			ОргСведения.Свойство("КППЮЛ", КППЮЛ);
			ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
			ОргСведения.Свойство("ОГРН",   ОГРН);
			ОргСведения.Свойство("КодНО",  КодНО);
			ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
			
			Если ПБОЮЛ Тогда
				ОргСведения.Свойство("АдрПрописки", АдрЮР);
			Иначе
				ОргСведения.Свойство("АдрЮР", АдрЮР);
			КонецЕсли;
			
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ИННРук", ИННРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ИННБух", ИННБух);
		ОргСведения.Свойство("ФИО", ФИО);
		ОргСведения.Свойство("ФИОИсп", ФИОИсп);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		
		Если ПБОЮЛ Тогда
			
			НаимЮлПол = ФИО;
			ФИОРук = ФИО;
			ФИОБух = "";
			ФИОИсп = "";
			ТелИсп = "";
			
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			
			мРаздел21.Области.ОргБухгалтер.Значение = ФИОБух;
			мРаздел21.Области.ОргДиректор.Значение = ФИОРук;
			
			Если ПБОЮЛ Тогда
				мТитульный.Области.ОргНазв.Значение = ФИО;
				мРаздел21.Области.ОргИсполнитель.Значение = "";
			Иначе
				мРаздел21.Области.ОргИсполнитель.Значение = ФИОИсп + ?(ЗначениеЗаполнено(ТелИсп), " " + ТелИсп, "");
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = "";
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
			КППЮЛ = "";
		КонецЕсли;
		
		мКППЮЛ = КППЮЛ;
		мТитульный.Области.ИНН.Значение = мИННЮЛ;
		мТитульный.Области.КПП.Значение = мКППЮЛ;
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОГРН.Значение)) Тогда
			мТитульный.Области.ОргКодОГРН.Значение = ОГРН;
		КонецЕсли;
		
		// Работаем с ФИО Бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел21.Области.ОргБухгалтер.Значение)) Тогда
			мРаздел21.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ФИО руководителя организации
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел21.Области.ОргДиректор.Значение)) Тогда
			мРаздел21.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел21.Области.ОргИсполнитель.Значение)) Тогда
			мРаздел21.Области.ОргИсполнитель.Значение = ФИОИсп + ?(ЗначениеЗаполнено(ТелИсп), " " + ТелИсп, "");
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргЮрАдрес.Значение)) Тогда
			
			Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрЮР, ",","")) Тогда
				
				мТитульный.Области.ОргЮрАдрес.Значение = "";
				мОргЮрАдресМНС = "";
				
			Иначе
				
				мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрЮр);
				мОргЮрАдресМНС = АдрЮр;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФССКод.Значение)) Тогда
			мТитульный.Области.ОргФССКод.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодИМНС.Значение)) Тогда
			мТитульный.Области.ОргКодИМНС.Значение = КодНО;
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ИзменитьТаблицуВариантовЗаполнения (НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);
	Модифицированность = Истина;

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

//Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции //Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

//Процедура ИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь)

	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
			ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
			ПереборЗнач = ПереборЗнач-1;
			// а если это многостраничный раздел?
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(ИмяСтраницы); // кол-во страниц в разделе
			// Всегда получим актуальную таблицу заполнения. Не эталонную.
			ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);

			Если ТаблицаВариантыЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ПолныйРучнойВвод Тогда
				// Если раздел многостраничный, то нужно насквозь все обнулять !!!

				Если КолСтрВРазделе = 1 Тогда

					Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли;
					КонецЦикла; // Для Каждого Строка Из

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
				КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
				Если КолСтрВРазделе >= 2 Тогда

					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 4 Тогда
								Строка.ВариантЗаполнения = 0; // полный ручной ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого
					КонецЦикла; // Для
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
				КонецЕсли; // КолСтрВРазделе >= 2

			ИначеЕсли ПолныйРучнойВвод Тогда

				// Всё в эталонном виде
				Если КолСтрВРазделе = 1 Тогда
					Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
						Если Стр.ВариантЗаполнения = 0 Тогда
							Стр.ВариантЗаполнения = 4
						КонецЕсли;
					КонецЦикла;

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

				КонецЕсли; // если одна страница в разделе

				Если КолСтрВРазделе >= 2 Тогда
					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 0 Тогда
								//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
								Строка.ВариантЗаполнения = 4; // полный автоматический ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого

					КонецЦикла; // Для

					// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

				КонецЕсли; // если более 1 страница в разделе

			КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);

				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Истина;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);

КонецПроцедуры

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	Перем Комментарий;

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	Если ВариантЗаполнения = 1 ИЛИ 
		ВариантЗаполнения = 2 ИЛИ
		ВариантЗаполнения = 3 Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Дельта            = НайденнаяСтрока.Дельта;
		Комментарий       = НайденнаяСтрока.Комментарий;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
		ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

	ИначеЕсли ВариантЗаполнения = 0 Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
	КонецЕсли;

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя) 

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		Расчет();
		Модифицированность = Истина;
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						//Иначе
						//	// выводим на печать все созданные страницы многостраничного раздела
						//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
						//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						//КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				//Иначе
				//	// выводим на печать все созданные страницы многостраничного раздела
				//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
				//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				//КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		//Иначе
		//	// выводим на печать все созданные страницы многостраничного раздела
		//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
		//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		//КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мОргЮрАдресМНС = мТитульный.Области.ОргЮрАдрес.Значение;
	мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		ОП000010002003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000010002003.Значение);
		ОП000010004003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000010004003.Значение);
		ОП000010005003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000010005003.Значение);
		ОП000010006003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000010006003.Значение);

		// строка 3
		мРаздел1.Области.П000010003003.Значение = ОП000010004003 + ОП000010005003 + ОП000010006003;
		
		// ТАБЛИЦА 2
		
		// строка 2 "Начислено страховых взносов
		// за отчетный квартал (месяцы)
		ОП000020002301 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020002301.Значение);
		ОП000020002401 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020002401.Значение);
		ОП000020002501 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020002501.Значение);
		мРаздел1.Области.П000020002201.Значение = ОП000020002301 + ОП000020002401 + ОП000020002501;

		// с начала года
		ОП000020002101 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020002101.Значение);
		мРаздел1.Области.П000020002003.Значение = ОП000020002101 + мРаздел1.Области.П000020002201.Значение;
		
		// строка 6
		ОП000020001003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020001003.Значение);
		ОП000020002003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020002003.Значение);
		ОП000020003003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020003003.Значение);
		ОП000020004003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020004003.Значение);
		ОП000020005003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020005003.Значение);
		мРаздел1.Области.П000020006003.Значение = ОП000020001003 + ОП000020002003 + ОП000020003003
		                                        + ОП000020004003 + ОП000020005003;
		
		// строка 9 "Зачтено расходов по временной нетрудоспособности"
		// за отчетный квартал (месяцы)
		ОП000020009301 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020009301.Значение);
		ОП000020009401 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020009401.Значение);
		ОП000020009501 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020009501.Значение);
		мРаздел1.Области.П000020009201.Значение = ОП000020009301 + ОП000020009401 + ОП000020009501;

		// с начала года
		ОП000020009101 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020009101.Значение);
		мРаздел1.Области.П000020009003.Значение = ОП000020009101 + мРаздел1.Области.П000020009201.Значение;

		// строка 11 "Перечислено на текущий счет по социальному страхованию"
		// за отчетный квартал (месяцы)
		ОП000020011303 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020011303.Значение);
		ОП000020011403 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020011403.Значение);
		ОП000020011503 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020011503.Значение);
		мРаздел1.Области.П000020011203.Значение = ОП000020011303 + ОП000020011403 + ОП000020011503;
		
		// с начала года
		ОП000020011103 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020011103.Значение);
		мРаздел1.Области.П000020011003.Значение = ОП000020011103 + мРаздел1.Области.П000020011203.Значение;
		
		// строка 12
		ОП000020008003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020008003.Значение);
		ОП000020009003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020009003.Значение);
		ОП000020011003 = ОкруглитьЧислоПоФормату(мРаздел1.Области.П000020011003.Значение);
		мРаздел1.Области.П000020012003.Значение = ОП000020008003 + ОП000020009003 + ОП000020011003;

		// строка 7
		мРаздел1.Области.П000020007003.Значение = ? ( мРаздел1.Области.П000020012003.Значение > мРаздел1.Области.П000020006003.Значение, мРаздел1.Области.П000020012003.Значение - мРаздел1.Области.П000020006003.Значение, 0 );
		
		// строка 13
		мРаздел1.Области.П000020013003.Значение = ? ( мРаздел1.Области.П000020006003.Значение > мРаздел1.Области.П000020012003.Значение, мРаздел1.Области.П000020006003.Значение - мРаздел1.Области.П000020012003.Значение, 0 );

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		ОП000050001004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050001004.Значение);
		ОП000050002004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050002004.Значение);
		ОП000050003004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050003004.Значение);
		ОП000050004004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050004004.Значение);
		ОП000050005004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050005004.Значение);
		ОП000050006004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050006004.Значение);
		ОП000050001005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050001005.Значение);
		ОП000050002005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050002005.Значение);
		ОП000050003005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000050003005.Значение);
		// строка 7, гр. 4

		мРаздел2.Области.П000050007004.Значение = ОП000050001004 + ОП000050002004 + ОП000050003004 +
		                ОП000050004004 + ОП000050005004 + ОП000050006004;
		
		// строка 7, гр. 5
		мРаздел2.Области.П000050007005.Значение = ОП000050001005 + ОП000050002005 + ОП000050003005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		ОП000060001006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060001006.Значение);
		ОП000060002006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060002006.Значение);
		ОП000060003006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060003006.Значение);
		ОП000060001008 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060001008.Значение);
		ОП000060002008 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060002008.Значение);
		ОП000060003008 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060003008.Значение);
		ОП000060001010 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060001010.Значение);
		ОП000060002010 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060002010.Значение);
		ОП000060003010 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060003010.Значение);
		ОП000060001012 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060001012.Значение);
		ОП000060002012 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060002012.Значение);
		ОП000060003012 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060003012.Значение);
		ОП000060001014 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060001014.Значение);
		ОП000060002014 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060002014.Значение);
		ОП000060003014 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000060003014.Значение);
		
		// ТАБЛИЦА 6

		// строки 1-3, гр.3 
		мРаздел21.Области.П000060001003.Значение = мРаздел21.Области.П000060001005.Значение + мРаздел21.Области.П000060001007.Значение + мРаздел21.Области.П000060001009.Значение + мРаздел21.Области.П000060001011.Значение + мРаздел21.Области.П000060001013.Значение;
		мРаздел21.Области.П000060002003.Значение = мРаздел21.Области.П000060002005.Значение + мРаздел21.Области.П000060002007.Значение + мРаздел21.Области.П000060002009.Значение + мРаздел21.Области.П000060002011.Значение + мРаздел21.Области.П000060002013.Значение;
		мРаздел21.Области.П000060003003.Значение = мРаздел21.Области.П000060003005.Значение + мРаздел21.Области.П000060003007.Значение + мРаздел21.Области.П000060003009.Значение + мРаздел21.Области.П000060003011.Значение + мРаздел21.Области.П000060003013.Значение;

		// строки 1-3, гр.4 
		мРаздел21.Области.П000060001004.Значение = ОП000060001006 + ОП000060001008 + ОП000060001010 + ОП000060001012 + ОП000060001014;
		мРаздел21.Области.П000060002004.Значение = ОП000060002006 + ОП000060002008 + ОП000060002010 + ОП000060002012 + ОП000060002014;
		мРаздел21.Области.П000060003004.Значение = ОП000060003006 + ОП000060003008 + ОП000060003010 + ОП000060003012 + ОП000060003014;

		// строка 4, графы 3-14
		мРаздел21.Области.П000060004003.Значение = мРаздел21.Области.П000060001003.Значение + мРаздел21.Области.П000060002003.Значение + мРаздел21.Области.П000060003003.Значение;
		мРаздел21.Области.П000060004004.Значение = мРаздел21.Области.П000060001004.Значение + мРаздел21.Области.П000060002004.Значение + мРаздел21.Области.П000060003004.Значение;
		мРаздел21.Области.П000060004005.Значение = мРаздел21.Области.П000060001005.Значение + мРаздел21.Области.П000060002005.Значение + мРаздел21.Области.П000060003005.Значение;
		мРаздел21.Области.П000060004006.Значение = ОП000060001006 + ОП000060002006 + ОП000060003006;
		мРаздел21.Области.П000060004007.Значение = мРаздел21.Области.П000060001007.Значение + мРаздел21.Области.П000060002007.Значение + мРаздел21.Области.П000060003007.Значение;
		мРаздел21.Области.П000060004008.Значение = ОП000060001008 + ОП000060002008 + ОП000060003008;
		мРаздел21.Области.П000060004009.Значение = мРаздел21.Области.П000060001009.Значение + мРаздел21.Области.П000060002009.Значение + мРаздел21.Области.П000060003009.Значение;
		мРаздел21.Области.П000060004010.Значение = ОП000060001010 + ОП000060002010 + ОП000060003010;
		мРаздел21.Области.П000060004011.Значение = мРаздел21.Области.П000060001011.Значение + мРаздел21.Области.П000060002011.Значение + мРаздел21.Области.П000060003011.Значение;
		мРаздел21.Области.П000060004012.Значение = ОП000060001012 + ОП000060002012 + ОП000060003012;
		мРаздел21.Области.П000060004013.Значение = мРаздел21.Области.П000060001013.Значение + мРаздел21.Области.П000060002013.Значение + мРаздел21.Области.П000060003013.Значение;
		мРаздел21.Области.П000060004014.Значение = ОП000060001014 + ОП000060002014 + ОП000060003014;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		Расчет("Раздел1");
		Расчет("Раздел2");
		Расчет("Раздел21");

	КонецЕсли;

КонецПроцедуры // Расчет()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт 

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	Если НЕ ((ИДКонфигурации = "БП" И РедакцияКонфигурации > "1.0")
			ИЛИ (ИДКонфигурации = "ЗУП" И РедакцияКонфигурации > "2.0")
			ИЛИ ИДКонфигурации = "УПП"
			ИЛИ ИДКонфигурации = "КА"
			ИЛИ ИДКонфигурации = "БПКОРП"
			ИЛИ ИДКонфигурации = "БАУКОРП"
			ИЛИ ИДКонфигурации = "БАУ") Тогда
		Возврат;
	КонецЕсли; 

	// Заполнение в редакциях конфигураций 2005 года
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",              Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",      ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода",    КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамНачалоГода",               НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1",                        Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2",                        Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3",                        Месяц(мДатаКонцаПериодаОтчета));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// конец месяца налогового периода
	//КонецМесяца = КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета));

	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));

	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчет - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации <> "ЗУП" Тогда
 		УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР
		|		КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, Ложь) КАК УплачиватьДобровольныеВзносыВФСС
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)";	
	Иначе
	 	УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, Ложь) КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, Ложь) КАК УплачиватьДобровольныеВзносыВФСС
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация";	
	КонецЕсли;

	// ДоходыЕСН 
	//	ФизЛицо 	 	- физическое лицо 
	//	Месяц			- месяц налогового периода
	//	КодДоходаЕСН	- код дохода с точки зрения ЕСН
	//	Результат		- сумма дохода
	//	Скидка			- необлагаемая ЕСН сумма дохода
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН, относящиеся к видам деятельности 
	//  облагаемым налогом на прибыль, строго по заданной организации. 
	
	ДоходыЕСН = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	|	ЕСНСведенияОДоходах.Результат КАК Результат,
	|	ЕСНСведенияОДоходах.Скидка КАК Скидка,
	|	ЕСНСведенияОДоходах.ОблагаетсяЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
	|	И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС";
	
	// НалоговыеБазыПоМесяцам 
	//	ФизЛицо 	 	- физическое лицо 
	//	БазаФедеральныйБюджет - налоговая база по ФБ
	//	БазаФСС - налоговая база по ФСС
	//	БазаФОМС - налоговая база по ФОМС
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН за вычетом скидок строго по заданной организации. 
	
	НалоговыеБазыПоМесяцам = "
	|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (УчетнаяПолитикаНалоговыйУчет.УСН ИЛИ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000010002003,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.Месяц = &Месяц1 И УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (УчетнаяПолитикаНалоговыйУчет.УСН ИЛИ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000010004003,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.Месяц = &Месяц2 И УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (УчетнаяПолитикаНалоговыйУчет.УСН ИЛИ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000010005003,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.Месяц = &Месяц3 И УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (УчетнаяПолитикаНалоговыйУчет.УСН ИЛИ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000010006003
	|ИЗ
	|	(" + ДоходыЕСН + " ) КАК ЕСННачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ЕСННачисления.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц
	|";
	
	// Таблица 1
	
	Запрос.Текст = УчетнаяПолитикаНалоговыйУчет;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Месяц
	|ИЗ
	|  ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.УСН";	
	СписокМесяцевУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Месяц");
	
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		НалоговыеБазыПоМесяцам = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСННачисления.ФизЛицо) КАК П000010001003," + НалоговыеБазыПоМесяцам;
	ИначеЕсли ИДКонфигурации = "ЗУП"  И РедакцияКонфигурации = "2.1" Тогда 	
		НалоговыеБазыПоМесяцам = "ВЫБРАТЬ" + НалоговыеБазыПоМесяцам;
		// расчет среднесписочной численности
		ЧисленностьРаботниковНаСпецрежимах = 0;
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		Отчет.РазворачиватьЧисленностьПоМесяцам = Истина;
		Отчет.ЗаполнитьНачальныеНастройки();
		Отчет.ОбщийОтчет.ДатаНач = мДатаНачалаПериодаОтчета;
		Отчет.ОбщийОтчет.ДатаКон = мДатаКонцаПериодаОтчета;
		Отчет.ОбщийОтчет.ПостроительОтчета.Отбор.Организация.Установить(Организация);
		РезультатЗапроса = Отчет.ВыполнитьЗапросОтчета();
		Если РезультатЗапроса <> Неопределено И Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			КоличествоМесяцевРаботы = Выборка.Количество();
			
			Пока Выборка.Следующий() Цикл
				ЭтоМесяцУСН = СписокМесяцевУСН.Найти(Месяц(Выборка.МесяцОтчета)) <> Неопределено;
				ЧисленностьРаботниковНаСпецрежимах = ЧисленностьРаботниковНаСпецрежимах + ?(ЭтоМесяцУСН,Окр(Выборка.СредняяЧисленностьВМесяце),Окр(Выборка.СредняяЧисленностьВМесяцеЕНВД));
			КонецЦикла;
			
			УстановитьЗначениеПоказателя("П000010001003", Окр(ЧисленностьРаботниковНаСпецрежимах / КоличествоМесяцевРаботы));
			
		КонецЕсли;
	Иначе 	
		НалоговыеБазыПоМесяцам = "ВЫБРАТЬ" + НалоговыеБазыПоМесяцам;
		// расчет среднесписочной численности
		ЧисленностьРаботниковНаСпецрежимах = 0;
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ТаблицаСреднихЧисленостей = Отчет.ПолучитьТаблицуЧисленностей(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
		Если ТаблицаСреднихЧисленостей.Количество() > 0 Тогда
			КоличествоМесяцевРаботы = ТаблицаСреднихЧисленостей.Количество();
			Для каждого СтрокаМесяца из ТаблицаСреднихЧисленостей Цикл
				ЭтоМесяцУСН = СписокМесяцевУСН.Найти(Месяц(СтрокаМесяца.МесяцОтчета)) <> Неопределено;
				ЧисленностьРаботниковНаСпецрежимах = ЧисленностьРаботниковНаСпецрежимах + ?(ЭтоМесяцУСН, Окр(СтрокаМесяца.СредняяЧисленность), Окр(СтрокаМесяца.СредняяЧисленностьЕНВД));
			КонецЦикла;
			УстановитьЗначениеПоказателя("П000010001003", Окр(ЧисленностьРаботниковНаСпецрежимах / КоличествоМесяцевРаботы));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = НалоговыеБазыПоМесяцам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Таблица 2
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		// Заполняем по данным бухгалтерского учета.
		
		// Инициализация
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет51    = ПС.РасчетныеСчета;
		Счет69_12 = ПС.ФСС_ДобровольныеВзносы;
		Счет70    = ПС.РасчетыСПерсоналомПоОплатеТруда;
		
		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		
		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		// Переменные, содержащие необходимые для вычислений даты
		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;
		
		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		ДатаНачала1МесяцаКвартала = НачалоМесяца(ДатаВ1МесяцеКвартала);
		ДатаКонца1МесяцаКвартала  = КонецМесяца(ДатаВ1МесяцеКвартала);
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 1);
		
		ДатаНачала2МесяцаКвартала = НачалоМесяца(ДатаВо2МесяцеКвартала);
		ДатаКонца2МесяцаКвартала  = КонецМесяца(ДатаВо2МесяцеКвартала);
		
		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 1);
		
		ДатаНачала3МесяцаКвартала = НачалоМесяца(ДатаВ3МесяцеКвартала);
		ДатаКонца3МесяцаКвартала  = КонецМесяца(ДатаВ3МесяцеКвартала);
		
		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		ВзносыМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		УстановитьЗначениеПоказателя("П000020002301", ВзносыМ1КВ);
		
		//****************
		// строка 9 "Зачтено расходов по временной нетрудоспособности*"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);
		
		РасходыПоСтрахованиюМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000020009301", РасходыПоСтрахованиюМ1КВ);
		
		//****************
		// строка 11 "Перечислено на текущий счет по социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		ПеречисленоВзносовМ1КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ1КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		ПеречисленоМ1КВ = ПеречисленоВзносовМ1КВ + ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовАктМ1КВ + ВозвратРасходовМ1КВ;
		УстановитьЗначениеПоказателя("П000020011303", ПеречисленоМ1КВ);
		
		//**********************************************************************
		// Извлекаем данные за 2 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		ВзносыМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		УстановитьЗначениеПоказателя("П000020002401", ВзносыМ2КВ);
		
		//****************
		// строка 9 "Зачтено расходов по временной нетрудоспособности*"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);
		
		РасходыПоСтрахованиюМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000020009401", РасходыПоСтрахованиюМ2КВ);
		
		//****************
		// строка 11 "Перечислено на текущий счет по социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		ПеречисленоВзносовМ2КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ2КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		ПеречисленоМ2КВ = ПеречисленоВзносовМ2КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовАктМ2КВ + ВозвратРасходовМ2КВ;
		УстановитьЗначениеПоказателя("П000020011403", ПеречисленоМ2КВ);
		
		//**********************************************************************
		// Извлекаем данные за 3 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		ВзносыМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		УстановитьЗначениеПоказателя("П000020002501", ВзносыМ3КВ);
		
		//****************
		// строка 9 "Зачтено расходов по временной нетрудоспособности*"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);
		
		РасходыПоСтрахованиюМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000020009501", РасходыПоСтрахованиюМ3КВ);
		
		//****************
		// строка 11 "Перечислено на текущий счет по социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		ПеречисленоВзносовМ3КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ3КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		ПеречисленоМ3КВ = ПеречисленоВзносовМ3КВ + ПеречисленоВзносовСамМ3КВ + ПеречисленоВзносовАктМ3КВ + ВозвратРасходовМ3КВ;
		УстановитьЗначениеПоказателя("П000020011503", ПеречисленоМ3КВ);
		
		//****************************************************************************
		// В целом за квартал
		
		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		СНК_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СНД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СКД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КО_Взносы  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СНК_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		СНД_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		КО_ВзносыСам  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		
		СНК_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		СНД_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		КО_ВзносыАкт  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		
		СНК_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СНД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СКД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		
		СНК_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		СНД_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		
		КО_НеПринято = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		Задолж =  СНК_Взносы + СНК_ВзносыСам + СНК_ВзносыАкт + СНК_РасходыПоСтрахованию + СНК_ПолученоИзфонда
		- (СНД_Взносы + СНД_ВзносыСам + СНД_ВзносыАкт + СНД_РасходыПоСтрахованию + СНД_ПолученоИзфонда);
		
		Если Задолж > 0 Тогда 
			
			// строка 1 "Задолженность за страхователем на начало года"
			УстановитьЗначениеПоказателя("П000020001003", Задолж);
			
		Иначе 
			
			// строка 8 "Задолженность за исполнительным органом Фонда на начало года"
			УстановитьЗначениеПоказателя("П000020008003", -Задолж);
			
		КонецЕсли;
		
		// строка 2 "Начислено страховых взносов"
		ВзносыКВН = КО_Взносы;
		
		// на начало квартала
		ВзносыНачКВ = ВзносыКВН - (ВзносыМ1КВ + ВзносыМ2КВ + ВзносыМ3КВ);
		
		УстановитьЗначениеПоказателя("П000020002101", ВзносыНачКВ);
		
		// строка 3 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктКВН = КО_ВзносыАкт;
		
		УстановитьЗначениеПоказателя("П000020003003", ДоплатаВзносыАктКВН);
		
		// строка 4 "Не принято к зачету расходов исполнительным органом Фонда"
		УстановитьЗначениеПоказателя("П000020004003", КО_НеПринято);
		
		// строка 5 "Получено от исполнительного органа Фонда на банковский счет в возмещение произведенных расходов"
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		ПолученоИзФондаКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		УстановитьЗначениеПоказателя("П000020005003", ПолученоИзФондаКВН);
		
		// строка 9 "Зачтено расходов по временной нетрудоспособности" - на начало квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);
		
		РасходыПоСтрахованиюКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РасходыПоСтрахованиюНачКВ = РасходыПоСтрахованиюКВН - (РасходыПоСтрахованиюМ1КВ + РасходыПоСтрахованиюМ2КВ + РасходыПоСтрахованиюМ3КВ);
		
		УстановитьЗначениеПоказателя("П000020009101", РасходыПоСтрахованиюНачКВ);
		
		// строка 11 "Перечислено на текущий счет по социальному страхованию" - на начало квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.12", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		ПеречисленоВзносовКВН    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовКВН       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		// на начало квартала 
		ПеречисленоВзносовНачКВ    = ПеречисленоВзносовКВН - (ПеречисленоВзносовМ1КВ + ПеречисленоВзносовМ2КВ + ПеречисленоВзносовМ3КВ);
		ПеречисленоВзносовСамНачКВ = ПеречисленоВзносовСамКВН - (ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовСамМ3КВ);
		ПеречисленоВзносовАктНачКВ = ПеречисленоВзносовАктКВН - (ПеречисленоВзносовАктМ1КВ + ПеречисленоВзносовАктМ2КВ + ПеречисленоВзносовАктМ3КВ);
		ВозвратРасходовНачКВ       = ВозвратРасходовКВН - (ВозвратРасходовМ1КВ + ВозвратРасходовМ2КВ + ВозвратРасходовМ3КВ);
		
		ПеречисленоНачКВ = ПеречисленоВзносовНачКВ + ПеречисленоВзносовСамНачКВ + ПеречисленоВзносовАктНачКВ + ВозвратРасходовНачКВ;
		
		УстановитьЗначениеПоказателя("П000020011103", ПеречисленоНачКВ);
		
	КонецЕсли; 
	
	Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		//заполним еще количество дней и случаев
		СписокПричинНетрудоспособности = Новый СписокЗначений();
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ТравмаВБыту);
		СписокПричинНетрудоспособности.Добавить(NULL);
		Запрос.УстановитьПараметр("ДатаНачала",  					НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("ДатаОкончания",  				КонецДня(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("ПричинаПоУмолчанию",  			Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		Запрос.УстановитьПараметр("СписокПричинНетрудоспособности",	СписокПричинНетрудоспособности);
		Запрос.УстановитьПараметр("ПоДням",							Перечисления.ВидыУчетаВремени.ПоДням);
		Запрос.УстановитьПараметр("ДатаЗакона202ФЗ",				'20050101');

		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			РасходыПоПособиям = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000020014000,
			|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) ТОГДА ОсновныеНачисления.НормаДней - ЕСТЬNULL(ДанныеУчетаБЛ.ДниЗаСчетРаботодателя, 0) ИНАЧЕ 0 КОНЕЦ) КАК П000020015000
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.Сотрудник КАК Сотрудник,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало КАК ДатаНачала,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец КАК ДатаОкончания,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|			И ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|			И ЕСНОсновныеНачисления.Организация = &парамГоловнаяОрганизация
			|			И ЕСНОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|			И ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.Сотрудник,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.Сотрудник = РаспределениеПоВидамДеятельности.Сотрудник
			|			И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета
			|			И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|			И ОсновныеНачисления.ПериодДействияНачало <= РаспределениеПоВидамДеятельности.ДатаНачала
			|			И ОсновныеНачисления.ПериодДействияКонец >= РаспределениеПоВидамДеятельности.ДатаОкончания
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням
			|					ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)
			|				ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
			|			КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ГДЕ
			|				ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|				И ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|				И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|				И ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
			|				И ВЫБОР
			|						КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|							ТОГДА ОсновныеНачисления.Регистратор.ПричинаНетрудоспособности
			|						ИНАЧЕ &ПричинаПоУмолчанию
			|				  КОНЕЦ В (&СписокПричинНетрудоспособности)
			|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
			|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
			|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
			|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор
			|			И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|	И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|	И ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
		Иначе
			
			РасходыПоПособиям = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000020014000,
			|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) ТОГДА ОсновныеНачисления.НормаДней - ЕСТЬNULL(ДанныеУчетаБЛ.ДниЗаСчетРаботодателя, 0) ИНАЧЕ 0 КОНЕЦ) КАК П000020015000
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.ФизЛицо КАК ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ КАК Приказ,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало КАК ДатаНачала,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец КАК ДатаОкончания,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|			И ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|			И ЕСНОсновныеНачисления.Организация = &парамГоловнаяОрганизация
			|			И ЕСНОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|			И ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.ФизЛицо = РаспределениеПоВидамДеятельности.ФизЛицо
			|			И ОсновныеНачисления.Приказ = РаспределениеПоВидамДеятельности.Приказ
			|			И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета
			|			И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|			И ОсновныеНачисления.ПериодДействияНачало <= РаспределениеПоВидамДеятельности.ДатаНачала
			|			И ОсновныеНачисления.ПериодДействияКонец >= РаспределениеПоВидамДеятельности.ДатаОкончания
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням
			|					ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)
			|				ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
			|			КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ГДЕ
			|				ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|				И ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|				И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|				И ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
			|				И ВЫБОР
			|						КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|							ТОГДА ОсновныеНачисления.Регистратор.ПричинаНетрудоспособности
			|						ИНАЧЕ &ПричинаПоУмолчанию
			|				  КОНЕЦ В (&СписокПричинНетрудоспособности)
			|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
			|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
			|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
			|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор
			|			И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|	И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|	И ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
		КонецЕсли;
		
		Запрос.Текст = РасходыПоПособиям;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	КонецЕсли;
	
	// Расчет автовычисляемых полей
	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний() Экспорт

Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры  // ЗаполнитьАвтоВнешний


Процедура НачальнаяПодготовкаФормы() Экспорт 
    ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	мВПрограммеИзмененаОрганизация = Ложь;
	мАвтоВыборКодов = Ложь;

	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел21 = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда


		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			//мРаздел1_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год (сумма";
			//мРаздел2_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год (сумма";
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <>  Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();
	ЗаполнитьДатуВЯчейках();
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		мДокументВосстановлен = Ложь;
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	мСтараяВерсияФормы = мВерсияФормы;

	мПериодичность = Перечисления.Периодичность.Квартал;

	НачальнаяПодготовкаФормы();

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	// сделано, для того, чтобы не переделывать процедуры и функции где есть имя Лист02
	//ИмяТекущейСтраницыПанели = "Лист02";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если (Вариант <> Неопределено) Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";

		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 240, 200) Тогда
			ОписаниеЯчейки    = "Либо вручную, либо автоматически";

		КонецЕсли;
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

	КонецЕсли;

	
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)

	РазделЯвляетсяАвтозаполняемым = ПолучитьСвойствоРаздела(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя, "РазделЯвляетсяАвтозаполняемым");

	Если РазделЯвляетсяАвтозаполняемым Тогда
		ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел I (таблицы 1, 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел II (таблица 3, 4, 5)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 6)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если (ИДКонфигурации = "БП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "1.5")
		ИЛИ ИДКонфигурации = "БПКОРП"
		ИЛИ ИДКонфигурации = "БАУКОРП"
		ИЛИ ИДКонфигурации = "БАУ"
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" И РегламентированнаяОтчетность.РедакцияКонфигурации() >= "2.1") Тогда
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1БП11");
	Иначе
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");
	КонецЕсли;

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	мОргЮрАдресМНС = "";

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Расчет(ИмяТекущейСтраницыПанели);
	Модифицированность = Истина;

	Если ПолучитьСвойствоРаздела(ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// ПолеТабличногоДокументаТитульныйВыбор
// Процедура-обработчик события "Выбор" для титульного листа декларации
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "ОргЮрАдрес") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мОргЮрАдресМНС);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мОргЮрАдресМНС = ВводАдреса.НачальноеЗначениеВыбора.Представление;

			Если мОргЮрАдресМНС = ",,,,,,,,," Тогда
				мОргЮрАдресМНС = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// ПолеТабличногоДокументаТитульныйАдресЮрПриИзменении
// Процедура-обработчик события "ПриИзменении" для адреса на титульном листе
//
Процедура ПолеТабличногоДокументаТитульныйАдресЮрПриИзменении(Элемент)

	мОргЮрАдресМНС = Элемент.Значение;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйАдресЮрПриИзменении

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов = Новый Структура;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/05/2005";

// Код отчета условный
мКодОтчета   = 1159999;

мПечатныеФормы = Новый СписокЗначений;