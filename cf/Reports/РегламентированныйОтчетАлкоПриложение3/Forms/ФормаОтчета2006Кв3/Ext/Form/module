////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мДекларация;

// Хранят сведения о должностных лицах
Перем мОргТип;
Перем мОргКодИМНС;
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННУпПред;

Перем мВидыДеятельности;
Перем мКодыВидовПродукции;

Перем мВидДеят; // Хранится код вида деятельности для выгрузки в эл. виде

// Хранят имена многострочных разделов
Перем мИдГруппы1; // Декларация

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мОписаниеТиповЧислоЕ;

// Хранит код отчета по КНД
Перем мКодОтчета;

// в случае, если отчет открывается, то они мВерсияФормы = мСтараяВерсияФормы
Перем мСтараяВерсияФормы Экспорт;

Перем мИННЮЛ;
Перем мКППЮЛ;
Перем мТелОрганизации;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;

Перем мОписаниеТиповБулево;

Перем мБезОткрытияФормы Экспорт;

// Переменная для механизма работы с адресом на титульном листе.
Перем мАдрЮРТитульныйВыгрузка;

Перем мПустойОбразЛистаФЛ;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	Если ИмяТекущейСтраницыПанели = "Титульный" Тогда
		ОбработкаАдресаПриЛистании();
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// ВозвратитьПустойОбразЛистаФЛ
//
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции // ВозвратитьПустойОбразЛистаФЛ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("ПерестановкаСтраницЗапрещена", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000000000002";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	// Оставлена для совместимости, не удалять.
	Возврат;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мДекларация;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	СтруктураДанныхПоля = Новый Структура;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	КонецЕсли;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

		Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
			Если мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы) > 0 Тогда
				Если НЕ ((ИмяПоказателя = "СерЛиц") Или (ИмяПоказателя = "НомерЛиц")
				 Или (ИмяПоказателя = "ДатаНачЛиц") Или (ИмяПоказателя = "ДатаОконЛиц")
				 Или (Найти(ИмяПоказателя, "ИНН1_") > 0)
				 Или (Найти(ИмяПоказателя, "КПП1_") > 0)) Тогда
					ЗначениеПоказателя = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		Если мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы) = 0 Тогда
			СтруктураДанныхПоля.Вставить("АдрЮР", мАдрЮРТитульныйВыгрузка);
			СтруктураДанныхПоля.Вставить("ВидДеят", мВидДеят);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОбработатьВидДеятельности
//
Процедура ОбработатьВидДеятельности()

	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	ОткрытДоступ = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы) > 0;

	Если ОткрытДоступ Тогда
		Цвет = Новый Цвет(255, 255, 255);
	Иначе
		Цвет = Новый Цвет(255, 255, 192);
	КонецЕсли;

	мТитульный.Области.ВидДеятельности.ЦветФона = Цвет;
	мТитульный.Области.ТипОрг1.ЦветФона = Цвет;
	мТитульный.Области.ТипОрг2.ЦветФона = Цвет;
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЦветФона = Цвет;
		мТитульный.Области["Прил" + Инд].ЦветФона = Цвет;
		мТитульный.Области["СоставленаНа" + Инд].Защита = ОткрытДоступ;
		мТитульный.Области["Прил" + Инд].Защита = ОткрытДоступ;
	КонецЦикла;

	мТитульный.Области.ВидДеятельности.Защита = ОткрытДоступ;
	мТитульный.Области.ТипОрг1.Защита = ОткрытДоступ;
	мТитульный.Области.ТипОрг2.Защита = ОткрытДоступ;
	
	мТитульный.Области.ОргИМНС.ЦветФона = Цвет;
	мТитульный.Области.ОргИМНС.Защита = ОткрытДоступ;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЦветФона = Цвет;
		мТитульный.Области["КодИМНС" + Инд].Защита = ОткрытДоступ;
	КонецЦикла;

КонецПроцедуры // ОбработатьВидДеятельности

// ОчиститьТитульныйЛист
// Процедура очищает титульный лист, включая защищенные ячейки, обходя данные о лицензии.
//
Процедура ОчиститьТитульныйЛист()
	Для Инд = 0 По мТитульный.Области.Количество() - 1 Цикл
		ТекущаяОбласть = мТитульный.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя = ТекущаяОбласть.Имя;
		Если (ИмяПоказателя = "СерЛиц") Или (ИмяПоказателя = "НомерЛиц")
		 Или (ИмяПоказателя = "ДатаНачЛиц") Или (ИмяПоказателя = "ДатаОконЛиц")
		 Или (Найти(ИмяПоказателя, "ИНН1_") > 0)
		 Или (Найти(ИмяПоказателя, "КПП1_") > 0) Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОбласть.Значение = "";
	КонецЦикла;

КонецПроцедуры // ОчиститьТитульныйЛист

// УстановитьРеквизитыВидДок
// Процедура устанавливает в структуре вид документа и номер корректировки, если тек. лист не является активным
//
// Параметров нет.
//
Процедура УстановитьРеквизитыВидДок()
	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	Ном = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы);

	Если Ном > 0 Тогда
		ВидДок = мТитульный.Области.ВидДок.Значение;
		НомКоррект = мТитульный.Области.НомКоррект.Значение;
		мСтруктураМногостраничныхРазделов.Титульный[0].Данные.Вставить("ВидДок", ВидДок);
		мСтруктураМногостраничныхРазделов.Титульный[0].Данные.Вставить("НомКоррект", НомКоррект);
		мТитульный.Области.ВидДок.Значение = "";
		мТитульный.Области.НомКоррект.Значение = "";
	КонецЕсли;

КонецПроцедуры // УстановитьРеквизитыВидДок

// ОбработкаАдресаПриЛистании
//
Процедура ОбработкаАдресаПриЛистании()
	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	Если мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы) = 0 Тогда
		мТитульный.Области.АдрЮР.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдрЮРТитульныйВыгрузка, Истина);
	Иначе
		мТитульный.Области.АдрЮР.Значение = "";
	КонецЕсли;
КонецПроцедуры // ОбработкаАдресаПриЛистании

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2006Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				
				Если РазделВМакете = "КодыВидовПродукции" Тогда

					НовСтрока = мКодыВидовПродукции.Добавить();

				ИначеЕсли РазделВМакете = "ВидыДеятельности" Тогда

					НовСтрока = мВидыДеятельности.Добавить();

				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 Тогда
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт

	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");

			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Если (мДокументВосстановлен) И (мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	Если мСтруктураМногостраничныхРазделов.Титульный.Количество() > 1 Тогда
		НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
		ИндексАктивногоЭкз = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы);
		Если ИндексАктивногоЭкз > 0 Тогда
			// Перейдем на первый экземпляр титульного листа.
			ПоказатьСтраницуМногостраничногоРаздела(0, "Титульный", Истина);
		КонецЕсли;
	КонецЕсли;

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц Тогда
		мТитульный.Области.НалогПериод.Значение = "1 / " + РегламентированнаяОтчетность.ДополнитьСтроку(НомерМесяца, 2, "0");
	Иначе
		Если НомерМесяца = "3" Тогда
			мТитульный.Области.НалогПериод.Значение = "3";
		ИначеЕсли НомерМесяца = "6" Тогда
			мТитульный.Области.НалогПериод.Значение = "6";
		ИначеЕсли НомерМесяца = "9" Тогда
			мТитульный.Области.НалогПериод.Значение = "9";
		ИначеЕсли НомерМесяца = "12" Тогда
			мТитульный.Области.НалогПериод.Значение = "0";
		КонецЕсли;

	КонецЕсли;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	Если мСтруктураМногостраничныхРазделов.Титульный.Количество() > 1 Тогда
		Если ИндексАктивногоЭкз > 0 Тогда
			ПоказатьСтраницуМногостраничногоРаздела(ИндексАктивногоЭкз, "Титульный", Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиУП = "";

	Если РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = "        ";
	Иначе
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = "        ";
	Иначе
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргУП.Значение) Тогда
		ДатаПодписиУп = "        ";
	Иначе
		ДатаПодписиУп = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	мДекларация.Области.ДатаПодписанияОтчета.Значение = ДатаПодписи;

	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Декларация Цикл
		Если Стр.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Декларация", Ложь);
		КонецЕсли;
		Стр.Данные.ДатаПодписанияОтчета = ДатаПодписи;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	ИндексАктивногоЭкз = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы);
	Если ИндексАктивногоЭкз > 0 Тогда
		// Покажем первую страницу
		ПоказатьСтраницуМногостраничногоРаздела(0, "Титульный", Истина);
		ЭлементыФормы.НадписьСтатикСтраницТитульный.Заголовок = Строка(ИндексАктивногоЭкз + 1) + " из " + мСтруктураМногостраничныхРазделов.Титульный.Количество();
	КонецЕсли;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ОКАТО, АдрЮР, ОГРН, ТелОрганизации, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух, ФИОУпПред, ФИОИсп, ИННРук, ИННБух, ИННУпПред";

	ПолучитьИННКПП();

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если Результат <> Неопределено Тогда
		мИННДиректор = Результат.ИННРук;
		мИННБухгалтер = Результат.ИННБух;
		мИННУпПред = Результат.ИННУпПред;
	КонецЕсли;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		мИННДиректор = Результат.ИННРук;
		мИННБухгалтер = Результат.ИННБух;
		мИННУпПред = Результат.ИННУпПред;

		мТитульный.Области.ОКАТОТитульный.Значение = Результат.ОКАТО;

		ТипНП = Результат.ТипНП;
		Если ТипНП = 1 Тогда
			// Необходимо анализировать здесь, является ли ЮР лицом или является ПБОЮЛом
			мТитульный     .Области.ТипОрг1.Значение = "V";
			мТитульный     .Области.ТипОрг2.Значение = "";
		ИначеЕсли ТипНП = 2 Тогда
			мТитульный     .Области.ТипОрг2.Значение = "V";
			мТитульный     .Области.ТипОрг1.Значение = "";
		КонецЕсли;
		РегламентированнаяОтчетность.УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(ЭтаФорма);

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			мТитульный.Области.АдрЮР.Значение = "";
			мАдрЮРТитульныйВыгрузка = "";
		Иначе
			мТитульный.Области.АдрЮР.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
			мАдрЮРТитульныйВыгрузка = РегламентированнаяОтчетность.ЗаменитьТекстРегионаНаКодРегиона(Результат.АдрЮР);
		КонецЕсли;

		мДекларация.Области.Руководитель.Значение = Результат.ФИОРук;

		мДекларация.Области.Бухгалтер.Значение = Результат.ФИОБух;

		мДекларация.Области.Исполнитель.Значение = Результат.ФИОИсп;

		мДекларация.Области.ТелОрганизации.Значение = Результат.ТелОрганизации;

	КонецЕсли;

	Если Результат <> Неопределено Тогда
		ПроставитьНаВсехЛистахСпец(Результат.ФИОРук, Результат.ФИОБух, Результат.ФИОИсп);
	КонецЕсли;

	Если ИндексАктивногоЭкз > 0 Тогда
		// Вернемся на активную страницу до обновления данных.
		ПоказатьСтраницуМногостраничногоРаздела(ИндексАктивногоЭкз, "Титульный", Истина);
		// Организуме цикл по экземплярности титульного листа с целью очистке ИНН и КПП, которые проставляются при обновлении на всех листах.
		//Для каждого Зап Из мСтруктураМногостраничныхРазделов.Титульный Цикл

		//	Если мСтруктураМногостраничныхРазделов.Титульный.Индекс(Зап) = 0 Тогда
		//		// Пропустимм основной первый лист экземплярности титульного листа.
		//		Продолжить;
		//	КонецЕсли;

		//	Для Инд = 1 по 12 Цикл
		//		Счетчик = Строка(Инд);
		//		Зап.Данные.Вставить("ИНН1_" + Счетчик, "");
		//		Если Инд <= 9 Тогда
		//			Зап.Данные.Вставить("КПП1_" + Счетчик, "");
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// ПроставитьНаВсехЛистахСпец
// Процедура проставить на всех страницах раздела 1 требуемые значения
// Параметры:
//  ОргДиректор    - ФИО директора
//  ОргБухгалтер   - ФИО бухгалтера
//
Процедура ПроставитьНаВсехЛистахСпец(Знач ОргДиректор, Знач ОргБухгалтер, Знач Исполнитель)

	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Декларация Цикл
		Если Стр.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Декларация", Ложь);
		КонецЕсли;
		Стр.Данные.Руководитель = ОргДиректор;
		Стр.Данные.Бухгалтер = ОргБухгалтер;
		Стр.Данные.Исполнитель = Исполнитель;
	КонецЦикла;

	мДекларация.Области.Руководитель.Значение = ОргДиректор;
	мДекларация.Области.Бухгалтер.Значение = ОргБухгалтер;
	мДекларация.Области.Исполнитель.Значение = Исполнитель;

КонецПроцедуры // ПроставитьНаВсехЛистахСпец

// ЗаполнитьСведенияОбФЛ
//
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)

	Перем ТаблицаСтраницРаздела;

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");
	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");
		// Инициализируем данные о УП
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные = ВозвратитьПустойОбразЛистаФЛ();
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные = ВозвратитьПустойОбразЛистаФЛ();
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(мИННДиректор) Тогда

		ФИОДиректора = мТитульный.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда

		ФИОБухгалтера = мТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2, , ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда
		Попытка
			ФИООргУП = мТитульный.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если АктивнаяСтр <> Неопределено Тогда

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, "ФизЛица");

	Иначе

		Сообщить("Ошибка установки активной страницы ФЛ");

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбФЛ()

// ВыводДанныхОФизическомЛице
// Выводит данные о физических лицах в структуру многостраничного раздела
//
// Параметры:
// СвязьУстановлена - если Истина, то данные в ячейки записываются не проверяя на пустоту хранящегося там значения
// предпологается, что в этом случае, лист пуст
// СвязьУстановлена - Ложь - Лист с данными по ФИО найден и данные нужно заменять, только если пустота в ячейки
// Данные
// ТипДанных - что выводим может быть 1. Руководитель 2. Бухгалтер 3. УП
// ОграниченияВыводаУчесть - в случае ограничений
// ТаблицаСтраницРазделаМ - таблица раздела ФизЛица
//
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";

	Пол = 0;

	ДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	// Для УП
	Если ТипДанных = 3 Тогда
		ДанныеПредставителя = РегламентированнаяОтчетность.ПолучитьСведенияОПредставителе(ЭтаФорма, Ложь);
		ЗаполнитьЗначенияСвойств(Данные, ДанныеПредставителя);
	КонецЕсли;

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы = Неопределено Тогда
			Сообщить("Ошибка установки активной страницы раздела ФЛ");
		КонецЕсли;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрТаблицаСтраницы.Данные.ФизЛицФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные = ВозвратитьПустойОбразЛистаФЛ();

			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	Для НомЯчейки = 1 По 12 Цикл

		ЦифраИНН = Сред(мИННЮЛ, НомЯчейки, 1);
		СтрокаДляВставкиДанных.Данные.Вставить("ИНН1_" + Строка(НомЯчейки), ЦифраИНН);

	КонецЦикла;

	КППЮЛ = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	Если НЕ ПустаяСтрока(КППЮЛ) Тогда
		мКППЮЛ = КППЮЛ;
	КонецЕсли;

	Для НомЯчейки = 1 По 9 Цикл

		ЦифраКПП = Сред(мКППЮЛ, НомЯчейки, 1);
		СтрокаДляВставкиДанных.Данные.Вставить("КПП1_" + Строка(НомЯчейки), ЦифраКПП);

	КонецЦикла;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицФИО", ФИО);
		Представление = СтрокаДляВставкиДанных.Данные[РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, "ФизЛица", "ИмяПредставления")];
		СтрокаДляВставкиДанных.Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСлТел) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);
		КонецЕсли;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции


	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДомТел) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВид) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДок1 + СтрокаДляВставкиДанных.Данные.ФизЛицДок2) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокСерияНомер) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВыдан) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

		Для Инд = 1 По 8 Цикл

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

		КонецЦикла;

	Иначе

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицДокДата1 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата2 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата3
		+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата4 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата5 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата6
		+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата7 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата8) Тогда

			стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

			Для Инд = 1 По 8 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		Для Инд = 1 По 6 Цикл

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

		КонецЦикла;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицИнд1 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд2 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд3
		+СтрокаДляВставкиДанных.Данные.ФизЛицИнд4 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд5 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд6) Тогда

			Для Инд = 1 По 6 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицС1 + СтрокаДляВставкиДанных.Данные.ФизЛицС2) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

		КонецЕсли;

	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицФИО) Тогда

		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

		Для Инд =1 По 8 Цикл

			СтрокаДляВставкиДанных.Данные.Вставить("ДатаПодписи" + Строка(Инд), Сред(стрУказаннаяДата, Инд, 1));

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры //ВыводДанныхОФизическомЛице

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
КонецПроцедуры // УправлениеЛистами

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	Ч1Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Восстановим многострочную часть.
	Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть") <> Неопределено Тогда
		ТекТабличноеПоле.Области.МногострочнаяЧасть.Имя = "";

		// СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, , Ч1Низ,);
		СледующаяЧасть.Имя = "МногострочнаяЧасть";

	КонецЕсли;

	Предел = 10000;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      3, НомерНижнЯчейкиОбласти,      3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 3, НомерНижнЯчейкиНовойОбласти, 3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	//Код = СтрЗаменить(ИмяТекущейОбласти, "П000010000001", "П000010000003");
	//Наим = СтрЗаменить(ИмяТекущейОбласти, "П000010000001", "П000010000002");
	//мДекларация.Области[Код].Значение = мДекларация.Области.П000000000003.Значение;
	//мДекларация.Области[Наим].Значение = мДекларация.Области.П000000000002.Значение;

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	//Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
	//	Сообщить("Нельзя удалять не добавленные строки");
	//	Возврат;
	//КонецЕсли;

	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Сохраним координаты многострочной части, для последующего восстановления.
		Ч1Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
		//Ч1Лево  = ТекТабличноеПоле.Области.МногострочнаяЧасть.Лево;
		Ч1Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
		//Ч1Право = ТекТабличноеПоле.Области.МногострочнаяЧасть.Право;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		// Восстановим многострочную часть.
		Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть") <> Неопределено Тогда
			ТекТабличноеПоле.Области.МногострочнаяЧасть.Имя = "";

		КонецЕсли;

		// В том случае, если область не была найдена, то объявим её.
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, , Ч1Низ,);
		СледующаяЧасть.Имя = "МногострочнаяЧасть";

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат((НСтр - 1), "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
						//ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + "";

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=0");

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ТабличныеДокументы = Неопределено)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// Сохраним координаты многострочной части, для последующего восстановления.
			Ч1Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			//Ч1Лево  = ТекТабличноеПоле.Области.МногострочнаяЧасть.Лево;
			Ч1Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			//Ч1Право = ТекТабличноеПоле.Области.МногострочнаяЧасть.Право;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// Восстановим многострочную часть.
			Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть") <> Неопределено Тогда
				ТекТабличноеПоле.Области.МногострочнаяЧасть.Имя = "";
				СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, , Ч1Низ,);
				СледующаяЧасть.Имя = "МногострочнаяЧасть";
			КонецЕсли;

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧГ=0");
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки ;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мДекларация Тогда
		ИдГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);

	Если ИмяГруппыДопСтрок <> Неопределено Тогда

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

Процедура СформироватьПечатныеФормыРазделаДекларация(СтруктураПараметровСтраницы)
	Перем ТаблицаСтраницРаздела;
	
	мСтруктураМногостраничныхРазделов.Свойство("Декларация", ТаблицаСтраницРаздела);
	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), "ПолеТабличногоДокументаВремТаблДок", Ложь);
	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, "Декларация", Истина);
		Если ТаблицаСтраницРаздела.Индекс(Страница) = 0 Тогда // первая страница
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Очистить();
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаДекларация.ПолучитьОбласть());
		Иначе
			НомерСтрокиПриемника = ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Области.ПустаяСтрока.Верх;
			ТаблДокДо = ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.ПолучитьОбласть(1, , НомерСтрокиПриемника - 1, );
			ТаблДокПосле = ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.ПолучитьОбласть(НомерСтрокиПриемника, , ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.ВысотаТаблицы, );
			ТаблДокМежду = ЭлементыФормы.ПолеТабличногоДокументаДекларация.ПолучитьОбласть(ЭлементыФормы.ПолеТабличногоДокументаДекларация.Области.ИтоговаяЧастьРаздела.Верх, , ЭлементыФормы.ПолеТабличногоДокументаДекларация.Области.ПустаяСтрока.Верх - 1, );
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Очистить();
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Вывести(ТаблДокДо);
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Вывести(ТаблДокМежду);
			ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Вывести(ТаблДокпосле);
		КонецЕсли;
	КонецЦикла;
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, "Декларация", Истина);
	
	НачалоМнЧ = ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Области.ОсновнаяЧасть.Низ + 1;
	КонецМнЧ = ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Области.ПустаяСтрока.Верх - 1;
	//ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.УдалитьОбласть(ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Области.МногострочнаяЧасть);
	
	УдаляемыеОбласти = Новый Массив;
	Для Каждого Обл Из ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Области Цикл
		Если Обл.Лево = 0 И Обл.Право = 0 И Обл.Верх >= НачалоМнЧ И Обл.Низ <= КонецМнЧ Тогда
			УдаляемыеОбласти.Добавить(Обл);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Обл Из УдаляемыеОбласти Цикл
		Обл.Имя = Неопределено;
	КонецЦикла;
	
	ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Область(НачалоМнЧ, 0, КонецМнЧ, 0).Имя = "МногострочнаяЧасть";
	//ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок.Записать("C:\" + Строка(Новый УникальныйИдентификатор) + ".mxl");
	
	СтруктураПараметровСтраницы.Вставить("ИмяТабличногоПоля", "ПолеТабличногоДокументаВремТаблДок");
	ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	ЭлементыФормы.Удалить(ЭлементыФормы.ПолеТабличногоДокументаВремТаблДок);
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	
	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если СтрокаУровня1.ИмяСтраницы = "Декларация" И ЧтоИскать = Неопределено Тогда
			СформироватьПечатныеФормыРазделаДекларация(СтруктураПараметров);
			Продолжить;
		КонецЕсли;
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	мРежимПечати = Ложь;

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Титульный", Ложь);
	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = "";
	Для Инд = 1 по 4 Цикл
		КодИФНС = КодИФНС + мСтруктураМногостраничныхРазделов.Титульный[0].Данные["КодИМНС" + Строка(Инд)];
	КонецЦикла;
	
	КПП = "";
	Для Инд = 1 по 9 Цикл
		КПП = КПП + мСтруктураМногостраничныхРазделов.Титульный[0].Данные["КПП1_" + Строка(Инд)];
	КонецЦикла;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	//// ДокПредстРО
	//СписокСохранения.Вставить("ДокПредстРО", ДокПредстРО);

	СписокСохранения.Вставить("Представляется", Представляется);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	//СохранениеДереваНастройкиСтраниц();
	
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	Комментарий 			 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда

			мСтараяВерсияФормы = ВерсияФормы;

			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ДокПредстРО") Тогда
		Если СписокСохранения.ДокПредстРО Тогда
			Представляется = 1;
		Иначе
			Представляется = 2;
		КонецЕсли;
	ИначеЕсли СписокСохранения.Свойство("Представляется") Тогда
		Представляется = СписокСохранения.Представляется;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	ЭтоПервыйЭкзТитЛиста = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы) = 0;

	Если ЭтоПервыйЭкзТитЛиста Тогда
		мТитульный.Области.АдрЮР.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдрЮРТитульныйВыгрузка, Истина);
	Иначе
		мАдрЮРТитульныйВыгрузка = "";
	КонецЕсли;

	// В случае, если активный лист не является первым в структуре.
	ОбработатьВидДеятельности();

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	// Выводим дату подписания отчета
	// ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// УполномоченныйПредставительУстановить
// Процедура используется только для деклараций где представитель представлен как "Уполномоченный представитель" и учитываются данные
// хранящиеся в справочнике Регистрация в ИФНС и в регистре контактной информации.
//
// Параметров нет.
//
Процедура УполномоченныйПредставительУстановить()
	//
	// Проставить представителя на тит. листе.
	Представитель = РегламентированнаяОтчетность.ПолучитьСведенияОПредставителе(ЭтаФорма, Ложь);

	// Получим КПП с титульного листа, КПП должен быть проставлен актуальный.
	КППТитульныйЛист = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если Представитель.ПредставительФЛ = Истина Тогда
		// Получим текущего представителя.
		ТекПредставительФИО = мТитульный.Области.ОргУП.Значение;
		// Получим текущий ИНН представителя.
		ТекПредставительИНН = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИННУП");
		// Если текущий представитель отличается от представителя в ИБ, тогда выполним следующие действия.
		Если Представитель.ФИОУпПред <> ТекПредставительФИО Тогда
			// Заполним ФИО представителя.
			мТитульный.Области.ОргУП.Значение = Представитель.ФИОУпПред;
			// Заполним ИНН представителя.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП" , 12, Представитель.ИННУпПред);
			// Если у нового представителя нет ИНН, то перезаполним все экземпляры листа с данными ФЛ.
			Если ПустаяСтрока(Представитель.ИННУпПред) Тогда
				// Перезаполним весь лист с данными ФЛ.
				мИННУпПред = "";
				ЗаполнитьСведенияОбФЛ(Истина);

				Если ПустаяСтрока(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					// Перепроставим КПП в структуре многостраничного раздела на листе с данными ФЛ.
					КППТитульныйЛист = "            ";
					ПроставитьНаВсехЛистах("            ", "ИНН", "", "ФизЛица",,, Истина);
				КонецЕсли;
				ПроставитьНаВсехЛистах(КППТитульныйЛист, "КПП", "", "ФизЛица",,, Истина);

				// Перезаполним даты.
				ЗаполнитьДатуВЯчейках();

				Возврат;
			КонецЕсли;
			// Присвоим новый ИНН переменной.
			мИННУпПред = Представитель.ИННУпПред;
			// Если у текущего представителя есть ИНН, а у прошлого ИННа не было, тогда следует найти и точечено удалить его данные.
			Если (НЕ ПустаяСтрока(Представитель.ИННУпПред)) И (ПустаяСтрока(ТекПредставительИНН)) Тогда
				ВсегоЭкземпляров = мСтруктураМногостраничныхРазделов.ФизЛица.Количество();
				Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
					Если мСтруктураМногостраничныхРазделов.ФизЛица[Инд].Данные.ФизЛицФИО = ТекПредставительФИО Тогда
						// В случае, если лист активный и единственный в разделе.
						Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
							ОчиститьТабличноеПоле(мФизЛица);
							мФизЛица.Области.ФизЛицФИО.Значение = "";
						КонецЕсли;

						// В случе, если лист активный, но не единственный в разделе.
						Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
							УдалитьДополнительнуюСтраницу("ФизЛица");
							Прервать;
						КонецЕсли;

						// В случе, если лист НЕ активный.
						Если НЕ мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница Тогда
							// Отобразим.
							ПоказатьСтраницуМногостраничногоРаздела(Инд, "ФизЛица", Истина);
							// Удалим.
							УдалитьДополнительнуюСтраницу("ФизЛица");
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Представитель.ПредставительФЛ = Неопределено Тогда
		мИННУпПред = "";
		ТекПредставительФИО = мТитульный.Области.ОргУП.Значение;
		мТитульный.Области.ОргУП.Значение = "";
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП" , 12, "");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПодписиУпП" , 8, "");

		// **********
		ВсегоЭкземпляров = мСтруктураМногостраничныхРазделов.ФизЛица.Количество();
		Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
			Если мСтруктураМногостраничныхРазделов.ФизЛица[Инд].Данные.ФизЛицФИО = ТекПредставительФИО Тогда
				// В случае, если лист активный и единственный в разделе.
				Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
					ОчиститьТабличноеПоле(мФизЛица);
					мФизЛица.Области.ФизЛицФИО.Значение = "";
				КонецЕсли;

				// В случе, если лист активный, но не единственный в разделе.
				Если (мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
					УдалитьДополнительнуюСтраницу("ФизЛица");
					Прервать;
				КонецЕсли;

				// В случе, если лист НЕ активный.
				Если НЕ мСтруктураМногостраничныхРазделов.ФизЛица[Инд].АктивнаяСтраница Тогда
					// Отобразим.
					ПоказатьСтраницуМногостраничногоРаздела(Инд, "ФизЛица", Истина);
					// Удалим.
					УдалитьДополнительнуюСтраницу("ФизЛица");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПустаяСтрока(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
			// Перепроставим ИНН в структуре многостраничного раздела на листе с данными ФЛ.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ИНН1_" , 12, "            ");

			// Перепроставим КПП в структуре многостраничного раздела на листе с данными ФЛ.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "КПП1_" , 12, "            ");
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДатуВЯчейках();
КонецПроцедуры // УполномоченныйПредставительУстановить

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина)

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Значение, ПрефиксНаЛисте, ЛистИсключение, ТолькоДляЛиста, ТолькоАктивныйЛистМногостраничнойчасти, ИспользоватьНомер, ЛистыМногостраничные);

КонецПроцедуры // ПроставитьНаВсехЛистах()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", НомерИзменяемойСтроки = Неопределено) Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);

	Колонка10 = 0;
	Колонка11 = 0;
	Колонка12 = 0;

	Для Инд = 1 По СтруктураГруппы.Количество() Цикл
		ИндСтр = Формат(Инд, "ЧГ=0");
		Колонка10 = Колонка10 + мДекларация.Области["П000010000010_" + ИндСтр].Значение;
		Колонка11 = Колонка11 + мДекларация.Области["П000010000011_" + ИндСтр].Значение;
		Колонка12 = Колонка12 + мДекларация.Области["П000010000012_" + ИндСтр].Значение;
	КонецЦикла;

	мДекларация.Области.П000000000010.Значение = Колонка10;
	мДекларация.Области.П000000000011.Значение = Колонка11;
	мДекларация.Области.П000000000012.Значение = Колонка12;

	мДекларация.Области.П000000000008.Значение = 
	     Колонка10 +
	     Колонка11 +
	     Колонка12 +
	     мДекларация.Области.П000000000013.Значение;

	мДекларация.Области.П000000000016.Значение =
	    мДекларация.Области.П000000000005.Значение
	   + мДекларация.Области.П000000000006.Значение
	   + мДекларация.Области.П000000000007.Значение
	   - мДекларация.Области.П000000000008.Значение
	   - мДекларация.Области.П000000000014.Значение;

КонецПроцедуры // Расчет()

// СтандратныеОперацииТитульногоЛиста
//
Процедура СтандратныеОперацииТитульногоЛиста()

	мТитульный.Области.СоставленаНа1.ЭлементУправления.Маска = "9";
	мТитульный.Области.СоставленаНа2.ЭлементУправления.Маска = "9";
	мТитульный.Области.СоставленаНа3.ЭлементУправления.Маска = "9";

	мТитульный.Области.Прил1.ЭлементУправления.Маска = "9";
	мТитульный.Области.Прил2.ЭлементУправления.Маска = "9";
	мТитульный.Области.Прил3.ЭлементУправления.Маска = "9";

КонецПроцедуры // СтандратныеОперацииТитульногоЛиста

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	ФормироватьСтруктуруСвойствСтраниц();
	мРежимПечати = Ложь;

	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мСтараяВерсияФормы = мВерсияФормы;
	мДокументВосстановлен = Ложь;

	мТитульный    = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица      = ЭлементыФормы.ПолеТабличногоДокументаФизЛица;
	мДекларация   = ЭлементыФормы.ПолеТабличногоДокументаДекларация;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мВидДеят = "";

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		СтандратныеОперацииТитульногоЛиста();
		ЗагрузитьПоказателиИзМакета("КодыВидовПродукции");
		ЗагрузитьПоказателиИзМакета("ВидыДеятельности");
		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();
		мПустойОбразЛистаФЛ = СобратьДанныеТекущегоТаблПоля(мФизЛица);
		// По умолчанию, возведем принак, т.к. сущестуют особенности выгрузки декларации
		// в эл. виде.
		// ФлажокОтклАвтоРасчет = Истина;

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			мТитульный.Области.ВидДок.Значение = "1";

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ();
	Иначе

		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;

		ПолучитьИННКПП();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		Если НЕ мБезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НЕ мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Титульный");
		РегламентированнаяОтчетность.УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(ЭтаФорма);
	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "АдрЮР" Тогда
		мАдрЮРТитульныйВыгрузка = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ВидДеят" Тогда
		мВидДеят = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//// ДокПредстРОПриИзменении
////
//Процедура ДокПредстРОПриИзменении(Элемент)
//	РегламентированнаяОтчетность.УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(ЭтаФорма);
//КонецПроцедуры // ДокПредстРОПриИзменении

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаТитульныйНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Титульный");
	ОбработатьВидДеятельности();

КонецПроцедуры // КнопкаПредыдущаяСтраницаТитульныйНажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаТитульныйНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Титульный");
	ОбработатьВидДеятельности();

КонецПроцедуры // КнопкаСледующаяСтраницаТитульныйНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуТитульныйНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Титульный");
	ОбработкаАдресаПриЛистании();
	ОбработатьВидДеятельности();

КонецПроцедуры // КнопкаПерейтиНаСтраницуТитульныйНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Титульный" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуТитульныйНажатие(Элемент)

	Если мСтруктураМногостраничныхРазделов.Титульный[0].АктивнаяСтраница Тогда
		Сообщить("Нельзя удалять первую страницу титульного листа данной декларации");		
		Возврат;
	КонецЕсли;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Титульный");
	ОбработкаАдресаПриЛистании();
	ОбработатьВидДеятельности();

КонецПроцедуры // КнопкаУдалитьДопСтраницуТитульныйНажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Титульный" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуТитульныйНажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Титульный");
	ОчиститьТитульныйЛист();
	ОбработатьВидДеятельности();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела5Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаДекларацияНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Декларация");

КонецПроцедуры // КнопкаПредыдущаяСтраницаДекларацияНажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 5"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаДекларацияНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Декларация");

КонецПроцедуры // КнопкаСледующаяСтраницаДекларацияНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Раздел 5" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуДекларацияНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Декларация");

КонецПроцедуры // КнопкаПерейтиНаСтраницуДекларацияНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Декларация" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуДекларацияНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Декларация");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Декларация");

КонецПроцедуры // КнопкаУдалитьДопСтраницуДекларацияНажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Декларация" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуДекларацияНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Декларация");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Декларация");
	мДекларация.Области.НомерПП.Значение = мСтруктураМногостраничныхРазделов.Декларация.Количество();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела5Нажатие()

// ПолеТабличногоДокументаДекларацияВыбор
//
Процедура ПолеТабличногоДокументаДекларацияВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если ((Найти(Область.Имя, "П000000000003") > 0)
	 Или (Найти(Область.Имя, "П000000000002") > 0))
	 И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		ТекКод = мДекларация.Области.П000000000003.Значение;
		ПоисковаяСтрока = мКодыВидовПродукции.Найти(ТекКод, "Код");

		Если ПоисковаяСтрока <> Неопределено Тогда
			Результат = мКодыВидовПродукции.ВыбратьСтроку("Выбор вида продукции", ПоисковаяСтрока);
		Иначе
			Результат = мКодыВидовПродукции.ВыбратьСтроку("Выбор вида продукции");
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если РегламентированнаяОтчетность.ПустоеЗначение(Результат[0]) Тогда
				мДекларация.Области.П000000000002.Значение = "";
				мДекларация.Области.П000000000003.Значение = "";

			Иначе
				мДекларация.Области.П000000000002.Значение = Результат[1];
				мДекларация.Области.П000000000003.Значение = Результат[0];
			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаДекларацияВыбор

// ПолеТабличногоДокументаДекларацияПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаДекларацияПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаДекларацияПриАктивизацииОбласти

// КнопкаУдалитьДопСтрокиДекларацияНажатие
//
Процедура КнопкаУдалитьДопСтрокиДекларацияНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиДекларацияНажатие

// КнопкаДобавитьДопСтрокиДекларацияНажатие
//
Процедура КнопкаДобавитьДопСтрокиДекларацияНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиДекларацияНажатие

// Процедура - обработчик нажатия кнопки "<" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаФизЛицаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "ФизЛица");

КонецПроцедуры // КнопкаПредыдущаяСтраницаФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаФизЛицаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "ФизЛица");

КонецПроцедуры // КнопкаСледующаяСтраницаФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную страницу
// на странице "Физ.лица" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуФизЛицаНажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "ФизЛица");

КонецПроцедуры // КнопкаДобавитьДопСтраницуФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную страницу
// на странице "Физ.лица" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуФизЛицаНажатие(Элемент)

	УдалитьДополнительнуюСтраницу("ФизЛица");

КонецПроцедуры // КнопкаУдалитьДопСтраницуФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуФизЛицаНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "ФизЛица");

КонецПроцедуры // КнопкаПерейтиНаСтраницуФизЛицаНажатие()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	
	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		// СтруктураАдресныхДанных.Вставить("Индекс", мФизЛицИнд);

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		   + мФизЛица.Области.ФизЛицИнд2.Значение
		   + мФизЛица.Области.ФизЛицИнд3.Значение
		   + мФизЛица.Области.ФизЛицИнд4.Значение
		   + мФизЛица.Области.ФизЛицИнд5.Значение
		   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Найти(Область.Имя, "КодИМНС") > 0) Или (Найти(Область.Имя, "ОргИМНС") > 0) Тогда
		ИФНСДоВыбора = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		РегламентированнаяОтчетность.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный");
		ИФНСПослеВыбора = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		Если ИФНСДоВыбора <> ИФНСПослеВыбора Тогда
			УполномоченныйПредставительУстановить();
		КонецЕсли;

	КонецЕсли;

	Если (НЕ мАвтоВыборКодов) И (Область.Имя = "АдрЮР") Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдрЮРТитульныйВыгрузка);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдрЮРТитульныйВыгрузка = РегламентированнаяОтчетность.СформироватьАдрес9зпт(Истина, ВводАдреса.НачальноеЗначениеВыбора);
			Если мАдрЮРТитульныйВыгрузка = ",,,,,,,,," Тогда
				мАдрЮРТитульныйВыгрузка = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдрЮРТитульныйВыгрузка, Истина);

			Модифицированность = Истина;

		КонецЕсли;

	ИначеЕсли Лев(Область.Имя, 6) = "ТипОрг" Тогда

		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;

		Если Область.Значение = "V" Тогда
			Возврат;
		КонецЕсли;

		Если Область.Имя = "ТипОрг1" Тогда
			Область.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
		КонецЕсли;

		Если Область.Имя = "ТипОрг2" Тогда
			Область.Значение = "V";
			мТитульный.Области.ТипОрг1.Значение = "";
		КонецЕсли;
		
		РегламентированнаяОтчетность.УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(ЭтаФорма);
		
	ИначеЕсли Область.Имя = "ВидДеятельности" Тогда
		// Общее решение, не учитываем флаг "Не выбирать из списков", т.к.
		// код вида дея-ти завязна на выгрузку в эл. виде.

		СтандартнаяОбработка = Ложь;
		ПоисковаяСтрока = мВидыДеятельности.Найти(Область.Значение, "Название");

		Если ПоисковаяСтрока <> Неопределено Тогда
			Результат = мВидыДеятельности.ВыбратьСтроку("Выбор вида деятельности", ПоисковаяСтрока);
		Иначе
			Результат = мВидыДеятельности.ВыбратьСтроку("Выбор вида деятельности");
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если РегламентированнаяОтчетность.ПустоеЗначение(Результат[0]) Тогда
				мТитульный.Области.ВидДеятельности.Значение = "";
				мВидДеят = "";
			Иначе
				мТитульный.Области.ВидДеятельности.Значение = Результат[1];
				мВидДеят = Результат[0];
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли Область.Имя = "ОКАТОТитульный" Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мТитульный.Области.ОКАТОТитульный.Значение;

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите код ОКАТО", 11) Тогда
			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				мТитульный.Области.ОКАТОТитульный.Значение = ПервоначальноеЗначение;
				Модифицированность = Истина;

			Иначе
				Сообщить("Код ОКАТО должен состоять из 11 цифр.");
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

    Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// СохранитьДеревоСтраницОтчета
//
Процедура СохранитьДеревоСтраницОтчета()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СохранитьДеревоСтраницОтчета

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");
	УстановитьРеквизитыВидДок();

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");
	УстановитьРеквизитыВидДок();

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьСведенияОбФЛ();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаДекларация";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Функция ПакетнаяПечать(ПечДок) Экспорт
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура возвращает таблицу значений информацией с листов ФизЛица. Строки таблицы
// соответствуют страницам раздела.
//
// Параметры:
//	СтруктураМногостраничныхРазделов - структура, на основании информации из которой
//			следует заполнить строки таблицы-результата. Если параметр не задан, то
//			будет использована аналогичная переменная модуля
//
// Возвращаемое значение:
//	ТаблицаЗначений с информацией из листов раздела ФизЛица
//
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицФИО = СтрДанных.ФизЛицФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок1 + СтрДанных.ФизЛицДок2;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата1 + СтрДанных.ФизЛицДокДата2 + "."
										  + СтрДанных.ФизЛицДокДата3 + СтрДанных.ФизЛицДокДата4 + "."
										  + СтрДанных.ФизЛицДокДата5 + СтрДанных.ФизЛицДокДата6  
										  + СтрДанных.ФизЛицДокДата7 + СтрДанных.ФизЛицДокДата8;
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд1+СтрДанных.ФизЛицИнд2+СтрДанных.ФизЛицИнд3+СтрДанных.ФизЛицИнд4+СтрДанных.ФизЛицИнд5+СтрДанных.ФизЛицИнд6;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС1 + СтрДанных.ФизЛицС2;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции // ПолучитьДанныеФизЛиц()

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ПоказателиТитульный = ДанныеОтчета.ДанныеМногостраничныхРазделов.Титульный; // РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц(мСтруктураМногостраничныхРазделов);
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	//определение источников данных для проверки
	Если мСохраненныйДок = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Если Данные = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Орг = мСохраненныйДок.Организация;
	ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		 
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = СокрЛП(Орг.ИНН);
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргБухгалтер = СокрЛП(ПоказателиТитульный.ОргБухгалтер);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		Попытка
			ПризнВидаДок = Число(ВидДок);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	КонецПопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	Если ПустаяСтрока(ПоказателиТитульный.ТипОрг1) И ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ПоМестуНахождения = 0;
	Иначе
		ПоМестуНахождения = ?(ПустаяСтрока(ПоказателиТитульный.ТипОрг2), 1, 2);
	КонецЕсли;
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(Данные.Представляется = Ложь, 0, Данные.Представляется);
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	//Определили основные показатели
	
	Если ПустаяСтрока(ОргИНН) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задан ИНН организации!", "Титульный", "ИНН1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПустаяСтрока(ОргКПП) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задан КПП организации!", "Титульный", "КПП1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПустаяСтрока(КодИНСП) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Невозможно определить код налоговой инспекции! Выгрузка прервана!", "Титульный", "КодИМНС");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если ПоМестуНахождения = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не выбран реквизит ""По месту нахождения""!", "Титульный", "ТипОрг");
		КонецЕсли;
		СтатусПроверки = 1;
	ИначеЕсли ПоМестуНахождения = 1 И ПредставляетсяЗнач = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не выбран вариант представления отчета (поле выбора под бланком титульного листа)!", "Титульный", Неопределено);
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	//Проверяем соответствие дополнительным требованиям по составу показателей
	Если ПустаяСтрока(ОргДиректор) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПустаяСтрока(ОргБухгалтер) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если (ПризнВидаДок = 3) И (НомерКорректировки = 0) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер корректировки!", "Титульный", "НомКоррект");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.ВидДеятельности) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан вид деятельности по лицензии!", "Титульный", "ВидДеятельности");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.СерЛиц) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указана серия лицензии!", "Титульный", "СерЛиц");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.НомерЛиц) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер лицензии!", "Титульный", "НомерЛиц");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.ДатаНачЛиц) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указана дата получения лицензии!", "Титульный", "ДатаНачЛиц");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.ДатаОконЛиц) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан срок действия лицензии!", "Титульный", "ДатаОконЛиц");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	ОргНазв = ПоказателиТитульный.ОргНазв;
	ОргОГРН = ПоказателиТитульный.ОГРН;
		
	Если НЕ ПустаяСтрока(ОргОГРН) Тогда
		Если НЕ РегламентированнаяОтчетность.ОГРНсоответствуетТребованиям(ОргОГРН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ОГРН для организации!", "Титульный", "ОГРН");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;	
	КонецЕсли;
		
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		
	//сведения о директоре+
	ИННДиректор = ПоказателиТитульный.ИННРук;
	Если ПустаяСтрока(ИННДиректор) Тогда
		ТелСлужРук    = "-";
		ТелДомРук     = "-";
		АдрМЖРукРФ    = ",,,,,,,,,";
		АдрМЖРукРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
			ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
			КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
			СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
			УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
			ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
			ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
			АдрМЖРукРФ    = "643,"
			+ СокрП(Стр.ФизЛицИндекс)  + ","
			+ СокрП(Стр.ФизЛицКодСуб)  + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
		КонецЕсли;
	Иначе
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННДиректор) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН директора!", "Титульный", "ИННРук");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли; 
	//сведения о директоре-		
		
	//сведения о бухгалтере+
	ИННБухгалтер = ПоказателиТитульный.ИННГБ;
	Если ПустаяСтрока(ИННБухгалтер) Тогда
		ТелСлужБух    = "-";
		ТелДомБух     = "-";
		АдрМЖБухРФ    = ",,,,,,,,,";
		АдрМЖБухРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
			ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
			КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
			СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
			УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
			ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
			ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
			АдрМЖБухРФ    = "643,"
			+ СокрП(Стр.ФизЛицИндекс)  + ","
			+ СокрП(Стр.ФизЛицКодСуб)  + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
		КонецЕсли;
	Иначе
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННБухгалтер) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли; 
	//сведения о бухгалтере-		
				
	//сведения об УП+
	Если НЕ ПустаяСтрока(ОргУП) Тогда
		ИННУП = ПоказателиТитульный.ИННУП;
		Если ПустаяСтрока(ИННУП) Тогда
			ТелСлужУП    = "-";
			ТелДомУП     = "-";
			АдрМЖУПРФ    = ",,,,,,,,,";
			АдрМЖУПРез   = "-";
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				ТелСлужУП    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУП);
				ТелДомУП     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУП);
				КодВидаДокУП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУП);
				СерияИНомерУП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУП);
				УдЛичнУП      = Строка(КодВидаДокУП) + "," + СерияИНомерУП;
				ВыдУдЛичнУП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУП);
				ДатаУдЛичнУП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУП);
				АдрМЖУПРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				АдрМЖУПРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУПРез);
			КонецЕсли;
		Иначе
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННУП) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//сведения об УП-
	
	// Если не заполнен ИНН руководителя организации.
	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННДиректор) Тогда
		Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) Тогда
			СообщитьВТС("Не задан ИНН директора!", "Титульный", "ИННРук");
			СтатусПроверки = 1;
		Иначе
			// Если не заполнен код документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) ИЛИ СтрЗаменить(ДатаУдЛичнРук, " ", "") = ".." Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Если не заполнен ИНН главного бухгалтера организации.
	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННБухгалтер) Тогда
		Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) Тогда
			СообщитьВТС("Не задан ИНН главного бухгалтера!", "Титульный", "ИННБух");
			СтатусПроверки = 1;
		Иначе
			// Если не заполнен код документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) ИЛИ СтрЗаменить(ДатаУдЛичнБух, " ", "") = ".." Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргУП) Тогда
		// Если не заполнен ИНН уполномоченного представителя
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННУП) Тогда
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУП) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУП) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУП) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУП) Тогда
				СообщитьВТС("Не задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				СтатусПроверки = 1;
			Иначе
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУП) ИЛИ СтрЗаменить(ДатаУдЛичнУП, " ", "") = ".." Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	Возврат (СтатусПроверки <> 1);	
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП					= СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН					= СокрЛП(Организация.ИНН);
	ПоМестуНахождения		= ?(ПустаяСтрока(ПоказателиТитульный.ТипОрг2), 1, 2);
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(Данные.Представляется = Ложь, 0, Данные.Представляется);
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	ОргДиректор				= ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер			= ПоказателиТитульный.ОргБухгалтер;
	ОргУП					= ПоказателиТитульный.ОргУП;
	ОргНазв					= СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон				= ВРЕГ(Лев(СокрЛП(ПоказателиТитульный.ТелОрганизации), 20));
	ВидДок					= ПоказателиТитульный.ВидДок;
	ПризнВидаДок			= ?(ПустаяСтрока(ВидДок), 1, Число(ВидДок));
	НомерКорректировки		= ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект)); 
	ПризнОтчетногоПериода	= ?(мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц, 1, Месяц(мДатаКонцаПериодаОтчета) % 12);
	ВидДеят					= ВРЕГ(СокрЛП(ПоказателиТитульный.ВидДеят)); 
	//Определили основные показатели
	
	// Общие сведения служебной части
	
	//////// Начало блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
	////
	Если НЕ ПустаяСтрока(ПоказателиТитульный.АдрЮР) Тогда
		СтруктураАдрОрг = РегламентированнаяОтчетность.РазложитьАдрес(ПоказателиТитульный.АдрЮР);
		Если НЕ ЗначениеЗаполнено(СтруктураАдрОрг.Индекс) Тогда
			СтруктураАдрОрг.Индекс = "0";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураАдрОрг.Регион) Тогда
			СтруктураАдрОрг.Регион = "-";
		КонецЕсли;
		ПоказателиТитульный.АдрЮр = РегламентированнаяОтчетность.СобратьАдрес(СтруктураАдрОрг);
	КонецЕсли;
	
	Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
	Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
	Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
	Текст.ДобавитьСтроку("ОГРН:"  + ?(ПустаяСтрока(ПоказателиТитульный.ОГРН), "-", СокрЛП(ПоказателиТитульный.ОГРН)));
	Текст.ДобавитьСтроку("ОКАТО:" + ?(ПустаяСтрока(ПоказателиТитульный.ОКАТОТитульный), "-", Лев(СокрЛП(ПоказателиТитульный.ОКАТОТитульный), 11)));
	Текст.ДобавитьСтроку("АдрОрг:" + ВРЕГ(?(ПустаяСтрока(ПоказателиТитульный.АдрЮР), "643,0,-,,,,,,,", СокрЛП(ПоказателиТитульный.АдрЮР))));
	Текст.ДобавитьСтроку("ТелОрг:" + СокрЛП(ОргТелефон));
	Текст.ДобавитьСтроку("###");
	Для Каждого Стр Из Инф.Получить(0).Значение Цикл
		ТитулЛист = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
		Текст.ДобавитьСтроку("ВидДеят:" + ?(ПустаяСтрока(ВидДеят), "-", ВидДеят));
		Текст.ДобавитьСтроку("СерЛиц:" + ВРЕГ(СокрЛП(ТитулЛист.СерЛиц)));
		Текст.ДобавитьСтроку("НомерЛиц:" + ВРЕГ(СокрЛП(ТитулЛист.НомерЛиц)));
		Текст.ДобавитьСтроку("ДатаНачЛиц:" + СокрЛП(Формат(ТитулЛист.ДатаНачЛиц, "ДФ=dd.MM.yyyy; ДЛФ=D; ДП=00.00.0000")));
		Текст.ДобавитьСтроку("ДатаОконЛиц:" + СокрЛП(Формат(ТитулЛист.ДатаОконЛиц, "ДФ=dd.MM.yyyy; ДЛФ=D; ДП=00.00.0000")));
		Текст.ДобавитьСтроку("###");
	КонецЦикла;
	////
	//////// Конец блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
	/////
	ТаблСведенийФизЛиц = ДанныеФизЛиц;			
	
	//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
	////
	
	ИННДиректор = ПоказателиТитульный.ИННРук;
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
	Текст.ДобавитьСтроку("ИННРук:" + ИННДиректор);  
	
	Если ПустаяСтрока(ИННДиректор) И НЕ ПустаяСтрока(ОргДиректор) Тогда
		ТелСлужРук    = "";
		ТелДомРук     = "";
		КодВидаДокРук = "-";
		СерияИНомерРук= "-";
		ВыдУдЛичнРук  = "-";
		ДатаУдЛичнРук = "00.00.0000"; 
		АдрМЖРукРФ    = "643,0,-,,,,,,,";
		АдрМЖРукРез   = "-"; 
		Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
			ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
			КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
			СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
			УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
			ВыдУдЛичнРук   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук);
			ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
			АдрМЖРукРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужРук:"    + ВРЕГ(СокрЛП(Лев(ТелСлужРук, 20))));
		Текст.ДобавитьСтроку("ТелДомРук:"     + ВРЕГ(СокрЛП(Лев(ТелДомРук, 20))));
		Текст.ДобавитьСтроку("УдЛичнРук:"     + ВРЕГ(УдЛичнРук));  
		Текст.ДобавитьСтроку("ВыдУдЛичнРук:"  + ВРЕГ(ВыдУдЛичнРук));  
		Если ДатаУдЛичнРук = "  .  .    " ИЛИ ДатаУдЛичнРук = ".." Тогда
			ДатаУдЛичнРукС = "00.00.0000";
		Иначе
			ДатаУдЛичнРукС = Формат(ДатаУдЛичнРук, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + ДатаУдЛичнРукС);  
		Текст.ДобавитьСтроку("АдрМЖРук:"    + ВРег(АдрМЖРукРФ)); 
		Текст.ДобавитьСтроку("АдрМЖРукРез:"   + ВРег(СокрЛП(Лев(АдрМЖРукРез, 128))));  
	КонецЕсли; 
		
	ИННБухгалтер = ПоказателиТитульный.ИННГБ;
	Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
	Текст.ДобавитьСтроку("ИННБух:" + ИННБухгалтер);  
	Если ПустаяСтрока(ИННБухгалтер) И НЕ ПустаяСтрока(ОргБухгалтер) Тогда
		ТелСлужБух    = "";
		ТелДомБух     = "";
		КодВидаДок    = "-";
		СерияИНомер   = "-";
		ВыдУдЛичн     = "-";
		ДатаУдЛичнБух = "00.00.0000"; 
		АдрМЖБухРФ    = "643,0,-,,,,,,,";
		АдрМЖБухРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
			ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
			КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
			СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
			УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
			ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
			ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
			АдрМЖБухРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужБух:"    + ВРЕГ(СокрЛП(Лев(ТелСлужБух, 20))));
		Текст.ДобавитьСтроку("ТелДомБух:"     + ВРЕГ(СокрЛП(Лев(ТелДомБух, 20))));
		Текст.ДобавитьСтроку("УдЛичнБух:"     + ВРЕГ(УдЛичнБух));  
		Текст.ДобавитьСтроку("ВыдУдЛичнБух:"  + ВРЕГ(ВыдУдЛичнБух)); 
		Если ДатаУдЛичнБух = "  .  .    " ИЛИ ДатаУдЛичнБух = ".." Тогда
			ДатаУдЛичнБухС = "00.00.0000";
		Иначе
			ДатаУдЛичнБухС = Формат(ДатаУдЛичнБух, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + ДатаУдЛичнБухС);  
		Текст.ДобавитьСтроку("АдрМЖБух:"    + ВРег(АдрМЖБухРФ)); 
		Текст.ДобавитьСтроку("АдрМЖБухРез:"   + ВРег(СокрЛП(Лев(АдрМЖБухРез, 128))));  
	КонецЕсли; 
		
	ИННУП = ПоказателиТитульный.ИННУП;
	Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
	Текст.ДобавитьСтроку("ИННУпПред:" + ИННУП);
	Если ПустаяСтрока(ИННУП) И НЕ ПустаяСтрока(ОргУП) Тогда
		ТелСлужУпПред    = "";
		ТелДомУпПред     = "";
		КодВидаДок    = "-";
		СерияИНомер   = "-";
		ВыдУдЛичн     = "-";
		ДатаУдЛичнУпПред = "00.00.0000"; 
		АдрМЖУпПредРФ    = "643,0,-,,,,,,,";
		АдрМЖУпПредРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужУпПред    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
			ТелДомУпПред     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
			КодВидаДокУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
			СерияИНомерУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
			УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
			ВыдУдЛичнУпПред   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред);
			ДатаУдЛичнУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
			АдрМЖУпПредРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖУпПредРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
		Иначе
			ТелСлужУпПред		= "";
			ТелДомУпПред		= "";
			УдЛичнУпПред		= "0,-";
			ВыдУдЛичнУпПред		= "-";
			ДатаУдЛичнУпПред	= "00.00.0000";
			АдрМЖУпПредРФ		= "643,0,-,,,,,,,";
			АдрМЖУпПредРез		= "-";
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужУпПред:"    + ВРЕГ(СокрЛП(Лев(ТелСлужУпПред, 20))));  
		Текст.ДобавитьСтроку("ТелДомУпПред:"     + ВРЕГ(СокрЛП(Лев(ТелДомУпПред, 20))));  
		Текст.ДобавитьСтроку("УдЛичнУпПред:"     + ВРЕГ(УдЛичнУпПред));  
		Текст.ДобавитьСтроку("ВыдУдЛичнУпПред:"  + ВРЕГ(ВыдУдЛичнУпПред)); 
		Если ДатаУдЛичнУпПред = "  .  .    " ИЛИ ДатаУдЛичнУпПред = ".." Тогда
			ДатаУдЛичнУпПредС = "00.00.0000";
		Иначе
			ДатаУдЛичнУпПредС = Формат(ДатаУдЛичнУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнУпПред:" + ДатаУдЛичнУпПредС);  
		Текст.ДобавитьСтроку("АдрМЖУпПред:"    + ВРег(АдрМЖУпПредРФ)); 
		Текст.ДобавитьСтроку("АдрМЖУпПредРез:"   + ВРег(СокрЛП(Лев(АдрМЖУпПредРез, 128))));  
	КонецЕсли; 
		
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
	
	СоотвПризФОтчВидамДеятельности = Новый СписокЗначений;
	СоотвПризФОтчВидамДеятельности.Добавить("02", "1");
	СоотвПризФОтчВидамДеятельности.Добавить("03", "2");
	СоотвПризФОтчВидамДеятельности.Добавить("04", "3");
	ПризФОтч = СоотвПризФОтчВидамДеятельности.Количество() + 1;
	СоотвПризФОтч = СоотвПризФОтчВидамДеятельности.НайтиПоЗначению(ВидДеят);
	Если СоотвПризФОтч <> Неопределено Тогда
		ПризФОтч = СоотвПризФОтч.Представление;
	КонецЕсли;
	
	//////// Начало блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	////                            
	Текст.ДобавитьСтроку("ПризФОтч:" + ПризФОтч);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ПериодВерОтч:18.03.2008,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Если ПоМестуНахождения = 2 Тогда
		Текст.ДобавитьСтроку("ДокПредст:220");
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		Текст.ДобавитьСтроку("ДокПредст:230");
	Иначе
		Текст.ДобавитьСтроку("ДокПредст:210");
		Если ПредставляетсяЗнач = 1 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:1");
		ИначеЕсли ПредставляетсяЗнач = 2 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:3");
		ИначеЕсли ПредставляетсяЗнач = 3 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:2");
		КонецЕсли;
	КонецЕсли;
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ> 
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Функция ПроверкаЗаполнения() Экспорт
	
	Возврат ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь);
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	ТаблицаСообщений.Очистить();
	Возврат ПроверкаЗаполнения();
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	// рекомбинируем блоки	
	ПослП000000000002 = "";
	ПослП000000000003 = "";
	ПослП000000000004 = "";
	Для Инд = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Инд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П000000000002" Тогда
			ПослП000000000002 = Сред(ТекСтрока, 15);
		ИначеЕсли Тек13Симв = "П000000000003" Тогда
			ПослП000000000003 = Сред(ТекСтрока, 15);
		ИначеЕсли Тек13Симв = "П000000000004" Тогда
			ПослП000000000004 = Сред(ТекСтрока, 15);
		ИначеЕсли Тек13Симв = "П000010000002" Тогда
			Текст.ЗаменитьСтроку(Инд, Тек13Симв + ":" + ПослП000000000002);
		ИначеЕсли Тек13Симв = "П000010000003" Тогда
			Текст.ЗаменитьСтроку(Инд, Тек13Симв + ":" + ПослП000000000003);
		ИначеЕсли Тек13Симв = "П000010000004" Тогда
			Текст.ЗаменитьСтроку(Инд, Тек13Симв + ":" + ПослП000000000004);
		КонецЕсли;
	КонецЦикла;
	
	Инд = 1;
	КолСтр1 = 1;
	КолСтр2 = 1;
	НаПредыдущейИтерацииМеняласьСтрока = Ложь;
	ПослП000000000008 = "";
	Пока Инд <= Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Инд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Инд = Инд + 1;
		Если Тек13Симв = "П000000000002" И НЕ НаПредыдущейИтерацииМеняласьСтрока Тогда
			Текст.ВставитьСтроку(Инд - 1, "П000000000001:" + Формат(КолСтр1, "ЧЦ=5; ЧГ="));
			НаПредыдущейИтерацииМеняласьСтрока = Истина;
			КолСтр1 = КолСтр1 + 1;
			КолСтр2 = 1;
		ИначеЕсли Тек13Симв = "П000010000002" И НЕ НаПредыдущейИтерацииМеняласьСтрока Тогда
			Текст.ВставитьСтроку(Инд - 1, "П000010000001:" + Формат(КолСтр1 - 1, "ЧЦ=5; ЧГ=") + "." + Формат(КолСтр2, "ЧЦ=2; ЧГ="));
			НаПредыдущейИтерацииМеняласьСтрока = Истина;
			КолСтр2 = КолСтр2 + 1;
		Иначе
			НаПредыдущейИтерацииМеняласьСтрока = Ложь;
		КонецЕсли;
		Если Тек13Симв = "П000000000008" Тогда
			ПослП000000000008 = Сред(ТекСтрока, 15);
		ИначеЕсли ПустаяСтрока(ПослП000000000008) И (Тек13Симв = "П000010000001" ИЛИ Тек13Симв = "П000010000002" ИЛИ Тек13Симв = "П000010000003" ИЛИ Тек13Симв = "П000010000004" ИЛИ Тек13Симв = "П000010000009" ИЛИ Тек13Симв = "П000010000010" ИЛИ Тек13Симв = "П000010000011" ИЛИ Тек13Симв = "П000010000012") Тогда
			Текст.ЗаменитьСтроку(Инд - 1, Тек13Симв + ":");
		КонецЕсли;
	КонецЦикла;
	
	ПокРаздела1 = Новый ТаблицаЗначений;
	ПокРаздела1.Колонки.Добавить("П000010000001");
	ПокРаздела1.Колонки.Добавить("П000010000002");
	ПокРаздела1.Колонки.Добавить("П000010000003");
	ПокРаздела1.Колонки.Добавить("П000010000004");
	ПокРаздела1.Колонки.Добавить("П000010000009");
	ПокРаздела1.Колонки.Добавить("П000010000010");
	ПокРаздела1.Колонки.Добавить("П000010000011");
	ПокРаздела1.Колонки.Добавить("П000010000012");
	КолСтрок = Текст.КоличествоСтрок();
	Для Инд = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Инд + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П000010000012" Тогда
			НовСтр = ПокРаздела1.Вставить(0);
			НовСтр.П000010000001 = Сред(Текст.ПолучитьСтроку(ТекИнд - 7), 15);
			НовСтр.П000010000002 = Сред(Текст.ПолучитьСтроку(ТекИнд - 6), 15);
			НовСтр.П000010000003 = Сред(Текст.ПолучитьСтроку(ТекИнд - 5), 15);
			НовСтр.П000010000004 = Сред(Текст.ПолучитьСтроку(ТекИнд - 4), 15);
			НовСтр.П000010000009 = Сред(Текст.ПолучитьСтроку(ТекИнд - 3), 15);
			НовСтр.П000010000010 = Сред(Текст.ПолучитьСтроку(ТекИнд - 2), 15);
			НовСтр.П000010000011 = Сред(Текст.ПолучитьСтроку(ТекИнд - 1), 15);
			НовСтр.П000010000012 = Сред(ТекСтрока, 15);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
			Текст.УдалитьСтроку(ТекИнд - 7);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ПокРаздела1 Цикл
		Текст.ДобавитьСтроку("П000010000001:" + Стр.П000010000001);
		Текст.ДобавитьСтроку("П000010000002:" + Стр.П000010000002);
		Текст.ДобавитьСтроку("П000010000003:" + Стр.П000010000003);
		Текст.ДобавитьСтроку("П000010000004:" + Стр.П000010000004);
		Текст.ДобавитьСтроку("П000010000009:" + Стр.П000010000009);
		Текст.ДобавитьСтроку("П000010000010:" + Стр.П000010000010);
		Текст.ДобавитьСтроку("П000010000011:" + Стр.П000010000011);
		Текст.ДобавитьСтроку("П000010000012:" + Стр.П000010000012);
		Текст.ДобавитьСтроку("###");
	КонецЦикла;
	
	ЧтоЗаменить = "П000000000001:1
	|П000000000002:
	|П000000000003:
	|П000000000004:
	|П000000000005:
	|П000000000006:
	|П000000000007:
	|П000000000008:
	|П000000000010:
	|П000000000011:
	|П000000000012:
	|П000000000013:
	|П000000000014:
	|П000000000015:
	|П000000000016:
	|###";
	
	НаЧтоЗаменить = "П000000000001:
	|П000000000002:
	|П000000000003:
	|П000000000004:
	|П000000000005:
	|П000000000006:
	|П000000000007:
	|П000000000008:
	|П000000000010:
	|П000000000011:
	|П000000000012:
	|П000000000013:
	|П000000000014:
	|П000000000015:
	|П000000000016:
	|###";
	
	Текст.УстановитьТекст(СтрЗаменить(Текст.ПолучитьТекст(), ЧтоЗаменить, НаЧтоЗаменить));
	
КонецПроцедуры

Функция ИсправленныйИдДок(Знач ИдДок)
	
	ИдДок = Сред(ИдДок, 7);
	Квартальная = (Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) <> 0);
	НомерМесяцаКвартала = Формат(?(Квартальная, Месяц(мДатаКонцаПериодаОтчета) % 12, Месяц(мДатаКонцаПериодаОтчета)), "ЧЦ=2; ЧН=00; ЧВН=");
	ПризнакЛицензии = НЕ ЗначениеЗаполнено(мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Титульный.Получить(0).Данные.ВидДеят);
	
	НомерКвартала = Цел((Месяц(мСохраненныйДок.ДатаОкончания) - 1) / 3) + 1;
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, мСохраненныйДок.ДатаНачала, НомерКвартала, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко);
	ИдДок = Лев(ИдДок, 25)
			+ Строка(Число(Квартальная) + 1)
			+ НомерМесяцаКвартала
			+ Формат(ПризнакЛицензии + 1, "БЛ=1; БИ=2")
			+ Формат(СчДок + 1, "ЧЦ=2; ЧН=00; ЧВН=")
			+ Формат((мСохраненныйДок.Вид + 1) % 100, "ЧЦ=2; ЧН=00; ЧВН=");
	РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок + 1, мСохраненныйДок.ДатаНачала, НомерКвартала, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко);
	
	Возврат "ИдДок:" + ИдДок;
	
КонецФункции

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем показатели
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОргКПП = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Титульный[0].Данные).КПП1;
	
	Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , ОргКПП, СокрЛП(мСохраненныйДок.КодИМНС), КНД, "3.02"))
		ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация)) Тогда
		
		СообщитьВТС("Не удалось сформировать общую информацию для файла выгрузки!", "Титульный", "");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Организация, , ОргКПП, мСохраненныйДок.ДатаНачала) Тогда
		СообщитьВТС("Не удалось собрать общие сведения информационной части для файла выгрузки!", "Титульный", "");
		Возврат Ложь;
	КонецЕсли;
	
	// выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	// выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	// обрабатываем результирующий текст выгрузки
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	// добавляем заключительные строки
	Текст.ДобавитьСтроку("@@@");
	Текст.ДобавитьСтроку("===");
	
	// проставляем общее количество показателей в тексте выгрузки
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;
	
	// !!!
	// устанавливаем особый ИдДок
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтр = Текст.ПолучитьСтроку(Сч);
		Если Лев(ТекСтр, 6) = "ИдДок:" Тогда
			Текст.ЗаменитьСтроку(Сч, ИсправленныйИдДок(ТекСтр));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	Возврат Истина;
	
КонецФункции

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если НЕ ((Страница = "Титульный") Или (Страница = "ФизЛица")) Тогда
		ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
		//Расчет("", Число(Сред(ОбластьИмя, Найти(ОбластьИмя, "_")+1)));
		Расчет("");
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеВыбораПредставляетсяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПолеВыбораПредставляетсяПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2006Кв3";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВидыДеятельности = Новый ТаблицаЗначений;
мВидыДеятельности.Колонки.Добавить("Код",,, 5);
мВидыДеятельности.Колонки.Добавить("Название",,, 70);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мКодыВидовПродукции = Новый ТаблицаЗначений;
мКодыВидовПродукции.Колонки.Добавить("Код",,, 5);
мКодыВидовПродукции.Колонки.Добавить("Название",,, 70);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

мИдГруппы1  = "П0000100010"; // Декларация

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;

// Структура строк многострочного раздела на странице
// к листу декларации.
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010000001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(6)); // номер
СтруктураГруппы1.Колонки.Добавить("П000010000002", ОписаниеТиповСтрока254); // наименование продукции
СтруктураГруппы1.Колонки.Добавить("П000010000003",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)); // код
СтруктураГруппы1.Колонки.Добавить("П000010000004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4, 2)); // Остаток
СтруктураГруппы1.Колонки.Добавить("П000010000005", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Всего
СтруктураГруппы1.Колонки.Добавить("П000010000006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // От орг. производ этил. спирта
СтруктураГруппы1.Колонки.Добавить("П000010000007", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Собственного пр-ва
СтруктураГруппы1.Колонки.Добавить("П000010000008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // По импорту
СтруктураГруппы1.Колонки.Добавить("П000010000009",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2)); // Код региона
СтруктураГруппы1.Колонки.Добавить("П000010000010", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Всего
СтруктураГруппы1.Колонки.Добавить("П000010000011", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Алкогольной продукции
СтруктураГруппы1.Колонки.Добавить("П000010000012", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Денатур. этил. спирта
СтруктураГруппы1.Колонки.Добавить("П000010000013", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Пищевой
СтруктураГруппы1.Колонки.Добавить("П000010000014", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // НЕпищевой
СтруктураГруппы1.Колонки.Добавить("П000010000015", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // прочий расход, в том числе возврат поставщику
СтруктураГруппы1.Колонки.Добавить("П000010000016", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4)); // Остаток на конец О.П.

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыДекларация = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыДекларация.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыТитульный = ТаблицаСтраницыРаздела.Скопировать();

мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Титульный", ТаблицаСтраницыТитульный);
мСтруктураМногостраничныхРазделов.Вставить("Декларация", ТаблицаСтраницыДекларация);

// Элемент структуры - данные дополнительных страниц раздела со сведениями
// о физических лицах
ТаблицаСтраницыФизЛиц     = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица",   ТаблицаСтраницыФизЛиц);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2006"; // Первый вариант

// Код отчета, равен КНД
мКодОтчета   = 1151001;

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей2006Кв3", "Формат 3.02", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1152021";
НаименованиеОтчетаДляВыгрузки = "ДЕКЛАРАЦИЯ ОБ ОБЪЕМАХ ПРОИЗВОДСТВА И ОБОРОТА АЛКОГОЛЬНОЙ И СПИРТОСОДЕРЖАЩЕЙ ПРОДУКЦИИ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
