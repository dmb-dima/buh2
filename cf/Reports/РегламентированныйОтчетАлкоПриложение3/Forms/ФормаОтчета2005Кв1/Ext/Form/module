////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мРаздел1;

// Хранят имена многострочных разделов
Перем мИдГруппы1;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

Перем мВПрограммеИзмененаОрганизация;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Список видов деятельности
Перем мКодыВидовПродукции;

Перем РежимОтладки;

Перем ОбязРазделов;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мДокументВосстановлен;

Перем мВидыДеятельности;

// Переменные для хранения адресов в формате МНС
Перем мОргЮрАдресМНС;
Перем мОргПрАдресМНС;

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

	мОргЮрАдресМНС = мРаздел1.Области.ОргЮрАдрес.Значение;
	мОргПрАдресМНС = мРаздел1.Области.ОргАдресПроизводства.Значение;

	мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
	мРаздел1.Области.ОргАдресПроизводства.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Т = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);
	// Искусственно добавим показатели 5-й колонки

	Если ПолучитьЭталонную Тогда

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002005";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002006";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002007";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002008";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002009";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002010";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002011";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002012";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002013";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002014";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002105";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002106";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002107";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002108";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002109";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002110";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002111";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002112";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002113";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

		НоваяСтрока = Т.Добавить();
		НоваяСтрока.КодПоказателя = "П000010002114";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре = "";

	КонецЕсли;

	Возврат Т;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

	мОргЮрАдресМНС = мРаздел1.Области.ОргЮрАдрес.Значение;
	мОргПрАдресМНС = мРаздел1.Области.ОргАдресПроизводства.Значение;

	мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
	мРаздел1.Области.ОргАдресПроизводства.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

	//мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
	//мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел1;
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел1 Тогда
		ИдГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;

		Если ИмяПоказателя = "ОргЮрАдрес" Тогда

			ЗначениеПоказателя = мОргЮрАдресМНС;

		ИначеЕсли ИмяПоказателя = "ОргАдресПроизводства" Тогда

			ЗначениеПоказателя = мОргПрАдресМНС;

		Иначе

			ЗначениеПоказателя = ТекущаяОбласть.Значение;

		КонецЕсли;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально
	    СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
	Иначе
		Если Месяц(мДатаКонцаПериодаОтчета) = 1 Тогда 
			СтрПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			СтрПериодОтчета = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		КонецЕсли;
	
	КонецЕсли;

	мРаздел1.Области.ПериодОтчета.Значение = "за " + СтрПериодОтчета;

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации()

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "ИННЮЛ"); // ИНН
	Сведения.Добавить("", "КППЮЛ"); // КПП
	Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование
	Сведения.Добавить("", "АдрЮР");
	//Сведения.Добавить("", "АдрПочт");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ОКПО");
	Сведения.Добавить("", "ОКАТО");
	//Сведения.Добавить("", "ОснВидДеят");

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, Сведения);

	// Инициализируем переменные
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	АдресЮр  = "";
	//АдресПочт  = "";
	ОргТелефон  = "";
	ФИОРук = "";
	ФИОБух = "";
	КодОКПО = "";
	КодОКАТО = "";
	ВидДеят = "";

	// Получаем данные
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
	ОргСведения.Свойство("АдрЮр",  АдресЮр );
	ОргСведения.Свойство("ТелОрганизации", ОргТелефон  );
	ОргСведения.Свойство("ОКПО", КодОКПО);
	//ОргСведения.Свойство("ОКАТО", КодОКАТО);
	//ОргСведения.Свойство("ОснВидДеят", ВидДеят);

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);


	// Заполняем ИНН на всех листах декларации
	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
		КППЮЛ = "";
	КонецЕсли;

	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		КППЮЛ = "";
	КонецЕсли;

	мРаздел1.Области.ОргИНН.Значение  = ИННЮЛ + ?(РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ), "", "\" + КППЮЛ);

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мРаздел1.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргЮрАдрес.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдресЮР, ",","")) Тогда

			мРаздел1.Области.ОргЮрАдрес.Значение = "";
			мОргЮрАдресМНС = "";

		Иначе

			мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдресЮр);
			мОргЮрАдресМНС = АдресЮр;

		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргТелефон.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		мРаздел1.Области.ОргТелефон.Значение = ОргТелефон;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргДиректор.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		мРаздел1.Области.ОргДиректор.Значение = ФИОРук;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргБухгалтер.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		мРаздел1.Области.ОргБухгалтер.Значение = ФИОБух;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел1.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мРаздел1.Области.ОргКодОКПО.Значение = "";
		Иначе
			мРаздел1.Области.ОргКодОКПО.Значение = КодОКПО;
		КонецЕсли;

	КонецЕсли;

	Если мВПрограммеИзмененаОрганизация Тогда

		мРаздел1.Области.ОргДиректор.Значение  = ФИОРук;

		мРаздел1.Области.ОргБухгалтер.Значение = ФИОБух;

		ТаблицаРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаРаздела);

		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл

			Если ТаблицаРаздела[Инд].Данные = Неопределено Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
			КонецЕсли;

			ТаблицаРаздела[Инд].Данные.Вставить("ОргДиректор", ФИОРук);
			ТаблицаРаздела[Инд].Данные.Вставить("ОргБухгалтер", ФИОБух);
			ТаблицаРаздела[Инд].Данные.Вставить("ОргИНН", ИННЮЛ + ?(РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ), "", "\" + КППЮЛ));
			ТаблицаРаздела[Инд].Данные.Вставить("ОргНазв", НаимЮЛПол);

			Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдресЮР, ",","")) Тогда

				ТаблицаРаздела[Инд].Данные.Вставить("ОргЮрАдрес", "643,,,,,,,,,");

			Иначе

				ТаблицаРаздела[Инд].Данные.Вставить("ОргЮрАдрес", АдресЮр);

			КонецЕсли;

			ТаблицаРаздела[Инд].Данные.Вставить("ОргТелефон", ОргТелефон);
			ТаблицаРаздела[Инд].Данные.Вставить("ОргТелефон", ОргТелефон);
			ТаблицаРаздела[Инд].Данные.Вставить("ОргКодОКПО", КодОКПО);
			//ТаблицаРаздела[Инд].Данные.Вставить("ОргКодОКАТО", КодОКАТО);
			//ТаблицаРаздела[Инд].Данные.Вставить("ОргВидДеят", ВидДеят);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице("Раздел1");
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	МаксимальноеКоличествоСтрокГруппы = 200;
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	ВысотаСтроки = 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области

		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;
	
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			//ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице("Раздел1");
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
		Сообщить("Нельзя удалять не добавленные строки");
		Возврат;
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

    	// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число("0"+ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;
	Расчет();

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			
			МаксимальноеКоличествоСтрокГруппы = 200;
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			ВысотаСтроки = 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			//Возврат;
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;

				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ОбластьЯчейки.Очистить();
					Иначе
						// порядковый номер последней строки перед вставкой
						ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
						НовыйПорядковыйНомер = ИсходныйНомер + 1;

						ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
					КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргЮрАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефон");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдресПроизводства");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицСерия");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицНомер");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицДата");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицДатаНач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицДатаКон");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЛицВыдан");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргВидДеят");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КвотаВсего");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КвотаТекущая");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КвотаДата");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КвотаВыдана");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;


	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
	Расчет();


КонецПроцедуры // ОчиститьТабличноеПоле()

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	Пусто = Неопределено;
	// Заглушка

КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
		Возврат;
	КонецЕсли;
	
	ПредставлениеОтчета = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	
	Шапка = ЭлементыФормы[Парам1.ИмяТабличногоПоля].ПолучитьОбласть("Шапка");
	Шапка.ОтображатьЗаголовки = Ложь;
	Шапка.ОтображатьСетку     = Ложь;
	Шапка.ЧерноБелыйПросмотр  = Истина;
	Шапка.ЧерноБелаяПечать    = Истина;
	Шапка.Автомасштаб         = Истина;
	Шапка.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
	мПечатныеФормы.Добавить(Шапка, ПредставлениеОтчета);
	
	ИсходныйТаблДок = ЭлементыФормы[Парам1.ИмяТабличногоПоля].ПолучитьОбласть(Шапка.ВысотаТаблицы + 1, 0, ЭлементыФормы[Парам1.ИмяТабличногоПоля].ВысотаТаблицы, 0);
		
	СписокОбластейСтрок = Новый ТаблицаЗначений;
	СписокОбластейСтрок.Колонки.Добавить("Имя");
	СписокОбластейСтрок.Колонки.Добавить("Верх");
	СписокОбластейСтрок.Колонки.Добавить("Низ");
	Для Каждого Обл Из ИсходныйТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = СписокОбластейСтрок.Добавить();
			НовСтр.Имя = Обл.Имя;
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		Конецесли;
	КонецЦикла;
	СписокОбластейСтрок.Сортировать("Верх");
	
	МассивОбластейСтрок = Новый Массив;
	
	ШагОбластиМногострочнойЧасти = ?(ИсходныйТаблДок.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти") <> Неопределено, 
									ИсходныйТаблДок.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти").ВысотаТаблицы, 1);
	
	Для Сч = 1 По СписокОбластейСтрок.Количество() Цикл
		ТекОблСтр = СписокОбластейСтрок.Получить(Сч - 1);
		Если Найти(ВРЕГ(ТекОблСтр.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			Низ = СписокОбластейСтрок.Получить(Сч).Верх - 1;
			Для Инд = 0 По ((Низ + 1) - ТекОблСтр.Верх)/ШагОбластиМногострочнойЧасти - 1 Цикл
				ВерхСтроки = ТекОблСтр.Верх + Инд*ШагОбластиМногострочнойЧасти;
				НизСтроки = ВерхСтроки + ШагОбластиМногострочнойЧасти - 1;
				НовТаблДок = ИсходныйТаблДок.ПолучитьОбласть(ВерхСтроки, 0, НизСтроки, 0);
				НовТаблДок.ОтображатьЗаголовки = Ложь;
				НовТаблДок.ОтображатьСетку     = Ложь;
				НовТаблДок.ЧерноБелыйПросмотр  = Истина;
				НовТаблДок.ЧерноБелаяПечать    = Истина;
				НовТаблДок.Автомасштаб         = Истина;
				НовТаблДок.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
				МассивОбластейСтрок.Добавить(НовТаблДок);
			КонецЦикла;
		Иначе
			НовТаблДок = ИсходныйТаблДок.ПолучитьОбласть(ТекОблСтр.Имя);
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			НовТаблДок.ОтображатьСетку     = Ложь;
			НовТаблДок.ЧерноБелыйПросмотр  = Истина;
			НовТаблДок.ЧерноБелаяПечать    = Истина;
			НовТаблДок.Автомасштаб         = Истина;
			НовТаблДок.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
			МассивОбластейСтрок.Добавить(НовТаблДок);
		КонецЕсли;
	КонецЦикла;
	
	НижняяГраница = 0;
	Для Сч = 0 По МассивОбластейСтрок.Количество() - 1 Цикл
		Состояние(ПредставлениеОтчета + ". Формирование листа №" + (мПечатныеФормы.Количество() + 1) + " ... ");
		//ТекСтрока = ИсходныйТаблДок.ПолучитьОбласть(Сч, 0, Сч, 0);
		
		ТекСтрока = МассивОбластейСтрок.Получить(Сч);
		ТекСтрока.ОтображатьЗаголовки = Ложь;
		ТекСтрока.ОтображатьСетку     = Ложь;
		ТекСтрока.ЧерноБелыйПросмотр  = Истина;
		ТекСтрока.ЧерноБелаяПечать    = Истина;
		ТекСтрока.Автомасштаб         = Истина;
		ТекСтрока.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
		
		ПередТекСтрокой = Новый ТабличныйДокумент;
		Для Инд = НижняяГраница По Сч - 1 Цикл
			ПередТекСтрокой.Вывести(МассивОбластейСтрок[Инд]);
		КонецЦикла;
		//ПередТекСтрокой = ИсходныйТаблДок.ПолучитьОбласть(НижняяГраница, 0, Сч - 1, 0);
		ПередТекСтрокой.ОтображатьЗаголовки = Ложь;
		ПередТекСтрокой.ОтображатьСетку     = Ложь;
		ПередТекСтрокой.ЧерноБелыйПросмотр  = Истина;
		ПередТекСтрокой.ЧерноБелаяПечать    = Истина;
		ПередТекСтрокой.Автомасштаб         = Истина;
		ПередТекСтрокой.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
		
		Если НЕ ПередТекСтрокой.ПроверитьВывод(ТекСтрока) Тогда
			//ПередТекСтрокой.Область(ПередТекСтрокой.ВысотаТаблицы, 0, ПередТекСтрокой.ВысотаТаблицы,0).КонецСтраницы = Ложь;
			мПечатныеФормы.Добавить(ПередТекСтрокой, ПредставлениеОтчета);
			НижняяГраница = Сч;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НижняяГраница <= ИсходныйТаблДок.ВысотаТаблицы Тогда
		
		ПередТекСтрокой = Новый ТабличныйДокумент;
		Для Инд = НижняяГраница По МассивОбластейСтрок.Количество() - 1 Цикл
			ПередТекСтрокой.Вывести(МассивОбластейСтрок[Инд]);
		КонецЦикла;
		//ПередТекСтрокой = ИсходныйТаблДок.ПолучитьОбласть(НижняяГраница, 0, Сч , 0);
		ПередТекСтрокой.ОтображатьЗаголовки = Ложь;
		ПередТекСтрокой.ОтображатьСетку     = Ложь;
		ПередТекСтрокой.ЧерноБелыйПросмотр  = Истина;
		ПередТекСтрокой.ЧерноБелаяПечать    = Истина;
		ПередТекСтрокой.Автомасштаб         = Истина;
		ПередТекСтрокой.ОриентацияСтраницы  = Парам1.ОриентацияЛиста;
		мПечатныеФормы.Добавить(ПередТекСтрокой, ПредставлениеОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	ОбновитьСтруктуруМногострочныхРазделов();
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ЭлементыФормы.ОтклВыборЗначений.Значение);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ИзменитьТаблицуВариантовЗаполнения (НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);
	
КонецПроцедуры

//Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции //Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

//Процедура ИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь)

	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
			ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
			ПереборЗнач = ПереборЗнач-1;
			// а если это многостраничный раздел?
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(ИмяСтраницы); // кол-во страниц в разделе
			// Всегда получим актуальную таблицу заполнения. Не эталонную.
			ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);

			Если ТаблицаВариантыЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ПолныйРучнойВвод Тогда
				// Если раздел многостраничный, то нужно насквозь все обнулять !!!

				Если КолСтрВРазделе = 1 Тогда

					Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли;
					КонецЦикла; // Для Каждого Строка Из

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
				КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
				Если КолСтрВРазделе >= 2 Тогда

					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 4 Тогда
								Строка.ВариантЗаполнения = 0; // полный ручной ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого
					КонецЦикла; // Для
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
				КонецЕсли; // КолСтрВРазделе >= 2

			ИначеЕсли ПолныйРучнойВвод Тогда

				// Всё в эталонном виде
				Если КолСтрВРазделе = 1 Тогда
					Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
						Если Стр.ВариантЗаполнения = 0 Тогда
							Стр.ВариантЗаполнения = 4
						КонецЕсли;
					КонецЦикла;

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

				КонецЕсли; // если одна страница в разделе

				Если КолСтрВРазделе >= 2 Тогда
					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 0 Тогда
								//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
								Строка.ВариантЗаполнения = 4; // полный автоматический ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого

					КонецЦикла; // Для

					// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

				КонецЕсли; // если более 1 страница в разделе

			КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// восстанавливаем реквизиты отчета
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	//ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	//ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	//ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	//СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Проверяем и конвертируем данные, в том случае, если прежние данные открываются новым отчетом
		//Если (мВерсияФормыЧисло(мСтараяВерсияФормы) <= 20031210) Тогда
		//	// Проверяем и конвертируем данные, в том случае, если прежние данные открываются новым отчетом
		//	РегламентированнаяОтчетность.КонвертацияОтчетнойФормы( , ЭтаФорма, мСтараяВерсияФормы, ПоказателиОтчета);
		//КонецЕсли;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

		мОргЮрАдресМНС = мРаздел1.Области.ОргЮрАдрес.Значение;
		мОргПрАдресМНС = мРаздел1.Области.ОргАдресПроизводства.Значение;

		мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
		мРаздел1.Области.ОргАдресПроизводства.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// восстанавливаем флажок ПодсчетаСтраниц       
	//СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;
	ЭлементыФормы.ОтклВыборЗначений.Значение = мАвтоВыборКодов;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	мДокументВосстановлен = Истина;

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// вариант заполнения ячейки определяется по колонке 6 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено)

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = "Раздел1";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

			Если Операция = "Очистить" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "Раздел1";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;

		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Для ДвойнаяМногострочность = 0 По 1 Цикл

					Если Многострочность Тогда

						ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);

						Если (ДвойнаяМногострочность = 0) Тогда
							ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "П000010001007", "П000010001107");
							ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "П000010001013", "П000010001113");
						КонецЕсли;

						//Если (ДвойнаяМногострочность = 0) И (ИмяПоказателя = "П000010001013") Тогда
						//	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "П000010001013", "П000010001113");
						//КонецЕсли;

					КонецЕсли;

					//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
					ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

					// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
					Если НЕ ЗначениеВКвадратах Тогда
						ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
						Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
							ТекОбластьЯчеек.Примечание.Текст = Комментарий;
						КонецЕсли;
					КонецЕсли;

					Ключ = "_" + ВариантЗаполнения;
					мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

					Если ВариантЗаполнения = 4 Тогда
						//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							СвойстваГрупповыхЗначений(ИмяПоказателя, "УстановитьЗащиту");
						Иначе
							ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
						КонецЕсли;

					Иначе

						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							СвойстваГрупповыхЗначений(ИмяПоказателя,"СнятьЗащиту");
						Иначе
							ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
						КонецЕсли;
					КонецЕсли;

					Если ЗначениеВКвадратах Тогда
						СвойстваГрупповыхЗначений(ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	Перем СтруктураГруппы;
	
	Если ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда

		Возврат; // отключен режим АвтоЗаполнения

	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);

	// строка 010, графа 7, отгружено с начала года, всего
	//
	// объем физический
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл
		НомСтр = "_" + Ном;

		мРаздел1.Области["П000010001007"+НомСтр].Значение = 
		мРаздел1.Области["П000010001008"+НомСтр].Значение +
		мРаздел1.Области["П000010001009"+НомСтр].Значение +
		мРаздел1.Области["П000010001010"+НомСтр].Значение +
		мРаздел1.Области["П000010001011"+НомСтр].Значение +
		мРаздел1.Области["П000010001012"+НомСтр].Значение ;

		ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
		ТекСтрокаТаблицы.П000010001007 = мРаздел1.Области["П000010001007"+НомСтр].Значение;
	КонецЦикла;
	// объем безводного спирта
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл
		НомСтр = "_" + Ном;

		мРаздел1.Области["П000010001107"+НомСтр].Значение = 
		мРаздел1.Области["П000010001108"+НомСтр].Значение +
		мРаздел1.Области["П000010001109"+НомСтр].Значение +
		мРаздел1.Области["П000010001110"+НомСтр].Значение +
		мРаздел1.Области["П000010001111"+НомСтр].Значение +
		мРаздел1.Области["П000010001112"+НомСтр].Значение ;

		ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
		ТекСтрокаТаблицы.П000010001107 = мРаздел1.Области["П000010001107"+НомСтр].Значение;
	КонецЦикла;

	// строка 010, графа 13, остаток на конец отчетного периода
	//
	// объем физический
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл
		НомСтр = "_" + Ном;

		мРаздел1.Области["П000010001013"+НомСтр].Значение = 
		мРаздел1.Области["П000010001005"+НомСтр].Значение +
		мРаздел1.Области["П000010001006"+НомСтр].Значение -
		мРаздел1.Области["П000010001007"+НомСтр].Значение ;

		ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
		ТекСтрокаТаблицы.П000010001013 = мРаздел1.Области["П000010001013"+НомСтр].Значение;
	КонецЦикла;
	// объем безводного спирта
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл
		НомСтр = "_" + Ном;

		мРаздел1.Области["П000010001113"+НомСтр].Значение = 
		мРаздел1.Области["П000010001105"+НомСтр].Значение +
		мРаздел1.Области["П000010001106"+НомСтр].Значение -
		мРаздел1.Области["П000010001107"+НомСтр].Значение ;

		ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
		ТекСтрокаТаблицы.П000010001113 = мРаздел1.Области["П000010001113"+НомСтр].Значение;
	КонецЦикла;

	Группа1 = "П0000100010";
	Группа2 = "П0000100011";

	// строка 020, итог по графам 5 - 14
	//
	// объем физический
	мРаздел1.Области.П000010002005.Значение = РасчетСуммМногострочнойЧасти(Группа1,5);
	мРаздел1.Области.П000010002006.Значение = РасчетСуммМногострочнойЧасти(Группа1,6);
	мРаздел1.Области.П000010002007.Значение = РасчетСуммМногострочнойЧасти(Группа1,07);
	мРаздел1.Области.П000010002008.Значение = РасчетСуммМногострочнойЧасти(Группа1,08);
	мРаздел1.Области.П000010002009.Значение = РасчетСуммМногострочнойЧасти(Группа1,09);
	мРаздел1.Области.П000010002010.Значение = РасчетСуммМногострочнойЧасти(Группа1,10);
	мРаздел1.Области.П000010002011.Значение = РасчетСуммМногострочнойЧасти(Группа1,11);
	мРаздел1.Области.П000010002012.Значение = РасчетСуммМногострочнойЧасти(Группа1,12);
	мРаздел1.Области.П000010002013.Значение = РасчетСуммМногострочнойЧасти(Группа1,13);
	мРаздел1.Области.П000010002014.Значение = РасчетСуммМногострочнойЧасти(Группа1,14);	
	// объем безводного спирта
	мРаздел1.Области.П000010002105.Значение = РасчетСуммМногострочнойЧасти(Группа2,5);
	мРаздел1.Области.П000010002106.Значение = РасчетСуммМногострочнойЧасти(Группа2,6);
	мРаздел1.Области.П000010002107.Значение = РасчетСуммМногострочнойЧасти(Группа2,7);
	мРаздел1.Области.П000010002108.Значение = РасчетСуммМногострочнойЧасти(Группа2,8);
	мРаздел1.Области.П000010002109.Значение = РасчетСуммМногострочнойЧасти(Группа2,9);
	мРаздел1.Области.П000010002110.Значение = РасчетСуммМногострочнойЧасти(Группа2,10);
	мРаздел1.Области.П000010002111.Значение = РасчетСуммМногострочнойЧасти(Группа2,11);
	мРаздел1.Области.П000010002112.Значение = РасчетСуммМногострочнойЧасти(Группа2,12);
	мРаздел1.Области.П000010002113.Значение = РасчетСуммМногострочнойЧасти(Группа2,13);
	мРаздел1.Области.П000010002114.Значение = РасчетСуммМногострочнойЧасти(Группа2,14);

КонецПроцедуры // Расчет()

// Функция вычисляет итоговую сумму по конкретной графе по всем строкам
// многострочного раздела.
//
// Параметры:
// 	 Парам - строка  - показатель ячейки, по которой суммируются значения
//                     по всем строкам многострочного раздела.
//
// Возвращаемое значение:
//   число.
//
Функция РасчетСуммМногострочнойЧасти(Парам, НомКолонки) 
	
	Перем СтруктураГруппы;
	
	СуммаПоГрафе = 0; 
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(мИдГруппы1);	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
	
	ИмяКолонки = Парам + ?(НомКолонки>9,Строка(НомКолонки),"0"+Строка(НомКолонки));
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	Для Инд = 1 по КолСтрок Цикл
		ИмяЯчейкиСтроки = ИмяКолонки + "_" + Инд;
		ОбластьЯчейки 	= ТекТабличноеПоле.Области[ИмяЯчейкиСтроки];
		СуммаПоГрафе 	= СуммаПоГрафе + ОбластьЯчейки.Значение;
	КонецЦикла;

	Возврат СуммаПоГрафе;				
	
КонецФункции  // РасчетСуммМнч()

Процедура Очистить() Экспорт
	
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	мРаздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мОргЮрАдресМНС = "";
	мОргПрАдресМНС = "";

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мСтараяВерсияФормы = мВерсияФормы;
	
	// Получаем список видов продукции	
	ЗагрузитьПоказателиИзМакета("КодыВидовПродукции");
	ЗагрузитьПоказателиИзМакета("ВидыДеятельности");

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован

			ВосстановитьСохраненныеДанные();

		Иначе

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ДоступностьКнопокДобавитьУдалить();

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел1");

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
//
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ИмяТекущейСтраницыПанели = "Раздел1";

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Приложение1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзменении(Элемент)

	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

// Процедура вызывается при выборе доступных для редактирования
// ячеек табличного документа.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриВыборе(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "ОргВидДеят") И (НЕ ЭлементыФормы.ОтклВыборЗначений.Значение) Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = Область.Значение;
		НайденнаяСтрока = мВидыДеятельности.Найти(ПервоначальноеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			Рез = мВидыДеятельности.ВыбратьСтроку("Виды деятельности", НайденнаяСтрока);
		Иначе
			Рез = мВидыДеятельности.ВыбратьСтроку("Виды деятельности");
		КонецЕсли;

		Если Рез <> Неопределено Тогда
			Область.Значение = Рез.Получить(0);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (НЕ ЭлементыФормы.ОтклВыборЗначений.Значение) И ((Область.Имя = "ОргЮрАдрес") Или ( Область.Имя = "ОргАдресПроизводства")) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", ?(Область.Имя = "ОргЮрАдрес", мОргЮрАдресМНС, ?(Область.Имя = "ОргАдресПроизводства", мОргПрАдресМНС, Область.Значение)));

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "ОргЮрАдрес" Тогда
				мОргЮрАдресМНС = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мОргЮрАдресМНС = ",,,,,,,,," Тогда
					мОргЮрАдресМНС = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);

			ИначеЕсли Область.Имя = "ОргАдресПроизводства" Тогда

				мОргПрАдресМНС = ВводАдреса.НачальноеЗначениеВыбора.Представление;

				Если мОргПрАдресМНС = ",,,,,,,,," Тогда
					мОргПрАдресМНС = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

			Иначе
				Область.Значение = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	ИначеЕсли ((Найти(Область.Имя, "П000010001002") > 0) ИЛИ (Найти(Область.Имя, "П000010001003") > 0))
	И (НЕ ЭлементыФормы.ОтклВыборЗначений.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		НСтр = Сред(Область.Имя, 15);
		ТекКод = мРаздел1.Области["П000010001003_" + НСтр].Значение;
		ПоисковаяСтрока = мКодыВидовПродукции.Найти(ТекКод, "Код");

		Если ПоисковаяСтрока <> Неопределено Тогда
			Результат = мКодыВидовПродукции.ВыбратьСтроку("Выбор вида продукции", ПоисковаяСтрока);
		Иначе
			Результат = мКодыВидовПродукции.ВыбратьСтроку("Выбор вида продукции");
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если РегламентированнаяОтчетность.ПустоеЗначение(Результат[0]) Тогда
				мРаздел1.Области["П000010001002_" + НСтр].Значение = "";
				мРаздел1.Области["П000010001003_" + НСтр].Значение = "";

			Иначе

				мРаздел1.Области["П000010001002_" + НСтр].Значение = Результат[1];
				мРаздел1.Области["П000010001003_" + НСтр].Значение = Результат[0];
			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Лист03 (Раздел А)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиЛист03_РазделАНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку.
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиЛист03_РазделАНажатие()

// Процедура - обработчик нажатия кнопки "<"
//
Процедура КнопкаПредыдущаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");

КонецПроцедуры // КнопкаПредыдущаяСтраницаНажатие()

// Процедура - обработчик нажатия кнопки ">"
//
Процедура КнопкаСледующаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");

КонецПроцедуры // КнопкаСледующаяСтраницаНажатие()

// Процедура - обработчик нажатия кнопки "Добавить"
// 
//  
Процедура КнопкаДобавитьДопСтраницуНажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");

	//мОргЮрАдресМНС;
	мОргПрАдресМНС = "";

	мРаздел1.Области.ОргАдресПроизводства.Значение = "";
	//мРаздел1.Области.ОргКодОКАТО.Значение = "";
	мРаздел1.Области.ЛицСерия.Значение = "";
	мРаздел1.Области.ЛицНомер.Значение = "";

	мРаздел1.Области.ЛицДата.Очистить();
	мРаздел1.Области.ЛицДатаНач.Очистить(); // Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	мРаздел1.Области.ЛицДатаКон.Очистить(); // Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	мРаздел1.Области.ЛицВыдан.Значение = "";
	мРаздел1.Области.ОргВидДеят.Значение = "";

КонецПроцедуры // КнопкаДобавитьДопСтраницуНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" 
//
Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)

	УдалитьДополнительнуюСтраницу("Раздел1");

КонецПроцедуры // КнопкаУдалитьДопСтраницуНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" 
//
Процедура КнопкаПерейтиНаСтраницуНажатие(Элемент)

	Перем АдресНач1;
	Перем АдресНач2;

	Перем АдресНач1После;
	Перем АдресНач2После;

	АдресНач1 = мРаздел1.Области.ОргЮрАдрес.Значение;
	АдресНач2 = мРаздел1.Области.ОргАдресПроизводства.Значение;

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

	АдресНач1После = мРаздел1.Области.ОргЮрАдрес.Значение;
	АдресНач2После = мРаздел1.Области.ОргАдресПроизводства.Значение;

	Если АдресНач1 <> АдресНач1После Тогда
		мОргЮрАдресМНС = мРаздел1.Области.ОргЮрАдрес.Значение;
		//мОргПрАдресМНС = мРаздел1.Области.ОргАдресПроизводства.Значение;

		мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
		//мРаздел1.Области.ОргАдресПроизводства.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

	КонецЕсли;

	Если АдресНач2 <> АдресНач2После Тогда
		//мОргЮрАдресМНС = мРаздел1.Области.ОргЮрАдрес.Значение;
		мОргПрАдресМНС = мРаздел1.Области.ОргАдресПроизводства.Значение;

		//мРаздел1.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргЮрАдресМНС);
		мРаздел1.Области.ОргАдресПроизводства.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мОргПрАдресМНС);

	КонецЕсли;

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист03_РазделыБВНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2005Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				
				Если РазделВМакете = "КодыВидовПродукции" Тогда

					НовСтрока = мКодыВидовПродукции.Добавить();

				ИначеЕсли РазделВМакете = "ВидыДеятельности" Тогда

					НовСтрока = мВидыДеятельности.Добавить();

				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",    ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// вариант заполнения ячейки определяется по колонке 6 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			КонецЕсли;

		КонецЦикла;

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002005";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002005";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002006";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002006";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002007";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002007";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002008";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002008";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002009";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002009";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002010";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002010";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002011";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002011";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002012";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002012";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002013";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002013";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002014";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002014";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002105";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002105";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002106";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002106";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002107";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002107";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002108";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002108";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002109";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002109";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002110";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002110";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002111";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002111";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002112";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002112";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002113";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002113";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
		НоваяСтрока.ИмяПоляТаблДокумента   = "ФормаОтчета";
		НоваяСтрока.КодПоказателяПоСоставу = "П000010002114";
		НоваяСтрока.КодПоказателяПоФорме   = "";
		НоваяСтрока.ПризнМногострочности   = "";
		НоваяСтрока.ТипДанныхПоказателя    = "Ч";
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
		НоваяСтрока.КодПоказателя      = "П000010002114";
		НоваяСтрока.ВариантЗаполнения  = 4;
		НоваяСтрока.КодПоказателяПоСтруктуре  = "";

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти

// ОтклВыборЗначенийПриИзменении
//
Процедура ОтклВыборЗначенийПриИзменении(Элемент)

	мАвтоВыборКодов = ЭлементыФормы.ОтклВыборЗначений.Значение;

КонецПроцедуры // ОтклВыборЗначенийПриИзменении

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция проверяет правильность заполнения показателей отчета.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Истина, если показатели заполнены верно и Ложь в противном случае.
//
Функция ПроверкаЗаполнения()
	
	СтатусВозврата = Истина;
	
	НомерСтраницы = 0;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
		
		НомерСтраницы = НомерСтраницы + 1;
		Если Страница.Данные = Неопределено И НомерСтраницы = 1 Тогда
			Возврат Ложь;
		Конецесли;
		
		// Если это первый проход, то проверим сведения об организации
		Если НомерСтраницы = 1 Тогда
			Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргНазв) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице 1 не указано наименование организации!", "Раздел1", "ОргНазв", 1);
				СтатусВозврата = Ложь;
			КонецЕсли;
			Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргКодОКПО) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице 1 не указан код организации!", "Раздел1", "ОргКодОКПО", 1);
				СтатусВозврата = Ложь;
			КонецЕсли;
			Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргИНН) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице 1 не указан ИНН организации!", "Раздел1", "ОргИНН", 1);
				СтатусВозврата = Ложь;
			КонецЕсли;
			Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргЮрАдрес) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице 1 не указан юридический адрес организации!", "Раздел1", "ОргЮрАдрес", 1);
				СтатусВозврата = Ложь;
			КонецЕсли;
			Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргАдресПроизводства) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице 1 не указан адрес нахождения производства!", "Раздел1", "ОргАдресПроизводства", 1);
				СтатусВозврата = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверим сведения о лицензии
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицСерия) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана серия лицензии!", "Раздел1", "ЛицСерия", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицНомер) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан номер лицензии!", "Раздел1", "ЛицНомер", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицДата) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана дата получения лицензии!", "Раздел1", "ЛицДата", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицДатаНач) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана дата начала действия лицензии!", "Раздел1", "ЛицДатаНач", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицДатаКон) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана дата конца действия лицензии!", "Раздел1", "ЛицДатаКон", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ЛицВыдан) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано кем выдана лицензия!", "Раздел1", "ЛицВыдан", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Страница.Данные.ОргВидДеят) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан вид деятельности!", "Раздел1", "ОргВидДеят", НомерСтраницы);
			СтатусВозврата = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат СтатусВозврата;
	
КонецФункции

// Функция возвращает строковое представление значения показателя для выгрузки,
// отформатированное в соответствии с общими требованиями формата 2.01
//
// Параметры:
//	ЗначениеЯчейки - значение, которое следует отформатировать
//	ПризнакФормата - строка, описатель формата
//
// Возвращаемое значение:
//	Строка - отфзначение показателя для помещения в текст выгрузки
//
Функция ОтформатироватьПоказатель(ЗначениеЯчейки, ПризнакФормата)
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	Если РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Возврат "";
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Возврат "";
			Иначе
				Возврат СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если РегламентированнаяОтчетность.ПустоеЗначение(Дата(ЗначениеЯчейки)) = 1 Тогда
				Возврат "";
			Иначе
				Возврат СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D"));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Возврат "";
			Иначе	
				Возврат ВРЕГ(СокрЛ(Знч));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

// Функция извлекает значение показателя многострочной части из структуры, 
// хранящей значения показателей отчета, форматирует его и возвращает
//
// Параметры:
//	ТекДанные - структура, хранящая значения показателей отчета
//	Показатель - строка, имя показателя
//	Инд - число, номер строки многострочной части
//
// Возвращаемое значение:
//	Строка - значение показателя для помещения в текст выгрузки
//
Функция ПолучитьПоказатель(ТекДанные, Показатель, Инд)
	
	Если Показатель.КодПоказателяПоСоставу >= "П000010001004" Тогда
		Возврат ОтформатироватьПоказатель(ТекДанные[Показатель.КодПоказателяПоСоставу + "_" + Инд], Показатель.ТипДанныхПоказателя)
			+ "," + ОтформатироватьПоказатель(ТекДанные[Лев(Показатель.КодПоказателяПоСоставу, 10) + "1" + Сред(Показатель.КодПоказателяПоСоставу, 12) + "_" + Инд], Показатель.ТипДанныхПоказателя);
	Иначе
		Возврат ОтформатироватьПоказатель(ТекДанные[Показатель.КодПоказателяПоСоставу + "_" + Инд], Показатель.ТипДанныхПоказателя);
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события по нажатию на кнопку "Выгрузить" командной панели "КоманднаяПанельФормы"
// Процедура формирует текст выгрузки и сохраняет его в файл в указанном пользователем каталоге.
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ТаблицаСообщений.Очистить();
	Возврат ПроверкаЗаполнения();
	
КонецФункции
	
Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;

КонецПроцедуры

Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	Перем Врем;
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипИнформации = "1152021";
	
	Если Текст = Неопределено Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , , Организация.КодИМНС + "*****************", ТипИнформации, "2.01"))
		ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация, , , , Истина)) Тогда
		
		Сообщить("Не удалось сформировать общую информацию для файла выгрузки формата 2.01!", СтатусСообщения.Внимание);
		Возврат Ложь;
			
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Организация, , , мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС) Тогда
		Сообщить("Не удалось собрать общие сведения информационной части для файла выгрузки формата 2.01!", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	ПервыйПроход = Истина;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
		
		Если Страница.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйПроход Тогда // если это первый проход, то выгрузим сведения об организации
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ИННЮЛ, КППЮЛ, ФИОРук, ФИОБух");
			Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРЕГ(Лев(СокрЛП(СтрЗаменить(Страница.Данные.ОргНазв, Символы.ПС, "")), 1000)));
			Текст.ДобавитьСтроку("ОКПО:" + ВРЕГ(СокрЛП(Страница.Данные.ОргКодОКПО)));
			Текст.ДобавитьСтроку("ИННЮЛ:" + СокрЛП(СведенияОбОрганизации.ИННЮЛ));
			Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(СведенияОбОрганизации.КППЮЛ));
			Текст.ДобавитьСтроку("АдрЮр:" + ВРЕГ(СокрЛП(Страница.Данные.ОргЮрАдрес)));
			Текст.ДобавитьСтроку("ТелЮЛ:" + ВРЕГ(Лев(СокрЛП(Страница.Данные.ОргТелефон), 20)));
			Текст.ДобавитьСтроку("АдрПроиз:" + ВРЕГ(СокрЛП(Страница.Данные.ОргАдресПроизводства)));
			Текст.ДобавитьСтроку("ОКАТО:");
			Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(СокрЛП(СведенияОбОрганизации.ФИОРук)));
			Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(СокрЛП(СведенияОбОрганизации.ФИОБух)));
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
		
		// выгрузим сведения о лицензии
		Текст.ДобавитьСтроку("НомерЛиц:" + ВРЕГ(Лев(СокрЛП(Страница.Данные.ЛицСерия), 1000)) + "," + ВРЕГ(Лев(СокрЛП(Страница.Данные.ЛицНомер), 1000)));
		Текст.ДобавитьСтроку("ДатаЛиц:" + Формат(Страница.Данные.ЛицДата, "ДФ=dd.MM.yyyy; ДП=00.00.0000"));
		Текст.ДобавитьСтроку("ПериодЛиц:" + Формат(Страница.Данные.ЛицДатаНач, "ДФ=dd.MM.yyyy; ДП=00.00.0000") + "," + Формат(Страница.Данные.ЛицДатаКон, "ДФ=dd.MM.yyyy; ДП=00.00.0000"));
		Текст.ДобавитьСтроку("НаимОргЛиц:" + ВРЕГ(Лев(СокрЛП(Страница.Данные.ЛицВыдан), 1000)));
		Текст.ДобавитьСтроку("ВидДеят:" + ВРЕГ(Лев(СокрЛП(Страница.Данные.ОргВидДеят), 5)));
		Текст.ДобавитьСтроку("###");
		
		ПервыйПроход = Ложь;
	КонецЦикла;
	
	// сведения о квоте
	Если РегламентированнаяОтчетность.ПустоеЗначение(мСтруктураМногостраничныхРазделов.Раздел1[0].Данные.КвотаВсего) ИЛИ
		РегламентированнаяОтчетность.ПустоеЗначение(мСтруктураМногостраничныхРазделов.Раздел1[0].Данные.КвотаТекущая) Тогда
		
		Текст.ДобавитьСтроку("Квота:");
		
	Иначе
				
		Текст.ДобавитьСтроку("Квота:" + Формат(мСтруктураМногостраничныхРазделов.Раздел1[0].Данные.КвотаВсего	, "ЧРД=.; ЧГ=0")
								+ "," + Формат(мСтруктураМногостраничныхРазделов.Раздел1[0].Данные.КвотаТекущая	, "ЧРД=.; ЧГ=0"));
								
	КонецЕсли;
	Текст.ДобавитьСтроку("ДатаКвота:" + ?(НЕ ЗначениеЗаполнено(Страница.Данные.КвотаДата), "", Формат(Страница.Данные.КвотаДата, "ДФ=dd.MM.yyyy; ДП=00.00.0000")));
	Текст.ДобавитьСтроку("НаимОргКвота:" + ВРЕГ(Лев(СокрЛП(Страница.Данные.КвотаВыдана), 1000)));
	Текст.ДобавитьСтроку("###");
	
	// выгружаем табличную часть
	ВыгруженаХотяБыОднаСтрока = Ложь;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
		
		ТекДанные = Страница.Данные;
		Инд = 1;
		Пока ТекДанные.Свойство(мТаблицаСоставПоказателей[0].КодПоказателяПоСоставу + "_" + Инд, Врем) Цикл
			
			СтрокаПустая = Истина;
			Для Каждого Показатель Из мТаблицаСоставПоказателей Цикл
				Если Сред(Показатель.КодПоказателяПоСоставу, 10, 2) <> "10" Тогда 
					Продолжить;
				КонецЕсли;
				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ТекДанные[Показатель.КодПоказателяПоСоставу + "_" + Инд]) Тогда
					СтрокаПустая = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаПустая Тогда
				Инд = Инд + 1;
				Продолжить;
			КонецЕсли;
			
			Для Каждого Показатель Из мТаблицаСоставПоказателей Цикл
				Если Сред(Показатель.КодПоказателяПоСоставу, 10, 2) <> "10" Тогда 
					Продолжить;
				КонецЕсли;
				ИмяТекущегоПоказателя = Показатель.КодПоказателяПоСоставу;
				ЗначениеТекущегоПоказателя = ВРЕГ(ПолучитьПоказатель(ТекДанные, Показатель, Инд));
				ПризнакФормата = Показатель.ТипДанныхПоказателя;
				Текст.ДобавитьСтроку(ИмяТекущегоПоказателя + ":" + ЗначениеТекущегоПоказателя);
				ВыгруженаХотяБыОднаСтрока = Истина;
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
			Инд = Инд + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ВыгруженаХотяБыОднаСтрока Тогда
		Для Каждого Показатель Из мТаблицаСоставПоказателей Цикл
			 Если Сред(Показатель.КодПоказателяПоСоставу, 10, 2) <> "10" Тогда 
				Продолжить;
			КонецЕсли;
			Текст.ДобавитьСтроку(Показатель.КодПоказателяПоСоставу + ":");
		КонецЦикла;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// выводим завершающие строки
	Текст.ДобавитьСтроку("@@@");
	Текст.ДобавитьСтроку("===");
	// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	Возврат Истина;
	
КонецФункции

Процедура ПолеТабличногоДокументаРаздел1АдресПриИзменении(Элемент)

	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокументаРаздел1"].ТекущаяОбласть;

	Если ТекущаяОбласть.Имя = "ОргЮрАдрес" Тогда
		мОргЮрАдресМНС = Элемент.Значение;
	ИначеЕсли ТекущаяОбласть.Имя = "ОргАдресПроизводства" Тогда
		мОргПрАдресМНС  = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

мСоставПоказателей = "СоставПоказателей2005Кв1";

мВидыДеятельности = Новый ТаблицаЗначений;
мВидыДеятельности.Колонки.Добавить("Код",,, 5);
мВидыДеятельности.Колонки.Добавить("Название",,, 70);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мКодыВидовПродукции = Новый ТаблицаЗначений;
мКодыВидовПродукции.Колонки.Добавить("Код",,, 5);
мКодыВидовПродукции.Колонки.Добавить("Название",,,70);

ОписаниеТиповЧисло     = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 4);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока4   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000100010";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 10;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010001001", ОписаниеТиповСтрока4);
СтруктураГруппы1.Колонки.Добавить("П000010001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010001003", ОписаниеТиповСтрока15);
СтруктураГруппы1.Колонки.Добавить("П000010001004", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000010001104", ОписаниеТиповСтрока15);
СтруктураГруппы1.Колонки.Добавить("П000010001005", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001105", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001006", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001106", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001007", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001107", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001008", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001108", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001009", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001109", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001010", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001110", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001011", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001111", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001012", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001112", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001013", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001113", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001014", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010001114", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 1
ТаблицаСтраницыРазделаДляМногострочныхРазделов = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРазделаДляМногострочныхРазделов);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "25/05/1999"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = 1152021;

РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей2005Кв1", "Формат  2.01", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1152021";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ";

мПечатныеФормы = Новый СписокЗначений;
