#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт; 

// Настройка периода
Перем НП Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураСвязиПоказателейИИзмерений Экспорт; // содержит связь показателей и измерений

Перем мМассивШиринКолонок Экспорт; // массив ширин колонок табличного документа для сохранения между формированиями отчета

Перем мИсходныйМакетОтчета Экспорт; // исходный макет, используемый для отчета. По умолчанию "Макет", но может быть переопределен

Перем мНазваниеОтчета Экспорт; // название отчета

Перем мВыбиратьИмяРегистра Экспорт; // признак выбора (изменения) имени регистра (вида отчета)

Перем мВыбиратьИспользованиеСвойств Экспорт; // признак выбора (изменения) флажка использования свойств и категорий

Перем мСтруктураДляОтбораПоКатегориям Экспорт; // содержит связь отборов текста запроса Построителя и значений категорий

Перем мРежимВводаПериода Экспорт; // 0 - произвольный период, 1 - дата, 2 - месяц, 3 - квартал, 4 - год

Перем ШиринаТаблицы;

Перем СтруктураФорматаПолей Экспорт; // хранит формат полей примитивных типов

Перем мСтруктураНевыводимыхГруппировок Экспорт; // Хранит список тех группировок, которые не надо выводить.
												// Применяется в тех случаях, когда нужно пропускать итоги,
												// например Номенклатура - Характеристика - Серия: итоги 
												// по номенклатуре не нужны, нужно только для всех трех

Перем СоответствиеТиповИнтервальныхПолей Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выполняет настройку отчета по умолчанию для заданного регистра накопления.
//
// Параметры: 
//	Нет
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ТаблицаПоказатели = мТаблицаПоказатели.Скопировать();
	мТаблицаПоказатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;

	Показатели.Очистить();

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 

	Если НЕ ПустаяСтрока(ИмяРегистра) Тогда 
		
		// Заполним по метаданным регистра ИмяРегистра
		УправлениеОтчетами.ЗаполнитьНачальныеНастройкиПоМетаданнымРегистра(СтруктураПредставлениеПолей, МассивОтбора, ЭтотОбъект, "СписокКроссТаблица");
	КонецЕсли;

	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если мТаблицаПоказатели.Количество() = 0 Тогда
		
		мТаблицаПоказатели = ТаблицаПоказатели.Скопировать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбработка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 

		// Расшифровка по регистратору, если его еще нет
		Если ПостроительОтчета.ДоступныеПоля.Найти("Регистратор")<>Неопределено Тогда

			Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор")=Неопределено Тогда

				СписокВыбора.Добавить(0, "По документам движения");

			КонецЕсли; 

		КонецЕсли;

		Если СписокВыбора.Количество()>0 Тогда

			Выбор = СписокВыбора.ВыбратьЭлемент("Выберите способ расшифровки", СписокВыбора[СписокВыбора.Количество()-1]);

		Иначе

			Выбор = Неопределено;

		КонецЕсли; 

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// Настройка отчета
		Отчет = Отчеты[ЭтотОтчет.Метаданные().Имя].Создать();
		Параметры = Новый Соответствие;
		
		// Поместим в параметры исходную расшифровку
		Для Каждого ЭлементРасшифровки Из Расшифровка Цикл
			
			Параметры.Вставить(ЭлементРасшифровки.Ключ, ЭлементРасшифровки.Значение);
			
		КонецЦикла;
		
		Параметры.Вставить("ИмяРегистра", ИмяРегистра);
		Параметры.Вставить("ДатаНач", ДатаНач);
		Параметры.Вставить("ДатаКон", ДатаКон);
		
		ИсходныйОтчет = ЭтотОтчет;

		// Это свойство влияет на заполнение
		Параметры.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);

		// Переносимые свойства
		Параметры.Вставить("ПоказыватьЗаголовок",     ПоказыватьЗаголовок);
		Параметры.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
		Параметры.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
		Параметры.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
		Параметры.Вставить("РаскрашиватьИзмерения",   РаскрашиватьИзмерения);
		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);
        Параметры.Вставить("ЭтотОтчет",   ЭтотОтчет);
		
		// Перенос табличной части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");
		ТабОтбор.Индексы.Добавить("Имя");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;


		// Текущий отчет с детальными записями по документам
		Если Выбор.Значение = 0 Тогда
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();

			Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");

			Форма.ОбновитьОтчет();

		Иначе

			// Текущий отчет с дополнительным измерением

			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(Выбор.Значение, Выбор.Значение);

			Форма.ОбновитьОтчет();
		КонецЕсли;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляОсновногоРеквизита(УниверсальныйОтчет) Экспорт
	РеквизитыЭтогоОбъекта = ЭтотОбъект.Метаданные().Реквизиты;
	Для каждого Реквизит из РеквизитыЭтогоОбъекта Цикл
		ЭтотОбъект[Реквизит.Имя] = УниверсальныйОтчет[Реквизит.Имя];
	КонецЦикла;
	СтруктураФорматаПолей.Вставить("Период", "ДЛФ=D");
	
	// Все возможные показатели
	мТаблицаПоказатели = УниверсальныйОтчет.мТаблицаПоказатели; 
	
	// Настройка периода
	НП = УниверсальныйОтчет.НП;
	
	// Соответствия, содержащая назначения свойств и категорий именам
	мСоответствиеНазначений = УниверсальныйОтчет.мСоответствиеНазначений;
	
	мСтруктураСвязиПоказателейИИзмерений = УниверсальныйОтчет.мСтруктураСвязиПоказателейИИзмерений; // содержит связь показателей и измерений
	
	мМассивШиринКолонок = УниверсальныйОтчет.мМассивШиринКолонок; // массив ширин колонок табличного документа для сохранения между формированиями отчета
	
	мНазваниеОтчета  = УниверсальныйОтчет.мНазваниеОтчета; // название отчета
	
	мВыбиратьИмяРегистра  = УниверсальныйОтчет.мВыбиратьИмяРегистра; // признак выбора (изменения) имени регистра (вида отчета)
	
	мВыбиратьИспользованиеСвойств = УниверсальныйОтчет.мВыбиратьИспользованиеСвойств; // признак выбора (изменения) флажка использования свойств и категорий
	
	мРежимВводаПериода = УниверсальныйОтчет.мРежимВводаПериода;
	
	СтруктураФорматаПолей  = УниверсальныйОтчет.СтруктураФорматаПолей; // хранит формат полей примитивных типов
	
	мСтруктураДляОтбораПоКатегориям  = УниверсальныйОтчет.мСтруктураДляОтбораПоКатегориям; // предназначена для связи отборов Построителя с категориями из соединяемых таблиц
	
	УниверсальныйОтчет = ЭтотОбъект;
КонецПРоцедуры

// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПоляВОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	// Это свойство влияет на заполнение
	ИспользоватьСвойстваИКатегории    = Параметры["ИспользоватьСвойстваИКатегории"];
	
	ИмяРегистра = Параметры["ИмяРегистра"];
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	// Настраиваем по умолчанию
	ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();

	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	// Прочие свойства
	ПоказыватьЗаголовок        = Параметры["ПоказыватьЗаголовок"];
	ВыводитьПоказателиВСтроку  = Параметры["ВыводитьПоказателиВСтроку"];
	ВыводитьИтогиПоВсемУровням = Параметры["ВыводитьИтогиПоВсемУровням"];
	ВыводитьДополнительныеПоляВОтдельнойКолонке = Параметры["ВыводитьДополнительныеПоляВОтдельнойКолонке"];
	РаскрашиватьИзмерения      = Параметры["РаскрашиватьИзмерения"];
	
	
	Если НЕ (Параметры["ЗаполнитьПоУмолчанию"] = Истина) Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Имя = ПостроительОтчета.Отбор[Инд].Имя Тогда					
					ПостроительОтчета.Отбор[Инд].ВидСравнения = Строка.ВидСравнения;
					ПостроительОтчета.Отбор[Инд].Использование = Истина;
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];					
				КонецЕсли;
				
			КонецЦикла; 			
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Имя);				
				ПостроительОтчета.Отбор[Инд].ВидСравнения = Строка.ВидСравнения;
				ПостроительОтчета.Отбор[Инд].Использование = Истина;
				
				//ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				
			КонецЕсли; 
			
			Если Строка.Значение <> Null Тогда				
				ЭлементОтбора.Значение = Строка.Значение;
			КонецЕсли;
			Если Строка.ЗначениеС <> Null Тогда				
				ЭлементОтбора.ЗначениеС = Строка.ЗначениеС;
			КонецЕсли;
			Если Строка.ЗначениеПо <> Null Тогда				
				ЭлементОтбора.ЗначениеПо = Строка.ЗначениеПо;
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Упорядочивение
	СтрокиПорядка = Параметры["Порядок"];
	Если ТипЗнч(СтрокиПорядка) = Тип("Структура")
		ИЛИ ТипЗнч(СтрокиПорядка) = Тип("Соответствие") Тогда
		
		Для Каждого СтрокаПорядка Из СтрокиПорядка Цикл
			Направление = НаправлениеСортировки.Возр;
			Если СтрокаПорядка.Значение = НаправлениеСортировки.Убыв 
				ИЛИ Врег(СтрокаПорядка.Значение) = "УБЫВ" Тогда
				
				Направление = НаправлениеСортировки.Убыв;
			КонецЕсли;
			ПостроительОтчета.Порядок.Добавить(СтрокаПорядка.Ключ,,,Направление);
		КонецЦикла;
		
	КонецЕсли;
	
	НазваниеОтчета = Параметры["НазваниеОтчета"];
	Если ТипЗнч(НазваниеОтчета) = Тип("Строка") Тогда
		мНазваниеОтчета = НазваниеОтчета;
	КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

// Возвращает основную форму отчета
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   основная форма отчета
//
Функция ПолучитьОсновнуюФорму() Экспорт

	Возврат ПолучитьФорму();

КонецФункции // ПолучитьОсновнуюФорму()

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока) Экспорт

	//СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	//СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;
	Если Показатели.Найти(ИмяПоля) = Неопределено Тогда
		НовыйПоказатель = Показатели.Добавить();
		НовыйПоказатель.Имя = ИмяПоля;
		НовыйПоказатель.Представление = ПредставлениеПоля;
		НовыйПоказатель.Использование    = ВклПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Формирует табличку-заголовок
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция СформироватьЗаголовок(МакетОтчета, КоличествоКолонок, ТолькоЗаголовок, ВыводитьДетальныеЗаписи)


	// Формирование макета заголовка отчета
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,2+КоличествоКолонок).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,2+КоличествоКолонок).Очистить(Истина);
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок).ПоВыделеннымКолонкам = Истина;
	
	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");

	Заголовок = мНазваниеОтчета;
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если мРежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли мРежимВводаПериода =  1 Тогда   // на дату

		Если ДатаКон = '00010101000000' Тогда

			Если ТолькоЗаголовок Тогда
				ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			Иначе
				ОписаниеПериода = "на " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг ЧЧ:мм:сс""; ДП = ""...""");
			КонецЕсли; 

		Иначе

			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		КонецЕсли;

	ИначеЕсли мРежимВводаПериода = 2 Тогда   // месяц

		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаНач), "ФП = Истина");
		КонецЕсли;

	ИначеЕсли мРежимВводаПериода = 3 Тогда   // квартал

		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоКвартала(ДатаНач), КонецКвартала(ДатаНач), "ФП = Истина");
		КонецЕсли;

	ИначеЕсли мРежимВводаПериода = 4 Тогда   // год
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоГода(ДатаНач), КонецГода(ДатаНач), "ФП = Истина");
		КонецЕсли;
		
	КонецЕсли;

	СписокИзмерений = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		СписокИзмерений = СписокИзмерений +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;

	КонецЦикла; 

	СписокКолонок = "";
	СписокПолейДетальныхЗаписей = "";
	Для Сч=0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

		Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			Если ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным <> ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным
				И Найти(ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным, ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) >0 Тогда
		
				СписокКолонок = СписокКолонок +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;
			КонецЕсли;

		КонецЦикла;
		Если ВыводитьДетальныеЗаписи Тогда

			СписокПолейДетальныхЗаписей = СписокПолейДетальныхЗаписей +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;

		КонецЕсли; 

	КонецЦикла;

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда

			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;

		КонецЕсли; 

	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла; 

	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = Заголовок;
	ЗаголовокОтчета.Параметры.Период     = "Период: "+ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Измерения  = "Итоги по: "+Сред(СписокИзмерений,2);
	ЗаголовокОтчета.Параметры.Показатели = "Показатели: " +Сред(СписокПоказателей,2);
	ЗаголовокОтчета.Параметры.Колонки = 
	?((ПостроительОтчета.ИзмеренияСтроки.Количество()>0 И Не ПустаяСтрока(СписокКолонок)), "Дополнительные поля: "+ Сред(СписокКолонок, 2)+" ", "") 
	+ ?(ВыводитьДетальныеЗаписи, "Поля детальных записей: "+Сред(СписокПолейДетальныхЗаписей, 2),"");
	ЗаголовокОтчета.Параметры.Отбор      = "Отбор:"    +Сред(СписокОтбор,2);

	Возврат ЗаголовокОтчета;
КонецФункции // СформироватьЗаголовок()

// Выводит шапку таблицы
Процедура ВывестиКолонкуШапки(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, Расшифровка)

	Пока Выборка.Следующий() Цикл
		
		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) Тогда
			
			НачКолонка = СтруктураПараметров.НачКолонка;
			
			Перейти ~M2;
			
		КонецЕсли;


		МакетКолонкаШапки = СтруктураПараметров.МакетКолонкаШапки;

		ФорматПоля = "";
		СтруктураПараметров.СтруктураФорматаПолей.Свойство(ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя, ФорматПоля);

		// Если выводятся имена показателей, то их не очищаем
		Если Не ВыводитьПоказателиВСтроку Тогда

			МакетКолонкаШапки.Область().Очистить(Истина);
		Иначе

			МакетКолонкаШапки.Область(1,1,СтруктураПараметров.МакетКолонкаШапки.ВысотаТаблицы-1,СтруктураПараметров.МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);

		КонецЕсли; 

		// Накопление количества колонок в шапке.
		СтруктураПараметров.КоличествоКолонокПоказателей = СтруктураПараметров.КоличествоКолонокПоказателей + 1;

		Расшифровка.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);

		СтруктураРасшифровки = Новый Структура;
		Для Каждого Элемент Из Расшифровка Цикл
			СтруктураРасшифровки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Обл = ДокументРезультат.Присоединить(МакетКолонкаШапки, Выборка.Уровень());
		Обл.Расшифровка = СтруктураРасшифровки;

		// Добавим 1 к количеству значений группировок колонок
		Если Индекс = 0 Тогда
			СтруктураПараметров.КоличествоКолонокГруппировок = СтруктураПараметров.КоличествоКолонокГруппировок+1;
		КонецЕсли;

		НачКолонка = Обл.Лево;

		// В специальном параметре будет сохраняться правая ячейка
		СтруктураПараметров.Вставить("КонКолонка", Обл.Право);
		
		// Нач. колонка для следующей группировки
		СтруктураПараметров.Вставить("НачКолонка", Обл.Право+1);

~M2:	НоваяСтрока = ДеревоКолонкиОтчета.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		
		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			// На следующем уровне используем новую структуру расшифровки
			КопияРасшифровка = Новый Структура;

			Для Каждого Элемент Из Расшифровка Цикл

				КопияРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);

			КонецЦикла;
			
			ВывестиКолонкуШапки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя), Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока, КопияРасшифровка);
			
		КонецЕсли;

		// Заголовок колонки
		ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс, НачКолонка).Текст = Формат(Выборка[Выборка.Группировка()], ФорматПоля);
		
		// Оформление ячеек группы не последнего уровня
		Если НачКолонка <> СтруктураПараметров.КонКолонка Тогда

			Обл = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс, СтруктураПараметров.КонКолонка);
			Обл.ПоВыделеннымКолонкам = Истина;
			Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			Обл.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

			// Очистим границы слева и справа
			ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Обл.ГраницаСправа = ЛинияНетЛинии;
			Обл.ГраницаСнизу  = ЛинияНетЛинии;

			Обл2 = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс, НачКолонка+1, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс, СтруктураПараметров.КонКолонка);
			Обл2.ГраницаСлева  = ЛинияНетЛинии;

		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

// Выводит показатели в строку отчета
Процедура ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказатель)

	Для Каждого Строка Из ДеревоКолонкиОтчета.Строки Цикл
		
		Если ДеревоСтроки <> Неопределено Тогда
			НайденнаяСтрока = ДеревоСтроки.Строки.Найти(Строка.Значение, "Значение", Ложь);
			Если НайденнаяСтрока <> Неопределено Тогда
				СтруктураЗначенийПоказателей = НайденнаяСтрока.СтруктураЗначенийПоказателей;
			Иначе

				СтруктураЗначенийПоказателей = Новый Структура();
				Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл
					СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе

			СтруктураЗначенийПоказателей = Новый Структура();
			Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл
				СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя);
			КонецЦикла;
		КонецЕсли;
		
		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если НЕ СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Строка.ИмяИзмерения) Тогда
			
			МакетПоказатель.Параметры.Заполнить(СтруктураЗначенийПоказателей);
			
			ДокументРезультат.Присоединить(МакетПоказатель);
			
		КонецЕсли;

		// Следующий уровень:
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, Строка, НайденнаяСтрока, МакетПоказатель);

	КонецЦикла; 


КонецПроцедуры

// Получает значения показателей для
Процедура ПолучитьПоказатели(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоСтроки)

	Пока Выборка.Следующий() Цикл
		
		// Запомним соответствие значений показателей и группировки в дереве
		НоваяСтрока = ДеревоСтроки.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		НоваяСтрока.СтруктураЗначенийПоказателей = Новый Структура;

		Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл

			НоваяСтрока.СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя, Выборка[ИмяПоказателя]);
			
		КонецЦикла;

		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя, ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя), 
			Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит строку отчета
Процедура ВывестиСтроку(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, Расшифровка)

	ИзмерениеСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс];
	
	Пока Выборка.Следующий() Цикл

		// Вывод значения измерения
		МакетИзмерение = ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии,
							СтруктураПараметров.МакетыИзмеренийИерархия[Индекс],
							СтруктураПараметров.МакетыИзмерений[Индекс]);

		// Значения измерений и т.д.
		МакетИзмерение.Параметры.Заполнить(Выборка);

		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) 
			И Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке  Тогда
			
			Перейти ~M1;
			
		КонецЕсли;

		ДокументРезультат.Вывести(МакетИзмерение, Выборка.Уровень());

		// Дерево значений для хранения значений по измерениям колонки
		ДеревоСтроки = Новый ДеревоЗначений;
		ДеревоСтроки.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтроки.Колонки.Добавить("Значение");
		ДеревоСтроки.Колонки.Добавить("СтруктураЗначенийПоказателей");
		
		// Получение значений показателей по измерениям колонки
		ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 
		                 0, СтруктураПараметров, ДокументРезультат, ДеревоСтроки);

		// Колонка "Общий Итог"
		НоваяСтрока = ДеревоСтроки.Строки.Добавить();
		НоваяСтрока.ИмяИзмерения = "Общие";
		НоваяСтрока.Значение = "Общие";
		НоваяСтрока.СтруктураЗначенийПоказателей = Новый Структура;

		Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл

			НоваяСтрока.СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя, Выборка[ИмяПоказателя]);

			// Если итоги выводятся не по всем уровням, и в колонках - связанное с показателем измерение, тогда общие итоги не выводим
			Если НЕ ВыводитьИтогиПоВсемУровням Тогда

				СвязанныеИзмерения = Неопределено;
				мСтруктураСвязиПоказателейИИзмерений.Свойство(ИмяПоказателя, СвязанныеИзмерения);
				
				Если СвязанныеИзмерения <> Неопределено Тогда
					Если (СвязанныеИзмерения.Количество()>0
						И СвязанныеИзмерения.Свойство(СтруктураПараметров.ПервоеИзмерениеКолонкиИмя)) Тогда
						
						НоваяСтрока.СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя, 0);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли; 
		КонецЦикла;

		// Макет показателей
		МакетПоказатель = ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии,
							СтруктураПараметров.МакетыПоказателейИерархия[Индекс],
							СтруктураПараметров.МакетыПоказателей[Индекс]);

		Расшифровка.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			СтруктураРасшифровки = Новый Структура("Расшифровка", Новый Структура);
			Для Каждого Элемент Из Расшифровка Цикл
				СтруктураРасшифровки.Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			

			МакетПоказатель.Параметры.Заполнить(СтруктураРасшифровки);
		КонецЕсли;
		

		// Выводим показатели в соответствии с их порядком в шапке
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, СтруктураПараметров.ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказатель);
		
~M1:	Если Индекс < ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда

			// На следующем уровне используем новую структуру расшифровки
			КопияРасшифровка = Новый Структура;

			Для Каждого Элемент Из Расшифровка Цикл

				КопияРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);

			КонецЦикла;
			
			ВывестиСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[Индекс+1].Имя), 
			              Индекс+1, СтруктураПараметров, ДокументРезультат, КопияРасшифровка);
		
		КонецЕсли;
	КонецЦикла;;

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь,  ЕстьОшибки = Ложь, УказыватьРасшифровки = Истина) Экспорт

    // Проверка на пустые значения
	Если ПустаяСтрока(ПостроительОтчета.Текст) Тогда
		
		Предупреждение("Не определен запрос отчета!");
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	// Очищаем нач. дату
	Если мРежимВводаПериода = 1 Тогда
		ДатаНач = '00010101000000';
	КонецЕсли;
	
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		ЕстьОшибки = Истина;
		возврат;
	КонецЕсли;
	
	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		мМассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=1 По ШиринаТаблицы Цикл
				мМассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	Если Показатели.Количество() > 0 Тогда
		ЕстьПоказатели = Ложь;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование Тогда
				ЕстьПоказатели = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьПоказатели Тогда
			Предупреждение("Не выбраны показатели!", 30);
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УправлениеОтчетами.ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	// Признак вывода детальных записей: в кросс-таблице не выводятся, в списке - в зависимости от связи с измерениями
	ВыводитьДетальныеЗаписи = Ложь;
	
	// Если это отчет-список, то нужно определить, выводить ли детальные записи
	МассивИндексовНезависимыхВыбранныхПолей = Новый Массив;
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
		
		// Определим, нужно ли выводить детальные записи:
		// Если выбранное поле подчинено измерению, то выводим рядом с измерением,
		// Если выбранное поле не связано ни с одним измерением, то выводим его в детальных записях
		
		ЕстьНесвязанныеПоля = Ложь;
		
		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			
			НайденаСвязь = Ложь;
			
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
				
				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

				// Если поле совпадает с измерением, то считаем, что его нужно выводить в детальных записях
				Если Измерение.ПутьКДанным = ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным Тогда
					//Продолжить;
					Прервать;
				КонецЕсли;
				
				// Если поле - подчиненное: поищем в макете

				Попытка

					Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
					
					СвязанныеИзмерения = Неопределено;
					мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
						
					Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
						
						НайденаСвязь = Истина;
						Прервать;
						
					КонецЕсли;

				Исключение
					
					Попытка

						// Если в макете поле называется ИмяПоля+Представление
						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "Представление"];

						СвязанныеИзмерения = Неопределено;
						мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
							
						Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
							НайденаСвязь = Истина;
							Прервать;
							
						КонецЕсли;

					Исключение

					КонецПопытки;
					
				КонецПопытки;

			КонецЦикла;
			
			Если НЕ НайденаСвязь Тогда
				
				МассивИндексовНезависимыхВыбранныхПолей.Добавить(Инд);
				
			КонецЕсли;
			
			ЕстьНесвязанныеПоля  = ЕстьНесвязанныеПоля ИЛИ НЕ НайденаСвязь;
			
		КонецЦикла;
		
		// Детальные записи выводим, если есть несвязанные выбранные поля
		ВыводитьДетальныеЗаписи = ЕстьНесвязанныеПоля;
	Иначе
		//Это кросс-таблица. Подход простой. Заранее удаляем все несвязанные с измерениями строк (sic!) поля.
		//это позволит сэкономить на выборке, и позволит вывести правильный заголовок отчета.
		СписокИндексовНесвязанныхПолей = Новый СписокЗначений;
		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			
			НайденаСвязь = Ложь;
			
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

				Попытка

					Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];

					НайденаСвязь = Истина;
					Прервать;

				Исключение
					Попытка

						// Если в макете поле называется ИмяПоля+Представление
						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "Представление"];

						НайденаСвязь = Истина;
						Прервать;

					Исключение

						СвязанныеИзмерения = Неопределено;
						мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
							
						Если СвязанныеИзмерения <> Неопределено И СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
							НайденаСвязь = Истина;
							Прервать;
							
						КонецЕсли;

					КонецПопытки;
					
				КонецПопытки;
				
			КонецЦикла;

			Если НЕ НайденаСвязь Тогда
				
				СписокИндексовНесвязанныхПолей.Добавить(Инд);
				
			КонецЕсли;

		КонецЦикла;

		СписокИндексовНесвязанныхПолей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

		Для Инд = 0 По СписокИндексовНесвязанныхПолей.Количество()-1 Цикл

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[СписокИндексовНесвязанныхПолей[Инд].Значение])

		КонецЦикла;

		СписокИндексовНесвязанныхПолей = 0;

	КонецЕсли;
	
	ПостроительОтчета.Макет = Неопределено;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);

	Если ДатаКон <> '00010101000000' Тогда
		Если мРежимВводаПериода = 1 Тогда
			ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоДня(ДатаКон + 60*60*24));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон ));
		КонецЕсли;
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;

	// Макет по умолчанию может быть переопределен
	Если мИсходныйМакетОтчета = Неопределено Тогда

		МакетОтчета = ПолучитьМакет("Макет");

	Иначе

		МакетОтчета = мИсходныйМакетОтчета;

	КонецЕсли; 

	// Если требуется раскрашивать измерения, сформируем массивы, содержащие параметры оформления измерений,
	// которые в дальнейшем будут использованы при создании макета отчета.
	ОформлениеДетальныхЗаписей = Неопределено;

	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = МакетОтчета.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;
							
		КонецЦикла;

		Если ВыводитьДетальныеЗаписи Тогда

			// Удаляем последний цвет из оформлений
			Если ОформлениеСтроки.Количество()>0 Тогда
				ОформлениеСтроки.Удалить(ОформлениеСтроки.ВГраница());
			КонецЕсли;
			Если ОформлениеСтрокиИерархии.Количество()>0 Тогда
				ОформлениеСтрокиИерархии.Удалить(ОформлениеСтрокиИерархии.ВГраница());
			КонецЕсли;

			ТабДокОформлениеДеталей = МакетОтчета.ПолучитьОбласть("ОформлениеДеталей");

		КонецЕсли; 

	КонецЕсли; 

	// Если выбрана периодическая группировка, необходимо установить соответствующее значение элемента отбора Периодичность,
	// связанного с параметром периодичности итогов виртуальной таблицы регистра.
	Если ПостроительОтчета.ДоступныеПоля.Найти("Периодичность") <> Неопределено Тогда
		Периодичность=Неопределено;
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодГод")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодГод")<>Неопределено Тогда
			Периодичность = 9;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодПолугодие")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодПолугодие")<>Неопределено Тогда
			Периодичность = 8;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодКвартал")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодКвартал")<>Неопределено Тогда
			Периодичность = 7;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодМесяц")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодМесяц")<>Неопределено Тогда
			Периодичность = 6;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДекада")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодДекада")<>Неопределено Тогда
			Периодичность = 5;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодНеделя")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодНеделя")<>Неопределено Тогда
			Периодичность = 4;
		КонецЕсли; 
		Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДень")<>Неопределено 
			ИЛИ ПостроительОтчета.ИзмеренияКолонки.Найти("ПериодДень")<>Неопределено Тогда
			Периодичность = 3;
		КонецЕсли; 

		Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор")<>Неопределено Тогда
			Периодичность = 2;
		КонецЕсли; 

		НайденаПериодичность=Ложь;

		Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

			ПолеОтбора = ПостроительОтчета.Отбор[Инд];

			Если Найти(ПолеОтбора.Представление, "Периодичность")>0 Тогда
				НайденаПериодичность=Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если Периодичность<>Неопределено Тогда
			Если Не НайденаПериодичность Тогда
				ПолеОтбора = ПостроительОтчета.Отбор.Добавить("Периодичность");

			Иначе

				ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ПолеОтбора));

				ПолеОтбора = ПостроительОтчета.Отбор.Добавить("Периодичность");

			КонецЕсли; 

			ПолеОтбора.Значение = Периодичность;
			ПолеОтбора.Использование = (Периодичность<>Неопределено);
		КонецЕсли;

	КонецЕсли;

	// Расшифровки
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;

	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;

	// Преобразуем исходный макет путем копирования областей, чтобы он соответствовал количеству выбранных показателей способу их расположения,
	// количеству и расположению выбранных полей

    // Области исходного макета 
	ОбластьСтрока = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");

	ОбластьКолонкаПоказатель = МакетОтчета.Область("Показатель");

	МассивПоказателей = Новый Массив;
	
	// Сосчитаем количество заданных показателей
	КоличествоПоказателей = 0;
	
	КоличествоКолонок = 1;

	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование = Истина Тогда
			
			КоличествоПоказателей = КоличествоПоказателей+1;

			// Для первого показателя ничего менять не нужно: уже есть отдельная колонка в исходном макете 
			Если КоличествоПоказателей>1 Тогда

				//Сюда мы попадаем для второго и более показателей, поэтому проверок на количество показателей не делаем.
				
				// Если показатели выводятся в колонку, добавляем по строке в каждую секцию для каждого показателя
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.ВставитьОбласть(ОбластьОбщиеИтоги,     ОбластьОбщиеИтоги,     ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьДетали,         ОбластьДетали,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрока,         ОбластьСтрока,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрокаИерархии, ОбластьСтрокаИерархии, ТипСмещенияТабличногоДокумента.ПоВертикали);

					ОбластьСтрока = МакетОтчета.Область("Строка");
					ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
					ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
					ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");
					
					// Если показатели выводятся в строку, добавляем колонки для каждого показателя
				Иначе
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаПоказатель, ОбластьКолонкаПоказатель, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					ОбластьКолонкаПоказатель = МакетОтчета.Область("Показатель");
					
				КонецЕсли;
			КонецЕсли;

			МассивПоказателей.Добавить(Показатель.Имя);

		КонецЕсли;
	КонецЦикла;

	// Для отчета без показателей область "Показатель" не нужна
	Если КоличествоПоказателей = 0 Тогда
	
		МакетОтчета.УдалитьОбласть(МакетОтчета.Область("Показатель"));
	
	КонецЕсли;

    // Добавление необходимого количества колонок для вывода выбранных полей
    ОбластьПоле = МакетОтчета.Область("Поле");

	ВыводДопРеквизитов = Ложь;
	
	// Либо выводятся детальные записи, либо доп. поля в отдельной колонке
	Если ВыводитьДетальныеЗаписи Тогда
		ВыводитьДополнительныеПоляВОтдельнойКолонке = Ложь;
	КонецЕсли;

	Если ВыводитьДетальныеЗаписи Тогда

		// В зависимости от того, есть ли измерения строки, используется разная шапка
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

		Иначе

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицы");

		КонецЕсли; 

		// Изменим макет: добавим по одной колонке для каждого независимого поля, которое будет выводиться на уровне детальных записей
		Для Сч=1 По МассивИндексовНезависимыхВыбранныхПолей.Количество()-1 Цикл  // на 1(2) меньше количества полей - одно уже есть
			
			МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
			КоличествоКолонок = КоличествоКолонок+1;
			
			ОбластьПоле = МакетОтчета.Область("Поле");
		КонецЦикла;

		// Все поля, которые не подчинены группировкам, будут колонками детальных записей
		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			// В заголовке колонки детальной записи оставим только название последнего поля (для краткости, 
			// например, вместо "Номенклатура.Базовая единица измерения" будет выводиться "Базовая единица измерения")
			ЗаголовокКолонки = ПостроительОтчета.ВыбранныеПоля[Инд].Представление;
			
			// Слудующая замена нужна для сохранения названий с сокращениями, таких, как "Физ. лицо"
			// В таких сокращениях слова должны быть разделены пробелами
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
			
			Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
				ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
			КонецЦикла;
			
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
			
			МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Низ,1+1+Сч).Текст = ЗаголовокКолонки;
			
			Сч = Сч+1;
		КонецЦикла; 

		// Способ заполнения макета детальных записей - параметр.
		Если ВыводитьПоказателиВСтроку И КоличествоПоказателей>1 Тогда
			МакетОтчета.Область(ОбластьДетали.Верх,1+1,
								ОбластьДетали.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;

		// В добавленных колонках установим параметры областей, чтобы при выводе они заполнялись значениями соответствующих выбранных полей
		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			Поле = ПостроительОтчета.ВыбранныеПоля[Инд];

			ФорматПоляДетальнойЗаписи = "";
			СтруктураФорматаПолей.Свойство(Поле.Имя, ФорматПоляДетальнойЗаписи);
			
			// Определим, можно ли использовать представление поля. Для этого попытаемся разобрать автоматический макет, область "Детали" построителя
			Попытка
				Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть("Детали").Параметры[Поле.Имя+"Представление"];
				ЕстьПредставление = Истина;
			Исключение
				ЕстьПредставление = Ложь;
			КонецПопытки;
			
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Параметр            = Поле.Имя + ?(ЕстьПредставление, "Представление", "");
			Если УказыватьРасшифровки Тогда
				МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).ПараметрРасшифровки = Поле.Имя;
			КонецЕсли; 
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Формат              = ФорматПоляДетальнойЗаписи;
			
			Сч = Сч+1;
		КонецЦикла;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				Если НЕ (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) Тогда
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+1,
					                    ОбластьДетали.Верх+Кол,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				Иначе
					МакетОтчета.Область(ОбластьДетали.Верх,1+1,
					                    ОбластьДетали.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				КонецЕсли;

				Если Кол=0 Тогда
					Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

						Если НЕ ВыводитьПоказателиВСтроку Тогда
							Если КоличествоПоказателей>1 Тогда
								МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+1+Инд, 
            								ОбластьДетали.Верх+Кол+КоличествоПоказателей-1, 1+1+Инд).Объединить();
							КонецЕсли; 
						КонецЕсли; 

					КонецЦикла;
				КонецЕсли;

				Если (ВыводитьПоказателиВСтроку И КоличествоПоказателей > 1) Тогда
					
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
					
				Иначе

					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		// Макет детальных записей для отчета без показателей тоже заполняется при помощи параметров.
		Если КоличествоПоказателей=0 Тогда
			МакетОтчета.Область(ОбластьДетали.Верх,1+1,
			ОбластьДетали.Верх,1+КоличествоКолонок).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;
		
		Если (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) 
			ИЛИ КоличествоПоказателей=0 Тогда
			
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
		Иначе
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх+Кол-1);
		КонецЕсли;
		
	Иначе

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			// Определим, нужна ли дополнительная колонка для реквизитов измерений
			СписокПроверенныхВыбранныхПолей = Новый СписокЗначений;
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

					Если СписокПроверенныхВыбранныхПолей.НайтиПоЗначению(ПостроительОтчета.ВыбранныеПоля[Инд]) <> Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;

					Попытка

						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
						
						СвязанныеИзмерения = Неопределено;
						мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
						
						Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
						
							СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;

					Исключение
						
						Попытка

							Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "Представление"];
							
							СвязанныеИзмерения = Неопределено;
							мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
							
							Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
								СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
								
							Иначе
								
								Продолжить;
								
							КонецЕсли;
							
						Исключение

							СвязанныеИзмерения = Неопределено;
							мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
							
							Если СвязанныеИзмерения <> Неопределено И СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
								СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
								
							Иначе
								
								Продолжить;
								
							КонецЕсли;
							
						КонецПопытки;
						
					КонецПопытки;
					
					ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;

					ВыводДопРеквизитов = Истина;

					МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					КоличествоКолонок = КоличествоКолонок + 1;
					ОбластьПоле = МакетОтчета.Область("Поле");

				КонецЦикла;
				
			КонецЦикла;

		КонецЕсли; 

	КонецЕсли; 

	// Если выводятся только итоги или количество колонок =1, увеличим ширину первой колонки 
	Если НЕ ВыводитьДетальныеЗаписи ИЛИ КоличествоКолонок=1 Тогда
		//ОбластьПоле.ШиринаКолонки = ОбластьПоле.ШиринаКолонки*2;
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли; 

	ЗаголовокОтчета = СформироватьЗаголовок(МакетОтчета, КоличествоКолонок + ?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1), ТолькоЗаголовок, ВыводитьДетальныеЗаписи);
	
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		ДокументРезультат.Вывести(ЗаголовокОтчета);
		ДокументРезультат.ТекущаяОбласть = ДокументРезультат.Область(1,1);

		Возврат;

	КонецЕсли; 

	//Добавим показатели в выбранные поля
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда

			Попытка
				УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя, ПостроительОтчета);
			Исключение
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
	УправлениеОтчетами.ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	// Назначение имен колонкам шапки
	ОбластьШапкаТаблицы = МакетОтчета.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");
	
	Если ВыводитьПоказателиВСтроку Тогда

		Кол =0 ;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование = Истина Тогда
				Стр = мТаблицаПоказатели.Найти(Показатель.Имя);
				Если Стр <> Неопределено Тогда
					Представление = Стр.ПредставлениеПоля;
				Иначе
					Представление = Показатель.Имя;
				КонецЕсли;
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Текст = Представление;

				Кол=Кол+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;
	
	// В соответствии со связями, заданными в параметре мСтруктураСвязиПоказателейИИзмерений, определим, 
	// какие итоги могут не иметь смысла (например, количественный итог по складам по разной номенклатуре);
	// чтобы их не выводить, нужно будет очистить параметры в макетах соответствующих измерений
	Если НЕ ВыводитьИтогиПоВсемУровням Тогда

		СтруктураФлагов = Новый Структура;

		СтруктураОтборНаРавенствоПоСвязанномуИзмерению = Новый Структура;

		// Перенесем отбор в таблицу для поиска
		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");
		Таботбор.Индексы.Добавить("Имя");

		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 
		
		Для Каждого Показатель Из Показатели Цикл

			// Сбрасываем флаги
			СтруктураФлагов.Вставить(Показатель.Имя, Ложь);
			СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Ложь);

			// Поищем, есть ли отбор на равенство по связанному измерению. Если есть, то показатель можно выводить
			// по всем уровням.
			СвязанныеИзмерения = Неопределено;
			Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда
				
				Если СвязанныеИзмерения <> Неопределено Тогда
					
					Для каждого СвязанноеИзмерение Из СвязанныеИзмерения Цикл
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Имя",СвязанноеИзмерение.Ключ);
						
						НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);
						
						Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл
							
							// Не добавляем измерения по отборам на равенство - в них будет один элемент
							Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
								
								СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
								Прервать;
								
								// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
								// или плана видов характеристик - в них будет один элемент
							ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
								ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
								
								Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
									ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;
									
									МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
									
									Если МетаданныеОбъекта<>Неопределено Тогда
										Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
											ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда
											
											Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда
												
												// Этот отбор тоже можно считать отбором на равенство
												СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
												Прервать;
												
											КонецЕсли; 
										КонецЕсли; 
									КонецЕсли; 
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтруктураОтборНаРавенствоПоСвязанномуИзмерению[Показатель.Имя] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЕсли;
			КонецЕсли;

			// Если в колонках выводятся измерения, связанные с показателем, то устанавливаем флаги
			Для Инд = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
				ИзмерениеКолонки = ПостроительОтчета.ИзмеренияКолонки[Инд];
				
				СвязанныеИзмерения = Неопределено;
				мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения);
				
				Если СвязанныеИзмерения <> Неопределено Тогда
					
					Если СвязанныеИзмерения.Свойство(ИзмерениеКолонки.Имя) Тогда
						
						СтруктураФлагов.Вставить(Показатель.Имя, Истина);
						
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

	ИспользоватьОформление = РаскрашиватьИзмерения;
	
	// Если Дополнительные поля выводятся в отдельных колонках, нужно объединить их колонки
	Если НЕ ВыводитьПоказателиВСтроку 
		И ВыводДопРеквизитов И КоличествоКолонок>1 Тогда // колонки с дополнительными реквизитом
		
		Для Сч = 1 По КоличествоКолонок-1 Цикл
			МакетОтчета.Область(ОбластьСтрока.Верх,1+1+Сч, 
			ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+1+Сч).Объединить();
		КонецЦикла;
		
	КонецЕсли;

	СписокПроверенныхВыбранныхПолей = Новый СписокЗначений;

	// Зададим макет для каждого измерения строки. Макет должен иметь соответствующие параметры, 
	// отформатирован и раскрашен
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

		Если ОформлениеСтроки.Количество()>0 Тогда
			Индекс = Сдвиг+((Сч) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Сч)/(ОформлениеСтроки.Количество()-Сдвиг)));
		Иначе
			ИспользоватьОформление = Ложь;
		КонецЕсли;;

		ФорматПоля = "";
		СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоля);
		
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,
							ОбластьСтрока.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей))).Заполнение = 
							ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		// Первая колонка имеет для элементов стандартную расшифровку
		Если УказыватьРасшифровки Тогда
			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;
		КонецЕсли; 
		
		// Как называется поле для вывода измерения, узнаем из макета по-умолчанию
		Попытка
			Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[Измерение.Имя+"Представление"];
			ИспользоватьПредставлениеИзмерения = Истина;
		Исключение
			ИспользоватьПредставлениеИзмерения = Ложь;
		КонецПопытки;

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Формат= ФорматПоля;
		КонецЕсли;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ = Сч;

		Если ИспользоватьОформление Тогда

			Область = МакетОтчета.Область(ОбластьСтрока.Верх,1+1,
										  ОбластьСтрока.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей)));

			//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
			Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
			//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
			//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;
		КонецЕсли;


		Если ИспользоватьОформление Тогда
			Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
										  ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку,КоличествоПоказателей,Мин(1, КоличествоПоказателей)));
			//Область.Шрифт      = ОформлениеСтрокиИерархии[Индекс].Шрифт;
			Область.ЦветФона   = ОформлениеСтрокиИерархии[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтрокиИерархии[Индекс].ЦветТекста;
			//Область.Узор       = ОформлениеСтрокиИерархии[Индекс].Узор;
			//Область.ЦветУзора  = ОформлениеСтрокиИерархии[Индекс].ЦветУзора;
		КонецЕсли;

		// Объединение области измерения, если выводится несколько показателей, или колонок детальных записей
		Если ВыводитьДетальныеЗаписи Тогда
			Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
				Если (ВыводитьПоказателиВСтроку И КоличествоПоказателей > 1) 
					ИЛИ КоличествоПоказателей=0 Тогда
					
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх,1+КоличествоКолонок).Объединить();
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
				КонецЕсли; 

			КонецЕсли;
		Иначе
			Если КоличествоПоказателей>1 Тогда
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+1).Объединить();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;

		// Вывод дополнительных реквизитов рядом со значением измерения
		Если ВыводДопРеквизитов Тогда
			
			Инд = 0;
			
			Для Инд1 = 0 По ПостроительОтчета.ВыбранныеПоля.Количество() - 1 Цикл
				
				Если СписокПроверенныхВыбранныхПолей.НайтиПоЗначению(ПостроительОтчета.ВыбранныеПоля[Инд]) <> Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;

				Если Показатели.Найти(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, "Имя") = Неопределено Тогда
					
					ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
					
					СвязанныеИзмерения = Неопределено;
					мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
							
					Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
						ФорматПоляРеквизита = "";
						СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоляРеквизита);
						
						МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1 + 1 + Инд).Параметр = ИмяПараметра;
						
						Если УказыватьРасшифровки Тогда
							
							МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1 + 1 + Инд).ПараметрРасшифровки = ИмяПараметра;
							
						КонецЕсли;
						
						МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1 + 1 + Инд).Формат = ФорматПоляРеквизита;
						
						Инд = Инд + 1;
								
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
	
		Иначе
		
			Шаблон = "[" + Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "") + "]";

			ВсегоВЯчейке = 1;
			
			Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество() - 1 Цикл

				Если СписокПроверенныхВыбранныхПолей.НайтиПоЗначению(ПостроительОтчета.ВыбранныеПоля[Инд]) <> Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;

				Если Показатели.Найти(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, "Имя") <> Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;

				// Если поле совпадает с измерением, выводим его только в строке детальных записей
				Если Измерение.ПутьКДанным = ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным Тогда
					
					СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
					
				Иначе
					
					Попытка
						
						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
						
						СвязанныеИзмерения = Неопределено;
						мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
								
						Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
							СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
							
							Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "]";
							ВсегоВЯчейке = ВсегоВЯчейке + 1;
							
						КонецЕсли;
						
					Исключение 
						
						Попытка
							
							Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "Представление"];
							
							СвязанныеИзмерения = Неопределено;
							мСтруктураСвязиПоказателейИИзмерений.Свойство(ПостроительОтчета.ВыбранныеПоля[Инд].Имя, СвязанныеИзмерения);
									
							Если СвязанныеИзмерения = Неопределено ИЛИ СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
							
								СписокПроверенныхВыбранныхПолей.Добавить(ПостроительОтчета.ВыбранныеПоля[Инд]);
								
								Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя + "Представление]";
								ВсегоВЯчейке = ВсегоВЯчейке + 1;
								
							КонецЕсли;
							
						Исключение
							
						КонецПопытки;
						
					КонецПопытки;
					
				КонецЕсли;

			КонецЦикла;

			Если ВсегоВЯчейке > 1 Тогда
				
				МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон; 
				МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1).Текст = Шаблон;

			Иначе // Выводим через параметр
				
				МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр; 
				МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");
				МакетОтчета.Область(ОбластьСтрока.Верх, 1 + 1).Формат = ФорматПоля;
				
			КонецЕсли; 

		КонецЕсли; 

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
							ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+
							?(ВыводитьПоказателиВСтроку,КоличествоПоказателей,Мин(1, КоличествоПоказателей))).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя + ?(ИспользоватьПредставлениеИзмерения, "Представление", "");
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Отступ = Сч;

		Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
			Если (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) 
				ИЛИ КоличествоПоказателей=0 Тогда
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
			Иначе
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
			КонецЕсли;
		КонецЕсли; 

		Кол = 0;
		
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;


				// Ограничение вывода показателей по уровням группировки задается значением ВыводитьИтогиПоВсемУровням
				// По умолчанию, если ВыводитьИтогиПоВсемУровням=Ложь или для показателя не задан ключ, то он выводится.
				ВыводитьПоказатель = Истина;
				ВыводитьПоказательПоИерархии = Истина;

				Если НЕ ВыводитьИтогиПоВсемУровням Тогда

					СвязанныеИзмерения = Неопределено;
					Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда
						
						Если СвязанныеИзмерения <> Неопределено Тогда
							
							// Поищем в структуре отбора на равенство по связанному измерению
							ВыводитьПоВсем = Ложь;
							СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Свойство(Показатель.Имя, ВыводитьПоВсем);
							
							// Если нет связи, или отбор
							Если СвязанныеИзмерения.Количество()=0 
								ИЛИ ВыводитьПоВсем = Истина Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Истина;
								
								// Если это связанное измерение
							ИначеЕсли СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Ложь;
								
							Иначе
								ВыводитьПоказательПоИерархии = СтруктураФлагов[Показатель.Имя];
							КонецЕсли;
							
							ВыводитьПоказатель = СтруктураФлагов[Показатель.Имя];
							
						КонецЕсли;

						


					КонецЕсли;

				КонецЕсли;

				Если НЕ (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
										ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
										ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					Если ИспользоватьОформление Тогда

						// Устанавливаем оформление для строк показателей
						Область = МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
													ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;

						Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
													ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;
					КонецЕсли;
				КонецЕсли;

				
				Если Не (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) Тогда
					
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;
					Если УказыватьРасшифровки Тогда
						МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).ПараметрРасшифровки = "Расшифровка";
					КонецЕсли; 
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
					
						МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Очистить(Истина);
					
					КонецЕсли; 
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					Если УказыватьРасшифровки Тогда
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";
					КонецЕсли; 
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					
					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
						
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
						
					КонецЕсли;
					
				КонецЕсли;

				Если Не (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) Тогда
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;

					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Очистить(Истина);
					КонецЕсли;
					
				Иначе
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
					КонецЕсли;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		Если (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1)
			ИЛИ КоличествоПоказателей=0 Тогда
			
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);
		Иначе
			
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх+Кол-1);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх+Кол-1);
		КонецЕсли;
		
	КонецЦикла;

	// Определим, нужно ли выводить колонку "Общий итог" в кросс-таблице:
	// не нужно выводить, если в колонках выводятся данные в разных единицах

	ВыводитьКолонкуОбщийИтог = ВыводитьИтогиПоВсемУровням; // флаг вывода колонки "Общий итог"
	Если НЕ ВыводитьИтогиПоВсемУровням И ПостроительОтчета.ИзмеренияКолонки.Количество()>0 И НЕ мСтруктураНевыводимыхГруппировок.Свойство("Общие") Тогда

		Для Инд = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл

			ИзмерениеКолонки = ПостроительОтчета.ИзмеренияКолонки[Инд];
			Для каждого Показатель Из Показатели Цикл

				Если Показатель.Использование Тогда

					СвязанныеИзмерения = Неопределено;
					мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя,СвязанныеИзмерения);

					Если СвязанныеИзмерения <> Неопределено Тогда

						Если (СвязанныеИзмерения.Количество()>0
							И СвязанныеИзмерения.Свойство(ИзмерениеКолонки.Имя)) Тогда

							СтруктураФлагов[Показатель.Имя] = Ложь;

						КонецЕсли; 

						// Взводим флаг, если хоть один из показателей выводится
						ВыводитьКолонкуОбщийИтог = (ВыводитьКолонкуОбщийИтог ИЛИ СтруктураФлагов[Показатель.Имя]);
					Иначе
						// Взводим флаг, т.к. этот показатель выводится на всех уровнях.
						ВыводитьКолонкуОбщийИтог = Истина;

					КонецЕсли;
				КонецЕсли;

			КонецЦикла; 

		КонецЦикла; 

	КонецЕсли; 

	// Формирование макета общих итогов
	МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1,
						ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+
						?(ВыводитьПоказателиВСтроку,КоличествоПоказателей,1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

	Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
		Если Не ВыводитьПоказателиВСтроку Тогда
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, 
								ОбластьОбщиеИтоги.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
		Иначе
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, 
								ОбластьОбщиеИтоги.Верх, 1+КоличествоКолонок).Объединить();
		КонецЕсли;
	КонецЕсли; 

	Кол = 0;

	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			
			ИмяПоказателя = Показатель.Имя;

			ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;
			
			Если Не ВыводитьПоказателиВСтроку Тогда
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1,
				ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;

				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;

			Иначе

				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
				МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
			КонецЕсли;
			Кол = Кол+1;
		КонецЕсли; 

	КонецЦикла; 

	// Макет из двух строк используется только при выводе и измерений и детальных записей
	Если ВыводитьДетальныеЗаписи И ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицыОбщая");
	Иначе
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;

	Если Не ВыводитьПоказателиВСтроку Тогда

		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх+Кол-1);

	Иначе

		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх);

	КонецЕсли; 
	
	// Отчет без показателей выводится без итогов
	Если КоличествоПоказателей=0 Тогда
	
		ПостроительОтчета.МакетОбщихИтогов = Новый ТабличныйДокумент;
	
	КонецЕсли; 

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

		// В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
			
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
		
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
		
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	ИначеЕсли НЕ ВыводитьДетальныеЗаписи Тогда
		МакетШапкиТаблицы.Область(2,1+1).Текст = "Общий итог";
	КонецЕсли; 

	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	// Объединение ячеек в шапке
	Если Не ВыводитьДетальныеЗаписи Тогда
		
		Если КоличествоКолонок>1 Тогда
			МакетШапкиТаблицы.Область(2, 1+1,
			2, 1+КоличествоКолонок).Объединить();
		КонецЕсли; 
		
	Иначе

		// Объединение заголовков производится, если выводится шапка в две строки
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 И ВыводитьПоказателиВСтроку И КоличествоПоказателей>1 Тогда
			Для Кол = 1 По КоличествоПоказателей  Цикл
				МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+Кол, 3, 1+КоличествоКолонок+Кол).Объединить();
			КонецЦикла;
		КонецЕсли;
		
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			// Объединение ячеек, в которых выводится название измерения, сверху от ячеек с полями детальных записей
			Если КоличествоКолонок>1 Тогда
				МакетШапкиТаблицы.Область(2, 1+1,
				2, 1+КоличествоКолонок).Объединить();
			КонецЕсли; 

		КонецЕсли; 
	КонецЕсли;

	// Объединение ячеек заголовка показателя если выводятся измерения и детальные записи
	Если ВыводитьДетальныеЗаписи И НЕ ВыводитьПоказателиВСтроку 
		И НЕ ПостроительОтчета.ИзмеренияСтроки.Количество()=0 Тогда
		
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+1,3, 1+КоличествоКолонок+1).Объединить();
	КонецЕсли;

	// Шапка таблицы имеет внизу границу той же линией, что и вверху
	ШиринаТаблицы = 1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей));
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, 
							  МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу =
	Новый Линия(
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, 
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);

	// Линия в заголовке таблицы, когда выводится несколько колонок
	Если КоличествоКолонок>1 И ВыводитьДетальныеЗаписи Тогда
		ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,0);
		ЛинияТонкаяЛиния = 
		Новый Линия(
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.ТипЛинии,
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.Толщина);

		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2+1, МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСлева = ЛинияТонкаяЛиния;
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2,   МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок-1).ГраницаСправа = ЛинияНетЛинии;
	КонецЕсли;

	// Назначим построителю сформированный макет шапки
	ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;

	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;
	
	Если ПостроительОтчета.ВыбранныеПоля.Количество() = 0 И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 И ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		// Выводить нечего, да еще и валится при этом, ругаясь на отсутствие SELECT
		Возврат;
	КонецЕсли; 
	
	// Вывод в макет
	ПостроительОтчета.Выполнить();

	ДокументРезультат.Очистить();

	// Если заданы невыводимые группировки мСтруктураНевыводимыхГруппировок, нужно изменить макет
	ДокументРезультат.ОтображатьГруппировки = Истина;
	
	СтруктураПропускаемыеГруппировки = Новый Структура;
	
	Для ИндексГруппировки = 1 По ПостроительОтчета.ИзмеренияСтроки.Количество() Цикл
		
		Инд = ПостроительОтчета.ИзмеренияСтроки.Количество() - ИндексГруппировки;
		
		Если мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя) Тогда
			
			//1. Проверяем, есть ли в отчете группировка, куда надо вывести эту
			ДругаяГруппировка = Неопределено;
			мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя, ДругаяГруппировка);
			
			// Это структура
			Для Инд1 = 1 По ПостроительОтчета.ИзмеренияСтроки.Количество() Цикл
				ИндексИзмерения = ПостроительОтчета.ИзмеренияСтроки.Количество() - Инд1;
				Если ДругаяГруппировка.Свойство(ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Имя) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Инд1 = ПостроительОтчета.ИзмеренияСтроки.Количество() Тогда
				// Если не найдено
				Продолжить;
				
			КонецЕсли;
			
			Если ИндексИзмерения <= Инд Тогда
				
				// Это чтобы вставлять только в самое нижнее
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПропускаемыеГруппировки.Вставить(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);
			
			МакетИзмеренияВКотороеДобавляемЭто = ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Макет;
			Если МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Заполнение <> ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = "["+МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст+"]";
			КонецЕсли;
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Макет.Область(1, 2).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = ПостроительОтчета.ИзмеренияСтроки[Инд].Макет.Область(1, 2).Текст + ", "+
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст;
			Иначе
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = "["+ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя+ "], "+
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст;
			КонецЕсли;
			
			ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Макет = МакетИзмеренияВКотороеДобавляемЭто;
			
			ПостроительОтчета.ИзмеренияСтроки[Инд].Макет = Новый ТабличныйДокумент;
			//ПостроительОтчета.ИзмеренияСтроки[Инд].МакетИерархии = Новый ТабличныйДокумент;
			
			МакетПостроителя = ПостроительОтчета.Макет;
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Элементы Тогда
				МакетПостроителя.УдалитьОбласть(МакетПостроителя.Область(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя), ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда
				МакетПостроителя.УдалитьОбласть(МакетПостроителя.Область(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя+"Иерархия"), ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
			ДокументРезультат.ОтображатьГруппировки = Ложь;
			
			ПостроительОтчета.Макет = МакетПостроителя;

		КонецЕсли;
		
	КонецЦикла;
	
	// Пропускаемые группировки колонок: итог по ни не выводится (кроме последнего)
	Для Инд = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 2 Цикл
		Если мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя) Тогда
			
			СтруктураПропускаемыеГруппировки.Вставить(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// Если не нужно выводить группировку "Общий итог", удаляем из макета секцию
	Если мСтруктураНевыводимыхГруппировок.Свойство("Общие") Тогда
		
		ПостроительОтчета.МакетОбщихИтогов = Новый ТабличныйДокумент;
		
		МакетПостроителя  = ПостроительОтчета.Макет;
		
		ОбластьОбщиеИтоги = МакетПостроителя.Области.Найти("ОбщиеИтоги");
		Если ОбластьОбщиеИтоги <> Неопределено Тогда
			МакетПостроителя.УдалитьОбласть(ОбластьОбщиеИтоги, ТипСмещенияТабличногоДокумента.ПоВертикали);
			ПостроительОтчета.Макет = МакетПостроителя;
		КонецЕсли;
		
	КонецЕсли;
	
	// Структура общих передаваемых параметров
	СтруктураПараметров = Новый Структура;
	
	// Структура, содержащая список группировок, которые нужно пропустить при обходе.
	СтруктураПараметров.Вставить("СтруктураПропускаемыеГруппировки", СтруктураПропускаемыеГруппировки);
	
	// Отдельно обрабатываются случаи, когда нет измерений колонки, и когда они есть
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда

		ПостроительОтчета.Вывести(ДокументРезультат);
		
		// Ширина таблицы
		ШиринаТаблицы = 1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей));
		
		// Зафиксируем колонки слева
		ДокументРезультат.ФиксацияСлева = 0;
		
		// Вывод кросс-таблицы
	Иначе

		ПостроительОтчета.АвтоДетальныеЗаписи = Ложь;
		ПостроительОтчета.ВыводитьДетальныеЗаписи = Ложь;

		СтруктураПараметров.Вставить("КоличествоКолонок", КоличествоКолонок);
		СтруктураПараметров.Вставить("КоличествоПоказателей", КоличествоПоказателей);
		СтруктураПараметров.Вставить("СтруктураФорматаПолей", СтруктураФорматаПолей);
		СтруктураПараметров.Вставить("ВысотаЗаголовка", ВысотаЗаголовка);

		// Имя первого измерения колонки
		СтруктураПараметров.Вставить("ПервоеИзмерениеКолонкиИмя", ПостроительОтчета.ИзмеренияКолонки[0].Имя);

		РезультатЗапроса = ПостроительОтчета.Результат;

		// 1. Вывод заголовка отчета
		ДокументРезультат.Вывести(ПостроительОтчета.МакетЗаголовкаОтчета);
		
		ШапкаТаблицы = ПостроительОтчета.МакетШапкиТаблицы;

		// Если показатели выводятся в строку, то нужно добавить на одну строку меньше
		Линия1 = ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы, 1+КоличествоКолонок+1).ГраницаСлева;
		ИсхШиринаТаблицы = 1+ КоличествоКолонок + ?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей));
		ДобавленоСтрок = 0;
		
		Для Сч=1 По ПостроительОтчета.ИзмеренияКолонки.Количество()
			- ?(ВыводитьПоказателиВСтроку И (КоличествоПоказателей > 1), 0, 1) Цикл

			ШапкаТаблицыСтрока = ПостроительОтчета.МакетШапкиТаблицы.Область("ШапкаТаблицыСтрока");
			ШапкаТаблицы.ВставитьОбласть(ШапкаТаблицыСтрока,,ТипСмещенияТабличногоДокумента.ПоВертикали);

			// Горизонтальные линии внутри - тонкие
			ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы, 2, ШапкаТаблицы.ВысотаТаблицы, 1+ИсхШиринаТаблицы).ГраницаСверху = Линия1;
			ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы-1, 2, ШапкаТаблицы.ВысотаТаблицы-1, 1+ИсхШиринаТаблицы).ГраницаСнизу = Линия1;

			ДобавленоСтрок = ДобавленоСтрок+1;
		КонецЦикла; 

		// Объединение ячеек в начале шапки
		ШапкаТаблицы.Область(2, 2, 2+ДобавленоСтрок,1+КоличествоКолонок).Объединить();


		// 2. Вывод шапки таблицы
		ОбластьНачалоШапкиТаблицы = ШапкаТаблицы.ПолучитьОбласть(1,1,ШапкаТаблицы.ВысотаТаблицы,1+КоличествоКолонок);

		Обл = ДокументРезультат.Вывести(ОбластьНачалоШапкиТаблицы);
		
		// Нач. колонка для следующей группировки
		СтруктураПараметров.Вставить("НачКолонка", Обл.Право+1);
		
		// В специальном параметре будет сохраняться правая ячейка
		СтруктураПараметров.Вставить("КонКолонка", Обл.Право+1);

		МакетКолонкаШапки = МакетШапкиТаблицы.ПолучитьОбласть(1,1+КоличествоКолонок+1,ШапкаТаблицы.ВысотаТаблицы,1+КоличествоКолонок+Макс(?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей)), 1)); // Не менее одной колонки

		СтруктураПараметров.Вставить("ГраницаКолонки", Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина));
		
		СтруктураПараметров.Вставить("МакетКолонкаШапки", МакетКолонкаШапки);
		
		ДокументРезультат.НачатьАвтогруппировкуКолонок();

		// Здесь количество колонок показателей
		СтруктураПараметров.Вставить("КоличествоКолонокПоказателей", 0);

		// Здесь количество значений в группировках колонок
		СтруктураПараметров.Вставить("КоличествоКолонокГруппировок", 0);

		// Дерево значений, представляющее набор и порядок значений измерений колонок отчета. Заполняется при выводе шапки 
		// и в дальнейшем определяет последовательность вывода ячеек с со значениями показателей при выводе строк.
		ДеревоКолонкиОтчета = Новый ДеревоЗначений;
		ДеревоКолонкиОтчета.Колонки.Добавить("Значение");
		ДеревоКолонкиОтчета.Колонки.Добавить("ИмяИзмерения");
		
		ВывестиКолонкуШапки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 0, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, Новый Структура);

		ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();

		
		// Вывод колонки для общего итога

		// Если выводятся имена показателей, то их не очищаем
		Если Не (ВыводитьПоказателиВСтроку И КоличествоПоказателей>1) Тогда

			МакетКолонкаШапки.Область().Очистить(Истина);
		Иначе

			МакетКолонкаШапки.Область(1,1,СтруктураПараметров.МакетКолонкаШапки.ВысотаТаблицы-1,СтруктураПараметров.МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);

		КонецЕсли; 

		// Колонка с общим итогом выводится, если количество колонок группировок больше 1
		Если СтруктураПараметров.КоличествоКолонокГруппировок > 1 И
			(ВыводитьИтогиПоВсемУровням ИЛИ ВыводитьКолонкуОбщийИтог) Тогда
			
			// Последняя колонка шапки - общий итог
			МакетКолонкаШапки.Область(2,1).Текст = "Общий итог";

			Обл = ДокументРезультат.Присоединить(МакетКолонкаШапки, 0);
			НачКолонка = Обл.Лево;

			НоваяСтрока = ДеревоКолонкиОтчета.Строки.Добавить();
			НоваяСтрока.Значение     = "Общие";
			НоваяСтрока.ИмяИзмерения = "Общие";

			// В специальном параметре будет сохраняться правая ячейка
			СтруктураПараметров.Вставить("КонКолонка", Обл.Право);

			// Добавим 1 к количеству колонок показателей
			СтруктураПараметров.КоличествоКолонокПоказателей = СтруктураПараметров.КоличествоКолонокПоказателей+1;

			// Оформление ячеек группы "Общие итоги" не последнего уровня
			Если НачКолонка <> СтруктураПараметров.КонКолонка Тогда

				Обл = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2, СтруктураПараметров.КонКолонка);
				Обл.ПоВыделеннымКолонкам = Истина;
				Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Обл.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

				// Очистим границы слева и справа
				ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				Обл.ГраницаСправа = ЛинияНетЛинии;
				Обл.ГраницаСнизу  = ЛинияНетЛинии;

				Обл2 = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2, НачКолонка+1, СтруктураПараметров.ВысотаЗаголовка+2, СтруктураПараметров.КонКолонка);
				Обл2.ГраницаСлева  = ЛинияНетЛинии;

			КонецЕсли;
		КонецЕсли;

		// Последовательность и значения колонок в шапке, как они заданы в ДеревоКолонкиОтчета, будут
		// использоваться для вывода строк по следующим причинам:
		// - При построении шапки обходятся все значения всех измерений колонки в правильном порядке
		// - На каждом уровне присутствуют не все значения из значений измерений колонки,
		// - Сортировка по агрегатной функции приводит к порядку выборки измерений, отличному от порядка в шапке
		
		СтруктураПараметров.Вставить("ДеревоКолонкиОтчета", ДеревоКолонкиОтчета);

		СтруктураПараметров.Вставить("СтруктураФлаговПоказателейОбщие", СтруктураФлагов);

		// Массив, содержащий отмеченные показатели
		СтруктураПараметров.Вставить("Показатели", МассивПоказателей);

		// Общие итоги добавляются всегда, даже если выборка пустая - нет данных
		СтруктураПараметров.Вставить("СоответствиеПоказателейОбщие", Новый Соответствие);
		
		// 3. Вывод самой таблицы
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
			
			ДокументРезультат.НачатьАвтогруппировкуСтрок();
			
			МакетыИзмерений = Новый Массив;
			МакетыИзмеренийИерархия = Новый Массив;
			МакетыПоказателей = Новый Массив;
			МакетыПоказателейИерархия = Новый Массив;
				
			// Получим фрагменты макетов строк для вывода измерений и показателей и добавим их в структуру параметров,
			// чтобы упростить построение
			Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
				
				// Элементы
				МакетСтроки = ПостроительОтчета.ИзмеренияСтроки[Инд].Макет;
				
				// Макет для измерения
				МакетыИзмерений.Добавить(МакетСтроки.ПолучитьОбласть(1,1,МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок));
				
				// Макет для показателя
				МакетыПоказателей.Добавить(МакетСтроки.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1, МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок+?(ВыводитьПоказателиВСтроку, СтруктураПараметров.КоличествоПоказателей, Мин(1, КоличествоПоказателей))));
				
				// Иерархия 
				МакетСтрокиИерархия = ПостроительОтчета.ИзмеренияСтроки[Инд].МакетИерархии;
				
				// Макет для измерения
				МакетыИзмеренийИерархия.Добавить(МакетСтрокиИерархия.ПолучитьОбласть(1,1,МакетСтрокиИерархия.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок));
				
				// Макет для показателя
				МакетыПоказателейИерархия.Добавить(МакетСтрокиИерархия.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1, МакетСтрокиИерархия.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок+?(ВыводитьПоказателиВСтроку, СтруктураПараметров.КоличествоПоказателей, Мин(1, КоличествоПоказателей))));
				
			КонецЦикла;
			
			// Полученные макеты добавим в структуру параметров
			СтруктураПараметров.Вставить("МакетыИзмерений", МакетыИзмерений);
			СтруктураПараметров.Вставить("МакетыИзмеренийИерархия", МакетыИзмеренийИерархия);
			СтруктураПараметров.Вставить("МакетыПоказателей", МакетыПоказателей);
			СтруктураПараметров.Вставить("МакетыПоказателейИерархия" ,МакетыПоказателейИерархия);

			ВывестиСтроку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[0].Имя), 0, СтруктураПараметров, ДокументРезультат, Новый Структура);

			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
		КонецЕсли;
		
		// Выводим общий итог, если не задан пропуск общего итога
		Если НЕ мСтруктураНевыводимыхГруппировок.Свойство("Общие") Тогда
			
			// 4. Общий итог
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
			
			МакетОбщихИтогов = ПостроительОтчета.МакетОбщихИтогов.ПолучитьОбласть(1,1,ПостроительОтчета.МакетОбщихИтогов.ВысотаТаблицы,1+КоличествоКолонок);
			
			ДокументРезультат.Вывести(МакетОбщихИтогов, Выборка.Уровень());
			
			// Дерево, хранящее общие итоги
			ДеревоОбщиеИтоги = Новый ДеревоЗначений;
			ДеревоОбщиеИтоги.Колонки.Добавить("ИмяИзмерения");
			ДеревоОбщиеИтоги.Колонки.Добавить("Значение");
			ДеревоОбщиеИтоги.Колонки.Добавить("СтруктураЗначенийПоказателей");
			
			// Получение значений показателей по измерениям колонки
			ПолучитьПоказатели(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 
			0, СтруктураПараметров, ДокументРезультат, ДеревоОбщиеИтоги);
			
			// Получение значений показателей по общему итогу
			// Колонка с общим итогом выводится, если количество колонок группировок больше 1
			Если СтруктураПараметров.КоличествоКолонокГруппировок > 1 И
				(ВыводитьИтогиПоВсемУровням ИЛИ ВыводитьКолонкуОбщийИтог) Тогда
				
				ВыборкаОбщие = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
				
				ВыборкаОбщие.Следующий();
				
				// Запомним соответствие значений показателей и группировки в дереве
				НоваяСтрока = ДеревоОбщиеИтоги.Строки.Добавить();
				НоваяСтрока.ИмяИзмерения = "Общие";
				НоваяСтрока.Значение = "Общие";
				НоваяСтрока.СтруктураЗначенийПоказателей = Новый Структура;
				
				Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл
					
					НоваяСтрока.СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя, ВыборкаОбщие[ИмяПоказателя]);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Макет показателей
			МакетПоказатель = 
			ПостроительОтчета.МакетОбщихИтогов.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1,
			ПостроительОтчета.МакетОбщихИтогов.ВысотаТаблицы,
			1+СтруктураПараметров.КоличествоКолонок+Макс(?(ВыводитьПоказателиВСтроку,СтруктураПараметров.КоличествоПоказателей, Мин(1, КоличествоПоказателей)), 1));
			
			// Выводим показатели в соответствии с их порядком в шапке
			ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, СтруктураПараметров.ДеревоКолонкиОтчета, ДеревоОбщиеИтоги, МакетПоказатель);
			
		КонецЕсли;
	
		// Ширина таблицы:
		
		ШиринаТаблицы = 1+КоличествоКолонок + СтруктураПараметров.КоличествоКолонокПоказателей * ?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, Мин(1, КоличествоПоказателей));
		
		// Зафиксируем колонки слева
		ДокументРезультат.ФиксацияСлева = 1+КоличествоКолонок;

		// Снизу граница той же линией, что и слева в шапке таблицы
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		                          ДокументРезультат.ВысотаТаблицы, 
								  ШиринаТаблицы).ГраницаСнизу =
		Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);

	КонецЕсли;

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ШиринаТаблицы+1);




	// Обводим таблицу той же линией, что и слева в шапке таблицы
	ЛинияГраницы = Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 
	                          2, 
							  ДокументРезультат.ВысотаТаблицы-?(ПостроительОтчета.ИзмеренияКолонки.Количество()=0, 1, 0), 
							  ШиринаТаблицы).Обвести(ЛинияГраницы, ЛинияГраницы, ЛинияГраницы, ЛинияГраницы);
	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + ПостроительОтчета.МакетШапкиТаблицы.ВысотаТаблицы;

	// Восстановление ширин колонок
	Если ТипЗнч(мМассивШиринКолонок) = Тип("Массив") Тогда
		Если мМассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из мМассивШиринКолонок Цикл
				ДокументРезультат.Область(,1+Инд, , 1+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "СписокКроссТаблица "+мНазваниеОтчета;

	//попрячем показатели из доступных полей
	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование Тогда

			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя, ПостроительОтчета);

		КонецЕсли;

	КонецЦикла;


КонецПроцедуры // СформироватьОтчет()

// Добавляет в структуру общие для всех отчетов параметры настройки
//
// Параметры:
//	Нет.
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок) Экспорт
	
	Если ТипЗнч(СтруктураНастроек)<>Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели", Показатели.Выгрузить());
	СтруктураНастроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураНастроек.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
	СтруктураНастроек.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	СтруктураНастроек.Вставить("ЗаголовокПомечен", ПоказыватьЗаголовок);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()()

// Заполняет из структуры настроек общие параметры отчетов
//
// Параметры:
//	СтруктураСНастройками - структура,
//	ПоказыватьЗаголовок - булево, признак вывода заголовка.
//	Отчет - ОтчетОбъект, который вызвал процедуру. По умолчанию - общий отчет. Используется для доступа к его процедурам
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок, Отчет = Неопределено) Экспорт
	Перем ТабПоказатели;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если отчет, вызвавший процедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;
	
	
	ИмяРегистраДо = ИмяРегистра;
	
	СтруктураСНастройками.Свойство("ИмяРегистра", ИмяРегистра);
	
	// Заполнение нач. настроек, если поменялся один из параметров, определяющих начальный вид запроса
	Если
		НЕ (
		ИмяРегистраДо = ИмяРегистра 
		) Тогда
		
		Отчет.ЗаполнитьНачальныеНастройки();
	КонецЕсли;
	
	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("Показатели", ТабПоказатели);
	Если ТипЗнч(ТабПоказатели) = Тип("ТаблицаЗначений") Тогда
		Показатели.Загрузить(ТабПоказатели);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ВыводитьДополнительныеПоляВОтдельнойКолонке", ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураСНастройками.Свойство("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
	СтруктураСНастройками.Свойство("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
	СтруктураСНастройками.Свойство("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	СтруктураСНастройками.Свойство("ЗаголовокПомечен", ПоказыватьЗаголовок);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки)()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

мТаблицаПоказатели  = Новый ТаблицаЗначений;

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мМассивШиринКолонок = Новый Массив;

мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

мСоответствиеНазначений = Новый Соответствие;
СоответствиеТиповИнтервальныхПолей = Новый Соответствие;

мНазваниеОтчета = "";

мВыбиратьИмяРегистра = Истина;
мВыбиратьИспользованиеСвойств = Истина;

мРежимВводаПериода = 0;

мСтруктураНевыводимыхГруппировок = Новый Структура;

ПоказыватьЗаголовок = Истина;

ШиринаТаблицы = 0;

СтруктураФорматаПолей = Новый Структура;
СтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
СтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = """"""Декада с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""");

#КонецЕсли