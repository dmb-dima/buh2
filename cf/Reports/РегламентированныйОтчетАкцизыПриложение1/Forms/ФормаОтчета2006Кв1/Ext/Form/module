////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;

Перем мРаздел11;
Перем мРаздел12;
Перем мРаздел2;
Перем мПриложение1; // мРаздел2_1
Перем мПриложение2; // мРаздел2_2;
Перем мПриложение3; // мПриложение1;
Перем мПриложение4; // мПриложение2;
Перем мПриложение5; // мыРаздел2_5;

// Хранят сведения о должностных лицах
Перем мОргКодОКАТО;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем мИдГруппы8;
Перем мИдГруппы9;
Перем мИдГруппы10;
Перем мИдГруппы11;
Перем мИдГруппы12;
Перем мИдГруппы13;
Перем мИдГруппы14;
Перем мИдГруппы15;
Перем мИдГруппы16;
Перем мИдГруппы17;
Перем мИдГруппы18;

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мВПрограммеИзмененаОрганизация;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Переменные раздела 1.1
Перем мКБК_1;
Перем мКБК_2;

Перем мКодОКАТО_1;
Перем мКодОКАТО_2;

Перем мСуммаНалога_1;
Перем мСуммаНалога_2;

Перем мСуммаНалога40_1;
Перем мСуммаНалога40_2;

Перем мСуммаНалога50_1;
Перем мСуммаНалога50_2;

// Переменные раздела 1.2
Перем мКБКРаздел12;
Перем мКодОКАТОРаздел12;

Перем мСуммаНалогаРаздел12;
Перем мСуммаНалога50Раздел12;

Перем мКБК2005Раздел11;
Перем мКБК2006Раздел11;

// Справочник- выбор значений для раздела 1
Перем мАкцизыПодакцизныеТоварыКодыТоваров;

// Справочник- выбор значений для раздела 2
Перем мАкцизыПодакцизныеТоварыКодыОбъектов;
Перем мЕдиницыИзмерения;

Перем мБезОткрытияФормы;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

// Возводится в Истина, при печати, по окончании печати, возвращается в Ложь.
Перем мРежимПечати;

Перем мОписаниеТиповБулево;

Перем МногострочныеИсключения;

///////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина)

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Значение, ПрефиксНаЛисте, ЛистИсключение, ТолькоДляЛиста, ТолькоАктивныйЛистМногостраничнойчасти, ИспользоватьНомер, ЛистыМногостраничные);

КонецПроцедуры // ПроставитьНаВсехЛистах()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	Страница = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел11" Тогда

		мКБК_1 = "";
		мКБК_2 = "";

		мСуммаНалога_1 = 0;
		мСуммаНалога_2 = 0;

		мСуммаНалога40_1 = 0;
		мСуммаНалога40_2 = 0;

		мСуммаНалога50_1 = 0;
		мСуммаНалога50_2 = 0;

		мКодОКАТО_1 = "";
		мКодОКАТО_2 = "";

	ИначеЕсли Страница = "Раздел12" Тогда

		мКБКРаздел12 = "";
		мКодОКАТОРаздел12 = "";
		мСуммаНалогаРаздел12 = 0;
		мСуммаНалога50Раздел12 = 0;

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Или ИдГруппы = мИдГруппы2 Или ИдГруппы = мИдГруппы3
	   Или ИдГруппы = мИдГруппы4 Или ИдГруппы = мИдГруппы5
	   Или ИдГруппы = мИдГруппы6 Или ИдГруппы = мИдГруппы7
	   Или ИдГруппы = мИдГруппы8 Или ИдГруппы = мИдГруппы9
	   Или ИдГруппы = мИдГруппы10 Или ИдГруппы = мИдГруппы11
	   Или ИдГруппы = мИдГруппы12 Или ИдГруппы = мИдГруппы13
	   Или ИдГруппы = мИдГруппы14 Тогда
		ТекТабличноеПоле = мРаздел2;
	ИначеЕсли ИдГруппы = мИдГруппы15 Тогда
		ТекТабличноеПоле = мПриложение1;
	ИначеЕсли ИдГруппы = мИдГруппы16 Тогда
		ТекТабличноеПоле = мПриложение2;
	ИначеЕсли ИдГруппы = мИдГруппы17 Тогда
		ТекТабличноеПоле = мПриложение4;
	ИначеЕсли ИдГруппы = мИдГруппы18 Тогда
		ТекТабличноеПоле = мПриложение5;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = мИдГруппы15;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = мИдГруппы16;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы = мИдГруппы17;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = мИдГруппы18;

	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел11" Тогда

		СтруктураДанныхПоля.Вставить("КБК_1"                       , мКБК_1);
		СтруктураДанныхПоля.Вставить("КБК_2"                       , мКБК_2);

		СтруктураДанныхПоля.Вставить("СуммаНалога_1"               , мСуммаНалога_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога_2"               , мСуммаНалога_2);

		СтруктураДанныхПоля.Вставить("СуммаНалога40_1"             , мСуммаНалога40_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога40_2"             , мСуммаНалога40_2);

		СтруктураДанныхПоля.Вставить("СуммаНалога50_1"             , мСуммаНалога50_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога50_2"             , мСуммаНалога50_2);

		СтруктураДанныхПоля.Вставить("КодОКАТО_1"                  , мКодОКАТО_1);
		СтруктураДанныхПоля.Вставить("КодОКАТО_2"                  , мКодОКАТО_2);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел12" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел12"                 , мКБКРаздел12);
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел12"            , мКодОКАТОРаздел12);
		СтруктураДанныхПоля.Вставить("СуммаНалогаРаздел12"         , мСуммаНалогаРаздел12);
		СтруктураДанныхПоля.Вставить("СуммаНалога50Раздел12"       , мСуммаНалога50Раздел12);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "СуммаНалога_1" Тогда
		Рез = мСуммаНалога_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога_2" Тогда
		Рез = мСуммаНалога_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога40_1" Тогда
		Рез = мСуммаНалога40_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога40_2" Тогда
		Рез = мСуммаНалога40_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога50_1" Тогда
		Рез = мСуммаНалога50_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога50_2" Тогда
		Рез = мСуммаНалога50_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_1" Тогда
		Рез = мКБК_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_2" Тогда
		Рез = мКБК_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_1" Тогда
		Рез = мКодОКАТО_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_2" Тогда
		Рез = мКодОКАТО_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел12" Тогда
		Рез = мКБКРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел12" Тогда
		Рез = мКодОКАТОРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалогаРаздел12" Тогда
		Рез = мСуммаНалогаРаздел12;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога50Раздел12" Тогда
		Рез = мСуммаНалога50Раздел12;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "СуммаНалога_1" Тогда
		мСуммаНалога_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога_2" Тогда
		мСуммаНалога_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога40_1" Тогда
		мСуммаНалога40_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога40_2" Тогда
		мСуммаНалога40_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога50_1" Тогда
		мСуммаНалога50_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога50_2" Тогда
		мСуммаНалога50_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_1" Тогда
		мКБК_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_2" Тогда
		мКБК_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_1" Тогда
		мКодОКАТО_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_2" Тогда
		мКодОКАТО_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел12" Тогда
		мКБКРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел12" Тогда
		мКодОКАТОРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалогаРаздел12" Тогда
		мСуммаНалогаРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога50Раздел12" Тогда
		мСуммаНалога50Раздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Формирует струкутуру данных строк многострочных блоков табличного документа
// на заданной странице основной панели формы.
//
// Параметры
//  ИмяСтраницы  - строка - имя страницы основной панели формы.
//
// Возвращаемое значение:
//   структура   - элементы струкутуры содержат данные дополнительных строк страницы, где
//                 в качестве ключа используется имя многострочного блока, а в качестве
//                 значения - таблица показателей и их значений многострочного блока.
//
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Раздел2" Тогда

		// Так как Раздел 2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы8);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы9);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы10);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы11);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы12);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы13);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы14);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы1, ТаблицаДопСтрокГруппы1);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы2 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы2, ТаблицаДопСтрокГруппы2);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы3 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы3, ТаблицаДопСтрокГруппы3);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы4 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы4, ТаблицаДопСтрокГруппы4);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы5 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы5, ТаблицаДопСтрокГруппы5);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы6 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы6, ТаблицаДопСтрокГруппы6);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы7 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы7, ТаблицаДопСтрокГруппы7);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы8 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы8, ТаблицаДопСтрокГруппы8);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы9 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы9, ТаблицаДопСтрокГруппы9);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы10 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы10, ТаблицаДопСтрокГруппы10);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы11, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы11 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы11, ТаблицаДопСтрокГруппы11);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы12 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы12, ТаблицаДопСтрокГруппы12);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы13, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы13 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы13, ТаблицаДопСтрокГруппы13);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы14, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы14 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы14, ТаблицаДопСтрокГруппы14);

	ИначеЕсли ИмяСтраницы = "Приложение1" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы15);
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы15 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы15, ТаблицаДопСтрокГруппы15);
	ИначеЕсли ИмяСтраницы = "Приложение2" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы16);
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы16, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы16 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы16, ТаблицаДопСтрокГруппы16);
	ИначеЕсли ИмяСтраницы = "Приложение4" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы17);
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы17, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы17 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы17, ТаблицаДопСтрокГруппы17);
	ИначеЕсли ИмяСтраницы = "Приложение5" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы18);
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы18, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы18 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы18, ТаблицаДопСтрокГруппы18);
	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции // СформироватьСтруктуруДанныхДопСтрокСтраницы()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	
	//Если НомерМесяца = "12" Тогда
		//НомерМесяца = "0";
	//КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = "1";
	мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 1, 1);
	мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 2, 1);

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "        ";
	ДатаПодписиБух = "        ";

	Если ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	ДатаПодписиЧП = ?(ЧП, ДатаПодписи, "        ");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиЧП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	ПроставитьНаВсехЛистах(Формат(ДатаПодписиРук,    "ДФ = 'ддММгггг'"), "ДатаПодписи1_", , "Раздел11", , Ложь, Истина);
	ПроставитьНаВсехЛистах(Формат(ДатаПодписиБух,    "ДФ = 'ддММгггг'"), "ДатаПодписи2_", , "Раздел11", , Ложь, Истина);
	ПроставитьНаВсехЛистах(Формат(ДатаПодписиЧП,     "ДФ = 'ддММгггг'"), "ДатаПодписи3_", , "Раздел11", , Ложь, Истина);

	ПроставитьНаВсехЛистах(Формат(ДатаПодписиРук,    "ДФ = 'ддММгггг'"), "ДатаПодписи1_", , "Раздел12", , Ложь, Истина);
	ПроставитьНаВсехЛистах(Формат(ДатаПодписиБух,    "ДФ = 'ддММгггг'"), "ДатаПодписи2_", , "Раздел12", , Ложь, Истина);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОКАТО, ТелОрганизации, КодНО, НаимНО, ТипНП, ОГРН, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух, ФИО";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(Результат.ОКАТО, 11, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел11", "КодОКАТО1_", 11, ОКАТО);
		мКодОКАТО_1 = ОКАТО;

		ТипНП = Результат.ТипНП;
		Если ТипНП = 1 Тогда
			// Необходимо анализировать здесь, является ли ЮР лицом или является ПБОЮЛом
			мТитульный.Области.ТипОрг1.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 2 Тогда

			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "V";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 3 Тогда

			мТитульный.Области.ТипОрг3.Значение = "V";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 5 Тогда

			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "V";

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЦветом
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	// Управление цветами
	Если ТипНП = 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВпрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП <> 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЧП", мВпрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЦветом

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЧП"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Очищать = Истина)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;
	//НазванияЯчеекОтносящихсяКЮЛ.Добавить("ОГРН1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Составная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг2"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг4"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");

	НазванияЯчеекОтносящихсяКЧП = Новый СписокЗначений;
	//НазванияЯчеекОтносящихсяКЧП.Добавить("ОГРНИП1" + Символы.ПС + "Титульный" + Символы.ПС + "Составная");
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг3" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);


	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЧП;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЧП" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЧП;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, Комманда       ,                   , Страница);
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);

				Если Очищать Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			Если КодПоказателяПоСтруктуре = "СуммаНалога" Тогда

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога1_", 15, мСуммаНалога_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога2_", 15, мСуммаНалога_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога40" Тогда 

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога15Число1_"    , 15, мСуммаНалога40_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога15Число2_",     15, мСуммаНалога40_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога50" Тогда 

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалогаКУменьшению1_", 15, мСуммаНалога50_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалогаКУменьшению2_", 15, мСуммаНалога50_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалогаРаздел12" Тогда 

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога1_", 15, мСуммаНалогаРаздел12, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога50Раздел12" Тогда 

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалогаКУменьшению1_", 15, мСуммаНалога50Раздел12, Истина);

			КонецЕсли;


		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					Если (ФорматируемаяОбласть.Имя = "П000020007007_2")
					     Или (ФорматируемаяОбласть.Имя = "П000020008007_2")
					     Или (ФорматируемаяОбласть.Имя = "П000020009007_2") Тогда
						Продолжить;
					КонецЕсли;

					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если (ИмяГруппы = мИДГруппы7) Или (ИмяГруппы = мИДГруппы8) Или (ИмяГруппы = мИДГруппы9) Тогда
		Сообщить("В данный блок многострочного раздела нельзя добавлять дополнительные строки.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	//НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     2, НомерНижнЯчейкиОбласти,     2);
	//НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,2, НомерНижнЯчейкиНовойОбласти,2);
	//ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
	//	ИсходныйНомер = Число(ПоследнийНомер);
	//Иначе
	//	ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	//КонецЕсли;

	//НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	////
	////// Назначаем новый номер добавленной строке

	//// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	//// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// СпециальногоУдаленияСтроки
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		// сохраним имеющиеся настройки правой присоединяющейся части (((

		//верх //лево         //низ   //.право
		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

		Ч2Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Верх;
		Ч2Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Лево;
		Ч2Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Низ;
		Ч2Право = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Право;

		Ч3Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Верх;
		Ч3Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Лево;
		Ч3Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Низ;
		Ч3Право = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Право;

		Ч4Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Верх;
		Ч4Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Лево;
		Ч4Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Низ;
		Ч4Право = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Право;

		Ч5Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Верх;
		Ч5Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Лево;
		Ч5Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Низ;
		Ч5Право = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Право;

		СтруктураКоординатовМногострочныхЧастейРаздела2 = Новый Структура;
		ДопСчетчик = 2;
		СтруктураКоординатГрупп = Новый Структура;
		СтруктураКоординатГрупп.Вставить(мИдГруппы1, 1);
		СтруктураКоординатГрупп.Вставить(мИдГруппы2, 2);
		СтруктураКоординатГрупп.Вставить(мИдГруппы3, 3);
		СтруктураКоординатГрупп.Вставить(мИдГруппы4, 4);
		СтруктураКоординатГрупп.Вставить(мИдГруппы5, 5);
		СтруктураКоординатГрупп.Вставить(мИдГруппы6, 6);
		СтруктураКоординатГрупп.Вставить(мИдГруппы7, 7);
		СтруктураКоординатГрупп.Вставить(мИдГруппы8, 8);
		СтруктураКоординатГрупп.Вставить(мИдГруппы9, 9);
		СтруктураКоординатГрупп.Вставить(мИдГруппы10, 10);
		СтруктураКоординатГрупп.Вставить(мИдГруппы11, 11);
		СтруктураКоординатГрупп.Вставить(мИдГруппы12, 12);
		СтруктураКоординатГрупп.Вставить(мИдГруппы13, 13);
		СтруктураКоординатГрупп.Вставить(мИдГруппы14, 14);

		Для Инд = СтруктураКоординатГрупп[ИмяГруппы] По 14 Цикл

			Если Инд > 9 Тогда
				НазваниеМнгЧасти = "МногострочнаяЧасть9_" + Строка(ДопСчетчик);
				ДопСчетчик = ДопСчетчик + 1;
			Иначе
				НазваниеМнгЧасти = "МногострочнаяЧасть" + Строка(Инд);
			КонецЕсли;


			ЧВерх  = ТекТабличноеПоле.Области[НазваниеМнгЧасти].Верх;
			ЧНиз   = ТекТабличноеПоле.Области[НазваниеМнгЧасти].Низ;
			СтруктураКоординатовМногострочныхЧастейРаздела2.Вставить(НазваниеМнгЧасти + "Верх", ЧВерх);
			СтруктураКоординатовМногострочныхЧастейРаздела2.Вставить(НазваниеМнгЧасти + "Низ", ЧНиз);

		КонецЦикла;
	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

		//Ч2Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Верх;
		//Ч2Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Лево;
		//Ч2Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Низ;
		//Ч2Право = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Право;

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

		//Ч2Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Верх;
		//Ч2Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Лево;
		//Ч2Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Низ;
		//Ч2Право = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Право;

	ИначеЕсли (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1") Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

	ИначеЕсли (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2") Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

	КонецЕсли;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	//возврат;
	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		Область.Объединить();
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			Область.Объединить();
		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// КонецСпециального режима удаления

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители5"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители5"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,45,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители1"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители1"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	КонецЕсли;

	// Восстановим координаты правых полей
	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение1";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, Ч2Лево, Ч2Низ, Ч2Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение2";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч3Верх, Ч3Лево, Ч3Низ, Ч3Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение3";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч4Верх, Ч4Лево, Ч4Низ, Ч4Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение4";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч5Верх, Ч5Лево, Ч5Низ, Ч5Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение5";

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Или ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		//СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, Ч2Лево, Ч2Низ, Ч2Право);
		//СледующаяЧасть.Имя = "ПравоеПрисоединение2";

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1" Тогда

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение1";

	Иначе

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

	КонецЕсли;

	Если (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1")
	 Или (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2")
	 Или (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4")
	 Или (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5") Тогда

		Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть") <> Неопределено Тогда
			ТекТабличноеПоле.Области.МногострочнаяЧасть.Имя = "";
		КонецЕсли;

		Если (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1") Тогда
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(29, , 44,);
		ИначеЕсли (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2") Тогда
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(29, , 38,);
		Иначе
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(53, , 91,);
		КонецЕсли;

		МногострочнаяЧастьОбл.Имя = "МногострочнаяЧасть";
	Иначе
	// Раздел2

		ДопСчетчик = 2;
		Для Инд = СтруктураКоординатГрупп[ИмяГруппы] По 14 Цикл
		//Для Каждого Стр Из СтруктураКоординатовМногострочныхЧастейРаздела2 Цикл

			Если Инд > 9 Тогда
				НазваниеМнгЧасти = "МногострочнаяЧасть9_" + Строка(ДопСчетчик);
				ДопСчетчик = ДопСчетчик + 1;
			Иначе
				НазваниеМнгЧасти = "МногострочнаяЧасть" + Строка(Инд);
			КонецЕсли;

			Если ТекТабличноеПоле.Области.Найти(НазваниеМнгЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[НазваниеМнгЧасти].Имя = "";
			КонецЕсли;

			Если Инд = СтруктураКоординатГрупп[ИмяГруппы] Тогда
				Коэф = 0;
			Иначе
				Коэф = -1;
			КонецЕсли;

			ЧВерх = Коэф + СтруктураКоординатовМногострочныхЧастейРаздела2[НазваниеМнгЧасти + "Верх"];
			ЧНиз = Коэф + СтруктураКоординатовМногострочныхЧастейРаздела2[НазваниеМнгЧасти + "Низ"];

			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(ЧВерх, , ЧНиз,);
			МногострочнаяЧастьОбл.Имя = НазваниеМнгЧасти;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		// сохраним имеющиеся настройки правой присоединяющейся части (((

		//верх //лево         //низ   //.право
		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

		Ч2Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Верх;
		Ч2Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Лево;
		Ч2Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Низ;
		Ч2Право = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Право;

		Ч3Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Верх;
		Ч3Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Лево;
		Ч3Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Низ;
		Ч3Право = ТекТабличноеПоле.Области["ПравоеПрисоединение3"].Право;

		Ч4Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Верх;
		Ч4Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Лево;
		Ч4Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Низ;
		Ч4Право = ТекТабличноеПоле.Области["ПравоеПрисоединение4"].Право;

		Ч5Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Верх;
		Ч5Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Лево;
		Ч5Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Низ;
		Ч5Право = ТекТабличноеПоле.Области["ПравоеПрисоединение5"].Право;

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Или ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

		//Ч2Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Верх;
		//Ч2Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Лево;
		//Ч2Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Низ;
		//Ч2Право = ТекТабличноеПоле.Области["ПравоеПрисоединение2"].Право;

	ИначеЕсли (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1") Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

	ИначеЕсли (ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2") Тогда

		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение"].Право;

	КонецЕсли;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти, РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		Область.Объединить();
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			Область.Объединить();
		КонецЕсли;

	КонецЕсли;

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители5"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители5"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,45,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители1"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители1"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители2"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители2"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,46,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	КонецЕсли;

	// Восстановим координаты правых полей
	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение1";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, Ч2Лево, Ч2Низ, Ч2Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение2";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч3Верх, Ч3Лево, Ч3Низ, Ч3Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение3";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч4Верх, Ч4Лево, Ч4Низ, Ч4Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение4";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч5Верх, Ч5Лево, Ч5Низ, Ч5Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение5";

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение4" Или ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5" Тогда

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		//СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, Ч2Лево, Ч2Низ, Ч2Право);
		//СледующаяЧасть.Имя = "ПравоеПрисоединение2";

	ИначеЕсли ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение1" Тогда

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение1";

	Иначе

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

	КонецЕсли;

КонецПроцедуры // СпециальногоДобавленияСтроки

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если (ИмяГруппы = мИДГруппы7) Или (ИмяГруппы = мИДГруппы8) Или (ИмяГруппы = мИДГруппы9) Тогда
		Сообщить("Нельзя удалять дополнительные строки в данном пункте декларации.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Запустим единую процедуру удаляющая строку по специальному алгоритму
		// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
		СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";
				//
				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	ИмяТабличногоПоля = ВыбТабличноеПоле.Имя;
	ИмяСтраницыФормы  = СтрЗаменить(ИмяТабличногоПоля, "ПолеТабличногоДокумента", "");

	// Сначала получим структуру данных многострочных блоков табличного поля.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницыФормы);

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда
		// Табличное поле содержит многострочные блоки.
		// Удалим все созданные дополнительные строки в блоке.
		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл

			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;

			// Получим таблицу значений, содержащую данные дополнительных строк.
			ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

			ИсходноеКоличествоСтрокГруппы = 0;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

			ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

			Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
				// Имеются дополнительные строки.
				// Удаляем их.

				НСтр = ПромТаблицаДопСтрокРаздела.Количество();
				Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

					ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

					ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
					ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

					// область первой ячейки удаляемой строки многострочного раздела
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

					// номера строк удаляемой области
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

					СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

					// удаляем из структуры многострочного раздела соответствующую строку
					ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

					НСтр = НСтр - 1;

				КонецЦикла;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП

			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;

		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	// Обнулим переменные соответствующих разделов
	// Обнулим нужный нам раздел
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда

		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл
			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЦикла;

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыФормы);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// мПериодичность всегда инициализируется в осн. форме, но т.к. в данной декларации с начала
	// не было инициализации там, то чтобы при восстановлении этот параметр всё таки заполнился
	// то дополнительно прописываем его здесь, для случаев, когда восстанавливается декларации.
	мПериодичность = Перечисления.Периодичность.Месяц;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			мСтараяверсияФормы = ВерсияФормы;
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			// Поправим в мДеревоСтраницОтчета названия страниц со старых на новые, которые будут действовать

			РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		// Отображаем данные, хранящиеся в структуре многостраничных разделов

		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;

		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницыПанели, "ПредставлениеДанных");

		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
			// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
			// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
			// данные многостраничных разделов уже были выведены в соответствующие листы
			Продолжить;
		КонецЕсли;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	// Выводим дату подписания отчета
	ЗаполнитьДатуВЯчейках();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Очищает строки многострочного блока табличного документа,
// предварительно удалив все созданные дополнительные строки.
//
// Параметры
//  ИмяГруппыДопСтрок - строка - идентификатор многострочного блока.
//
Процедура ОчиститьМногострочныйБлок(ИмяГруппыДопСтрок)

	ВыбТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппыДопСтрок);

	Если ВыбТабличноеПоле = Неопределено Тогда
		Возврат;
	Конецесли;

	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.

		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

			ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

			НСтр = НСтр - 1;

		КонецЦикла;

	КонецЕсли;

	Для НСтр = 1 По ПромТаблицаДопСтрокРаздела.Количество() Цикл

		ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

		Для Каждого Колонка Из ПромТаблицаДопСтрокРаздела.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;

			ОбластьЯчейки.Очистить();
		КонецЦикла;

	КонецЦикла;

	// Обновляем структуру многострочного блока.
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

КонецПроцедуры // ОчиститьМногострочныйБлок()

// Заполняет строки по кодам 100 и 110 Раздела 2 декларации
// на основании данных в других строках Раздела.
//
Процедура АвтозаполнениеСтрок100и110Раздела2()
	Перем ТаблицаДопСтрокБлока;

	ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Предварительно очищаем строки многострочного блока по коду строки 090
	ОчиститьМногострочныйБлок(мИдГруппы10);
	// Предварительно очищаем данные многострочных групп по коду строки 100
	ОчиститьМногострочныйБлок(мИдГруппы11);
	// Сохраняем строки 010
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
	// Сохраняем строки 030
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
	// Сохраняем строки 040
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
	// Сохраняем строки 050
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
	// Сохраняем строки 060
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);
	// Сохраняем строки 070
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);
	// Сохраняем строки 080
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы8);
	// Сохраняем строки 090
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы9);

	// Собираем данные по строкам 010, 040, 050 - 070
	// в таблицу значений для заполнения строк
	// многострочных блоков по кодам строки 080 и 090.
	//

	ТаблЗначСтрок090и100 = Новый ТаблицаЗначений;
	ТаблЗначСтрок090и100.Колонки.Добавить("ВидПАТ",      ОписаниеТиповСтрока254);
	ТаблЗначСтрок090и100.Колонки.Добавить("КодВидаПАТ",  ОписаниеТиповСтрока3);
	ТаблЗначСтрок090и100.Колонки.Добавить("СуммаАкциза", мОписаниеТиповЧислоЕ);

	// Собираем данные по строкам 010
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020001007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020001002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020001004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020001007;
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 030
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020003007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020003002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020003004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020003007;
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 040
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020004007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020004002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020004004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020004007;
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 050
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ТаблицаДопСтрокБлока) Тогда

		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020005007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020005002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020005004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020005007 * (-1);

		КонецЦикла;

	КонецЕсли;

	// Собираем данные по строкам 060
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020006007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020006002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020006004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020006007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 070
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020007007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020007002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020007004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020007007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 080
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020008007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020008002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020008004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020008007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 090
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020009007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок090и100.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020009002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020009004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020009007 * (-1);
		КонецЦикла;
	КонецЕсли;


	// Сворачиваем таблицу значений по виду и коду вида объектов налогообложения
	ТаблЗначСтрок100и110_ = ТаблЗначСтрок090и100.Скопировать();
	ТаблЗначСтрок100и110_.Свернуть("ВидПАТ,КодВидаПАТ", "СуммаАкциза");
	
	// Сортируем таблицу значений по коду объектов налогообложения
	ТаблЗначСтрок100и110_.Сортировать("ВидПАТ Возр");

	ТаблицаДопСтрокПоКоду100 = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10, ТаблицаДопСтрокПоКоду100);

	ТаблицаДопСтрокПоКоду110 = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы11, ТаблицаДопСтрокПоКоду110);

	// Удаляем строки таблицы значений
	ТаблицаДопСтрокПоКоду100.Очистить();
	ТаблицаДопСтрокПоКоду110.Очистить();

	Для Каждого СтрокаТаблицы Из ТаблЗначСтрок100и110_ Цикл
		ВидПАТ      = СтрокаТаблицы.ВидПАТ;
		КодВидаПАТ  = СтрокаТаблицы.КодВидаПАТ;
		СуммаАкциза = СтрокаТаблицы.СуммаАкциза;

		Если СуммаАкциза > 0 Тогда
			// Заполняем строки 090
			НоваяСтрока = ТаблицаДопСтрокПоКоду100.Добавить();
			НоваяСтрока.П000020010001 = ТаблицаДопСтрокПоКоду100.Индекс(НоваяСтрока) + 1;
			НоваяСтрока.П000020010002 = ВидПАТ;
			НоваяСтрока.П000020010004 = КодВидаПАТ;
			НоваяСтрока.П000020010007 = СуммаАкциза;

		ИначеЕсли СуммаАкциза < 0 Тогда

			НоваяСтрока = ТаблицаДопСтрокПоКоду100.Добавить();
			НоваяСтрока.П000020010001 = ТаблицаДопСтрокПоКоду100.Индекс(НоваяСтрока) + 1;
			НоваяСтрока.П000020010002 = ВидПАТ;
			НоваяСтрока.П000020010004 = КодВидаПАТ;
			НоваяСтрока.П000020010007 = 0;

			// Заполняем строки 100 
			НоваяСтрока = ТаблицаДопСтрокПоКоду110.Добавить();
			НоваяСтрока.П000020011001 = ТаблицаДопСтрокПоКоду110.Индекс(НоваяСтрока) + 1;
			НоваяСтрока.П000020011002 = ВидПАТ;
			НоваяСтрока.П000020011004 = КодВидаПАТ;
			НоваяСтрока.П000020011007 = СуммаАкциза * (-1);

		КонецЕсли;

	Конеццикла;

	// Дополняем таблицы значений, содержащие данные по строкам 080 и 090
	// новыми строками до полного заполнения (так, чтобы кол-во строк 
	// в таблице значений был не меньше минимального кол-ва строк,
	// всегда отображаемых в форме.

	// Определим исходное количество строк в блоке
	ИсходноеКолвоСтрокПоКоду100 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы10, ИсходноеКолвоСтрокПоКоду100);
	ИсходноеКолвоСтрокПоКоду110 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы11, ИсходноеКолвоСтрокПоКоду110);

	ТекущееКолвоСтрок100 = ТаблицаДопСтрокПоКоду100.Количество();
	Если ТекущееКолвоСтрок100 < ИсходноеКолвоСтрокПоКоду110 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду100 - ТекущееКолвоСтрок100) Цикл
			ТаблицаДопСтрокПоКоду100.Добавить();
		КонецЦикла;

	КонецЕсли;

	ТекущееКолвоСтрок110 = ТаблицаДопСтрокПоКоду110.Количество();
	Если ТекущееКолвоСтрок110 < ИсходноеКолвоСтрокПоКоду110 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду110 - ТекущееКолвоСтрок110) Цикл
			ТаблицаДопСтрокПоКоду110.Добавить();
		КонецЦикла;

	КонецЕсли;
	//
	// Завершили дополнение таблицы значений недостающими строками.

	// Выведем строки 080 и 090 в табличный документ
	ВывестиРазделВТабличныйДокумент(мИдГруппы10, ТаблицаДопСтрокПоКоду100);
	ВывестиРазделВТабличныйДокумент(мИдГруппы11, ТаблицаДопСтрокПоКоду110);

КонецПроцедуры // АвтозаполнениеСтрок100и110Раздела2()

// АвтозаполнениеТаблицыПоОбъектам
// Процедура заполняет таблицу "Итого по объектам налогообложения" на основании
// таблицы расчета налоговой базы по наименованиям ПАТ. Строки с одинаковым кодом 
// объектов налогообложения суммируются и выводятся в одну строку. Строки, в которых
// не указан код объекта налогообложения, суммируются аналогичным образом и выводятся
// в отдельную строку.
//
Процедура АвтозаполнениеТаблицыПоОбъектам()
	Перем ТаблицаДопСтрокБлока;

	ОписаниеТиповСтрока5   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло14_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3);

	// Формируем таблицу значений по показателям строк 050
	ТаблДанныхСтрок050 = Новый ТаблицаЗначений;
	ТаблДанныхСтрок050.Колонки.Добавить("Наименование",  ОписаниеТиповСтрока254);
	ТаблДанныхСтрок050.Колонки.Добавить("КодОбъекта",    ОписаниеТиповСтрока5);
	ТаблДанныхСтрок050.Колонки.Добавить("Объем",         ОписаниеТиповЧисло14_3);
	ТаблДанныхСтрок050.Колонки.Добавить("НалоговаяБаза", ОписаниеТиповЧисло14_3); 

	// Собираем данные по строкам 050
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если (СтрокаБлока.П000210005004 = 0) И (СтрокаБлока.П000210005005 = 0) Тогда
				// пустые строки не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблДанныхСтрок050.Добавить();
			НоваяСтрока.КодОбъекта    = СтрокаБлока.П000210005004;
			НоваяСтрока.Объем         = СтрокаБлока.П000210005005;
			НоваяСтрока.НалоговаяБаза = СтрокаБлока.П000210005006;

		КонецЦикла;
	КонецЕсли;

	// Сворачиваем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Свернуть("КодОбъекта,Наименование", "Объем, НалоговаяБаза");
	// Сортируем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Сортировать("КодОбъекта Возр");

	мПриложение1.Области.П000210007005.Значение = 0;
	мПриложение1.Области.П000210007006.Значение = 0;
	мПриложение1.Области.П000210008005.Значение = 0;
	мПриложение1.Области.П000210008006.Значение = 0;
	мПриложение1.Области.П000210009005.Значение = 0;
	мПриложение1.Области.П000210009006.Значение = 0;
	мПриложение1.Области.П000210010005.Значение = 0;
	мПриложение1.Области.П000210010006.Значение = 0;
	мПриложение1.Области.П000210011005.Значение = 0;
	мПриложение1.Области.П000210011006.Значение = 0;
	мПриложение1.Области.П000210012005.Значение = 0;
	мПриложение1.Области.П000210012006.Значение = 0;
	мПриложение1.Области.П000210013005.Значение = 0;
	мПриложение1.Области.П000210013006.Значение = 0;
	мПриложение1.Области.П000210014005.Значение = 0;
	мПриложение1.Области.П000210014006.Значение = 0;
	мПриложение1.Области.П000210015005.Значение = 0;
	мПриложение1.Области.П000210015006.Значение = 0;
	мПриложение1.Области.П000210016005.Значение = 0;
	мПриложение1.Области.П000210016006.Значение = 0;

	Для Каждого СтрокаТаблицы Из ТаблДанныхСтрок050 Цикл
		КодОбъекта          = СтрокаТаблицы.КодОбъекта;
		Объем               = СтрокаТаблицы.Объем;
		НалоговаяБаза       = СтрокаТаблицы.НалоговаяБаза;

		Если КодОбъекта = "10001" Тогда

			мПриложение1.Области.П000210007005.Значение = мПриложение1.Области.П000210007005.Значение + Объем;
			мПриложение1.Области.П000210007006.Значение = мПриложение1.Области.П000210007006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10006" Тогда

			мПриложение1.Области.П000210008005.Значение = мПриложение1.Области.П000210008005.Значение + Объем;
			мПриложение1.Области.П000210008006.Значение = мПриложение1.Области.П000210008006.Значение + НалоговаяБаза;
			
		ИначеЕсли КодОбъекта = "10007" Тогда

			мПриложение1.Области.П000210009005.Значение = мПриложение1.Области.П000210009005.Значение + Объем;
			мПриложение1.Области.П000210009006.Значение = мПриложение1.Области.П000210009006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10008" Тогда

			мПриложение1.Области.П000210010005.Значение = мПриложение1.Области.П000210010005.Значение + Объем;
			мПриложение1.Области.П000210010006.Значение = мПриложение1.Области.П000210010006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10009" Тогда

			мПриложение1.Области.П000210011005.Значение = мПриложение1.Области.П000210011005.Значение + Объем;
			мПриложение1.Области.П000210011006.Значение = мПриложение1.Области.П000210011006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10010" Тогда

			мПриложение1.Области.П000210012005.Значение = мПриложение1.Области.П000210012005.Значение + Объем;
			мПриложение1.Области.П000210012006.Значение = мПриложение1.Области.П000210012006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10011" Тогда

			мПриложение1.Области.П000210013005.Значение = мПриложение1.Области.П000210013005.Значение + Объем;
			мПриложение1.Области.П000210013006.Значение = мПриложение1.Области.П000210013006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10012" Тогда

			мПриложение1.Области.П000210014005.Значение = мПриложение1.Области.П000210014005.Значение + Объем;
			мПриложение1.Области.П000210014006.Значение = мПриложение1.Области.П000210014006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10014" Тогда

			мПриложение1.Области.П000210015005.Значение = мПриложение1.Области.П000210015005.Значение + Объем;
			мПриложение1.Области.П000210015006.Значение = мПриложение1.Области.П000210015006.Значение + НалоговаяБаза;

		ИначеЕсли КодОбъекта = "10020" Тогда

			мПриложение1.Области.П000210016005.Значение = мПриложение1.Области.П000210016005.Значение + Объем;
			мПриложение1.Области.П000210016006.Значение = мПриложение1.Области.П000210016006.Значение + НалоговаяБаза;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // АвтозаполнениеТаблицыПоОбъектам()

// Заполняет многострочные блоки по кодам строк 010 и 020 поля табличного документа
// на странице "Раздел 2" основной панели формы.
//
Процедура ЗаполнитьРаздел2()
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;

	ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло14_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3);

	// Очищаем строки многострочного блока по коду строки 010
	ОчиститьМногострочныйБлок(мИдГруппы1);

	// Очищаем данные многострочных групп по коду строки 040
	ОчиститьМногострочныйБлок(мИдГруппы4);

	// Очищаем данные многострочных групп по коду строки 030
	ОчиститьМногострочныйБлок(мИдГруппы3);

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма); // Обновим все
	ОбновитьСтруктуруМногострочныхРазделов(); // Обновим все

	//// Обновим структуру многостраничных разделов формы.
	//РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Приложение1");
	//РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Приложение2");
	//РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Приложение3");

	// Строки 010 и 020 заполняются на основании данных разделов 2.1 и 2.2 декларации.
	ТаблДанныхПриложений1и3 = Новый ТаблицаЗначений;
	ТаблДанныхПриложений1и3.Колонки.Добавить("ВидТоваров",     ОписаниеТиповСтрока254);
	ТаблДанныхПриложений1и3.Колонки.Добавить("КодВидаТоваров", ОписаниеТиповСтрока3);
	ТаблДанныхПриложений1и3.Колонки.Добавить("НалоговаяБаза",  ОписаниеТиповЧисло14_3);

	ТаблДанныхПриложений2 = Новый ТаблицаЗначений;
	ТаблДанныхПриложений2.Колонки.Добавить("ВидТоваров",     ОписаниеТиповСтрока254);
	ТаблДанныхПриложений2.Колонки.Добавить("КодВидаТоваров", ОписаниеТиповСтрока3);
	ТаблДанныхПриложений2.Колонки.Добавить("НалоговаяБазаГрафа6",  ОписаниеТиповЧисло14_3);
	ТаблДанныхПриложений2.Колонки.Добавить("НалоговаяБазаГрафа7",  ОписаниеТиповЧисло14_3);

	// Собираем данные по всем листам Приложения1
	Если мСтруктураМногостраничныхРазделов.Свойство("Приложение1", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			// Получим данные по конкретному листу Раздела 2.1
			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				ВидТоваров     = Неопределено;
				КодВидаТоваров = Неопределено;
				НалоговаяБаза  = Неопределено;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000210001000", ЗначениеПоказателя) Тогда
					ВидТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000210002000", ЗначениеПоказателя) Тогда
					КодВидаТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000210006006", ЗначениеПоказателя) Тогда
					НалоговаяБаза = ЗначениеПоказателя;
				КонецЕсли;


				Если ((ВидТоваров <> Неопределено) И (КодВидаТоваров <> Неопределено) И (НалоговаяБаза <> Неопределено))
				И ((НЕ РегламентированнаяОтчетность.ПустоеЗначение(ВидТоваров)) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(КодВидаТоваров))) Тогда
					НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
					НоваяСтрока.ВидТоваров     = ВидТоваров;
					НоваяСтрока.КодВидаТоваров = КодВидаТоваров;
					НоваяСтрока.НалоговаяБаза  = НалоговаяБаза;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;


	// Собираем данные по всем листам Приложения3
	ТаблицаСтраницРаздела = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство("Приложение3", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				ВидТоваров     = Неопределено;
				КодВидаТоваров = Неопределено;
				НалоговаяБаза  = Неопределено;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000230001000", ЗначениеПоказателя) Тогда
					ВидТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000230002000", ЗначениеПоказателя) Тогда
					КодВидаТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000230014005", ЗначениеПоказателя) Тогда
					НалоговаяБаза = ЗначениеПоказателя;
				КонецЕсли;


				Если ((ВидТоваров <> Неопределено) И (КодВидаТоваров <> Неопределено) И (НалоговаяБаза <> Неопределено))
				И ((НЕ РегламентированнаяОтчетность.ПустоеЗначение(ВидТоваров)) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(КодВидаТоваров))) Тогда
					НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
					НоваяСтрока.ВидТоваров     = ВидТоваров;
					НоваяСтрока.КодВидаТоваров = КодВидаТоваров;
					НоваяСтрока.НалоговаяБаза  = НалоговаяБаза;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

// *****
	// Собираем данные по всем листам Приложения3
	ТаблицаСтраницРаздела = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство("Приложение2", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				ВидТоваров     = Неопределено;
				КодВидаТоваров = Неопределено;
				НалоговаяБазаГрафа6  = Неопределено;
				НалоговаяБазаГрафа7  = Неопределено;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000220001000", ЗначениеПоказателя) Тогда
					ВидТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000220002000", ЗначениеПоказателя) Тогда
					КодВидаТоваров = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000220006006", ЗначениеПоказателя) Тогда
					НалоговаяБазаГрафа6 = ЗначениеПоказателя;
				КонецЕсли;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000220006007", ЗначениеПоказателя) Тогда
					НалоговаяБазаГрафа7 = ЗначениеПоказателя;
				КонецЕсли;


				Если (ВидТоваров <> Неопределено) И (КодВидаТоваров <> Неопределено)
				  И (НалоговаяБазаГрафа6 <> Неопределено) И (НалоговаяБазаГрафа7 <> Неопределено) Тогда
					НоваяСтрока = ТаблДанныхПриложений2.Добавить();
					НоваяСтрока.ВидТоваров     = ВидТоваров;
					НоваяСтрока.КодВидаТоваров = КодВидаТоваров;
					НоваяСтрока.НалоговаяБазаГрафа6  = НалоговаяБазаГрафа6;
					НоваяСтрока.НалоговаяБазаГрафа7  = НалоговаяБазаГрафа7;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ТаблДанныхПриложений1и3_ = ТаблДанныхПриложений1и3.Скопировать();
	ТаблДанныхПриложений1и3_.Свернуть("КодВидаТоваров, ВидТоваров", "НалоговаяБаза");
	ТаблДанныхПриложений1и3_.Сортировать("КодВидаТоваров");

	ТаблДанныхПриложений2_ = ТаблДанныхПриложений2.Скопировать();
	ТаблДанныхПриложений2_.Свернуть("КодВидаТоваров, ВидТоваров", "НалоговаяБазаГрафа6, НалоговаяБазаГрафа7");
	ТаблДанныхПриложений2_.Сортировать("КодВидаТоваров");

	// Заполняем строки 010
	Если ТаблДанныхПриложений1и3_.Количество() > 0 Тогда

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		ЭталонноеКоличествоСтрокВГруппе = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы1, ЭталонноеКоличествоСтрокВГруппе);
		Инд = 0;

		Для Каждого СтрокаТаблицы Из ТаблДанныхПриложений1и3_ Цикл
			Инд = Инд + 1;
			НомерСтроки    = ТаблДанныхПриложений1и3_.Индекс(СтрокаТаблицы);
			ВидТоваров     = СтрокаТаблицы.ВидТоваров;
			КодВидаТоваров = СтрокаТаблицы.КодВидаТоваров;
			НалоговаяБаза  = СтрокаТаблицы.НалоговаяБаза;

			Если Инд <= ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Получить(НомерСтроки);
			ИначеЕсли Инд > ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Добавить();
			КонецЕсли;

			НоваяСтрока.П000020001001 = НомерСтроки + 1;
			НоваяСтрока.П000020001002 = ВидТоваров;
			НоваяСтрока.П000020001004 = КодВидаТоваров;
			НоваяСтрока.П000020001005 = НалоговаяБаза;

		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(мИдГруппы1, ПромТаблицаДопСтрокРаздела);

	КонецЕсли;

	// Заполняем строку 020
	Если ТаблДанныхПриложений2_.Количество() > 0 Тогда

		ЭталонноеКоличествоСтрокВГруппе = Неопределено;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы3, ЭталонноеКоличествоСтрокВГруппе);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);

		Инд = 0;
		Для Каждого СтрокаТаблицы Из ТаблДанныхПриложений2_ Цикл
			Инд = Инд + 1;
			НомерСтроки    = ТаблДанныхПриложений2_.Индекс(СтрокаТаблицы);
			ВидТоваров     = СтрокаТаблицы.ВидТоваров;
			КодВидаТоваров = СтрокаТаблицы.КодВидаТоваров;
			НалоговаяБаза  = СтрокаТаблицы.НалоговаяБазаГрафа7;

			Если Инд <= ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Получить(НомерСтроки);
			ИначеЕсли Инд > ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Добавить();
			КонецЕсли;

			НоваяСтрока.П000020003001 = НомерСтроки + 1;
			НоваяСтрока.П000020003002 = ВидТоваров;
			НоваяСтрока.П000020003004 = КодВидаТоваров;
			НоваяСтрока.П000020003005 = НалоговаяБаза;
		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(мИдГруппы3, ПромТаблицаДопСтрокРаздела);

	КонецЕсли;

	Если ТаблДанныхПриложений2_.Количество() > 0 Тогда

		ЭталонноеКоличествоСтрокВГруппе = Неопределено;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы4, ЭталонноеКоличествоСтрокВГруппе);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);

		Инд = 0;
		Для Каждого СтрокаТаблицы Из ТаблДанныхПриложений2_ Цикл
			Инд = Инд + 1;
			НомерСтроки    = ТаблДанныхПриложений2_.Индекс(СтрокаТаблицы);
			ВидТоваров     = СтрокаТаблицы.ВидТоваров;
			КодВидаТоваров = СтрокаТаблицы.КодВидаТоваров;
			НалоговаяБаза  = СтрокаТаблицы.НалоговаяБазаГрафа6;

			Если Инд <= ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Получить(НомерСтроки);
			ИначеЕсли Инд > ЭталонноеКоличествоСтрокВГруппе Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Добавить();
			КонецЕсли;

			НоваяСтрока.П000020004001 = НомерСтроки + 1;
			НоваяСтрока.П000020004002 = ВидТоваров;
			НоваяСтрока.П000020004004 = КодВидаТоваров;
			НоваяСтрока.П000020004005 = НалоговаяБаза;
		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(мИдГруппы4, ПромТаблицаДопСтрокРаздела);

	КонецЕсли;

	// Вычисляем расчетные показатели.
	Расчет("Раздел2");
	Расчет("Приложение6");
	Расчет("Приложение5");
	Расчет("Приложение4");
	Расчет("Приложение3");
	Расчет("Приложение2");
	Расчет("Приложение1");
	Расчет("Раздел2"); // Повторим раздел 2 для обновления

	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьРаздел2()

// ФорматироватьСтрокиПункта10
//
// Процедура форматирует строки п.10 в соответствии с инстукцией по заполнению
// декларации. В случае превышения вычетов над исчисленной суммой акциза в
// строках 09 вместо прочерка указывается "0".
//
Процедура ФорматироватьСтрокиПункта10()

	СтрокаФормата1 = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "; ЧН=0");
	СтрокаФормата = мСтрокаФормата; // Обычная

	// Не нужно обновлять, т.к. берем только кол-во в группе, весь расчет произведем с листа декларации
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10,  СтруктураГруппы);

	// Строки по коду 010 многострочного блока
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл
		ЧетвертаяКолонка  = мРаздел2.Области["П000020010004_" + Строка(Ном)].Значение;
		СедьмаяКолонка    = мРаздел2.Области["П000020010007_" + Строка(Ном)].Значение;
		Если (Не РегламентированнаяОтчетность.ПустоеЗначение(ЧетвертаяКолонка)) И (СедьмаяКолонка = 0) Тогда
			мРаздел2.Области["П000020010007_" + Строка(Ном)].Формат = СтрокаФормата1;
		Иначе
			мРаздел2.Области["П000020010007_" + Строка(Ном)].Формат = СтрокаФормата;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ФорматироватьСтрокиПункта10()

// УстановитьМаскиВвода
//
Процедура УстановитьМаскиВвода()
	// Установим маску ввода для ИНН
	мПриложение4.Области.П000240002000.ЭлементУправления.Маска = "9999999999";
	// Установим маску ввода для КПП
	мПриложение4.Области.П000240003000.ЭлементУправления.Маска = "999999999";

	// Установим маску ввода для ИНН
	мПриложение5.Области.П000250002000.ЭлементУправления.Маска = "9999999999";
	// Установим маску ввода для КПП
	мПриложение5.Области.П000250003000.ЭлементУправления.Маска = "999999999";

КонецПроцедуры // УстановитьМаскиВвода

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	СтруктураГруппы = Неопределено;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		// РАЗДЕЛ 2.

		// Не нужно обновлять, т.к. берем только кол-во в группе, весь расчет произведем с листа декларации
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1,  СтруктураГруппы);

		// Строки по коду 010 многострочного блока
		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020001007" + НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020001005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020001006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000020001007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020001007"+НомСтр].Значение);

		КонецЦикла;

		// Работаем по коду 040
		// Не нужно обновлять, т.к. берем только кол-во в группе, весь расчет произведем с листа декларации
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, СтруктураГруппы);

		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020003007" + НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020003005" + НомСтр].Значение
			                                                  * мРаздел2.Области["П000020003006" + НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000020003007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020003007"+НомСтр].Значение);

		КонецЦикла;

		// Работаем по коду 040
		// Не нужно обновлять, т.к. берем только кол-во в группе, весь расчет произведем с листа декларации
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4,  СтруктураГруппы);

		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020004007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020004005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020004006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000020004007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020004007"+НомСтр].Значение);

		КонецЦикла;

		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы14,  СтруктураГруппы);
		// Строки по коду 140

		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020014007" + НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020014005" + НомСтр].Значение
			                                                  * мРаздел2.Области["П000020014006" + НомСтр].Значение
			                                                                             );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000020014007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020014007" + НомСтр].Значение);

		КонецЦикла;

		// Заполняем строки 080 и 090
		АвтозаполнениеСтрок100и110Раздела2();

		ФорматироватьСтрокиПункта10();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		// Приложение1

		ВидАвтомобили = Ложь;
		ВидПодакцизногоТовара = мПриложение1.Области.П000210002000.Значение;
		Если Лев( СокрЛ(ВидПодакцизногоТовара), 1 ) = "5" Тогда
			// Раздел 2.1 заполнен по автомобилям легковым и мотоциклам
			ВидАвтомобили = Истина;
		КонецЕсли;

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы15);
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, СтруктураГруппы);

		// Строки по коду 050 многострочного блока
		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 6
			мПриложение1.Области["П000210005006" + НомСтр].Значение = мПриложение1.Области["П000210005002" + НомСтр].Значение
			                                                    * мПриложение1.Области["П000210005005" + НомСтр].Значение;

			Если Не ВидАвтомобили Тогда
				мПриложение1.Области["П000210005006" + НомСтр].Значение = мПриложение1.Области["П000210005006"+НомСтр].Значение / 100;
			КонецЕсли;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000210005006 = мПриложение1.Области["П000210005006" + НомСтр].Значение;

		КонецЦикла;

		// Строка по коду 060
		мПриложение1.Области.П000210006005.Значение = СтруктураГруппы.Итог("П000210005005");
		мПриложение1.Области.П000210006006.Значение = СтруктураГруппы.Итог("П000210005006");

		// Заполняем строки 070
		АвтозаполнениеТаблицыПоОбъектам(); // АвтозаполнениеТаблицыПоОбъектам

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		// Приложение2

		ВидАвтомобили = Ложь;
		ВидПодакцизногоТовара = мПриложение2.Области.П000220002000.Значение;
		Если Лев( СокрЛ(ВидПодакцизногоТовара), 1 ) = "5" Тогда
			// Раздел 2.1 заполнен по автомобилям легковым и мотоциклам
			ВидАвтомобили = Истина;
		КонецЕсли;

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы16);
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы16, СтруктураГруппы);

		Для Ном = 1 По СтруктураГруппы.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 6
			мПриложение2.Области["П000220005006"+НомСтр].Значение = мПриложение2.Области["П000220005002"+НомСтр].Значение
			                                                    * мПриложение2.Области["П000220005004"+НомСтр].Значение;

			Если Не ВидАвтомобили Тогда
				мПриложение2.Области["П000220005006"+НомСтр].Значение = мПриложение2.Области["П000220005006"+НомСтр].Значение / 100;
			КонецЕсли;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000220005006 = мПриложение2.Области["П000220005006" + НомСтр].Значение;


			// Расчет показателя по графе 7
			мПриложение2.Области["П000220005007"+НомСтр].Значение = мПриложение2.Области["П000220005002"+НомСтр].Значение
			                                                    * мПриложение2.Области["П000220005005"+НомСтр].Значение;

			Если Не ВидАвтомобили Тогда
				мПриложение2.Области["П000220005007"+НомСтр].Значение = мПриложение2.Области["П000220005007"+НомСтр].Значение / 100;
			КонецЕсли;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы[Ном - 1];
			ТекСтрокаТаблицы.П000220005007 = мПриложение2.Области["П000220005007"+НомСтр].Значение;

		КонецЦикла;

		// Строка 060
		мПриложение2.Области.П000220006004.Значение = СтруктураГруппы.Итог("П000220005004");
		мПриложение2.Области.П000220006005.Значение = СтруктураГруппы.Итог("П000220005005");
		мПриложение2.Области.П000220006006.Значение = СтруктураГруппы.Итог("П000220005006");
		мПриложение2.Области.П000220006007.Значение = СтруктураГруппы.Итог("П000220005007");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		// РАЗДЕЛ 2.3

		// Строка по коду 060
		мПриложение3.Области.П000230014005.Значение = мПриложение3.Области.П000230005005.Значение + мПриложение3.Области.П000230006005.Значение + мПриложение3.Области.П000230007005.Значение + мПриложение3.Области.П000230008005.Значение
		              + мПриложение3.Области.П000230009005.Значение + мПриложение3.Области.П000230010005.Значение + мПриложение3.Области.П000230011005.Значение + мПриложение3.Области.П000230012005.Значение
					  + мПриложение3.Области.П000230013005.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда

		// Расчет раздела не предусмотрен

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда

		// Расчет раздела не предусмотрен

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		Расчет("Приложение3");
		Расчет("Приложение2");
		Расчет("Приложение1");
		Расчет("Раздел2");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мРежимПечати = Ложь;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;
	мАвтоВыборКодов = Ложь;
	мДокументВосстановлен = Ложь;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;

	мРаздел11     = ЭлементыФормы.ПолеТабличногоДокументаРаздел11;
	мРаздел12     = ЭлементыФормы.ПолеТабличногоДокументаРаздел12;

	мРаздел2     = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;

	мПриложение1 = ЭлементыФормы.ПолеТабличногоДокументаПриложение1;
	мПриложение2 = ЭлементыФормы.ПолеТабличногоДокументаПриложение2;
	мПриложение3 = ЭлементыФормы.ПолеТабличногоДокументаПриложение3;
	мПриложение4 = ЭлементыФормы.ПолеТабличногоДокументаПриложение4;
	мПриложение5 = ЭлементыФормы.ПолеТабличногоДокументаПриложение5;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если НЕ БезОткрытияФормы Тогда

		ЗагрузитьПоказателиИзМакета("КБК2005Раздел1");
		ЗагрузитьПоказателиИзМакета("КБК2006Раздел1");
		ЗагрузитьПоказателиИзМакета("АкцизыПодакцизныеТоварыКодыТоваров");
		ЗагрузитьПоказателиИзМакета("АкцизыПодакцизныеТоварыКодыОбъектов");
		ЗагрузитьПоказателиИзМакета("ЕдиницыИзмерения");
		УстановитьМаскиВвода();

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	мСтараяВерсияФормы = мВерсияФормы;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			УстановитьФорматВывода();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			мТитульный     .Области["ВидДок"].Значение = "1";

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел11" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога1_", 15, мСуммаНалога_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога2_", 15, мСуммаНалога_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога15Число1_", 15, мСуммаНалога40_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога15Число2_", 15, мСуммаНалога40_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалогаКУменьшению1_", 15, мСуммаНалога50_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалогаКУменьшению2_", 15, мСуммаНалога50_2, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел12" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога1_", 15, мСуммаНалогаРаздел12, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалогаКУменьшению1_", 15, мСуммаНалога50Раздел12, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КБК_1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КБКРаздел12";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 14;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Работаем как со структурой
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000210001000"; // Вид подакцизного товара
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела23
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Работаем как со структурой
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000220001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложения 3
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Работаем как со структурой
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000230001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложения 4
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000240001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложения 6
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Работаем как со структурой
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000250001000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц


	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы1;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;
	// НовСтр.ДельтаСтрокаКонкатенации = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока1";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 8; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 39; // Строчка по У

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы2;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 0; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока1";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы3;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока2";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы4;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока2";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы5;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока2";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы6;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока3";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы7;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока3";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы8;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока3";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы9;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока3";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы10;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока4";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы11;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока4";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы12;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока5";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы13;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока5";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;


	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы14;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 39;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока5";

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 41;

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаПриложение1";
	НовСтр.мИдГруппы                = мИдГруппы15;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 44;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 40;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока1";

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаПриложение2";
	НовСтр.мИдГруппы                = мИдГруппы16;
	НовСтр.РазмерПоОсиХ             = 38;
	НовСтр.РазмерПоОсиУ             = 45;

	НовСтр.НомерГраницы             = 8; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 40;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока1";

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаПриложение4";
	НовСтр.мИдГруппы                = мИдГруппы17;
	НовСтр.РазмерПоОсиХ             = 39;
	НовСтр.РазмерПоОсиУ             = 45;

	НовСтр.НомерГраницы             = 17; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 40;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока2";

	НовСтр.НомерГраницыСтр          = 2; // Ширина
	НовСтр.ОсновнаяЧастьУСтр        = 42;

	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаПриложение5";
	НовСтр.мИдГруппы                = мИдГруппы18;
	НовСтр.РазмерПоОсиХ             = 39;
	НовСтр.РазмерПоОсиУ             = 45;

	НовСтр.НомерГраницы             = 17; // Используется для объединения КНД ячейки, если 0, то не объединяется
	НовСтр.ОсновнаяЧастьУ           = 40;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока2";

	НовСтр.НомерГраницыСтр          = 2; // Ширина
	НовСтр.ОсновнаяЧастьУСтр        = 42;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеТабличногоДокументаПриложение4Выбор
// Событие "Выбор"
//
Процедура ПолеТабличногоДокументаПриложение4Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если (Лев(ИмяЯчейки, 13) = "П000240006001") Или (Лев(ИмяЯчейки, 13) = "П000240006002") Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		// Получим номер группы
		НомерГруппы = Сред(ИмяЯчейки, 9, 2);

		Если Лев(ИмяЯчейки, 13) = "П0002400" + НомерГруппы + "001" Тогда
			ТекущееПоисковоеЗначение = мПриложение4.Области["П0002400" + НомерГруппы + "001_" + НомерСтроки].Значение;
			Примечание = "Укажите вид подакцизного товара";
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли Лев(ИмяЯчейки, 13) = "П0002400" + НомерГруппы + "002" Тогда
			ТекущееПоисковоеЗначение = мПриложение4.Области["П0002400" + НомерГруппы + "002_" + НомерСтроки].Значение;
			Примечание = "Укажите код вида под акцизного товара";
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		// Признак отказа от выбора
		Если мАвтоВыборКодов Тогда
			Если ВвестиСтроку(ТекущееПоисковоеЗначение, Примечание) Тогда
				Область.Значение = ТекущееПоисковоеЗначение;
				Модифицированность = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденнаяСтрока = мАкцизыПодакцизныеТоварыКодыТоваров.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мПриложение4.Области["П0002400" + НомерГруппы + "001" + "_" + НомерСтроки].Значение = Назв; // текст
		мПриложение4.Области["П0002400" + НомерГруппы + "002" + "_" + НомерСтроки].Значение = Код;  // код

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение4Выбор

// ПолеТабличногоДокументаПриложение5Выбор
// Событие "Выбор"
//
Процедура ПолеТабличногоДокументаПриложение5Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если (Лев(ИмяЯчейки, 13) = "П000250006001") Или (Лев(ИмяЯчейки, 13) = "П000250006002") Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		// Получим номер группы
		НомерГруппы = Сред(ИмяЯчейки, 9, 2);

		Если Лев(ИмяЯчейки, 13) = "П0002500" + НомерГруппы + "001" Тогда
			ТекущееПоисковоеЗначение = мПриложение5.Области["П0002500" + НомерГруппы + "001_" + НомерСтроки].Значение;
			Примечание = "Укажите вид подакцизного товара";
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли Лев(ИмяЯчейки, 13) = "П0002500" + НомерГруппы + "002" Тогда
			ТекущееПоисковоеЗначение = мПриложение5.Области["П0002500" + НомерГруппы + "002_" + НомерСтроки].Значение;
			Примечание = "Укажите код вида под акцизного товара";
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		// Признак отказа от выбора
		Если мАвтоВыборКодов Тогда
			Если ВвестиСтроку(ТекущееПоисковоеЗначение, Примечание) Тогда
				Область.Значение = ТекущееПоисковоеЗначение;
				Модифицированность = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденнаяСтрока = мАкцизыПодакцизныеТоварыКодыТоваров.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мПриложение5.Области["П0002500" + НомерГруппы + "001" + "_" + НомерСтроки].Значение = Назв; // текст
		мПриложение5.Области["П0002500" + НомерГруппы + "002" + "_" + НомерСтроки].Значение = Код;  // код

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение4Выбор

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "Выбор" поля табличного документа на странице "Раздел 1.1"
// основной панели формы. Для ячеек, содержащих сумму акциза к уплате (строки по коду 030),
// выдает стандартный диалог для ввода суммы акциза.
//
Процедура ПолеТабличногоДокументаРаздел11Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Лев(Область.Имя, 8) = "КодОКАТО" Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 9, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КодОКАТО_" + НомерСтроки);
		Если ВвестиСтроку(НачЗначение, "Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("КодОКАТО_" + НомерСтроки, НачЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел11", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 11, НачЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Лев(Область.Имя, 11) = "СуммаНалога" Тогда
		СтандартнаяОбработка = Ложь;

		ИмяТекОбласти = Лев(Область.Имя, 12);

		Если ИмяТекОбласти = "СуммаНалога1" Тогда

			СуммаНалога = мСуммаНалога_1;

		ИначеЕсли ИмяТекОбласти = "СуммаНалога2" Тогда

			СуммаНалога = мСуммаНалога_2;

		КонецЕсли;

		Если Найти(Область.Имя, "СуммаНалога1_") > 0 Тогда
			СуммаНалога = мСуммаНалога_1;
		ИначеЕсли Найти(Область.Имя, "СуммаНалога2_") > 0 Тогда
			СуммаНалога = мСуммаНалога_2;
		ИначеЕсли Найти(Область.Имя, "СуммаНалога15Число1_") > 0 Тогда
			СуммаНалога = мСуммаНалога40_1;
		ИначеЕсли Найти(Область.Имя, "СуммаНалога15Число2_") > 0 Тогда
			СуммаНалога = мСуммаНалога40_2;
		ИначеЕсли Найти(Область.Имя, "СуммаНалогаКУменьшению1_") > 0 Тогда
			СуммаНалога = мСуммаНалога50_1;
		ИначеЕсли Найти(Область.Имя, "СуммаНалогаКУменьшению2_") > 0 Тогда
			СуммаНалога = мСуммаНалога50_2;

		КонецЕсли;

		// выдаем стандартный диалог для ввода суммы акциза
		Если ВвестиЧисло(СуммаНалога, "Введите сумму акциза", 14, 2) Тогда

			Если Найти(Область.Имя, "СуммаНалога1_") > 0 Тогда
				мСуммаНалога_1 = СуммаНалога;
				НазваниеПер = "СуммаНалога_1";
			ИначеЕсли Найти(Область.Имя, "СуммаНалога2_") > 0 Тогда
				мСуммаНалога_2 = СуммаНалога;
				НазваниеПер = "СуммаНалога_2";
			ИначеЕсли Найти(Область.Имя, "СуммаНалога15Число1_") > 0 Тогда
				мСуммаНалога40_1 = СуммаНалога;
				НазваниеПер = "СуммаНалога40_1";
			ИначеЕсли Найти(Область.Имя, "СуммаНалога15Число2_") > 0 Тогда
				мСуммаНалога40_2 = СуммаНалога;
				НазваниеПер = "СуммаНалога40_2";
			ИначеЕсли Найти(Область.Имя, "СуммаНалогаКУменьшению1_") > 0 Тогда
				мСуммаНалога50_1 = СуммаНалога;
				НазваниеПер = "СуммаНалога50_1";
			ИначеЕсли Найти(Область.Имя, "СуммаНалогаКУменьшению2_") > 0 Тогда
				мСуммаНалога50_2 = СуммаНалога;
				НазваниеПер = "СуммаНалога50_2";
			КонецЕсли;

			// заполняем введенную сумму налога в ячейках.
			//ЗаполнитьСуммы_в_Квадратах();
			Если ОбновитьПеременныеМодуля(НазваниеПер, СуммаНалога) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел11", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 15, СуммаНалога, Истина);
				Модифицированность = Истина;
			КонецЕсли;

		КонецЕсли;

// *********************
	ИначеЕсли Найти(Область.Имя,"КБК") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		НомерСтроки = Сред(Область.Имя, 4, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КБК_" + НомерСтроки);

		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2005 Тогда
				СписокКБК = мКБК2005Раздел11;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				СписокКБК = мКБК2006Раздел11;
			КонецЕсли;

			ПоисковаяСтрока = СписокКБК.Найти(НачЗначение, "Код");
			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		Иначе

			Если Год(ДатаПодписи) <= 2004 Тогда
				КолЗнаков = 7;
			Иначе
				КолЗнаков = 20;
			КонецЕсли;
			
			Если НЕ ВвестиСтроку(НачЗначение, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = НачЗначение;
			КонецЕсли;

		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			Если ОбновитьПеременныеМодуля("КБК_" + НомерСтроки, Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел11",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 20, Значение);
				Модифицированность = Истина;
			КонецЕсли;

		Конецесли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор()

// Процедура - обработчик события "Выбор" поля табличного документа на странице "Раздел 1.2"
// основной панели формы. Для ячеек, содержащих сумму акциза к уплате (строки по коду 030),
// выдает стандартный диалог для ввода суммы акциза.
//
Процедура ПолеТабличногоДокументаРаздел12Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Лев(Область.Имя, 8) = "КодОКАТО" Тогда
		СтандартнаяОбработка = Ложь;
		//НомерСтроки = Сред(Область.Имя, 9, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КодОКАТОРаздел12");
		Если ВвестиСтроку(НачЗначение, "Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("КодОКАТОРаздел12", НачЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел12", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 11, НачЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Лев(Область.Имя, 11) = "СуммаНалога" Тогда
		СтандартнаяОбработка = Ложь;

		ИмяТекОбласти = Лев(Область.Имя, 12);

		Если ИмяТекОбласти = "СуммаНалога1" Тогда

			СуммаНалога = мСуммаНалогаРаздел12;
			ДляОбновления = "СуммаНалогаРаздел12";

		ИначеЕсли Найти(Область.Имя, "СуммаНалогаКУменьшению1_") > 0 Тогда

			СуммаНалога = мСуммаНалога50Раздел12;
			ДляОбновления = "СуммаНалога50Раздел12";

		КонецЕсли;

		// выдаем стандартный диалог для ввода суммы акциза
		Если ВвестиЧисло(СуммаНалога, "Введите сумму акциза", 14, 2) Тогда

			// заполняем введенную сумму налога в ячейках.
			Если ОбновитьПеременныеМодуля(ДляОбновления, СуммаНалога) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел12", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 15, СуммаНалога, Истина);
				Модифицированность = Истина;
			КонецЕсли;

		КонецЕсли;

// *********************
	ИначеЕсли Найти(Область.Имя,"КБК") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		НомерСтроки = Сред(Область.Имя, 4, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КБКРаздел12");

		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2005 Тогда
				СписокКБК = мКБК2005Раздел11;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				СписокКБК = мКБК2006Раздел11;
			КонецЕсли;

			ПоисковаяСтрока = СписокКБК.Найти(НачЗначение, "Код");
			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		Иначе

			КолЗнаков = 20;

			Если НЕ ВвестиСтроку(НачЗначение, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = НачЗначение;
			КонецЕсли;

		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			Если ОбновитьПеременныеМодуля("КБКРаздел12", Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел12",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 20, Значение);
				Модифицированность = Истина;
			КонецЕсли;

		Конецесли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.3"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаПриложение3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.4"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаПриложение4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаПриложение4ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.5"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаПриложение5ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаПриложение5ПриАктивизацииОбласти()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела11Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу();
	
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела12Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу();
	
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную страницу
// на странице "Раздел 1" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела11Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма);
	
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную страницу
// на странице "Раздел 1" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела12Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма);

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела11Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела12Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела11Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела12Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела11Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела12Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 3.3" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 3.3" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаПриложения1Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложения1Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаПриложения1Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаПриложения1Нажатие()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, ИмяЛиста = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели    = ИмяЛиста;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.1"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуПриложения1Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение1");
	ВставитьДополнительнуюСтраницу("Приложение1");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложения1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.1"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуПриложения1Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение1");

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложения1Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.1"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуПриложения1Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложения1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.1" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиПриложение1Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.1" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиПриложение1Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение1Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаПриложения2Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложения2Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаПриложения2Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаПриложения2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуПриложения2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение2");
	ВставитьДополнительнуюСтраницу("Приложение2");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложения2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.2"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуПриложения2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение2");

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложения2Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуПриложения2Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложения2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.2" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиПриложение2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.2" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиПриложение2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	Расчет("Приложение2");

КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение2Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаПриложения3Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложения3Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаПриложения3Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаПриложения3Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.4" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиПриложение4Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.4" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиПриложение4Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуПриложения3Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение3");
	ВставитьДополнительнуюСтраницу("Приложение3");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложения3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.3"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуПриложения3Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение3");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение3");

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложения3Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуПриложения3Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложения3Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаПриложение4Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение4Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаПриложение5Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение6Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаПриложение4Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаПриложение4Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаПриложение5Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаПриложение6Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуПриложения4Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение4");
	ВставитьДополнительнуюСтраницу("Приложение4");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложения4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуПриложения5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение5");
	ВставитьДополнительнуюСтраницу("Приложение5");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложения6Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 4"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуПриложения4Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение4");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение4");

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложения6Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 4"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуПриложения5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение5");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение5");

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложения6Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 4" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиПриложение5Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение6Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 4" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиПриложение5Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение6Нажатие()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 010 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2ПриИзменении(Элемент)

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки010ПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел11";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел12";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Приложение 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Приложение 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Приложение 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Приложение 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Приложение 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// загружает данные из Списков
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2006Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005Раздел1" Тогда
					НовСтрока = мКБК2005Раздел11.Добавить();
				ИначеЕсли РазделВМакете = "КБК2006Раздел1" Тогда
					НовСтрока = мКБК2006Раздел11.Добавить();
				ИначеЕсли РазделВМакете = "АкцизыПодакцизныеТоварыКодыТоваров" Тогда
					НовСтрока = мАкцизыПодакцизныеТоварыКодыТоваров.Добавить();
				ИначеЕсли РазделВМакете = "АкцизыПодакцизныеТоварыКодыОбъектов" Тогда
					НовСтрока = мАкцизыПодакцизныеТоварыКодыОбъектов.Добавить();
				ИначеЕсли РазделВМакете = "ЕдиницыИзмерения" Тогда
					НовСтрока = мЕдиницыИзмерения.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// ПолеТабличногоДокументаРаздел2Выбор
// Событие "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если ((Лев(ИмяЯчейки, 13) = "П000020001002") Или (Лев(ИмяЯчейки, 13) = "П000020001004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020002002") Или (Лев(ИмяЯчейки, 13) = "П000020002004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020003002") Или (Лев(ИмяЯчейки, 13) = "П000020003004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020004002") Или (Лев(ИмяЯчейки, 13) = "П000020004004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020005002") Или (Лев(ИмяЯчейки, 13) = "П000020005004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020006002") Или (Лев(ИмяЯчейки, 13) = "П000020006004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020007002") Или (Лев(ИмяЯчейки, 13) = "П000020007004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020008002") Или (Лев(ИмяЯчейки, 13) = "П000020008004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020009002") Или (Лев(ИмяЯчейки, 13) = "П000020009004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020012002") Или (Лев(ИмяЯчейки, 13) = "П000020012004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020013002") Или (Лев(ИмяЯчейки, 13) = "П000020013004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020014002") Или (Лев(ИмяЯчейки, 13) = "П000020014004"))
	Или
	(
	((Лев(ИмяЯчейки, 13)  = "П000020010002") Или (Лев(ИмяЯчейки, 13) = "П000020010004"))
	И (ФлажокОтклАвтоРасчет)
	)
	Или
	(
	((Лев(ИмяЯчейки, 13)  = "П000020011002") Или (Лев(ИмяЯчейки, 13) = "П000020011004"))
	И (ФлажокОтклАвтоРасчет)
	)		Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		// Получим номер группы
		НомерГруппы = Сред(ИмяЯчейки, 9, 2);

		Если Лев(ИмяЯчейки, 13) = "П0000200" + НомерГруппы + "002" Тогда
			ТекущееПоисковоеЗначение = мРаздел2.Области["П0000200" + НомерГруппы + "002_" + НомерСтроки].Значение;
			Примечание = "Укажите вид подакцизного товара";
			ИмяКолонкиДляПоиска = "Название";
			ИначеЕсли Лев(ИмяЯчейки, 13) = "П0000200" + НомерГруппы + "004" Тогда
			ТекущееПоисковоеЗначение = мРаздел2.Области["П0000200" + НомерГруппы + "004_" + НомерСтроки].Значение;
			Примечание = "Укажите код вида под акцизного товара";
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		// Признак отказа от выбора
		Если мАвтоВыборКодов Тогда
			Если ВвестиСтроку(ТекущееПоисковоеЗначение, Примечание) Тогда
				Область.Значение = ТекущееПоисковоеЗначение;
				Модифицированность = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденнаяСтрока = мАкцизыПодакцизныеТоварыКодыТоваров.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыТоваров.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2.Области["П0000200" + НомерГруппы + "002" + "_" + НомерСтроки].Значение = Назв; // текст
		мРаздел2.Области["П0000200" + НомерГруппы + "004" + "_" + НомерСтроки].Значение = Код;  // код

		Модифицированность = Истина;
		Расчет("Раздел2");

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаПриложение1Выбор
// Обработчик события "Выбор" Раздела 2_1
//
Процедура ПолеТабличногоДокументаПриложение1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если (ИмяЯчейки = "П000210001000")
	Или  (ИмяЯчейки = "П000210002000")
	Или  (ИмяЯчейки = "П000210003000")
	Или  (ИмяЯчейки = "П000210004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000210001000") Или (ИмяЯчейки = "П000210003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000210002000") Или (ИмяЯчейки = "П000210004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000210001000") Или (ИмяЯчейки = "П000210002000") Тогда
			ТЗДляВыбора = мАкцизыПодакцизныеТоварыКодыТоваров;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000210003000") Или (ИмяЯчейки = "П000210004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мПриложение1.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мПриложение1.Области["П000210001000"].Значение = Назв; // текст
			мПриложение1.Области["П000210002000"].Значение = Код;  // код
			Модифицированность = Истина;

		ИначеЕсли НомерГруппы = 2 Тогда
			мПриложение1.Области["П000210003000"].Значение = Назв; // текст
			мПриложение1.Области["П000210004000"].Значение = Код;  // код
			Модифицированность = Истина;

		КонецЕсли;

		// Запустим расчет
		РассчитатьПриложение1();

	ИначеЕсли Лев(ИмяЯчейки, 13) = "П000210005004" Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		ТекущееПоисковоеЗначение = мПриложение1.Области[Область.Имя].Значение;

		НайденнаяСтрока = мАкцизыПодакцизныеТоварыКодыОбъектов.Найти(ТекущееПоисковоеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыОбъектов.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мАкцизыПодакцизныеТоварыКодыОбъектов.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мПриложение1.Области["П000210005004_" + НомерСтроки].Значение = Код; // код

		// Запустим расчет
		РассчитатьПриложение1();

	КонецЕсли;
	

КонецПроцедуры // ПолеТабличногоДокументаПриложение1Выбор

Процедура ПолеТабличногоДокументаПриложение2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если (ИмяЯчейки = "П000220001000")
	Или  (ИмяЯчейки = "П000220002000")
	Или  (ИмяЯчейки = "П000220003000")
	Или  (ИмяЯчейки = "П000220004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000220001000") Или (ИмяЯчейки = "П000220003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000220002000") Или (ИмяЯчейки = "П000220004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000220001000") Или (ИмяЯчейки = "П000220002000") Тогда
			ТЗДляВыбора = мАкцизыПодакцизныеТоварыКодыТоваров;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000220003000") Или (ИмяЯчейки = "П000220004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мПриложение2.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мПриложение2.Области["П000220001000"].Значение = Назв; // текст
			мПриложение2.Области["П000220002000"].Значение = Код;  // код
			Модифицированность = Истина;

		ИначеЕсли НомерГруппы = 2 Тогда
			мПриложение2.Области["П000220003000"].Значение = Назв; // текст
			мПриложение2.Области["П000220004000"].Значение = Код;  // код
			Модифицированность = Истина;

		КонецЕсли;

		РассчитатьПриложение2();

	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложение3Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ИмяЯчейки = Область.Имя;

	Если (ИмяЯчейки = "П000230001000")
	Или  (ИмяЯчейки = "П000230002000")
	Или  (ИмяЯчейки = "П000230003000")
	Или  (ИмяЯчейки = "П000230004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000230002000") Или (ИмяЯчейки = "П000230004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230002000") Тогда
			ТЗДляВыбора = мАкцизыПодакцизныеТоварыКодыТоваров;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000230003000") Или (ИмяЯчейки = "П000230004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мПриложение3.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мПриложение3.Области["П000230001000"].Значение = Назв; // текст
			мПриложение3.Области["П000230002000"].Значение = Код;  // код
			Модифицированность = Истина;

		ИначеЕсли НомерГруппы = 2 Тогда
			мПриложение3.Области["П000230003000"].Значение = Назв; // текст
			мПриложение3.Области["П000230004000"].Значение = Код;  // код
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// ПолеТабличногоДокументаТитульныйВыбор
// Обработчик события "Выбор" для титульного листа декларации
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Область.Имя = "ТипОрг1" Тогда

		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;

	ИначеЕсли Область.Имя = "ТипОрг2" Тогда

		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;

	ИначеЕсли Область.Имя = "ТипОрг3" Тогда

		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		Модифицированность = Истина;

	ИначеЕсли Область.Имя = "ТипОрг4" Тогда

		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	//определение источников данных для проверки
	Если БратьИзформы Тогда
	     Орг = Организация;
	Иначе
		Если мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = мСохраненныйДок.Организация;
	КонецЕсли;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	
	Если ПустаяСтрока(ПоказателиТитульный.ТипОрг1) И ПустаяСтрока(ПоказателиТитульный.ТипОрг2) И 
		ПустаяСтрока(ПоказателиТитульный.ТипОрг3) И ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указано место представляется отчета!", "Титульный", "ТипОрг1");  
		КонецЕсли;
		СтатусПроверки = 1;
		
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;

	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе//КатегорияНП = 2
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20)));
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = Число(ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	Если мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда	
		ПризнОтчетногоПериода = 1; // представляется ежемесячно
	Иначе
		ПризнОтчетногоПериода = 3; // представляется ежеквартально
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг1) Тогда
		ДокПредст = 210;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредст = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредст = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредст = 331;
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);//!!!
		//Текст.ДобавитьСтроку("КППОП:" + ОргКПП);
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ПоказателиТитульный.ОГРН));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ОГРНИП:"  + СокрЛП(ПоказателиТитульный.ОГРНИП));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00005"); 
	Текст.ДобавитьСтроку("ПериодВерОтч:17.02.2006,11.01.2007");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредст);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы (только для обязательных разделов)
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
 		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	Перем Раздел11Пуст;
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Если ИмяРаздела = "Раздел11" Тогда
				Раздел11Пуст = Истина;
			КонецЕсли;
			Если ИмяРаздела = "Раздел12" И Раздел11Пуст = Истина Тогда
				СообщитьВТС("Один из двух разделов - ""Раздел 1.1"" или ""Раздел 1.2"" - должны быть заполнены!", "Раздел11", Неопределено);
				СтатусПроверки = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	//временно подменим
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	
	//выводим сведения служебной части
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Орг, , , , мСохраненныйДок.КодИМНС)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим сведения об отправителе
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Орг, ПоказателиТитульный.ОргНазв, , ПоказателиТитульный.ОргБухгалтер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;

		КонецЦикла;

	КонецЦикла;
	
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Модифицированность = Истина;

	Если ИмяТекущейСтраницыПанели <> "Титульный" Тогда

		// Всегда вне зависимости от включенности авторасчета, будем ставим
		// формат показателей как положено в инструкции
		ФорматироватьСтрокиПункта10();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// КнопкаПерейтиНаСтраницуПриложения4Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложения4Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложения6Нажатие

// КнопкаПерейтиНаСтраницуПриложения6Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложения5Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложения6Нажатие

// ПолеТабличногоДокументаПриложение1ПриИзменении
//
Процедура ПолеТабличногоДокументаПриложение1ПриИзменении(Элемент)

	РассчитатьПриложение1();

КонецПроцедуры // ПолеТабличногоДокументаПриложение1ПриИзменении

// РассчитатьПриложение1
//
Процедура РассчитатьПриложение1()

	Модифицированность = Истина;
	Расчет("Приложение1");

КонецПроцедуры // РассчитатьПриложение1

// РассчитатьПриложение2
//
Процедура РассчитатьПриложение2()

	Модифицированность = Истина;
	Расчет("Приложение2");

КонецПроцедуры // РассчитатьПриложение2

// ПолеТабличногоДокументаПриложение2ПриИзменении
//
Процедура ПолеТабличногоДокументаПриложение2ПриИзменении(Элемент)

	РассчитатьПриложение2();

КонецПроцедуры // ПолеТабличногоДокументаПриложение2ПриИзменении

// ПолеТабличногоДокументаПриложение3ПриИзменении
//
Процедура ПолеТабличногоДокументаПриложение3ПриИзменении(Элемент)

	Модифицированность = Истина;
	Расчет("Приложение3");

КонецПроцедуры // ПолеТабличногоДокументаПриложение3ПриИзменении

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьРаздел2();
	
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2006Кв1";

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мКБК2005Раздел11 = Новый ТаблицаЗначений;
мКБК2005Раздел11.Колонки.Добавить("Код",,, 18);
мКБК2005Раздел11.Колонки.Добавить("Название",,, 50);

мКБК2006Раздел11 = Новый ТаблицаЗначений;
мКБК2006Раздел11.Колонки.Добавить("Код",,, 18);
мКБК2006Раздел11.Колонки.Добавить("Название",,, 50);

мАкцизыПодакцизныеТоварыКодыТоваров = Новый ТаблицаЗначений;
мАкцизыПодакцизныеТоварыКодыТоваров.Колонки.Добавить("Код",,, 5);
мАкцизыПодакцизныеТоварыКодыТоваров.Колонки.Добавить("Название",,, 65);

мАкцизыПодакцизныеТоварыКодыОбъектов = Новый ТаблицаЗначений;
мАкцизыПодакцизныеТоварыКодыОбъектов.Колонки.Добавить("Код",,, 7);
мАкцизыПодакцизныеТоварыКодыОбъектов.Колонки.Добавить("Название",,, 65);

мЕдиницыИзмерения = Новый ТаблицаЗначений;
мЕдиницыИзмерения.Колонки.Добавить("Код",,,5);
мЕдиницыИзмерения.Колонки.Добавить("Название",,, 65);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока4   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока5   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
ОписаниеТиповСтрока9   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока12  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

ОписаниеТиповЧисло5_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2); // Исправлено как в 7.7

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);
ОписаниеТиповЧисло14_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3); // Исправлено как в 7.7

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000200010"; // Первая группа раздела 2

мИдГруппы2  = "П0000200020"; // Вторая группа раздела 2

мИдГруппы3  = "П0000200030"; // Третья группа раздела 2

мИдГруппы4  = "П0000200040"; // Четвертая группа раздела 2

мИдГруппы5  = "П0000200050"; // Пятая группа раздела 2

мИдГруппы6  = "П0000200060"; // Шестая группа раздела 2

мИдГруппы7  = "П0000200070"; // Седьмая группа раздела 2

мИдГруппы8  = "П0000200080"; // Восьмая группа раздела 2

мИдГруппы9  = "П0000200090"; // Девятая группа раздела 2

мИдГруппы10 = "П0000200100"; // Десятая группа раздела 2

мИдГруппы11 = "П0000200110"; // Одиннадцатая

мИдГруппы12 = "П0000200120"; // Двенадцатая

мИдГруппы13 = "П0000200130"; // Тринадцатая

мИдГруппы14 = "П0000200140"; // 14-я

// ********************
мИдГруппы15 = "П0002100050"; // Первая и единственная группа Приложения 1

мИдГруппы16 = "П0002200050"; // Первая и единственная группа Приложения 2

мИдГруппы17 = "П0002400060"; // Первая и единственная группа Приложения 4

мИдГруппы18 = "П0002500060"; // Первая и единственная группа Приложения 5

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрок10 = 10;

// структура строк многострочного № 1, раздела на странице раздела 2
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000020001001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы1.Колонки.Добавить("П000020001002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы1.Колонки.Добавить("П000020001004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы1.Колонки.Добавить("П000020001005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы1.Колонки.Добавить("П000020001006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы1.Колонки.Добавить("П000020001007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000020002001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы2.Колонки.Добавить("П000020002002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы2.Колонки.Добавить("П000020002004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы2.Колонки.Добавить("П000020002005", ОписаниеТиповЧисло14_3); // Налоговая база
//СтруктураГруппы2.Колонки.Добавить("П000020002006", ОписаниеТиповЧисло5_2);  // Ставка
//СтруктураГруппы2.Колонки.Добавить("П000020002007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000020003001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы3.Колонки.Добавить("П000020003002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы3.Колонки.Добавить("П000020003004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы3.Колонки.Добавить("П000020003005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы3.Колонки.Добавить("П000020003006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы3.Колонки.Добавить("П000020003007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000020004001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы4.Колонки.Добавить("П000020004002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы4.Колонки.Добавить("П000020004004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы4.Колонки.Добавить("П000020004005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы4.Колонки.Добавить("П000020004006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы4.Колонки.Добавить("П000020004007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000020005001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы5.Колонки.Добавить("П000020005002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы5.Колонки.Добавить("П000020005004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
//СтруктураГруппы5.Колонки.Добавить("П000020005005", ОписаниеТиповЧисло14_3); // Налоговая база
//СтруктураГруппы5.Колонки.Добавить("П000020005006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы5.Колонки.Добавить("П000020005007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000020006001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы6.Колонки.Добавить("П000020006002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы6.Колонки.Добавить("П000020006004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
//СтруктураГруппы6.Колонки.Добавить("П000020006005", ОписаниеТиповЧисло15_3); // Налоговая база
//СтруктураГруппы6.Колонки.Добавить("П000020006006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы6.Колонки.Добавить("П000020006007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000020007001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы7.Колонки.Добавить("П000020007002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы7.Колонки.Добавить("П000020007004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
//СтруктураГруппы7.Колонки.Добавить("П000020007005", ОписаниеТиповЧисло15_3); // Налоговая база
//СтруктураГруппы7.Колонки.Добавить("П000020007006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы7.Колонки.Добавить("П000020007007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы8 = Новый ТаблицаЗначений;
СтруктураГруппы8.Колонки.Добавить("П000020008001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы8.Колонки.Добавить("П000020008002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы8.Колонки.Добавить("П000020008004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
//СтруктураГруппы8.Колонки.Добавить("П000020008005", ОписаниеТиповЧисло15_3); // Налоговая база
//СтруктураГруппы8.Колонки.Добавить("П000020008006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы8.Колонки.Добавить("П000020008007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы9 = Новый ТаблицаЗначений;
СтруктураГруппы9.Колонки.Добавить("П000020009001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы9.Колонки.Добавить("П000020009002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы9.Колонки.Добавить("П000020009004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы9.Колонки.Добавить("П000020009007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("П000020010001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы10.Колонки.Добавить("П000020010002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы10.Колонки.Добавить("П000020010004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы10.Колонки.Добавить("П000020010007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("П000020011001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы11.Колонки.Добавить("П000020011002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы11.Колонки.Добавить("П000020011004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы11.Колонки.Добавить("П000020011007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000020012001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы12.Колонки.Добавить("П000020012002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы12.Колонки.Добавить("П000020012004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы12.Колонки.Добавить("П000020012005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы12.Колонки.Добавить("П000020012007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы13 = Новый ТаблицаЗначений;
СтруктураГруппы13.Колонки.Добавить("П000020013001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы13.Колонки.Добавить("П000020013002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы13.Колонки.Добавить("П000020013004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы13.Колонки.Добавить("П000020013005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы13.Колонки.Добавить("П000020013007", мОписаниеТиповЧислоЕ); // Сумма

СтруктураГруппы14 = Новый ТаблицаЗначений;
СтруктураГруппы14.Колонки.Добавить("П000020014001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы14.Колонки.Добавить("П000020014002", ОписаниеТиповСтрока254); // Наименование подакцизного товара
СтруктураГруппы14.Колонки.Добавить("П000020014004", ОписаниеТиповСтрока3);   // КодВида подакцизного товара
СтруктураГруппы14.Колонки.Добавить("П000020014005", ОписаниеТиповЧисло14_3); // Налоговая база
СтруктураГруппы14.Колонки.Добавить("П000020014006", ОписаниеТиповЧисло5_2);  // Ставка
СтруктураГруппы14.Колонки.Добавить("П000020014007", мОписаниеТиповЧислоЕ); // Сумма

// Приложение 1

СтруктураГруппы15 = Новый ТаблицаЗначений;
СтруктураГруппы15.Колонки.Добавить("П000210005001", ОписаниеТиповСтрока3);   // Порядковый номер
СтруктураГруппы15.Колонки.Добавить("П000210005002", ОписаниеТиповЧисло5_2);  //
СтруктураГруппы15.Колонки.Добавить("П000210005004", ОписаниеТиповСтрока5);
СтруктураГруппы15.Колонки.Добавить("П000210005005", ОписаниеТиповЧисло14_3);
СтруктураГруппы15.Колонки.Добавить("П000210005006", ОписаниеТиповЧисло14_3);

// Приложение 2
СтруктураГруппы16 = Новый ТаблицаЗначений;
СтруктураГруппы16.Колонки.Добавить("П000220005001", ОписаниеТиповСтрока3);
СтруктураГруппы16.Колонки.Добавить("П000220005002", ОписаниеТиповЧисло5_2);
СтруктураГруппы16.Колонки.Добавить("П000220005004", ОписаниеТиповЧисло14_3);
СтруктураГруппы16.Колонки.Добавить("П000220005005", ОписаниеТиповЧисло14_3);
СтруктураГруппы16.Колонки.Добавить("П000220005006", ОписаниеТиповЧисло14_3);
СтруктураГруппы16.Колонки.Добавить("П000220005007", ОписаниеТиповЧисло14_3);

// Приложение 4
СтруктураГруппы17 = Новый ТаблицаЗначений;
СтруктураГруппы17.Колонки.Добавить("П000240006001", ОписаниеТиповСтрока254);
СтруктураГруппы17.Колонки.Добавить("П000240006002", ОписаниеТиповСтрока3);
СтруктураГруппы17.Колонки.Добавить("П000240006003",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
СтруктураГруппы17.Колонки.Добавить("П000240006004", ОписаниеТиповДата);
СтруктураГруппы17.Колонки.Добавить("П000240006005", ОписаниеТиповЧисло14_3);

// Приложение 5
СтруктураГруппы18 = Новый ТаблицаЗначений;
СтруктураГруппы18.Колонки.Добавить("П000250006001", ОписаниеТиповСтрока254);
СтруктураГруппы18.Колонки.Добавить("П000250006002", ОписаниеТиповСтрока3);
СтруктураГруппы18.Колонки.Добавить("П000250006003",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
СтруктураГруппы18.Колонки.Добавить("П000250006004", ОписаниеТиповДата);
СтруктураГруппы18.Колонки.Добавить("П000250006005", ОписаниеТиповЧисло14_3);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1,  СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2,  СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3,  СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4,  СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5,  СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6,  СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7,  СтруктураГруппы7);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы8,  СтруктураГруппы8);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы9,  СтруктураГруппы9);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы13, СтруктураГруппы13);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы14, СтруктураГруппы14);

мСтруктураМногострочныхРазделов.Вставить(мИдГруппы15, СтруктураГруппы15);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы16, СтруктураГруппы16);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы17, СтруктураГруппы17);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы18, СтруктураГруппы18);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2,  7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3,  7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4,  6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5,  7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6,  7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7,  2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы8,  2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы9,  2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, 8);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, 7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, 7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы13, 7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы14, 7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы15, 16);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы16, КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы17, 51);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы18, 51);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица показателей и их значений многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление               = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница            = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

//ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");

ТаблицаДляМногостраничныхДокСодержащихМногострочность            = Новый ТаблицаЗначений;
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Данные");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);
СтрПерваяСтраница = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Добавить();
СтрПерваяСтраница.Представление               = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница            = Истина;
СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 1
ТаблицаСтраницыРаздела11   = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел11",   ТаблицаСтраницыРаздела11);

// Элемент структуры - данные дополнительных страниц Раздела 1
ТаблицаСтраницыРаздела12   = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел12",   ТаблицаСтраницыРаздела12);

// Элемент структуры - данные дополнительных страниц ТаблицаСтраницыПриложение1
ТаблицаСтраницыПриложение1 = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение1", ТаблицаСтраницыПриложение1);

// Элемент структуры - данные дополнительных страниц Приложение2
ТаблицаСтраницыПриложение2 = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение2", ТаблицаСтраницыПриложение2);

// Элемент структуры - данные дополнительных страниц Приложение3
ТаблицаСтраницыПриложение3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение3", ТаблицаСтраницыПриложение3);

// Элемент структуры - данные дополнительных страниц Приложение4
ТаблицаСтраницыПриложение4   = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение4",   ТаблицаСтраницыПриложение4);

// Элемент структуры - данные дополнительных страниц Приложение5
ТаблицаСтраницыПриложение5   = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение5",   ТаблицаСтраницыПриложение5);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2006";

// Код отчета, равен КНД
мКодОтчета   = 1151003;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел2");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00005", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151003";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ПОДАКЦИЗНЫЕ ТОВАРЫ, ЗА ИСКЛЮЧЕНИЕМ НЕФТЕПРОДУКТОВ И ТАБАЧНЫХ ИЗДЕЛИЙ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

МногострочныеИсключения = Новый СписокЗначений;
МногострочныеИсключения.Добавить("П000110002000");
МногострочныеИсключения.Добавить("П000110003000");
МногострочныеИсключения.Добавить("П000110004000");
МногострочныеИсключения.Добавить("П000110005000");
