////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел2_4;
Перем мРаздел2_5;
Перем мРаздел3;
Перем мРаздел4;

// Хранят сведения о должностных лицах
Перем мОргТип;
Перем мОргКодИМНС;
Перем мОргКППОП;
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПред;
Перем мОргКодОКАТО;
Перем мОргОГРН;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем мИдГруппы8;
Перем мИдГруппы9;
Перем мИдГруппы10;
Перем мИдГруппы11;
Перем мИдГруппы12;
Перем мИдГруппы13;
Перем мИдГруппы14;
Перем мИдГруппы15;
Перем мИдГруппы16;
Перем мИдГруппы17;
Перем мИдГруппы18;
Перем мИдГруппы19;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мВПрограммеИзмененаОрганизация;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Дата рождения с листа ФЛ
Перем мДатаРождСлиста; // текстовое представление
Перем мДатаДок; // Тип Дата
Перем мФизЛицИнд;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные раздела 1
Перем мКБК_1;
Перем мКБК_2;
Перем мКБК_3;
Перем мКБК_4;
Перем мКБК_5;

Перем мКодОКАТО_1;
Перем мКодОКАТО_2;
Перем мКодОКАТО_3;
Перем мКодОКАТО_4;
Перем мКодОКАТО_5;

Перем мСуммаНалога_1;
Перем мСуммаНалога_2;
Перем мСуммаНалога_3;
Перем мСуммаНалога_4;
Перем мСуммаНалога_5;
// Раздел 4
Перем мАдрес1Раздел4;
Перем мКПП1Раздел4;
Перем мАдрес2Раздел4;
Перем мКПП2Раздел4;

Перем мКБК2004Раздел1;
Перем мКБК2005Раздел1;

Перем мРазмерСтавкиПрил1;
// Справочник- выбор значений для раздела 1
Перем мПодакцизныеТоварыРаздел2_1;

// Справочник- выбор значений для раздела 2
Перем мНалогообложениеАкцизами;
Перем мЕдиницыИзмерения;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу("Раздел1");
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу("Раздел4");

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы)

	Если ИмяСтраницы = "Раздел1" Тогда

		мКБК_1 = "";
		мКБК_2 = "";
		мКБК_3 = "";
		мКБК_4 = "";
		мКБК_5 = "";

		мСуммаНалога_1 = 0;
		мСуммаНалога_2 = 0;
		мСуммаНалога_3 = 0;
		мСуммаНалога_4 = 0;
		мСуммаНалога_5 = 0;

		мКодОКАТО_1 = "";
		мКодОКАТО_2 = "";
		мКодОКАТО_3 = "";
		мКодОКАТО_4 = "";
		мКодОКАТО_5 = "";


	ИначеЕсли ИмяСтраницы = "Раздел4" Тогда
		мАдрес1Раздел4 = "643,,,,,,,,,";
		мКПП1Раздел4 = "";
		мАдрес2Раздел4 = "643,,,,,,,,,";
		мКПП2Раздел4 = "";
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 или ИдГруппы = мИдГруппы2 или ИдГруппы = мИдГруппы3 или ИдГруппы = мИдГруппы4 или ИдГруппы = мИдГруппы5 или ИдГруппы = мИдГруппы6 или ИдГруппы = мИдГруппы7 или ИдГруппы = мИдГруппы8 или ИдГруппы = мИдГруппы9 или ИдГруппы = мИдГруппы10 или ИдГруппы = мИдГруппы11 Тогда
		ТекТабличноеПоле = мРаздел2;
	ИначеЕсли ИдГруппы = мИдГруппы12 или ИдГруппы = мИдГруппы13 Тогда
		ТекТабличноеПоле = мРаздел2_1;
	ИначеЕсли ИдГруппы = мИдГруппы14 или ИдГруппы = мИдГруппы15 Тогда
		ТекТабличноеПоле = мРаздел2_2;
	ИначеЕсли ИдГруппы = мИдГруппы16 Тогда
		ТекТабличноеПоле = мРаздел2_3;
	ИначеЕсли ИдГруппы = мИдГруппы17 Тогда
		ТекТабличноеПоле = мРаздел2_4;
	ИначеЕсли ИдГруппы = мИдГруппы18 Тогда
		ТекТабличноеПоле = мРаздел2_5;
	ИначеЕсли ИдГруппы = мИдГруппы19 Тогда
		ТекТабличноеПоле = мРаздел4;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_1.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_3.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_5" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_5.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел4.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	СписокПоказателейВнутрСвязи = Новый СписокЗначений;
	// строка по коду 060 Раздела 2.1
	СписокПоказателейВнутрСвязи.Добавить("П000210006006");
	СписокПоказателейВнутрСвязи.Добавить("П000210006008");
	// строка по коду 080 Раздела 2.1
	СписокПоказателейВнутрСвязи.Добавить("П000210008006");
	СписокПоказателейВнутрСвязи.Добавить("П000210008008");
	// строка по коду 090 Раздела 2.1
	СписокПоказателейВнутрСвязи.Добавить("П000210009006");
	СписокПоказателейВнутрСвязи.Добавить("П000210009008");
	// строка по коду 060 Раздела 2.2
	СписокПоказателейВнутрСвязи.Добавить("П000220006005");
	СписокПоказателейВнутрСвязи.Добавить("П000220006007");
	// строка по коду 060 Раздела 2.3
	СписокПоказателейВнутрСвязи.Добавить("П000230006005");
	// строка по коду 060 Раздела 2.4
	СписокПоказателейВнутрСвязи.Добавить("П000240006005");


	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КБК_1"             , мКБК_1);
		СтруктураДанныхПоля.Вставить("КБК_2"             , мКБК_2);
		СтруктураДанныхПоля.Вставить("КБК_3"             , мКБК_3);
		СтруктураДанныхПоля.Вставить("КБК_4"             , мКБК_4);
		СтруктураДанныхПоля.Вставить("КБК_5"             , мКБК_5);

		СтруктураДанныхПоля.Вставить("СуммаНалога_1"             , мСуммаНалога_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога_2"             , мСуммаНалога_2);
		СтруктураДанныхПоля.Вставить("СуммаНалога_3"             , мСуммаНалога_3);
		СтруктураДанныхПоля.Вставить("СуммаНалога_4"             , мСуммаНалога_4);
		СтруктураДанныхПоля.Вставить("СуммаНалога_5"             , мСуммаНалога_5);

		СтруктураДанныхПоля.Вставить("КодОКАТО_1"             , мКодОКАТО_1);
		СтруктураДанныхПоля.Вставить("КодОКАТО_2"             , мКодОКАТО_2);
		СтруктураДанныхПоля.Вставить("КодОКАТО_3"             , мКодОКАТО_3);
		СтруктураДанныхПоля.Вставить("КодОКАТО_4"             , мКодОКАТО_4);
		СтруктураДанныхПоля.Вставить("КодОКАТО_5"             , мКодОКАТО_5);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел4" Тогда

		СтруктураДанныхПоля.Вставить("Адрес1Раздел4"             , СобратьАдресИзТабличногоПоля("1"));
		СтруктураДанныхПоля.Вставить("КПП1Раздел4"               , мКПП1Раздел4);
		СтруктураДанныхПоля.Вставить("Адрес2Раздел4"             , СобратьАдресИзТабличногоПоля("2"));
		СтруктураДанныхПоля.Вставить("КПП2Раздел4"               , мКПП2Раздел4);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// СобратьАдресИзТабличногоПоля
//
Функция СобратьАдресИзТабличногоПоля(Знач НомерАдреса)

	ПочтИндекс = "";

	Для Инд = 1 По 6 Цикл
		//мРаздел2_2.Области.ПочтИнд1_6
		ПочтИндекс = ПочтИндекс + мРаздел4.Области["ПочтИнд" + НомерАдреса + "_" + Строка(Инд)].Значение;
	КонецЦикла;

	Если НомерАдреса = "1" Тогда
		//СубъектРФ = мРаздел4.Области["П000040001201"].Значение;
		СубъектРФ = мРаздел4.Области.КодСуб1_1.Значение + мРаздел4.Области.КодСуб1_2.Значение;
		Район     = мРаздел4.Области["П000040001300"].Значение;
		Город     = мРаздел4.Области["П000040001400"].Значение;
		НП        = мРаздел4.Области["П000040001500"].Значение;
		Улица     = мРаздел4.Области["П000040001600"].Значение;
		Дома      = мРаздел4.Области["П000040001700"].Значение;
		Корпус    = мРаздел4.Области["П000040001800"].Значение;
		Квартира  = мРаздел4.Области["П000040001900"].Значение;
	ИначеЕсли НомерАдреса = "2" Тогда
		//СубъектРФ = мРаздел4.Области["П000040003201"].Значение;
		СубъектРФ = мРаздел4.Области.КодСуб2_1.Значение + мРаздел4.Области.КодСуб2_2.Значение;
		Район     = мРаздел4.Области["П000040003300"].Значение;
		Город     = мРаздел4.Области["П000040003400"].Значение;
		НП        = мРаздел4.Области["П000040003500"].Значение;
		Улица     = мРаздел4.Области["П000040003600"].Значение;
		Дома      = мРаздел4.Области["П000040003700"].Значение;
		Корпус    = мРаздел4.Области["П000040003800"].Значение;
		Квартира  = мРаздел4.Области["П000040003900"].Значение;
	КонецЕсли;

	АдресРезультат = "643," + СокрЛП(ПочтИндекс) + ","
	                + СокрЛП(СубъектРФ) + ","
	                + СокрЛП(Район) + ","
	                + СокрЛП(Город) + ","
	                + СокрЛП(НП) + ","
	                + СокрЛП(Улица) + ","
	                + СокрЛП(Дома) + ","
	                + СокрЛП(Корпус) + ","
	                + СокрЛП(Квартира);

	Возврат АдресРезультат;

КонецФункции // СобратьАдресИзТабличногоПоля

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "СуммаНалога_1" Тогда
	Рез = мСуммаНалога_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога_2" Тогда
	Рез = мСуммаНалога_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога_3" Тогда
	Рез = мСуммаНалога_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога_4" Тогда
	Рез = мСуммаНалога_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога_5" Тогда
	Рез = мСуммаНалога_5;
	ИначеЕсли КодПоказателяПоСтруктуре = "КПП1Раздел4" Тогда
	Рез = мКПП1Раздел4;
	ИначеЕсли КодПоказателяПоСтруктуре = "КПП2Раздел4" Тогда
	Рез = мКПП2Раздел4;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_1" Тогда
	Рез = мКБК_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_2" Тогда
	Рез = мКБК_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_3" Тогда
	Рез = мКБК_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_4" Тогда
	Рез = мКБК_4;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБК_5" Тогда
	Рез = мКБК_5;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_1" Тогда
	Рез = мКодОКАТО_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_2" Тогда
	Рез = мКодОКАТО_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_3" Тогда
	Рез = мКодОКАТО_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_4" Тогда
	Рез = мКодОКАТО_4;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТО_5" Тогда
	Рез = мКодОКАТО_5;

	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "СуммаНалога_1" Тогда
		мСуммаНалога_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога_2" Тогда
		мСуммаНалога_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога_3" Тогда
		мСуммаНалога_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога_4" Тогда
		мСуммаНалога_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога_5" Тогда
		мСуммаНалога_5 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Адрес1Раздел4" Тогда
		мАдрес1Раздел4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КПП1Раздел4" Тогда
		мКПП1Раздел4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Адрес2Раздел4" Тогда
		мАдрес2Раздел4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КПП2Раздел4" Тогда
		мКПП2Раздел4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	ИначеЕсли ИмяПоказателя = "КБК_1" Тогда
		мКБК_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_2" Тогда
		мКБК_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_3" Тогда
		мКБК_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_4" Тогда
		мКБК_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБК_5" Тогда
		мКБК_5 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_1" Тогда
		мКодОКАТО_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_2" Тогда
		мКодОКАТО_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_3" Тогда
		мКодОКАТО_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_4" Тогда
		мКодОКАТО_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТО_5" Тогда
		мКодОКАТО_5 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;
	

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Формирует струкутуру данных строк многострочных блоков табличного документа
// на заданной странице основной панели формы.
//
// Параметры
//  ИмяСтраницы  - строка - имя страницы основной панели формы.
//
// Возвращаемое значение:
//   структура   - элементы струкутуры содержат данные дополнительных строк страницы, где
//                 в качестве ключа используется имя многострочного блока, а в качестве
//                 значения - таблица показателей и их значений многострочного блока.
//
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы)
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Раздел2" Тогда

		// Так как Раздел 2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы8);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы9);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы10);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы11);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы1, ТаблицаДопСтрокГруппы1);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы2 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы2, ТаблицаДопСтрокГруппы2);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы3 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы3, ТаблицаДопСтрокГруппы3);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы4 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы4, ТаблицаДопСтрокГруппы4);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы5 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы5, ТаблицаДопСтрокГруппы5);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы6 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы6, ТаблицаДопСтрокГруппы6);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы7 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы7, ТаблицаДопСтрокГруппы7);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы8 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы8, ТаблицаДопСтрокГруппы8);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы9 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы9, ТаблицаДопСтрокГруппы9);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы10 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы10, ТаблицаДопСтрокГруппы10);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы11, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы11 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы11, ТаблицаДопСтрокГруппы11);

	ИначеЕсли ИмяСтраницы = "Раздел2_1" Тогда

		// Так как Раздел 2.1 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы12);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы13);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы12 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы12, ТаблицаДопСтрокГруппы12);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы13, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы13 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы13, ТаблицаДопСтрокГруппы13);

	ИначеЕсли ИмяСтраницы = "Раздел2_2" Тогда

		// Так как Раздел 2.2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы14);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы15);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы14, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы14 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы14, ТаблицаДопСтрокГруппы14);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы15 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы15, ТаблицаДопСтрокГруппы15);

	ИначеЕсли ИмяСтраницы = "Раздел2_3" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы16);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы16, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы16 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы16, ТаблицаДопСтрокГруппы16);

	ИначеЕсли ИмяСтраницы = "Раздел2_4" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы17);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы17, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы17 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы17, ТаблицаДопСтрокГруппы17);

	ИначеЕсли ИмяСтраницы = "Раздел2_5" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы18);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы18, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы18 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы18, ТаблицаДопСтрокГруппы18);

	ИначеЕсли ИмяСтраницы = "Раздел4" Тогда

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы19);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы19, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы19 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы19, ТаблицаДопСтрокГруппы19);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции // СформироватьСтруктуруДанныхДопСтрокСтраницы()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;
			
			Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
				Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
					МассивВариантовЗаполненияСтраниц.Добавить(МассивВариантовЗаполненияСтраниц[0].Скопировать());	
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
						НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					СвойстваГрупповыхЗначений(ИмяПоказателя, "УстановитьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
				КонецЕсли;

			Иначе

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					СвойстваГрупповыхЗначений(ИмяПоказателя,"СнятьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеВКвадратах Тогда
				СвойстваГрупповыхЗначений(ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Функция ОбластьЯвляетсяЯчейкойСоставногоПоля
// проверяет, является ли переданное имя ячейки частью многоКвадратной
// группы ячеек на листе
// если да - то истина, иначе - Ложь
//
Функция ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки, БыстраяПроверка = Истина)

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
		Если СмысловаяЧасть = "" Тогда
			// не квадратичная ячейка
			Возврат Ложь;
		КонецЕсли;

		Если БыстраяПроверка Тогда
			Возврат Истина;
		КонецЕсли;

		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		// Получаем текущий счетчик
		//ТекущийСчетчик = Сред(ИмяЯчейки,АдресПоследнегоРазделителя+1,СтрДлина(ИмяЯчейки)-АдресПоследнегоРазделителя);
		ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
		Если СтрДлина(ТекущийСчетчик)>=2 Тогда

			Если Сред(ТекущийСчетчик, 1, 1) = "0" Тогда
				ПризнакСчетчикаСнулемВпереди = Истина;
			Иначе
				ПризнакСчетчикаСнулемВпереди = Ложь;
			КонецЕсли;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
		КонецЕсли;

		Попытка
			ТекущийСчетчикЦел = Число(ТекущийСчетчик);
		Исключение
			Возврат Ложь;
		КонецПопытки;

		Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1),ТекущийСчетчикЦел + 1);

		Попытка
			Проверка = ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение;
		Исключение
			Возврат Ложь
		КонецПопытки;
		// значение получено
		Возврат Истина;

КонецФункции // ОбластьЯвляетсяЯчейкойСоставногоПоля

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено)

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
	Если ИмяСтраницыПанели = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели)
	Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если СтрТаблицаСтраницы <> Неопределено Тогда
		НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
	КонецЕсли;

	СтатикСтраницРаздела = Строка(НомерТекущейСтраницы) + " из " + КоличествоСтраниц;
	ЭлементыФормы["НадписьСтатикСтраниц" + ИмяТекущейСтраницыПанели].Заголовок = СтатикСтраницРаздела;

	ДоступностьКнопокЛистания(НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели);

	УстановитьЦветФонаЯчейки(,, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтатикСтраницРаздела()

// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаВариантыЗаполнения;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы = Неопределено Тогда
		ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	Если Не ПоказатьПоИндексу Тогда
		НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
	Иначе
		НомерСледующейСтраницы = Шаг;
	КонецЕсли;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;

	Если ПустаяСтрока(ЗагТекущейСтраницыПанели)
		ИЛИ (ЗагТекущейСтраницыПанели = "Новая страница") Тогда

		// Сформируем представление дополнительной страницы.
		Если ИмяТекущейСтраницыПанели = "ФизЛица" Тогда
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.ФизЛицФИО.Значение;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000210001000.Значение;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000220001000.Значение;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000230001000.Значение;
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000240001000.Значение;
		КонецЕсли;

		Если ПустаяСтрока(ЗагТекущейСтраницыПанели) Тогда
			ЗагТекущейСтраницыПанели = "Новая страница";
		КонецЕсли;

		СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
	КонецЕсли;

	// Для страниц многостраничного раздела, содержащих многострочные блоки,
	// дополнительно сохраняем данные таких блоков.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяТекущейСтраницыПанели);

	СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;
	СтрТаблицаСтраницы.ДанныеДопСтрок   = СтруктураДанныхДопСтрокРаздела;

	//Если Шаг = 0 И НЕ ПоказатьПоИндексу Тогда
	//	Возврат;
	//КонецЕсли;

	// Очищаем табличное поле и удаляем все ранее созданные дополнительные строки.
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
	СтрСледующаяСтраница.АктивнаяСтраница = Истина;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

	// Предварительно проверим, содержит ли страница многострочные части
	НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;

	Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
		Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
			ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
			ДанныеГруппыСтрок = ГруппаСтрок.Значение;

			ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

			// Заменяем таблицу значений с данными текущей страницы.
			мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
			// Выводим в табличный документ данные группы дополнительных строк
			ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
			// обновляем структуру многострочного раздела
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЦикла;
	КонецЕсли;

	// отображаем данные следующей страницы
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		// Для Раздела 1 востановим суммы акциза, отображаемые
		// в отдельных ячейках по строкам 030.
		Если (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел1")
		Или (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел4") Тогда

			Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;

		КонецЕсли;

			Если мСтараяВерсияФормы <> мВерсияФормы Тогда
				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			Иначе
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЕсли;
		//КонецЕсли;

		Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
			// обновляем примечания к ячейкам табличного документа
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
				НовыйКомментарий   = НайденнаяСтрока.Комментарий;

				// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
				Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Расчет(ИмяТекущейСтраницыПанели);

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога1_", 15, мСуммаНалога_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога2_", 15, мСуммаНалога_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога3_", 15, мСуммаНалога_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога4_", 15, мСуммаНалога_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога5_", 15, мСуммаНалога_5, Истина);

	КонецЕсли;

	//ТекущийЭлемент = ТекТабличноеПоле;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы)
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяЛиста = Неопределено)

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Если ИмяЛиста <> Неопределено Тогда
			// В случае, если необходимо обновить только один лист
			Если ИмяТекущейСтраницыПанели <> ИмяЛиста Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		АктивнаяСтраницаРаздела = ТаблицаТекущейСтраницы.Найти(Истина, "АктивнаяСтраница");
		Если АктивнаяСтраницаРаздела = Неопределено Тогда
			СтрТаблицаСтраницы = ТаблицаТекущейСтраницы.Добавить();
			СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
			СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;

			АктивнаяСтраницаРаздела = СтрТаблицаСтраницы;
		КонецЕсли;

		ИндексАктивнойСтраницы  = ТаблицаТекущейСтраницы.Индекс(АктивнаяСтраницаРаздела);

		// Выводим данные первой страницы многостраничного раздела.
		ПоказатьСтраницуМногостраничногоРаздела((-1)*ИндексАктивнойСтраницы, ИмяТекущейСтраницыПанели);

		// управляем показом статика, отображающего номер текущей страницы
		ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);
	КонецЦикла;

	// обновляем цвет фона автоматически заполняемых ячеек
	УстановитьЦветФонаЯчейки(,, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);

	// !!! Данный фрагмент используется только в тех отчетах,где
	// имеется возможность присваивать дополнительным страницам
	// уникальные имена (представления).
	ОпределитьПредставлениеДопСтраниц();

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Процедура присваивает дополнительным листам многостраничных разделов
// уникальные имена (представление).
//
//
Процедура ОпределитьПредставлениеДопСтраниц()
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Страница.Значение;

		Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				Если ПустаяСтрока(СохрПредставлениеСтраницы) 
					ИЛИ СокрП(СохрПредставлениеСтраницы) = "Новая страница" Тогда

					// определяем представление дополнительной страницы
					СтруктураДанныхСтраницы = СтрокаТаблицы.Данные;

					Если ИмяТекСтраницы = "ФизЛица" Тогда
						СтруктураДанныхСтраницы.Свойство("ФизЛицФИО", ТекущееПредставлениеСтраницы);
					ИначеЕсли ИмяТекСтраницы = "Раздел2_1" Тогда
						СтруктураДанныхСтраницы.Свойство("П000210001000", ТекущееПредставлениеСтраницы);
					ИначеЕсли ИмяТекСтраницы = "Раздел2_2" Тогда
						СтруктураДанныхСтраницы.Свойство("П000220001000", ТекущееПредставлениеСтраницы);
					ИначеЕсли ИмяТекСтраницы = "Раздел2_3" Тогда
						СтруктураДанныхСтраницы.Свойство("П000230001000", ТекущееПредставлениеСтраницы);
					ИначеЕсли ИмяТекСтраницы = "Раздел2_4" Тогда
						СтруктураДанныхСтраницы.Свойство("П000240001000", ТекущееПредставлениеСтраницы);
					КонецЕсли;

					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОпределитьПредставлениеДопСтраниц()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	
	//Если НомерМесяца = "12" Тогда
		//НомерМесяца = "0";
	//КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = "1";
	мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 1, 1);
	мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 2, 1);

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках()

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиУпП = "";
	ДатаПодписиИП  = "";

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение),НЕ ЗначениеЗаполнено(мИННДиректор)) = 0 Тогда
		ДатаПодписиРук = ДатаПодписи; 
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение),НЕ ЗначениеЗаполнено(мИННБухгалтер)) = 0 Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргУП.Значение),НЕ ЗначениеЗаполнено(мИННУпПред)) = 0 Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		ДатаПодписиИП  = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУпП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиИП,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мФизЛица.  Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1.  Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "ИННЮЛ"); // ИНН
	Сведения.Добавить("", "КППЮЛ"); // КПП

	Сведения.Добавить("", ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "ФИО", "НаимЮЛПол")); // Полное наименование 

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ИННРук"); // ИНН руководителя

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера

	Сведения.Добавить("", "ОГРН"); // ОГРН
	Сведения.Добавить("", "ОКАТО"); // ОКАТО

	Сведения.Добавить("", "КодНО");  // Код Налогового Органа
	Сведения.Добавить("", "НаимНО"); // Наименование НО

	Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя
	Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	// Инициализируем переменные
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	ФИОРук = "";
	ИННРук = "";
	ФИОБух = "";
	ИННБух = "";
	ОГРН = "";
	ОКАТО = "";
	КодНО = "";
	НаимНО = "";
	ФИОУпПред = "";
	ИННУпПред = "";

	// Получаем данные
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "ФИО", "НаимЮЛПол"), НаимЮЛПол);
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ИННРук", ИННРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ИННБух", ИННБух);
	ОргСведения.Свойство("ОГРН", ОГРН);
	ОргСведения.Свойство("ОКАТО", ОКАТО);
	ОргСведения.Свойство("КодНО", КодНО);
	ОргСведения.Свойство("НаимНО", НаимНО);
	ОргСведения.Свойство("ФИОУпПред", ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред", ИННУпПред);

	// Производим операции связанные с текущей формой отчетности

	// Заполняем ИНН на всех листах декларации
	Если Не РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = "";
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
		КППЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	Для НомЯчейки = 1 По 12 Цикл

		ЦифраИНН = Сред(ИННЮЛ, НомЯчейки, 1);

		мТитульный     .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мФизЛица       .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел1       .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;

		мРаздел2       .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2       .Области["ИНН2_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2       .Области["ИНН3_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2       .Области["ИНН4_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2       .Области["ИНН5_" + НомЯчейки].Значение = ЦифраИНН;

		мРаздел2_1   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2_1   .Области["ИНН2_" + НомЯчейки].Значение = ЦифраИНН;

		мРаздел2_2   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2_3   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2_4   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел2_5   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел3   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		мРаздел4   .Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;

	КонецЦикла;

	Для НомЯчейки = 1 По 9 Цикл

		ЦифраКПП = Сред(КППЮЛ, НомЯчейки, 1);

		мТитульный     .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мТитульный     .Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;

		мФизЛица       .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел1       .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;

		мРаздел2       .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2       .Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2       .Области["КПП3_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2       .Области["КПП4_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2       .Области["КПП5_" + НомЯчейки].Значение = ЦифраКПП;

		мРаздел2_1   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2_1   .Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;

		мРаздел2_2   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2_3   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2_4   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел2_5   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;

		мРаздел3   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
		мРаздел4   .Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;

	КонецЦикла;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда

		ФИОРук        = "";
		ИННРук        = "            ";
		мИННДиректор  = "            ";

		ФИОБух        = "";
		ИННБух        = "            ";
		мИННБухгалтер = "            ";

		ФИОУпПред     = "";
		ИННУпПред     = "            ";
		мИННУпПред    = "            ";

	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Тогда
		мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	// Работаем с ИНН руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННДиректор)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННРук, НомЯчейки, 1);
			мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННДиректор = ИННРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение)) Тогда
		мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ИНН бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННБухгалтер)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННБух, НомЯчейки, 1);
			мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННБухгалтер = ИННБух;
	КонецЕсли;

	// Работаем с ФИО уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргУП.Значение)) Тогда
		мТитульный.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	// Работаем с ИНН уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННУпПред)) Тогда
		ИННУпПред = РегламентированнаяОтчетность.ДополнитьСтроку(ИННУпПред, 12, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП", 12, ИННУпПред);
		мИННУпПред = ИННУпПред;
	КонецЕсли;

	// Работаем с ОГРН
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргОГРН)) Тогда
		ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, 13, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 13, ОГРН);
		мОргОГРН = ОГРН;
	КонецЕсли;

	// Работаем с ОКАТО, значение мКодОКАТО предварительно считали из квадратиков
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мКодОКАТО_1)) Тогда
		ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(ОКАТО, 11, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО1_", 11, ОКАТО);
		мКодОКАТО_1 = ОКАТО;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодИМНС)) Тогда
		КодНО = РегламентированнаяОтчетность.ДополнитьСтроку(КодНО, 4, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодИМНС", 4, КодНО);
		мОргКодИМНС = КодНО;
	КонецЕсли;

	// Работаем с наименованием инспекции
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргИМНС.Значение)) Тогда
		мТитульный.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	// Заполним даты формирования декларации (подписи)
	ЗаполнитьДатуВЯчейках();

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога1_", 15, мСуммаНалога_1, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога2_", 15, мСуммаНалога_2, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога3_", 15, мСуммаНалога_3, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога4_", 15, мСуммаНалога_4, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СуммаНалога5_", 15, мСуммаНалога_5, Истина);

		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     2, НомерНижнЯчейкиОбласти,     2);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,2, НомерНижнЯчейкиНовойОбласти,2);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";
				//
				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )
	Перем ТаблицаСтраницРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	//
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяТекущейСтраницыПанели);

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
		Если ПустаяСтрока(ЗагТекущейСтраницыПанели)
		 ИЛИ (ЗагТекущейСтраницыПанели = "Новая страница") Тогда

			// Сформируем представление дополнительной страницы.
			Если ИмяТекущейСтраницыПанели = "ФизЛица" Тогда
				ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.ФизЛицФИО.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда
				ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000210001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
				ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000220001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
				ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000230001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
				ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000240001000.Значение;
			КонецЕсли;

			// Определяем представление (название) дополнительной страницы 
			Если ПустаяСтрока(ЗагТекущейСтраницыПанели) Тогда
				ЗагТекущейСтраницыПанели = "Новая страница";
			КонецЕсли;

			СтрТаблицаСтраницы.Представление = ЗагТекущейСтраницыПанели;
		КонецЕсли;

		СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;
		СтрТаблицаСтраницы.ДанныеДопСтрок   = СтруктураДанныхДопСтрокРаздела;
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		// Очищаем показатели текущей страницы и, в случае, если
		// страница содержит многострочный раздел, удаляем все
		// дополнительно созданные строки.
		ОчиститьТабличноеПоле(ТекТабличноеПоле);

		// Выполняем расчет показателей добавленной страницы
		Расчет(ИмяТекущейСтраницыПанели);

		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;
	КонецЕсли;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// Удаляет текущую страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Если одна страница в разделе, то её удалять нельзя
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(ТекТабличноеПоле);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			// Предварительно проверим, содержит ли страница многострочные части
			ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок;

			Если ДанныеДопСтрокРаздела <> Неопределено Тогда
				Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;

					ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

					// Заменяем таблицу значений с данными текущей страницы.
					мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					// Выводим в табличный документ строки многострочной группы
					ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				КонецЦикла;
			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел1")
				Или (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел4") Тогда
					Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
						Продолжить; // Пропустим цикл
					КонецЕсли;
				КонецЕсли;

				Если мСтараяВерсияФормы <> мВерсияФормы Тогда
					
					Попытка
						ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
					Исключение
					КонецПопытки;

				Иначе
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				КонецЕсли;

			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(ИмяТекущейСтраницыПанели);
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;
	КонецЕсли;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

	// Вывод в квадратики, того, что хранилось в переменных

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога1_", 15, мСуммаНалога_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога2_", 15, мСуммаНалога_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога3_", 15, мСуммаНалога_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога4_", 15, мСуммаНалога_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СуммаНалога5_", 15, мСуммаНалога_5, Истина);

	КонецЕсли;

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если Не ТаблицаСтраницРаздела.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	//
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		СтрТаблицаСтраницы.Данные = СтруктураДанныхТекущейТаблицы;

		ПредставлениеТекСтраницы = СтрТаблицаСтраницы.Представление;
		Если ПустаяСтрока(ПредставлениеТекСтраницы)
		 ИЛИ (ПредставлениеТекСтраницы = "Новая страница") Тогда

			// Определим наименования (предствления) дополнительно созданных
			// страниц по значению уникального реквизита на странице отчета.
			Если ИмяТекущейСтраницыПанели = "ФизЛица" Тогда
				ПредставлениеТекСтраницы = ТекТабличноеПоле.Области.ФизЛицФИО.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда
				ПредставлениеТекСтраницы = ТекТабличноеПоле.Области.П000210001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
				ПредставлениеТекСтраницы = ТекТабличноеПоле.Области.П000220001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
				ПредставлениеТекСтраницы = ТекТабличноеПоле.Области.П000230001000.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
				ПредставлениеТекСтраницы = ТекТабличноеПоле.Области.П000240001000.Значение;
			КонецЕсли;

			// формимруем представление дополнительной страницы 
			Если ПустаяСтрока(ПредставлениеТекСтраницы) Тогда
				ПредставлениеТекСтраницы = "Новая страница";
			КонецЕсли;
			
			СтрТаблицаСтраницы.Представление    = ПредставлениеТекСтраницы;
		КонецЕсли;
	КонецЕсли;
	//
	// Данные текущей страницы сохранены.

	ФормаВыбораДопСтраницы = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаСпискаДопСтраниц", ЭтаФорма, "дляПереходаНаСтраницу");

	Если ФормаВыбораДопСтраницы.Открыта() Тогда
		ФормаВыбораДопСтраницы.Активизировать();
		Если Вопрос("Предыдущая операция показа списка страниц не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаВыбораДопСтраницы.Закрыть();
		КонецЕсли;
	КонецЕсли;

	ФормаВыбораДопСтраницы.НачальноеЗначениеВыбора = ТаблицаСтраницРаздела;

	ВыбранноеЗначение = ФормаВыбораДопСтраницы.ОткрытьМодально();
	Если ВыбранноеЗначение <> Неопределено Тогда

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		ИндексВыбСтраницы     = ИндексТекСтраницы;

		ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();

		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		Если ИндексВыбСтраницы <> ИндексТекСтраницы Тогда
			// Если была выбрана другая страница, то отображаем ее.
			ПоказатьСтраницуМногостраничногоРаздела(ИндексВыбСтраницы - ИндексТекСтраницы, ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
         
	ИмяПоказателя = ТекущаяЯчейка.Имя;

	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		// ДОЛЖНА ЗАКРЫВАТЬ ТОЛЬКО ОДНУ ТЕКУЩУЮ ЯЧЕЙКУ !!!
		//ДоступностьЭлементовВариантаЗаполнения(3, ТекущаяЯчейка);
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НайденнаяСтрока.ВариантЗаполнения = 1 ИЛИ 
		НайденнаяСтрока.ВариантЗаполнения = 2 ИЛИ
		НайденнаяСтрока.ВариантЗаполнения = 3 Тогда

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	КонецЕсли;

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()// Процедура устанавливает новый вариант заполнения активной ячейки,

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	ИмяТабличногоПоля = ВыбТабличноеПоле.Имя;
	ИмяСтраницыФормы  = СтрЗаменить(ИмяТабличногоПоля, "ПолеТабличногоДокумента", "");

	// Сначала получим структуру данных многострочных блоков табличного поля.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницыФормы);

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда
		// Табличное поле содержит многострочные блоки.
		// Удалим все созданные дополнительные строки в блоке.
		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл

			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;

			// Получим таблицу значений, содержащую данные дополнительных строк.
			ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

			ИсходноеКоличествоСтрокГруппы = 0;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

			ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

			Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
				// Имеются дополнительные строки.
				// Удаляем их.

				НСтр = ПромТаблицаДопСтрокРаздела.Количество();
				Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

					ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

					ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
					ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

					// область первой ячейки удаляемой строки многострочного раздела
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

					// номера строк удаляемой области
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

					// удаляем из структуры многострочного раздела соответствующую строку
					ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

					НСтр = НСтр - 1;

				КонецЦикла;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	// Обнулим переменные соответствующих разделов
	// Обнулим нужный нам раздел
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда

		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл
			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЦикла;

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(ИмяСтраницыФормы);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если (СтраницаПанели.Имя <> "Титульный") И (СтраницаПанели.Имя <> "ФизЛица") Тогда
			ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];
			ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

	КонецЦикла;

	// Проверяем наличие добавленных в многостраничный раздел дополнительные страницы.
	// При наличии таких страниц удаляем их.
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Если (ТаблицаТекущейСтраницы.Количество() > 1) И (ИмяТекущейСтраницыПанели <> "ФизЛица") Тогда

			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				// Пропускаем активную страницу по той причине,
				// что данные активной страницы былы очищены ранее.
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);

					Продолжить;
				КонецЕсли;

				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	// Обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	ИзменитьТаблицуВариантовЗаполнения (НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);
КонецПроцедуры

//Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции //Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

//Процедура ИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь)

	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
			ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
			ПереборЗнач = ПереборЗнач-1;
			// а если это многостраничный раздел?
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(ИмяСтраницы); // кол-во страниц в разделе
			// Всегда получим актуальную таблицу заполнения. Не эталонную.
			ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);

			Если ТаблицаВариантыЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ПолныйРучнойВвод Тогда
				// Если раздел многостраничный, то нужно насквозь все обнулять !!!

				Если КолСтрВРазделе = 1 Тогда

					Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли;
					КонецЦикла; // Для Каждого Строка Из

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
				КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
				Если КолСтрВРазделе >= 2 Тогда

					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 4 Тогда
								Строка.ВариантЗаполнения = 0; // полный ручной ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого
					КонецЦикла; // Для
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
				КонецЕсли; // КолСтрВРазделе >= 2

			ИначеЕсли ПолныйРучнойВвод Тогда

				// Всё в эталонном виде
				Если КолСтрВРазделе = 1 Тогда
					Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
						Если Стр.ВариантЗаполнения = 0 Тогда
							Стр.ВариантЗаполнения = 4
						КонецЕсли;
					КонецЦикла;

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

				КонецЕсли; // если одна страница в разделе

				Если КолСтрВРазделе >= 2 Тогда
					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 0 Тогда
								//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
								Строка.ВариантЗаполнения = 4; // полный автоматический ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого

					КонецЦикла; // Для

					// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

				КонецЕсли; // если более 1 страница в разделе

			КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// мПериодичность всегда инициализируется в осн. форме, но т.к. в данной декларации с начала
	// не было инициализации там, то чтобы при восстановлении этот параметр всё таки заполнился
	// то дополнительно прописываем его здесь, для случаев, когда восстанавливается декларации.
	мПериодичность = Перечисления.Периодичность.Месяц;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);
	
	СписокСохранения.Вставить("ВвозИзБеларуси", ВвозИзБеларуси);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// Данные для конвертации с прошлых релизов
	// названия разделов
	// раздел 1 - был - остался
	// раздел 2 - был - остался
	// раздел 2.1 - был - стал Приложение1
	// раздел 2.2 - был - стал Приложение2
	// раздел 2.3 - был - стал мРаздел2_3
	// раздел 2.4 - был - стал Раздел2_4
	// раздел 2.5 - был - стал Раздел2_5
	// раздел 3 - был - стал Раздел3
	// раздел 4 - был - стал Раздел4

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ВвозИзБеларуси", ВвозИзБеларуси) Тогда
		ВвозИзБеларуси = Ложь;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			мСтараяверсияФормы = ВерсияФормы;
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			// Поправим в мДеревоСтраницОтчета названия страниц со старых на новые, которые будут действовать
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		// Отображаем данные, хранящиеся в структуре многостраничных разделов

		Если (мВерсияФормы <> мСтараяВерсияФормы) И ((ВерсияФормы = "01/04/2005") Или (ВерсияФормы = "01/03/2005") Или (ВерсияФормы = "29/12/2003")) Тогда
			РегламентированнаяОтчетность.КонвертацияОтчетнойФормы( , ЭтаФорма, мСтараяВерсияФормы, ПоказателиОтчета);
			//рмы(СохраненныйДок = Неопределено, ЭтаФормаД = Неопределено, ВерсияФормы = Неопределено, ПоказателиОтчета) Экспорт
		КонецЕсли;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;

		//Если мСтараяВерсияФормы <> мВерсияФормы Тогда
		//// Конвертируем переименнованное имя Табличного поля в новое имя!!!
		//	ИмяТекТабличноеПоле = "ПолеТабличногоДокумента" + ИмяРазделаВСтаройВерсииОтчета(СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", ""), мСтараяВерсияФормы);
		//КонецЕсли;
		
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
			// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
			// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
			// данные многостраничных разделов уже были выведены в соответствующие листы
			Продолжить;
		КонецЕсли;


		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если (ИмяТекТабличноеПоле = "ПолеТабличногоДокументаРаздел1")
			Или (ИмяТекТабличноеПоле = "ПолеТабличногоДокументаРаздел4") Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;


		КонецЦикла;
	КонецЦикла;

	// Выводим дату подписания отчета
	ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаДопСтрокРаздела;
	Перем ТаблицаВариантыЗаполнения;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерСледующейСтраницы = Шаг;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
	Если УчестьАктивнуюСтраницу Тогда
		// найдем активную страницу
		АктивнаяСтраницаВ = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		АктивнаяСтраницаВИнд = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаВ);
		ТекущиеАктивныеДанные = ТаблицаСтраницРаздела[АктивнаяСтраницаВИнд];
		ТекущиеАктивныеДанные.АктивнаяСтраница = Ложь; // убираем активность
		СтрСледующаяСтраница.АктивнаяСтраница = Истина; // ставим новую активность
	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

	// отображаем данные
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		Если (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел1")
		Или (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаРаздел4") Тогда
			Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;
		КонецЕсли;

		Если мСтараяВерсияФормы <> мВерсияФормы Тогда
		// Старая версия формы, нужно по позможности собрать данные

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		Иначе
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЕсли;

		Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
			// обновляем примечания к ячейкам табличного документа
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
				НовыйКомментарий   = НайденнаяСтрока.Комментарий;

				// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
				Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Вывод будет осуществлен через процедуру УстановитьФорматВывода();

	//ТекущийЭлемент = ТекТабличноеПоле;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ИмяРазделаВСтаройВерсииОтчета
// Функция вернет старое имя, в новом формате, с новым именем, после переименования табличных полей в правильный вид
//
//Функция ИмяРазделаВСтаройВерсииОтчета(ИмяЛиста, Версия)

//	// По умолчанию, вернем то, что послали
//	Результат = ИмяЛиста;

//	Если Версия = "29/12/2003" Тогда
//		Если ИмяЛиста = "Раздел2_1" Тогда
//			Результат = "Раздел2_1";
//			ИначеЕсли ИмяЛиста = "Раздел2_2" Тогда
//			Результат = "Приложение2";
//			ИначеЕсли ИмяЛиста = "Раздел2_3" Тогда
//			Результат = "Раздел2_3";
//			ИначеЕсли ИмяЛиста = "Раздел2_4" Тогда
//			Результат = "Раздел2_4";
//			ИначеЕсли ИмяЛиста = "Раздел2_5" Тогда
//			Результат = "Раздел2_5";
//			ИначеЕсли ИмяЛиста = "Раздел3" Тогда
//			Результат = "Раздел3";
//			ИначеЕсли ИмяЛиста = "Раздел4" Тогда
//			Результат = "Раздел4";
//		КонецЕсли;

//	КонецЕсли;

//	Возврат Результат;

//КонецФункции // ИмяРазделаВСтаройВерсииОтчета

// Процедура "собирает" значения показателей по отдельным
// полям табличного документа на странице "Титульный" формы.
//
Процедура СохрЗначВКвадратиках()

	мОргТип = мТитульный.Области.ТипОрг1.Значение
	        + мТитульный.Области.ТипОрг2.Значение
	        + мТитульный.Области.ТипОрг3.Значение
	        + мТитульный.Области.ТипОрг4.Значение
	        + мТитульный.Области.ТипОрг5.Значение
	        + мТитульный.Области.ТипОрг6.Значение;

	мОргКодИМНС = мТитульный.Области.КодИМНС1.Значение
	            + мТитульный.Области.КодИМНС2.Значение
	            + мТитульный.Области.КодИМНС3.Значение
	            + мТитульный.Области.КодИМНС4.Значение;

	мИННДиректор = мТитульный.Области.ИННРук1.Значение
	             + мТитульный.Области.ИННРук2.Значение
	             + мТитульный.Области.ИННРук3.Значение
	             + мТитульный.Области.ИННРук4.Значение
	             + мТитульный.Области.ИННРук5.Значение
	             + мТитульный.Области.ИННРук6.Значение
	             + мТитульный.Области.ИННРук7.Значение
	             + мТитульный.Области.ИННРук8.Значение
	             + мТитульный.Области.ИННРук9.Значение
	             + мТитульный.Области.ИННРук10.Значение
	             + мТитульный.Области.ИННРук11.Значение
	             + мТитульный.Области.ИННРук12.Значение;

	мИННБухгалтер = мТитульный.Области.ИННГБ1.Значение
	              + мТитульный.Области.ИННГБ2.Значение
	              + мТитульный.Области.ИННГБ3.Значение
	              + мТитульный.Области.ИННГБ4.Значение
	              + мТитульный.Области.ИННГБ5.Значение
	              + мТитульный.Области.ИННГБ6.Значение
	              + мТитульный.Области.ИННГБ7.Значение
	              + мТитульный.Области.ИННГБ8.Значение
	              + мТитульный.Области.ИННГБ9.Значение
	              + мТитульный.Области.ИННГБ10.Значение
	              + мТитульный.Области.ИННГБ11.Значение
	              + мТитульный.Области.ИННГБ12.Значение;

	мННУпПред = мТитульный.Области.ИННУП1.Значение
	          + мТитульный.Области.ИННУП2.Значение
	          + мТитульный.Области.ИННУП3.Значение
	          + мТитульный.Области.ИННУП4.Значение
	          + мТитульный.Области.ИННУП5.Значение
	          + мТитульный.Области.ИННУП6.Значение
	          + мТитульный.Области.ИННУП7.Значение
	          + мТитульный.Области.ИННУП8.Значение
	          + мТитульный.Области.ИННУП9.Значение
	          + мТитульный.Области.ИННУП10.Значение
	          + мТитульный.Области.ИННУП11.Значение
	          + мТитульный.Области.ИННУП12.Значение;

	мОргОГРН = мТитульный.Области.ОГРН1.Значение
	         + мТитульный.Области.ОГРН2.Значение
	         + мТитульный.Области.ОГРН3.Значение
	         + мТитульный.Области.ОГРН4.Значение
	         + мТитульный.Области.ОГРН5.Значение
	         + мТитульный.Области.ОГРН6.Значение
	         + мТитульный.Области.ОГРН7.Значение
	         + мТитульный.Области.ОГРН8.Значение
	         + мТитульный.Области.ОГРН9.Значение
	         + мТитульный.Области.ОГРН10.Значение
	         + мТитульный.Области.ОГРН11.Значение
	         + мТитульный.Области.ОГРН12.Значение
	         + мТитульный.Области.ОГРН13.Значение;

	мОргКППОП = мТитульный.Области.ПКПП1.Значение
	          + мТитульный.Области.ПКПП2.Значение
	          + мТитульный.Области.ПКПП3.Значение
	          + мТитульный.Области.ПКПП4.Значение
	          + мТитульный.Области.ПКПП5.Значение
	          + мТитульный.Области.ПКПП6.Значение
	          + мТитульный.Области.ПКПП7.Значение
	          + мТитульный.Области.ПКПП8.Значение
	          + мТитульный.Области.ПКПП9.Значение;

	мДатаРождСлиста = мФизЛица.Области.ФизЛицДатаРожд1.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд2.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд3.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд4.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд5.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд6.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд7.Значение
	          + мФизЛица.Области.ФизЛицДатаРожд8.Значение;

	мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ДатаДок = "";
	Для Инд = 1 По 8 Цикл
		ДатаДок = ДатаДок + мФизЛица.Области["ФизЛицДокДата" + Строка(Инд)].Значение + ?(Инд=2, ".", ?( Инд = 4, ".", ""));
	КонецЦикла;

	Если РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаДок + "0:00:00") Тогда
		мДатаДок = Дата(ДатаДок + "0:00:00");
	КонецЕсли;

	мФизЛицИнд = "";
	Для Инд = 1 По 6 Цикл
		мФизЛицИнд = мФизЛицИнд + мФизЛица.Области["ФизЛицИнд" + Строка(Инд)].Значение;
	КонецЦикла;

	мФизЛицИнд = ?(РегламентированнаяОтчетность.ПустоеЗначение(мФизЛицИнд), "", СтрЗаменить(Строка(мФизЛицИнд), Символ(160), ""));

КонецПроцедуры // СохрЗначВКвадратиках()

// Очищает строки многострочного блока табличного документа,
// предварительно удалив все созданные дополнительные строки.
//
// Параметры
//  ИмяГруппыДопСтрок - строка - идентификатор многострочного блока.
//
Процедура ОчиститьМногострочныйБлок(ИмяГруппыДопСтрок)

	ВыбТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппыДопСтрок);

	Если ВыбТабличноеПоле = Неопределено Тогда
		Возврат;
	Конецесли;

	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.

		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

			ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			// Определим область удаляемой строки
			УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

			НСтр = НСтр - 1;

		КонецЦикла;

	КонецЕсли;

	Для НСтр = 1 По ПромТаблицаДопСтрокРаздела.Количество() Цикл

		ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

		Для Каждого Колонка Из ПромТаблицаДопСтрокРаздела.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;

			ОбластьЯчейки.Очистить();
		КонецЦикла;

	КонецЦикла;

	// Обновляем структуру многострочного блока.
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

КонецПроцедуры // ОчиститьМногострочныйБлок()

// Заполняет строки по кодам 080 и 090 Раздела 2 декларации
// на основании данных в других строках Раздела.
//
Процедура АвтозаполнениеСтрок080и090Раздела2()
	Перем ТаблицаДопСтрокБлока;

	ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

	// Предварительно очищаем строки многострочного блока по коду строки 080
	ОчиститьМногострочныйБлок(мИдГруппы8);
	// Предварительно очищаем данные многострочных групп по коду строки 090
	ОчиститьМногострочныйБлок(мИдГруппы9);

	// Сохраняем строки 010
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
	// Сохраняем строки 040
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
	// Сохраняем строки 050
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
	// Сохраняем строки 060
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);
	// Сохраняем строки 070
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);

	// Собираем данные по строкам 010, 040, 050 - 070
	// в таблицу значений для заполнения строк
	// многострочных блоков по кодам строки 080 и 090.
	//
	ТаблЗначСтрок080и090 = Новый ТаблицаЗначений;
	ТаблЗначСтрок080и090.Колонки.Добавить("ВидПАТ",      ОписаниеТиповСтрока254);
	ТаблЗначСтрок080и090.Колонки.Добавить("КодВидаПАТ",  ОписаниеТиповСтрока3);
	ТаблЗначСтрок080и090.Колонки.Добавить("СуммаАкциза", ОписаниеТиповЧисло15_2);

	// Собираем данные по строкам 010
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020001007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок080и090.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020001002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020001004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020001007;
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 040
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020004007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок080и090.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020004002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020004004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020004007;
		КонецЦикла;
	КонецЕсли;

	// Собираем данные по строкам 050
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020005007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок080и090.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020005002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020005004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020005007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;


	// Собираем данные по строкам 060
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020006007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок080и090.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020006002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020006004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020006007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;


	// Собираем данные по строкам 070
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если СтрокаБлока.П000020007007 = 0 Тогда
				// строки с незаполненной суммой акциза не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблЗначСтрок080и090.Добавить();
			НоваяСтрока.ВидПАТ      = СтрокаБлока.П000020007002;
			НоваяСтрока.КодВидаПАТ  = СтрокаБлока.П000020007004;
			НоваяСтрока.СуммаАкциза = СтрокаБлока.П000020007007 * (-1); // налоговый вычет
		КонецЦикла;
	КонецЕсли;


	// Сворачиваем таблицу значений по виду и коду вида объектов налогообложения
	ТаблЗначСтрок080и090.Свернуть("ВидПАТ,КодВидаПАТ", "СуммаАкциза");
	// Сортируем таблицу значений по коду объектов налогообложения
	ТаблЗначСтрок080и090.Сортировать("ВидПАТ Возр");


	ТаблицаДопСтрокПоКоду080 = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8, ТаблицаДопСтрокПоКоду080);

	ТаблицаДопСтрокПоКоду090 = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9, ТаблицаДопСтрокПоКоду090);

	// Удаляем строки таблицы значений
	ТаблицаДопСтрокПоКоду080.Очистить();
	ТаблицаДопСтрокПоКоду090.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблЗначСтрок080и090 Цикл
		ВидПАТ      = СтрокаТаблицы.ВидПАТ;
		КодВидаПАТ  = СтрокаТаблицы.КодВидаПАТ;
		СуммаАкциза = СтрокаТаблицы.СуммаАкциза;
		
		Если СуммаАкциза > 0 Тогда
			// Заполняем строки 080
			НоваяСтрока = ТаблицаДопСтрокПоКоду080.Добавить();
			НоваяСтрока.П000020008001 = ТаблицаДопСтрокПоКоду080.Индекс(НоваяСтрока) + 1;
			НоваяСтрока.П000020008002 = ВидПАТ;
			НоваяСтрока.П000020008004 = КодВидаПАТ;
			НоваяСтрока.П000020008007 = СуммаАкциза;

		ИначеЕсли СуммаАкциза < 0 Тогда
			// Заполняем строки 090 
			НоваяСтрока = ТаблицаДопСтрокПоКоду090.Добавить();
			НоваяСтрока.П000020009001 = ТаблицаДопСтрокПоКоду090.Индекс(НоваяСтрока) + 1;
			НоваяСтрока.П000020009002 = ВидПАТ;
			НоваяСтрока.П000020009004 = КодВидаПАТ;
			НоваяСтрока.П000020009007 = СуммаАкциза * (-1);

		КонецЕсли;
	Конеццикла;

	// Дополняем таблицы значений, содержащие данные по строкам 080 и 090
	// новыми строками до полного заполнения (так, чтобы кол-во строк 
	// в таблице значений был не меньше минимального кол-ва строк,
	// всегда отображаемых в форме.

	// Определим исходное количество строк в блоке
	ИсходноеКолвоСтрокПоКоду080 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы8, ИсходноеКолвоСтрокПоКоду080);
	ИсходноеКолвоСтрокПоКоду090 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы9, ИсходноеКолвоСтрокПоКоду090);

	ТекущееКолвоСтрок080 = ТаблицаДопСтрокПоКоду080.Количество();
	Если ТекущееКолвоСтрок080 < ИсходноеКолвоСтрокПоКоду080 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду080 - ТекущееКолвоСтрок080) Цикл
			ТаблицаДопСтрокПоКоду080.Добавить();
		КонецЦикла;

	КонецЕсли;

	ТекущееКолвоСтрок090 = ТаблицаДопСтрокПоКоду090.Количество();
	Если ТекущееКолвоСтрок090 < ИсходноеКолвоСтрокПоКоду090 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду090 - ТекущееКолвоСтрок090) Цикл
			ТаблицаДопСтрокПоКоду090.Добавить();
		КонецЦикла;

	КонецЕсли;
	//
	// Завершили дополнение таблицы значений недостающими строками.

	// Выведем строки 080 и 090 в табличный документ
	ВывестиРазделВТабличныйДокумент(мИдГруппы8, ТаблицаДопСтрокПоКоду080);
	ВывестиРазделВТабличныйДокумент(мИдГруппы9, ТаблицаДопСтрокПоКоду090);

КонецПроцедуры // АвтозаполнениеСтрок080и090Раздела2()

// Заполняет строки по коду 070 Раздела 2.1 декларации
// на основании данных в других строках Раздела.
//
Процедура АвтозаполнениеСтрок070Раздела2_1()
	Перем ТаблицаДопСтрокБлока;

	ОписаниеТиповСтрока5   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло15_4 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 4);

	// Формируем таблицу значений по показателям строк 050
	ТаблДанныхСтрок050 = Новый ТаблицаЗначений;
	ТаблДанныхСтрок050.Колонки.Добавить("Наименование",  ОписаниеТиповСтрока254);
	ТаблДанныхСтрок050.Колонки.Добавить("КодОбъекта",    ОписаниеТиповСтрока5);
	ТаблДанныхСтрок050.Колонки.Добавить("НалоговаяБаза", ОписаниеТиповЧисло15_4);
	ТаблДанныхСтрок050.Колонки.Добавить("ПривНалогБаза", ОписаниеТиповЧисло15_4); 

	// Собираем данные по строкам 050
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если (СтрокаБлока.П000210005006 = 0) И (СтрокаБлока.П000210005008 = 0) Тогда
				// пустые строки не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблДанныхСтрок050.Добавить();
			НоваяСтрока.КодОбъекта    = СтрокаБлока.П000210005004;
			НоваяСтрока.НалоговаяБаза = СтрокаБлока.П000210005006;
			НоваяСтрока.ПривНалогБаза = СтрокаБлока.П000210005008;
		КонецЦикла;
	КонецЕсли;

	// Сворачиваем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Свернуть("КодОбъекта,Наименование", "НалоговаяБаза,ПривНалогБаза");
	// Сортируем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Сортировать("КодОбъекта Возр");
	
	// Формируем таблицу значений по показателям строк 070
	ТаблДанныхСтрок070 = Новый ТаблицаЗначений;
	ТаблДанныхСтрок070.Колонки.Добавить("Наименование",  ОписаниеТиповСтрока254);
	ТаблДанныхСтрок070.Колонки.Добавить("КодОбъекта",    ОписаниеТиповСтрока5);
	ТаблДанныхСтрок070.Колонки.Добавить("НалоговаяБаза", ОписаниеТиповЧисло15_4);
	ТаблДанныхСтрок070.Колонки.Добавить("ПривНалогБаза", ОписаниеТиповЧисло15_4);

	// Собираем данные по строкам 070
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы13, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			НоваяСтрока = ТаблДанныхСтрок070.Добавить();
			НоваяСтрока.Наименование  = СтрокаБлока.П000210007002;
			НоваяСтрока.КодОбъекта    = СтрокаБлока.П000210007004;
			НоваяСтрока.НалоговаяБаза = СтрокаБлока.П000210007006;
			НоваяСтрока.ПривНалогБаза = СтрокаБлока.П000210007008;
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблДанныхСтрок070 Цикл
		КодОбъекта          = СтрокаТаблицы.КодОбъекта;
		НаименованиеОбъекта = СтрокаТаблицы.Наименование;

		НайденнаяСтрока = ТаблДанныхСтрок050.Найти(КодОбъекта, "КодОбъекта");
		Если  НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Наименование = НаименованиеОбъекта;
		КонецЕсли;
	КонецЦикла;

	// Выгружаем таблицу значеий по строкам 050 в таблицу по данным строк 070
	ТаблДанныхСтрок070 = ТаблДанныхСтрок050.Скопировать();

	// Предварительно очищаем строки многострочного блока по коду строки 070
	ОчиститьМногострочныйБлок(мИдГруппы13);

	ТаблицаДопСтрокПоКоду070 = Новый ТаблицаЗначений;
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы13, ТаблицаДопСтрокПоКоду070) Тогда

		// Предварительно очистим таблицу значений,
		// содержащей данные строк по коду 070.
		ТаблицаДопСтрокПоКоду070.Очистить();

		Для Каждого СтрокаТаблицы Из ТаблДанныхСтрок070 Цикл
			ПорядковыйНом = ТаблДанныхСтрок070.Индекс(СтрокаТаблицы) + 1;
			КодОбъекта    = СтрокаТаблицы.КодОбъекта;
			Наименование  = СтрокаТаблицы.Наименование;
			НалоговаяБаза = СтрокаТаблицы.НалоговаяБаза;
			ПривНалогБаза = СтрокаТаблицы.ПривНалогБаза;

			НоваяСтрока = ТаблицаДопСтрокПоКоду070.Добавить();
			НоваяСтрока.П000210007001 = ПорядковыйНом;
			НоваяСтрока.П000210007002 = Наименование;
			НоваяСтрока.П000210007004 = КодОбъекта;
			НоваяСтрока.П000210007006 = НалоговаяБаза;
			НоваяСтрока.П000210007008 = ПривНалогБаза;
		Конеццикла;
	
	Конецесли;

	// Дополняем таблицу значений, содержащую данные по строкам 070
	// новыми строками до полного заполнения (так, чтобы кол-во строк 
	// в таблице значений был не меньше минимального кол-ва строк,
	// всегда отображаемых в форме.

	// Определим исходное количество строк в блоке
	ИсходноеКолвоСтрокПоКоду070 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы13, ИсходноеКолвоСтрокПоКоду070);

	ТекущееКолвоСтрок070 = ТаблицаДопСтрокПоКоду070.Количество();
	Если ТекущееКолвоСтрок070 < ИсходноеКолвоСтрокПоКоду070 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду070 - ТекущееКолвоСтрок070) Цикл
			ТаблицаДопСтрокПоКоду070.Добавить();
		КонецЦикла;

	КонецЕсли;
	//
	// Завершили дополнение таблицы значений недостающими строками.

	// Выведем строки 070 в табличный документ
	ВывестиРазделВТабличныйДокумент(мИдГруппы13, ТаблицаДопСтрокПоКоду070);

КонецПроцедуры // АвтозаполнениеСтрок070Раздела2_1()

// Заполняет строки по коду 070 Раздела 2.2 декларации
// на основании данных в других строках Раздела.
//
Процедура АвтозаполнениеСтрок070Раздела2_2()
	Перем ТаблицаДопСтрокБлока;

	ОписаниеТиповСтрока5   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло15_4 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 4);

	// Формируем таблицу значений по показателям строк 050
	ТаблДанныхСтрок050 = Новый ТаблицаЗначений;
	ТаблДанныхСтрок050.Колонки.Добавить("Наименование",  ОписаниеТиповСтрока254);
	ТаблДанныхСтрок050.Колонки.Добавить("КодОбъекта",    ОписаниеТиповСтрока5);
	ТаблДанныхСтрок050.Колонки.Добавить("НалоговаяБаза", ОписаниеТиповЧисло15_4);
	ТаблДанныхСтрок050.Колонки.Добавить("ПривНалогБаза", ОписаниеТиповЧисло15_4); 

	// Собираем данные по строкам 050
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы14, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			Если (СтрокаБлока.П000220005005 = 0) И (СтрокаБлока.П000220005007 = 0) Тогда
				// пустые строки не учитываем
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблДанныхСтрок050.Добавить();
			НоваяСтрока.КодОбъекта    = СтрокаБлока.П000220005004;
			НоваяСтрока.НалоговаяБаза = СтрокаБлока.П000220005005;
			НоваяСтрока.ПривНалогБаза = СтрокаБлока.П000220005007;
		КонецЦикла;
	КонецЕсли;

	// Сворачиваем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Свернуть("КодОбъекта,Наименование", "НалоговаяБаза,ПривНалогБаза");
	// Сортируем таблицу значений по коду объектов налогообложения
	ТаблДанныхСтрок050.Сортировать("КодОбъекта Возр");
	
	// Формируем таблицу значений по показателям строк 070
	ТаблДанныхСтрок070 = Новый ТаблицаЗначений;
	ТаблДанныхСтрок070.Колонки.Добавить("Наименование",  ОписаниеТиповСтрока254);
	ТаблДанныхСтрок070.Колонки.Добавить("КодОбъекта",    ОписаниеТиповСтрока5);
	ТаблДанныхСтрок070.Колонки.Добавить("НалоговаяБаза", ОписаниеТиповЧисло15_4);
	ТаблДанныхСтрок070.Колонки.Добавить("ПривНалогБаза", ОписаниеТиповЧисло15_4);

	// Собираем данные по строкам 070
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, ТаблицаДопСтрокБлока) Тогда
		Для Каждого СтрокаБлока Из ТаблицаДопСтрокБлока Цикл
			НоваяСтрока = ТаблДанныхСтрок070.Добавить();
			НоваяСтрока.Наименование  = СтрокаБлока.П000220007002;
			НоваяСтрока.КодОбъекта    = СтрокаБлока.П000220007004;
			НоваяСтрока.НалоговаяБаза = СтрокаБлока.П000220007005;
			НоваяСтрока.ПривНалогБаза = СтрокаБлока.П000220007007;
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблДанныхСтрок070 Цикл
		КодОбъекта          = СтрокаТаблицы.КодОбъекта;
		НаименованиеОбъекта = СтрокаТаблицы.Наименование;

		НайденнаяСтрока = ТаблДанныхСтрок050.Найти(КодОбъекта, "КодОбъекта");
		Если  НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Наименование = НаименованиеОбъекта;
		КонецЕсли;
	КонецЦикла;

	// Выгружаем таблицу значеий по строкам 050 в таблицу по данным строк 070
	ТаблДанныхСтрок070 = ТаблДанныхСтрок050.Скопировать();

	// Предварительно очищаем строки многострочного блока по коду строки 070
	ОчиститьМногострочныйБлок(мИдГруппы15);

	ТаблицаДопСтрокПоКоду070 = Новый ТаблицаЗначений;
	Если мСтруктураМногострочныхРазделов.Свойство(мИдГруппы15, ТаблицаДопСтрокПоКоду070) Тогда

		// Предварительно очистим таблицу значений,
		// содержащей данные строк по коду 070.
		ТаблицаДопСтрокПоКоду070.Очистить();

		Для Каждого СтрокаТаблицы Из ТаблДанныхСтрок070 Цикл
			ПорядковыйНом = ТаблДанныхСтрок070.Индекс(СтрокаТаблицы) + 1;
			КодОбъекта    = СтрокаТаблицы.КодОбъекта;
			Наименование  = СтрокаТаблицы.Наименование;
			НалоговаяБаза = СтрокаТаблицы.НалоговаяБаза;
			ПривНалогБаза = СтрокаТаблицы.ПривНалогБаза;

			НоваяСтрока = ТаблицаДопСтрокПоКоду070.Добавить();
			НоваяСтрока.П000220007001 = ПорядковыйНом;
			НоваяСтрока.П000220007002 = Наименование;
			НоваяСтрока.П000220007004 = КодОбъекта;
			НоваяСтрока.П000220007005 = НалоговаяБаза;
			НоваяСтрока.П000220007007 = ПривНалогБаза;
		Конеццикла;
	
	Конецесли;

	// Дополняем таблицу значений, содержащую данные по строкам 070
	// новыми строками до полного заполнения (так, чтобы кол-во строк 
	// в таблице значений был не меньше минимального кол-ва строк,
	// всегда отображаемых в форме.

	// Определим исходное количество строк в блоке
	ИсходноеКолвоСтрокПоКоду070 = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы15, ИсходноеКолвоСтрокПоКоду070);

	ТекущееКолвоСтрок070 = ТаблицаДопСтрокПоКоду070.Количество();
	Если ТекущееКолвоСтрок070 < ИсходноеКолвоСтрокПоКоду070 Тогда

		Для Инд = 1 По (ИсходноеКолвоСтрокПоКоду070 - ТекущееКолвоСтрок070) Цикл
			ТаблицаДопСтрокПоКоду070.Добавить();
		КонецЦикла;

	КонецЕсли;
	//
	// Завершили дополнение таблицы значений недостающими строками.

	// Выведем строки 070 в табличный документ
	ВывестиРазделВТабличныйДокумент(мИдГруппы15, ТаблицаДопСтрокПоКоду070);

КонецПроцедуры // АвтозаполнениеСтрок070Раздела2_2()

// Заполняет многострочные блоки по кодам строк 010 и 020 поля табличного документа
// на странице "Раздел 2" основной панели формы.
//
Процедура ЗаполнитьРаздел2()
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;

	ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло15_4 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 4);

	// Очищаем строки многострочного блока по коду строки 010
	ОчиститьМногострочныйБлок(мИдГруппы1);
	// Очищаем данные многострочных групп по коду строки 020
	ОчиститьМногострочныйБлок(мИдГруппы2);

	// Обновим структуру многостраничных разделов формы.
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	// Строки 010 и 020 заполняются на основании данных разделов 2.1 и 2.2 декларации.
	ТаблДанныхПриложений1и3 = Новый ТаблицаЗначений;
	ТаблДанныхПриложений1и3.Колонки.Добавить("ВидТоваров",     ОписаниеТиповСтрока254);
	ТаблДанныхПриложений1и3.Колонки.Добавить("КодВидаТоваров", ОписаниеТиповСтрока3);
	ТаблДанныхПриложений1и3.Колонки.Добавить("НалоговаяБаза",  ОписаниеТиповЧисло15_4);

	ТаблДанныхПриложений2и4 = Новый ТаблицаЗначений;
	ТаблДанныхПриложений2и4.Колонки.Добавить("ВидТоваров",     ОписаниеТиповСтрока254);
	ТаблДанныхПриложений2и4.Колонки.Добавить("КодВидаТоваров", ОписаниеТиповСтрока3);
	ТаблДанныхПриложений2и4.Колонки.Добавить("НалоговаяБаза",  ОписаниеТиповЧисло15_4);


	// Собираем данные по всем листам Раздела 2.1
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_1", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			// Получим данные по конкретному листу Раздела 2.1
			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				НалогБазаПоВидуВсего = 0;
				НалогБазаПоСтавке100 = 0;
				НалогБазаПоСтавке35  = 0;

				Если СтруктураДанныхТабличногоПоля.Свойство("П000210006008", ЗначениеПоказателя) Тогда
					НалогБазаПоВидуВсего = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000210008008", ЗначениеПоказателя) Тогда
					НалогБазаПоСтавке100 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000210009008", ЗначениеПоказателя) Тогда
					НалогБазаПоСтавке35 = ЗначениеПоказателя;
				КонецЕсли;

				П000210001000 = "";
				П000210002000 = "";
				Если СтруктураДанныхТабличногоПоля.Свойство("П000210001000", ЗначениеПоказателя) Тогда
					П000210001000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000210002000", ЗначениеПоказателя) Тогда
					П000210002000 = ЗначениеПоказателя;
				КонецЕсли;

				Если (НалогБазаПоСтавке100 <> 0) ИЛИ (НалогБазаПоСтавке35 <> 0) Тогда
					Если НалогБазаПоСтавке100 <> 0 Тогда
						НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
						НоваяСтрока.ВидТоваров     = П000210001000;
						НоваяСтрока.КодВидаТоваров = П000210002000;
						НоваяСтрока.НалоговаяБаза  = НалогБазаПоСтавке100;
					КонецЕсли; 

					Если НалогБазаПоСтавке35 <> 0 Тогда
						НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
						НоваяСтрока.ВидТоваров     = П000210001000;
						НоваяСтрока.КодВидаТоваров = П000210002000;
						НоваяСтрока.НалоговаяБаза  = НалогБазаПоСтавке35;
					КонецЕсли;

				Иначе
					НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
					НоваяСтрока.ВидТоваров     = П000210001000;
					НоваяСтрока.КодВидаТоваров = П000210002000;
					НоваяСтрока.НалоговаяБаза  = НалогБазаПоВидуВсего;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;


	// Собираем данные по всем листам Раздела 2.3
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_3", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			// Получим данные по конкретному листу Раздела 2.3
			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				П000230001000 = "";
				П000230002000 = "";
				П000230006005 = 0;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000230001000", ЗначениеПоказателя) Тогда
					П000230001000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000230002000", ЗначениеПоказателя) Тогда
					П000230002000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000230006005", ЗначениеПоказателя) Тогда
					П000230006005 = ЗначениеПоказателя;
				КонецЕсли;

				НоваяСтрока = ТаблДанныхПриложений1и3.Добавить();
				НоваяСтрока.ВидТоваров     = П000230001000;
				НоваяСтрока.КодВидаТоваров = П000230002000;
				НоваяСтрока.НалоговаяБаза  = П000230006005;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;


	// Собираем данные по всем листам Раздела 2.2
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_2", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			// Получим данные по конкретному листу Раздела 2.3
			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				П000220001000 = "";
				П000220002000 = "";
				П000220006007 = 0;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000220001000", ЗначениеПоказателя) Тогда
					П000220001000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000220002000", ЗначениеПоказателя) Тогда
					П000220002000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000220006007", ЗначениеПоказателя) Тогда
					П000220006007 = ЗначениеПоказателя;
				КонецЕсли;

				НоваяСтрока = ТаблДанныхПриложений2и4.Добавить();
				НоваяСтрока.ВидТоваров     = П000220001000;
				НоваяСтрока.КодВидаТоваров = П000220002000;
				НоваяСтрока.НалоговаяБаза  = П000220006007;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;


	// Собираем данные по всем листам Раздела 2.4
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_4", ТаблицаСтраницРаздела) Тогда
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			// Получим данные по конкретному листу Раздела 2.3
			Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
				СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

				П000240001000 = "";
				П000240002000 = "";
				П000240006005 = 0;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000240001000", ЗначениеПоказателя) Тогда
					П000240001000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000240002000", ЗначениеПоказателя) Тогда
					П000240002000 = ЗначениеПоказателя;
				КонецЕсли;
				Если СтруктураДанныхТабличногоПоля.Свойство("П000240006005", ЗначениеПоказателя) Тогда
					П000240006005 = ЗначениеПоказателя;
				КонецЕсли;

				НоваяСтрока = ТаблДанныхПриложений2и4.Добавить();
				НоваяСтрока.ВидТоваров     = П000240001000;
				НоваяСтрока.КодВидаТоваров = П000240002000;
				НоваяСтрока.НалоговаяБаза  = П000240006005;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;


	// Заполняем строки 010
	Если ТаблДанныхПриложений1и3.Количество() > 0 Тогда

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);

		Для Каждого СтрокаТаблицы Из ТаблДанныхПриложений1и3 Цикл
			НомерСтроки    = ТаблДанныхПриложений1и3.Индекс(СтрокаТаблицы);
			ВидТоваров     = СтрокаТаблицы.ВидТоваров;
			КодВидаТоваров = СтрокаТаблицы.КодВидаТоваров;
			НалоговаяБаза  = СтрокаТаблицы.НалоговаяБаза;

			Если НомерСтроки < ПромТаблицаДопСтрокРаздела.Количество() Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Получить(НомерСтроки);
			Иначе
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Добавить();
			КонецЕсли;

			НоваяСтрока.П000020001001 = НомерСтроки + 1;
			НоваяСтрока.П000020001002 = ВидТоваров;
			НоваяСтрока.П000020001004 = КодВидаТоваров;
			НоваяСтрока.П000020001005 = НалоговаяБаза;

		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
	КонецЕсли;

	// Заполняем строку 020
	Если ТаблДанныхПриложений2и4.Количество() > 0 Тогда

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ПромТаблицаДопСтрокРаздела);

		Для Каждого СтрокаТаблицы Из ТаблДанныхПриложений2и4 Цикл
			НомерСтроки    = ТаблДанныхПриложений2и4.Индекс(СтрокаТаблицы);
			ВидТоваров     = СтрокаТаблицы.ВидТоваров;
			КодВидаТоваров = СтрокаТаблицы.КодВидаТоваров;
			НалоговаяБаза  = СтрокаТаблицы.НалоговаяБаза;

			Если НомерСтроки < ПромТаблицаДопСтрокРаздела.Количество() Тогда
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Получить(НомерСтроки);
			Иначе
				НоваяСтрока = ПромТаблицаДопСтрокРаздела.Добавить();
			КонецЕсли;

			НоваяСтрока.П000020002001 = НомерСтроки + 1;
			НоваяСтрока.П000020002002 = ВидТоваров;
			НоваяСтрока.П000020002004 = КодВидаТоваров;
			НоваяСтрока.П000020002005 = НалоговаяБаза;
		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(мИдГруппы2, ПромТаблицаДопСтрокРаздела);
	КонецЕсли;

	// Вычисляем расчетные показатели.
	Расчет("Раздел2");

	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьРаздел2()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "")
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы2;
	Перем СтруктураГруппы3;
	Перем СтруктураГруппы4;
	Перем СтруктураГруппы5;
	Перем СтруктураГруппы6;
	Перем СтруктураГруппы10;
	Перем СтруктураГруппы11;
	Перем СтруктураГруппы12;
	Перем СтруктураГруппы14;
	Перем СтруктураГруппы16;
	Перем СтруктураГруппы17;

	Если ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1,  СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2,  СтруктураГруппы2);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3,  СтруктураГруппы3);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4,  СтруктураГруппы4);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5,  СтруктураГруппы5);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10, СтруктураГруппы10);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы11, СтруктураГруппы11);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12, СтруктураГруппы12);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы14, СтруктураГруппы14);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы16, СтруктураГруппы16);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы17, СтруктураГруппы17);

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		// РАЗДЕЛ 2.

		// Строки по коду 010 многострочного блока
		Для Ном = 1 По СтруктураГруппы1.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020001007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020001005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020001006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы1[Ном - 1];
			ТекСтрокаТаблицы.П000020001007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020001007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 020 многострочного блока
		Для Ном = 1 По СтруктураГруппы2.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020002007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020002005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020002006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы2[Ном - 1];
			ТекСтрокаТаблицы.П000020002007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020002007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 030 многострочного блока
		Для Ном = 1 По СтруктураГруппы3.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020003007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020003005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020003006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы3[Ном - 1];
			ТекСтрокаТаблицы.П000020003007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020003007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 040 многострочного блока
		Для Ном = 1 По СтруктураГруппы4.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020004007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020004005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020004006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы4[Ном - 1];
			ТекСтрокаТаблицы.П000020004007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020004007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 050 многострочного блока
		Для Ном = 1 По СтруктураГруппы5.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020005007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020005005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020005006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы5[Ном - 1];
			ТекСтрокаТаблицы.П000020005007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020005007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 100 многострочного блока
		Для Ном = 1 По СтруктураГруппы10.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020010007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020010005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020010006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы10[Ном - 1];
			ТекСтрокаТаблицы.П000020010007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020010007"+НомСтр].Значение);

		КонецЦикла;

		// Строки по коду 110 многострочного блока
		Для Ном = 1 По СтруктураГруппы11.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2.Области["П000020011007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(
			                                                    мРаздел2.Области["П000020011005"+НомСтр].Значение
			                                                  * мРаздел2.Области["П000020011006"+НомСтр].Значение
			                                                                           );

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы11[Ном - 1];
			ТекСтрокаТаблицы.П000020011007 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020011007"+НомСтр].Значение);

		КонецЦикла;

		// Заполняем строки 080 и 090
		АвтозаполнениеСтрок080и090Раздела2();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда
		// РАЗДЕЛ 2.1

		ВидАвтомобили = Ложь;
		ВидПодакцизногоТовара = мРаздел2_1.Области.П000210002000.Значение;
		Если Лев( СокрЛ(ВидПодакцизногоТовара), 1 ) = "5" Тогда
			// Раздел 2.1 заполнен по автомобилям легковым и мотоциклам
			ВидАвтомобили = Истина;
		КонецЕсли;

		// Строки по коду 050 многострочного блока
		Для Ном = 1 По СтруктураГруппы12.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2_1.Области["П000210005008"+НомСтр].Значение = мРаздел2_1.Области["П000210005006"+НомСтр].Значение
			                                                    * мРаздел2_1.Области["П000210005007"+НомСтр].Значение;

			Если Не ВидАвтомобили Тогда
				мРаздел2_1.Области["П000210005008"+НомСтр].Значение = мРаздел2_1.Области["П000210005008"+НомСтр].Значение / 100;
			КонецЕсли;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы12[Ном - 1];
			ТекСтрокаТаблицы.П000210005008 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области["П000210005008"+НомСтр].Значение);

		КонецЦикла;

		// Строка по коду 060
		мРаздел2_1.Области.П000210006006.Значение = СтруктураГруппы12.Итог("П000210005006");
		мРаздел2_1.Области.П000210006008.Значение = СтруктураГруппы12.Итог("П000210005008");

		П000210008006 = 0;
		П000210008008 = 0;
		П000210009006 = 0;
		П000210009008 = 0;

		Для Каждого СтрокаГруппы Из СтруктураГруппы12 Цикл

			Если СокрЛП(СтрокаГруппы.П000210005005) = "100%" Тогда
				П000210008006 = П000210008006 + СтрокаГруппы.П000210005006;
				П000210008008 = П000210008008 + СтрокаГруппы.П000210005008;
			ИначеЕсли СокрЛП(СтрокаГруппы.П000210005005) = "35%" Тогда
				П000210009006 = П000210009006 + СтрокаГруппы.П000210005006;
				П000210009008 = П000210009008 + СтрокаГруппы.П000210005008;
			КонецЕсли;

		КонецЦикла;

		// Строка 080
		мРаздел2_1.Области.П000210008006.Значение = П000210008006;
		мРаздел2_1.Области.П000210008008.Значение = П000210008008;
		
		// Строка 090
		мРаздел2_1.Области.П000210009006.Значение = П000210009006;
		мРаздел2_1.Области.П000210009008.Значение = П000210009008;

		// Заполняем строки 070
		АвтозаполнениеСтрок070Раздела2_1();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		// РАЗДЕЛ 2.2

		ВидАвтомобили = Ложь;
		ВидПодакцизногоТовара = мРаздел2_2.Области.П000220002000.Значение;
		Если Лев( СокрЛ(ВидПодакцизногоТовара), 1 ) = "5" Тогда
			// Раздел 2.1 заполнен по автомобилям легковым и мотоциклам
			ВидАвтомобили = Истина;
		КонецЕсли;

		// Строки по коду 050 многострочного блока
		Для Ном = 1 По СтруктураГруппы14.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 7
			мРаздел2_2.Области["П000220005007"+НомСтр].Значение = мРаздел2_2.Области["П000220005005"+НомСтр].Значение
			                                                    * мРаздел2_2.Области["П000220005006"+НомСтр].Значение;

			Если Не ВидАвтомобили Тогда
				мРаздел2_2.Области["П000220005007"+НомСтр].Значение = мРаздел2_2.Области["П000220005007"+НомСтр].Значение / 100;
			КонецЕсли;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы14[Ном - 1];
			ТекСтрокаТаблицы.П000220005007 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области["П000220005007"+НомСтр].Значение);

		КонецЦикла;

		// Строка по коду 060
		//УстановитьЗначениеПоказателя("П000220006005",
		мРаздел2_2.Области.П000220006005.Значение = СтруктураГруппы14.Итог("П000220005005");
		мРаздел2_2.Области.П000220006007.Значение = СтруктураГруппы14.Итог("П000220005007");

		// Заполняем строки по коду 070
		АвтозаполнениеСтрок070Раздела2_2();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
		// РАЗДЕЛ 2.3

		// Строка по коду 060
		мРаздел2_3.Области.П000230006005.Значение = СтруктураГруппы16.Итог("П000230005005");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
		// РАЗДЕЛ 2.4

		// Строка по коду 060
		мРаздел2_4.Области.П000240006005.Значение = СтруктураГруппы17.Итог("П000240005005");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		// РАЗДЕЛ 3

		// Строка по коду 010
		мРаздел3.Области.П000030001005.Значение = мРаздел3.Области.П000030001003.Значение * мРаздел3.Области.П000030001004.Значение / 100;
		мРаздел3.Области.П000030001007.Значение = мРаздел3.Области.П000030001005.Значение * мРаздел3.Области.П000030001006.Значение;

		// Строка по коду 020
		мРаздел3.Области.П000030002005.Значение = мРаздел3.Области.П000030002003.Значение * мРаздел3.Области.П000030002004.Значение / 100;
		мРаздел3.Области.П000030002007.Значение = мРаздел3.Области.П000030002005.Значение * мРаздел3.Области.П000030002006.Значение;

	Иначе
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		Расчет("Раздел3");
		Расчет("Раздел2_4");
		Расчет("Раздел2_3");
		Расчет("Раздел2_2");
		Расчет("Раздел2_1");
		Расчет("Раздел2");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	мВПрограммеИзмененаОрганизация = Ложь;
	мАвтоВыборКодов = Ложь;

	Если НЕ БезОткрытияФормы Тогда

		ЗагрузитьПоказателиИзМакета("КБК2004Раздел1");
		ЗагрузитьПоказателиИзМакета("КБК2005Раздел1");
		ЗагрузитьПоказателиИзМакета("ПодакцизныеТоварыРаздел2_1");
		ЗагрузитьПоказателиИзМакета("НалогообложениеАкцизами");
		ЗагрузитьПоказателиИзМакета("ЕдиницыИзмерения");

	КонецЕсли;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица   = ЭлементыФормы.ПолеТабличногоДокументаФизЛица; 
	мРаздел1   = ЭлементыФормы.ПолеТабличногоДокументаРаздел1; 
	мРаздел2   = ЭлементыФормы.ПолеТабличногоДокументаРаздел2; 
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1;
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2;
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3;
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4;
	мРаздел2_5 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_5;
	мРаздел3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4   = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мСтараяВерсияФормы = мВерсияФормы;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			УстановитьФорматВывода();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			мТитульный     .Области["ВидДок"].Значение = 1;
			мТитульный.Области.ТипОрг1.Значение = "V";

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	СохрЗначВКвадратиках();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ();
	КонецЕсли;

	ПолучитьИННКПП();

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	ДоступностьКнопокДобавитьУдалить();

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" 
// на страницах основной панели формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда

		// Одновременно управляем доступностью обеих кнопок "Добавить" и "Удалить"
		// дополнительную строку в силу того, что Раздел 3 содержит более одного
		// многострочного блока.
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);
		КнопкаУдалить  = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если (КнопкаДобавить <> Неопределено) И (КнопкаУдалить <> Неопределено) Тогда

			ИмяМногострочногоБлока = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
			Если ИмяМногострочногоБлока = Неопределено Тогда
				Если ИмяТекущейСтраницыПанели = "Раздел2_3"
				 Или  ИмяТекущейСтраницыПанели = "Раздел2_4"
				 Или  ИмяТекущейСтраницыПанели = "Раздел2_5"
				 Или  ИмяТекущейСтраницыПанели = "Раздел4" Тогда

					// В полях табличного документа перечисленных страниц
					// имеются по одному многострочному блоку. Поэтому
					// для них видимость кнопки <Добавить> устанавливаем всегда.
					КнопкаДобавить.Доступность = Истина;

				Иначе
					КнопкаДобавить.Доступность = Ложь;
					КнопкаУдалить.Доступность  = Ложь;

				КонецЕсли;

			Иначе
				Если ИмяМногострочногоБлока = мИдГруппы8
				 Или ИмяМногострочногоБлока = мИдГруппы9
				 Или ИмяМногострочногоБлока = мИдГруппы13
				 Или ИмяМногострочногоБлока = мИдГруппы13 Тогда

					// Многострочные блоки заполняются автоматически,
					// поэтому для них кнопки делаем невидимыми.
					КнопкаДобавить.Доступность = Ложь;
					КнопкаУдалить.Доступность  = Ложь;

				Иначе
					КнопкаДобавить.Доступность = Истина;
					КнопкаУдалить.Доступность  = Истина;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью кнопок "<" и ">" листания страниц
// многостраничных разделов формы
//
// Параметры:
//  НомерТекущейСтраницы - число, порядковый номер текущей страницы;
//  КоличествоСтраниц    - число, количество страниц многостраничного раздела;
//  ИмяТекСтраницы       - строка, имя текущей страницы основной панели формы.
//
Процедура ДоступностьКнопокЛистания(НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели)

	ДоступностьКнопкаПредыдущаяСтраница = Ложь;
	ДоступностьКнопкаСледующаяСтраница  = Ложь;

	Если НомерТекущейСтраницы > 1 Тогда
		ДоступностьКнопкаПредыдущаяСтраница = Истина;
	КонецЕсли;

	Если НомерТекущейСтраницы < КоличествоСтраниц Тогда
		ДоступностьКнопкаСледующаяСтраница = Истина;
	КонецЕсли;

	ЭлементыФормы["КнопкаПредыдущаяСтраница" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаПредыдущаяСтраница;
	ЭлементыФормы["КнопкаСледующаяСтраница"  + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаСледующаяСтраница;
	
КонецПроцедуры // ДоступностьКнопокЛистания()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	// сделано, для того, чтобы не переделывать процедуры и функции где есть имя Лист02
	//ИмяТекущейСтраницыПанели = "Лист02";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
	
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 240, 200) Тогда
			ОписаниеЯчейки    = "Либо вручную, либо автоматически";
		КонецЕсли;
	Попытка
	// Попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

	КонецЕсли;

	
	Попытка
	// Попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПолеТабличногоДокументаВсеРазделыПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// ЗаполнитьСведенияОбФЛ
// Считывает данные из справочников с помощью стандартной функции и размещает на листе ФизЛицо
//
Процедура ЗаполнитьСведенияОбФЛ()
	Перем ТаблицаСтраницРаздела;

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		Возврат;
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");
	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");
		// Инициализируем данные о УП
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);

	// Пытаемся заполнить лист ФизЛица, сохраняя принцип Если данные есть - то не замещаем, если нет, то пишем
	// 1. Найти лист с таким же ФИО
	// 2. Если листа нет, то добавим новый и туда все запишем

	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если мВПрограммеИзмененаОрганизация Тогда
	// Выбрали новую организацию, нужно удалить листы ФЛ от прошлой фирмы
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			Для Инд = 1 По ТаблицаСтраницРаздела.Количество() Цикл
				//ИзменитьТаблицуПараметровАвтозаполнения(-1,"ФизЛица");
				УдалитьДополнительнуюСтраницу("ФизЛица");

				Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
					ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокументаФизЛица"]);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;
	
	КонецЕсли;

	ОбновитьСтруктуруМногостраничныхРазделов("ФизЛица");

	Если ПустаяСтрока(мИННДиректор) Тогда

		ФИОДиректора = мТитульный.Области.ОргДиректор.Значение;
		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ СвязьУстановлена Тогда
				// Добавляем новую страницу для вывода туда необходимых данных

				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					ВставитьДополнительнуюСтраницу("ФизЛица");
				КонецЕсли;

			Иначе

				// установим текущую страницу по связи ТекИндекс
				Если Не ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда
					ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Истина;
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
					ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Ложь;
					Иначе
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
				КонецЕсли;

			КонецЕсли;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1, Истина);
			ОбновитьСтруктуруМногостраничныхРазделов("ФизЛица");

		КонецЕсли; // Если ФИО пусто
		//ОпределитьПредставлениеДопСтраниц();
	КонецЕсли;

	// Бухгалтер
	Если ПустаяСтрока(мИННБухгалтер) Тогда

		ФИОБухгалтера = мТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
		// Если в базе есть введенные данные по бухгалтеру, тогда работаем

			СвязьУстановлена = Ложь;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ СвязьУстановлена Тогда

			// Добавляем новую страницу для вывода туда необходимых данных
			// В случае, если чистый лист уже существует, то пишем в него

				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					ВставитьДополнительнуюСтраницу("ФизЛица");
				КонецЕсли;

			Иначе
				// установим текущую страницу по связи ТекИндекс
				Если Не ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда
					ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Истина;
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
					ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Ложь;
				Иначе
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
				КонецЕсли;

			КонецЕсли;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2, Истина);
			ОбновитьСтруктуруМногостраничныхРазделов("ФизЛица");

		КонецЕсли; // Если ФИО нет
	КонецЕсли;

	// УпПред
	Если ПустаяСтрока(мИННУпПред) Тогда

		ФИОУпПред = мТитульный.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИОУпПред) Тогда
		// Если в данных есть введенный УП тогда берем его сведения

			Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
				Возврат;
			КонецЕсли;
			СвязьУстановлена = Ложь;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОУпПред Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ СвязьУстановлена Тогда
				// Добавляем новую страницу для вывода туда необходимых данных
				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					ВставитьДополнительнуюСтраницу("ФизЛица");
				КонецЕсли;

				Иначе
				// установим текущую страницу по связи ТекИндекс

			Если Не ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда
				ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Истина;
				ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
				ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Ложь;
				Иначе
				ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
			КонецЕсли;

			КонецЕсли;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3, Истина);
			ОбновитьСтруктуруМногостраничныхРазделов("ФизЛица");

		КонецЕсли; // Пустое ФИО
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбФЛ()

// ВыводДанныхОФизическомЛице
// Выводит данные на лист физлица, лист должен быть активным
// Параметры
// СвязьУстановлена - Если Истина, то данные в ячейки записываются не проверяя на пустоту хранящегося там значения
// предпологается, что в этом случае, лист пуст
// СвязьУстановлена - Ложь - Лист с данными по ФИО найден и данные нужно заменять, только если пустота в ячейки
// Данные
// ТипДанных - что выводим может быть 1. Руководитель 2. Бухгалтер 3. УП
//
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";

	Пол = 0;

	ДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	// Заполним ИНН/КПП предприятия на новой странице

	Для НомЯчейки = 1 По 12 Цикл
		ЦифраИНН = Сред(мИННЮЛ, НомЯчейки, 1);
		мФизЛица       .Области["ИНН1_" + Строка(НомЯчейки)].Значение = ЦифраИНН;
	КонецЦикла; 

	Для НомЯчейки = 1 По 9 Цикл
		ЦифраКПП = Сред(мКППЮЛ, НомЯчейки, 1);
		мФизЛица       .Области["КПП1_" + Строка(НомЯчейки)].Значение = ЦифраКПП;
	КонецЦикла;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда
		мФизЛица.Области.ФизЛицФИО.Значение = ФИО;
	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицСлТел.Значение = Тел;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицСлТел.Значение) Тогда
				мФизЛица.Области.ФизЛицСлТел.Значение = Тел;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДомТел.Значение = Тел;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДомТел.Значение) Тогда
				мФизЛица.Области.ФизЛицДомТел.Значение = Тел;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокВид.Значение = ВидУдЛичн;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокВид.Значение) Тогда
				мФизЛица.Области.ФизЛицДокВид.Значение = ВидУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДок", 2, КодУдЛичн);
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДок1.Значение + мФизЛица.Области.ФизЛицДок2.Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДок", 2, КодУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;


	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокСерияНомер.Значение = СерияУдЛичн + "  " + НомерУдЛичн;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокСерияНомер.Значение) Тогда
				мФизЛица.Области.ФизЛицДокСерияНомер.Значение = СерияУдЛичн + "  " + НомерУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				// особенность этой декларации, здесь дата рожд, разбита по ячейкам
				// мФизЛица.Области.ФизЛицДатаР.Значение = ДатаРожд;
				стрУказаннаяДата1 = Формат(ДатаРожд, "ДФ=""ддММгггг""");
				мДатаРождСлиста = стрУказаннаяДата1;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДатаРожд", 8, стрУказаннаяДата1);
			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(мДатаРождСлиста) Тогда
					стрУказаннаяДата1 = Формат(ДатаРожд, "ДФ=""ддММгггг""");
					мДатаРождСлиста = стрУказаннаяДата1;
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДатаРожд", 8, стрУказаннаяДата1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				мФизЛица.Области.ФизЛицМестоР.Значение = МестоРожд;
				Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицМестоР.Значение) Тогда
					мФизЛица.Области.ФизЛицМестоР.Значение = МестоРожд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокВыдан.Значение = ОрганВыданУдЛичн;
		Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокВыдан.Значение) Тогда
				мФизЛица.Области.ФизЛицДокВыдан.Значение = ОрганВыданУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка

		Если (НЕ СвязьУстановлена) Тогда
			Если НЕ ((РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаУдЛичн)) И (ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")))) Тогда
				// Если пустое значение даты, то писать не нужно
				стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДокДата", 8, стрУказаннаяДата1);
				мДатаДок = ДатаУдЛичн;
			КонецЕсли;
		Иначе
			Если (мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"))) Тогда
				Если НЕ ((РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаУдЛичн)) И (ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")))) Тогда
					// Если пустое значение даты, то писать не нужно
					стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДокДата", 8, стрУказаннаяДата1);
					мДатаДок = ДатаУдЛичн;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, ИндексМЖ);
			мФизЛицИнд = ИндексМЖ;
		Иначе
			Если ПустаяСтрока(мФизЛицИнд) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, ИндексМЖ);
				мФизЛицИнд = ИндексМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицСубъект.Значение = СубъектМЖ;
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицСубъект.Значение) Тогда
				мФизЛица.Области.ФизЛицСубъект.Значение = СубъектМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, КодСубъектМЖ);
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицС1.Значение + мФизЛица.Области.ФизЛицС2.Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, КодСубъектМЖ);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицРайон.Значение = РайонМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицРайон.Значение) Тогда
				мФизЛица.Области.ФизЛицРайон.Значение = РайонМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицГород.Значение = ГородМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицГород.Значение) Тогда
				мФизЛица.Области.ФизЛицГород.Значение = ГородМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицНП.Значение = НПунктМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицНП.Значение) Тогда
				мФизЛица.Области.ФизЛицНП.Значение = НПунктМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицУлица.Значение = УлицаМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицУлица.Значение) Тогда
				мФизЛица.Области.ФизЛицУлица.Значение = УлицаМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДом.Значение = ДомМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДом.Значение) Тогда
				мФизЛица.Области.ФизЛицДом.Значение = ДомМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицКорпус.Значение = КорпусМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицКорпус.Значение) Тогда
				мФизЛица.Области.ФизЛицКорпус.Значение = КорпусМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицКвартира.Значение = КвартираМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицКвартира.Значение) Тогда
				мФизЛица.Области.ФизЛицКвартира.Значение = КвартираМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			ПолМ = мФизЛица.Области.ФизЛицПолМ.Значение;
			ПолЖ = мФизЛица.Области.ФизЛицПолЖ.Значение;
			Если (НЕ СвязьУстановлена) Тогда
				мФизЛица.Области.ФизЛицПолМ.Значение = ?(Пол = 1, "V", "");
				мФизЛица.Области.ФизЛицПолЖ.Значение = ?(Пол = 2, "V", "");
			Иначе
				Если (РегламентированнаяОтчетность.ПустоеЗначение(ПолЖ)) И (РегламентированнаяОтчетность.ПустоеЗначение(ПолМ)) Тогда
					мФизЛица.Области.ФизЛицПолМ.Значение = ?(Пол = 1, "V", "");
					мФизЛица.Области.ФизЛицПолЖ.Значение = ?(Пол = 2, "V", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда

		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, стрУказаннаяДата);

	КонецЕсли;

КонецПроцедуры //ВыводДанныхОФизическомЛице

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Функция КолвоЛистоВРазделе(ИмяСтраницыПанели)
// получает количество листов в НЕмногостраничном листе, с несколькими или одним листом
//
Функция КолвоЛистоВРазделе(ИмяСтраницыПанели)

ФлагИскл = 0;
КолЛистовВОдномерномЛисте = 1;

	Пока ФлагИскл = 0 Цикл

		Если КолЛистовВОдномерномЛисте=1 Тогда
			КолЛистовВОдномерномЛистеСтр = "";
		Иначе
			КолЛистовВОдномерномЛистеСтр = Формат(Число(КолЛистовВОдномерномЛисте)) + "_";
		КонецЕсли;

		Попытка
		а = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области["НомСтр" + КолЛистовВОдномерномЛистеСтр + "1"].Значение;
		КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте + 1;

		Исключение
			ФлагИскл = 1;
			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте - 1;
		КонецПопытки;
	КонецЦикла;// пока искл = 0

	Возврат КолЛистовВОдномерномЛисте;
КонецФункции // КолвоЛистоВРазделе(ИмяСтраницыПанели)

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	СохрЗначВКвадратиках();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьСведенияОбФЛ();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем показом статика, отображающего номер текущей страницы
	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
		ПроставитьНаВсехЛистах(стрУказаннаяДата, "ДатаПодписи", , "ФизЛица", , Ложь);
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина)

	Перем ТаблицаСтраницРаздела;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();

	Пока ПереборЗнач > 0 Цикл

		ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;

		Если ТолькоДляЛиста <> Неопределено Тогда
			Если ТолькоДляЛиста <> ИмяДляРасчета Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЛистИсключение <> Неопределено Тогда
			Если ЛистИсключение = ИмяДляРасчета Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела) Тогда
			
			Колво = КолвоЛистоВРазделе(ИмяДляРасчета);

			Для Инд = 1 По Колво Цикл
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
			КонецЦикла;

		Иначе

			ОбновитьСтруктуруМногостраничныхРазделов(ИмяДляРасчета);

			ИндА = 0;
			АктивныйНомерСтр = 0;
			Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

				ИндА = ИндА + 1;

				Колво = КолвоЛистоВРазделе(ИмяДляРасчета);

				Для Инд77 = 1 По Колво Цикл

					Если Страница.АктивнаяСтраница Тогда
						РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
					Иначе

						Если НЕ ТолькоАктивныйЛистМногостраничнойчасти Тогда
							Для Инд = 1 По СтрДлина(Значение) Цикл
									Страница.Данные.Вставить(ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", "") + Строка(Инд), Сред(Значение, Инд, 1));
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			//ПоказатьСтраницуМногостраничногоРаздела(АктивныйНомерСтр, ИмяДляРасчета, Истина);

		КонецЕсли;

		ПереборЗнач = ПереборЗнач - 1;

	КонецЦикла;

КонецПроцедуры // ПроставитьНаВсехЛистах()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛицИнд);

		//СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		//   + мФизЛица.Области.ФизЛицИнд2.Значение
		//   + мФизЛица.Области.ФизЛицИнд3.Значение
		//   + мФизЛица.Области.ФизЛицИнд4.Значение
		//   + мФизЛица.Области.ФизЛицИнд5.Значение
		//   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			мФизЛицИнд = Индекс;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
		КонецЕсли;

	ИначеЕсли Область.Имя = "ФизЛицПолМ" Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
			Возврат;
		Иначе
			Область.Значение = "V";
			мФизЛица.Области.ФизЛицПолЖ.Значение = "";
		КонецЕсли;
	ИначеЕсли Область.Имя = "ФизЛицПолЖ" Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
			Возврат;
		Иначе
			Область.Значение = "V";
			мФизЛица.Области.ФизЛицПолМ.Значение = "";
		КонецЕсли;
	КонецЕсли;

	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	
	Если (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Если ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ" Тогда
				мДатаРождСлиста = стрУказаннаяДата;
			КонецЕсли;

			Если ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА" Тогда
				мДатаДок = УказанннаяДата;
			КонецЕсли;

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// Процедура - обработчик события "Выбор" поля табличного документа на странице "Раздел 1"
// основной панели формы. Для ячеек, содержащих сумму акциза к уплате (строки по коду 030),
// выдает стандартный диалог для ввода суммы акциза.
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	
	Если Лев(Область.Имя, 8) = "КодОКАТО" Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 9, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КодОКАТО_" + НомерСтроки);
		Если ВвестиСтроку(НачЗначение, "Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("КодОКАТО_" + НомерСтроки, НачЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 11, НачЗначение);
					Модифицированность = Истина;
				КонецЕсли;
			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;
	
	ИначеЕсли Лев(Область.Имя, 11) = "СуммаНалога" Тогда
		СтандартнаяОбработка = Ложь;

		ИмяТекОбласти = Лев(Область.Имя, 12);
		Если ИмяТекОбласти = "СуммаНалога1" Тогда
			СуммаНалога = мСуммаНалога_1;
		ИначеЕсли ИмяТекОбласти = "СуммаНалога2" Тогда
			СуммаНалога = мСуммаНалога_2;
		ИначеЕсли ИмяТекОбласти = "СуммаНалога3" Тогда
			СуммаНалога = мСуммаНалога_3;
		ИначеЕсли ИмяТекОбласти = "СуммаНалога4" Тогда
			СуммаНалога = мСуммаНалога_4;
		ИначеЕсли ИмяТекОбласти = "СуммаНалога5" Тогда
			СуммаНалога = мСуммаНалога_5;
		КонецЕсли;

		// выдаем стандартный диалог для ввода суммы акциза
		Если ВвестиЧисло(СуммаНалога, "Введите сумму акциза", 15, 2) Тогда

			Если ИмяТекОбласти = "СуммаНалога1" Тогда
				мСуммаНалога_1 = СуммаНалога;
			ИначеЕсли ИмяТекОбласти = "СуммаНалога2" Тогда
				мСуммаНалога_2 = СуммаНалога;
			ИначеЕсли ИмяТекОбласти = "СуммаНалога3" Тогда
				мСуммаНалога_3 = СуммаНалога;
			ИначеЕсли ИмяТекОбласти = "СуммаНалога4" Тогда
				мСуммаНалога_4 = СуммаНалога;
			ИначеЕсли ИмяТекОбласти = "СуммаНалога5" Тогда
				мСуммаНалога_5 = СуммаНалога;
			КонецЕсли;

			// заполняем введенную сумму налога в ячейках.
			//ЗаполнитьСуммы_в_Квадратах();
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 15, СуммаНалога, Истина);
			Модифицированность = Истина;

		КонецЕсли;

// *********************
	ИначеЕсли Найти(Область.Имя,"КБК") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		НомерСтроки = Сред(Область.Имя, 4, 1);
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КБК_" + НомерСтроки);

		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2004 Тогда
			// мКБК2005Раздел1
				СписокКБК = мКБК2004Раздел1;
			Иначе
				СписокКБК = мКБК2005Раздел1;
			КонецЕсли;

			ПоисковаяСтрока = СписокКБК.Найти(НачЗначение, "Код");
			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = СписокКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		Иначе

			Если Год(ДатаПодписи) <= 2004 Тогда
				КолЗнаков = 7;
			Иначе
				КолЗнаков = 20;
			КонецЕсли;
			
			Если НЕ ВвестиСтроку(НачЗначение, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = НачЗначение;
			КонецЕсли;

		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			Если ОбновитьПеременныеМодуля("КБК_" + НомерСтроки, Значение) Тогда
				Модифицированность = Истина;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя), 20, Значение);
			КонецЕсли;

		Конецесли;

//*********************


	КонецЕсли;

	

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.3"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.4"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2_4ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.5"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел2_5ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_5ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 4"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью кнопок управления дополнительными строками.
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа, не участвующих в расчете других показателей отчета..
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ТабличныйДокументПолеВводаБезРасчетаПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаБезРасчетаПриИзменении()

// Процедура - обработчик события при изменении значения полей для отметки
// типа налогоплательщика.
//
Процедура ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении(Элемент)

	// Заполняем дату подписи в соответствующих ячейках
	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении()

// Процедура - обработчик события при изменении значения полей ввода
// ИНН и ФИО должностных лиц организации на титульном листе.
//
Процедура ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении(Элемент)

	// Собираем значение показателей из отдельных ячеек
	СохрЗначВКвадратиках();
	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную страницу
// на странице "Физ.лица" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуФизЛицаНажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную страницу
// на странице "Физ.лица" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуФизЛицаНажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаФизЛицаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаПредыдущаяСтраницаФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаФизЛицаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Физ.лица"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуФизЛицаНажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуФизЛицаНажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела1Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу();
	
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную страницу
// на странице "Раздел 1" основной панели формы.
//
Процедура КнопкаУдалитьДопСтраницуРаздела1Нажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу();
	
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела1Нажатие(Элемент)
	
	ОткрытьФормуСпискаДопСтраниц();
	
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела1Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 1"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела1Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаСледующаяСтраницаРаздела1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 3.3" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 3.3" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела2_1Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела2_1Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела2_1Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела2_1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.1"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела2_1Нажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела2_1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.1"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела2_1Нажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2_1Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.1"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела2_1Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела2_1Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.1" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_1Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.1" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_1Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_1Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела2_2Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела2_2Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела2_2Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела2_2Нажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.2"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела2_2Нажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.2"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела2_2Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.2" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.2" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_2Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела2_3Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела2_3Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела2_3Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.4"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела2_4Нажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.4"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела2_4Нажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.4" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_4Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.4" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_4Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 2.4"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела2_4Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела2_4Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 2.4"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела2_4Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела2_3Нажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 2.3"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела2_3Нажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.3"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела2_3Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.3" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_3Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.4" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_3Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_3Нажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 2.4"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела4Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздела4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 2.5" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_5Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_5Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 2.5" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_5Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_5Нажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела4Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела4Нажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела4Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 4"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела4Нажатие(Элемент)

	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 4"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела4Нажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздела4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную строку
// на странице "Раздел 4" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел4Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную строку
// на странице "Раздел 4" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел4Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4Нажатие()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Титульный" основной панели формы.
// Инициирует сохранение показателей отчета, отображаемых в отдельных ячейках
// (типа ОГРН, КПП обособленного подразделения и т.д.) и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаТитульныйПриИзменении(Элемент)

	// Собираем значение показателей из отдельных ячеек
	СохрЗначВКвадратиках();
	// Выводим дату подписания отчета
	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 010 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки010ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки010ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 020 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки020ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки020ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 030 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки030ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки030ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 040 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки040ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки040ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 050 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки050ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки050ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 060 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки060ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки060ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 070 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки070ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки070ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 100 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки100ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы10);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки100ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 110 табличного документа на странице "Раздел 2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2Строки110ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы11);

	Расчет("Раздел2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строки110ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 050 табличного документа на странице "Раздел 2.1" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1Строки050ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы12);

	Расчет("Раздел2_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1Строки050ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 070 табличного документа на странице "Раздел 2.1" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1Строки070ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы13);

	Расчет("Раздел2_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1Строки070ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 050 табличного документа на странице "Раздел 2.2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2Строки050ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы14);

	Расчет("Раздел2_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2Строки050ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 070 табличного документа на странице "Раздел 2.2" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2Строки070ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы15);

	Расчет("Раздел2_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2Строки070ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 050 табличного документа на странице "Раздел 2.3" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_3Строки050ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы16);

	Расчет("Раздел2_3");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3Строки050ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 050 табличного документа на странице "Раздел 2.4" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_4Строки050ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы17);

	Расчет("Раздел2_4");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4Строки050ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 010 табличного документа на странице "Раздел 2.5" основной
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_5Строки010ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы18);

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_5Строки010ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 3" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3ПриИзменении(Элемент)

	Расчет("Раздел3");

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек по строкам 070 табличного документа на странице "Раздел 4" основной
// панели формы. Вызывает обновление структуры данных многострочного блока
// и устанавлвает признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел4Строки070ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы19);

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел4Строки070ПриИзменении()

Процедура КнопкаЗаполнитьРаздел2Нажатие(Элемент)

	ЗаполнитьРаздел2();

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Приложение 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Приложение 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Приложение 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Приложение 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_5";
	СтрокаУровня1.Представление            = "Приложение 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Приложение 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Приложение 7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// загружает данные из Списков
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005Раздел1" Тогда
					НовСтрока = мКБК2005Раздел1.Добавить();
				КонецЕсли;

				Если РазделВМакете = "КБК2004Раздел1" Тогда
					НовСтрока = мКБК2004Раздел1.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ПодакцизныеТоварыРаздел2_1" Тогда
					НовСтрока = мПодакцизныеТоварыРаздел2_1.Добавить();
				КонецЕсли;

				Если РазделВМакете = "НалогообложениеАкцизами" Тогда
					НовСтрока = мНалогообложениеАкцизами.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ЕдиницыИзмерения" Тогда
					НовСтрока = мЕдиницыИзмерения.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// ПолеТабличногоДокументаРаздел2Выбор
// Событие "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;

	Если (Лев(ИмяЯчейки, 13) = "П000020001002") Или (Лев(ИмяЯчейки, 13) = "П000020001004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020002002") Или (Лев(ИмяЯчейки, 13) = "П000020002004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020003002") Или (Лев(ИмяЯчейки, 13) = "П000020003004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020004002") Или (Лев(ИмяЯчейки, 13) = "П000020004004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020005002") Или (Лев(ИмяЯчейки, 13) = "П000020005004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020006002") Или (Лев(ИмяЯчейки, 13) = "П000020006004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020007002") Или (Лев(ИмяЯчейки, 13) = "П000020007004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020010002") Или (Лев(ИмяЯчейки, 13) = "П000020010004")
	Или (Лев(ИмяЯчейки, 13)  = "П000020011002") Или (Лев(ИмяЯчейки, 13) = "П000020011004") Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		// Получим номер группы
		НомерГруппы = Сред(ИмяЯчейки, 9, 2);

		Если Лев(ИмяЯчейки, 13) = "П0000200" + НомерГруппы + "002" Тогда
			ТекущееПоисковоеЗначение = мРаздел2.Области["П0000200" + НомерГруппы + "002_" + НомерСтроки].Значение;
			Примечание = "Укажите вид подакцизного товара";
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли Лев(ИмяЯчейки, 13) = "П0000200" + НомерГруппы + "004" Тогда
			ТекущееПоисковоеЗначение = мРаздел2.Области["П0000200" + НомерГруппы + "004_" + НомерСтроки].Значение;
			Примечание = "Укажите код вида под акцизного товара";
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		// Признак отказа от выбора
		Если мАвтоВыборКодов Тогда
			Если ВвестиСтроку(ТекущееПоисковоеЗначение, Примечание) Тогда
				Область.Значение = ТекущееПоисковоеЗначение;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденнаяСтрока = мПодакцизныеТоварыРаздел2_1.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мПодакцизныеТоварыРаздел2_1.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мПодакцизныеТоварыРаздел2_1.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2.Области["П0000200" + НомерГруппы + "002" + "_" + НомерСтроки].Значение = Назв; // текст
		мРаздел2.Области["П0000200" + НомерГруппы + "004" + "_" + НомерСтроки].Значение = Код;  // код
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаРаздел2_1Выбор
// Обработчик события "Выбор" Раздела 2_1
//
Процедура ПолеТабличногоДокументаРаздел2_1Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;

	Если Найти(ИмяЯчейки, "П000210005005") > 0 Тогда
	
		Если НЕ мАвтоВыборКодов Тогда
			СтандартнаяОбработка = Ложь;
			ПоисковоеЗначение = Область.Значение;
			НайденнаяСтрока = мРазмерСтавкиПрил1.Найти(ПоисковоеЗначение, "Код");
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = мРазмерСтавкиПрил1.ВыбратьСтроку("Выбор ставки", НайденнаяСтрока);
			Иначе
				Результат = мРазмерСтавкиПрил1.ВыбратьСтроку("Выбор ставки");
			КонецЕсли;

			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;

			Область.Значение = Результат.Получить(0);

		КонецЕсли;
	
	ИначеЕсли (ИмяЯчейки = "П000210001000")
	Или  (ИмяЯчейки = "П000210002000")
	Или  (ИмяЯчейки = "П000210003000")
	Или  (ИмяЯчейки = "П000210004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000210001000") Или (ИмяЯчейки = "П000210003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000210002000") Или (ИмяЯчейки = "П000210004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000210001000") Или (ИмяЯчейки = "П000210002000") Тогда
			ТЗДляВыбора = мПодакцизныеТоварыРаздел2_1;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000210003000") Или (ИмяЯчейки = "П000210004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мРаздел2_1.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мРаздел2_1.Области["П000210001000"].Значение = Назв; // текст
			мРаздел2_1.Области["П000210002000"].Значение = Код;  // код
			Модифицированность = Истина;
		ИначеЕсли НомерГруппы = 2 Тогда
			мРаздел2_1.Области["П000210003000"].Значение = Назв; // текст
			мРаздел2_1.Области["П000210004000"].Значение = Код;  // код
			Модифицированность = Истина;
		КонецЕсли;


	ИначеЕсли Лев(ИмяЯчейки, 13) = "П000210005004" Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		ТекущееПоисковоеЗначение = мРаздел2_1.Области[Область.Имя].Значение;

		НайденнаяСтрока = мНалогообложениеАкцизами.Найти(ТекущееПоисковоеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2_1.Области["П000210005004_" + НомерСтроки].Значение = Код; // код
		Модифицированность = Истина;

	КонецЕсли;
	

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1Выбор

Процедура ПолеТабличногоДокументаРаздел2_2Выбор(Элемент, Область, СтандартнаяОбработка)
	ИмяЯчейки = Область.Имя;

	Если Лев(ИмяЯчейки, 13) = "П000220005004" Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		ТекущееПоисковоеЗначение = мРаздел2_2.Области[Область.Имя].Значение;

		НайденнаяСтрока = мНалогообложениеАкцизами.Найти(ТекущееПоисковоеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2_2.Области["П000220005004_" + НомерСтроки].Значение = Код; // код

	ИначеЕсли (ИмяЯчейки = "П000220001000")
	Или  (ИмяЯчейки = "П000220002000")
	Или  (ИмяЯчейки = "П000220003000")
	Или  (ИмяЯчейки = "П000220004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000220001000") Или (ИмяЯчейки = "П000220003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000220002000") Или (ИмяЯчейки = "П000220004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000220001000") Или (ИмяЯчейки = "П000220002000") Тогда
			ТЗДляВыбора = мПодакцизныеТоварыРаздел2_1;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000220003000") Или (ИмяЯчейки = "П000220004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мРаздел2_2.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мРаздел2_2.Области["П000220001000"].Значение = Назв; // текст
			мРаздел2_2.Области["П000220002000"].Значение = Код;  // код
			Модифицированность = Истина;
		ИначеЕсли НомерГруппы = 2 Тогда
			мРаздел2_2.Области["П000220003000"].Значение = Назв; // текст
			мРаздел2_2.Области["П000220004000"].Значение = Код;  // код
			Модифицированность = Истина;
		КонецЕсли;


	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_3Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;

	Если (ИмяЯчейки = "П000230001000")
	Или  (ИмяЯчейки = "П000230002000")
	Или  (ИмяЯчейки = "П000230003000")
	Или  (ИмяЯчейки = "П000230004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000230002000") Или (ИмяЯчейки = "П000230004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230002000") Тогда
			ТЗДляВыбора = мПодакцизныеТоварыРаздел2_1;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000230003000") Или (ИмяЯчейки = "П000230004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мРаздел2_3.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Модифицированность = Истина;
		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мРаздел2_3.Области["П000230001000"].Значение = Назв; // текст
			мРаздел2_3.Области["П000230002000"].Значение = Код;  // код
		ИначеЕсли НомерГруппы = 2 Тогда
			мРаздел2_3.Области["П000230003000"].Значение = Назв; // текст
			мРаздел2_3.Области["П000230004000"].Значение = Код;  // код
		КонецЕсли;

	ИначеЕсли Лев(ИмяЯчейки, 13) = "П000230005004" Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		ТекущееПоисковоеЗначение = мРаздел2_3.Области[Область.Имя].Значение;

		НайденнаяСтрока = мНалогообложениеАкцизами.Найти(ТекущееПоисковоеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2_3.Области["П000230005004_" + НомерСтроки].Значение = Код; // код

	ИначеЕсли (ИмяЯчейки = "П000230001000")
	Или  (ИмяЯчейки = "П000230002000")
	Или  (ИмяЯчейки = "П000230003000")
	Или  (ИмяЯчейки = "П000230004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000230002000") Или (ИмяЯчейки = "П000230004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000230001000") Или (ИмяЯчейки = "П000230002000") Тогда
			ТЗДляВыбора = мПодакцизныеТоварыРаздел2_1;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000230003000") Или (ИмяЯчейки = "П000230004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мРаздел2_3.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мРаздел2_3.Области["П000230001000"].Значение = Назв; // текст
			мРаздел2_3.Области["П000230002000"].Значение = Код;  // код
		ИначеЕсли НомерГруппы = 2 Тогда
			мРаздел2_3.Области["П000230003000"].Значение = Назв; // текст
			мРаздел2_3.Области["П000230004000"].Значение = Код;  // код
		КонецЕсли;


	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_4Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;

	Если Лев(ИмяЯчейки, 13) = "П000240005004" Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		ТекущееПоисковоеЗначение = мРаздел2_4.Области[Область.Имя].Значение;

		НайденнаяСтрока = мНалогообложениеАкцизами.Найти(ТекущееПоисковоеЗначение, "Код");
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мНалогообложениеАкцизами.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел2_4.Области["П000240005004_" + НомерСтроки].Значение = Код; // код
		Модифицированность = Истина;

	ИначеЕсли (ИмяЯчейки = "П000240001000")
	Или  (ИмяЯчейки = "П000240002000")
	Или  (ИмяЯчейки = "П000240003000")
	Или  (ИмяЯчейки = "П000240004000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если (ИмяЯчейки = "П000240001000") Или (ИмяЯчейки = "П000240003000")Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли (ИмяЯчейки = "П000240002000") Или (ИмяЯчейки = "П000240004000") Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		Если (ИмяЯчейки = "П000240001000") Или (ИмяЯчейки = "П000240002000") Тогда
			ТЗДляВыбора = мПодакцизныеТоварыРаздел2_1;
			НомерГруппы = 1;
		ИначеЕсли (ИмяЯчейки = "П000240003000") Или (ИмяЯчейки = "П000240004000") Тогда
			ТЗДляВыбора = мЕдиницыИзмерения;
			НомерГруппы = 2;
		КонецЕсли;

		ТекущееПоисковоеЗначение = мРаздел2_4.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		Если НомерГруппы = 1 Тогда
		// Запишем на лист
			мРаздел2_4.Области["П000240001000"].Значение = Назв; // текст
			мРаздел2_4.Области["П000240002000"].Значение = Код;  // код
			Модифицированность = Истина;
		ИначеЕсли НомерГруппы = 2 Тогда
			мРаздел2_4.Области["П000240003000"].Значение = Назв; // текст
			мРаздел2_4.Области["П000240004000"].Значение = Код;  // код
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;
	НомерАдреса = "";

	Если (Найти(ИмяЯчейки, "ПочтИнд1") > 0)
	   Или (ИмяЯчейки = "П000040001201") // Субъект
	   Или (ИмяЯчейки = "П000040001300") // район
	   Или (ИмяЯчейки = "П000040001400") // город
	   Или (ИмяЯчейки = "КодСуб1_1") // коды субъекта
	   Или (ИмяЯчейки = "КодСуб1_1")
	   Или (ИмяЯчейки = "П000040001500") // НП
	   Или (ИмяЯчейки = "П000040001600") // Улица
	   Или (ИмяЯчейки = "П000040001700") // дом
	   Или (ИмяЯчейки = "П000040001800") // корпус
	   Или (ИмяЯчейки = "П000040001900") Тогда // кв

		НомерАдреса = "1";
	КонецЕсли;

	Если (Найти(ИмяЯчейки, "ПочтИнд2") > 0)
	   Или (ИмяЯчейки = "П000040003201") // Субъект
	   Или (ИмяЯчейки = "П000040003300") // район
	   Или (ИмяЯчейки = "П000040003400") // город
	   Или (ИмяЯчейки = "КодСуб2_1") // коды субъекта
	   Или (ИмяЯчейки = "КодСуб2_1")
	   Или (ИмяЯчейки = "П000040003500") // НП
	   Или (ИмяЯчейки = "П000040003600") // Улица
	   Или (ИмяЯчейки = "П000040003700") // дом
	   Или (ИмяЯчейки = "П000040003800") // корпус
	   Или (ИмяЯчейки = "П000040003900") Тогда // кв

		НомерАдреса = "2";
	КонецЕсли;

	Если НомерАдреса <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс = "";

		Для Инд = 1 По 6 Цикл
			//мРаздел2_2.Области.ПочтИнд1_6
			ПочтИндекс = ПочтИндекс + мРаздел4.Области["ПочтИнд" + НомерАдреса + "_" + Строка(Инд)].Значение;
		КонецЦикла;

		Если НомерАдреса = "1" Тогда
			СубъектРФОб = мРаздел4.Области["П000040001201"];
			СубъектРФНом = мРаздел4.Области.КодСуб1_1.Значение + мРаздел4.Области.КодСуб1_2.Значение;
			РайонОб     = мРаздел4.Области["П000040001300"];
			ГородОб     = мРаздел4.Области["П000040001400"];
			НПОб        = мРаздел4.Области["П000040001500"];
			УлицаОб     = мРаздел4.Области["П000040001600"];
			ДомаОб      = мРаздел4.Области["П000040001700"];
			КорпусОб    = мРаздел4.Области["П000040001800"];
			КвартираОб  = мРаздел4.Области["П000040001900"];
		ИначеЕсли НомерАдреса = "2" Тогда
			СубъектРФОб = мРаздел4.Области["П000040003201"];
			СубъектРФНом = мРаздел4.Области.КодСуб2_1.Значение + мРаздел4.Области.КодСуб2_2.Значение;
			РайонОб     = мРаздел4.Области["П000040003300"];
			ГородОб     = мРаздел4.Области["П000040003400"];
			НПОб        = мРаздел4.Области["П000040003500"];
			УлицаОб     = мРаздел4.Области["П000040003600"];
			ДомаОб      = мРаздел4.Области["П000040003700"];
			КорпусОб    = мРаздел4.Области["П000040003800"];
			КвартираОб  = мРаздел4.Области["П000040003900"];
		КонецЕсли;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс

		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФНом); // код

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", СубъектРФОб.Значение);

		СтруктураАдресныхДанных.Вставить("Район", РайонОб.Значение);
		СтруктураАдресныхДанных.Вставить("Город", ГородОб.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", УлицаОб.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", ДомаОб.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", КорпусОб.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", КвартираОб.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "ПочтИнд" + НомерАдреса + "_", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "КодСуб" + НомерАдреса + "_", 2, Регион);

			Модифицированность = Истина;

			СубъектРФОб.Значение = НазваниеРегиона;
			РайонОб.Значение = Район;
			ГородОб.Значение = Город;
			НПОб.Значение = НаселенныйПункт;
			УлицаОб.Значение = Улица;

			ДомаОб.Значение = Дом;
			КорпусОб.Значение = Корпус;
			КвартираОб.Значение = Квартира;

		КонецЕсли;
	КонецЕсли;

	Если (ИмяЯчейки = "П000040005000")
	Или  (ИмяЯчейки = "П000040006000") Тогда

		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Если ИмяЯчейки = "П000040005000" Тогда
			ИмяКолонкиДляПоиска = "Название";
		ИначеЕсли ИмяЯчейки = "П000040006000" Тогда
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		ТЗДляВыбора = мЕдиницыИзмерения;
		НомерГруппы = 2;

		ТекущееПоисковоеЗначение = мРаздел4.Области[ИмяЯчейки].Значение;

		НайденнаяСтрока = ТЗДляВыбора.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = ТЗДляВыбора.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		мРаздел4.Области["П000040005000"].Значение = Назв; // текст
		мРаздел4.Области["П000040006000"].Значение = Код;  // код
		Модифицированность = Истина;


	ИначеЕсли (Лев(ИмяЯчейки, 13) = "П000040007002") Или (Лев(ИмяЯчейки, 13) = "П000040007003") Тогда

		// Если авто выбор отключен, то необходимо вводить в табличное поле!
		Если мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		// Получим номер строки
		НомерСтроки = Сред(ИмяЯчейки, 1 + Найти(ИмяЯчейки, "_"));
		// Получим номер группы
		НомерГруппы = Сред(ИмяЯчейки, 9, 2);

		Если Лев(ИмяЯчейки, 13) = "П0000400" + НомерГруппы + "002" Тогда
			ТекущееПоисковоеЗначение = мРаздел4.Области["П0000400" + НомерГруппы + "002_" + НомерСтроки].Значение;
			Примечание = "Укажите вид подакцизного товара";
			ИмяКолонкиДляПоиска = "Название";
			ИначеЕсли Лев(ИмяЯчейки, 13) = "П0000400" + НомерГруппы + "003" Тогда
			ТекущееПоисковоеЗначение = мРаздел4.Области["П0000400" + НомерГруппы + "003_" + НомерСтроки].Значение;
			Примечание = "Укажите код вида под акцизного товара";
			ИмяКолонкиДляПоиска = "Код";
		КонецЕсли;

		// Признак отказа от выбора
		Если мАвтоВыборКодов Тогда
			Если ВвестиСтроку(ТекущееПоисковоеЗначение, Примечание) Тогда
				Область.Значение = ТекущееПоисковоеЗначение;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденнаяСтрока = мПодакцизныеТоварыРаздел2_1.Найти(ТекущееПоисковоеЗначение, ИмяКолонкиДляПоиска);
		Если НайденнаяСтрока <> Неопределено Тогда
			ВыбранноеЗначение = мПодакцизныеТоварыРаздел2_1.ВыбратьСтроку("Выбор значения", НайденнаяСтрока);
		Иначе
			ВыбранноеЗначение = мПодакцизныеТоварыРаздел2_1.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Код = ВыбранноеЗначение.Получить(0);
		Назв = ВыбранноеЗначение.Получить(1);

		Если РегламентированнаяОтчетность.ПустоеЗначение(Код) Тогда
			Назв = "";
			Код = "";
		КонецЕсли;

		// Запишем на лист
		мРаздел4.Области["П0000400" + НомерГруппы + "002" + "_" + НомерСтроки].Значение = Назв; // текст
		мРаздел4.Области["П0000400" + НомерГруппы + "003" + "_" + НомерСтроки].Значение = Код;  // код
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

// ПолеТабличногоДокументаТитульныйВыбор
// Обработчик события "Выбор" для титульного листа декларации
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Попытка
		Если Область.Защита Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

	Если Найти(Область.Имя,"ТипОрг") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		АктивныйНомер = Число(Сред(Область.Имя, СтрДлина(Область.Имя), 1));

		Зн = 1;
		Модифицированность = Истина;

		Пока Зн <= 6 цикл
			Если АктивныйНомер=Зн Тогда
				Зн = Зн + 1;
			Иначе
				мТитульный.Области[ Сред(Область.Имя, 1,6) + Строка(Зн)].Значение = "";
				Зн = Зн + 1;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура возвращает таблицу значений информацией с листов ФизЛица. Строки таблицы
// соответствуют страницам раздела.
//
// Параметры:
//	СтруктураМногостраничныхРазделов - структура, на основании информации из которой
//			следует заполнить строки таблицы-результата. Если параметр не задан, то
//			будет использована аналогичная переменная модуля
//
// Возвращаемое значение:
//	ТаблицаЗначений с информацией из листов раздела ФизЛица
//
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицФИО = СтрДанных.ФизЛицФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДатаР = СтрДанных.ФизЛицДатаРожд1 + СтрДанных.ФизЛицДатаРожд2 + "." 
										+ СтрДанных.ФизЛицДатаРожд3 + СтрДанных.ФизЛицДатаРожд4 + "."
										+ СтрДанных.ФизЛицДатаРожд5 + СтрДанных.ФизЛицДатаРожд6
										+ СтрДанных.ФизЛицДатаРожд7 + СтрДанных.ФизЛицДатаРожд8;
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд1+СтрДанных.ФизЛицКодГражд2+СтрДанных.ФизЛицКодГражд3;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок1 + СтрДанных.ФизЛицДок2;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата1 + СтрДанных.ФизЛицДокДата2 + "."
										  + СтрДанных.ФизЛицДокДата3 + СтрДанных.ФизЛицДокДата4 + "."
										  + СтрДанных.ФизЛицДокДата5 + СтрДанных.ФизЛицДокДата6  
										  + СтрДанных.ФизЛицДокДата7 + СтрДанных.ФизЛицДокДата8;
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд1+СтрДанных.ФизЛицИнд2+СтрДанных.ФизЛицИнд3+СтрДанных.ФизЛицИнд4+СтрДанных.ФизЛицИнд5+СтрДанных.ФизЛицИнд6;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС1 + СтрДанных.ФизЛицС2;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции // ПолучитьДанныеФизЛиц()

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	
	Если БратьИзФормы Тогда
		
		ОбновитьСтруктуруМногострочныхРазделов();

		ОбновитьСтруктуруМногостраничныхРазделов();
		
		ПоказателиОтчета = Новый Структура();

		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
		
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//СтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц( ?(СтруктураМногостраничныхРазделов = Неопределено, мСтруктураМногостраничныхРазделов, СтруктураМногостраничныхРазделов));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	//определение источников данных для проверки
	Если БратьИзформы Тогда
		
	     Орг = Организация;
		 
	Иначе
		 
		Если мСохраненныйДок = Неопределено Тогда
			 
			Если ВыводитьСообщения Тогда
				
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
				
			КонецЕсли;
			
			Возврат Ложь;
			 
		КонецЕсли;
		
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если Данные = Неопределено Тогда
			
			Если ВыводитьСообщения Тогда
				
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Орг = мСохраненныйДок.Организация;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
		 
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		КатегорияНП = 2;
	КонецЕсли;
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 331;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг5) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг6) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	//НаимОППол = ПоказателиТитульный.ОбПодрНазв;
	КППОП = ПоказателиТитульный.ПКПП;
	
	//Если НЕ ПустаяСтрока(ТипОрг2) Тогда
	//	ДокПредставляется = 120; 
	//ИначеЕсли НЕ ПустаяСтрока(ТипОрг3) Тогда
	//	ДокПредставляется = 290;
	//КонецЕсли;	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		попытка
			ПризнВидаДок = Число(ВидДок);
		исключение
		конецпопытки;
	КонецЕсли;
	попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	исключение
		НомерКорректировки = 0;
	конецпопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	//Если РазницаМесяцев = 1 Тогда
	//	ПризнОтчетногоПериода = 1;
	//ИначеЕсли РазницаМесяцев = 3 Тогда
	//	ПризнОтчетногоПериода = 3;
	//ИначеЕсли РазницаМесяцев = 6 Тогда
	//	ПризнОтчетногоПериода = 6;
	//ИначеЕсли РазницаМесяцев = 9 Тогда
	//	ПризнОтчетногоПериода = 9;
	//ИначеЕсли РазницаМесяцев = 12 Тогда
	//	ПризнОтчетногоПериода = 0;
	//КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	//Определили основные показатели
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) И (ПустаяСтрока(ОргУП) ИЛИ НЕ ПустаяСтрока(ОргБухгалтер)) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если (ПризнВидаДок = 3) И (НомерКорректировки = 0) Тогда
		
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер корректировки!", "Титульный", "НомКоррект");
		КонецЕсли;
		
		СтатусПроверки = 1;
		
	КонецЕсли;
	
	Если ДокПредставляется <> 120 Тогда
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН организации!", СтатусСообщения.Важное);
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		ОргНазв = ПоказателиТитульный.ОргНазв;
		ОргОГРН = ПоказателиТитульный.ОГРН;
		
		Если ПустаяСтрока(ОргОГРН) Тогда
			//Если ВыводитьСообщения Тогда
			//	СообщитьВТС("Не указан ОГРН для организации!", "Титульный", "ОГРН");
			//КонецЕсли;
			//СтатусПроверки = 1;
		Иначе
			Если НЕ РегламентированнаяОтчетность.ОГРНсоответствуетТребованиям(ОргОГРН) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ОГРН для организации!", "Титульный", "ОГРН");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;	
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		/////
		///// Окончание проверки блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
		ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		
		//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		////
		
		//сведения о директоре+
		ИННДиректор = ПоказателиТитульный.ИННРук;
		Если ПустаяСтрока(ИННДиректор) Тогда
			
			ТелСлужРук    = "-";
			ТелДомРук     = "-";
			АдрМЖРукРФ    = ",,,,,,,,,";
			АдрМЖРукРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
				ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
				КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
				СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
				
				УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
				
				ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
				ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
				
				ДатаРождРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождРук);
				МестоРождРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождРук));
				КодГраждРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждРук);
				
				АдрМЖРукРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННДиректор) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН директора!", "Титульный", "ИННРук");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли; 
		//сведения о директоре-		
		
		
		//сведения о бухгалтере+
		ИННБухгалтер = ПоказателиТитульный.ИННГБ;
		Если ПустаяСтрока(ИННБухгалтер) Тогда
			
			ТелСлужБух    = "-";
			ТелДомБух     = "-";
			АдрМЖБухРФ    = ",,,,,,,,,";
			АдрМЖБухРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
				ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
				КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
				СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
				
				УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
				
				ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
				ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
				
				АдрМЖБухРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННБухгалтер) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли; 
		//сведения о бухгалтере-		
		
		
		ОргИННУппред = ПоказателиТитульный.ИННУП;
		
		Если (НЕ ПустаяСтрока(ОргУП)) И (НЕ ПустаяСтрока(ОргИННУпПред)) И (НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИННУППред)) Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		
		Если (ПустаяСтрока(ОргИННУпПред)) И (НЕ ПустаяСтрока(ОргУП)) Тогда
			
			ТелСлужУпПред    = "-";
			ТелДомУпПред     = "-";
			//КодВидаДок       = "-";
			//СерияИНомер      = "-";
			//ВыдУдЛичн        = "-";
			//ДатаУдЛичнУпПред = "00.00.0000"; 
			АдрМЖУпПредРФ    = ",,,,,,,,,";
			АдрМЖУпПредРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
				ТелДомУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
				КодВидаДокУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
				СерияИНомерУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
				
				УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
				
				ВыдУдЛичнУпПред   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред));
				ДатаУдЛичнУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
				
				ДатаРождУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождУпПред);
				МестоРождУпПред = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождУпПред));
				КодГраждУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждУпПред);
				
				
				АдрМЖУпПредРФ = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖУпПредРез = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
		
	Иначе//ДокПредставляется = 120
		
		Если ПустаяСтрока(ПоказателиТитульный.ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН индивидуального предпринимателя!", СтатусСообщения.Важное);
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ПоказателиТитульный.ОргНазв, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если ПустаяСтрока(ОргИНН) Тогда
			
			ТелСлужИП     = "-";
			ТелДомИП      = "-";
			ДатаРождИП    = "00.00.0000";
			МестоРождИП   = "-";
			ПолИП         = 1;
			ГраждИП       = "-";
			КодГраждИП    = "-";
			АдрМЖИПРФ     = ",,,,,,,,,";
			АдрМЖИПРез    = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужИП    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел,         ТелСлужИП);
				ТелДомИП     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел,        ТелДомИП);
				ДатаРождИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР,         ДатаРождИП);
				МестоРождИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР,        МестоРождИП);
				ПолИП        = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицПол,           ПолИП);
				ГраждИП      = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство,   ГраждИП);
				КодГраждИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд,      КодГраждИП);
				КодВидаДокИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод,        КодВидаДокИП);
				СерияИНомерИП= РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерИП);
				
				УдЛичнИП     = КодВидаДокИП + "," + СерияИНомерИП;
				
				ВыдУдЛичнИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан,      ВыдУдЛичнИП);
				ДатаУдЛичнИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата,       ДатаУдЛичнИП);
				
				АдрМЖИПРФ   = "643,"
							+ СокрП(Стр.ФизЛицИндекс)  + ","
							+ СокрП(Стр.ФизЛицКодСуб)  + ","
							+ СокрП(Стр.ФизЛицРайон)   + ","
							+ СокрП(Стр.ФизЛицГород)   + ","
							+ СокрП(Стр.ФизЛицНП)      + ","
							+ СокрП(Стр.ФизЛицУлица)   + "," 
							+ СокрП(Стр.ФизЛицДом)     + ","
							+ СокрП(Стр.ФизЛицКорпус)  + ","
							+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖИПРез  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес,      АдрМЖИПРез);
				
			КонецЕсли;
			
		КонецЕсли; 
	           
		//////// Конец блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ> 
		
	КонецЕсли;
	
	///// Проверка блоков <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> и <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
	///// на обязательное заполнение условных реквизитов (сведения о документе, удостоверяющем личность), 
	///// содержащихся в разделе "Сведения о физическом лице", в случае отсутствия ИНН руководителя, главного 
	///// бухгалтера или уполномоченного представителя организации; в случае отсутствия ИНН физического лица.
    /////
	// Проверка блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>.
	Если ДокПредставляется <> 120 Тогда
	
		// Если не заполнен ИНН руководителя организации.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННДиректор) Тогда
			
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) Тогда
				СообщитьВТС("Не задан ИНН директора!", "Титульный", "ИННРук");
				СтатусПроверки = 1;
			Иначе
			
				// Если не заполнены ФИО руководителя организации.
				//Стр=ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
				//Если Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для руководителя не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнен код документа, удостоверяющего личность!",  "ФизЛица", "ФизЛицДок", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаРождРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнена дата рождения!", "ФизЛица", "ФизЛицДатаР", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(МестоРождРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнено место рождения!", "ФизЛица", "ФизЛицМестоР", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодГраждРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнен код страны!", "ФизЛица", "ФизЛицКодГражд", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		// Если не заполнен ИНН главного бухгалтера организации.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННБухгалтер) Тогда
			
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) Тогда
				
				СообщитьВТС("Не задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
				СтатусПроверки = 1;
				
			Иначе
				// Если не заполнены ФИО главного бухгалтера организации.
				//Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
				//Если Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для главного бухгалтера не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если не заполнен ИНН уполномоченного представителя.
		Если (РегламентированнаяОтчетность.ПустоеЗначение(ОргИННУпПред)) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ОргУП)) Тогда
			 
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУпПред) Тогда
				
				СообщитьВТС("Не задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				СтатусПроверки = 1;
				
			Иначе
				
				// Если не заполнены ФИО уполномоченного представителя.
				//Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
				//Если  Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для уполномоченного представителя не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаРождУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата рождения!", "ФизЛица", "ФизЛицДатаР", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(МестоРождУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено место рождения!", "ФизЛица", "ФизЛицМестоР", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодГраждУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код страны!", "ФизЛица", "ФизЛицКодГражд", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	 
	// Проверка блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>.
	Иначе
		
		// Если не заполнен ИНН индивидуального предпринимателя.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ОргИНН) = 1 Тогда
			 
			//НомСтр = 0;
			
			// Если не заполнены ФИО индивидуального предпринимателя.
			//Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, НомСтр, "ФизЛицФИО");
			//Если Стр = Неопределено Тогда	
			//	
			//	Если ВыводитьСообщения Тогда
			//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для индивидуального предпринимателя не заполнены фамилия, имя, отчество!", );
			//	КонецЕсли;
			//	
			//	СтатусПроверки = 1;
			//	
			//КонецЕсли;
			
			// Если не заполнен код документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		КатегорияНП = 2;
	КонецЕсли;
	//ТипОрг2=ПоказателиТитульный.ТипОрг2;
	//ТипОрг3=ПоказателиТитульный.ТипОрг3;	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 331;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг5) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг6) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	//НаимОППол = ПоказателиТитульный.ОбПодрНазв;
	КППОП = ПоказателиТитульный.ПКПП;
	//Если НЕ ПустаяСтрока(ТипОрг2) Тогда
	//	ДокПредставляется = 120; 
	//ИначеЕсли НЕ ПустаяСтрока(ТипОрг3) Тогда
	//	ДокПредставляется = 290;
	//КонецЕсли;	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = "";//пока так 
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	Конецпопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	ПризОпер = Неопределено;
	Если НЕ Данные.Свойство("ВвозИзБеларуси", ПризОпер) Тогда
		ПризОпер = Ложь;
	КонецЕсли;
	//Если РазницаМесяцев = 1 Тогда
	//	ПризнОтчетногоПериода = 1;
	//ИначеЕсли РазницаМесяцев = 3 Тогда
	//	ПризнОтчетногоПериода = 3;
	//ИначеЕсли РазницаМесяцев = 6 Тогда
	//	ПризнОтчетногоПериода = 6;
	//ИначеЕсли РазницаМесяцев = 9 Тогда
	//	ПризнОтчетногоПериода = 9;
	//ИначеЕсли РазницаМесяцев = 12 Тогда
	//	ПризнОтчетногоПериода = 0;
	//КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	Если ПустаяСтрока(ОргКПП) = Ложь Тогда
		// Если КПП указан
		ИДОтпр = ОргИНН + "**" + ОргКПП;
	Иначе
		// Если КПП не указан
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	//Определили основные показатели
	
	// Общие сведения служебной части
	
	// Дата формирования документа
	ДатаДок = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");	
	// По умолчанию принимаем за порядковый номер документа в отчетном году 99999999.
	// При отправке документа выполняется коррекция значения этого показателя
	// в соответствии с реальным порядковым номером.
	                                         
	Если ДокПредставляется <> 120 Тогда
		
		//////// Начало блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		////
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		//
		//Если Докпредставляется = 220 Тогда
		//	Текст.ДобавитьСтроку("НаимОППол:" + ?(ПустаяСтрока(НаимОППол), "-", ВРег(СокрЛП(НаимОППол)))); 
		//КонецЕсли;
		
		Текст.ДобавитьСтроку("ИННЮЛ:" + СокрЛП(ОргИНН));  
		Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(ОргКПП));
		
		Если Докпредставляется = 220 Тогда
			Текст.ДобавитьСтроку("КППОП:" + СокрЛП(КППОП)); 
		КонецЕсли;
				
		Если ДокПредставляется = 290 Тогда
			Текст.ДобавитьСтроку("КППИном:");
		КонецЕсли;
		
		ОргОГРН = ПоказателиТитульный.ОГРН;
		
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ОргОГРН));
		
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
		/////
		ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		////
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		
		ИННДиректор = ПоказателиТитульный.ИННРук;
		
		ТЕкст.ДобавитьСтроку("ИННРук:" + ИННДиректор);  
		
		Если ПустаяСтрока(ИННДиректор) Тогда
			
			ТелСлужРук    = "-";
			ТелДомРук     = "-";
			КодВидаДокРук = "-";
			СерияИНомерРук= "-";
			ВыдУдЛичнРук  = "-";
			ДатаУдЛичнРук = "00.00.0000"; 
			АдрМЖРукРФ    = ",,,,,,,,,";
			АдрМЖРукРез   = "-"; 
			УдЛичнРук     = "-,-";
			
			ДатаРождРук = "00.00.0000";
			МестоРождРук = "-";
			КодГраждРук = "-";
			ГраждРук = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
				ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
				КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
				СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
				
				УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
				
				ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
				ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
				
				ДатаРождРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождРук);
				МестоРождРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождРук));
				КодГраждРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждРук);
				ПолРук = Стр.ФизЛицПол;
				ГраждРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство, ГраждРук));
				
				АдрМЖРукРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужРук:"    + ВРЕГ(СокрЛП(Лев(ТелСлужРук, 20))));
			Текст.ДобавитьСтроку("ТелДомРук:"     + ВРЕГ(СокрЛП(Лев(ТелДомРук, 20)))); 
			    ДатаРождРукС = ?(ДатаРождРук = "  .  .    ", "00.00.0000", Формат(ДатаРождРук, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаРождРукС = ".." Тогда
					ДатаРождРукС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаРождРук:"    + ДатаРождРукС);  
			Текст.ДобавитьСтроку("МестоРождРук:"    + МестоРождРук);  
			Текст.ДобавитьСтроку("ПолРук:"    + ПолРук);  
			Текст.ДобавитьСтроку("ГраждРук:"    + ГраждРук);  
			Текст.ДобавитьСтроку("КодГраждРук:"    + КодГраждРук);  
			
			Текст.ДобавитьСтроку("УдЛичнРук:"     + ВРЕГ(УдЛичнРук));  
			Текст.ДобавитьСтроку("ВыдУдЛичнРук:"  + ВРЕГ(ВыдУдЛичнРук));  
				ДатаУдЛичнРукС = ?(ДатаУдЛичнРук = "  .  .    ", "00.00.0000", Формат(ДатаУдЛичнРук, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаУдЛичнРукС = ".." Тогда
					ДатаУдЛичнРукС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + ДатаУдЛичнРукС);  
			Текст.ДобавитьСтроку("АдрМЖРукРФ:"    + ВРег(АдрМЖРукРФ)); 
			Текст.ДобавитьСтроку("АдрМЖРукРез:"   + ВРег(АдрМЖРукРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		
		ИННБухгалтер = ПоказателиТитульный.ИННГБ;
		
		Текст.ДобавитьСтроку("ИННБух:" + ИННБухгалтер);  
		
		Если ПустаяСтрока(ИННБухгалтер) Тогда
			
			ТелСлужБух    = "-";
			ТелДомБух     = "-";
			КодВидаДокБух    = "-";
			СерияИНомерБух   = "-";
			ВыдУдЛичнБух     = "-";
			ДатаУдЛичнБух = "00.00.0000"; 
			АдрМЖБухРФ    = ",,,,,,,,,";
			АдрМЖБухРез   = "-";
			УдЛичнБух     = "-,-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
				ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
				КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
				СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
				
				УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
				
				ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
				ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
				
				АдрМЖБухРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужБух:"    + ВРЕГ(СокрЛП(Лев(ТелСлужБух, 20))));  
			Текст.ДобавитьСтроку("ТелДомБух:"     + ВРЕГ(СокрЛП(Лев(ТелДомБух, 20))));
			Текст.ДобавитьСтроку("УдЛичнБух:"     + ВРЕГ(УдЛичнБух));  
			Текст.ДобавитьСтроку("ВыдУдЛичнБух:"  + ВРЕГ(ВыдУдЛичнБух)); 
				ДатаУдЛичнБухС = ?(ДатаУдЛичнБух = "  .  .    ", "00.00.0000", Формат(ДатаУдЛичнБух, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаУдЛичнБухС = ".." Тогда
					ДатаУдЛичнБухС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + ДатаУдЛичнБухС);  
			Текст.ДобавитьСтроку("АдрМЖБухРФ:"    + ВРег(АдрМЖБухРФ)); 
			Текст.ДобавитьСтроку("АдрМЖБухРез:"   + ВРег(АдрМЖБухРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
		
		ОргИННУппред = ПоказателиТитульный.ИННУП;
		
		Текст.ДобавитьСтроку("ИННУпПред:" + СокрП(ОргИННУпПред));  
		
		Если (ПустаяСтрока(ОргИННУпПред)) И (НЕ ПустаяСтрока(ОргУП)) Тогда
			
			ТелСлужУпПред    = "-";
			ТелДомУпПред     = "-";
			КодВидаДокУпПред       = "-";
			СерияИНомерУпПред      = "-";
			ВыдУдЛичнУпПред        = "-";
			ДатаУдЛичнУпПред = "00.00.0000"; 
			АдрМЖУпПредРФ    = ",,,,,,,,,";
			АдрМЖУпПредРез   = "-";
			УдЛичнПред       = "-,-";
			
			ДатаРождУпПред = "00.00.0000";
			МестоРождУпПред = "-";
			КодГраждУпПред = "-";
			ГраждУпПред = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
				ТелДомУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
				КодВидаДокУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
				СерияИНомерУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
				
				УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
				
				ВыдУдЛичнУпПред   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред));
				ДатаУдЛичнУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
				
				ДатаРождУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождУпПред);
				МестоРождУпПред = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождУпПред));
				КодГраждУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждУпПред);
				
				ПолУпПред = Стр.ФизЛицПол;
				ГраждУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство, ГраждУпПред);
				
				АдрМЖУпПредРФ = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖУпПредРез = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужУпПред:"    + ВРЕГ(СокрЛП(Лев(ТелСлужУпПред, 20))));  
			Текст.ДобавитьСтроку("ТелДомУпПред:"     + ВРЕГ(СокрЛП(Лев(ТелДомУпПред, 20))));
			    ДатаРождУпПредС = ?(ДатаРождУпПред = "  .  .    ", "00.00.0000", Формат(ДатаРождУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаРождУпПредС = ".." Тогда
					ДатаРождУпПредС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаРождУпПред:"    + ДатаРождУпПредС);  
			Текст.ДобавитьСтроку("МестоРождУпПред:"    + МестоРождУпПред);  
			Текст.ДобавитьСтроку("ПолУпПред:"    + ПолУпПред);  
			Текст.ДобавитьСтроку("ГраждУпПред:"    + ГраждУпПред);  
			Текст.ДобавитьСтроку("КодГраждУпПред:"    + КодГраждУпПред);  
			
			Текст.ДобавитьСтроку("УдЛичнУпПред:"     + ВРЕГ(УдЛичнУпПред));  
			Текст.ДобавитьСтроку("ВыдУдЛичнУпПред:"  + ВРЕГ(ВыдУдЛичнУпПред)); 
				ДатаУдЛичнУпПредС = ?(ДатаУдЛичнУпПред = "  .  .    ", "00.00.0000", Формат(ДатаУдЛичнУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаУдЛичнУпПредС = ".." Тогда
					ДатаУдЛичнУпПредС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнУпПред:" + ДатаУдЛичнУпПредС);  
			Текст.ДобавитьСтроку("АдрМЖУпПредРФ:"    + ВРег(АдрМЖУпПредРФ)); 		
			Текст.ДобавитьСтроку("АдрМЖУпПредРез:"   + ВРег(АдрМЖУпПредРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
		
	Иначе//ДокПредставляется = 120
		
		//////// Начало блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		////                            
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);  
		
		Если ПустаяСтрока(ОргИНН) Тогда
			
			ТелСлужИП     = "-";
			ТелДомИП      = "-";
			ДатаРождИП    = "00.00.0000";
			МестоРождИП   = "-";
			ПолИП         = 1;
			ГраждИП       = "-";
			КодГраждИП    = "-";
			КодВидаДокИП    = "-";
			СерияИНомерИП   = "-";
			ВыдУдЛичнИП   = "-";
			ДатаУдЛичнИП  = "00.00.0000"; 
			АдрМЖИПРФ     = ",,,,,,,,,";
			АдрМЖИПРез    = "-";
			УдЛичнИП      = "-,-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужИП    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел,         ТелСлужИП);
				ТелДомИП     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел,        ТелДомИП);
				ДатаРождИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР,         ДатаРождИП);
				МестоРождИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР,        МестоРождИП);
				ПолИП        = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицПол,           ПолИП);
				ГраждИП      = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство,   ГраждИП);
				КодГраждИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд,      КодГраждИП);
				КодВидаДокИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод,        КодВидаДокИП);
				СерияИНомерИП= РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерИП);
				
				УдЛичнИП     = КодВидаДокИП + "," + СерияИНомерИП;
				
				ВыдУдЛичнИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан,      ВыдУдЛичнИП);
				ДатаУдЛичнИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата,       ДатаУдЛичнИП);
				
				АдрМЖИПРФ   = "643,"
							+ СокрП(Стр.ФизЛицИндекс)  + ","
							+ СокрП(Стр.ФизЛицКодСуб)  + ","
							+ СокрП(Стр.ФизЛицРайон)   + ","
							+ СокрП(Стр.ФизЛицГород)   + ","
							+ СокрП(Стр.ФизЛицНП)      + ","
							+ СокрП(Стр.ФизЛицУлица)   + "," 
							+ СокрП(Стр.ФизЛицДом)     + ","
							+ СокрП(Стр.ФизЛицКорпус)  + ","
							+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖИПРез  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес,      АдрМЖИПРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлуж:"    + ВРЕГ(СокрЛП(Лев(ТелСлужИП, 20))));  
			Текст.ДобавитьСтроку("ТелДом:"     + ВРЕГ(СокрЛП(Лев(ТелДомИП, 20))));
				ДатаРождИПС = ?(ДатаРождИП = "  .  .    ", "00.00.0000", Формат(ДатаРождИП, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаРождИПС = ".." Тогда
					ДатаРождИПС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаРожд:"   + ДатаРождИПС);  
			ТЕкст.ДобавитьСтроку("МестоРожд:"  + ВРЕГ(МестоРождИП));  
			Текст.ДобавитьСтроку("Пол:"        + ПолИП);  
			Текст.ДобавитьСтроку("Гражд:"      + ВРЕГ(ГраждИП));  
			Текст.ДобавитьСтроку("КодГражд:"   + КодГраждИП);  
			Текст.ДобавитьСтроку("УдЛичн:"     + ВРЕГ(УдЛичнИП));  
			Текст.ДобавитьСтроку("ВыдУдЛичн:"  + ВРЕГ(ВыдУдЛичнИП));
				ДатаУдЛичнИПС = ?(ДатаУдЛичнИП = "  .  .    ", "00.00.0000", Формат(ДатаУдЛичнИП, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				Если ДатаУдЛичнИПС = ".." Тогда
					ДатаУдЛичнИПС = "00.00.0000";
				КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичн:" + ДатаУдЛичнИПС);  
			Текст.ДобавитьСтроку("АдрМЖ:"      + ВРег(АдрМЖИПРФ)); 
			
			Если НЕ((КодГраждИП = "643") ИЛИ (КодГраждИП = "999")) Тогда
				Текст.ДобавитьСтроку("АдрМЖРез:" + ВРег(АдрМЖИПРез));  
			КонецЕсли;
			
		КонецЕсли; 
	           
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ> 
		
	КонецЕсли;
	
	
	//////// Начало блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	////                            
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ПризОпер:" + ?(ПризОпер = Истина, 1, 2)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00003"); 
	Текст.ДобавитьСтроку("ПериодВерОтч:15.03.2005,29.04.2005");
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     

	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:"      + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ> 
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		ОбновитьСтруктуруМногострочныхРазделов();

		// обновляем структуру многостраничных разделов
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			//проверка на то, что раздел пуст
			//ПустойРаздел = Истина;
			//СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			//Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			//	
			//	КодПоказателя = Стр3.КодПоказателяПоСоставу;
			//	ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			//	ПризнакФормата = Стр3.ТипДанныхПоказателя;
			//	
			//	Если КодПоказателя="###" Тогда
			//		Продолжить;
			//	ИначеЕсли КодПоказателя="===" Тогда
			//		Прервать;	
			//	КонецЕсли;
			//	
			//	ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			//	Если Найти(ЧтоПроверять, "1") <> 0 Тогда
			//		
			//		Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, Ложь) = 1 Тогда
			//			ПустойРаздел = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	Если ВыводитьСообщения Тогда
			//		Сообщить(ПредставлениеОтчета + "Обязательный к заполнению " + ИмяРаздела + " пуст!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	СтатусПроверки = 1;
			//КонецЕсли;
			//конец проверки на пустой раздел
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
	//Для Каждого Стр Из мСтруктураМногоСтраничныхРазделов Цикл
	//	ТекСтр = Стр.Значение;
	//	Если (ТекСтр.Количество() = 0) ИЛИ (ТекСтр.Количество() = 1 И ТекСтр.Получить(0).Данные = Неопределено) Тогда
	//		Если ТекСтр.Количество() = 0 Тогда
	//			НовСтр = ТекСтр.Добавить();
	//		Иначе
	//			НовСтр = ТекСтр.Получить(0);
	//		КонецЕсли;
	//		НовСтр.АктивнаяСтраница = Истина;
	//		ПокТекТабПоля = Неопределено;
	//		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Ключ, ПокТекТабПоля) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		НовСтр.Данные = РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля);
	//	Иначе
	//		НовСтр = ТекСтр.Получить(0);
	//		ПокТекТабПоля = Неопределено;
	//		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Ключ, ПокТекТабПоля) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		НовСтр.Данные = РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля);
	//	КонецЕсли;
	//КонецЦикла;
		
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");
		КонецЕсли;
		Если Тек13Симв = "П000020001002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020002002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020003002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020004002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020005002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020006002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020007002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020008002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020009002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020010002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000020011002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000210001000" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000210005002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000210007002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000220001000" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000220005002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000220007002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000230001000" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000230005002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000240001000" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000240005002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000250001002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
		Если Тек13Симв = "П000040007002" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 120)));
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	
	//выводим сведения служебной части
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Орг, , , , мСохраненныйДок.КодИМНС)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим сведения об отправителе
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Орг, ПоказателиТитульный.ОргНазв, , ПоказателиТитульный.ОргБухгалтер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;

		КонецЦикла;

	КонецЦикла;
	
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мКБК2005Раздел1 = Новый ТаблицаЗначений;
мКБК2005Раздел1.Колонки.Добавить("Код");
мКБК2005Раздел1.Колонки.Добавить("Название");
мКБК2005Раздел1.Колонки[0].Ширина = 13;

мКБК2004Раздел1 = Новый ТаблицаЗначений;
мКБК2004Раздел1.Колонки.Добавить("Код");
мКБК2004Раздел1.Колонки.Добавить("Название");
мКБК2004Раздел1.Колонки[0].Ширина = 5;

мПодакцизныеТоварыРаздел2_1 = Новый ТаблицаЗначений;
мПодакцизныеТоварыРаздел2_1.Колонки.Добавить("Код");
мПодакцизныеТоварыРаздел2_1.Колонки.Добавить("Название");
мПодакцизныеТоварыРаздел2_1.Колонки[0].Ширина = 3;

мНалогообложениеАкцизами = Новый ТаблицаЗначений;
мНалогообложениеАкцизами.Колонки.Добавить("Код");
мНалогообложениеАкцизами.Колонки.Добавить("Название");
мНалогообложениеАкцизами.Колонки[0].Ширина = 4;

мЕдиницыИзмерения = Новый ТаблицаЗначений;
мЕдиницыИзмерения.Колонки.Добавить("Код");
мЕдиницыИзмерения.Колонки.Добавить("Название");
мЕдиницыИзмерения.Колонки[0].Ширина = 3;

мРазмерСтавкиПрил1 = Новый ТаблицаЗначений;
мРазмерСтавкиПрил1.Колонки.Добавить("Код");
мРазмерСтавкиПрил1.Колонки.Добавить("Название");
мРазмерСтавкиПрил1.Колонки[0].Ширина = 3;

НоваяСтрока = мРазмерСтавкиПрил1.Добавить();
НоваяСтрока.Код = "";
НоваяСтрока.Название = "Пустое значение";

НоваяСтрока = мРазмерСтавкиПрил1.Добавить();
НоваяСтрока.Код = "100";
НоваяСтрока.Название = "Применяемый размер ставки 100%";

НоваяСтрока = мРазмерСтавкиПрил1.Добавить();
НоваяСтрока.Код = "35";
НоваяСтрока.Название = "Применяемый размер ставки 35%";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока4   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока5   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
ОписаниеТиповСтрока9   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока12  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло15_4 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 4);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000200010";
мИдГруппы2  = "П0000200020";
мИдГруппы3  = "П0000200030";
мИдГруппы4  = "П0000200040";
мИдГруппы5  = "П0000200050";
мИдГруппы6  = "П0000200060";
мИдГруппы7  = "П0000200070";
мИдГруппы8  = "П0000200080";
мИдГруппы9  = "П0000200090";
мИдГруппы10 = "П0000200100";
мИдГруппы11 = "П0000200110";
мИдГруппы12 = "П0002100050";
мИдГруппы13 = "П0002100070";
мИдГруппы14 = "П0002200050";
мИдГруппы15 = "П0002200070";
мИдГруппы16 = "П0002300050";
мИдГруппы17 = "П0002400050";
мИдГруппы18 = "П0002500010";
мИдГруппы19 = "П0000400070";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрок10 = 10;
КолИсхСтрок11 = 11;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000020001001", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П000020001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000020001004", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П000020001005", ОписаниеТиповЧисло15_4);
СтруктураГруппы1.Колонки.Добавить("П000020001006", ОписаниеТиповЧисло15_2);
СтруктураГруппы1.Колонки.Добавить("П000020001007", ОписаниеТиповЧисло15_2);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000020002001", ОписаниеТиповСтрока3);
СтруктураГруппы2.Колонки.Добавить("П000020002002", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000020002004", ОписаниеТиповСтрока3);
СтруктураГруппы2.Колонки.Добавить("П000020002005", ОписаниеТиповЧисло15_4);
СтруктураГруппы2.Колонки.Добавить("П000020002006", ОписаниеТиповЧисло15_2);
СтруктураГруппы2.Колонки.Добавить("П000020002007", ОписаниеТиповЧисло15_2);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000020003001", ОписаниеТиповСтрока3);
СтруктураГруппы3.Колонки.Добавить("П000020003002", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000020003004", ОписаниеТиповСтрока3);
СтруктураГруппы3.Колонки.Добавить("П000020003005", ОписаниеТиповЧисло15_4);
СтруктураГруппы3.Колонки.Добавить("П000020003006", ОписаниеТиповЧисло15_2);
СтруктураГруппы3.Колонки.Добавить("П000020003007", ОписаниеТиповЧисло15_2);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000020004001", ОписаниеТиповСтрока3);
СтруктураГруппы4.Колонки.Добавить("П000020004002", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П000020004004", ОписаниеТиповСтрока3);
СтруктураГруппы4.Колонки.Добавить("П000020004005", ОписаниеТиповЧисло15_4);
СтруктураГруппы4.Колонки.Добавить("П000020004006", ОписаниеТиповЧисло15_2);
СтруктураГруппы4.Колонки.Добавить("П000020004007", ОписаниеТиповЧисло15_2);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000020005001", ОписаниеТиповСтрока3);
СтруктураГруппы5.Колонки.Добавить("П000020005002", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000020005004", ОписаниеТиповСтрока3);
СтруктураГруппы5.Колонки.Добавить("П000020005005", ОписаниеТиповЧисло15_4);
СтруктураГруппы5.Колонки.Добавить("П000020005006", ОписаниеТиповЧисло15_2);
СтруктураГруппы5.Колонки.Добавить("П000020005007", ОписаниеТиповЧисло15_2);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000020006001", ОписаниеТиповСтрока3);
СтруктураГруппы6.Колонки.Добавить("П000020006002", ОписаниеТиповСтрока254);
СтруктураГруппы6.Колонки.Добавить("П000020006004", ОписаниеТиповСтрока3);
СтруктураГруппы6.Колонки.Добавить("П000020006007", ОписаниеТиповЧисло15_2);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000020007001", ОписаниеТиповСтрока3);
СтруктураГруппы7.Колонки.Добавить("П000020007002", ОписаниеТиповСтрока254);
СтруктураГруппы7.Колонки.Добавить("П000020007004", ОписаниеТиповСтрока3);
СтруктураГруппы7.Колонки.Добавить("П000020007007", ОписаниеТиповЧисло15_2);

СтруктураГруппы8 = Новый ТаблицаЗначений;
СтруктураГруппы8.Колонки.Добавить("П000020008001", ОписаниеТиповСтрока3);
СтруктураГруппы8.Колонки.Добавить("П000020008002", ОписаниеТиповСтрока254);
СтруктураГруппы8.Колонки.Добавить("П000020008004", ОписаниеТиповСтрока3);
СтруктураГруппы8.Колонки.Добавить("П000020008007", ОписаниеТиповЧисло15_2);

СтруктураГруппы9 = Новый ТаблицаЗначений;
СтруктураГруппы9.Колонки.Добавить("П000020009001", ОписаниеТиповСтрока3);
СтруктураГруппы9.Колонки.Добавить("П000020009002", ОписаниеТиповСтрока254);
СтруктураГруппы9.Колонки.Добавить("П000020009004", ОписаниеТиповСтрока3);
СтруктураГруппы9.Колонки.Добавить("П000020009007", ОписаниеТиповЧисло15_2);

СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("П000020010001", ОписаниеТиповСтрока3);
СтруктураГруппы10.Колонки.Добавить("П000020010002", ОписаниеТиповСтрока254);
СтруктураГруппы10.Колонки.Добавить("П000020010004", ОписаниеТиповСтрока3);
СтруктураГруппы10.Колонки.Добавить("П000020010005", ОписаниеТиповЧисло15_4);
СтруктураГруппы10.Колонки.Добавить("П000020010006", ОписаниеТиповЧисло15_2);
СтруктураГруппы10.Колонки.Добавить("П000020010007", ОписаниеТиповЧисло15_2);

СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("П000020011001", ОписаниеТиповСтрока3);
СтруктураГруппы11.Колонки.Добавить("П000020011002", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000020011004", ОписаниеТиповСтрока3);
СтруктураГруппы11.Колонки.Добавить("П000020011005", ОписаниеТиповЧисло15_4);
СтруктураГруппы11.Колонки.Добавить("П000020011006", ОписаниеТиповЧисло15_2);
СтруктураГруппы11.Колонки.Добавить("П000020011007", ОписаниеТиповЧисло15_2);

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000210005001", ОписаниеТиповСтрока3);
СтруктураГруппы12.Колонки.Добавить("П000210005002", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000210005004", ОписаниеТиповСтрока5);
СтруктураГруппы12.Колонки.Добавить("П000210005005", ОписаниеТиповСтрока4);
СтруктураГруппы12.Колонки.Добавить("П000210005006", ОписаниеТиповЧисло15_4);
СтруктураГруппы12.Колонки.Добавить("П000210005007", ОписаниеТиповЧисло15_2);
СтруктураГруппы12.Колонки.Добавить("П000210005008", ОписаниеТиповЧисло15_4);

СтруктураГруппы13 = Новый ТаблицаЗначений;
СтруктураГруппы13.Колонки.Добавить("П000210007001", ОписаниеТиповСтрока3);
СтруктураГруппы13.Колонки.Добавить("П000210007002", ОписаниеТиповСтрока254);
СтруктураГруппы13.Колонки.Добавить("П000210007004", ОписаниеТиповСтрока5);
СтруктураГруппы13.Колонки.Добавить("П000210007006", ОписаниеТиповЧисло15_4);
СтруктураГруппы13.Колонки.Добавить("П000210007008", ОписаниеТиповЧисло15_4);

СтруктураГруппы14 = Новый ТаблицаЗначений;
СтруктураГруппы14.Колонки.Добавить("П000220005001", ОписаниеТиповСтрока3);
СтруктураГруппы14.Колонки.Добавить("П000220005002", ОписаниеТиповСтрока254);
СтруктураГруппы14.Колонки.Добавить("П000220005004", ОписаниеТиповСтрока5);
СтруктураГруппы14.Колонки.Добавить("П000220005005", ОписаниеТиповЧисло15_4);
СтруктураГруппы14.Колонки.Добавить("П000220005006", ОписаниеТиповЧисло15_2);
СтруктураГруппы14.Колонки.Добавить("П000220005007", ОписаниеТиповЧисло15_4);

СтруктураГруппы15 = Новый ТаблицаЗначений;
СтруктураГруппы15.Колонки.Добавить("П000220007001", ОписаниеТиповСтрока3);
СтруктураГруппы15.Колонки.Добавить("П000220007002", ОписаниеТиповСтрока254);
СтруктураГруппы15.Колонки.Добавить("П000220007004", ОписаниеТиповСтрока5);
СтруктураГруппы15.Колонки.Добавить("П000220007005", ОписаниеТиповЧисло15_4);
СтруктураГруппы15.Колонки.Добавить("П000220007007", ОписаниеТиповЧисло15_4);

СтруктураГруппы16 = Новый ТаблицаЗначений;
СтруктураГруппы16.Колонки.Добавить("П000230005001", ОписаниеТиповСтрока3);
СтруктураГруппы16.Колонки.Добавить("П000230005002", ОписаниеТиповСтрока254);
СтруктураГруппы16.Колонки.Добавить("П000230005004", ОписаниеТиповСтрока5);
СтруктураГруппы16.Колонки.Добавить("П000230005005", ОписаниеТиповЧисло15_4);

СтруктураГруппы17 = Новый ТаблицаЗначений;
СтруктураГруппы17.Колонки.Добавить("П000240005001", ОписаниеТиповСтрока3);
СтруктураГруппы17.Колонки.Добавить("П000240005002", ОписаниеТиповСтрока254);
СтруктураГруппы17.Колонки.Добавить("П000240005004", ОписаниеТиповСтрока5);
СтруктураГруппы17.Колонки.Добавить("П000240005005", ОписаниеТиповЧисло15_4);

СтруктураГруппы18 = Новый ТаблицаЗначений;
СтруктураГруппы18.Колонки.Добавить("П000250001001", ОписаниеТиповСтрока3);
СтруктураГруппы18.Колонки.Добавить("П000250001002", ОписаниеТиповСтрока254);
СтруктураГруппы18.Колонки.Добавить("П000250001003", ОписаниеТиповСтрока12);
СтруктураГруппы18.Колонки.Добавить("П000250001004", ОписаниеТиповСтрока9);

СтруктураГруппы19 = Новый ТаблицаЗначений;
СтруктураГруппы19.Колонки.Добавить("П000040007001", ОписаниеТиповСтрока3);
СтруктураГруппы19.Колонки.Добавить("П000040007002", ОписаниеТиповСтрока254);
СтруктураГруппы19.Колонки.Добавить("П000040007003", ОписаниеТиповСтрока3);
СтруктураГруппы19.Колонки.Добавить("П000040007004", ОписаниеТиповЧисло15_4);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1,  СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2,  СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3,  СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4,  СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5,  СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6,  СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7,  СтруктураГруппы7);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы8,  СтруктураГруппы8);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы9,  СтруктураГруппы9);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы13, СтруктураГруппы13);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы14, СтруктураГруппы14);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы15, СтруктураГруппы15);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы16, СтруктураГруппы16);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы17, СтруктураГруппы17);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы18, СтруктураГруппы18);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы19, СтруктураГруппы19);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы8,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы9,  КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы13, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы14, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы15, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы16, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы17, КолИсхСтрок11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы18, КолИсхСтрок10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы19, КолИсхСтрок10);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица показателей и их значений многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",              ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница",           ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц раздела со сведениями
// о физических лицах
ТаблицаСтраницыФизЛиц     = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица",   ТаблицаСтраницыФизЛиц);

// Элемент структуры - данные дополнительных страниц Раздела 1
ТаблицаСтраницыРаздела1   = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел1",   ТаблицаСтраницыРаздела1);

// Элемент структуры - данные дополнительных страниц Раздела 2_1
ТаблицаСтраницыРаздела2_1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2_1", ТаблицаСтраницыРаздела2_1);

// Элемент структуры - данные дополнительных страниц Раздела 2_2
ТаблицаСтраницыРаздела2_2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2_2", ТаблицаСтраницыРаздела2_2);

// Элемент структуры - данные дополнительных страниц Раздела 2_3
ТаблицаСтраницыРаздела2_3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2_3", ТаблицаСтраницыРаздела2_3);

// Элемент структуры - данные дополнительных страниц Раздела 2_4
ТаблицаСтраницыРаздела2_4 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2_4", ТаблицаСтраницыРаздела2_4);

// Элемент структуры - данные дополнительных страниц Раздела 4
ТаблицаСтраницыРаздела4   = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел4",   ТаблицаСтраницыРаздела4);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
//мВерсияФормы = "29/12/2003";
мВерсияФормы = "02/04/2005";

// Код отчета, равен КНД
мКодОтчета   = 1151003;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей", "Формат 3.00002");
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей", "Формат 3.00003", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151003";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ПОДАКЦИЗНЫЕ ТОВАРЫ, ЗА ИСКЛЮЧЕНИЕМ АЛКОГОЛЬНОЙ ПРОДУКЦИИ, РЕАЛИЗУЕМОЙ С АКЦИЗНЫХ СКЛАДОВ ОПТОВОЙ ТОРГОВЛИ И НЕФТЕПРОДУКТОВ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
