////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличных документов
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел12;
Перем мРаздел13;
Перем мРаздел2;
Перем мРаздел24;
Перем мПриложение1;
Перем мПриложение2;
Перем мПриложение3;
Перем мПриложение4;
Перем мПриложение5;
Перем мПриложение6;
Перем мПриложение7;


Перем ПоказателиНеанализируемыеНаЗаполненность;

// Хранит имена многострочных разделов
Перем мИдГруппы1,мИдГруппы12, мИдГруппы13, мИдГруппы2, мИдГруппы24,  мИдГруппы25, мИдПриложения1, мИдПриложения2, мИдПриложения3, мИдПриложения4, мИдПриложения5, мИдПриложения6, мИдПриложения7;
Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

Перем ВариантыФорматовВыгрузки;

// Хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем ЦветЗаполняетсяАвтоАрифметика;

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// ПолучитьТаблицуМногостраничногоРаздела
// флМногострочность - Булево, для многостраничных разделов, являющихся многострочными = Истина
// Возвращаемое значение:
//  ТаблицаЗначений, эталонная таблица многостраничного раздела, с одним экземпляром и активной страницей.
//
Функция ПолучитьТаблицуМногостраничногоРаздела(флМногострочность = Ложь)
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление", ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	Если флМногострочность Тогда
		ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");	
	КонецЕсли;
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

	СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
	СтрПерваяСтраница.Представление = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	Возврат ТаблицаСтраницыРаздела;

КонецФункции // ПолучитьТаблицуМногостраничногоРаздела

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	Если УдалениДопЭкз = Истина   тогда
		Если ИмяСтраницы = "Раздел2"  тогда
			СтрРазделы = "Раздел24,Раздел25"; 
		ИначеЕсли ИмяСтраницы = "Раздел24"  тогда
			СтрРазделы = "Раздел2,Раздел25"; 
		ИначеЕсли ИмяСтраницы = "Раздел25"  тогда
			СтрРазделы = "Раздел2,Раздел24";
		КонецЕсли;                  
		РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, СтрРазделы);
	КонецЕсли; 

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1			= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	мСвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОписаниеТиповЧисло1);
	//максимальное количество экземпляров (страниц) многостраничного раздела (листа)
	//0-9 (0 - неограниченное количество экземпляров. Значения 1-9 имеют смысл при значении в колонке МногостраничностьВРазделе = Истина)
	
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела", ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел1 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел1.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	МнгРаздел12 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел12.Добавить();
	НовСтр.ИдГруппы = мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	МнгРаздел13 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел13.Добавить();
	НовСтр.ИдГруппы = мИдГруппы13;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 5;
	
	МнгРаздел2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел2.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	МнгРаздел24 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел24.Добавить();
	НовСтр.ИдГруппы = мИдГруппы24;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	МнгПриложение1 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение1.Добавить();
	НовСтр.ИдГруппы = мИдПриложения1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	МнгПриложение2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение2.Добавить();
	НовСтр.ИдГруппы = мИдПриложения2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	
	МнгПриложение3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение3.Добавить();
	НовСтр.ИдГруппы = мИдПриложения3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

	МнгПриложение4 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение4.Добавить();
	НовСтр.ИдГруппы = мИдПриложения4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	МнгПриложение5 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение5.Добавить();
	НовСтр.ИдГруппы = мИдПриложения5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;

	МнгПриложение6 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение6.Добавить();
	НовСтр.ИдГруппы = мИдПриложения6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;

	МнгПриложение7 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение7.Добавить();
	НовСтр.ИдГруппы = мИдПриложения7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел12;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел13";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел13;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел24";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел24;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел25";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

    СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

    СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение3;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

    СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение4;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

    СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение5;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение6";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение6;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение7";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение7;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()
	
	Если СокрЛП(мТитульный.Области.Период1.Значение + мТитульный.Области.Период2.Значение) = "" ИЛИ мСкопированаФорма <> Неопределено Тогда
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММ");
		мТитульный.Области.Период1.Значение = Сред(КодОтчетногоПериода, 1, 1);
		мТитульный.Области.Период2.Значение = Сред(КодОтчетногоПериода, 2, 1);
	КонецЕсли; 
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	мТитульный.Области.ОтчетГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	// задаем заголовок формы
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);

КонецПроцедуры // ЗаполнитьДатуПодписи()

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = ИНН + "-";
		КонецЦикла;
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
			КПП = КПП + "-";
		КонецЦикла;
		
		Для Сч=1 По 9 Цикл
			ПроставитьНаВсехЛистах("ИНН" + Сч + "_", ИНН);
			ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
		КонецЦикла;		
		
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			мТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		// заполняем наименование организации
		мТитульный.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		// заполняем телефон организации
		мТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		//заполняем код ОКВЭД (в случае, если еще не заполнен)
		Если НЕ ЗначениеЗаполнено(мТитульный.Области.ОКВЭД.Значение) Тогда
			мТитульный.Области.ОКВЭД.Значение=СокрЛП(СведенияОбОрганизации.ОКВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	// заполняем сведения о подписантах
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// УдалитьДопСтрокиМногострочнойЧастиРегОтчета
// Процедура удаляет дополнительные строки многострочного блока.
// Удаление происходит не по строчкам, а группой строк в одну итерацию.
//
// Параметры:
//  Форма          - ссылка на форму
//  ИдГруппы       - идентификатор многострочной группы
//  ОбновлятьБлок  - по умолчания Истина, запускать ли ОбновитьСтруктуруМногострочногоРаздела.
//
Процедура УдалитьДопСтрокиМногострочнойЧастиРегОтчета(ИдГруппы, ОбновлятьБлок = Истина)
	Перем ТаблицаДопСтрок;
	Перем ИсходноеКоличествоСтрокГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ТаблицаДопСтрок);
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы, ИсходноеКоличествоСтрокГруппы);
	ТекущееКоличествоСтрок = ТаблицаДопСтрок.Количество();
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Найти(ИдГруппы, "ИдГруппы");
		МнгЧастьОбластьИмя = НастройкиМнгЧ.Область;
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

		МнгЧастьОбласть = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя);
		Низ = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя).Низ + 1;
		УдаляемаяОбласть = ТекТабличноеПоле.Область(Низ, , Низ + ((ТекущееКоличествоСтрок - ИсходноеКоличествоСтрокГруппы) * ВысотаСтроки) - 1);
		ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
		ТаблицаДопСтрок.Очистить();
		Для Инд = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			ТаблицаДопСтрок.Добавить();
		КонецЦикла;
		Если ОбновлятьБлок Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИдГруппы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьДопСтрокиМногострочнойЧастиРегОтчета

//отличается от процедуры общего модуля роОчиститьТабличноеПоле отсутствием расчета для многострочных частей
Процедура ОчиститьТабличноеПолеМодиф(ВыбТабличноеПоле)

	ВыбТабличноеПолеИмя = ВыбТабличноеПоле.Имя;
	// Проверяем многострочные блоки в разделе.
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ВыбТабличноеПолеИмя, "МногострочностьВРазделе");
	ЕстьМногострочныеБлоки = ТипЗнч(НастройкиМнгЧ) = Тип("ТаблицаЗначений");
	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			УдалитьДопСтрокиМногострочнойЧастиРегОтчета(МногострочныйБлок, Ложь);
		КонецЦикла;
	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПолеИмя, "ПолеТабличногоДокумента", "");
	ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ВыбТабличноеПолеИмя, "ПредставлениеДанных");
	Если ПредставлениеДанных Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);
		ЗаполнениеЗначенийВКвадратиках(ИмяСтраницыПанели);
	КонецЕсли;

	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			ОбновитьСтруктуруМногострочногоРаздела(МногострочныйБлок);
		КонецЦикла;
		// Расчет всегда запускаем только в многострочных листах. В не многострочных, запускается при вставки доп. страницы, или интерактивно в коде.
		//Форма.Расчет(ИмяСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // роОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьТабличноеПолеМодиф(ВыбТабличноеПоле);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

////////////////////////////////////////////////////////////////////////////////
//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ+++

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
Процедура РасчетВСтруктуре(ИмяЛиста)
	
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Страница.Данные;
		
		
		Если ИмяЛиста = "Приложение1" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					СтрокаП000900001000 = СокрЛП(Данные.П000900001000);
					Если СтрокаП000900001000 <> "" Тогда 
						ЧислоП000900001000 = Число(СтрокаП000900001000);
					Иначе 
						ЧислоП000900001000 = 0;
					КонецЕсли;	
					
					Если ЧислоП000900001000 >=500 И  ЧислоП000900001000 <= 532 Тогда 
						ТекСтрока.П000900000004 = ТекСтрока.П000900000002 * ТекСтрока.П000900000003;
					иначе
						ТекСтрока.П000900000004 = ТекСтрока.П000900000002 * ТекСтрока.П000900000003/100;
					КонецЕсли;
					
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					Данные["П000900000004_"+ИндексТекСтроки] = ТекСтрока.П000900000004;
					
				КонецЦикла;	
			КонецЕсли;			
			
		ИначеЕсли    ИмяЛиста = "Раздел2" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			П000200001000 = СокрЛП(Данные.П000200001000); //Код вида
			П000200002000 = СокрЛП(Данные.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = мСтруктураМногостраничныхРазделов["Приложение1"];
			ТЗДанныеДопСтрок = Неопределено;
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				Если (СтраницаР1.Данные = Неопределено) ИЛИ (Тип(СтраницаР1.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеР1 = СтраницаР1.Данные;
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И	 СокрЛП(ДанныеР1.П000900002000) = П000200002000 тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			
			Если ТаблицаБлока <> Неопределено Тогда 
				СуммаП000210001004 = 0;
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					СтрокаКП =  СокрЛП(ТекСтрока.П000210001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					ИмяПоказателя = "П000210001003_"+ИндексТекСтроки;
					СуммаП000210001004 = СуммаП000210001004 +  ОкруглитьЧислоПоФормату(ТекСтрока.П000210001004);
					
					Если ТЗДанныеДопСтрок = Неопределено или СтрокаКП = "" Тогда 
						Продолжить;
						
					КонецЕсли;	  
					СуммаПоказателя = 0;
					ЕстьТакойПоказатель = Ложь;
					Для Каждого ТекСтрока из ТЗДанныеДопСтрок Цикл 
						Если ТекСтрока.П000900000001 = СтрокаКП тогда
							СуммаПоказателя = СуммаПоказателя + ТекСтрока.П000900000004; 
							ЕстьТакойПоказатель = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьТакойПоказатель тогда
						Данные[ИмяПоказателя] = СуммаПоказателя;
					КонецЕсли;
				КонецЦикла;
				
				//цикл по строкам раздела 2.2
				СуммаГр2Р22 = 0;
				Для сч = 1 по 9 Цикл 
					
					
					Показатель = СокрЛП(Данные["П00022000"+сч+"001"]);
					СуммаВычета = ОкруглитьЧислоПоФормату(Данные["П00022000"+сч+"002"]);
					СуммаГр2Р22 = СуммаГр2Р22+?(Показатель = "30010", 0, СуммаВычета); 
				КонецЦикла;	  
				Код4000 = СуммаП000210001004 - СуммаГр2Р22;
				Данные.П000230001000 =  ?(Код4000 > 0, Код4000, 0);
				Данные.П000230002000 =  ?(Код4000 < 0, - Код4000, 0);
				
			КонецЕсли;			
			
		ИначеЕсли    ИмяЛиста = "Раздел24" Тогда 
			
			ТаблицаБлокаР2 = мСтруктураМногостраничныхРазделов["Раздел2"].Найти(Страница.Представление);
			
			П000200001000 = СокрЛП(ТаблицаБлокаР2.Данные.П000200001000); //Код вида
			П000200002000 = СокрЛП(ТаблицаБлокаР2.Данные.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = мСтруктураМногостраничныхРазделов["Приложение1"];
			ТЗДанныеДопСтрок = Неопределено;
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				Если (СтраницаР1.Данные = Неопределено) ИЛИ (Тип(СтраницаР1.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеР1 = СтраницаР1.Данные;
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И	 СокрЛП(ДанныеР1.П000900002000) = П000200002000 тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					П000240001001  =  СокрЛП(ТекСтрока.П000240001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					
					ИмяПоказателя1 = "П000240001001_" + ИндексТекСтроки;
					ИмяПоказателя2 = "П000240001002_" + ИндексТекСтроки;
					ИмяПоказателя3 = "П000240001003_" + ИндексТекСтроки;
					ИмяПоказателя4 = "П000240001004_" + ИндексТекСтроки;
					ИмяПоказателя5 = "П000240001005_" + ИндексТекСтроки;
					Если  П000240001001 = "20001" или П000240001001 = "20002" тогда
						Данные[ИмяПоказателя3] = 0;
						Данные[ИмяПоказателя4] = "";
						Данные[ИмяПоказателя5] = "";
						
					КонецЕсли;
					
					Если ТЗДанныеДопСтрок = Неопределено или П000240001001 = "" Тогда 
						//УстановитьЦветФонаЯчейки(ИмяПоказателя2, 0);			 
						Продолжить;
					КонецЕсли;	  
					
					СуммаПоказателя = 0;
					ЕстьТакойПоказатель = Ложь;
					Для Каждого ТекСтрока из ТЗДанныеДопСтрок Цикл 
						Если ТекСтрока.П000900000001 = П000240001001 тогда
							СуммаПоказателя = СуммаПоказателя + ТекСтрока.П000900000004; 
							ЕстьТакойПоказатель = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьТакойПоказатель тогда
						Данные[ИмяПоказателя2] = СуммаПоказателя;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли    ИмяЛиста = "Раздел25"  Тогда 
			
			ТаблицаБлокаР2 = мСтруктураМногостраничныхРазделов["Раздел2"].Найти(Страница.Представление);
			
			ПоКоду3009 = 0;
			ПоКоду3010 = 0;
			
			Для сч = 1 по 9 Цикл 
				Показатель = СокрЛП(ТаблицаБлокаР2.Данные["П00022000"+сч+"001"]);
				СуммаВычета = ОкруглитьЧислоПоФормату(ТаблицаБлокаР2.Данные["П00022000"+сч+"002"]);
				Если  Показатель = "30009" Тогда 
					
					ПоКоду3009 = ПоКоду3009 + СуммаВычета;
					
				КонецЕсли;
				
				Если  Показатель = "30010" Тогда 
					
					ПоКоду3010 = ПоКоду3010 + СуммаВычета;
					
				КонецЕсли;
			КонецЦикла;
			Данные.П000250002002 = ПоКоду3009; 
			Данные.П000250003002 = ПоКоду3010; 
			
			ТаблицаРазделаП2 = мСтруктураМногостраничныхРазделов["Приложение2"];
			
			СуммаАвПлатежаПоКоду60001 = 0;
			СуммаАвПлатежаПоКоду60002 = 0;
			СуммаГр3Прил2ПоКоду60001 =  0;
			СуммаГр3Прил2ПоКоду60002 =  0;
			
			Для Каждого СтраницаП2 Из ТаблицаРазделаП2 Цикл
				Если (СтраницаП2.Данные = Неопределено) ИЛИ (Тип(СтраницаП2.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеП2 = СтраницаП2.Данные;
				ДанныеДопСтрокП2 = СтраницаП2.ДанныеДопСтрок;
				
				Если ДанныеДопСтрокП2 <> Неопределено Тогда 
					Для Каждого ТекСтрока из ДанныеДопСтрокП2 Цикл 
						Если СокрЛП(ТекСтрока.П000910000001) = "60001" И СокрЛП(ТекСтрока.П000910000002) = СокрЛП(ТаблицаБлокаР2.Данные["П000200001000"]) Тогда 
							//сбор данных осуществляется по совпадению кода вида подакцизного товара
							СуммаАвПлатежаПоКоду60001 = СуммаАвПлатежаПоКоду60001 + ОкруглитьЧислоПоФормату(ТекСтрока.П000910000005);
							СуммаГр3Прил2ПоКоду60001 =  СуммаГр3Прил2ПоКоду60001 + ТекСтрока.П000910000003;
						КонецЕсли;	
						
						Если СокрЛП(ТекСтрока.П000910000001) = "60002" И СокрЛП(ТекСтрока.П000910000002) = СокрЛП(ТаблицаБлокаР2.Данные["П000200001000"]) Тогда 
							//сбор данных осуществляется по совпадению кода вида подакцизного товара
							СуммаАвПлатежаПоКоду60002 = СуммаАвПлатежаПоКоду60002 + ОкруглитьЧислоПоФормату(ТекСтрока.П000910000005);
							СуммаГр3Прил2ПоКоду60002 =  СуммаГр3Прил2ПоКоду60002 + ТекСтрока.П000910000003;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Данные.П000250004002 = СуммаАвПлатежаПоКоду60001;
			Данные.П000250006002 = СуммаАвПлатежаПоКоду60002;
			
			СуммаАвПлатежа   = ОкруглитьЧислоПоФормату(Данные.П000250001002) - ОкруглитьЧислоПоФормату(Данные.П000250002002) - ОкруглитьЧислоПоФормату(Данные.П000250003002) + ОкруглитьЧислоПоФормату(Данные.П000250004002);
			
			Данные.П000250005002 = ?(СуммаАвПлатежа > 0, СуммаАвПлатежа, 0);
			Данные.П000250007002 = ?(СуммаАвПлатежа  < 0, - СуммаАвПлатежа, 0);
			
			Данные.П000250001000 =  СуммаГр3Прил2ПоКоду60001;
			Данные.П000250002000 =  СуммаГр3Прил2ПоКоду60002;
			
		ИначеЕсли    ИмяЛиста = "Приложение4" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			СуммаПоКоду111 = 0;
			СуммаПоКоду121 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					Если СокрЛП(ТекСтрока.П000930000001) = "111" Тогда  
						СуммаПоКоду111 = СуммаПоКоду111 + ТекСтрока.П000930000003;
					КонецЕсли;
					
					Если СокрЛП(ТекСтрока.П000930000001) = "121" Тогда  
						СуммаПоКоду121 = СуммаПоКоду121 + ТекСтрока.П000930000003;
					КонецЕсли;
					
				КонецЦикла;
				
				Данные.П000930005003 = СуммаПоКоду111;
				Данные.П000930006003 = СуммаПоКоду121;
			КонецЕсли;			
			
		ИначеЕсли    ИмяЛиста = "Приложение5" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			СуммаПоКоду111 = 0;
			СуммаПоКоду121 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					Если СокрЛП(ТекСтрока.П000940000001) = "111" Тогда  
						СуммаПоКоду111 = СуммаПоКоду111 + ТекСтрока.П000940000003;
					КонецЕсли;
					
					Если СокрЛП(ТекСтрока.П000940000001) = "121" Тогда  
						СуммаПоКоду121 = СуммаПоКоду121 + ТекСтрока.П000940000003;
					КонецЕсли;
					
				КонецЦикла;
				
				Данные.П000940005003 = СуммаПоКоду111;
				Данные.П000940006003 = СуммаПоКоду121;
			КонецЕсли;			
			
		ИначеЕсли    ИмяЛиста = "Приложение6" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			СуммаПоГр3 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					СуммаПоГр3 = СуммаПоГр3 + ТекСтрока.П000950000002;
					
				КонецЦикла;
				
				Данные.П000950005003 = СуммаПоГр3;
			КонецЕсли;			
			
		ИначеЕсли    ИмяЛиста = "Приложение7" Тогда 
			ТаблицаБлока = Страница.ДанныеДопСтрок;
			
			СуммаПоГр3 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					СуммаПоГр3 = СуммаПоГр3 + ТекСтрока.П000960000002;
					
				КонецЦикла;
				
				Данные.П000960005003 = СуммаПоГр3;
			КонецЕсли;			
			
			
		КонецЕсли;			
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если  
					//	СтрДлина(ЭлементДанных.Ключ) < 13 ИЛИ 
					НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;			
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры // РасчетВСтруктуре


// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей2007Кв1");
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры


// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяСтраницыПанели = "") Экспорт
	Перем ТаблицаБлока;
	
	Если (мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	//
	Если ИмяСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		МногострочностьЕсть = (ИмяГруппы <> Неопределено);
		Если МногостраничностьЕсть Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Ложь);
		ИначеЕсли МногострочностьЕсть Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);	
		КонецЕсли;
	КонецЕсли;
	
	Если (ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Приложение1" или ИмяТекущейСтраницыПанели = "Раздел2" или ИмяТекущейСтраницыПанели = "Раздел24" Тогда
		
		РасчетВСтруктуре("Приложение1");
		РасчетВСтруктуре("Раздел24");
		РасчетВСтруктуре("Раздел2");
		РасчетВСтруктуре("Раздел25");
		
	КонецЕсли;	
	
	Если ИмяТекущейСтраницыПанели = "Раздел25" или  ИмяТекущейСтраницыПанели = "Приложение2" или ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		РасчетВСтруктуре("Раздел2");
		РасчетВСтруктуре("Раздел25");
		
	КонецЕсли;		
	
	
	
	Если ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		
		РасчетВСтруктуре("Приложение4");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		
		РасчетВСтруктуре("Приложение5");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда
		
		РасчетВСтруктуре("Приложение6");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение7" Тогда
		
		РасчетВСтруктуре("Приложение7");
		
	КонецЕсли;
	
	//ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
	//	
	//	//Сбор данных  
	//	П000310001003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310001003.Значение);
	//	П000310002003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310002003.Значение);
	//	П000310003003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310003003.Значение);
	//	П000310005003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310005003.Значение);
	//	П000310006003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310006003.Значение);
	//	П000310007003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310007003.Значение);
	//	П000310008003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000310008003.Значение);
	//	
	//	//Расчеты
	//	П000310004003 = П000310001003 + П000310002003 - П000310003003;	
	//	П000310009003 = ?(П000310008003 = 0, 0, П000310005003 + П000310006003 + П000310007003 * П000310001003 / П000310008003);	
	//	П000310010003 = П000310004003 + ОкруглитьЧислоПоФормату(П000310009003);	
	//	
	//	//Запишем, что посчитали
	//	мРаздел3.Области.П000310004003.Значение = П000310004003;
	//	мРаздел3.Области.П000310009003.Значение = П000310009003;
	//	мРаздел3.Области.П000310010003.Значение = П000310010003;
	//	
	//	
	//	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ТаблицаБлока);
	//	Колонка2 = 0;
	//	
	//	Для каждого Зап Из ТаблицаБлока Цикл
	//		Колонка2 = Колонка2 + Зап.П000320012002;
	//	КонецЦикла;
	//	
	//	Для каждого Зап Из ТаблицаБлока Цикл
	//		НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
	//		Зап.П000320012003 = ?(Колонка2 = 0, 0, Зап.П000320012002 / Колонка2);
	//		Зап.П000320012004 = Зап.П000320012003 * П000310010003;
	//		
	//		мРаздел3.Области.Найти("П000320012003_" + НомерСтроки).Значение = Зап.П000320012003;
	//		мРаздел3.Области.Найти("П000320012004_" + НомерСтроки).Значение = Зап.П000320012004;
	//	КонецЦикла;
	//	
	//ИначеЕсли ИмяСтраницыПанели = "Раздел42" Тогда
	//	
	//	//Сбор данных  	
	//	П000420001003 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420001003.Значение);
	//	П000420003003 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420003003.Значение);
	//	П000420004003 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420004003.Значение);
	//	П000420005003 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420005003.Значение);
	//	П000420007003 = мРаздел42.Области.П000420007003.Значение;
	//	П000420008003 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420008003.Значение);
	//	
	//	//Расчеты
	//	П000420002003 = П000420003003 + П000420004003 + П000420005003;
	//	П000420009003 = ОкруглитьЧислоПоФормату(П000420007003 * П000420008003);
	//	П000420006003 = Мин(П000420001003 + П000420002003, П000420009003);
	//	П000420010003 = П000420008003 - П000420006003;
	//	П000420011003 = П000420001003 + П000420002003 - П000420006003;
	//	
	//	//Запишем, что посчитали
	//	мРаздел42.Области.П000420002003.Значение = П000420002003;
	//	мРаздел42.Области.П000420009003.Значение = П000420009003;
	//	мРаздел42.Области.П000420006003.Значение = П000420006003;
	//	мРаздел42.Области.П000420010003.Значение = П000420010003;
	//	мРаздел42.Области.П000420011003.Значение = П000420011003;

	//ИначеЕсли ИмяСтраницыПанели = "Раздел43" Тогда
	//	
	//	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы43, ТаблицаБлока);

	//	Для каждого Зап Из ТаблицаБлока Цикл
	//		НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
	//		
	//		//заполнение итогов по строке в структуре многострочного раздела
	//		П000430001020 = ОкруглитьЧислоПоФормату(Зап.П000430001020);
	//		П000430001030 = ОкруглитьЧислоПоФормату(Зап.П000430001030);
	//		П000430001040 = ОкруглитьЧислоПоФормату(Зап.П000430001040);
	//		
	//		Зап.П000430001050 = П000430001020 - П000430001030 - П000430001040;
	//		мРаздел43.Области.Найти("П000430001050_" + НомерСтроки).Значение = Зап.П000430001050;
	//	КонецЦикла;
	//	
	//ИначеЕсли ИмяСтраницыПанели = "" Тогда

	//	// В этом режиме перерассчитаем все показатели на листах
	//	Расчет("Раздел2");
	//	Расчет("Раздел3");
	//	Расчет("Раздел42");
	//	Расчет("Раздел43");

	//КонецЕсли;

КонецПроцедуры // Расчет()

//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ---
////////////////////////////////////////////////////////////////////////////////

Процедура УстановитьМаскиВПоляхВвода()
	
	// титульный
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	// Раздел1
	мРаздел1.Области["П000110001003"].ЭлементУправления.Маска = "99999999999"; //ОКАТО
	Для Сч = 1 По 6 Цикл
		мРаздел1.Области["П000110002020_" + Сч].ЭлементУправления.Маска = "99999999999999999999"; //КБК
	КонецЦикла;
	
	// Раздел12
	мРаздел12.Области["П000120001003"].ЭлементУправления.Маска = "99999999999"; //ОКАТО
	Для Сч = 1 По 5 Цикл
		мРаздел12.Области["П000120002020_" + Сч].ЭлементУправления.Маска = "99999999999999999999"; //КБК
	КонецЦикла;
	
	// Раздел13
	мРаздел13.Области["П000130001003"].ЭлементУправления.Маска = "99999999999"; //ОКАТО
	Для Сч = 1 По 8 Цикл
		мРаздел13.Области["П000130002020_" + Сч].ЭлементУправления.Маска = "99999999999999999999"; //КБК
	КонецЦикла;
	
	// Раздел2
	мРаздел2.Области["П000200001000"].ЭлементУправления.Маска = "999"; //Код вида подакцизного товара
	мРаздел2.Области["П000200002000"].ЭлементУправления.Маска = "999"; //ОКЕИ
	мРаздел2.Области["П000220001001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220002001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220003001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220004001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220005001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220006001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220007001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220008001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	мРаздел2.Области["П000220009001"].ЭлементУправления.Маска = "99999"; //КП для немногостр части
	
	Для Сч = 1 По 9 Цикл
		мРаздел2.Области["П000210001001_" + Сч].ЭлементУправления.Маска = "99999"; //КП
		мРаздел2.Области["П000210001002_" + Сч].ЭлементУправления.Маска = "9"; //ПП ставки акциза на спирт
		
	КонецЦикла;
	
	// Приложение1
	мПриложение1.Области["П000900001000"].ЭлементУправления.Маска = "999"; //Код вида подакцизного товара
	мПриложение1.Области["П000900002000"].ЭлементУправления.Маска = "999"; //ОКЕИ
	
	Для Сч = 1 По 22 Цикл
		мПриложение1.Области["П000900000001_" + Сч].ЭлементУправления.Маска = "99999"; //КП
	КонецЦикла;
	
	
	// Раздел24
	
	Для Сч = 1 По 25 Цикл
		
		мРаздел24.Области["П000240001001_" + Сч].ЭлементУправления.Маска = "99999"; //КП
		мРаздел24.Области["П000240001004_" + Сч].ЭлементУправления.Маска = "99"; //код налогового периода
		мРаздел24.Области["П000240001005_" + Сч].ЭлементУправления.Маска = "9999"; //год налогового периода
		
	КонецЦикла;

	
		// Приложение2
	мПриложение2.Области["П000910001000"].ЭлементУправления.Маска = "9999999999"; //ИНН
	мПриложение2.Области["П000910002000"].ЭлементУправления.Маска = "999999999"; //КПП
	
	Для Сч = 1 По 18 Цикл
		мПриложение2.Области["П000910000001_" + Сч].ЭлементУправления.Маска = "99999"; //КП
		мПриложение2.Области["П000910000002_" + Сч].ЭлементУправления.Маска = "999"; //Код вида приобретаемого спирта
		мПриложение2.Области["П000910000004_" + Сч].ЭлементУправления.Маска = "999"; //Код вида подакцизного товара
	КонецЦикла;

		// Приложение3
	мПриложение3.Области["П000920001000"].ЭлементУправления.Маска = "9999999999"; //ИНН
	мПриложение3.Области["П000920002000"].ЭлементУправления.Маска = "999999999"; //КПП
	
	Для Сч = 1 По 18 Цикл
		мПриложение3.Области["П000920000001_" + Сч].ЭлементУправления.Маска = "99999"; //КП
		мПриложение3.Области["П000920000002_" + Сч].ЭлементУправления.Маска = "999"; //Код вида приобретаемого спирта
		мПриложение3.Области["П000920000004_" + Сч].ЭлементУправления.Маска = "999"; //Код вида подакцизного товара
	КонецЦикла;
	
	// Приложение4
	мПриложение4.Области["П000930002000"].ЭлементУправления.Маска = "9999999999"; //ИНН
	мПриложение4.Области["П000930003000"].ЭлементУправления.Маска = "999999999"; //КПП
	
	Для Сч = 1 По 6 Цикл
		
		мПриложение4.Области["П000930000001_" + Сч].ЭлементУправления.Маска = "999"; ////Код вида подакцизного товара
		
	КонецЦикла;

	
		// Приложение5
	мПриложение5.Области["П000940002000"].ЭлементУправления.Маска = "9999999999"; //ИНН
	мПриложение5.Области["П000940003000"].ЭлементУправления.Маска = "999999999"; //КПП
	
	Для Сч = 1 По 6 Цикл
		
		мПриложение5.Области["П000940000001_" + Сч].ЭлементУправления.Маска = "999"; ////Код вида подакцизного товара
		
	КонецЦикла;

		// Приложение6
	мПриложение6.Области["П000950002000"].ЭлементУправления.Маска = "999999999999"; //ИНН
	мПриложение6.Области["П000950003000"].ЭлементУправления.Маска = "999999999"; //КПП
	
		// Приложение7
	мПриложение7.Области["П000960002000"].ЭлементУправления.Маска = "999999999999"; //ИНН
	мПриложение7.Области["П000960003000"].ЭлементУправления.Маска = "999999999"; //КПП
	
	
	// Раздел2
	//мРаздел2.Области.П000200001003.ЭлементУправления.Маска = "99999";   //Код вида ПИ
	//мРаздел2.Области.П000200002003.ЭлементУправления.Маска = "99999999999999999999"; //КБК
	//мРаздел2.Области.П000200003003.ЭлементУправления.Маска = "999"; //ОКЕИ
	//
	////программная установка типа (обход интерактивного запрета на точность больше 9)
	//ТипДоляСодержанияМеталла = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(11, 10);
	//мРаздел2.Области.П000200005003.ТипЗначения = ТипДоляСодержанияМеталла;
	//
	//Для Сч = 1 По 3 Цикл
	//	мРаздел2.Области["П000200010010_" + Сч].ЭлементУправления.Маска = "99999999999"; //ОКАТО
	//	
	//	мРаздел2.Области["П000200010031_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//	мРаздел2.Области["П000200010032_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//	мРаздел2.Области["П000200010033_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//	мРаздел2.Области["П000200010034_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//	мРаздел2.Области["П000200010035_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//КонецЦикла;
	//
	//// Раздел3
	////мРаздел3.Области.П000320011000.ЭлементУправления.Маска = "999"; //ОКЕИ
	//
	//Для Сч = 1 По 7 Цикл
	//	//мРаздел3.Области["П000320012001_" + Сч].ЭлементУправления.Маска = "99999";   //Код вида ПИ
	//КонецЦикла;
	//
	//// Раздел41
	////мРаздел41.Области.П000400001003.ЭлементУправления.Маска = "99999999999999999999"; //КБК
	////мРаздел41.Области.П000400003003.ЭлементУправления.Маска = "999"; //ОКЕИ
	//
	//Для Сч = 1 По 10 Цикл
	//	//мРаздел41.Области["П000410004001_" + Сч].ЭлементУправления.Маска = "99999999999"; //ОКАТО
	//	//мРаздел41.Области["П000410004002_" + Сч].ЭлементУправления.Маска = "99999";   //Код вида ПИ
	//	//мРаздел41.Области["П000410004003_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//	//мРаздел41.Области["П000410004004_" + Сч].ЭлементУправления.Маска = "9999"; 	//Код основания налогообложения
	//КонецЦикла;

	//// Раздел42
	////мРаздел42.Области.П000420007003.ЭлементУправления.МаксимальноеЗначение = 0.3; //Коэфициент Кт
	//
	//// Раздел43
	//Для Сч = 1 По 4 Цикл
	//	//мРаздел43.Области["П000430001010_" + Сч].ЭлементУправления.Маска = "99.9999"; //Месяц и год
	//	//мРаздел43.Области["П000430001060_" + Сч].ЭлементУправления.Маска = "99.9999"; //Месяц и год
	//КонецЦикла;
	
	// области номера страницы
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		НомерБлока = 1;
		Пока ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_1") <> Неопределено Цикл
			Для НомерОбластиВБлоке = 1 По 3 Цикл
				ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_" + НомерОбластиВБлоке).ЭлементУправления.Маска = "9";
			КонецЦикла;
			НомерБлока = НомерБлока + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	Перем ИсходноеКоличествоСтрокГруппы;
	
	мБезОткрытияФормы = БезОткрытияФормы;

	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный 	= ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1 	= ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел12 	= ЭлементыФормы.ПолеТабличногоДокументаРаздел12;
	мРаздел13 	= ЭлементыФормы.ПолеТабличногоДокументаРаздел13;
	мРаздел2	= ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел24	= ЭлементыФормы.ПолеТабличногоДокументаРаздел24;
	мРаздел25	= ЭлементыФормы.ПолеТабличногоДокументаРаздел25;
	мПриложение1 = ЭлементыФормы.ПолеТабличногоДокументаПриложение1;
	мПриложение2 = ЭлементыФормы.ПолеТабличногоДокументаПриложение2;
	мПриложение3 = ЭлементыФормы.ПолеТабличногоДокументаПриложение3;
	мПриложение4 = ЭлементыФормы.ПолеТабличногоДокументаПриложение4;
	мПриложение5 = ЭлементыФормы.ПолеТабличногоДокументаПриложение5;
	мПриложение6 = ЭлементыФормы.ПолеТабличногоДокументаПриложение6;
	мПриложение7 = ЭлементыФормы.ПолеТабличногоДокументаПриложение7;
	 УстановитьМаскиВПоляхВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
			
			//Значение "по месту"
			ПоМесту = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "120", "214");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПоМесту", 3, ПоМесту);
		КонецЕсли;
		ЗаполнитьДатуПодписи();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	//Иначе
	//	УправлениеЛистами();
	КонецЕсли;

	//начальное заполнение структуры данных
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			 
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//обработчики кнопок многостраничных страниц+++
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел1");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел12Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел12");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел13Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел13");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел2");
 
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
 
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел24Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел24");
 
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");

КонецПроцедуры
 
Процедура КнопкаПредыдущаяСтраницаРаздел25Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел25");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение1");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение2");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил3Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение3");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил4Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение4");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил5Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение5");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил6Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение6");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПрил7Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Приложение7");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел12Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел12");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел13Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел13");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
	
КонецПроцедуры
 
Процедура КнопкаСледующаяСтраницаРаздел24Нажатие(Элемент)
	
 ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел24");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
	
КонецПроцедуры
 
Процедура КнопкаСледующаяСтраницаРаздел25Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел25");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение1");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение2");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил3Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение3");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил4Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение4");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил5Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение5");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил6Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение6");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПрил7Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение7");
	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Раздел1");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел12Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Раздел12");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел13Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Раздел13");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Раздел2");
 ВставитьДополнительнуюСтраницу("Раздел24");
 ВставитьДополнительнуюСтраницу("Раздел25");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил1Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение1");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил2Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение2");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил3Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение3");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил4Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение4");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил5Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение5");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил6Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение6");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПрил7Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Приложение7");
 
КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Раздел1");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел12Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Раздел12");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел13Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Раздел13");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
 
 	//для синхронного удаления сначала установим активными страницы разделов 4.2 и 4.3 с индексами, равными текущему индексу страницы раздела 4.1
	Перем ТаблицаСтраниц;
	
	//сначала определим индекс страницы раздела 4.1
	мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраниц);
	СтрТаблицаСтраницы = ТаблицаСтраниц.Найти(Истина, "АктивнаяСтраница");
	ИндексТекСтраницыРаздела2 = ТаблицаСтраниц.Индекс(СтрТаблицаСтраницы);
	
	//затем установим активными страницы разделов 4.2 и 4.3
	мСтруктураМногостраничныхРазделов.Свойство("Раздел24", ТаблицаСтраниц);
	СтрТаблицаСтраницы = ТаблицаСтраниц.Найти(Истина, "АктивнаяСтраница");
	ИндексТекСтраницыРаздела24 = ТаблицаСтраниц.Индекс(СтрТаблицаСтраницы);
	Если ИндексТекСтраницыРаздела24 <> ИндексТекСтраницыРаздела2 Тогда
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		ТаблицаСтраниц.Получить(ИндексТекСтраницыРаздела2).АктивнаяСтраница = Истина;
	КонецЕсли;
	
	мСтруктураМногостраничныхРазделов.Свойство("Раздел25", ТаблицаСтраниц);
	СтрТаблицаСтраницы = ТаблицаСтраниц.Найти(Истина, "АктивнаяСтраница");
	ИндексТекСтраницыРаздела25 = ТаблицаСтраниц.Индекс(СтрТаблицаСтраницы);
	Если ИндексТекСтраницыРаздела25 <> ИндексТекСтраницыРаздела2 Тогда
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		ТаблицаСтраниц.Получить(ИндексТекСтраницыРаздела2).АктивнаяСтраница = Истина;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницу("Раздел2");
	УдалитьДополнительнуюСтраницу("Раздел24");
	УдалитьДополнительнуюСтраницу("Раздел25");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил1Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение1");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил2Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение2");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил3Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение3");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил4Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение4");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил5Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение5");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил6Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение6");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПрил7Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Приложение7");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел12Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел12");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел13Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел13");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");

КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел24Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел24");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
 ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел25Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел25");
 
КонецПроцедуры
 
Процедура КнопкаПерейтиНаСтраницуПрил1Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение1");
 
КонецПроцедуры
 
Процедура КнопкаПерейтиНаСтраницуПрил2Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение2");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуПрил3Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение3");
 
КонецПроцедуры
  
Процедура КнопкаПерейтиНаСтраницуПрил4Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение4");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуПрил5Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение5");
 
КонецПроцедуры
  
Процедура КнопкаПерейтиНаСтраницуПрил6Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение6");
 
КонецПроцедуры
 
Процедура КнопкаПерейтиНаСтраницуПрил7Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение7");
 
КонецПроцедуры



//обработчики кнопок многостраничных страниц---

//обработка выбора на всех страницах+++
Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	
	//специальная обработка некоторых областей
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		//Определение ТребРезультат+++
		//проверка и удаление вариантов происходит для отдельных показателей
		//внутри происходит проверка: требуется ли сокращать список и по какому значению результата проверки
		//если будет требуемый результат проверки условий, отличный от нуля, то будет проверка
		//конструкция проверки должна предусматривать наличие нескольких критериев
		//Примечание: для последующего корректного удаления ТребРезультат следует определять числом
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
			ТребРезультат = НомерМесяца;
			
		КонецЕсли;
		//Определение ТребРезультат---
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		ТЗВыбора.Колонки.Удалить(2);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
				   |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		//определение первоначального значеня
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			//доработка результата выбора
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			//заполнение отчета данными выбора
			Для Инд = 1 По 4 Цикл
				мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			ПроставитьНаВсехЛистах("КПП1_", РезультатВыбора.КПП);
			
			//заполняем сведения о подписантах
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры
//обработка выбора на всех страницах---

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			//поле подписанта остается пустым
		Иначе
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	мТитульный.Области.ПрПодп.Значение = ТипПодписанта;
	мТитульный.Области.ОргПодписант.Значение = Подписант;
	мТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	мТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

//обработка ПриИзмененииСодержимогоОбласти на всех страницах+++
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка = Истина)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...") +++
	СвойстваПоказателя = НайтиСвойстваПоказателя(ИмяПоказателя);
	
	//обработка изменения зависимых значений (влияние на критерий)+++
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		ТЗВыбора = СвойстваПоказателя.ТаблицаЗначений.Скопировать();
		
		
		Если КодПоказателя =  "П000210001001" Тогда // проверка уникальности значения на тек. странице
			Если  СокрЛП(ЗначПоказателя) <> ""  И  мСтруктураМногострочныхРазделов.П0002100010.Найти(ЗначПоказателя)<> Неопределено И СокрЛП(Область.Значение)<> СокрЛП(ЗначПоказателя) Тогда 
				Сообщить("Код показателя на одной странице раздела должен быть уникальным!");
				Область.Значение = "";
			КонецЕсли;
		КонецЕсли;
		
		Если КодПоказателя = "П000900001000" или КодПоказателя = "П000900002000" Тогда //"шапка" приложения1
			//нужно обеспечить контроль уникальности комбинации этих полей для многостраничного раздела
			
			ТаблицаРаздела = мСтруктураМногостраничныхРазделов["Приложение1"];
			
			Для Каждого Страница Из ТаблицаРаздела Цикл
				Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				Данные = Страница.Данные;
				П000900001000 =  СокрЛП(Элемент.Области.П000900001000.Значение);
				П000900002000 =  СокрЛП(Элемент.Области.П000900002000.Значение);
				Если П000900001000 <> "" И П000900002000 <> "" И СокрЛП(Данные.П000900001000) = СокрЛП(Элемент.Области.П000900001000.Значение) И	 СокрЛП(Данные.П000900002000) = СокрЛП(Элемент.Области.П000900002000.Значение) тогда //совпали коды вида и ОКЕИ
					Сообщить("Такая комбинация значений кода вида подакцизного товара и ОКЕИ уже есть на другом листе отчета!");
					Область.Значение = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			
		КонецЕсли;
		
		
		
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.Найти(ЗначПоказателя,"Код");
		Если ЭлТЗВыбора <> Неопределено И РегламентированнаяОтчетность.роЯвляетсяЧислом(ЭлТЗВыбора.РезультатПроверки) Тогда
			Рез = Число(ЭлТЗВыбора.РезультатПроверки);
			Если Рез > 0 Тогда
				
				
				ТЗКритерии = Новый ТаблицаЗначений;
				ТЗКритерии.Колонки.Добавить("Область");
				ТЗКритерии.Колонки.Добавить("ТребЗнач");
				
				Для каждого Критерий Из ТЗКритерии Цикл
					//Если текущее значение отличается от требуемого происходит присвоение
					Если Критерий.Область.Значение <> Критерий.ТребЗнач Тогда
						Критерий.Область.Значение = Критерий.ТребЗнач;
					КонецЕсли;   
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//обработка изменения зависимых значений (влияние на критерий)---
	
	//обработка изменения значений критериев (влияние на зависимые показатели)+++
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		//введение таблицы значений предусматривает влияние критерия на несколько зависимых показателей
		ТЗЗависимЗнач = Новый ТаблицаЗначений;
		ТЗЗависимЗнач.Колонки.Добавить("ОбластьПоказателя");
		ТЗЗависимЗнач.Колонки.Добавить("ТребРез");
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = НайтиСвойстваПоказателя(ЗависимЗнач.ОбластьПоказателя.Имя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений <> Неопределено Тогда
				//поиск строки списка выбора, соответствующую текущему значению зависимого показателя
				СтрокаСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.Найти(СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателя.Значение)),"Код");
				Если СтрокаСписка <> Неопределено Тогда
					Рез = ?(СтрокаСписка.РезультатПроверки = "",0,Число(СтрокаСписка.РезультатПроверки));
					Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							//очистка значения зависмого параметра - т.к. не соответствует измененному значению критерия
							ЗависимЗнач.ОбластьПоказателя.Значение = "";
						КонецЕсли;					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	//обработка изменения значений критериев (влияние на зависимые показатели)---
	
	Модифицированность = Истина;
	Расчет();	
	
	
	Если Найти(КодПоказателя, "П000210001001") > 0   или КодПоказателя =  "П000200001000"   или   КодПоказателя =  "П000200002000" Тогда 
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел2");
		
	КонецЕсли;	
	
	Если Найти(КодПоказателя, "П000240001001") > 0 Тогда 
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловия("Раздел24");
		
	КонецЕсли;	
	
	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...") ---
КонецПроцедуры
//обработка ПриИзмененииСодержимогоОбласти на всех страницах---

//обработка ПриАктивизацииОбласти на всех страницах+++
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел12ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел12");
 
КонецПроцедуры
Процедура ПолеТабличногоДокументаРаздел13ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел13");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел24ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел24");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел25ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел25");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил4ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение4");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил5ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение5");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил6ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение6");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаПрил7ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение7");
 
КонецПроцедуры

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;
	
	Раздел = ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
		
		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
		
		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;
		
		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
		
		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		
		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;
			
			РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(СтруктураГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);
			
		КонецЦикла;
		
		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);
		
		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
			
			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел1;
	ИначеЕсли ИдГруппы = мИдГруппы12 Тогда 
		ТекТабличноеПоле = мРаздел12;
	ИначеЕсли ИдГруппы = мИдГруппы13 Тогда
		ТекТабличноеПоле = мРаздел13;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел2;
	ИначеЕсли ИдГруппы = мИдГруппы24 Тогда
		ТекТабличноеПоле = мРаздел24;
	ИначеЕсли ИдГруппы =  мИдПриложения1 Тогда
		ТекТабличноеПоле = мПриложение1;
	ИначеЕсли ИдГруппы =  мИдПриложения2 Тогда
		ТекТабличноеПоле = мПриложение2;
	ИначеЕсли ИдГруппы =  мИдПриложения3 Тогда
		ТекТабличноеПоле = мПриложение3;
	ИначеЕсли ИдГруппы =  мИдПриложения4 Тогда
		ТекТабличноеПоле = мПриложение4;
	ИначеЕсли ИдГруппы =  мИдПриложения5 Тогда
		ТекТабличноеПоле = мПриложение5;
	ИначеЕсли ИдГруппы =  мИдПриложения6 Тогда
		ТекТабличноеПоле = мПриложение6;
	ИначеЕсли ИдГруппы =  мИдПриложения7 Тогда
		ТекТабличноеПоле = мПриложение7;
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()
// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел12" Тогда
		ИмяГруппы = мИдГруппы12;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел13" Тогда
		ИмяГруппы = мИдГруппы13;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = мИдГруппы2;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел24" Тогда
		ИмяГруппы = мИдГруппы24;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = мИдПриложения1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = мИдПриложения2;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = мИдПриложения3;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы = мИдПриложения4;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = мИдПриложения5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение6" Тогда
		ИмяГруппы = мИдПриложения6;
	ИначеЕсли ИмятекущейСтраницыПанели = "Приложение7" Тогда
		ИмяГруппы = мИдПриложения7;
	
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

Процедура КнопкаДобавитьДопСтрокиРаздел1Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел12Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел13Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел2Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры
 
Процедура КнопкаДобавитьДопСтрокиРаздел24Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил1Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил2Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил3Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил4Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил5Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил6Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПрил7Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел1Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел12Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел13Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел2Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел24Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил1Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

 Процедура КнопкаУдалитьДопСтрокиПрил2Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил3Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил4Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил5Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил6Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПрил7Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
//	Расчет();
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" или ИмяТекущейСтраницыПанели = "Раздел25" или ИмяТекущейСтраницыПанели = "Раздел24" Тогда 
		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	 ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ИмяТекущейСтраницыПанели)
	
	
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" тогда  //определить цвет ячеек графы 3
		
		ТаблицаРаздела = мСтруктураМногостраничныхРазделов["Раздел2"];
		НомерАктивнойСтраницы = ТаблицаРаздела.Найти(истина,  "АктивнаяСтраница").Представление;
		
	    ТаблицаТекущейСтраницы = ТаблицаРаздела.Найти(НомерАктивнойСтраницы);
		
		
			Данные = ТаблицаТекущейСтраницы.Данные;
			ТаблицаБлока = ТаблицаТекущейСтраницы.ДанныеДопСтрок;
			
			П000200001000 = СокрЛП(Данные.П000200001000); //Код вида
			П000200002000 = СокрЛП(Данные.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = мСтруктураМногостраничныхРазделов["Приложение1"];
			ТЗДанныеДопСтрок = Неопределено;
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				Если (СтраницаР1.Данные = Неопределено) ИЛИ (Тип(СтраницаР1.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеР1 = СтраницаР1.Данные;
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И	 СокрЛП(ДанныеР1.П000900002000) = П000200002000 тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					СтрокаКП =  СокрЛП(ТекСтрока.П000210001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					ИмяПоказателя = "П000210001003_"+ИндексТекСтроки;
					
					Если ТЗДанныеДопСтрок = Неопределено или СтрокаКП = "" Тогда 
						УстановитьЦветФонаЯчейки(ИмяПоказателя, 0);			 
						Продолжить;
					КонецЕсли;	  
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ТабЗнач.П000900000001,
					|	ТабЗнач.П000900000002,
					|	ТабЗнач.П000900000003,
					|	ТабЗнач.П000900000004
					|ПОМЕСТИТЬ вт
					|ИЗ
					|	&ТабЗнач КАК ТабЗнач
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СУММА(вт.П000900000004) КАК П000900000004
					|ПОМЕСТИТЬ вт2
					|ИЗ
					|	вт КАК вт
					|ГДЕ
					|	вт.П000900000001 = &П000900000001
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	вт2.П000900000004 КАК НалБаза
					|ИЗ
					|	вт2 КАК вт2
					|ГДЕ
					|	(НЕ вт2.П000900000004 ЕСТЬ NULL )";
					
					
					Запрос.УстановитьПараметр("ТабЗнач", ТЗДанныеДопСтрок);
					Запрос.УстановитьПараметр("П000900000001", СтрокаКП);
					
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда 
						УстановитьЦветФонаЯчейки(ИмяПоказателя, ?(ФлажокОтклАвтоРасчет, 0, 4));			 
					Иначе
						УстановитьЦветФонаЯчейки(ИмяПоказателя, 0);			 
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел24"	тогда
		
		ТаблицаРаздела = мСтруктураМногостраничныхРазделов["Раздел24"];
		
		НомерАктивнойСтраницы = ТаблицаРаздела.Найти(истина,  "АктивнаяСтраница").Представление;
		
	    ТаблицаТекущейСтраницы = ТаблицаРаздела.Найти(НомерАктивнойСтраницы);

		
			Данные = ТаблицаТекущейСтраницы.Данные;
			ТаблицаБлока = ТаблицаТекущейСтраницы.ДанныеДопСтрок;
			
			ТаблицаБлокаР2 = мСтруктураМногостраничныхРазделов["Раздел2"].Найти(ТаблицаТекущейСтраницы.Представление);
			
			П000200001000 = СокрЛП(ТаблицаБлокаР2.Данные.П000200001000); //Код вида
			П000200002000 = СокрЛП(ТаблицаБлокаР2.Данные.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = мСтруктураМногостраничныхРазделов["Приложение1"];
			ТЗДанныеДопСтрок = Неопределено;
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				Если (СтраницаР1.Данные = Неопределено) ИЛИ (Тип(СтраницаР1.Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеР1 = СтраницаР1.Данные;
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И	 СокрЛП(ДанныеР1.П000900002000) = П000200002000 тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					П000240001001  =  СокрЛП(ТекСтрока.П000240001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					
					ИмяПоказателя2 = "П000240001002_" + ИндексТекСтроки;
					
					Если ТЗДанныеДопСтрок = Неопределено или П000240001001 = "" Тогда 
						УстановитьЦветФонаЯчейки(ИмяПоказателя2, 0);			 
						Продолжить;
					КонецЕсли;	  
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ТабЗнач.П000900000001,
					|	ТабЗнач.П000900000002,
					|	ТабЗнач.П000900000003,
					|	ТабЗнач.П000900000004
					|ПОМЕСТИТЬ вт
					|ИЗ
					|	&ТабЗнач КАК ТабЗнач
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СУММА(вт.П000900000004) КАК П000900000004
					|ПОМЕСТИТЬ вт2
					|ИЗ
					|	вт КАК вт
					|ГДЕ
					|	вт.П000900000001 = &П000900000001
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	вт2.П000900000004 КАК НалБаза
					|ИЗ
					|	вт2 КАК вт2
					|ГДЕ
					|	(НЕ вт2.П000900000004 ЕСТЬ NULL )";
					
					
					Запрос.УстановитьПараметр("ТабЗнач", ТЗДанныеДопСтрок);
					Запрос.УстановитьПараметр("П000900000001", П000240001001);
					
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда 
						УстановитьЦветФонаЯчейки(ИмяПоказателя2, ?(ФлажокОтклАвтоРасчет, 0, 4));			 
					Иначе
						УстановитьЦветФонаЯчейки(ИмяПоказателя2, 0);			 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
	КонецЕсли;	
	
	
КонецПроцедуры	


Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
                                                     
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел12";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел13";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел13";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел24";
	СтрокаУровня1.Представление            = "Раздел 2.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел24";	
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел25";
	СтрокаУровня1.Представление            = "Раздел 2.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел25";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Приложение 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Приложение 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

   	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Приложение 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

    СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Приложение 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Приложение 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение6";
	СтрокаУровня1.Представление            = "Приложение 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение7";
	СтрокаУровня1.Представление            = "Приложение 7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	Если  ИмяТекущейСтраницыПанели = "Раздел2" или  ИмяТекущейСтраницыПанели = "Раздел24" Тогда 
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ИмяТекущейСтраницыПанели);
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2011Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	//Титульный
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы реорганизации(ликвидации)", КоллекцияСписковВыбора["КодыФормОрг"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодНаличияСвидетельства1", 1, , "Выбор кода наличия свидетельства", КоллекцияСписковВыбора["КодНаличияСвидетельства"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Раздел 1.1 -1.3
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110002020", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120002020", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130002020", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200001000", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараР2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200002000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя21"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001002", 1, , "Выбор признака применения ставки акциза на спирт", КоллекцияСписковВыбора["ПризнакПримененияСтавкиАкцизаНаСпирт"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220002001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220003001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220004001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220005001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220006001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220007001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220008001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220009001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя22"]);
	
	
	
	
	//Приложение 1
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900001000", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900002000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателяП1"]);
	
	//Раздел 24
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя24"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240001004", 5, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодВидаПериода"]);
	
	
	//Приложение 2
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателяП2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000002", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр2Гр3"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000004", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр2Гр4"]);
	
	//Приложение 3
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателяПр3Гр2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000002", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр3Гр2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000004", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр3Гр4"]);
	
	//Приложение 4
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000930000001", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр45Гр1"]);

	//Приложение 5
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000940000001", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр45Гр1"]);
	
	/////////////////////////////////////////////////////////////////////////////	
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200003003", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010031", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010032", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010033", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010034", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010035", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	//Раздел 3
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320011000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320012001", 5, , "Выбор кода вида ПИ", КоллекцияСписковВыбора["ВидыПИ"]);
	//Раздел 4
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400003003", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004002", 5, , "Выбор кода вида ПИ", КоллекцияСписковВыбора["ВидыПИ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004003", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснованияПоНулевойСтавке"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004004", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснованияПоОбщейСтавке"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВПолеВводаВПолеТабличногоДокумента(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ЭлементыФормы.Найти("ПолеТабличногоДокумента" + ИмяТекущейСтраницы) <> Неопределено Тогда
		Область = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницы].ТекущаяОбласть;
	Иначе
		Возврат;
	КонецЕсли;
		
	//завершение ОКАТО
	Если (Найти(Область.Имя, "П000110001003") > 0
	 ИЛИ Найти(Область.Имя, "П000120001003") > 0
	 ИЛИ Найти(Область.Имя, "П000130001003") > 0)
	И ЗначениеЗаполнено(Текст) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Текст));
		Для Инд = ДлинаЗначения+1 По 11 Цикл
			Текст = СокрЛП(Текст) + "0";
			Элемент.Значение=Текст;
		КонецЦикла;
	КонецЕсли;
	
	//Проверка шаблона ММ.ГГГГ
	Если (Найти(Область.Имя, "П000430001010") > 0
	ИЛИ Найти(Область.Имя, "П000430001060") > 0) И ЗначениеЗаполнено(Текст) Тогда
		Стр = Текст;
		Для Инд = 0 По 8 Цикл
			Стр = СтрЗаменить(Стр, Строка(Инд), "9");
		КонецЦикла;
		
		Если Стр <> "99.9999" Тогда
			Сообщить("Введенное значение показателя ""Месяц и год"" не соответствует шаблону XX.XXXX!", СтатусСообщения.Важное);
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Текст)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Текст)) <> ПараметрВводаПоля.Длина Тогда
		Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Элемент.Значение=Текст;
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина, ОбновитьСтавки = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодНо)
			+ "_" + Параметры.КодНо
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННЮЛ), СокрЛП(Параметры.ИННЮЛ) + СокрЛП(Параметры.КПП))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Сред(Раздел.Ключ, 24), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",			"1151084");
	Параметры.Вставить("ВерсФорм",		"5.01"); // 											   //
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",		Титульный.Период1 +Титульный.Период2);
	Параметры.Вставить("ОтчетГод",		Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("КодНо",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("НомКорр",		СокрЛП(НомерКорректировки));
	Параметры.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	Параметры.Вставить("ОКВЭД",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	Параметры.Вставить("НалСвид",		СокрЛП(Титульный.КодНаличияСвидетельства1));
	Параметры.Вставить("Тлф",		СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));

	
	Параметры.Вставить("НаимОрг",   СокрЛП(Титульный.НаимОрг));
	Параметры.Вставить("ИННЮЛ",   СокрЛП(Организация.ИНН));
	Параметры.Вставить("КПП",   СокрЛП(Титульный.КПП1));
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	Параметры.Вставить("ФормРеорг",   СокрЛП(Титульный.КодФормыОрг));
	Параметры.Вставить("ИННЮЛРеорг",   СокрЛП(Титульный.ИНН_Реорг));
	Параметры.Вставить("КППРеорг",   СокрЛП(Титульный.КПП_Реорг));
	
	ФИОИП = РазложитьФИО(Титульный.НаимОрг);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	Параметры.Вставить("ИННФЛ",	СокрЛП(Организация.ИНН));
	
	Параметры.Вставить("ПрПодп",  СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ФамилияПодп",		ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодп",			ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодп",	ФИОПодписанта.Отчество);

	Параметры.Вставить("НаимДок", Титульный.ДокУпПред);
	Параметры.Вставить("НаимОргПредст", Титульный.ОргУп);
	
	
	
	Параметры.Вставить("ИмяФайлаСхемы",				"NO_AKCIZ_1_506_00_05_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_AKCIZ");
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Акциз");
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
		
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("331");
	ВозможныеКодыПоМесту.Добавить("220");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|50|71|72|73|74|75|76|77|78|79|80|81|82";
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан налоговый период!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	ИначеЕсли Найти(ВозможныеКодыПериода, Параметры.Период) = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода налогового периода!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОтчетГод) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан отчетный год!", "Титульный", "ОтчетГод1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.КодНо) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код места нахождения (учета)!", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(Параметры.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НалСвид) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код наличия свидетельства у налогоплательщика!", "Титульный", "НалСвид");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЭтоПБОЮЛ тогда
		
		Если ПустаяСтрока(Параметры.ФамилияИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не заполнено или некорректно указано наименование налогоплательщика!", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;	
		
		Если ПустаяСтрока(Параметры.ИмяИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не заполнено или некорректно указано наименование налогоплательщика!", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;	
		
		Если ПустаяСтрока(Параметры.ИННФЛ) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен ИНН налогоплательщика!", "Титульный", "ИНН1");
			СтатусПроверки = Ложь;
		КонецЕсли;	
		
	Иначе //юр. лицо
		
		Если ПустаяСтрока(Параметры.НаимОрг) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано наименование организации-налогоплательщика!", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;	
		
		Если ПустаяСтрока(Параметры.ИННЮЛ) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан ИНН налогоплательщика!", "Титульный", "ИНН1");
			СтатусПроверки = Ложь;
		КонецЕсли;	
		
		Если ПустаяСтрока(Параметры.КПП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен КПП налогоплательщика!", "Титульный", "КПП1");
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Параметры.ПрПодп = "2" И ПустаяСтрока(Параметры.НаимДок) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверяем параметры реорганизации
	Если ЗначениеЗаполнено(Параметры.ИННЮЛРеорг) ИЛИ ЗначениеЗаполнено(Параметры.КППРеорг) ИЛИ ЗначениеЗаполнено(Параметры.ФормРеорг) Тогда
		
		Если ПустаяСтрока(Параметры.ФормРеорг) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации!", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Параметры.ФормРеорг) И Параметры.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(Параметры.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(Параметры.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// проверка раздела 1.1
	
  	ЗаполненХотяБыОдинЭкземплярРаздела1 = Ложь;
	Раздел1 = мДанныеОтчета.Раздел1;
	Для Каждого Стр Из Раздел1 Цикл
		
		НомерСтраницы = Раздел1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел1", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела1 = Истина;
		
		// проверяем шапку экземпляра раздела
		
		КодОКАТОРаздел1 = СокрЛП(ДанныеСтраницы["П000110001003"]);
		КодОКАТОРаздел1 = СтрДлина(КодОКАТОРаздел1);
		Если КодОКАТОРаздел1 <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.1 на странице " + НомерСтраницы + " не" + ?(КодОКАТОРаздел1  = 0, "", "верно") + " задан код ОКАТО!", "Раздел1", "П000110001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000110002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел1МнчКод = "П000110002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел1МнчКод = "П000110002030_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУменьшениюРаздел1МнчКод = "П000110002040_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел1МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел1МнчКод]);
			СуммаКУплатеРаздел1МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел1МнчКод]);
			СуммаКУменьшениюРаздел1МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУменьшениюРаздел1МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел1МнчКод)
				И  СуммаКУплатеРаздел1МнчКод = "0"
				И  СуммаКУменьшениюРаздел1МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 = Истина;
			
				
			//должна быть заполнена только одна из этих сумм
			Если   СуммаКУплатеРаздел1МнчКод <> "0"   И  СуммаКУменьшениюРаздел1МнчКод<> "0" Тогда 
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " должно быть указано только одно значение суммы акциза из двух!", "Раздел1", "П000110002030_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			
			
			КБКРаздел1МнчКод = СтрДлина(КБКРаздел1МнчКод);
			Если КБКРаздел1МнчКод <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КБКРаздел1МнчКод = 0, "", "верно") + " задан код КБК!", "Раздел1", "П000110002020_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
				НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.1 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Раздел1", "П000110002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	// проверка раздела 1.2
	
	ЗаполненХотяБыОдинЭкземплярРаздела12 = Ложь;
	Раздел12 = мДанныеОтчета.Раздел12;
	Для Каждого Стр Из Раздел12 Цикл
		
		НомерСтраницы = Раздел12.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел12", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела12 = Истина;
		
		
		// проверяем шапку экземпляра раздела
		
		
		КодОКАТОРаздел12 = СокрЛП(ДанныеСтраницы["П000120001003"]);
		КодОКАТОРаздел12 = СтрДлина(КодОКАТОРаздел12);
		Если КодОКАТОРаздел12 <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.2 на странице " + НомерСтраницы + " не" + ?(КодОКАТОРаздел12  = 0, "", "верно") + " задан код ОКАТО!", "Раздел12", "П000120001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000120002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел12МнчКод = "П000120002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел12МнчКод = "П000120002030_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУменьшениюРаздел12МнчКод = "П000120002040_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел12МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел12МнчКод]);
			СуммаКУплатеРаздел12МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел12МнчКод]);
			СуммаКУменьшениюРаздел12МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУменьшениюРаздел12МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел12МнчКод)
				И СуммаКУплатеРаздел12МнчКод = "0"
				И СуммаКУменьшениюРаздел12МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 = Истина;
			
			//должна быть заполнена только одна из этих сумм
			Если   СуммаКУплатеРаздел12МнчКод <> "0"   И  СуммаКУменьшениюРаздел12МнчКод <> "0" Тогда 
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " должно быть указано только одно значение суммы акциза из двух!", "Раздел12", "П000120002030_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБКРаздел12МнчКод = СтрДлина(КБКРаздел12МнчКод);
			Если КБКРаздел12МнчКод <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КБКРаздел12МнчКод = 0, "", "верно") + " задан код КБК!", "Раздел12", "П000120002020_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.2 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Раздел12", "П000120002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	// проверка раздела 1.3
	
	ЗаполненХотяБыОдинЭкземплярРаздела13 = Ложь;
	Раздел13 = мДанныеОтчета.Раздел13;
	Для Каждого Стр Из Раздел13 Цикл
		
		НомерСтраницы = Раздел13.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел13", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела13 = Истина;
		
		// проверяем шапку экземпляра раздела
		
		КодОКАТОРаздел13 = СокрЛП(ДанныеСтраницы["П000130001003"]);
		КодОКАТОРаздел13 = СтрДлина(КодОКАТОРаздел13);
		Если КодОКАТОРаздел13 <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.3 на странице " + НомерСтраницы + " не" + ?(КодОКАТОРаздел13  = 0, "", "верно") + " задан код ОКАТО!", "Раздел13", "П000130001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000130002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел13МнчКод = "П000130002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел13МнчКод = "П000130002030_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел13МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел13МнчКод]);
			СуммаКУплатеРаздел13МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел13МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел13МнчКод)
				И СуммаКУплатеРаздел13МнчКод = "0"  Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 = Истина;
			
				
			КБКРаздел13МнчКод = СтрДлина(КБКРаздел13МнчКод);
			Если КБКРаздел13МнчКод <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.3 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КБКРаздел13МнчКод = 0, "", "верно") + " задан код КБК!", "Раздел13", "П000130002020_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.3 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Раздел13", "П000130002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		//раздел 1 обязателен к заполнению
	КонецЦикла;
	Если НЕ ЗаполненХотяБыОдинЭкземплярРаздела1 И НЕ ЗаполненХотяБыОдинЭкземплярРаздела12 И Не ЗаполненХотяБыОдинЭкземплярРаздела13 Тогда 
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Раздел 1 обязателен к заполнению. Нужно заполнить хотя бы один из его подразделов!", "Раздел1", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	
	
	// проверка раздела 2.1 - 2.3
	
	ЗаполненХотяБыОдинЭкземплярРаздела2 = Ложь;
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого Стр Из Раздел2 Цикл
		
		НомерСтраницы = Раздел2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел2", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела2 = Истина;
		
		
		// проверяем шапку экземпляра раздела
		
		
		КодПТРаздел2 = СокрЛП(ДанныеСтраницы["П000200001000"]);
		КодПТРаздел2 = СтрДлина(КодПТРаздел2);
		Если КодПТРаздел2 <> 3 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " не" + ?(КодПТРаздел2  = 0, "", "верно") + " задан код вида подакцизного товара!", "Раздел2", "П000200001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОКЕИРаздел2 = СокрЛП(ДанныеСтраницы["П000200002000"]);
		КодОКЕИРаздел2 = СтрДлина(КодОКЕИРаздел2);
		Если КодОКЕИРаздел2 <> 3 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " не" + ?(КодОКЕИРаздел2  = 0, "", "верно") + " задан код единицы измерения по ОКЕИ!", "Раздел2", "П000200002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000210001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КПРаздел21МнчКод = "П000210001001_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаРаздел21МнчКод = "П000210001003_" + Формат(НомерСтроки, "ЧГ=");
			CумАкцизРаздел21МнчКод = "П000210001004_" + Формат(НомерСтроки, "ЧГ=");
			
			
			КПРаздел21МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел21МнчКод]);
			НалБазаРаздел21МнчКод = СокрЛП(ДанныеСтраницы[НалБазаРаздел21МнчКод]);
			СумАкцизРаздел21МнчКод = СокрЛП(ДанныеСтраницы[CумАкцизРаздел21МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел21МнчКод)
				И   НалБазаРаздел21МнчКод = "0" 
				И   СумАкцизРаздел21МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 = Истина;
				
			КПРаздел21МнчКод = СтрДлина(КПРаздел21МнчКод);
			Если КПРаздел21МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КПРаздел21МнчКод = 0, "", "верно") + " задан код показателя!", "Раздел2", "П000210001001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Раздел2", "П000210001001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Для сч = 1 по 9 Цикл 
			
			КПРаздел22МнчКод = "П00022000" + Формат(сч, "ЧГ=")+ "001";
			СумВычет22МнчКод = "П00022000" + Формат(сч, "ЧГ=")+ "002";
			
			
			КПРаздел22МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел22МнчКод]);
			СумВычет22МнчКод = СокрЛП(ДанныеСтраницы[СумВычет22МнчКод]);
			
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел22МнчКод)
				И СумВычет22МнчКод = "0"  Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			КПРаздел22МнчКод = СтрДлина(КПРаздел22МнчКод);
			Если КПРаздел22МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КПРаздел22МнчКод = 0, "", "верно") + " задан код показателя!", "Раздел2", "П00022000"+сч+"001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ЗаполненХотяБыОдинЭкземплярРаздела2 Тогда 	
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Обязательно должен быть заполнен хотя бы один экземпляр раздела 2!", "Раздел2", "П000200001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	
	// проверка раздела 2.4
	Раздел24 = мДанныеОтчета.Раздел24;
	Для Каждого Стр Из Раздел24 Цикл
		
		НомерСтраницы = Раздел24.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел24", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000240001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КПРаздел24МнчКод = "П000240001001_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаРаздел24МнчКод = "П000240001002_" + Формат(НомерСтроки, "ЧГ=");
			КодНалПериодаРаздел24МнчКод = "П000240001004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАкцизаРаздел24МнчКод = "П000240001003_" + Формат(НомерСтроки, "ЧГ=");
			ГодНПРаздел24МнчКод = "П000240001005_" + Формат(НомерСтроки, "ЧГ=");
			
			КПРаздел24МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел24МнчКод]);
			НалБазаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[НалБазаРаздел24МнчКод]);
			КодНалПериодаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[КодНалПериодаРаздел24МнчКод]);
			СуммаАкцизаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[СуммаАкцизаРаздел24МнчКод]);
			ГодНПРаздел24МнчКод = СокрЛП(ДанныеСтраницы[ГодНПРаздел24МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел24МнчКод)  И НЕ ЗначениеЗаполнено(КодНалПериодаРаздел24МнчКод)
				И НЕ ЗначениеЗаполнено(ГодНПРаздел24МнчКод)
				И НалБазаРаздел24МнчКод = "0" И СуммаАкцизаРаздел24МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			КПРаздел24МнчКод = СтрДлина(КПРаздел24МнчКод);
			Если КПРаздел24МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.4 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КПРаздел24МнчКод = 0, "", "верно") + " задан код показателя!", "Раздел2", "П000240001001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодНалПериодаРаздел24МнчКод = СтрДлина(КодНалПериодаРаздел24МнчКод);
			Если КодНалПериодаРаздел24МнчКод <> 2 И КодНалПериодаРаздел24МнчКод <> 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.4 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не верно  задан код налогового периода!", "Раздел2", "П000240001004_"+НомерСтроки , НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
	КонецЦикла;
	
	// проверка Приложения1
	
	Прил1 = мДанныеОтчета.Приложение1;
	Для Каждого Стр Из Прил1 Цикл
		
		НомерСтраницы = Прил1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение1", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		КодПТРазделПрил1 = СокрЛП(ДанныеСтраницы["П000900001000"]);
		КодПТРазделПрил1 = СтрДлина(КодПТРазделПрил1);
		Если КодПТРазделПрил1 <> 3 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №1 на странице " + НомерСтраницы + " не" + ?(КодПТРазделПрил1  = 0, "", "верно") + " задан код вида подакцизного товара!", "Приложение1", "П000900001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОКЕИПрил1 = СокрЛП(ДанныеСтраницы["П000900002000"]);
		КодОКЕИПрил1 = СтрДлина(КодОКЕИПрил1);
		Если КодОКЕИПрил1 <> 3 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №1 на странице " + НомерСтраницы + " не" + ?(КодОКЕИПрил1  = 0, "", "верно") + " задан код единицы измерения по ОКЕИ!", "Приложение1", "П000900002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000900000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил1МнчКод = "П000900000001_" + Формат(НомерСтроки, "ЧГ=");
			СодержСпиртаПрил1МнчКод = "П000900000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил1МнчКод = "П000900000003_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаПрил1МнчКод = "П000900000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил1МнчКод = СокрЛП(ДанныеСтраницы[КППрил1МнчКод]);
			СодержСпиртаПрил1МнчКод = СокрЛП(ДанныеСтраницы[СодержСпиртаПрил1МнчКод]);
			ОбъемПодакцТовараПрил1МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил1МнчКод]);
			НалБазаПрил1МнчКод = СокрЛП(ДанныеСтраницы[НалБазаПрил1МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил1МнчКод)
				И  СодержСпиртаПрил1МнчКод = "0" 
				И  ОбъемПодакцТовараПрил1МнчКод = "0"
				И НалБазаПрил1МнчКод = "0" 	Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 = Истина;
			
			
			КППрил1МнчКод = СтрДлина(КППрил1МнчКод);
			Если КППрил1МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 1 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КППрил1МнчКод = 0, "", "верно") + " задан код показателя!", "Приложение1", "П000900000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 1 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение1", "П000900000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	
	// проверка Приложения2
	
	Прил2 = мДанныеОтчета.Приложение2;
	Для Каждого Стр Из Прил2 Цикл
		
		НомерСтраницы = Прил2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение2", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		ИННПродавцаПрил2 = СокрЛП(ДанныеСтраницы["П000910001000"]);
		ИННПродавцаПрил2 = СтрДлина(ИННПродавцаПрил2);
		Если ИННПродавцаПрил2 <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №2 на странице " + НомерСтраницы + " не" + ?(ИННПродавцаПрил2  = 0, "", "верно") + " задан ИНН продавца!", "Приложение2", "П000910001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППродавцаПрил2 = СокрЛП(ДанныеСтраницы["П000910002000"]);
		КПППродавцаПрил2 = СтрДлина(КПППродавцаПрил2);
		Если КПППродавцаПрил2 <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №2 на странице " + НомерСтраницы + " не" + ?(КПППродавцаПрил2  = 0, "", "верно") + " задан КПП продавца!", "Приложение2", "П000910002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000910000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил2МнчКод = "П000910000001_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаСпиртаПрил2МнчКод = "П000910000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил2МнчКод = "П000910000003_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаТовараПрил2МнчКод = "П000910000004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАвПлатежаПрил2МнчКод = "П000910000005_" + Формат(НомерСтроки, "ЧГ=");
			
			
			КППрил2МнчКод = СокрЛП(ДанныеСтраницы[КППрил2МнчКод]);
			КодВидаСпиртаПрил2МнчКод = СокрЛП(ДанныеСтраницы[КодВидаСпиртаПрил2МнчКод]);
			ОбъемПодакцТовараПрил2МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил2МнчКод]);
			КодВидаТовараПрил2МнчКод = СокрЛП(ДанныеСтраницы[КодВидаТовараПрил2МнчКод]);
			СуммаАвПлатежаПрил2МнчКод = СокрЛП(ДанныеСтраницы[СуммаАвПлатежаПрил2МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил2МнчКод)
				И НЕ ЗначениеЗаполнено(КодВидаСпиртаПрил2МнчКод) 
				И ОбъемПодакцТовараПрил2МнчКод = "0"
				И НЕ ЗначениеЗаполнено(КодВидаТовараПрил2МнчКод)
				И СуммаАвПлатежаПрил2МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 = Истина;
			
			КППрил2МнчКод = СтрДлина(КППрил2МнчКод);
			Если КППрил2МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КППрил2МнчКод = 0, "", "верно") + " задан код показателя!", "Приложение2", "П000910000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСпиртаПрил2МнчКод = СтрДлина(КодВидаСпиртаПрил2МнчКод);
			Если КодВидаСпиртаПрил2МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КодВидаСпиртаПрил2МнчКод = 0, "", "верно") + " задан код вида приобретаемого спирта!", "Приложение2", "П000910000002_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаТовараПрил2МнчКод = СтрДлина(КодВидаТовараПрил2МнчКод);
			Если КодВидаТовараПрил2МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 2 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КодВидаТовараПрил2МнчКод = 0, "", "верно") + " задан код вида подакцизного товара!", "Приложение2", "П000910000004_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 2 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение2", "П000910000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	
	
	// проверка Приложения3
	
	Прил3 = мДанныеОтчета.Приложение3;
	Для Каждого Стр Из Прил3 Цикл
		
		НомерСтраницы = Прил3.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение3", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		ИННПокупателяПрил3 = СокрЛП(ДанныеСтраницы["П000920001000"]);
		ИННПокупателяПрил3 = СтрДлина(ИННПокупателяПрил3);
		Если ИННПокупателяПрил3 <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №3 на странице " + НомерСтраницы + " не" + ?(ИННПокупателяПрил3  = 0, "", "верно") + " задан ИНН покупателя!", "Приложение3", "П000920001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППокупателяПрил3 = СокрЛП(ДанныеСтраницы["П000920002000"]);
		КПППокупателяПрил3 = СтрДлина(КПППокупателяПрил3);
		Если КПППокупателяПрил3 <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении №3 на странице " + НомерСтраницы + " не" + ?(КПППокупателяПрил3  = 0, "", "верно") + " задан КПП покупателя!", "Приложение3", "П000920002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000920000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил3МнчКод = "П000920000001_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаСпиртаПрил3МнчКод = "П000920000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил3МнчКод = "П000920000003_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаТовараПрил3МнчКод = "П000920000004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАвПлатежаПрил3МнчКод = "П000920000005_" + Формат(НомерСтроки, "ЧГ=");
			
			
			КППрил3МнчКод = СокрЛП(ДанныеСтраницы[КППрил3МнчКод]);
			КодВидаСпиртаПрил3МнчКод = СокрЛП(ДанныеСтраницы[КодВидаСпиртаПрил3МнчКод]);
			ОбъемПодакцТовараПрил3МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил3МнчКод]);
			КодВидаТовараПрил3МнчКод = СокрЛП(ДанныеСтраницы[КодВидаТовараПрил3МнчКод]);
			СуммаАвПлатежаПрил3МнчКод = СокрЛП(ДанныеСтраницы[СуммаАвПлатежаПрил3МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил3МнчКод)
				И НЕ ЗначениеЗаполнено(КодВидаСпиртаПрил3МнчКод) 
				И ОбъемПодакцТовараПрил3МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(КодВидаТовараПрил3МнчКод)
				И СуммаАвПлатежаПрил3МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 = Истина;
			
			
			КППрил3МнчКод = СтрДлина(КППрил3МнчКод);
			Если КППрил3МнчКод <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 3 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КППрил3МнчКод = 0, "", "верно") + " задан код показателя!", "Приложение3", "П000920000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСпиртаПрил3МнчКод = СтрДлина(КодВидаСпиртаПрил3МнчКод);
			Если КодВидаСпиртаПрил3МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 3 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КодВидаСпиртаПрил3МнчКод = 0, "", "верно") + " задан код вида приобретаемого спирта!", "Приложение3", "П000920000002_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаТовараПрил3МнчКод = СтрДлина(КодВидаТовараПрил3МнчКод);
			Если КодВидаТовараПрил3МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 3 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КодВидаТовараПрил3МнчКод = 0, "", "верно") + " задан код вида подакцизного товара!", "Приложение3", "П000920000004_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
					НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 3 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение3", "П000920000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	
	
	// проверка Приложения4
	
	Прил4 = мДанныеОтчета.Приложение4;
	Для Каждого Стр Из Прил4 Цикл
		
		НомерСтраницы = Прил4.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение4", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		НаимОргПрил4 = СокрЛП(ДанныеСтраницы["П000930001000"]);
		Если ПустаяСтрока(НаимОргПрил4) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + "  не заполнено наименование организации-поставщика!", "Приложение4", "П000930001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИННПоставщикаПрил4 = СокрЛП(ДанныеСтраницы["П000930002000"]);
		ИННПоставщикаПрил4 = СтрДлина(ИННПоставщикаПрил4);
		Если ИННПоставщикаПрил4 <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " не" + ?(ИННПоставщикаПрил4 = 0, "", "верно") + " задан ИНН поставщика!", "Приложение4", "П000930002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППоставщикаПрил4 = СокрЛП(ДанныеСтраницы["П000930003000"]);
		КПППоставщикаПрил4 = СтрДлина(КПППоставщикаПрил4);
		Если КПППоставщикаПрил4 <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " не" + ?(КПППоставщикаПрил4  = 0, "", "верно") + " задан КПП поставщика!", "Приложение4", "П000930003000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		СерияСвидПрил4 = СокрЛП(ДанныеСтраницы["П000930004000_1"]);
		СерияСвидПрил4 = СтрДлина(СерияСвидПрил4);
		Если СерияСвидПрил4 <> 2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " не" + ?(СерияСвидПрил4  = 0, "", "верно") + " указана серия свидетельства!", "Приложение4", "П000930004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил4 = СокрЛП(ДанныеСтраницы["П000930004000_2"]);
		НомСвидПрил4 = СтрДлина(НомСвидПрил4);
		Если ПустаяСтрока(НомСвидПрил4) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " не указан номер свидетельства!", "Приложение4", "П000930004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
			// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000930000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил4МнчКод = "П000930000001_" + Формат(НомерСтроки, "ЧГ=");
			ДатаСФПрил4МнчКод = "П000930000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил4МнчКод = "П000930000003_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил4МнчКод = "П000930000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил4МнчКод = СокрЛП(ДанныеСтраницы[КППрил4МнчКод]);
			ДатаСФПрил4МнчКод = ?(ДанныеСтраницы[ДатаСФПрил4МнчКод] = Дата(1,1,1), "", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил4МнчКод]),10));
			ОбъемПодакцТовараПрил4МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил4МнчКод]);
			НомСФПрил4МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил4МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил4МнчКод)
				И НЕ ЗначениеЗаполнено(ДатаСФПрил4МнчКод) 
				И ОбъемПодакцТовараПрил4МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил4МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 = Истина;
			
			КППрил4МнчКод = СтрДлина(КППрил4МнчКод);
			Если КППрил4МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КППрил4МнчКод = 0, "", "верно") + " задан код показателя!", "Приложение4", "П000930000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДатаСФПрил4МнчКод = СтрДлина(ДатаСФПрил4МнчКод);
			Если ДатаСФПрил4МнчКод <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(ДатаСФПрил4МнчКод = 0, "", "верно") + " указана дата счет-фактуры!", "Приложение4", "П000930000002_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			
			Если ПустаяСтрока(НомСФПрил4МнчКод) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не указан номер счет-фактуры!", "Приложение4", "П000930000004_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;

			
				НомерСтроки = НомерСтроки + 1;
		
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 4 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение4", "П000930000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	
	КонецЦикла;	
	
	
	
	// проверка Приложения5
	
	Прил5 = мДанныеОтчета.Приложение5;
	Для Каждого Стр Из Прил5 Цикл
		
		НомерСтраницы = Прил5.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение5", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		НаимОргПрил5 = СокрЛП(ДанныеСтраницы["П000940001000"]);
		Если ПустаяСтрока(НаимОргПрил5) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + "  не заполнено наименование организации-покупателя!", "Приложение5", "П000940001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИННПокупателяПрил5 = СокрЛП(ДанныеСтраницы["П000940002000"]);
		ИННПокупателяПрил5 = СтрДлина(ИННПокупателяПрил5);
		Если ИННПокупателяПрил5 <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " не" + ?(ИННПокупателяПрил5 = 0, "", "верно") + " задан ИНН покупателя!", "Приложение5", "П000940002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППокупателяПрил5 = СокрЛП(ДанныеСтраницы["П000940003000"]);
		КПППокупателяПрил5 = СтрДлина(КПППокупателяПрил5);
		Если КПППокупателяПрил5 <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " не" + ?(КПППокупателяПрил5  = 0, "", "верно") + " задан КПП покупателя!", "Приложение5", "П000940003000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		СерияСвидПрил5 = СокрЛП(ДанныеСтраницы["П000940004000_1"]);
		СерияСвидПрил5 = СтрДлина(СерияСвидПрил5);
		Если СерияСвидПрил5 <> 2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " не" + ?(СерияСвидПрил5  = 0, "", "верно") + " указана серия свидетельства!", "Приложение5", "П000940004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил5 = СокрЛП(ДанныеСтраницы["П000940004000_2"]);
		НомСвидПрил5 = СтрДлина(НомСвидПрил5);
		Если ПустаяСтрока(НомСвидПрил5) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " не указан номер свидетельства!", "Приложение5", "П000940004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000940000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил5МнчКод = "П000940000001_" + Формат(НомерСтроки, "ЧГ=");
			ДатаСФПрил5МнчКод = "П000940000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил5МнчКод = "П000940000003_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил5МнчКод = "П000940000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил5МнчКод = СокрЛП(ДанныеСтраницы[КППрил5МнчКод]);
			ДатаСФПрил5МнчКод = ?(ДанныеСтраницы[ДатаСФПрил5МнчКод] = Дата(1,1,1), "", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил5МнчКод]),10));
			ОбъемПодакцТовараПрил5МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил5МнчКод]);
			НомСФПрил5МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил5МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил5МнчКод)
				И НЕ ЗначениеЗаполнено(ДатаСФПрил5МнчКод) 
				И ОбъемПодакцТовараПрил5МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил5МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 = Истина;
			
			КППрил5МнчКод = СтрДлина(КППрил5МнчКод);
			Если КППрил5МнчКод <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(КППрил5МнчКод = 0, "", "верно") + " задан код показателя!", "Приложение5", "П000940000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДатаСФПрил5МнчКод = СтрДлина(ДатаСФПрил5МнчКод);
			Если ДатаСФПрил5МнчКод <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(ДатаСФПрил5МнчКод = 0, "", "верно") + " указана дата счет-фактуры!", "Приложение5", "П000940000002_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			
			Если ПустаяСтрока(НомСФПрил5МнчКод)  Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не указан номер счет-фактуры!", "Приложение5", "П000940000004_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;

			
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 5 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение5", "П000940000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	
	// проверка Приложения6
	
	Прил6 = мДанныеОтчета.Приложение6;
	Для Каждого Стр Из Прил6 Цикл
		
		НомерСтраницы = Прил6.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение6", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		
		ИННПоставщикаПрил6 = СокрЛП(ДанныеСтраницы["П000950002000"]);
		ИННПоставщикаПрил6 = СтрДлина(ИННПоставщикаПрил6);
		Если ИННПоставщикаПрил6 <> 10 И ИННПоставщикаПрил6 <> 12 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " не" + ?(ИННПоставщикаПрил6 = 0, "", "верно") + " задан ИНН поставщика!", "Приложение6", "П000950002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если  ИННПоставщикаПрил6 = 10  Тогда //юрлицо
			КПППоставщикаПрил6 = СокрЛП(ДанныеСтраницы["П000950003000"]);
			КПППоставщикаПрил6 = СтрДлина(КПППоставщикаПрил6);
			Если КПППоставщикаПрил6 <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " не" + ?(КПППоставщикаПрил6  = 0, "", "верно") + " задан КПП поставщика!", "Приложение6", "П000950003000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		
		НаимОргПрил6 = СокрЛП(ДанныеСтраницы["П000950001000"]);
		Если ПустаяСтрока(НаимОргПрил6) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + "  не заполнено наименование организации-поставщика!", "Приложение6", "П000950001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		СерияСвидПрил6 = СокрЛП(ДанныеСтраницы["П000950004000_1"]);
		СерияСвидПрил6 = СтрДлина(СерияСвидПрил6);
		Если СерияСвидПрил6 <> 2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " не" + ?(СерияСвидПрил6  = 0, "", "верно") + " указана серия свидетельства!", "Приложение6", "П000950004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил6 = СокрЛП(ДанныеСтраницы["П000950004000_2"]);
		НомСвидПрил6 = СтрДлина(НомСвидПрил6);
		Если ПустаяСтрока(НомСвидПрил6) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " не указан номер свидетельства!", "Приложение6", "П000950004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
	
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000950000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ДатаСФПрил6МнчКод = "П000950000001_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил6МнчКод = "П000950000002_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил6МнчКод = "П000950000003_" + Формат(НомерСтроки, "ЧГ=");
			
			ДатаСФПрил6МнчКод = ?(ДанныеСтраницы[ДатаСФПрил6МнчКод] = Дата(1,1,1), "", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил6МнчКод]),10));
			ОбъемПодакцТовараПрил6МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил6МнчКод]);
			НомСФПрил6МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил6МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(ДатаСФПрил6МнчКод) 
				И ОбъемПодакцТовараПрил6МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил6МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 = Истина;
			
			ДатаСФПрил6МнчКод = СтрДлина(ДатаСФПрил6МнчКод);
			Если ДатаСФПрил6МнчКод <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(ДатаСФПрил6МнчКод = 0, "", "верно") + " указана дата счет-фактуры!", "Приложение6", "П000950000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил6МнчКод)  Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не указан номер счет-фактуры!", "Приложение6", "П000950000003_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 6 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение6", "П000950000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	
	// проверка Приложения7
	
	Прил7 = мДанныеОтчета.Приложение7;
	Для Каждого Стр Из Прил7 Цикл
		
		НомерСтраницы = Прил7.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение7", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		
		ИННПокупателяПрил7 = СокрЛП(ДанныеСтраницы["П000960002000"]);
		ИННПокупателяПрил7 = СтрДлина(ИННПокупателяПрил7);
		Если ИННПокупателяПрил7 <> 10 И ИННПокупателяПрил7 <> 12 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(ИННПокупателяПрил7 = 0, "", "верно") + " задан ИНН покупателя!", "Приложение7", "П000960002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если  ИННПокупателяПрил7 = 10  Тогда //юрлицо
			КПППокупателяПрил7 = СокрЛП(ДанныеСтраницы["П000960003000"]);
			КПППокупателяПрил7 = СтрДлина(КПППокупателяПрил7);
			Если КПППокупателяПрил7 <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(КПППокупателяПрил7  = 0, "", "верно") + " задан КПП покупателя!", "Приложение7", "П000960003000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		
		НаимОргПрил7 = СокрЛП(ДанныеСтраницы["П000960001000"]);
		Если ПустаяСтрока(НаимОргПрил7) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + "  не заполнено наименование организации-покупателя!", "Приложение7", "П000960001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		СерияСвидПрил7 = СокрЛП(ДанныеСтраницы["П000960004000_1"]);
		СерияСвидПрил7 = СтрДлина(СерияСвидПрил7);
		Если СерияСвидПрил7 <> 2 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(СерияСвидПрил7  = 0, "", "верно") + " указана серия свидетельства!", "Приложение7", "П000960004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил7 = СокрЛП(ДанныеСтраницы["П000960004000_2"]);
		НомСвидПрил7 = СтрДлина(НомСвидПрил7);
		Если ПустаяСтрока(НомСвидПрил7) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " не указан номер свидетельства!", "Приложение7", "П000960004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000960000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ДатаСФПрил7МнчКод = "П000960000001_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил7МнчКод = "П000960000002_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил7МнчКод = "П000960000003_" + Формат(НомерСтроки, "ЧГ=");
			
			ДатаСФПрил7МнчКод = ?(ДанныеСтраницы[ДатаСФПрил7МнчКод] = Дата(1,1,1), "", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил7МнчКод]),10));
			ОбъемПодакцТовараПрил7МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил7МнчКод]);
			НомСФПрил7МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил7МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(ДатаСФПрил7МнчКод) 
				И ОбъемПодакцТовараПрил7МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил7МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 = Истина;
			
			ДатаСФПрил7МнчКод = СтрДлина(ДатаСФПрил7МнчКод);
			Если ДатаСФПрил7МнчКод <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не" + ?(ДатаСФПрил7МнчКод = 0, "", "верно") + " указана дата счет-фактуры!", "Приложение7", "П000960000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил7МнчКод) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " в строке " + НомерСтроки + " не указан номер счет-фактуры!", "Приложение7", "П000960000003_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В Приложении № 7 на странице " + НомерСтраницы + " не заполнена ни одна строка табличной части!", "Приложение7", "П000960000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// заполнение раздела 1
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	//подраздел 1.1
	СумПУНеПБ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУнеПБ");
	
	ДанныеРаздела1 = мДанныеОтчета.Раздел1;
	Для Каждого Стр Из ДанныеРаздела1 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумПУНеПБ = СкопироватьУзел(СумНалПУ, СумПУНеПБ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумПУНеПБ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумПУНеПБ , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000110002020_" + НомерСтроки) Цикл
				

				 Если ДанныеСтраницы["П000110002020_" + НомерСтроки] = "" Тогда 
					 НомерСтроки = НомерСтроки + 1;
					 Продолжить;
				 КонецЕсли;


				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал1 = СкопироватьУзел(ЭкзСумПУНеПБ, СумПуНал);
				
					 
				 // заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал1.Строки Цикл
						
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
		//подраздел 1.2
	СумПУ_ПБ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУ_ПБ");
	
	ДанныеРаздела12 = мДанныеОтчета.Раздел12;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел12", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумПУ_ПБ = СкопироватьУзел(СумНалПУ, СумПУ_ПБ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумПУ_ПБ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумПУ_ПБ , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000120002020_" + НомерСтроки) Цикл
				
				Если ДанныеСтраницы["П000120002020_" + НомерСтроки] = "" Тогда 
					 НомерСтроки = НомерСтроки + 1;
					 Продолжить;
				 КонецЕсли;



				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал2 = СкопироватьУзел(ЭкзСумПУ_ПБ, СумПуНал);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал2.Строки Цикл
					
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	
		//подраздел 1.3
	СумАвИстНП = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумАвИстНП");
	
	ДанныеРаздела13 = мДанныеОтчета.Раздел13;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел13", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумАвИстНП = СкопироватьУзел(СумНалПУ, СумАвИстНП);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумАвИстНП.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумАвИстНП , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130002020_" + НомерСтроки) Цикл
				
				Если ДанныеСтраницы["П000130002020_" + НомерСтроки] = "" Тогда 
					 НомерСтроки = НомерСтроки + 1;
					 Продолжить;
				 КонецЕсли;
				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал3 = СкопироватьУзел(ЭкзСумАвИстНП, СумПуНал);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал3.Строки Цикл
					
				
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// заполнение раздела 2
	
	РасчАкциз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкциз");
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	ДанныеРаздела24 = мДанныеОтчета.Раздел24;
	ДанныеРаздела25 = мДанныеОтчета.Раздел25;
	Для Каждого СтрДанныеРаздела2 Из ДанныеРаздела2 Цикл
		
		ИндексСтраницы = ДанныеРаздела2.Индекс(СтрДанныеРаздела2);
		
		ДанныеСтраницы2 = СтрДанныеРаздела2.Данные;
		ДанныеСтраницы24 = ДанныеРаздела24.Получить(ИндексСтраницы).Данные;
		ДанныеСтраницы25 = ДанныеРаздела25.Получить(ИндексСтраницы).Данные;
		
		// создаем копированием узел, соответствующий экземпляру раздела
		ЭкзРасчАкциз = СкопироватьУзел(УзелРодитель, РасчАкциз);
		
		// заполняем немножественные показатели узла 
		Для Каждого Эл Из ЭкзРасчАкциз.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы2[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ОперПТ = ПолучитьПодчиненныйЭлемент( ЭкзРасчАкциз, "ОперПТ");
		ОперПТПок = ПолучитьПодчиненныйЭлемент( ОперПТ, "ОперПТПок");
		
		НомерСтроки = 1;
		Пока ДанныеСтраницы2.Свойство("П000210001001_" + НомерСтроки) Цикл
			
			// копируем узел, соответствующий строке
			ЭкзОперПтПок = СкопироватьУзел(ОперПТ, ОперПТПок);
			
			// заполняем скопированный узел
			Для Каждого Эл Из ЭкзОперПтПок.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы2[Эл.Ключ + "_" + НомерСтроки]);
				Иначе
					Для Каждого Эл2 Из Эл.Строки Цикл
						ВывестиПоказательВXML(Эл2, ДанныеСтраницы2[Эл2.Ключ + "_" + НомерСтроки]);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.2)
		СумВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "СумВыч");
		СумВычПок = ПолучитьПодчиненныйЭлемент(СумВыч, "СумВычПок");
		
		Для Сч = 1 по 9 Цикл 
			
			Если ДанныеСтраницы2["П00022000"+сч+"001"] = "" Тогда 
				Продолжить;
			КонецЕсли;	
			ЭкзСумВычПок = СкопироватьУзел(СумВыч, СумВычПок);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСумВычПок , "СумВыч", ДанныеСтраницы2["П00022000"+сч+"002"]);
			ЗадатьЗначениеЭлемента(ЭкзСумВычПок , "КодПок", ДанныеСтраницы2["П00022000"+сч+"001"]);
				
			КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.3)
		СумПУ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "СумПУ");
		СумПУПок = ПолучитьПодчиненныйЭлемент(СумПУ, "СумПУПок");
		
		Если (СокрЛП(ДанныеСтраницы2["П000230001000"]) = "0" И  СокрЛП(ДанныеСтраницы2["П000230002000"]) <> "0")
			или (СокрЛП(ДанныеСтраницы2["П000230002000"]) = "0" И  СокрЛП(ДанныеСтраницы2["П000230001000"]) <> "0") тогда // то есть заполнен только один показатель
			ЗаполненОдинПоказатель = Истина;
		Иначе ЗаполненОдинПоказатель = Ложь;
		КонецЕсли;
		
		
		Для сч = 1 по 2 Цикл 
			
			Если ЗаполненОдинПоказатель И СокрЛП(ДанныеСтраницы2["П00023000"+сч+"000"]) = "0" тогда //не берем строку с нулевым значением
				 Продолжить;
			 КонецЕсли;
			 
				 
			 ЭкзСумПУПок = СкопироватьУзел(СумПУ, СумПУПок);
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСумПУПок , "СумАкциз", ДанныеСтраницы2["П00023000"+сч+"000"]);
			ЗадатьЗначениеЭлемента(ЭкзСумПУПок , "КодПок", ДанныеСтраницы2["П00023000"+сч+"001"]);
				
		КонецЦикла;
		
		// заполняем РасчНалВыч (раздел 2.4)
		РеалПТИн = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "РеалПТИн");
		РеалПТИнПок = ПолучитьПодчиненныйЭлемент(РеалПТИн, "РеалПТИнПок");
		
		НомерСтроки = 1;
		Пока ДанныеСтраницы24.Свойство("П000240001001_" + НомерСтроки) Цикл
			
			ЭкзРеалПТИнПок = СкопироватьУзел(РеалПТИн, РеалПТИнПок);
			Для Каждого Стр Из ЭкзРеалПТИнПок.Строки Цикл
				ВывестиПоказательВXML(Стр, ДанныеСтраницы24[Стр.Ключ + "_" + НомерСтроки]);
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.5)
		АвансИсчисл = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "АвансИсчисл");
		
		
		// заполняем немножественные показатели узла 
		Для Каждого Эл Из АвансИсчисл.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы25[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		
	АвансИсчислПок = ПолучитьПодчиненныйЭлемент(АвансИсчисл, "АвансПок");
		
		  счПокПустой  = 0;
		Для сч = 1 по 7 Цикл
			
			Если    СокрЛП(ДанныеСтраницы25["П00025000"+сч+"002"]) = "0"  тогда
				счПокПустой = счПокПустой + 1;
				Продолжить;
			КонецЕсли;	
			ЭкзАвансИсчислПок = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок , "СумАвПлат", ДанныеСтраницы25["П00025000"+сч+"002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок , "КодПок", ДанныеСтраницы25["П00025000"+сч+"001"]);
			
		КонецЦикла;	
	Если счПокПустой = 7 Тогда // не заполнен ни один показатель	
	// нужно добавить две пустые строки
	
	        //6005
			
				ЭкзАвансИсчислПок6005 = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6005 , "СумАвПлат", ДанныеСтраницы25["П000250005002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6005 , "КодПок", ДанныеСтраницы25["П000250005001"]);
			
				ЭкзАвансИсчислПок6007 = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6007 , "СумАвПлат", ДанныеСтраницы25["П000250007002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6007 , "КодПок", ДанныеСтраницы25["П000250007001"]);
    КонецЕсли;
		
	КонецЦикла;
	
	
	 //Приложение 1
	РасчНалБазПТ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНалБазПТ");
	
	ДанныеПрил1 = мДанныеОтчета.Приложение1;
	Для Каждого Стр Из ДанныеПрил1 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение1", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзРасчНалБазПТ = СкопироватьУзел(УзелРодитель, РасчНалБазПТ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзРасчНалБазПТ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			НалБазаПок = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалБазПТ , "НалБазаПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000900000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзНалБазаПок = СкопироватьУзел(ЭкзРасчНалБазПТ, НалБазаПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзНалБазаПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	//Приложение 2
	АвансСпирт = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АвансСпирт");
	
	ДанныеПрил2 = мДанныеОтчета.Приложение2;
	Для Каждого Стр Из ДанныеПрил2 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение2", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзАвансСпирт = СкопироватьУзел(УзелРодитель, АвансСпирт);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзАвансСпирт.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			АвансПриобрПок = ПолучитьПодчиненныйЭлемент(ЭкзАвансСпирт, "АвансПриобрПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000910000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзАвансПриобрПок = СкопироватьУзел(ЭкзАвансСпирт, АвансПриобрПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзАвансПриобрПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	//Приложение 3
	ОбъемСпиртРеал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОбъемСпиртРеал");
	
	ДанныеПрил3 = мДанныеОтчета.Приложение3;
	Для Каждого Стр Из ДанныеПрил3 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение3", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзОбъемСпиртРеал = СкопироватьУзел(УзелРодитель, ОбъемСпиртРеал);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзОбъемСпиртРеал.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			АвансРеалПок = ПолучитьПодчиненныйЭлемент(ЭкзОбъемСпиртРеал, "АвансРеалПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000920000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзАвансРеалПок = СкопироватьУзел(ЭкзОбъемСпиртРеал, АвансРеалПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзАвансРеалПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 4
	СпиртПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпиртПолучСвид");
	
	ДанныеПрил4 = мДанныеОтчета.Приложение4;
	Для Каждого Стр Из ДанныеПрил4 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение4", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСпиртПолучСвид = СкопироватьУзел(УзелРодитель, СпиртПолучСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСпиртПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//немножественные однотипные показатели
			СвСпиртПолПер =  ПолучитьПодчиненныйЭлемент(ЭкзСпиртПолучСвид, "СвСпиртПолПер");
			СпиртНП_ПТ = ПолучитьПодчиненныйЭлемент(СвСпиртПолПер, "СпиртНП_ПТ");
			
			
			Для сч = 5 по 6 Цикл
				
			Если  СокрЛП(ДанныеСтраницы["П00093000"+сч+"003"]) = "0" тогда //не берем строку с нулевым значением
				 Продолжить;
			 КонецЕсли;
				
			ЭкзСпиртНП_ПТ = СкопироватьУзел(СвСпиртПолПер , СпиртНП_ПТ);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "СпиртНП", ДанныеСтраницы["П00093000"+сч+"003"]);
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "КодПТ", ДанныеСтраницы["П00093000"+сч+"001"]);
			
	
				
			КонецЦикла;
		
		
			// заполняем табличную часть
			СвОбСпиртСФ = ПолучитьПодчиненныйЭлемент(ЭкзСпиртПолучСвид, "СвОбСпиртСФ");
			ОбСпиртСФПТ = ПолучитьПодчиненныйЭлемент(СвОбСпиртСФ, "ОбСпиртСФПТ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000930000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбСпиртСФПТ = СкопироватьУзел(СвОбСпиртСФ, ОбСпиртСФПТ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбСпиртСФПТ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	//Приложение 5
	СпиртПостСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпиртПостСвид");
	
	ДанныеПрил5 = мДанныеОтчета.Приложение5;
	Для Каждого Стр Из ДанныеПрил5 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение5", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСпиртПостСвид = СкопироватьУзел(УзелРодитель, СпиртПостСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСпиртПостСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//немножественные однотипные показатели
			СвСпиртПостПер =  ПолучитьПодчиненныйЭлемент(ЭкзСпиртПостСвид, "СвСпиртПостПер");
			СпиртНП_ПТ = ПолучитьПодчиненныйЭлемент(СвСпиртПостПер, "СпиртНП_ПТ");
			
			Для сч = 5 по 6 Цикл
				
				Если  СокрЛП(ДанныеСтраницы["П00094000"+сч+"003"]) = "0" тогда //не берем строку с нулевым значением
				 Продолжить;
			 КонецЕсли;
		
			ЭкзСпиртНП_ПТ = СкопироватьУзел(СвСпиртПостПер , СпиртНП_ПТ);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "СпиртНП", ДанныеСтраницы["П00094000"+сч+"003"]);
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "КодПТ", ДанныеСтраницы["П00094000"+сч+"001"]);
			
	
				
			КонецЦикла;

			
			// заполняем табличную часть
			СвОбСпиртСФ = ПолучитьПодчиненныйЭлемент(ЭкзСпиртПостСвид, "СвОбСпиртСФ");
			ОбСпиртСФПТ = ПолучитьПодчиненныйЭлемент(СвОбСпиртСФ, "ОбСпиртСФПТ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000940000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбСпиртСФПТ = СкопироватьУзел(СвОбСпиртСФ, ОбСпиртСФПТ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбСпиртСФПТ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	

	//Приложение 6
	БензПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензПолучСвид");
	
	ДанныеПрил6 = мДанныеОтчета.Приложение6;
	Для Каждого Стр Из ДанныеПрил6 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение6", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзБензПолучСвид = СкопироватьУзел(УзелРодитель, БензПолучСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзБензПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			
			//данные об организации в зависит от ЮР/ФЛ
			
			Если СтрДлина(СокрЛП(ДанныеСтраницы["П000950002000"])) = 12 Тогда //ФЛ
				СведИППост =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СведИППост");
			Для Каждого Эл Из СведИППост.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
				ФИОИП = РазложитьФИО(ДанныеСтраницы["П000950001000"]);
 				УзелФИО =  ПолучитьПодчиненныйЭлемент(СведИППост, "ФИО");
				
				ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия", ФИОИП.Фамилия);
				ЗадатьЗначениеЭлемента(УзелФИО, "Имя", ФИОИП.Имя);
				ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИОИП.Отчество);
			
			Иначе //ЮЛ
				СведОргПост =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СведОргПост");
			Для Каждого Эл Из СведОргПост.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			КонецЕсли;	
			
			//еще один нижестоящий узел
			СвБензНатур =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СвБензНатур");
			Для Каждого Эл Из СвБензНатур.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			
			// заполняем табличную часть
			СвОбБензСФ = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СвОбБензСФ");
			ОбБензСФ = ПолучитьПодчиненныйЭлемент(СвОбБензСФ, "ОбБензСФ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000950000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбБензСФ = СкопироватьУзел(СвОбБензСФ, ОбБензСФ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбБензСФ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	//Приложение 7
	БензПостСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензПостСвид");
	
	ДанныеПрил7 = мДанныеОтчета.Приложение7;
	Для Каждого Стр Из ДанныеПрил7 Цикл
		
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение7", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзБензПостСвид = СкопироватьУзел(УзелРодитель, БензПостСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзБензПостСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			
			//данные об организации в зависит от ЮР/ФЛ
			
			Если СтрДлина(СокрЛП(ДанныеСтраницы["П000960002000"])) = 12 Тогда //ФЛ
				СведИППолуч =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СведИППолуч");
				Для Каждого Эл Из СведИППолуч.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ФИОИП = РазложитьФИО(ДанныеСтраницы["П000960001000"]);
				УзелФИО =  ПолучитьПодчиненныйЭлемент(СведИППолуч, "ФИО");
				
				ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия", ФИОИП.Фамилия);
				ЗадатьЗначениеЭлемента(УзелФИО, "Имя", ФИОИП.Имя);
				ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИОИП.Отчество);
				
				
			Иначе //ЮЛ
				СведОргПолуч =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СведОргПолуч");
				Для Каждого Эл Из СведОргПолуч.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			//еще один нижестоящий узел
			СвБензНатур =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СвБензНатур");
			Для Каждого Эл Из СвБензНатур.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			
			// заполняем табличную часть
			СвОбБензСФ = ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СвОбБензСФ");
			ОбБензСФ = ПолучитьПодчиненныйЭлемент(СвОбБензСФ, "ОбБензСФ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000960000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбБензСФ = СкопироватьУзел(СвОбБензСФ, ОбБензСФ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбБензСФ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки); // !!!
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры
	
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// обрабатываем суммы в разделе 1.1
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел1"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
	// обрабатываем суммы в разделе 1.2
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел12"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
////////////////////////////////////////////////////////////////////////////////

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//используется для удаления значений итоговых показателей на листах МЧБ, образованных многострочными разделами (кроме последнего)
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
		
		ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
		ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
		
		Для Каждого Обл Из ТаблДок.Области Цикл
			Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
				И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
				И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная
				Тогда
					Обл.Текст = "-";
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли
КонецПроцедуры

Процедура Печать(ВидПечати) Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	
	//специфика данного отчета - изменение номеров страниц+++
	
	//специфика данного отчета - изменение номеров страниц---
	
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Функция ПолучитьСмысловуюЧастьИмениЯчейки
// возвращает смысловую часть ячейки
// полезно, если ячейка является квадратом значения
// если Определение = Истина - получитьСмысловуюЧасть, иначе - Получить счетчик, то что после "_"
//
// Параметры:
//  ИмяЯчейки      - название ячейки, строка.
//  Определение    - что необходимо вернуть, Истина - смысловую часть, Ложь - индекс.
//
// Возвращаемое значение:
//  Строка - смысловая часть или индекс
//
Функция ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Определение = Истина) Экспорт

	Для Инд = 1 По СтрДлина(ИмяЯчейки) Цикл
		// последний разделитель
		// не пользуемся тут функцией Найти, т.к. разделителей может быть много в одной ячейки, пример ИНН_1_1
		
		СимволСтроки = Сред(ИмяЯчейки,СтрДлина(ИмяЯчейки) - Инд + 1 ,1);

		Если СимволСтроки = "_" Тогда 
		// встретился знак "_" считаем его разделителем
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред

		//Если НЕ роЯвляетсяЧислом(СимволСтроки) Тогда
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(СимволСтроки) Тогда
		// встретилась буква разделить
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред
	КонецЦикла;

	СмысловаяЧасть = Сред(ИмяЯчейки, 1, АдресПоследнегоРазделителя); // возвращаем ВМЕСТЕ с разделителем
	// Получаем текущий счетчик
	ТекущийСчетчик = Сред(ИмяЯчейки, АдресПоследнегоРазделителя + 1, СтрДлина(ИмяЯчейки) - АдресПоследнегоРазделителя);

	Если Определение Тогда
		Возврат СмысловаяЧасть;
	Иначе
		Возврат ТекущийСчетчик;
	КонецЕсли;

КонецФункции // ПолучитьСмысловуюЧастьИмениЯчейки

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный",	"МЧБ_2011кв2_01_Титул");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",		"МЧБ_2011кв2_02_Раздел1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел12",		"МЧБ_2011кв2_03_Раздел12");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел13",		"МЧБ_2011кв2_04_Раздел13");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",		"МЧБ_2011кв2_05_Раздел2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел24",		"МЧБ_2011кв2_06_Раздел24");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел25",		"МЧБ_2011кв2_07_Раздел25");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение1",	"МЧБ_2011кв2_08_Приложение1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение2",	"МЧБ_2011кв2_09_Приложение2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение3",	"МЧБ_2011кв2_10_Приложение3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение4",	"МЧБ_2011кв2_11_Приложение4");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение5",	"МЧБ_2011кв2_12_Приложение5");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение6",	"МЧБ_2011кв2_13_Приложение6");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаПриложение7",	"МЧБ_2011кв2_14_Приложение7");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 0;
	МакетМЧБ.ПолеСправа = 0;
	МакетМЧБ.ПолеСнизу = 0;
	МакетМЧБ.ПолеСлева = 0;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	//Определение: является ли раздел многострочным 
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Сред(Параметры.ИмяТабличногоПоля,24));
	Если ИдГруппы <> Неопределено Тогда
		//определение исходного количества строк на листе МЧБ
		ИсхКолвоСтрокБлока = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы,ИсхКолвоСтрокБлока);
		ТекКолвоСтрокБлока = мСтруктураМногострочныхРазделов[ИдГруппы].Количество();
		Если ТекКолвоСтрокБлока > ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			Для каждого КолонкаСтруктуры Из мСтруктураМногострочныхРазделов[ИдГруппы].Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				//переименование+++ (начиная со второго листа)
				Если Сч > 1 Тогда
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							//проверка на вхождение в данную многострочную часть
							Продолжить;
						КонецЕсли;
						
						//определение и отбрасывание НомерЯчейки
						ПоказательИНомерСтрокиСРазделителем = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						//определение СмысловаяЧасть и ТекущийСчетчик
						СмысловаяЧастьСРазделителем = ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						//Окончательная проверка на вхождение в данную многострочную часть
						Если Найти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ИсхКолвоСтрокБлока;
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							//очищение происходит после этого цикла
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						//Подготовка к переименованию
						//заполнение списка: значение - область, представление - будущее имя
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
					КонецЦикла;
					
					//Очищение
					Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = "-";
					КонецЦикла;
					
					//Переименование
					Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
					КонецЦикла;
							
				КонецЕсли; 
				//переименование---
				//
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Параметры, ЛистМЧБ);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ЛистМЧБ, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
				
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									
									////исключение+ 
									// для строки 50 Раздела 2 производится округление до 10 знака после запятой
									Если Найти(Область.Имя, "П000200005003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 10 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 10)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									////исключение- 
									
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено 
				И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПолеТабличногоДокументаТитульныйR25C27ПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Элемент.Значение) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Элемент.Значение) Тогда
		Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
		Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
		Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры


Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьЕдиницыИзмерения) * Делитель;

КонецФункции // ОкруглитьЧислоПоФормату()



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2011Кв2";
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(13, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

мОписаниеТиповЧисло54 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 4);
мОписаниеТиповЧисло143 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3);
мОписаниеТиповЧисло153 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
мОписаниеТиповЧисло41 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4, 1);
мОписаниеТиповЧисло132 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(13, 2);

ОписаниеТиповСтрока1   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповСтрока2   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2);
ОписаниеТиповСтрока3   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока4   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);
ОписаниеТиповСтрока5   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5);
ОписаниеТиповСтрока7   	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(7);
ОписаниеТиповСтрока11   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11);
ОписаниеТиповСтрока20   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20);
ОписаниеТиповСтрока40   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(40);


МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0001100020";
мИдГруппы12  = "П0001200020";
мИдГруппы13  = "П0001300020";
мИдГруппы2 = "П0002100010";
мИдГруппы24 = "П0002400010";
мИдПриложения1 = "П0009000000";
мИдПриложения2 = "П0009100000";
мИдПриложения3 = "П0009200000";
мИдПриложения4 = "П0009300000";
мИдПриложения5 = "П0009400000";
мИдПриложения6 = "П0009500000";
мИдПриложения7 = "П0009600000";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 6;
КолИсхСтрокИдГруппы12 = 5;
КолИсхСтрокИдГруппы13 = 8;
КолИсхСтрокИдГруппы2 = 9;
КолИсхСтрокИдГруппы24 = 25;
КолИсхСтрокИдПриложение1 = 22;
КолИсхСтрокИдПриложение2 = 18;
КолИсхСтрокИдПриложение3 = 18;
КолИсхСтрокИдПриложение4 = 6;
КолИсхСтрокИдПриложение5 = 6;
КолИсхСтрокИдПриложение6 = 6;
КолИсхСтрокИдПриложение7 = 6;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000110002020", ОписаниеТиповСтрока20);
СтруктураГруппы1.Колонки.Добавить("П000110002030", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000110002040", мОписаниеТиповЧислоЕ);

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000120002020", ОписаниеТиповСтрока20);
СтруктураГруппы12.Колонки.Добавить("П000120002030", мОписаниеТиповЧислоЕ);
СтруктураГруппы12.Колонки.Добавить("П000120002040", мОписаниеТиповЧислоЕ);

СтруктураГруппы13 = Новый ТаблицаЗначений;
СтруктураГруппы13.Колонки.Добавить("П000130002020", ОписаниеТиповСтрока20);
СтруктураГруппы13.Колонки.Добавить("П000130002030", мОписаниеТиповЧислоЕ);


СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000210001001", ОписаниеТиповСтрока5);
СтруктураГруппы2.Колонки.Добавить("П000210001002", ОписаниеТиповСтрока1);
СтруктураГруппы2.Колонки.Добавить("П000210001003", мОписаниеТиповЧисло132);
СтруктураГруппы2.Колонки.Добавить("П000210001004", мОписаниеТиповЧислоЕ);

СтруктураГруппы24 = Новый ТаблицаЗначений;
СтруктураГруппы24.Колонки.Добавить("П000240001001", ОписаниеТиповСтрока5);
СтруктураГруппы24.Колонки.Добавить("П000240001002", мОписаниеТиповЧислоЕ);
СтруктураГруппы24.Колонки.Добавить("П000240001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы24.Колонки.Добавить("П000240001004", ОписаниеТиповСтрока2);
СтруктураГруппы24.Колонки.Добавить("П000240001005", ОписаниеТиповСтрока4);

СтруктураПриложения1 = Новый ТаблицаЗначений;
СтруктураПриложения1.Колонки.Добавить("П000900000001", ОписаниеТиповСтрока5);
СтруктураПриложения1.Колонки.Добавить("П000900000002", мОписаниеТиповЧисло41);
СтруктураПриложения1.Колонки.Добавить("П000900000003", мОписаниеТиповЧисло132);
СтруктураПриложения1.Колонки.Добавить("П000900000004", мОписаниеТиповЧисло132);

СтруктураПриложения2 = Новый ТаблицаЗначений;
СтруктураПриложения2.Колонки.Добавить("П000910000001", ОписаниеТиповСтрока5);
СтруктураПриложения2.Колонки.Добавить("П000910000002", ОписаниеТиповСтрока3);
СтруктураПриложения2.Колонки.Добавить("П000910000003", мОписаниеТиповЧисло132);
СтруктураПриложения2.Колонки.Добавить("П000910000004", ОписаниеТиповСтрока3);
СтруктураПриложения2.Колонки.Добавить("П000910000005", мОписаниеТиповЧислоЕ);

СтруктураПриложения3 = Новый ТаблицаЗначений;
СтруктураПриложения3.Колонки.Добавить("П000920000001", ОписаниеТиповСтрока5);
СтруктураПриложения3.Колонки.Добавить("П000920000002", ОписаниеТиповСтрока3);
СтруктураПриложения3.Колонки.Добавить("П000920000003", мОписаниеТиповЧисло132);
СтруктураПриложения3.Колонки.Добавить("П000920000004", ОписаниеТиповСтрока3);
СтруктураПриложения3.Колонки.Добавить("П000920000005", мОписаниеТиповЧислоЕ);

СтруктураПриложения4 = Новый ТаблицаЗначений;
СтруктураПриложения4.Колонки.Добавить("П000930000001", ОписаниеТиповСтрока3);
СтруктураПриложения4.Колонки.Добавить("П000930000002", ОписаниеТиповДата);
СтруктураПриложения4.Колонки.Добавить("П000930000003", мОписаниеТиповЧисло132);
СтруктураПриложения4.Колонки.Добавить("П000930000004", ОписаниеТиповСтрока40);

СтруктураПриложения5 = Новый ТаблицаЗначений;
СтруктураПриложения5.Колонки.Добавить("П000940000001", ОписаниеТиповСтрока3);
СтруктураПриложения5.Колонки.Добавить("П000940000002", ОписаниеТиповДата);
СтруктураПриложения5.Колонки.Добавить("П000940000003", мОписаниеТиповЧисло132);
СтруктураПриложения5.Колонки.Добавить("П000940000004", ОписаниеТиповСтрока40);

СтруктураПриложения6 = Новый ТаблицаЗначений;
СтруктураПриложения6.Колонки.Добавить("П000950000001", ОписаниеТиповДата);
СтруктураПриложения6.Колонки.Добавить("П000950000002", мОписаниеТиповЧисло132);
СтруктураПриложения6.Колонки.Добавить("П000950000003", ОписаниеТиповСтрока40);

СтруктураПриложения7 = Новый ТаблицаЗначений;
СтруктураПриложения7.Колонки.Добавить("П000960000001", ОписаниеТиповДата);
СтруктураПриложения7.Колонки.Добавить("П000960000002", мОписаниеТиповЧисло132);
СтруктураПриложения7.Колонки.Добавить("П000960000003", ОписаниеТиповСтрока40);


// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы13, СтруктураГруппы13);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы24, СтруктураГруппы24);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения1, СтруктураПриложения1);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения2, СтруктураПриложения2);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения3, СтруктураПриложения3);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения4, СтруктураПриложения4);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения5, СтруктураПриложения5);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения6, СтруктураПриложения6);
мСтруктураМногострочныхРазделов.Вставить(мИдПриложения7, СтруктураПриложения7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрокИдГруппы12);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы13, КолИсхСтрокИдГруппы13);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы24, КолИсхСтрокИдГруппы24);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения1, КолИсхСтрокИдПриложение1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения2, КолИсхСтрокИдПриложение2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения3, КолИсхСтрокИдПриложение3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения4, КолИсхСтрокИдПриложение4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения5, КолИсхСтрокИдПриложение5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения6, КолИсхСтрокИдПриложение6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдПриложения7, КолИсхСтрокИдПриложение7);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = ПолучитьТаблицуМногостраничногоРаздела();
ТаблицаСтраницыРазделаДляМногострочныхРазделов=ПолучитьТаблицуМногостраничногоРаздела(Истина);
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел12", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел13", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел24", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел25", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение1", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение2", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение3", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение4", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение5", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение6", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Приложение7", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());

// Версия формы
мВерсияФормы = "09/06/2011";

// Код отчета, равен КНД
мКодОтчета = "1151084";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.01", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;



ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220001001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220002001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220003001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220004001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220005001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220006001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220007001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220008001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220009001");


ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000930005001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000930006001");

ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000940005001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000940006001");

ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000950005001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000960005001");

ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230001001");
ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230002001");


