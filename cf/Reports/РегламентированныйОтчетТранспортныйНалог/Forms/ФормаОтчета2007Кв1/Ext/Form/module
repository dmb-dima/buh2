////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;

// Хранят данные в квадратиках на Разделе 1, сохраняются в структурах

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматн\ую строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

// Ссылка на спрачоник налоговых органов, НО - для которого формируется деклараций.
Перем мСсылкаНО;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;
// Хранит код отчета по КНД
Перем мКодОтчета;
// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;
// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мКодыБюджетнойКлассификации2005;

Перем мКодыЛьгот;
Перем мВидыТранспортныхСредств;
Перем мКодыОКЕИ;
Перем мПоляПоискаПоказателяВТСП Экспорт;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мБезОткрытияФормы;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;
Перем мИсключитьЗапускРасчета;

Перем мСтруктураПеременных;

Перем мИдГруппы1;

Перем мДанныеОтчета Экспорт;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки Экспорт;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОчиститьРасшифровкуВМногостраничнойСтруктуре
//
Процедура ОчиститьРасшифровкуВМногостраничнойСтруктуре()

	ИндАкт = мСтруктураМногостраничныхРазделов.Раздел2.Найти(Истина, "АктивнаяСтраница");
	Инд = мСтруктураМногостраничныхРазделов.Раздел2.Индекс(ИндАкт);

	Если мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок = Неопределено Тогда
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
	КонецЕсли;

	Для каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок Цикл
		Стр.П000020002015 = Неопределено;
	КонецЦикла;

	// Сохраним таблицу блока в структуремногострочных разделов.
	мСтруктураМногострочныхРазделов[мИдГруппы1] = мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок.Скопировать();

КонецПроцедуры // ОчиститьРасшифровкуВМногостраничнойСтруктуре

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		ОчиститьРасшифровкуВМногостраничнойСтруктуре();

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателеньДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел2";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ШиринаСтрокиМногострочнойЧасти"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Определяет, из скольких строк состоит строчка многострочного раздела
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НазваниеМногострочнаяЧасть", ОписаниеТиповСтрока254); // Определяет, из скольких строк состоит строчка многострочного раздела

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаРаздел2";
	НовСтр.мИдГруппы                = мИдГруппы1;
	НовСтр.РазмерПоОсиХ             = 50;
	НовСтр.РазмерПоОсиУ             = 56;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 11; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 51; // Строчка по У

	НовСтр.НомерГраницыСтр          = 1;
	НовСтр.ОсновнаяЧастьУСтр        = 53;

	НовСтр.ШиринаСтрокиМногострочнойЧасти = 3;
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Если Найти(ИмяРаздела, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницы = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницы = ИмяРаздела;
	КонецЕсли;

	Если ТипЗнч(мСтруктураПеременных) <> Тип("Структура") Тогда
		мСтруктураПеременных = Новый Структура;
	КонецЕсли;

	Если ИмяСтраницы = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли ИмяСтраницы = "Раздел1" Тогда

		мСтруктураПеременных.Вставить("КБКРаздел1", "");
		мСтруктураПеременных.Вставить("ОКАТОРаздел1", "");
		мСтруктураПеременных.Вставить("Сумма30Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма40Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма50Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма60Раздел1", 0);

	ИначеЕсли ИмяСтраницы = "Раздел2" Тогда
		мСтруктураПеременных.Вставить("ОКАТОРаздел2", "");
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Окончание блока обязательных функций

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел2;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 Тогда
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;

				// Пропустим
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли (ИмяПоказателя = "Сумма30Раздел1")
	 Или (ИмяПоказателя = "Сумма40Раздел1")
	 Или (ИмяПоказателя = "Сумма50Раздел1")
	 Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел2" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	//мТитульный.Области.НалогПериод.Значение = Месяц(мДатаКонцаПериодаОтчета);

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "        ";
	ДатаПодписиБух     = "        ";

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргУп.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Если ЧП Тогда
		ДатаПодписиРук = "";
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл
		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
	КонецЦикла;

	Если ЧП Тогда
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        ", "ДатаПодписи1_",, "Раздел1",, Ложь);
	Иначе
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), "ДатаПодписи1_",, "Раздел1",, Ложь);
	КонецЕсли;
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), "ДатаПодписи2_",, "Раздел1",, Ложь);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОКАТО, КодНО, НаимНО, ТелОрганизации, ТипНП, НаимИОПол, ОКВЭДКвадратикиТочкиРазделения, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения, "не предусмотрено для заполнения ФЛ");

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		// Код окато заполняем только при открытии декларации, через кнопку Обновить
		// код окато не заполняется, т.к. лист раздела 1 многостраничный.

		Если (НЕ мВПрограммеИзмененаОрганизация) И (НЕ мДокументВосстановлен) Тогда
			Если СтрДлина(Результат.ОКАТО) = 11 И ОбщегоНазначения.ТолькоЦифрыВСтроке(Результат.ОКАТО) Тогда
				мСтруктураПеременных.Вставить("ОКАТОРаздел1", Результат.ОКАТО);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, Результат.ОКАТО);
			Иначе
				мСтруктураПеременных.Вставить("ОКАТОРаздел1", "");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, "           ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "Сумма1_", 15, мСтруктураПеременных.Сумма30Раздел1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "Сумма40_", 15, мСтруктураПеременных.Сумма40Раздел1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "Сумма50_", 15, мСтруктураПеременных.Сумма50Раздел1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "Сумма60_", 15, мСтруктураПеременных.Сумма60Раздел1, Истина);
	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				Если (КодПоказателяПоСтруктуре = "Сумма30Раздел1")
				 Или (КодПоказателяПоСтруктуре = "Сумма40Раздел1")
				 Или (КодПоказателяПоСтруктуре = "Сумма50Раздел1")
				 Или (КодПоказателяПоСтруктуре = "Сумма60Раздел1") Тогда
					ЗаполнениеЗначенийВКвадратиках("Раздел1");
				Иначе
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЕсли;
			Иначе

				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел2 Тогда
		ИдГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле) Экспорт

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				Если НСтр > 11 Тогда
					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				Иначе
					СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				КонецЕсли;

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
		Расчет(ИмяСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;
	
	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Если мСтруктураМногострочныхРазделов.П0000200020.Колонки.Найти("П000020002015") = Неопределено Тогда
			мСтруктураМногострочныхРазделов.П0000200020.Колонки.Добавить("П000020002015");
		КонецЕсли;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ТаблПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
				// В случае, если открытая декларация не содержит колонку 15 в структуре, тогда
				// добавим, для хранения ссылки.
				Для Каждого Стр Из ЭлементСтруктуры.Значение Цикл

					Если ТипЗнч(Стр.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						Если Стр.ДанныеДопСтрок.Колонки.Найти("П000020002015") = Неопределено Тогда
							Стр.ДанныеДопСтрок.Колонки.Добавить("П000020002015");
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
				// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
				// данные многостраничных разделов уже были выведены в соответствующие листы
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", ФлажокОтклАвтоРасчет);

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			Если НомИсходнойСтроки < 11 Тогда
				СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			Иначе

				// определяем вставляемую область
				ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// добавляем в таблицу новую строку
				ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			КонецЕсли;

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				Если ИмяКолонки = "П000020002015" Тогда
					Продолжить;
				КонецЕсли;

				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			Если КолонкаТаблицы.Имя = "П000020002015" Тогда
				Продолжить;
			КонецЕсли;

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// НайтиЛистРаздела1СТребуемымОКАТОИУстановитьСумму
// Данная процедура расчетает раздел 1 по необходимому коду ОКАТО.
//
// Параметры:
//  ОКАТО          - код ОКАТО
//  Сумма          - сумма налога (строка 030, раздела 1).
//
Процедура НайтиЛистРаздела1СТребуемымОКАТОИУстановитьСумму(Знач ОКАТО, Знач Сумма)

	Если ПустаяСтрока(ОКАТО) Тогда
		Возврат;
	КонецЕсли;

	// Зафиксируем раздел 1.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
	// Переберем все экземпляры раздела 1, чтобы найти нужный лист с заданным кодом ОКАТО.
	ИндексЭкземпляра = -1;
	ИндексСтраницыСПустымКодомОКАТО = -1;
	ПустаяСтраницаНайдена = Ложь;
	СуммаПоСтроке030 = Неопределено;
	Для каждого Экз Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
		Если Экз.Данные.ОКАТОРаздел1 = ОКАТО Тогда
			ИндексЭкземпляра = мСтруктураМногостраничныхРазделов.Раздел1.Индекс(Экз);
			// В переменную СуммаПоСтроке030 запишем сумму из строки 030 раздела 1 для последующего анализа, если она не изменилась
			// с предлагаемой суммой, то никаких перерасчетов не делаем.
			СуммаПоСтроке030 = Экз.Данные.Сумма30Раздел1;
			Прервать;
		КонецЕсли;
		Если (ПустаяСтрока(Экз.Данные.ОКАТОРаздел1)) И (НЕ ПустаяСтраницаНайдена) Тогда
			ИндексСтраницыСПустымКодомОКАТО = мСтруктураМногостраничныхРазделов.Раздел1.Индекс(Экз);
			ПустаяСтраницаНайдена = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ИндексЭкземпляра = -1 Тогда
		// Нужной странице не нашлось, тогда работаем с первой пустой страницей, где нет кода ОКАТО.
		Если ПустаяСтраницаНайдена Тогда
			НужнаяСтраницаИндекс = ИндексСтраницыСПустымКодомОКАТО;
		Иначе
			// Добавляем новый экземпляр раздела 1.
			мИсключитьЗапускРасчета = Истина;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1");
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
			мИсключитьЗапускРасчета = Ложь;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, ОКАТО);
			мСтруктураПеременных.ОКАТОРаздел1 = ОКАТО;
			Если ОбновитьПеременныеМодуля("Сумма30Раздел1", Сумма) Тогда
				ЗаполнениеЗначенийВКвадратиках("Раздел1");
			КонецЕсли;

			// Добавим код КБК.
			Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210604011021000110") Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210604011021000110");
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
			Расчет("Раздел1");
			Возврат;
		КонецЕсли;
	Иначе
		НужнаяСтраницаИндекс = ИндексЭкземпляра;
		Если СуммаПоСтроке030 <> Неопределено Тогда
			// В случае, если сумма по строке 030 в экземпляре раздела 1 равна такой же сумме в разделе 2, тогда ничего не делаем и не пересчитываем.
			Если СуммаПоСтроке030 = Сумма Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Отобразим страницу с нужным индексом, предварительно запомнив, какая страница активна в данный момент.
	ИндАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Раздел1.Индекс(мСтруктураМногостраничныхРазделов.Раздел1.Найти(Истина, "АктивнаяСтраница"));

	ПоказатьСтраницуМногостраничногоРаздела(НужнаяСтраницаИндекс, "Раздел1", Истина);
	// Запишем снова ОКАТО, для случаев, если эта страница пустая.

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, ОКАТО);
	мСтруктураПеременных.ОКАТОРаздел1 = ОКАТО;
	Если ОбновитьПеременныеМодуля("Сумма30Раздел1", Сумма) Тогда
		ЗаполнениеЗначенийВКвадратиках("Раздел1");
	КонецЕсли;

	// Добавим код КБК.
	Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210604011021000110") Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210604011021000110");
	КонецЕсли;

	// РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
	Расчет("Раздел1");

	// Отобразим страницу, которая была активна.
	ПоказатьСтраницуМногостраничногоРаздела(ИндАктивнойСтраницы, "Раздел1", Истина);

КонецПроцедуры // НайтиЛистРаздела1СТребуемымОКАТОИУстановитьСумму

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// ПолучитьСуммуИзРаздела2ПоОКАТО
// Функция посчитает итог по налогу и по данному коду ОКАТО
// Параметры:
//  ОКАТО          - код адм.-терр. образования
// Возвращаемое значение:
//  Число          - сумма по колонке 14 раздела 2
//
Функция ПолучитьСуммуИзРаздела2ПоОКАТО(Знач ОКАТО)

	Если ОКАТО = мСтруктураПеременных.ОКАТОРаздел2 Тогда
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

		// Код ОКАТО соответствует активной страницы раздела 2
		НакопительнаяСуммаКолонка14 = СтруктураГруппы1.Итог("П000020002014");
		Возврат НакопительнаяСуммаКолонка14;
	КонецЕсли;

	НакопительнаяСуммаКолонка14 = 0;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
		Если (Стр.Данные = Неопределено) Или (Стр.ДанныеДопСтрок = Неопределено) Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
		КонецЕсли;

		Если Стр.Данные.ОКАТОРаздел2 = ОКАТО Тогда
			НакопительнаяСуммаКолонка14 = Стр.ДанныеДопСтрок.Итог("П000020002014");
		КонецЕсли;
	КонецЦикла;
	Возврат НакопительнаяСуммаКолонка14;

КонецФункции // ПолучитьСуммуИзРаздела2ПоОКАТО

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто()

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Перед автозаполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	// Очистим декларацию.
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	Расчет("");
		
	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Массив для отбора по налоговому органу.
	МассивНО = Новый Массив;
	Если НЕ ЗначениеЗаполнено(мСсылкаНО) Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
	ИначеЕсли мСсылкаНО.Код = Организация.КодИМНС Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
		МассивНО.Добавить(мСсылкаНО);
	Иначе
		МассивНО.Добавить(мСсылкаНО);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", МассивНО);
	
	ТекстОбъединяющегоЗапроса = "";
	
	Период = мДатаНачалаПериодаОтчета;
	
	Пока Период <= мДатаКонцаПериодаОтчета Цикл
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК КоличествоМесяцев,
		|	СписокОсновныхСредств.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияТранспортныхСредствСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
		|	РегистрацияТранспортныхСредствСрезПоследних.Марка КАК Марка,
		|	РегистрацияТранспортныхСредствСрезПоследних.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	ВЫБОР КОГДА РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган = ЗНАЧЕНИЕ(Справочник.РегистрацияВИФНС.ПустаяСсылка)
		|		ТОГДА РегистрацияТранспортныхСредствСрезПоследних.Организация.КодПоОКАТО
		|		ИНАЧЕ РегистрацияТранспортныхСредствСрезПоследних.КодПоОКАТО
		|	КОНЕЦ КодПоОКАТО,
		|	РегистрацияТранспортныхСредствСрезПоследних.КодВидаТранспортногоСредства КАК КодВидаТранспортногоСредства,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяБаза КАК НалоговаяБаза,
		|	РегистрацияТранспортныхСредствСрезПоследних.ЕдиницаИзмеренияНалоговойБазы КАК ЕдиницаИзмеренияНалоговойБазы,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяСтавка КАК НалоговаяСтавка,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяЛьгота КАК НалоговаяЛьгота,
		|	РегистрацияТранспортныхСредствСрезПоследних.КодНалоговойЛьготы КАК КодНалоговойЛьготы,
		|	РегистрацияТранспортныхСредствСрезПоследних.ЛьготнаяСтавка КАК ЛьготнаяСтавка,
		|	РегистрацияТранспортныхСредствСрезПоследних.ПроцентУменьшения КАК ПроцентУменьшения,
		|	РегистрацияТранспортныхСредствСрезПоследних.СуммаУменьшения КАК СуммаУменьшения,
		|	РегистрацияТранспортныхСредствСрезПоследних.Период КАК ДатаРегистрации
		|ПОМЕСТИТЬ
		|	РегистрацияТранспортныхСредств" + Формат(Период, "ДФ=MM") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|		СУММА(РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу) КАК ВключатьВНалоговуюБазу
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ВключатьВНалоговуюБазу
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, -1), МЕСЯЦ), Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Организация = &Организация 
		|                                                                                                          И ВключатьВНалоговуюБазу = ИСТИНА И Период >= НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство) КАК СписокОсновныхСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ВключатьВНалоговуюБазу = ИСТИНА И Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ПО СписокОсновныхСредств.ОсновноеСредство = РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СписокОсновныхСредств.ВключатьВНалоговуюБазу > 0
		|	И РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (НалоговыйОрган)
		|";
		Запрос.Выполнить();
		
		ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		                              |",
									  "ОБЪЕДИНИТЬ ВСЕ
									  |ВЫБРАТЬ *
		                              |")
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ПОМЕСТИТЬ РегистрацияТранспортныхСредств
									  |",
									  "")
								  + "ИЗ РегистрацияТранспортныхСредств" + Формат(Период, "ДФ=MM") + "
									|";
		
		Период = ДобавитьМесяц(Период, 1);	
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(РегистрацияТранспортныхСредств.КоличествоМесяцев) КАК КоличествоМесяцев,
	|	РегистрацияТранспортныхСредств.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияТранспортныхСредств.РегистрационныйЗнак,
	|	РегистрацияТранспортныхСредств.Марка,
	|	РегистрацияТранспортныхСредств.ИдентификационныйНомер,
	|	РегистрацияТранспортныхСредств.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацияТранспортныхСредств.КодВидаТранспортногоСредства,
	|	РегистрацияТранспортныхСредств.НалоговаяБаза,
	|	РегистрацияТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы,
	|	РегистрацияТранспортныхСредств.НалоговаяСтавка,
	|	РегистрацияТранспортныхСредств.НалоговаяЛьгота,
	|	РегистрацияТранспортныхСредств.КодНалоговойЛьготы,
	|	РегистрацияТранспортныхСредств.ЛьготнаяСтавка,
	|	РегистрацияТранспортныхСредств.ПроцентУменьшения,
	|	РегистрацияТранспортныхСредств.СуммаУменьшения,
	|	МАКСИМУМ(РегистрацияТранспортныхСредств.ДатаРегистрации) КАК ДатаРегистрации
	|ИЗ
	|    РегистрацияТранспортныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияТранспортныхСредств.ОсновноеСредство,
	|	РегистрацияТранспортныхСредств.РегистрационныйЗнак,
	|	РегистрацияТранспортныхСредств.Марка,
	|	РегистрацияТранспортныхСредств.ИдентификационныйНомер,
	|	РегистрацияТранспортныхСредств.КодПоОКАТО,
	|	РегистрацияТранспортныхСредств.КодВидаТранспортногоСредства,
	|	РегистрацияТранспортныхСредств.НалоговаяБаза,
	|	РегистрацияТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы,
	|	РегистрацияТранспортныхСредств.НалоговаяСтавка,
	|	РегистрацияТранспортныхСредств.НалоговаяЛьгота,
	|	РегистрацияТранспортныхСредств.КодНалоговойЛьготы,
	|	РегистрацияТранспортныхСредств.ЛьготнаяСтавка,
	|	РегистрацияТранспортныхСредств.ПроцентУменьшения,
	|	РегистрацияТранспортныхСредств.СуммаУменьшения
	|ИТОГИ
	|	КОЛИЧЕСТВО(ОсновноеСредство)
	|ПО
	|	КодПоОКАТО";
	ВыборкаОКАТО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОКАТО.Количество() = 0 Тогда
		
		НаименованиеНО = ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.ОргИМНС.Значение;
		
		Если НЕ ПустаяСтрока(НаименованиеНО) 
		 ИЛИ НЕ ПустаяСтрока(КодНО) Тогда
		   
			ПредставлениеНалоговогоОргана = " по " + СокрЛП(НаименованиеНО);
			
			Если НЕ ПустаяСтрока(КодНО) Тогда
				
				ПредставлениеНалоговогоОргана = ПредставлениеНалоговогоОргана + ?(ПустаяСтрока(НаименованиеНО), "ИФНС с кодом ", " (") + СокрЛП(КодНО)  + ?(ПустаяСтрока(НаименованиеНО), "", ")");
				
			КонецЕсли;
			
		Иначе
			
			ПредставлениеНалоговогоОргана = "";
		   
		КонецЕсли;
		
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			Если ГлавныйИнтерфейс.Полный.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Внеоборотные активы"" - ""Регистрация транспортных средств"")";
			ИначеЕсли ГлавныйИнтерфейс.БухгалтерскийИНалоговыйУчет.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Основные средства и нематериальные активы"" - ""Регистрация транспортных средств"")";
			ИначеЕсли ГлавныйИнтерфейс.УправлениеОборудованием.Видимость Тогда
				ПутьКРегистру = "(меню ""Основные средства"" - ""Регистрация транспортных средств"")";
			Иначе
				ПутьКРегистру = "(меню ""Операции"" - ""Регистры сведений..."" - ""Регистрация транспортных средств"")";
			КонецЕсли;
			
		Иначе
			ПутьКРегистру = "(меню ""ОС"" - ""Регистрация транспортных средств"")";
		КонецЕсли;
		
		Сообщить("Отсутствуют данные о регистрации транспортных средств на " + ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина") + " для " + Организация + ПредставлениеНалоговогоОргана + "
		         |" + ПутьКРегистру + ".");
				 
		Возврат;		
		
	КонецЕсли;
	
	ЭталонноеКоличествоСтрок = мСтруктураИсхКолвоСтрокРазделов[мИдГруппы1];
	ПервыйПроход = Истина;
	
	Пока ВыборкаОКАТО.Следующий() Цикл
	
		Если НЕ ПервыйПроход Тогда
			Расчет("");
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
			ОчиститьРасшифровкуВМногостраничнойСтруктуре();
		Иначе
			ПервыйПроход = Ложь;
		КонецЕсли;
		
		СтруктураГруппыДоп = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппыДоп);

		ИндАкт = мСтруктураМногостраничныхРазделов.Раздел2.Найти(Истина, "АктивнаяСтраница");
		Инд = мСтруктураМногостраничныхРазделов.Раздел2.Индекс(ИндАкт);

		Если мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
		КонецЕсли;

		СтруктураГруппы1 = мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок;

		// Вставим код ОКАТО в раздел 2, для которого будем выводить всю информацию о ТС.
		Если ОбновитьПеременныеМодуля("ОКАТОРаздел2", ВыборкаОКАТО.КодПоОКАТО) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ОКАТОРаздел2_", 11, ВыборкаОКАТО.КодПоОКАТО);
		КонецЕсли;

		// Отберем все объекты с необходимым кодом ОКАТО
		ИндексСтрокиМногострочнойЧастиДляЛистаОКАТО = 1;
		
		ВыборкаТранспортныхСредств = ВыборкаОКАТО.Выбрать();
		Пока ВыборкаТранспортныхСредств.Следующий() Цикл
			
			Если ИндексСтрокиМногострочнойЧастиДляЛистаОКАТО > ЭталонноеКоличествоСтрок Тогда
				ВставитьДополнительнуюСтроку(мИдГруппы1);
				// Синхронно добавим доп. строку в таблицу многострочной части, которая сохраняется в структуре многостраничных разделов.
				СтруктураГруппы1.Добавить();
			КонецЕсли;

			Позиция = Формат(ИндексСтрокиМногострочнойЧастиДляЛистаОКАТО, "ЧГ=0");
			мРаздел2.Области["П000020002002_" + Позиция].Значение = ВыборкаТранспортныхСредств.КодВидаТранспортногоСредства;

			// Идентификационный номер ТС
			мРаздел2.Области["П000020002003_" + Позиция].Значение = ВыборкаТранспортныхСредств.ИдентификационныйНомер;

			// Марка ТС
			мРаздел2.Области["П000020002004_" + Позиция].Значение = ВыборкаТранспортныхСредств.Марка;

			// Регистрационный знак
			мРаздел2.Области["П000020002005_" + Позиция].Значение = ВыборкаТранспортныхСредств.РегистрационныйЗнак;

			// Налоговая база
			мРаздел2.Области["П000020002006_" + Позиция].Значение = ВыборкаТранспортныхСредств.НалоговаяБаза;

			// Ед. изм.
			мРаздел2.Области["П000020002007_" + Позиция].Значение = ВыборкаТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы;
			
			// Коэффициент
			Коэффициент = Окр(ВыборкаТранспортныхСредств.КоличествоМесяцев
							  / (Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) + 1), 2);	
			
			мРаздел2.Области["П000020002009_" + Позиция].Значение = Коэффициент;
			
			// Ставка
			мРаздел2.Области["П000020002010_" + Позиция].Значение = ВыборкаТранспортныхСредств.НалоговаяСтавка;
			
			Если НЕ (ВыборкаТранспортныхСредств.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется) Тогда
				
				// Код налоговой льготы
				мРаздел2.Области["П000020002012_" + Позиция].Значение = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
				
				Если ВыборкаТранспортныхСредств.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения Тогда
					
					СуммаЛьготы = ВыборкаТранспортныхСредств.НалоговаяБаза * Коэффициент * ВыборкаТранспортныхСредств.НалоговаяСтавка;
					
				ИначеЕсли ВыборкаТранспортныхСредств.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
					
					СуммаЛьготы = (ВыборкаТранспортныхСредств.НалоговаяБаза * Коэффициент * ВыборкаТранспортныхСредств.НалоговаяСтавка)
								- (ВыборкаТранспортныхСредств.НалоговаяБаза * Коэффициент * ВыборкаТранспортныхСредств.ЛьготнаяСтавка);
					
				ИначеЕсли ВыборкаТранспортныхСредств.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
					
					СуммаЛьготы = (ВыборкаТранспортныхСредств.НалоговаяБаза * Коэффициент * ВыборкаТранспортныхСредств.НалоговаяСтавка)
								* ВыборкаТранспортныхСредств.ПроцентУменьшения / 100;
					
				ИначеЕсли ВыборкаТранспортныхСредств.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
					
					СуммаЛьготы = ВыборкаТранспортныхСредств.СуммаУменьшения;
					
				КонецЕсли;
				
				// Сумма налоговой льготы
				мРаздел2.Области["П000020002013_" + Позиция].Значение = СуммаЛьготы;
				
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.РегистрацияТранспортныхСредств.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период           = ВыборкаТранспортныхСредств.ДатаРегистрации;
			МенеджерЗаписи.Организация      = Организация;
			МенеджерЗаписи.ОсновноеСредство = ВыборкаТранспортныхСредств.ОсновноеСредство;
			МенеджерЗаписи.Прочитать();
			
			СтруктураГруппы1[Число(Позиция) - 1].П000020002015 = МенеджерЗаписи;
			// Обеспечим синхронное изменение расшифровки и в структуре МногостраничныхРазделов и в структуре МногострочныхРазделов.
			СтруктураГруппыДоп[Число(Позиция) - 1].П000020002015 = МенеджерЗаписи;

			ИндексСтрокиМногострочнойЧастиДляЛистаОКАТО = ИндексСтрокиМногострочнойЧастиДляЛистаОКАТО + 1;

		КонецЦикла;
		
	КонецЦикла;
		
	Расчет("");

КонецПроцедуры // ЗаполнитьАвто

// ЗаполнитьТекстПроДокументы
// Временная процедура. Добавлена для совместимости с док-тами регистрации данных.
//
Процедура ЗаполнитьТекстПроДокументы() Экспорт
	Возврат;
	// Временная процедура-заглушка. Добавлена для совместимости с док-тами регистрации данных.
КонецПроцедуры // ЗаполнитьТекстПроДокументы

// ПредложитьДобавитьДополнительнуюСтроку
//
Процедура ПредложитьДобавитьДополнительнуюСтроку()
	// При выключенном авторасчете сервис по автоматическому добавлению строк недоступен.
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	ОКАТО = ?(ПустаяСтрока(мСтруктураПеременных.ОКАТОРаздел2), "<не указан>", мСтруктураПеременных.ОКАТОРаздел2);
	Ответ = Вопрос("Информацию по следующему транспортному средству"  + Символы.ПС
				 + "по коду ОКАТО " + ОКАТО + " следует указывать на" + Символы.ПС
				 + "этой же странице, в новой строке."                + Символы.ПС
				 + "Добавить строку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВставитьДополнительнуюСтроку();
	КонецЕсли;
КонецПроцедуры // ПредложитьДобавитьДополнительнуюСтроку

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", НомерСтроки = Неопределено) Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		мСтруктураПеременных.Сумма30Раздел1 = ПолучитьСуммуИзРаздела2ПоОКАТО(мСтруктураПеременных.ОКАТОРаздел1);

		мСтруктураПеременных.Сумма50Раздел1 = Макс(ОкруглитьЧислоПоФормату(мСтруктураПеременных.Сумма30Раздел1) - ОкруглитьЧислоПоФормату(мСтруктураПеременных.Сумма40Раздел1), 0);
		мСтруктураПеременных.Сумма60Раздел1 = Макс(ОкруглитьЧислоПоФормату(мСтруктураПеременных.Сумма40Раздел1) - ОкруглитьЧислоПоФормату(мСтруктураПеременных.Сумма30Раздел1), 0);

		ЗаполнениеЗначенийВКвадратиках("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

		Если НомерСтроки = Неопределено Тогда
			НачальноеЗначение = 1;
			КонечноеЗначение = СтруктураГруппы1.Количество();
			НакопительнаяСуммаКолонка14 = 0;
		Иначе
			НачальноеЗначение = Число(НомерСтроки);
			КонечноеЗначение = Число(НомерСтроки);
		КонецЕсли;

		ТаблицаРаздела2 = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаРаздела2);

		АктивнаяСтраница = ТаблицаРаздела2.Найти(Истина, "АктивнаяСтраница");

		Для Инд = НачальноеЗначение По КонечноеЗначение Цикл

			НалБаза = мРаздел2.Области["П000020002006_" + Формат(Инд, "ЧГ=0")].Значение;
			Коэффициент = мРаздел2.Области["П000020002009_" + Формат(Инд, "ЧГ=0")].Значение;
			СтавкаНалога = мРаздел2.Области["П000020002010_" + Формат(Инд, "ЧГ=0")].Значение;
			ЛьготаКолонка13 = ОкруглитьЧислоПоФормату(мРаздел2.Области["П000020002013_" + Формат(Инд, "ЧГ=0")].Значение);

			НалогКолонка11 = ОкруглитьЧислоПоФормату(НалБаза * Коэффициент * СтавкаНалога);
			мРаздел2.Области["П000020002011_" + Формат(Инд, "ЧГ=0")].Значение = НалогКолонка11;

			НалогКолонка14 = НалогКолонка11 - ЛьготаКолонка13;
			НалогКолонка14 = Макс(НалогКолонка14, 0);
			мРаздел2.Области["П000020002014_" + Формат(Инд, "ЧГ=0")].Значение = НалогКолонка14;

			// Обновим в многострочном блоке.
			СтруктураГруппы1[Инд - 1].П000020002011 = НалогКолонка11;
			СтруктураГруппы1[Инд - 1].П000020002014 = НалогКолонка14;

			Если НомерСтроки = Неопределено Тогда
				НакопительнаяСуммаКолонка14 = НакопительнаяСуммаКолонка14 + НалогКолонка14;
			КонецЕсли;

		КонецЦикла;

		Если НомерСтроки <> Неопределено Тогда
			НакопительнаяСуммаКолонка14 = СтруктураГруппы1.Итог("П000020002014");
		КонецЕсли;

		НайтиЛистРаздела1СТребуемымОКАТОИУстановитьСумму(мСтруктураПеременных.ОКАТОРаздел2, НакопительнаяСуммаКолонка14);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		Расчет("Раздел2");
		Расчет("Раздел1");
	КонецЕсли;

	// Процедура заглушка

КонецПроцедуры // Расчет()

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мСтараяВерсияФормы = мВерсияФормы;

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1        = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2        = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыЛьгот");
		ЗагрузитьПоказателиИзМакета("ВидыТранспортныхСредств");
		ЗагрузитьПоказателиИзМакета("КодыОКЕИ");
		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	// Вызов этой процедуры нельзя вставлять в блок БЕЗОткрытияФормы.
	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;
	мРежимПечати = Ложь;
	мИсключитьЗапускРасчета = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					Если ИмяКолонки = "П000020002015" Тогда
						Продолжить;
					КонецЕсли;

					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный.Области.ВидДок.Значение = 1;

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВывода();

			// Добавим код КБК в раздел 1.
			Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210604011021000110") Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210604011021000110");
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		// Сохраним все значения.
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// КнопкаПерейтиНаСтраницуРаздел1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел1Нажатие

// КнопкаПерейтиНаСтраницуРаздел2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел2Нажатие

// КнопкаУдалитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1Нажатие

// КнопкаУдалитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	ОКАТОРаздел2 = мСтруктураПеременных.ОКАТОРаздел2;

	мИсключитьЗапускРасчета = Истина;

	КолВоСтраницДоУдаления = мСтруктураМногостраничныхРазделов.Раздел2.Количество();

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
	мИсключитьЗапускРасчета = Ложь;

	// При удалении раздела 2 необходимо найти соответствующий экземпляр раздела 1 и удалить его.
	Если ФлажокОтклАвтоРасчет Или КолВоСтраницДоУдаления = 1 Или ПустаяСтрока(ОКАТОРаздел2) Тогда
		Возврат;
	КонецЕсли;

	УдалитьСвязанныйРаздел1ПоКодуОКАТО(ОКАТОРаздел2);

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел2Нажатие

// УдалитьСвязанныйРаздел1ПоКодуОКАТО
// Процедура удаляет экземпляр раздела 1 если в нём содержится код ОКАТО
//
// Параметры:
//  КодОКАТО       - код ОКАТО, строка. Если в разделе 1 есть экземпляр с указанным кодом, то он будет удален.
//
// Возвращаемое значение:
//  Нет.
//
Процедура УдалитьСвязанныйРаздел1ПоКодуОКАТО(Знач КодОКАТО)
	// Сохраним текущий экземпляр раздела 1.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);

	// Если активная страница раздела 1 текущая, то удалим её и прекратив выполнение процедуры.
	Если мСтруктураПеременных.ОКАТОРаздел1 = КодОКАТО Тогда
		// Раздел 1 с таким же ОКАТО - активный в данный момент.
		Если мСтруктураМногостраничныхРазделов.Раздел1.Количество() > 1 Тогда
			мИсключитьЗапускРасчета = Истина;
			ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
			РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
			мИсключитьЗапускРасчета = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЭкземплярРаздела1 = 0;
	СовпадениеНайдено = Ложь;
	Для каждого Экз Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
		Если Экз.Данные.ОКАТОРаздел1 = КодОКАТО Тогда
			СовпадениеНайдено = Истина;
			Прервать;
		КонецЕсли;
		ЭкземплярРаздела1 = ЭкземплярРаздела1 + 1;
	КонецЦикла;

	// В случае, если экземпляр раздела обнаружен, то отобразим его и затем удалим стандартным способом.
	Если СовпадениеНайдено Тогда
		мИсключитьЗапускРасчета = Истина;
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ЭкземплярРаздела1, "Раздел1", Истина, 0);
		ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
		РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
		мИсключитьЗапускРасчета = Ложь;
	КонецЕсли;

КонецПроцедуры // УдалитьСвязанныйРаздел1ПоКодуОКАТО

// КнопкаДобавитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1Нажатие

// КнопкаДобавитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
	ОчиститьРасшифровкуВМногостраничнойСтруктуре();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел2Нажатие

// КнопкаСледующаяСтраницаРаздел1Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1Нажатие

// КнопкаСледующаяСтраницаРаздел2Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел2Нажатие

// КнопкаПредыдущаяСтраницаРаздел1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1Нажатие

// КнопкаПредыдущаяСтраницаРаздел2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2Нажатие

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// Обработчик нажатия на кнопку "Регистрация транспортных средств".
// Открывает форму списка регистра сведений "Регистрация транспортных средств".
//
Процедура КнопкаРегистрацияТранспортныхСредствНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияТранспортныхСредств.ПолучитьФормуСписка();
	Форма.Организация = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	Форма.РегистрСведенийСписок.Отбор.Организация.Значение      = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.Использование = Истина;	
	Форма.Открыть();
	
КонецПроцедуры // КнопкаРегистрацияТранспортныхСредствНажатие() 

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
	ИДКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" Тогда
	
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		
		КнопкаСтавки = КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
												"РегистрацияТранспортныхСредств",
												ТипКнопкиКоманднойПанели.Действие,
												"Регистрация транспортных средств",
												Новый Действие("КнопкаРегистрацияТранспортныхСредствНажатие"));
												
		КнопкаСтавки.Подсказка = "Открыть журнал регистрации транспортных средств";
								 
		КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
								 Новый УникальныйИдентификатор,
								  ТипКнопкиКоманднойПанели.Разделитель);
								  
	КонецЕсли;
		
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

    СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// КнопкаДобавитьДопСтраницуНажатие
// единая процедура добавить страницу в раздел 
//
Процедура КнопкаДобавитьДопСтрокиРаздел2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтраницуНажатие

// Процедура КнопкаУдалитьДопСтрокиРаздел4Нажатие(Элемент)
// единая кнопка на всех разделах УдалитьДопСтраницуНажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	// После удаления строки необходимо пересчитать раздел 1 по данному коду ОКАТО.
	Расчет("Раздел2");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4Нажатие

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыЛьгот" Тогда
					НовСтрока = мКодыЛьгот.Добавить();
				ИначеЕсли РазделВМакете = "ВидыТранспортныхСредств" Тогда
					НовСтрока = мВидыТранспортныхСредств.Добавить();
				ИначеЕсли РазделВМакете = "КодыОКЕИ" Тогда
					НовСтрока = мКодыОКЕИ.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьПоказателиИзМакета

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// СпециальногоУдаленияСтроки
// Процедура предназначена для удаления строки с сохранением правой части табличного документа.
// Параметры:
//  ТекТабличноеПоле - поле табл. документа, где необходимо удалить доп. строку
//  ИмяГруппы        - имя группы доп. строк.
//  НомерВерхЯчейкиОбласти - номер верхней ячейки области.
//  НомерНижнЯчейкиОбласти - номер нижней ячейки области.
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхСтраница  = ТекТабличноеПоле.Области.Страница.Верх;
	Ч1ЛевоСтраница  = ТекТабличноеПоле.Области.Страница.Лево;
	Ч1НизСтраница   = ТекТабличноеПоле.Области.Страница.Низ;
	Ч1ПравоСтраница = ТекТабличноеПоле.Области.Страница.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Верх;
	Ч1ЛевоНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Лево;
	Ч1НизНазваниеКНД   = ТекТабличноеПоле.Области.НазваниеКНД.Низ;
	Ч1ПравоНазваниеКНД = ТекТабличноеПоле.Области.НазваниеКНД.Право;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	НазваниеМногострочнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НазваниеМногострочнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		Если ТекТабличноеПоле.Области.Найти(ФормаКНД) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		КонецЕсли;

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхНазваниеКНД, Ч1ЛевоНазваниеКНД, Ч1НизНазваниеКНД, Ч1ПравоНазваниеКНД);
		СледующаяЧасть.Имя = ФормаКНД;
		СледующаяЧасть.Объединить();
		СледующаяЧасть.Текст = " Форма по КНД 1152004";
		СледующаяЧасть.ОриентацияТекста = 270;
		СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.Раздел.Шрифт);

	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

			Если ТекТабличноеПоле.Области.Найти(Страница) <> Неопределено Тогда
				ТекТабличноеПоле.Области[Страница].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхСтраница, Ч1ЛевоСтраница, Ч1НизСтраница, Ч1ПравоСтраница);
			СледующаяЧасть.Имя = Страница;
			СледующаяЧасть.Объединить();
			СледующаяЧасть.Текст = "Стр.";
			СледующаяЧасть.ОриентацияТекста = 270;
			СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.КПП.Шрифт);

		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	//Предупреждение("Ок3");
	// КонецСпециального режима удаления

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,57,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	// Восстановим координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области["ПравоеПрисоединение"].Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		Если ТекТабличноеПоле.Области.Найти(НазваниеМногострочнаяЧасть) <> Неопределено Тогда
			ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(21, , 53,);
			МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;
		КонецЕсли;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(21, 50, 23, 50);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	// сохраним имеющиеся настройки правой присоединяющейся части (((

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока !!! Ппустая строка без доп. строк или складывать необходимо.
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		Область.Объединить();
		Область.Имя = ФормаКНД;
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			ТекТабличноеПоле.Области[Страница].Имя = "";
			Область.Объединить();
			Область.Имя = Страница;
		КонецЕсли;

	КонецЕсли;

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,57,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ПравПрисоед = "ПравоеПрисоединение" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	//Восстановим
	Если ТекТабличноеПоле.Области.Найти(ПравПрисоед) <> Неопределено Тогда
		ТекТабличноеПоле.Области[ПравПрисоед].Имя = "";
	КонецЕсли;

	СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
	СледующаяЧасть.Имя = ПравПрисоед;

КонецПроцедуры // СпециальногоДобавленияСтроки

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(Группа = Неопределено)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	Если Группа = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Иначе
		ИмяГруппы = Группа;
	КонецЕсли;

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если КолСтрок < 11 Тогда
		СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе

		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КонецЕсли;

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		Если ИмяКолонки = "П000020002015" Тогда
			Продолжить;
		КонецЕсли;

		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	// МаксимальноеКоличествоСтрокГруппы

	Если НомераСтрокиНоваяОбласть.СодержитЗначение = Истина Тогда
		НомераСтрокиНоваяОбласть.Значение = Формат(НовыйПорядковыйНомер, "ЧГ=0");
	Иначе
		НомераСтрокиНоваяОбласть.Текст = Формат(НовыйПорядковыйНомер, "ЧГ=0");
	КонецЕсли;
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	Если Группа = Неопределено Тогда

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		Если НомУдаляемойСтроки > 14 Тогда
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		Иначе
			СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					Если Колонка.Имя = "П000020002015" Тогда
						Продолжить;
					КонецЕсли;

					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат((НСтр - 1), "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				Если КолонкаТаблицы.Имя = "П000020002015" Тогда
					Продолжить;
				КонецЕсли;

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			Если ИмяКолонки = "П000020002015" Тогда
				// Очистим значение расшифровки.
				//ТекСтрокаТаблицы[ИмяКолонки] = Неопределено;
				Продолжить;
			КонецЕсли;

			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ФормироватьСтруктуруСтраницОтчета
//
Процедура ФормироватьСтруктуруСтраницОтчета()

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Стр.Ключ = "ОКАТОРаздел2" Тогда
				Продолжить;
			Иначе
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел2", мСтруктураПеременных.ОКАТОРаздел2);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

////////////////////////////////////////////////////////////////////////////////
//                                                             

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если (Найти(ОбластьИмя, "R") > 0) Или (Найти(ОбластьИмя, "C") > 0) Или (Найти(ОбластьИмя, "НомСтр") > 0) Тогда
		Возврат;
	КонецЕсли;

	Если Страница = "Раздел2" Тогда

		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

		НомерСтроки = Сред(ОбластьИмя, 15);

		Колонка = Сред(ОбластьИмя, 1, 13);

		// Обновим значение в таблице блока.
		СтруктураГруппы1[Число(НомерСтроки) - 1][Колонка] = Элемент.ТекущаяОбласть.Значение;

		Если (Колонка = "П000020002006")
		 Или (Колонка = "П000020002009")
		 Или (Колонка = "П000020002010")
		 Или (Колонка = "П000020002013") Тогда
			Расчет("Раздел2", НомерСтроки);
		КонецЕсли;

		Если (Число(НомерСтроки) >= 11) И ((Найти(ОбластьИмя, "П000020002010_") > 0) Или (Найти(ОбластьИмя, "П000020002013_") > 0)) Тогда
			СледующаяСтрокаНайдена = мРаздел2.Области.Найти("П000020002001_" + Формат(Число(НомерСтроки) + 1, "ЧГ=0"));
			Если СледующаяСтрокаНайдена = Неопределено Тогда
				ПредложитьДобавитьДополнительнуюСтроку();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Модифицированность = Истина;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	Если ОбластьИмя = "П000020002014_4" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_5", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000020002014_5" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_6", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000020002014_6" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_7", ОбластьИмя);
	КонецЕсли;

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		Если ОбластьИмя = "П000020002013_4" Тогда
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_5", ОбластьИмя);
		ИначеЕсли ОбластьИмя = "П000020002013_5" Тогда
			мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_6", ОбластьИмя);
		//ИначеЕсли ОбластьИмя = "П000020002014_6" Тогда
		//	мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020002002_7", ОбластьИмя);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	// Строка 010.
	Если Найти(Ячейка,"КБК") > 0 Тогда
		ПервоначальноеЗначение = мСтруктураПеременных.КБКРаздел1;
		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КБК", ПервоначальноеЗначение, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", мКодыБюджетнойКлассификации2005, Неопределено, СтандартнаяОбработка, 20);
		Если Рез.ЗначениеВведено Тогда
			ОбновитьПеременныеМодуля("КБКРаздел1", Рез.Значение);
		КонецЕсли;

	// Строка 020.
	ИначеЕсли Найти(Ячейка, "ОКАТО") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение1 = мСтруктураПеременных.ОКАТОРаздел1;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "ОКАТО", ПервоначальноеЗначение1, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Результат.ЗначениеВведено Тогда
			// Возвратим начальное значение, которое было на листе.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, ПервоначальноеЗначение1);
			// Вновь введенное значение кода ОКАТО.
			ПервоначальноеЗначение = Результат.Значение;

			НайденДубликат = Ложь;
			Если (НЕ ФлажокОтклАвтоРасчет) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ПервоначальноеЗначение)) Тогда
				Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл

					Если Стр.Данные = Неопределено Тогда
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
					КонецЕсли;

					Если Стр.АктивнаяСтраница Тогда
						Продолжить;
					КонецЕсли;

					Если Стр.Данные.ОКАТОРаздел1 = ПервоначальноеЗначение Тогда
						Сообщить("В разделе 1 лист с кодом ОКАТО " + ПервоначальноеЗначение + " уже введен.", СтатусСообщения.Внимание);
						НайденДубликат = Истина;
						Прервать;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			Если НайденДубликат Тогда
				Модифицированность = Ложь;
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("ОКАТОРаздел1", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКАТО", 11, ПервоначальноеЗначение);
				// Соберем сумму из раздела 2 по требуемому ОКАТО.
				Расчет("Раздел1");
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	// Строка 030.
	ИначеЕсли Найти(Ячейка, "Сумма1_") > 0 Тогда

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "Сумма1_", мСтруктураПеременных.Сумма30Раздел1, 17, 2, Истина, "Исчисленная сумма налога, подлежащая уплате в бюджет", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтруктураПеременных.Вставить("Сумма30Раздел1", Результат.Значение);
		КонецЕсли;

	// Строка 040.
	ИначеЕсли Найти(Ячейка, "Сумма40_") > 0 Тогда

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "Сумма40_", мСтруктураПеременных.Сумма40Раздел1, 17, 2, Истина, "Сумма авансовых платежей", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтруктураПеременных.Вставить("Сумма40Раздел1", Результат.Значение);
			Расчет("Раздел1");
		КонецЕсли;

	// Строка 050.
	ИначеЕсли Найти(Ячейка, "Сумма50_") > 0 Тогда

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "Сумма50_", мСтруктураПеременных.Сумма50Раздел1, 17, 2, Истина, "Сумма налога, подлежащая уплате в бюджет", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтруктураПеременных.Вставить("Сумма50Раздел1", Результат.Значение);
		КонецЕсли;

	// Строка 060.
	ИначеЕсли Найти(Ячейка, "Сумма60_") > 0 Тогда

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "Сумма60_", мСтруктураПеременных.Сумма60Раздел1, 17, 2, Истина, "Сумма налога к уменьшению", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСтруктураПеременных.Вставить("Сумма60Раздел1", Результат.Значение);
		КонецЕсли;
	Конецесли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010. ОКАТО.
	Если Найти(ОбластьИмя, "ОКАТОРаздел2_") > 0 Тогда
		ПервоначальноеЗначение1 = мСтруктураПеременных.ОКАТОРаздел2;
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "ОКАТОРаздел2_", ПервоначальноеЗначение1, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Результат.ЗначениеВведено Тогда

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ОКАТОРаздел2_", 11, ПервоначальноеЗначение1);
			ПервоначальноеЗначение = Результат.Значение;

			НайденДубликат = Ложь;

			Если (НЕ ФлажокОтклАвтоРасчет) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ПервоначальноеЗначение)) Тогда
				Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл

					Если Стр.Данные = Неопределено Тогда
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
					КонецЕсли;

					Если Стр.АктивнаяСтраница Тогда
						Продолжить;
					КонецЕсли;

					Если Стр.Данные.ОКАТОРаздел2 = ПервоначальноеЗначение Тогда
						Сообщить("В разделе 2 лист с кодом ОКАТО " + ПервоначальноеЗначение + " уже введен.", СтатусСообщения.Внимание);
						НайденДубликат = Истина;
						Прервать;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			Если НайденДубликат Тогда
				Модифицированность = Ложь;
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("ОКАТОРаздел2", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ОКАТОРаздел2_", 11, ПервоначальноеЗначение);

				// Сохраним ОКАТО в структуре данных активного раздела 2.
				ТаблицаМногостраничногоДокумента = Неопределено;
				мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаМногостраничногоДокумента);
				АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
				Если АктивнаяСтраница.Данные = Неопределено Тогда
					РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
				КонецЕсли;

				Для Инд = 1 По 11 Цикл
					АктивнаяСтраница.Данные.Вставить("ОКАТОРаздел2_" + Строка(Инд), Сред(ПервоначальноеЗначение, Инд, 1));
				КонецЦикла;
				АктивнаяСтраница.Данные.Вставить("ОКАТОРаздел2", ПервоначальноеЗначение);

				Если НЕ ФлажокОтклАвтоРасчет Тогда
					// В случае, если ввели код ОКАТО пустой, а до него был ОКАТО заполненный (очистили на странице), тогда
					// следует очистить (удалить) соответствующий экземпляр раздела 1.
					Если (ПустаяСтрока(ПервоначальноеЗначение)) И (НЕ ПустаяСтрока(ПервоначальноеЗначение1)) Тогда
						УдалитьСвязанныйРаздел1ПоКодуОКАТО(ПервоначальноеЗначение1);
					КонецЕсли;
				КонецЕсли;

				Расчет("Раздел2");
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	// Графа 2. Код вида ТС.
	ИначеЕсли Найти(Область.Имя, "П000020002002") > 0 Тогда
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;
		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 5);
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", Область.Имя, ПервоначальноеЗначение, 5, 0, Ложь, "Код вида транспортного средства", "Код вида транспортного средства", мВидыТранспортныхСредств, , СтандартнаяОбработка,,,СтруктураКонтроля);
	// Графа 7. Код ОКЕИ
	ИначеЕсли Найти(ОбластьИмя, "П000020002007") > 0 Тогда
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;
		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 3);
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", Область.Имя, ПервоначальноеЗначение, 3, 0, Ложь, "Ед. измерения налоговой базы по ОКЕИ", "Ед. измерения налоговой базы по ОКЕИ", мКодыОКЕИ, , СтандартнаяОбработка,,,СтруктураКонтроля);
	// Графа 12. Налоговая льгота.
	ИначеЕсли Найти(Область.Имя, "П000020002012") > 0 Тогда
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;
		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 5);
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", Область.Имя, ПервоначальноеЗначение, 5, 0, Ложь, "Код налоговой льготы", "Код налоговой льготы", мКодыЛьгот, , СтандартнаяОбработка,,,СтруктураКонтроля);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (Найти(ОбластьИмя, "КодИМНС") > 0) Или (Найти(ОбластьИмя, "ОргИМНС") > 0) Тогда
		РегламентированнаяОтчетность.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный");
		ПроставитьСведенияОПредставителеОрганизации();
		// Проставим/или очистим дату в разделах, от Представителя
		ЗаполнитьДатуВЯчейках();
	ИначеЕсли Найти(ОбластьИмя, "ОКВЭД") > 0 Тогда
		РегламентированнаяОтчетность.УстановитьКодОКВЭДНаТитульномЛисте(ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	Перем ТаблицаМногостраничногоДокумента;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетАвансыТранспорт");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -3)));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -3)));
	

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	Если НЕ ПустаяСтрока(КодИФНС) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	НайденныеАвансовыеРасчеты = Запрос.Выполнить().Выгрузить();
	Если НайденныеАвансовыеРасчеты.Количество() = 0 Тогда
		Сообщить("Не найдены авансовые расчеты по транспортному налогу за 3 квартал по заданной организации и коду ИФНС.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	Если НайденныеАвансовыеРасчеты.Количество() > 1 Тогда
		НайденныеАвансовыеРасчеты.Колонки.Добавить("Представление",,"Авансовые расчеты", 100);
		Для каждого Отчет Из НайденныеАвансовыеРасчеты Цикл
			Отчет.Представление = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Отчет.Ссылка);
		КонецЦикла;
		НайденныеРасчеты = НайденныеАвансовыеРасчеты.Скопировать();
		НайденныеРасчеты.Колонки.Удалить("Ссылка");
		ВыбранныйАвансовыйРасчет = НайденныеРасчеты.ВыбратьСтроку("Выбор авансового расчета");
		Если ВыбранныйАвансовыйРасчет = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АвансовыйРасчет = НайденныеАвансовыеРасчеты[(НайденныеРасчеты.Индекс(ВыбранныйАвансовыйРасчет))].Получить(0);
	Иначе
		АвансовыйРасчет = НайденныеАвансовыеРасчеты[0].Получить(0);
	КонецЕсли;
	Состояние("Импорт данных из авансового расчета ...");
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

	// Добавим код КБК в раздел 1.
	Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210604011021000110") Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210604011021000110");
	КонецЕсли;

	СтруктураДанных = АвансовыйРасчет.ДанныеОтчета.Получить();
	ТаблицаРаздела2АвансовогоОтчета = СтруктураДанных.ДанныеМногостраничныхРазделов.Раздел2.Скопировать();
	// Очистим колонку 13 "Сумма льготы".
	ПервыйПроход = Истина;
	Для каждого Зап Из ТаблицаРаздела2АвансовогоОтчета Цикл
		Если НЕ ПервыйПроход Тогда
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
		КонецЕсли;
		ПервыйПроход = Ложь;
		СчетчикСтрок = 1;
		СчетчикСтрокСтр = "_" + Формат(СчетчикСтрок, "ЧГ=0");
		НазваниеПоказателя = "П000020002013" + СчетчикСтрокСтр;
		Пока Зап.Данные.Свойство(НазваниеПоказателя) Цикл
			Зап.Данные["П000020002009" + СчетчикСтрокСтр] = 0;  // Обнулим 9-ю колонку.
			Зап.Данные[НазваниеПоказателя] = 0;                 // Обнулим 13-ю колонку.
			СчетчикСтрок = СчетчикСтрок + 1;
			СчетчикСтрокСтр = "_" + Формат(СчетчикСтрок, "ЧГ=0");
			НазваниеПоказателя = "П000020002013" + СчетчикСтрокСтр;
		КонецЦикла;
	КонецЦикла;

	// Подменяем таблицу раздела декларации на таблицу раздела авансового отчета.
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаРаздела2АвансовогоОтчета);

	АктивнаяСтраница = ТаблицаРаздела2АвансовогоОтчета.Найти(Истина, "АктивнаяСтраница");
	ИндАктивнаяСтраница = ТаблицаРаздела2АвансовогоОтчета.Индекс(АктивнаяСтраница);
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, "Раздел2",,1);

	Для Инд = 0 По мСтруктураМногостраничныхРазделов.Раздел2.Количество() - 1 Цикл
		ПоказатьСтраницуМногостраничногоРаздела(Инд, "Раздел2", Истина);
		Расчет("Раздел2");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
	КонецЦикла;
	// Найдем активную страницу в авансовом расчете и сделаем её активной в декларации.
	ПоказатьСтраницуМногостраничногоРаздела(ИндАктивнаяСтраница, "Раздел2", Истина);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	Сообщить("Импорт данных из авансового отчета завершен успешно.", СтатусСообщения.Обычное);
	Сообщить("Колонки 9 и 13 в разделе 2 обнулены, при необходимости, нужно указать новые значения.", СтатусСообщения.Обычное);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML2007");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Если РабочаяДата >= '20081001' Тогда
		Возврат "NO_TRAND"
				+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	Иначе
		Возврат "NO_TRAND"
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ОКВЭД = СокрЛП(Титульный.ОКВЭД1 + Титульный.ОКВЭД2) + "." + СокрЛП(Титульный.ОКВЭД3 + Титульный.ОКВЭД4) + "." + СокрЛП(Титульный.ОКВЭД5 + Титульный.ОКВЭД6);
	ОКВЭД = СтрЗаменить(СокрЛП(СтрЗаменить(ОКВЭД, ".", " ")), " ", ".");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ИдДок",			Строка(Новый УникальныйИдентификатор));
	Параметры.Вставить("НаимОрг",		?(ПустаяСтрока(Титульный.ИноОргНазв), СокрЛП(Титульный.ОргНазв), СокрЛП(Титульный.ИноОргНазв)));
	Параметры.Вставить("ИННОрг",		СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	Параметры.Вставить("ОКВЭДОрг",		ОКВЭД);
	Параметры.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("КНД",			"1152004");
	Параметры.Вставить("ВидДок",		Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ГодПериодОтч",	Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",	ФИОРук.Фамилия);
	Параметры.Вставить("ИмяРук",		ФИОРук.Имя);
	Параметры.Вставить("ОтчествоРук",	ФИОРук.Отчество);
	
	ФИОПред = РазложитьФИО(Титульный.ОргУп);
	Параметры.Вставить("ФамилияПред",	ФИОПред.Фамилия);
	Параметры.Вставить("ИмяПред",		ФИОПред.Имя);
	Параметры.Вставить("ОтчествоПред",	ФИОПред.Отчество);
	Параметры.Вставить("ДокПред",		СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РазложитьФИО(Титульный.ОргНазв);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух, ТелБух");
	Если Параметры.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		Параметры.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		Параметры.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОИП.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		Параметры.Вставить("ТелОтв",        ?(Параметры.Свойство("ТелОрг"), Параметры.ТелОрг, ""));
	Иначе
		ФИОБух = РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		Параметры.Вставить("ДолжОтв",		"Главный бухгалтер");
		Параметры.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОБух.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		Параметры.Вставить("ТелОтв",        СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	// параметры, специфичные для текущего отчета
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.ФамилияОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияПред) И ПустаяСтрока(Параметры.ИмяПред) Тогда
		Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия руководителя!", "Титульный", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяРук) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя руководителя!", "Титульный", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Параметры.ФамилияПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия представителя!", "Титульный", "ОргУп");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя представителя!", "Титульный", "ОргУп");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ДокПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Если ПустаяСтрока(Титульный.ОргНазв) И ПустаяСтрока(Титульный.ИноОргНазв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.КодИМНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.ОКВЭД1) И ПустаяСтрока(Титульный.ОКВЭД2) И ПустаяСтрока(Титульный.ОКВЭД3)
	И ПустаяСтрока(Титульный.ОКВЭД4) И ПустаяСтрока(Титульный.ОКВЭД5) И ПустаяСтрока(Титульный.ОКВЭД6) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		ИндексЛиста = Раздел1.Индекс(Лист) + 1;
		
		ДлинаКБК = СтрДлина(ДанныеЛиста.КБКРаздел1);
		Если ДлинаКБК <> 20 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаКБК = 0, "", " верно") + " задан КБК!", "Раздел1", "КБК1", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаОКАТО = СтрДлина(ДанныеЛиста.ОКАТОРаздел1);
		Если ДлинаОКАТО <> 11 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаОКАТО = 0, "", " верно") + " задан ОКАТО!", "Раздел1", "ОКАТО1", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Лист2 Из Раздел2 Цикл
		ДанныеЛиста2 = Лист2.Данные;
		НомерЛиста = Раздел2.Индекс(Лист2) + 1;
		
		НомСтр = 1;
		_НомСтр = Формат(НомСтр, "ЧГ=");
		Пока ДанныеЛиста2.Свойство("П000020002002_" + _НомСтр)
			И	(ЗначениеЗаполнено(ДанныеЛиста2["П000020002002_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002003_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002004_" + _НомСтр])		ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002005_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002006_" + _НомСтр])		ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002007_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002008_" + _НомСтр])		ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002009_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002010_" + _НомСтр])		ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002011_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002012_" + _НомСтр])		ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002013_" + _НомСтр])
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002014_" + _НомСтр]))	Цикл
					
			КодВидаТС	=	СокрЛП(ДанныеЛиста2["П000020002002_" + _НомСтр]);
			РегЗнакТС	=	СокрЛП(ДанныеЛиста2["П000020002005_" + _НомСтр]);
			ОКЕИНалБаза	=	СокрЛП(ДанныеЛиста2["П000020002007_" + _НомСтр]);
			КодНалЛьг	=	СокрЛП(ДанныеЛиста2["П000020002012_" + _НомСтр]);
						
			ДлинаКодаВидаТС = СтрДлина(КодВидаТС);
			Если ДлинаКодаВидаТС <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомСтр + " страницы " + НомерЛиста + " раздела 2 не" + ?(ДлинаКодаВидаТС = 0, "", "верно") + " задан код вида транспортного средства!", "Раздел2", "П000020002002_" + _НомСтр, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СтрДлина(РегЗнакТС) = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомСтр + " страницы " + НомерЛиста + " раздела 2 не задан регистрационный знак транспортного средства!", "Раздел2", "П000020002005_" + _НомСтр, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаОКЕИНалБаза = СтрДлина(ОКЕИНалБаза);
			Если ДлинаОКЕИНалБаза = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомСтр + " страницы " + НомерЛиста + " раздела 2 не" + ?(ДлинаОКЕИНалБаза = 0, "", "верно") + " задана единица измерения налоговой базы по ОКЕИ!", "Раздел2", "П000020002007_" + _НомСтр, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКодаНалЛьг = СтрДлина(КодНалЛьг);
			Если ДлинаКодаНалЛьг <> 0 И ДлинаКодаНалЛьг <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомСтр + " страницы " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы!", "Раздел2", "П000020002012_" + _НомСтр, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомСтр = НомСтр + 1;
			_НомСтр = Формат(НомСтр, "ЧГ=");
					
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	СумНалУпл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалУпл");
	
	Для Инд = 1 По Раздел1.Количество() Цикл
		Если Инд <> 1 Тогда
			СкопироватьУзел(УзелРодитель, СумНалУпл);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Лист Из Раздел1 Цикл
		
		ИндексЛиста = Раздел1.Индекс(Лист);
		ДанныеЛиста = Лист.Данные;
		ТекСтр1 = УзелРодитель.Строки[ИндексЛиста];
		
		ЗадатьЗначениеЭлемента(ТекСтр1, "КБК", ДанныеЛиста.КБКРаздел1);
		ЗадатьЗначениеЭлемента(ТекСтр1, "ОКАТО", ДанныеЛиста.ОКАТОРаздел1);
		ЗадатьЗначениеЭлемента(ТекСтр1, "Исчислено", ДанныеЛиста.Сумма30Раздел1);
		ЗадатьЗначениеЭлемента(ТекСтр1, "СумУплАв", ДанныеЛиста.Сумма40Раздел1);
		ЗадатьЗначениеЭлемента(ТекСтр1, "СумУплНал", ?(ДанныеЛиста.Сумма50Раздел1 < 0, 0, ДанныеЛиста.Сумма50Раздел1));
		ЗадатьЗначениеЭлемента(ТекСтр1, "СумУмен", ?(ДанныеЛиста.Сумма60Раздел1 < 0, 0, ДанныеЛиста.Сумма60Раздел1));
		
		УзелСтрокаРаздела2 = ПолучитьПодчиненныйЭлемент(ТекСтр1, "РасчНалТС");
		
		Для Каждого Лист2 Из Раздел2 Цикл
			
			ДанныеЛиста2 = Лист2.Данные;
			Если СокрЛП(ДанныеЛиста.ОКАТОРаздел1) = СокрЛП(ДанныеЛиста2.ОКАТОРаздел2) Тогда
				
				КоличествоСтрок = 0;
				Пока ДанныеЛиста2.Свойство("П000020002002_" + Формат(КоличествоСтрок + 1, "ЧГ=")) Цикл
					КоличествоСтрок = КоличествоСтрок + 1;
				КонецЦикла;
				
				МассивРасчНалТС = Новый Массив;
				МассивРасчНалТС.Добавить(ПолучитьПодчиненныйЭлемент(ТекСтр1, "РасчНалТС"));
				Для НомСтр = 1 По КоличествоСтрок Цикл
					Если НомСтр <> 1 Тогда
						МассивРасчНалТС.Добавить(СкопироватьУзел(ТекСтр1, УзелСтрокаРаздела2));
					КонецЕсли;
				КонецЦикла;
				
				Для НомСтр = 1 По МассивРасчНалТС.Количество() Цикл
					_НомСтр = Формат(НомСтр, "ЧГ=");
					ТекУзел = МассивРасчНалТС[НомСтр - 1];
					
					Если (ЗначениеЗаполнено(ДанныеЛиста2["П000020002002_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002003_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002004_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002005_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002006_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002007_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002008_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002009_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002010_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002011_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002012_" + _НомСтр])	ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002013_" + _НомСтр])
					ИЛИ ЗначениеЗаполнено(ДанныеЛиста2["П000020002014_" + _НомСтр]))	Тогда
					
						ЗадатьЗначениеЭлемента(ТекУзел, "КодВидТС",		ДанныеЛиста2["П000020002002_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "ИдНомТС",		ДанныеЛиста2["П000020002003_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "МаркаТС",		ДанныеЛиста2["П000020002004_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "РегЗнакТС",	ДанныеЛиста2["П000020002005_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "НалБаза",		ДанныеЛиста2["П000020002006_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "ОКЕИНалБаза",	ДанныеЛиста2["П000020002007_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "СрокИспольз",	ДанныеЛиста2["П000020002008_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "Коэф3623",		ДанныеЛиста2["П000020002009_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "НалСтавка",	ДанныеЛиста2["П000020002010_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "СумИсчисл",	ДанныеЛиста2["П000020002011_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "КодНалЛьг",	ДанныеЛиста2["П000020002012_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "СумНалЛьг",	ДанныеЛиста2["П000020002013_" + _НомСтр]);
						ЗадатьЗначениеЭлемента(ТекУзел, "СумИсчислУпл",	ДанныеЛиста2["П000020002014_" + _НомСтр]);
						
					Иначе
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Инд = 1 По КоличествоСтрок Цикл
					ТекИнд = КоличествоСтрок - Инд;
					ТекУзел = ТекСтр1.Строки[ТекИнд];
					Если ТекУзел.Код <> "РасчНалТС" Тогда
						Продолжить;
					КонецЕсли;
					ЕстьЗаполненныйЭлемент = Ложь;
					Для Каждого Стр Из ТекУзел.Строки Цикл
						Если ЗначениеЗаполнено(Стр.Значение) Тогда
							ЕстьЗаполненныйЭлемент = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьЗаполненныйЭлемент Тогда
						ТекСтр1.Строки.Удалить(ТекУзел);
					КонецЕсли;
				КонецЦикла;
				
				Прервать; // если лист с кодом ОКАТО из первого раздела найден, то прервем перебор по листам первого раздела
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если (Найти(Стр.Обязательность, "Н") <> 0 ИЛИ Найти(Стр.Обязательность, "H") <> 0) И УзелПуст(Стр) Тогда // учтем оба варианта: кириллицу и латиницу
			Узел.Строки.Удалить(Стр);
		Иначе
			ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = "СодПерСвед" Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = "СодПерСвед" Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_TRAND_1_054_00_04_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мСоставПоказателей = "СоставПоказателей2007Кв1";

мИдГруппы1  = "П0000200020";
КолИсхСтрокИдГруппы1 = 11;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКодыЛьгот = Новый ТаблицаЗначений;
мКодыЛьгот.Колонки.Добавить("Код",,,6);
мКодыЛьгот.Колонки.Добавить("Название",,,70);

мВидыТранспортныхСредств = Новый ТаблицаЗначений;
мВидыТранспортныхСредств.Колонки.Добавить("Код",,,6);
мВидыТранспортныхСредств.Колонки.Добавить("Название",,,70);

мКодыОКЕИ = Новый ТаблицаЗначений;
мКодыОКЕИ.Колонки.Добавить("Код",,,5);
мКодыОКЕИ.Колонки.Добавить("Название",,,70);

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 50);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000020002001", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4)); // Номер
СтруктураГруппы1.Колонки.Добавить("П000020002002", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5)); // Код вида ТС
СтруктураГруппы1.Колонки.Добавить("П000020002003", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(25)); // Идентификационный номер ТС
СтруктураГруппы1.Колонки.Добавить("П000020002004", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120)); // Марка ТС
СтруктураГруппы1.Колонки.Добавить("П000020002005", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30)); // Рег. знак ТС.
СтруктураГруппы1.Колонки.Добавить("П000020002006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2)); // Налоговая база
СтруктураГруппы1.Колонки.Добавить("П000020002007", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)); // Единица измерения нал. базы по ОКЕИ (название)
СтруктураГруппы1.Колонки.Добавить("П000020002008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3, 0)); // Срок использования (полных лет)
СтруктураГруппы1.Колонки.Добавить("П000020002009", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3, 2)); // Коэффициент определяемый...
СтруктураГруппы1.Колонки.Добавить("П000020002010", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(8, 2)); // Ставка налога
СтруктураГруппы1.Колонки.Добавить("П000020002011", мОписаниеТиповЧислоЕ); // Исчисленная сумма авансового платежа (руб.)
СтруктураГруппы1.Колонки.Добавить("П000020002012", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5)); // Код налоговой льготы
СтруктураГруппы1.Колонки.Добавить("П000020002013", мОписаниеТиповЧислоЕ); // Сумма налоговой льготы
СтруктураГруппы1.Колонки.Добавить("П000020002014", мОписаниеТиповЧислоЕ); // Исчисленная сумма авансового платежа

// В колонке 15 храним ссылку на документ учета, для с-мы расшифровки.
СтруктураГруппы1.Колонки.Добавить("П000020002015"); // Колонка для хранения расшифровки.


// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

// Добавим данные первой страницы
СтрПерваяСтраница = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок     = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРаздел1 = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел2 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();

мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздел1);
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздел2);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "20/03/2006"; // Первая версия


// Код отчета, равен КНД
мКодОтчета   = 1152004;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СтруктураXML2007", "Формат 4.01", Истина);
