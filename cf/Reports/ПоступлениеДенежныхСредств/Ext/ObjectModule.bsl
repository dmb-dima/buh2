Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

Перем ПромежуточныеДанные Экспорт;

#Если Клиент Тогда

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	// Проверим заполнение обязательных реквизитов
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	КомпоновщикНастроек.Восстановить();
	НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура;
	ВыборкаДанных = ПолучитьВыборку();
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ВыборкаДанных);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Интервал);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода" , КонецДня(КонецПериода));
	
	ТипДополнения = СтандартныеОтчеты.ПолучитьТипДополненияПоИнтервалу(Интервал);

	Для каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ЭлементГруппировок = ЭлементСтруктуры.Точки;
			Для каждого Группировка Из ЭлементГруппировок Цикл
				СтандартныеОтчеты.УстановитьДополнениеПоляГруппировки(Группировка, ТипДополнения);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметр   = СтандартныеОтчеты.ПолучитьОписаниеСтруктурыПараметра();
	ПромежуточныеДанные = СтандартныеОтчеты.ПолучитьОписаниеТаблицыПромежуточныеДанные();
	
	Выборка = ВыборкаДанных.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПараметр, Выборка);
		СтруктураПараметр.Знак         = "+";
		СтруктураПараметр.Субконто1    = Выборка.ВидПоступления;
		СтандартныеОтчеты.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыборку() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ГДЕ
	|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПоступленияДС.Сумма) КАК Сумма,
	|	ПоступленияДС.Период КАК Период,
	|	ПоступленияДС.КорСчет КАК КорСчет,
	|	ПоступленияДС.Счет КАК Счет,
	|	ПоступленияДС.Приоритет КАК Приоритет,
	|	ПоступленияДС.ВидПоступления КАК ВидПоступления,
	|	ПоступленияДС.БухВидРесурса
	|ИЗ
	|	(ВЫБРАТЬ
	|		10 КАК Приоритет,
	|		""Розничная выручка"" КАК ВидПоступления,
	|		ЕСТЬNULL(РозничнаяВыручка.СуммаОборотДт, 0) КАК Сумма,
	|		РозничнаяВыручка.Период КАК Период,
	|		ВЫБОР
	|			КОГДА РозничнаяВыручка.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями))
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|			КОГДА РозничнаяВыручка.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)
	|		КОНЕЦ КАК КорСчет,
	|		РозничнаяВыручка.Счет КАК Счет,
	|		""Дт"" КАК БухВидРесурса
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаДС),
	|				,
	|				Организация = &Организация,
	|				КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями))
	|					ИЛИ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)),
	|				) КАК РозничнаяВыручка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		90,
	|		ВЫБОР
	|			КОГДА ПрочиеПоступления.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ПрочиеПоступления.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_)
	|				ТОГДА ПрочиеПоступления.КорСчет.Родитель.Наименование
	|			ИНАЧЕ ПрочиеПоступления.КорСчет.Наименование
	|		КОНЕЦ,
	|		ЕСТЬNULL(ПрочиеПоступления.СуммаОборотДт, 0),
	|		ПрочиеПоступления.Период,
	|		ПрочиеПоступления.КорСчет,
	|		ПрочиеПоступления.Счет,
	|		""Дт""
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаДС),
	|				,
	|				Организация = &Организация,
	|				(НЕ КорСчет В
	|							(ВЫБРАТЬ
	|								СчетаКД.Счет
	|							ИЗ
	|								СчетаКД КАК СчетаКД))
	|					И (НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)))
	|					И (НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)))
	|					И (НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	|					И (НЕ КорСчет В ИЕРАРХИИ (&СчетаДС)),
	|				) КАК ПрочиеПоступления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|				ТОГДА 21
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|				ТОГДА 22
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|				ТОГДА 23
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|				ТОГДА 24
	|			ИНАЧЕ 25
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ВложенныйЗапрос.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_)
	|				ТОГДА ВложенныйЗапрос.КорСчет.Родитель.Наименование
	|			ИНАЧЕ ВложенныйЗапрос.КорСчет.Наименование
	|		КОНЕЦ,
	|		ВложенныйЗапрос.Сумма,
	|		ВложенныйЗапрос.Период,
	|		ВложенныйЗапрос.КорСчет,
	|		ВложенныйЗапрос.Счет,
	|		ВложенныйЗапрос.БухВидРесурса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ОплатаОтКонтрагентов.КорСубконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
	|			ОплатаОтКонтрагентов.КорСчет КАК КорСчет,
	|			ЕСТЬNULL(ОплатаОтКонтрагентов.СуммаОборотДт, 0) КАК Сумма,
	|			ОплатаОтКонтрагентов.Период КАК Период,
	|			ОплатаОтКонтрагентов.Счет КАК Счет,
	|			""Дт"" КАК БухВидРесурса
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Месяц,
	|					Счет В ИЕРАРХИИ (&СчетаДС),
	|					,
	|					Организация = &Организация,
	|					КорСчет В
	|						(ВЫБРАТЬ
	|							СчетаКД.Счет
	|						ИЗ
	|							СчетаКД КАК СчетаКД),
	|					&ВидыСубконтоКД) КАК ОплатаОтКонтрагентов) КАК ВложенныйЗапрос) КАК ПоступленияДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступленияДС.КорСчет,
	|	ПоступленияДС.Период,
	|	ПоступленияДС.Счет,
	|	ПоступленияДС.Приоритет,
	|	ПоступленияДС.ВидПоступления,
	|	ПоступленияДС.БухВидРесурса";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);	
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"  , Организация);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
	КонецЕсли;
	ВидыСубконтоКД = Новый Массив;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	СчетаДС = Новый Массив;
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("СчетаДС", СчетаДС);
	Если Интервал = 6 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "День");
	ИначеЕсли Интервал = 7 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Неделя");
	ИначеЕсли Интервал = 8 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Декада");
	ИначеЕсли Интервал = 10 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Квартал");
	ИначеЕсли Интервал = 11 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Полугодие");
	ИначеЕсли Интервал = 12 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Год");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();
	
	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 

	ЗаголовокОтчета = "Поступление денежных средств";

	Возврат СтандартныеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

Процедура УстановитьИнтервал() Экспорт
	
	СтандартныеОтчеты.УстановитьИнтервал(ЭтотОбъект);
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		Сообщить("Не указан период формирования отчета", СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли НачалоПериода > КонецПериода Тогда
		Сообщить("Дата начала периода не может быть больше даты конца периода", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Интервал) Тогда
		Сообщить("Не указан интервал", СтатусСообщения.Важное); 
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода",  КонецПериода);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли