Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент Тогда

Перем Запрос; 

Процедура УстановитьТекстЗапроса(КонДата)
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПоставщикам", Константы.СрокОплатыПоставщикам.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(КонДата));
	Запрос.УстановитьПараметр("ИсключенныеСчета", СтандартныеОтчеты.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ГДЕ
	|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
	|	ВложенныйЗапрос.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|			ИНАЧЕ &СтандартныйСрокОплатыПоставщикам
	|		КОНЕЦ КАК СрокОплаты,
	|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокКт КАК СуммаОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ГраницаОстатков,
	|				Счет В
	|						(ВЫБРАТЬ
	|							СчетаКД.Счет
	|						ИЗ
	|							СчетаКД КАК СчетаКД)
	|					И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|				&ВидыСубконтоКД,
	|				ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом))
	|					И Организация = &Организация) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "И Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаПоОстаткам;
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОстатки = 
	"ВЫБРАТЬ
	|	ОстаткиДолга.Организация,
	|	ОстаткиДолга.Контрагент,
	|	ОстаткиДолга.Договор,
	|	ОстаткиДолга.СрокОплаты,
	|	ОстаткиДолга.ОстатокДолга,
	|	ЕСТЬNULL(Обороты.УвеличениеДолга, 0) КАК УвеличениеДолга
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга";
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ПОМЕСТИТЬ Обороты1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКД.Счет
	|					ИЗ
	|						СчетаКД КАК СчетаКД)
	|				И (НЕ Счет.Забалансовый)
	|				И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация = &Организация,
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация = &Организация", "");
	КонецЕсли;
	
	МаксКоличествоЧастей = 10;
	КоличествоСроковОплаты = МассивСроковОплаты.Количество();
	ОстатокОтДеления = КоличествоСроковОплаты % МаксКоличествоЧастей;
	
	КоличествоЧастей = (КоличествоСроковОплаты - ОстатокОтДеления) / МаксКоличествоЧастей + ?(ОстатокОтДеления > 0, 1, 0);
	ТекстОборотыПоВсемСрокам = "";
	ТекстВсеОбороты = "";
	Для ИндексЧасти = 1 По КоличествоЧастей Цикл
		НачальныйИндекс = МаксКоличествоЧастей * (ИндексЧасти - 1) + 1;
		КонечныйИндекс  = Мин(КоличествоСроковОплаты, МаксКоличествоЧастей * ИндексЧасти);
		ТекстОбороты = "";
		
		Для ИндексЗапроса = НачальныйИндекс По КонечныйИндекс Цикл
			СрокОплаты = МассивСроковОплаты[ИндексЗапроса - 1];
			Запрос.УстановитьПараметр("НачалоИнтервала" + ИндексЗапроса, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
			Запрос.УстановитьПараметр("СрокОплаты" + ИндексЗапроса, СрокОплаты);
			
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + ИндексЗапроса);
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + ИндексЗапроса);
			Если ИндексЗапроса = НачальныйИндекс Тогда
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "ПОМЕСТИТЬ Обороты" + ИндексЧасти);
			Иначе
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "");
			КонецЕсли;
			
			ТекстОбороты = ТекстОбороты
			+ ?(ПустаяСтрока(ТекстОбороты), "", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") 
			+ ТекстОборотыПоСрокуНом;
			
		КонецЦикла;
		
		ТекстВсеОбороты = ТекстВсеОбороты + ТекстОбороты + " 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") 
		+ "
		|ВЫБРАТЬ 
		|	Обороты" + ИндексЧасти + ".Организация,
		|	Обороты" + ИндексЧасти + ".Контрагент,
		|	Обороты" + ИндексЧасти + ".Договор,
		|	Обороты" + ИндексЧасти + ".УвеличениеДолга
		|ИЗ
		|	Обороты" + ИндексЧасти + " КАК Обороты" + ИндексЧасти;
	КонецЦикла;
	
	ТекстОстаткиИОбороты = ТекстОстатки + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
	|	ПО ОстаткиДолга.Организация = Обороты.Организация
	|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
	|		И ОстаткиДолга.Договор = Обороты.Договор";
	
	ТекстПросрочено =
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ КАК Просрочено
	|ИЗ
	|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстВсеОбороты + ТекстПросрочено;
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	КомпоновщикНастроек.Восстановить();
	НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Ложь, НастройкаКомпоновкиДанных);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	// Данные для компоновщика получаем запросом и передаем в СКД результат запроса
	Запрос = Новый Запрос;
	
	УстановитьТекстЗапроса(Период);
	
	ПросроченнаяЗадолженность1 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(Дата2);
	
	ПросроченнаяЗадолженность2 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(Дата3);
	
	ПросроченнаяЗадолженность3 = Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность1", ПросроченнаяЗадолженность1);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность2", ПросроченнаяЗадолженность2);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность3", ПросроченнаяЗадолженность3);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПросроченнаяЗадолженность1.Организация,
	|	ПросроченнаяЗадолженность1.Контрагент,
	|	ПросроченнаяЗадолженность1.Договор,
	|	ПросроченнаяЗадолженность1.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность1
	|ИЗ
	|	&ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность2.Организация,
	|	ПросроченнаяЗадолженность2.Контрагент,
	|	ПросроченнаяЗадолженность2.Договор,
	|	ПросроченнаяЗадолженность2.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность2
	|ИЗ
	|	&ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность3.Организация,
	|	ПросроченнаяЗадолженность3.Контрагент,
	|	ПросроченнаяЗадолженность3.Договор,
	|	ПросроченнаяЗадолженность3.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность3
	|ИЗ
	|	&ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено) КАК Просрочено,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено2) КАК Просрочено2,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено3) КАК Просрочено3
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПросроченнаяЗадолженность1.Организация КАК Организация,
	|		ПросроченнаяЗадолженность1.Контрагент КАК Контрагент,
	|		ПросроченнаяЗадолженность1.Договор КАК Договор,
	|		ПросроченнаяЗадолженность1.Просрочено КАК Просрочено,
	|		0 КАК Просрочено2,
	|		0 КАК Просрочено3
	|	ИЗ
	|		ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность2.Организация,
	|		ПросроченнаяЗадолженность2.Контрагент,
	|		ПросроченнаяЗадолженность2.Договор,
	|		0,
	|		ПросроченнаяЗадолженность2.Просрочено,
	|		0
	|	ИЗ
	|		ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность3.Организация,
	|		ПросроченнаяЗадолженность3.Контрагент,
	|		ПросроченнаяЗадолженность3.Договор,
	|		0,
	|		0,
	|		ПросроченнаяЗадолженность3.Просрочено
	|	ИЗ
	|		ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3) КАК ПросроченнаяЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор";
	
	ПросроченнаяЗадолженность = Запрос.Выполнить();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);

	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Период);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Дата2", Дата2);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Дата3", Дата3);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
		
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();

	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Просроченная задолженность поставщикам";
	
	Возврат СтандартныеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период",  Период);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли