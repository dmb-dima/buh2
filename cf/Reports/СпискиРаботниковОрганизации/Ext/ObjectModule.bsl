#Если Клиент Тогда

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Год", Год(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Месяц", Месяц(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_День", День(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Списки работников организации";
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник
	|
	|{ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.Организация.* КАК Организация,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	ПлановыеНачисленияРаботниковСрез.Размер КАК Размер,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен ТОГДА ""Уволен"" ИНАЧЕ ""Работает"" КОНЕЦ КАК Состояние
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|}
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности) КАК РаботникиОрганизации
	|		//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ
	|		//КОНТАКТНАЯ ИНФОРМАЦИЯ: СОЕДИНЕНИЯ
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности) КАК ПлановыеНачисленияРаботниковСрез
	|		ПО РаботникиОрганизации.Сотрудник  = ПлановыеНачисленияРаботниковСрез.Сотрудник}
	|
	|{ГДЕ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.Организация.* КАК Организация,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	ПлановыеНачисленияРаботниковСрез.Размер КАК Размер,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен ТОГДА ""Уволен"" ИНАЧЕ ""Работает"" КОНЕЦ КАК Состояние
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|}
	|
	|{УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.Организация.* КАК Организация,	
	|	ПлановыеНачисленияРаботниковСрез.Размер КАК Размер,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен ТОГДА ""Уволен"" ИНАЧЕ ""Работает"" КОНЕЦ КАК Состояние
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|}
	|
	|ИТОГИ ПО ОБЩИЕ
	|
	|{ИТОГИ ПО
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.Организация.* КАК Организация,
	|	ПлановыеНачисленияРаботниковСрез.Размер КАК Размер,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен ТОГДА ""Уволен"" ИНАЧЕ ""Работает"" КОНЕЦ КАК Состояние
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|}";

	// Преобразуем текст запроса для получения полной информации о физлице
	УправлениеОтчетами.ДобавитьВТекстПостроителяДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.СтруктураФорматаПолей, "РаботникиОрганизации", "Сотрудник.Физлицо");
	
	// Таблица описания видов объектов контактной информации для возможности вывода в отчет
	ТаблицаВидовОбъектовКИ = Новый ТаблицаЗначений;
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляется контактная информация
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("Представление");// представление поля, для которого добавляется контактная информация
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("ВидОбъекта");   // вид объекта-владельца контактной информации
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("СтрокаТипОбъекта");   // тип объекта-владельца контактной информации
	
	НоваяСтрока = ТаблицаВидовОбъектовКИ.Добавить();
	НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.Сотрудник.ФизЛицо";
	НоваяСтрока.Представление = "Работник";
	НоваяСтрока.ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	НоваяСтрока.СтрокаТипОбъекта = "Справочник.ФизическиеЛица";
	
	НоваяСтрока = ТаблицаВидовОбъектовКИ.Добавить();
	НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.Организация";
	НоваяСтрока.Представление = "Организация";
	НоваяСтрока.ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	НоваяСтрока.СтрокаТипОбъекта = "Справочник.Организации";
	
	// Добавим строки запроса, необходимые для выборки контактной информации
	УправлениеОтчетами.ДобавитьВТекстПостроителяКонтактнуюИнформацию(ТаблицаВидовОбъектовКИ, ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.мСоответствиеНазначений, ОбщийОтчет.ПостроительОтчета.Параметры);

	ПостроительОтчета.Текст = ТекстЗапроса;
	
	//представление полей запроса
	СтруктураПредставлениеПолей.Вставить("Сотрудник",					"Работник");
	СтруктураПредставлениеПолей.Вставить("ВидЗанятости",				"Вид занятости");
	СтруктураПредставлениеПолей.Вставить("ПодразделениеОрганизации",	"Подразделение");
	СтруктураПредставлениеПолей.Вставить("ТабельныйНомер",				"Табельный номер");
	СтруктураПредставлениеПолей.Вставить("Размер",						"Оклад");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ПодразделениеОрганизации");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Организация");
	МассивОтбора.Добавить("ПодразделениеОрганизации");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// отбор не уволенных
	ЭлементОтбора = ПостроительОтчета.Отбор.Добавить("Состояние",,"Состояние работника");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Значение = "Уволен";
	ЭлементОтбора.Использование = Истина;	
	
	// поля по умолчанию
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("ТабельныйНомер");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ФиоПолное");
	
	// настройки отчета
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1; // Дата
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Добавляет в структуру общие для всех отчетов параметры настройки
//
// Параметры:
//	Нет.
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НастройкиПостроителя", ОбщийОтчет.ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели", ОбщийОтчет.Показатели.Выгрузить());
	СтруктураНастроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураНастроек.Вставить("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураНастроек.Вставить("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураНастроек.Вставить("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруДляСохраненияНастроек()()

// Заполняет из структуры настроек общие параметры отчетов
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок) Экспорт
	
	Перем ТабПоказатели;
	
	Если ТипЗнч(ОбщийОтчет.СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийОтчет.ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("Показатели", ТабПоказатели);
	Если ТипЗнч(ТабПоказатели) = Тип("ТаблицаЗначений") Тогда
		ОбщийОтчет.Показатели.Загрузить(ТабПоказатели);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураСНастройками.Свойство("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураСНастройками.Свойство("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураСНастройками.Свойство("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураСНастройками.Свойство("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки)()

#КонецЕсли