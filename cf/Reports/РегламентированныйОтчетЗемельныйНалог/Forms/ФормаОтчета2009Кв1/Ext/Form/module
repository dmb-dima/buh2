////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличных документов
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;

Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

// Хранит дерево значений - список выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем мНеВызыватьРасчет;

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1			= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",							ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",				ОписаниеТиповЧисло1);
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",				ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",			ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",						ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",					ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",					ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",			ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",	ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым",		ОписаниеТиповБулево);

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020000100";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураДанныхПоля;

КонецФункции

Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()

	Если СокрЛП(мТитульный.Области.Период1.Значение + мТитульный.Области.Период2.Значение) = "" ИЛИ мСкопированаФорма <> Неопределено Тогда
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = "34";
		мТитульный.Области.Период1.Значение = Сред(КодОтчетногоПериода, 1, 1);
		мТитульный.Области.Период2.Значение = Сред(КодОтчетногоПериода, 2, 1);	
	КонецЕсли;	
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	мТитульный.Области.ОтчетГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	// задаем заголовок формы
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "));

КонецПроцедуры // ЗаполнитьДатуПодписи()

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		//Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
		//	ИНН = ИНН + "-";
		//КонецЦикла;
		
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ИНН, "ИНН1", "", ,,, Истина);
		ПроставитьНаВсехЛистах("ИНН1_", ИНН);
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		//Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
		//	КПП = КПП + "-";
		//КонецЦикла;
		ПроставитьНаВсехЛистах("КПП1_", КПП);
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			мТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		// заполняем наименование организации
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
			
		мТитульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		// заполняем телефон организации
		мТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	// заполняем сведения о подписантах
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
 
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьЕдиницыИзмерения) * Делитель;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если (ФлажокОтклАвтоРасчет) Или (мРежимПечати) Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// Коэффициент К1 определяется как отношение числа полных месяцев, 
		// в течение которых отсутствует налоговая льгота, к числу календарных 
		// месяцев в налоговом периоде.
		
		//для декларации в налоговом периоде 12 месяцев
		ЧислоМесяцев = 12;
		
		Если мРаздел2.Области.П000020017003.Значение = 0 Тогда
			П000020018003 = 1;
		Иначе			
			П000020018003 = Макс((мРаздел2.Области.П000020021003.Значение - мРаздел2.Области.П000020017003.Значение) / ЧислоМесяцев, 0);
		КонецЕсли;
		
		мРаздел2.Области.П000020018003.Значение = П000020018003;
		
		// Получим коэф. без округления.
		П000020018003 = мРаздел2.Области.П000020018003.Значение;

		// Очистим значение базы.
		мРаздел2.Области.П000020019003.Значение = 0;

		П000020006003 = мРаздел2.Области.П000020006003_Числ.Значение / ?(мРаздел2.Области.П000020006003_Знам.Значение = 0, 1, мРаздел2.Области.П000020006003_Знам.Значение);
		Если П000020006003 > 1 Тогда
			Если мРаздел2.Области.П000020006003_Знам.Значение = 0 Тогда
				П000020006003 = 0;
				Сообщить("Доля налогоплательщика в праве на земельный участок не может превышать единицу.", СтатусСообщения.Информация);
				Сообщить("По строке 060 не указан знаменатель дроби.", СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;

		Если П000020006003 = 0 Тогда
			Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020005003.Значение);
		Иначе
			Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020005003.Значение) * П000020006003;
		КонецЕсли;

		П000020008003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020008003.Значение);
		П000020010003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020010003.Значение);

		Сумма080и100 = П000020008003 + П000020010003;

		П000020014003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);
		П000020016003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020016003.Значение);
		Сумма140и160 = П000020014003 + П000020016003;

		// Доля
		П000020012003 = мРаздел2.Области.П000020012003_Числ.Значение / ?(мРаздел2.Области.П000020012003_Знам.Значение = 0, 1, мРаздел2.Области.П000020012003_Знам.Значение);
		Если П000020012003 > 1 Тогда
			Если мРаздел2.Области.П000020012003_Знам.Значение = 0 Тогда
				П000020012003 = 0;
				Сообщить("Доля не облагаемой площади земельного участка не может превышать единицу.", СтатусСообщения.Информация);
				Сообщить("По строке 120 не указан знаменатель дроби.", СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;

		// Если владеем целиком всем участком земли.
		Если Сумма080и100 > 0 Тогда
			мРаздел2.Области.П000020019003.Значение = Макс(Значение - Сумма080и100, 0);
		ИначеЕсли Сумма140и160 > 0 Тогда
			Если П000020014003 > 0 Тогда
				мРаздел2.Области.П000020019003.Значение = Макс(Значение - П000020014003, 0);
			ИначеЕсли П000020016003 > 0 Тогда
				мРаздел2.Области.П000020019003.Значение = Макс(Значение - П000020016003, 0);
			КонецЕсли;
		ИначеЕсли П000020012003 > 0 Тогда
			мРаздел2.Области.П000020019003.Значение = Макс((Значение - (Значение * П000020012003 * (1 -  П000020018003))), 0);
		Иначе
			// Льгот по данному объекту нет.
			мРаздел2.Области.П000020019003.Значение = Макс(Значение - Сумма080и100, 0);
		КонецЕсли;

		// Коэффициент К2 определяется как отношение числа полных месяцев, 
		// в течение которых данный земельный участок находился в собственности
		// (постоянном (бессрочном) пользовании, пожизненном наследуемом владении) 
		// налогоплательщика, указанных по строке с кодом 230, к числу календарных 
		// месяцев в налоговом периоде.
		
		мРаздел2.Области.П000020022003.Значение = мРаздел2.Области.П000020021003.Значение / ЧислоМесяцев;

		Если РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020004003.Значение) Тогда

			// Сумма исчисленного налога за налоговый период рассчитанная
			// как произведение налоговой базы, указанной по строке
			// с кодом 190, налоговой ставки, указанной по строке с кодом 200,
			// и коэффициента К2, указанного по строке с кодом 220, деленное на сто.
			мРаздел2.Области.П000020023003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020019003.Значение)
													* мРаздел2.Области.П000020020003.Значение 
													* мРаздел2.Области.П000020022003.Значение / 100;

		ИначеЕсли мРаздел2.Области.П000020004003.Значение = "1" Тогда

			// Сумма исчисленного налога за налоговый период, которая определяется как
			// произведение значений строк с кодами 190, 200 и 220 деленное
			// на сто и коэффициента 2, если значение по строке с кодом 040 равно "1"
			// ("3 года").
			мРаздел2.Области.П000020023003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020019003.Значение) 
													* мРаздел2.Области.П000020020003.Значение 
													* мРаздел2.Области.П000020022003.Значение / 100 * 2;

		ИначеЕсли мРаздел2.Области.П000020004003.Значение = "2" Тогда

			// Сумма исчисленного налога за налоговый период, которая определяется как 
			// произведение значений строк с кодами 190, 200 и 220 деленное
			// на сто и коэффициента 4, если значение по строке с кодом 040 равно "2"
			// ("свыше 3 лет").
			мРаздел2.Области.П000020023003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020019003.Значение)
													* мРаздел2.Области.П000020020003.Значение 
													* мРаздел2.Области.П000020022003.Значение / 100 * 4;

		КонецЕсли;

		мРаздел2.Области.П000020023003.Значение = Макс(мРаздел2.Области.П000020023003.Значение, 0);
		мРаздел2.Области.П000020028003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020025003.Значение) 
												- ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020027003.Значение), 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел2");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура УстановитьМаскиВПоляхВвода()
	
	// титульный
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["ПоМесту" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	// раздел 1
	Для Инд = 1 По 5 Цикл
		мРаздел1.Области["П000010001003_" + Инд].ЭлементУправления.Маска = "99999999999999999999";
		мРаздел1.Области["П000010002003_" + Инд].ЭлементУправления.Маска = "99999999999";
	КонецЦикла;
	
	// раздел 2
	мРаздел2.Области.П000020001003.ЭлементУправления.Маска = "99999999999999999999";
	мРаздел2.Области.П000020002003.ЭлементУправления.Маска = "99999999999";
	мРаздел2.Области.П000020003003.ЭлементУправления.Маска = "999999999999";
	мРаздел2.Области.П000020004003.ЭлементУправления.Маска = "9";
	мРаздел2.Области.П000020007003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020009003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020011003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020013003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020015003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020024003.ЭлементУправления.Маска = "9999999";
	мРаздел2.Области.П000020026003.ЭлементУправления.Маска = "9999999";
	
	// области номера страницы
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		НомерБлока = 1;
		Пока ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_1") <> Неопределено Цикл
			Для НомерОбластиВБлоке = 1 По 3 Цикл
				ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_" + НомерОбластиВБлоке).ЭлементУправления.Маска = "9";
			КонецЦикла;
			НомерБлока = НомерБлока + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Регистрация земельных участков".
// Открывает форму списка регистра сведений "Регистрация земельных участков".
//
Процедура КнопкаРегистрацияЗемельныхУчастковНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияЗемельныхУчастков.ПолучитьФормуСписка();
	Форма.Организация = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	Форма.РегистрСведенийСписок.Отбор.Организация.Значение      = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.Использование = Истина;	
	Форма.Открыть();
	
КонецПроцедуры // КнопкаРегистрацияЗемельныхУчастковНажатие() 

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	мНеВызыватьРасчет = Ложь;
	
	мБезОткрытияФормы = БезОткрытияФормы;

	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный    = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2      = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;

	УстановитьМаскиВПоляхВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда
		Если мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
		КонецЕсли;
		ЗаполнитьДатуПодписи();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено И НЕ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф <> "ББУ" И ИдКонф <> "БГУ" Тогда
	
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		
		КнопкаСтавки = КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
												"РегистрацияЗемельныхУчастков",
												ТипКнопкиКоманднойПанели.Действие,
												"Регистрация земельных участков",
												Новый Действие("КнопкаРегистрацияЗемельныхУчастковНажатие"));
												
		КнопкаСтавки.Подсказка = "Открыть журнал регистрации земельных участков";
								 
		КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
								 Новый УникальныйИдентификатор,
								  ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ЗаполнитьАвто() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Перед автозаполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОчиститьОтчет(Ложь) Тогда
		Возврат;
	КонецЕсли;
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	
	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Массив для отбора по налоговому органу.
	МассивНО = Новый Массив;
	Если НЕ ЗначениеЗаполнено(мСсылкаНО) Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
	ИначеЕсли мСсылкаНО.Код = Организация.КодИМНС Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
		МассивНО.Добавить(мСсылкаНО);
	Иначе
		МассивНО.Добавить(мСсылкаНО);
	КонецЕсли;
	
	// Выборка земельных участков и числа полных месяцев владения ими.
	// При этом если возникновение (прекращение) у налогоплательщика в течение налогового периода 
	// права собственности (постоянного (бессрочного) пользования, пожизненного наследуемого владения) 
	// на земельный участок (его долю) произошло до 15-го числа соответствующего месяца включительно, 
	// за полный месяц принимается месяц возникновения указанных прав. Если возникновение (прекращение)
	// указанных прав произошло после 15-го числа соответствующего месяца, за полный месяц принимается 
	// месяц прекращения указанных прав.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", МассивНО);
	
	Период = НачалоГода(мДатаНачалаПериодаОтчета);
	
	ТекстОбъединяющегоЗапроса = "";
	
	Пока Период <= мДатаКонцаПериодаОтчета Цикл
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(" + Формат(Период, "ДФ=MM") + " КАК ЧИСЛО) КАК НомерМесяца,
		|	РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	NULL КАК НалоговаяЛьготаПоНалоговойБазе,
		|	1 КАК КоличествоМесяцев,
		|	0 КАК КоличествоМесяцевПримененияЛьготы
		|ПОМЕСТИТЬ
		|	ВладениеЗемельнымиУчастками" + Формат(Период, "ДФ=MM") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
		|				ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ, 14),
		|				Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|	ГДЕ
		|		РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу = ИСТИНА
		|		И НалоговыйОрган В (&НалоговыйОрган)
		|
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РегистрацияЗемельныхУчастков.ОсновноеСредство
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|	ГДЕ
		|		РегистрацияЗемельныхУчастков.Организация = &Организация
		|		И РегистрацияЗемельныхУчастков.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ, 14)
		|		И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу = ИСТИНА
		|		И РегистрацияЗемельныхУчастков.НалоговыйОрган В (&НалоговыйОрган)
		|	) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(" + Формат(Период, "ДФ=MM") + " КАК ЧИСЛО) КАК НомерМесяца,
		|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговаяЛьготаПоНалоговойБазе,
		|	0 КАК КоличествоМесяцев,
		|	1 КАК КоличествоМесяцевПримененияЛьготы
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяЛьготаПоНалоговойБазе
		|		ИЗ
		|			РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, -1), МЕСЯЦ),
		|					Организация = &Организация
		|						И НалоговыйОрган В (&НалоговыйОрган)) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|		ГДЕ
		|			РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу = ИСТИНА
		|			И РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияЗемельныхУчастков.ОсновноеСредство,
		|			РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе
		|		ИЗ
		|			РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|		ГДЕ
		|			РегистрацияЗемельныхУчастков.Организация = &Организация
		|			И РегистрацияЗемельныхУчастков.НалоговыйОрган В (&НалоговыйОрган)
		|			И РегистрацияЗемельныхУчастков.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
		|			И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу = ИСТИНА
		|			И РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)
		|		) КАК РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам
		|";
		Запрос.Выполнить();
		
		ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		                              |",
									  "ОБЪЕДИНИТЬ ВСЕ
									  |ВЫБРАТЬ *
		                              |")
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ПОМЕСТИТЬ ВладениеЗемельнымиУчастками
									  |",
									  "")
								  + "ИЗ ВладениеЗемельнымиУчастками" + Формат(Период, "ДФ=MM") + "
									|";
		
		Период = ДобавитьМесяц(Период, 1);	
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Период", КонецГода(мДатаНачалаПериодаОтчета));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВладениеУчастками.ОсновноеСредство,
	|	ЕСТЬNULL(ВладениеУчастками.КоличествоМесяцевВладения, 0) КАК КоличествоМесяцевВладения,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КодКатегорииЗемель,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КБК КАК КБК,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.КадастроваяСтоимость, 0) КАК КадастроваяСтоимость,
	|	ВЫБОР
	|		КОГДА РегистрацияЗемельныхУчастковСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|		  ИЛИ РегистрацияЗемельныхУчастковСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
	|			ТОГДА РегистрацияЗемельныхУчастковСрезПоследних.КодПоОКАТО
	|		ИНАЧЕ РегистрацияЗемельныхУчастковСрезПоследних.Организация.КодПоОКАТО
	|	КОНЕЦ КАК КодПоОКАТО,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ОбщаяСобственность, ЛОЖЬ) КАК ОбщаяСобственность,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДоляВПравеОбщейСобственностиЧислитель, 0) КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДоляВПравеОбщейСобственностиЗнаменатель, 0) КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ЖилищноеСтроительство, ЛОЖЬ) КАК ЖилищноеСтроительство,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДатаНачалаПроектирования, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачалаПроектирования,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДатаРегистрацииПравНаОбъектНедвижимости, ДАТАВРЕМЯ(1,1,1)) КАК ДатаРегистрацииПравНаОбъектНедвижимости,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяСтавка, 0) КАК НалоговаяСтавка,
	|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговаяЛьготаПоНалоговойБазе,
	|	ЕСТЬNULL(Льготы.КоличествоМесяцевПримененияЛьготы, 0) КАК КоличествоМесяцевПримененияЛьготы,
	|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ДоляНеОблагаемойНалогомПлощадиЧислитель, 0) КАК ДоляНеОблагаемойНалогомПлощадиЧислитель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ДоляНеОблагаемойНалогомПлощадиЗнаменатель, 0) КАК ДоляНеОблагаемойНалогомПлощадиЗнаменатель,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.УменьшениеНалоговойБазыПоСтатье391, ЛОЖЬ) КАК УменьшениеНалоговойБазыПоСтатье391,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.УменьшениеНалоговойБазыНаСумму, ЛОЖЬ) КАК УменьшениеНалоговойБазыНаСумму,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.НеОблагаемаяНалогомСумма, 0) КАК НеОблагаемаяНалогомСумма,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка, 0) КАК СниженнаяНалоговаяСтавка,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога, 0) КАК ПроцентУменьшенияСуммыНалога,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.СуммаУменьшенияСуммыНалога, 0) КАК СуммаУменьшенияСуммыНалога
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВладениеЗемельнымиУчастками.ОсновноеСредство КАК ОсновноеСредство,
	|		СУММА(ВладениеЗемельнымиУчастками.КоличествоМесяцев) КАК КоличествоМесяцевВладения
	|	ИЗ
	|		ВладениеЗемельнымиУчастками
	|	СГРУППИРОВАТЬ ПО
	|		ВладениеЗемельнымиУчастками.ОсновноеСредство
	|	) КАК ВладениеУчастками
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ
	|			ПрименениеЛьготы.ОсновноеСредство,
	|			ПрименениеЛьготы.КоличествоМесяцевПримененияЛьготы
	|		ИЗ
	|			(ВЫБРАТЬ 
	|				МАКСИМУМ(НомерМесяца) КАК НомерМесяца, 
	|				ОсновноеСредство
	|			ИЗ 
	|				ВладениеЗемельнымиУчастками 
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL) 
	|			СГРУППИРОВАТЬ ПО 
	|				ОсновноеСредство
	|			) КАК НомераПоследнихМесяцев
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ОсновноеСредство,
	|				НомерМесяца,
	|				НалоговаяЛьготаПоНалоговойБазе
	|			ИЗ 
	|				ВладениеЗемельнымиУчастками 
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL)
	|			) КАК ВидыЛьгот
	|		ПО НомераПоследнихМесяцев.ОсновноеСредство = ВидыЛьгот.ОсновноеСредство
	|		 И НомераПоследнихМесяцев.НомерМесяца = ВидыЛьгот.НомерМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВладениеЗемельнымиУчастками.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(ВладениеЗемельнымиУчастками.КоличествоМесяцевПримененияЛьготы) КАК КоличествоМесяцевПримененияЛьготы
	|			ИЗ
	|				ВладениеЗемельнымиУчастками
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL)
	|			СГРУППИРОВАТЬ ПО
	|				ВладениеЗемельнымиУчастками.ОсновноеСредство,
	|				ВладениеЗемельнымиУчастками.НалоговаяЛьготаПоНалоговойБазе
	|			) КАК ПрименениеЛьготы
	|		ПО ВидыЛьгот.ОсновноеСредство = ПрименениеЛьготы.ОсновноеСредство
	|		) КАК Льготы
	|	ПО ВладениеУчастками.ОсновноеСредство = Льготы.ОсновноеСредство
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&Период, Организация = &Организация И ВключатьВНалоговуюБазу = ИСТИНА) КАК РегистрацияЗемельныхУчастковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&Период, Организация = &Организация И ВключатьВНалоговуюБазу = ИСТИНА И НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)) КАК РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам
	|		ПО РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ОсновноеСредство = РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство
	|		 И РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговыйОрган В (&НалоговыйОрган)
	|	ПО РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство = ВладениеУчастками.ОсновноеСредство
	|	И РегистрацияЗемельныхУчастковСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
	|";
	ВыборкаЗемельныхУчастков = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗемельныхУчастков.Количество() = 0 Тогда
		
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			Если ГлавныйИнтерфейс.Полный.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Внеоборотные активы"" - ""Регистрация земельных участков"")";
			ИначеЕсли ГлавныйИнтерфейс.БухгалтерскийИНалоговыйУчет.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Основные средства и нематериальные активы"" - ""Регистрация земельных участков"")";
			ИначеЕсли ГлавныйИнтерфейс.УправлениеОборудованием.Видимость Тогда
				ПутьКРегистру = "(меню ""Основные средства"" - ""Регистрация земельных участков"")";
			Иначе
				ПутьКРегистру = "(меню ""Операции"" - ""Регистры сведений..."" - ""Регистрация земельных участков"")";
			КонецЕсли;
			
		Иначе
			ПутьКРегистру = "(меню ""ОС"" - ""Регистрация земельных участков"")";
		КонецЕсли;
		
		КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
						   
		Сообщить("Отсутствуют данные о регистрации земельных участков на " + ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина") + " для " + Организация + " код ИМНС "+ КодИМНС + "
		         |" + ПутьКРегистру + ".");
 		Возврат;
		
	КонецЕсли;
	
	ПериодОтчета = НачалоГода(мДатаНачалаПериодаОтчета);
	
	ПерваяСтраницаРаздела2 = Истина;
	
	Пока ВыборкаЗемельныхУчастков.Следующий() Цикл
		
		Если НЕ (ВыборкаЗемельныхУчастков.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПерваяСтраницаРаздела2 Тогда
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
			ВставитьДополнительнуюСтраницу("Раздел2");
		Иначе
			ПерваяСтраницаРаздела2 = Ложь;
		КонецЕсли;
		
		// Кадастровый номер.
		мРаздел2.Области["П000020000100"].Значение = ВыборкаЗемельныхУчастков.КадастровыйНомер;
		
		// КБК.
		мРаздел2.Области["П000020001003"].Значение = ВыборкаЗемельныхУчастков.КБК;
		
		// Код по ОКАТО.
		мРаздел2.Области["П000020002003"].Значение = ВыборкаЗемельныхУчастков.КодПоОКАТО;
		
		// Код категории земель.
		мРаздел2.Области["П000020003003"].Значение = ВыборкаЗемельныхУчастков.КодКатегорииЗемель;
		
		// Период проектирования и строительства.
		Если ВыборкаЗемельныхУчастков.ЖилищноеСтроительство 
		   И НЕ (ВыборкаЗемельныхУчастков.ДатаНачалаПроектирования = Дата(1,1,1)) Тогда
			
			Если ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости = Дата(1,1,1)
			   ИЛИ (НЕ (ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости = Дата(1,1,1))
			        И НЕ (ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости < ПериодОтчета)) Тогда
				
				ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда // заглушка для прохождения синтакс-контроля в ББУ 8
					УправлениеВнеоборотнымиАктивами = РегламентированнаяОтчетность;
				КонецЕсли;
				ПериодПроектированияИСтроительства = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаЗемельныхУчастков.ДатаНачалаПроектирования, ПериодОтчета) / 12;
				
				Если ПериодПроектированияИСтроительства > 3 Тогда
					
					// Период проектирования и строительства - свыше 3-х лет.
					мРаздел2.Области["П000020004003"].Значение = "2";
					
				Иначе
					
					// Период проектирования и строительства - 3 года.
					мРаздел2.Области["П000020004003"].Значение = "1";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Кадастровая стоимость.
		мРаздел2.Области["П000020005003"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость;
	
		// Доля в праве на земельный участок.
		Если ВыборкаЗемельныхУчастков.ОбщаяСобственность Тогда
			
			// Числитель.
			мРаздел2.Области["П000020006003_Числ"].Значение = ВыборкаЗемельныхУчастков.ДоляВПравеОбщейСобственностиЧислитель;
			
			// Знаменатель.
			мРаздел2.Области["П000020006003_Знам"].Значение = ВыборкаЗемельныхУчастков.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы Тогда

		
			Если ВыборкаЗемельныхУчастков.УменьшениеНалоговойБазыНаСумму Тогда
			
				// Код налоговолй льготы - не облагаемая налогом сумма.
				мРаздел2.Области["П000020007003"].Значение = "3022100";
				
				// Не облагаемая налогом сумма.
				мРаздел2.Области["П000020008003"].Значение = ВыборкаЗемельныхУчастков.НеОблагаемаяНалогомСумма;
				
			КонецЕсли;
			
			Если ВыборкаЗемельныхУчастков.УменьшениеНалоговойБазыПоСтатье391 Тогда
			
				// Код налоговой льготы - не облагаемая налогом сумма на федеральном уровне.
				мРаздел2.Области["П000020009003"].Значение = ВыборкаЗемельныхУчастков.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391;
				
				// Не облагаемая налогом сумма на федеральном уровне (10 000 руб.).
				мРаздел2.Области["П000020010003"].Значение = 10000;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь Тогда
		
			// Код налоговой льготы - не облагаемая налогом площадь.
			мРаздел2.Области["П000020011003"].Значение = "3022300";
			
			// Доля не облагаемой площади (простая дробь).
			
			// Числитель.
			мРаздел2.Области["П000020012003_Числ"].Значение = ВыборкаЗемельныхУчастков.ДоляНеОблагаемойНалогомПлощадиЧислитель;
			
			// Знаменатель.
			мРаздел2.Области["П000020012003_Знам"].Значение = ВыборкаЗемельныхУчастков.ДоляНеОблагаемойНалогомПлощадиЗнаменатель;
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020017003"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное Тогда
		
			// Код налоговой льготы - освобождение от налогообложения.
			мРаздел2.Области["П000020013003"].Значение = "3022400";
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020017003"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
			// Расчет коэффициента К1.
			Расчет();
			
			// Коэффициент К1: отношение числа полных месяцев, в течение которых отсутствует налоговая льгота,
			// к числу календарных месяцев в налоговом периоде.
			КоэффициентК1 = мРаздел2.Области["П000020018003"].Значение;
			
			// Сумма налоговой льготы (с учетом коэффициента К1).
			мРаздел2.Области["П000020014003"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость * (1 - КоэффициентК1);
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
			
			// Код налоговой льготы - освобождение от налогообложения на федеральном уровне.
			мРаздел2.Области["П000020015003"].Значение = ВыборкаЗемельныхУчастков.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395;
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020017003"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
			// Расчет коэффициента К1.
			Расчет();
			
			// Коэффициент К1: отношение числа полных месяцев, в течение которых отсутствует налоговая льгота,
			// к числу календарных месяцев в налоговом периоде.
			КоэффициентК1 = мРаздел2.Области["П000020018003"].Значение;
			
			// Сумма налоговой льготы (с учетом коэффициента К1).
			мРаздел2.Области["П000020016003"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость * (1 - КоэффициентК1);
			
		КонецЕсли;
		
		// Налоговая ставка.
		НалоговаяСтавка = ВыборкаЗемельныхУчастков.НалоговаяСтавка;
		
		мРаздел2.Области["П000020020003"].Значение = НалоговаяСтавка;
		
		// Количество полных месяцев владения земельным участком в течение налогового периода.
		мРаздел2.Области["П000020021003"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевВладения;
		
		Расчет();
		
		// Коэффициент К2: отношение числа полных месяцев владения земельным участком
		// к числу календарных месяцев в налоговом периоде.
		КоэффициентК2 = мРаздел2.Области["П000020022003"].Значение;
		НалоговаяБаза = мРаздел2.Области["П000020019003"].Значение;
		СуммаНалога   = мРаздел2.Области["П000020023003"].Значение;
		
		КодНалоговойЛьготыВОтношенииСуммыНалога   = "";
		СуммаНалоговойЛьготыВОтношенииСуммыНалога = 0;
		
		Если ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.СниженнаяНалоговаяСтавка) Тогда
			
			// Код налоговой льготы в виде снижения налоговой ставки.
			мРаздел2.Области["П000020026003"].Значение = "3022500";
			
			// Сумма налоговой льготы в виде уменьшения суммы налога и (или) снижения налоговой ставки.
 			мРаздел2.Области["П000020027003"].Значение = СуммаНалога - НалоговаяБаза * КоэффициентК2 * (ВыборкаЗемельныхУчастков.СниженнаяНалоговаяСтавка / 100);
													
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.ПроцентУменьшенияСуммыНалога) 
		 ИЛИ ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.СуммаУменьшенияСуммыНалога) Тогда
			
			// Код налоговой льготы в виде уменьшения суммы налога.
			мРаздел2.Области["П000020024003"].Значение = "3022200";
			
			СуммаУменьшения = СуммаНалога * ВыборкаЗемельныхУчастков.ПроцентУменьшенияСуммыНалога / 100 // уменьшение в процентах.
			                + ВыборкаЗемельныхУчастков.СуммаУменьшенияСуммыНалога;                      // уменьшение на сумму.
			
			// Сумма налоговой льготы в виде уменьшения суммы налога и (или) снижения налоговой ставки.
			мРаздел2.Области["П000020025003"].Значение = СуммаУменьшения;
			
		КонецЕсли;
		
		Расчет();
		
	КонецЦикла;
	
	Расчет();
	
	СформироватьРаздел1();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПолеТабличногоДокументаРаздел2П000020006003_ЧислПриИзменении(Элемент)
	
	Числитель = Элемент.Значение;
	мРаздел2.Области.П000020006003_Знам.ЭлементУправления.МинимальноеЗначение = Числитель;

	мНеВызыватьРасчет = Ложь;
	Если мРаздел2.Области.П000020006003_Знам.Значение = 0 Тогда
		мНеВызыватьРасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2П000020006003_ЗнамПриИзменении(Элемент)
	
	Знаменатель = Элемент.Значение;
	мРаздел2.Области.П000020006003_Числ.ЭлементУправления.МаксимальноеЗначение = Знаменатель;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2П000020012003_ЧислПриИзменении(Элемент)
	
	Числитель = Элемент.Значение;
	мРаздел2.Области.П000020012003_Знам.ЭлементУправления.МинимальноеЗначение = Числитель;

	мНеВызыватьРасчет = Ложь;
	Если мРаздел2.Области.П000020012003_Знам.Значение = 0 Тогда
		мНеВызыватьРасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2П000020012003_ЗнамПриИзменении(Элемент)
	
	Знаменатель = Элемент.Значение;
	мРаздел2.Области.П000020012003_Числ.ЭлементУправления.МаксимальноеЗначение = Знаменатель;
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу("Раздел1");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу("Раздел2");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)
	
	СРП = мРаздел1.Области.П000010000100.Значение;
	ВставитьДополнительнуюСтраницу("Раздел1");
	мРаздел1.Области.П000010000100.Значение = СРП;
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Раздел2");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
	
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
				   |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		//определение первоначального значеня
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			//доработка результата выбора
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			//заполнение отчета данными выбора
			Для Инд = 1 По 4 Цикл
				мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			ПроставитьНаВсехЛистах("КПП1_", РезультатВыбора.КПП);
			
			//заполняем сведения о подписантах
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			//поле подписанта остается пустым
		Иначе
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	мТитульный.Области.ПрПодп.Значение = ТипПодписанта;
	мТитульный.Области.ОргПодписант.Значение = Подписант;
	мТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	мТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры

Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();

КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();

КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ФормироватьСтруктуруСтраницОтчета()

	ОписаниеТиповСтрока100	= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1		= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2009Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Для Инд=1 По 5 Цикл
		ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003_" + Инд, 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыКБК"]);
		ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003_" + Инд, 11, "ОКАТО");
	КонецЦикла;
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыКБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020002003", 11, "ОКАТО");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020003003", 12, , "Выбор категории земли", КоллекцияСписковВыбора["КатегорииЗемли"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004003", 1, , "Выбор категории земли", КоллекцияСписковВыбора["ПериодыСтроительства"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020007003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020009003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020011003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот3"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020013003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот4"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020015003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот5"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020024003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот6"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020026003", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот7"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора=ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок=ТекстВыбора;
	ФормаВыбора.СписокКодов=ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки=ИсходнаяСтрока.Код;
	КонецЕсли;
	
	
	РезультатВыбора=ФормаВыбора.ОткрытьМодально();
	
	//Если ИсходнаяСтрока = Неопределено Тогда
	//	РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	//Иначе
	//	РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	//КонецЕсли;
	                              
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяРаздела = Сред(Элемент.Имя, 24);
	Если НЕ мНеВызыватьРасчет Тогда
		Если ИмяРаздела = "Раздел2" Тогда
			Расчет();
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		мНеВызыватьРасчет = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВПолеВводаВПолеТабличногоДокумента(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ЭлементыФормы.Найти("ПолеТабличногоДокумента" + ИмяТекущейСтраницы) <> Неопределено Тогда
		Область = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницы].ТекущаяОбласть;
	Иначе
		Возврат;
	КонецЕсли;
		
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Элемент.Значение) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Элемент.Значение));
		Для Инд = ДлинаЗначения По 11 Цикл
			Элемент.Значение = СокрЛП(Элемент.Значение) + "0";
		КонецЦикла;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Элемент.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Элемент.Значение)) <> ПараметрВводаПоля.Длина Тогда
		Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьДанныеНажатие(Элемент)
	
	СформироватьРаздел1();
	
КонецПроцедуры

Процедура СформироватьРаздел1()
	
	РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, "Раздел1");
	
	ДанныеДляЗаполнения = Новый ТаблицаЗначений;
	ДанныеДляЗаполнения.Колонки.Добавить("КБК");
	ДанныеДляЗаполнения.Колонки.Добавить("ОКАТО");
	ДанныеДляЗаполнения.Колонки.Добавить("Налог");

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);

	ТаблицаСтраницРаздела = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	КБК = "";
	ОКАТО = "";
	П000020028003 = 0;
	П000020029003 = 0;

	Для Инд = 0 По ТаблицаСтраницРаздела.Количество() - 1 Цикл

		ТекЭкземпляр        =  ТаблицаСтраницРаздела[Инд].Данные;
		//ТекЭкземплярДопСтр  =  ТаблицаСтраницРаздела[Инд].ДанныеДопСтрок;

		ТекЭкземпляр.Свойство("П000020001003", КБК);
		ТекЭкземпляр.Свойство("П000020002003", ОКАТО);
		ТекЭкземпляр.Свойство("П000020028003", П000020028003);
		ТекЭкземпляр.Свойство("П000020029003", П000020029003);

		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ОКАТО) ИЛИ НЕ РегламентированнаяОтчетность.ПустоеЗначение(КБК) Тогда

			НовСтрока = ДанныеДляЗаполнения.Добавить();
			НовСтрока.КБК = КБК;
			НовСтрока.ОКАТО = ОКАТО;
			НовСтрока.Налог = ОкруглитьЧислоПоФормату(П000020028003) - ОкруглитьЧислоПоФормату(П000020029003);

		КонецЕсли;

	КонецЦикла;

	ДанныеДляЗаполнения.Свернуть("КБК, ОКАТО", "Налог");

	// заполняем раздел 1 полученными данными
	КоличествоБлоковНаЛисте = 5;
	Для Инд = 0 По ДанныеДляЗаполнения.Количество() - 1 Цикл
		ТекСтр = ДанныеДляЗаполнения[Инд];
		Если Инд % КоличествоБлоковНаЛисте = 0 И Инд <> 0 Тогда
			ВставитьДополнительнуюСтраницу("Раздел1");
		КонецЕсли;
		ОкончаниеИмениОбласти = Формат(Инд % КоличествоБлоковНаЛисте + 1, "ЧГ=");
		мРаздел1.Области["П000010001003_" + ОкончаниеИмениОбласти].Значение = ТекСтр.КБК;
		мРаздел1.Области["П000010002003_" + ОкончаниеИмениОбласти].Значение = ТекСтр.ОКАТО;
		Если ТекСтр.Налог > 0 Тогда
			мРаздел1.Области["П000010003003_" + ОкончаниеИмениОбласти].Значение = ТекСтр.Налог;
		Иначе
			мРаздел1.Области["П000010004003_" + ОкончаниеИмениОбласти].Значение = -ТекСтр.Налог;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",			"1153005");
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ГодПериодОтч",	Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	Параметры.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("ВидДок",		Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	Параметры.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	Параметры.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	Параметры.Вставить("ИННОрг",		СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	Параметры.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РазложитьФИО(Титульный.НаимОрг);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух, ТелБух");
	Если Параметры.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		Параметры.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		Параметры.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОИП.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		Параметры.Вставить("ТелОтв",        ?(Параметры.Свойство("ТелОрг"), Параметры.ТелОрг, ""));
	Иначе
		ФИОБух = РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		Параметры.Вставить("ДолжОтв",		"Главный бухгалтер");
		Параметры.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОБух.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		Параметры.Вставить("ТелОтв",        СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	Параметры.Вставить("ИмяФайлаСхемы",				"NO_ZEMND_1_075_00_05_01_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_ZEMND");
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ЗемНалНД");
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	КБКОКАТОРаздела1 = Новый ТаблицаЗначений;
	КБКОКАТОРаздела1.Колонки.Добавить("ОКАТО");
	КБКОКАТОРаздела1.Колонки.Добавить("КБК");
	КБКОКАТОРаздела1.Колонки.Добавить("НомерЛиста");
	КБКОКАТОРаздела1.Колонки.Добавить("НомерПарыКБКОКАТО");
	
	КБКОКАТОРаздела2 = Новый ТаблицаЗначений;
	КБКОКАТОРаздела2.Колонки.Добавить("ОКАТО");
	КБКОКАТОРаздела2.Колонки.Добавить("КБК");
	КБКОКАТОРаздела2.Колонки.Добавить("НомерЛиста");
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("250");
	ВозможныеКодыПоМесту.Добавить("270");
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	//Если ПустаяСтрока(Параметры.КППОрг) Тогда
	//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
	//	СтатусПроверки = Ложь;
	//КонецЕсли;
	Если Параметры.ПериодОтч <> "34" Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Значение кода налогового периода должно быть равно ""34""!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(Параметры.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Параметры.ТипПодписанта = "2" И ПустаяСтрока(Параметры.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		ИндексЛиста = Раздел1.Индекс(Лист) + 1;
		Для Инд = 1 По 5 Цикл
			ТекКБК = СокрЛП(ДанныеЛиста["П000010001003_" + Инд]);
			ТекОКАТО = СокрЛП(ДанныеЛиста["П000010002003_" + Инд]);
			Если НЕ ПустаяСтрока(ТекКБК) ИЛИ НЕ ПустаяСтрока(ТекОКАТО) Тогда
				НовСтр = КБКОКАТОРаздела1.Добавить();
				НовСтр.ОКАТО = ТекОКАТО;
				НовСтр.КБК = ТекКБК;
				НовСтр.НомерЛиста = Раздел1.Индекс(Лист) + 1;
				НовСтр.НомерПарыКБКОКАТО = Инд;
				ДлинаКБК = СтрДлина(ТекКБК);
				Если ДлинаКБК <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаКБК = 0, "", " верно") + " задан КБК!", "Раздел1", "П000010001003_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаОКАТО = СтрДлина(ТекОКАТО);
				Если ДлинаОКАТО <> 11 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаОКАТО = 0, "", " верно") + " задан код по ОКАТО!", "Раздел1", "П000010002003_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если КБКОКАТОРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов по ОКАТО и КБК в разделе 1!", "Раздел1", "П000010001003_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого Лист2 Из Раздел2 Цикл
		
		ДанныеЛиста2 = Лист2.Данные;
		НомерЛиста = Раздел2.Индекс(Лист2) + 1;
		
		Если 	ЗначениеЗаполнено(ДанныеЛиста2.П000020000100) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020003003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020001003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020002003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020004003) ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020005003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020006003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020006003_Знам)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020020003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020017003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020019003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020007003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020008003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020009003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020010003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020011003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020012003_Знам)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020013003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020014003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020015003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020016003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020021003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020023003)
			ИЛИ	ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020028003) ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020029003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020024003) ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020025003)
			ИЛИ	ЗначениеЗаполнено(ДанныеЛиста2.П000020026003) ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020027003) Тогда
			
			НовСтр = КБКОКАТОРаздела2.Добавить();
			НовСтр.ОКАТО = СокрЛП(ДанныеЛиста2.П000020002003);
			НовСтр.КБК = СокрЛП(ДанныеЛиста2.П000020001003);
			НовСтр.НомерЛиста = Раздел2.Индекс(Лист2) + 1;
					
			Если ПустаяСтрока(ДанныеЛиста2.П000020000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не указан кадастровый номер земельного участка!", "Раздел2", "П000020000100", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020001003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020001003));
			Если ДлинаП000020001003 <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020001003 = 0, "", "верно") + " указано значение кода бюджетной классификации!", "Раздел2", "П000020001003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020002003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020002003));
			Если ДлинаП000020002003 <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002003 = 0, "", "верно") + " указано значение кода по ОКАТО!", "Раздел2", "П000020002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020003003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020003003));
			Если ДлинаП000020003003 <> 12 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020003003 = 0, "", "верно") + " указано значение показателя ""Категория земель (код)""!", "Раздел2", "П000020003003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначП000020004003 = ДанныеЛиста2.П000020004003;
			ДлинаП000020004003 = СтрДлина(СокрЛП(ЗначП000020004003));
			Если ДлинаП000020004003 <> 0 И ЗначП000020004003 <> "1" И ЗначП000020004003 <> "2" Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно указано значение периода строительства!", "Раздел2", "П000020004003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка060Числитель = ДанныеЛиста2.П000020006003_Числ;
			Строка060Знаменатель = ДанныеЛиста2.П000020006003_Знам;
			Если Строка060Числитель <> 0 И Строка060Знаменатель = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан знаменатель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "П000020006003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель = 0 И Строка060Знаменатель <> 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан числитель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "П000020006003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель > Строка060Знаменатель Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 числитель в доле налогоплательщика в праве на земельный участок не может быть больше знаменателя!", "Раздел2", "П000020006003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020007003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020007003));
			Если ДлинаП000020007003 <> 0 И ДлинаП000020007003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 070!", "Раздел2", "П000020007003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020007003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020008003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 070!", "Раздел2", "П000020007003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020009003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020009003));
			Если ДлинаП000020009003 <> 0 И ДлинаП000020009003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 090!", "Раздел2", "П000020009003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020009003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020010003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 090!", "Раздел2", "П000020009003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020011003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020011003));
			Если ДлинаП000020011003 <> 0 И ДлинаП000020011003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 110!", "Раздел2", "П000020011003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020011003 = 0 И (ЗначениеЗаполнено(ДанныеЛиста2.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020012003_Знам)) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 110!", "Раздел2", "П000020011003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка120Числитель = ДанныеЛиста2.П000020012003_Числ;
			Строка120Знаменатель = ДанныеЛиста2.П000020012003_Знам;
			Если Строка120Числитель <> 0 И Строка120Знаменатель = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан знаменатель в значении доли необлагаемой площади земельного участка!", "Раздел2", "П000020012003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка120Числитель = 0 И Строка120Знаменатель <> 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан числитель в значении доли необлагаемой площади земельного участка!", "Раздел2", "П000020012003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка120Числитель > Строка120Знаменатель Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 числитель в значении доли необлагаемой площади земельного участка не может быть больше знаменателя!", "Раздел2", "П000020012003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020013003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020013003));
			Если ДлинаП000020013003 <> 0 И ДлинаП000020013003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 130!", "Раздел2", "П000020013003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020013003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020014003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 130!", "Раздел2", "П000020013003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020015003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020015003));
			Если ДлинаП000020015003 <> 0 И ДлинаП000020015003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 150!", "Раздел2", "П000020015003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020015003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020016003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 150!", "Раздел2", "П000020015003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020024003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020024003));
			Если ДлинаП000020024003 <> 0 И ДлинаП000020024003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020024003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020024003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020025003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020024003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020026003 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020026003));
			Если ДлинаП000020026003 <> 0 И ДлинаП000020026003 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020026003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020026003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2.П000020027003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020026003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КБКОКАТОРаздела2.Количество() = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов по ОКАТО и КБК  в разделе 2!", "Раздел2", "П000020001003", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого ЕдКБКОКАТОРаздела1 Из КБКОКАТОРаздела1 Цикл
		Если КБКОКАТОРаздела2.НайтиСтроки(Новый Структура("КБК, ОКАТО", ЕдКБКОКАТОРаздела1.КБК, ЕдКБКОКАТОРаздела1.ОКАТО)).Количество() = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Для значений кода по ОКАТО """ + ЕдКБКОКАТОРаздела1.ОКАТО + """ и КБК """ + ЕдКБКОКАТОРаздела1.КБК + """ на странице " + ЕдКБКОКАТОРаздела1.НомерЛиста + " раздела 1 отсутствуют заполненные экземпляры раздела 2!", "Раздел1", "П000010002003_" + ЕдКБКОКАТОРаздела1.НомерПарыКБКОКАТО, ЕдКБКОКАТОРаздела1.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЕдКБКОКАТОРаздела2 Из КБКОКАТОРаздела2 Цикл
		Если КБКОКАТОРаздела1.НайтиСтроки(Новый Структура("КБК, ОКАТО", ЕдКБКОКАТОРаздела2.КБК, ЕдКБКОКАТОРаздела2.ОКАТО)).Количество() = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Для значений кода по ОКАТО """ + ЕдКБКОКАТОРаздела2.ОКАТО + """ и КБК """ + ЕдКБКОКАТОРаздела2.КБК + """ на странице " + ЕдКБКОКАТОРаздела2.НомерЛиста + " раздела 2 отсутствуют соответствующие значения в разделе 1!", "Раздел2", "П000020001003", ЕдКБКОКАТОРаздела2.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	УзелСумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	УзелСумПУ = ПолучитьПодчиненныйЭлемент(УзелСумНалПУ, "СумПУ");
	
	Для Каждого ЛистРаздела1 Из Раздел1 Цикл
		
		ДанныеЛистаРаздела1 = ЛистРаздела1.Данные;
		Если НЕ ПустаяСтрока(ДанныеЛистаРаздела1.П000010000100) Тогда
			ЗадатьЗначениеЭлемента(УзелСумНалПУ, "НаимСРП", СокрЛП(ДанныеЛистаРаздела1.П000010000100));
		КонецЕсли;
		
		Для БлокРаздела1 = 1 По 5 Цикл
			
			КБК = СокрЛП(ДанныеЛистаРаздела1["П000010001003_" + БлокРаздела1]);
			ОКАТО = СокрЛП(ДанныеЛистаРаздела1["П000010002003_" + БлокРаздела1]);
			СумНал = ДанныеЛистаРаздела1["П000010003003_" + БлокРаздела1];
			СумНалУменьш = ДанныеЛистаРаздела1["П000010004003_" + БлокРаздела1];
			
			Если НЕ ЗначениеЗаполнено(КБК) ИЛИ НЕ ЗначениеЗаполнено(ОКАТО) Тогда
				Продолжить;
			КонецЕсли;
			
			// выгружаем данные раздела 1
			УзелРаздел1 = СкопироватьУзел(УзелСумНалПУ, УзелСумПУ);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "КБК", КБК);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "ОКАТО", ОКАТО);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "НалПУ", СумНал - СумНалУменьш);
			
			// выгружаем соответствующие данные раздела 2
			УзелРасчПлатЗН = ПолучитьПодчиненныйЭлемент(УзелРаздел1, "РасчПлатЗН");
			
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
				Если КБК <> СокрЛП(ДанныеЛистаРаздела2.П000020001003) ИЛИ ОКАТО <> СокрЛП(ДанныеЛистаРаздела2.П000020002003) Тогда
					Продолжить;
				КонецЕсли;
				
				УзелРаздел2 = СкопироватьУзел(УзелРаздел1, УзелРасчПлатЗН);
				ЗаполнитьДаннымиУзел(ДанныеЛистаРаздела2, УзелРаздел2);
				
				// выгружаем значения долей
				Если ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020006003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020006003_Знам) Тогда
					ЗадатьЗначениеЭлемента(УзелРаздел2, "ДоляЗУ", Формат(ДанныеЛистаРаздела2.П000020006003_Числ, "ЧН=0; ЧГ=") + "/" + Формат(ДанныеЛистаРаздела2.П000020006003_Знам, "ЧН=0; ЧГ="));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020012003_Знам) Тогда
					УзелЛьгот387_2Пл = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "ОпрНалБаза"), "Льгот387_2Пл");
					ЗадатьЗначениеЭлемента(УзелЛьгот387_2Пл, "ДоляПлЗУ", Формат(ДанныеЛистаРаздела2.П000020012003_Числ, "ЧН=0; ЧГ=") + "/" + Формат(ДанныеЛистаРаздела2.П000020012003_Знам, "ЧН=0; ЧГ="));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
////////////////////////////////////////////////////////////////////////////////

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура Печать(ВидПечати) Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный",	"МЧБ_2009Кв1_1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",		"МЧБ_2009Кв1_2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",		"МЧБ_2009Кв1_3");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 0;
	МакетМЧБ.ПолеСправа = 0;
	МакетМЧБ.ПолеСнизу = 0;
	МакетМЧБ.ПолеСлева = 0;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	ВывестиНаПечатьЛистРаздела(Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
	
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// особая обработка ОКВЭД
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
						ЗначениеВыведено = Истина;
					КонецЕсли;
				Иначе
				
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
					Дополнять_ = НЕ (Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) = "НомСтр"
								ИЛИ Лев(РезультатПоиска.Имя, СтрДлина("СоставленаНа")) = "СоставленаНа");
				Иначе
					Дополнять_ = Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) <> "НомСтр";
				КонецЕсли;
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, , Дополнять_);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если (Область.Имя = "П000020018003_3" ИЛИ Область.Имя = "П000020022003_3") И Значение = "1" Тогда
		Значение = "1.0"
	КонецЕсли;
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1R11C3ПриИзменении(Элемент)
	
	Перем ТаблицаСтраницРаздела;

	// Изменим во всех листах многостраничного документа.
	СРП = мРаздел1.Области.П000010000100.Значение;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		Если Страница.Данные <> Неопределено Тогда
			Страница.Данные.П000010000100 = СРП;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйR21C27ПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Элемент.Значение) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Элемент.Значение) Тогда
		Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
		Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
		Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2009Кв1";
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

мСтруктураМногострочныхРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздела.Скопировать());

// Версия формы
мВерсияФормы = "01/01/2009";

// Код отчета, равен КНД
мКодОтчета = "1153005";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.01", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
