////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;

// Новый переменные
Перем мКБКРаздел1_1;
Перем мКБКРаздел1_2;
Перем мКБКРаздел1_3;
Перем мКБКРаздел1_4;

Перем мОКАТОРаздел1_1;
Перем мОКАТОРаздел1_2;
Перем мОКАТОРаздел1_3;
Перем мОКАТОРаздел1_4;

Перем мСуммаРаздел1_1;
Перем мСуммаРаздел1_2;
Перем мСуммаРаздел1_3;
Перем мСуммаРаздел1_4;

Перем мСумма2Раздел1_1;
Перем мСумма2Раздел1_2;
Перем мСумма2Раздел1_3;
Перем мСумма2Раздел1_4;

// Новый переменные окончание

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;
// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;
// Список льгот, строка 220
// данные в мекете Списки

// Список КБК после 2004
Перем мКодыБюджетнойКлассификации2005;
Перем мКодыБюджетнойКлассификации2006;
Перем мКодыБюджетнойКлассификации2007;

Перем мКатегорииЗемли;
Перем мЛьготы;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем МногострочныеИсключения;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мНеВызыватьРасчет;

Перем мДанныеОтчета Экспорт;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь) Экспорт

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000010000100";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2_1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020001000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда

		// Первая пара строк 030 и 040.

		// Если первая 40-я строка не равна 0, тогда первая 30-я строка может быть ноль.
		Если мСумма2Раздел1_1 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_1_", 15, мСуммаРаздел1_1, Истина, Истина);
		Иначе
			// Если 40-я строка = 0, тогда 30-я показываться не должна.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_1_", 15, мСуммаРаздел1_1, Истина);
		КонецЕсли;
		// Если первая 30-я строка не равна 0, тогда первая 40-я может быть ноль.
		Если мСуммаРаздел1_1 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_1_", 15, мСумма2Раздел1_1, Истина, Истина);
		Иначе
			// Если 30-я строка = 0, тогда 40-я показываться не должна.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_1_", 15, мСумма2Раздел1_1, Истина);
		КонецЕсли;


		// Вторая пара строк 030 и 040.
		Если мСумма2Раздел1_2 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_2_", 15, мСуммаРаздел1_2, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_2_", 15, мСуммаРаздел1_2, Истина);
		КонецЕсли;
		Если мСуммаРаздел1_2 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_2_", 15, мСумма2Раздел1_2, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_2_", 15, мСумма2Раздел1_2, Истина);
		КонецЕсли;

		// Третья пара строк 030 и 040.
		Если мСумма2Раздел1_3 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_3_", 15, мСуммаРаздел1_3, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_3_", 15, мСуммаРаздел1_3, Истина);
		КонецЕсли;
		Если мСуммаРаздел1_3 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_3_", 15, мСумма2Раздел1_3, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_3_", 15, мСумма2Раздел1_3, Истина);
		КонецЕсли;

		// Четвертая пара строк 030 и 040.
		Если мСумма2Раздел1_4 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_4_", 15, мСуммаРаздел1_4, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010003000_4_", 15, мСуммаРаздел1_4, Истина);
		КонецЕсли;
		Если мСуммаРаздел1_4 <> 0 Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_4_", 15, мСумма2Раздел1_4, Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1","П000010004000_4_", 15, мСумма2Раздел1_4, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Если Найти(ИмяРаздела, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницы = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницы = ИмяРаздела;
	КонецЕсли;

	Если ИмяСтраницы = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли ИмяСтраницы = "Раздел1" Тогда

		мКБКРаздел1_1 = "";
		мКБКРаздел1_2 = "";
		мКБКРаздел1_3 = "";
		мКБКРаздел1_4 = "";

		мОКАТОРаздел1_1 = "";
		мОКАТОРаздел1_2 = "";
		мОКАТОРаздел1_3 = "";
		мОКАТОРаздел1_4 = "";

		мСуммаРаздел1_1 = 0;
		мСуммаРаздел1_2 = 0;
		мСуммаРаздел1_3 = 0;
		мСуммаРаздел1_4 = 0;

		мСумма2Раздел1_1 = 0;
		мСумма2Раздел1_2 = 0;
		мСумма2Раздел1_3 = 0;
		мСумма2Раздел1_4 = 0;

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел1_1", мКБКРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_2", мКБКРаздел1_2);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_3", мКБКРаздел1_3);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_4", мКБКРаздел1_4);
		
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1_1", мОКАТОРаздел1_1);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1_2", мОКАТОРаздел1_2);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1_3", мОКАТОРаздел1_3);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1_4", мОКАТОРаздел1_4);

		СтруктураДанныхПоля.Вставить("СуммаРаздел1_1", мСуммаРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаРаздел1_2", мСуммаРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаРаздел1_3", мСуммаРаздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаРаздел1_4", мСуммаРаздел1_4);

		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_1", мСумма2Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_2", мСумма2Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_3", мСумма2Раздел1_3);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_4", мСумма2Раздел1_4);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда
		Пар1 = Неопределено;
		Пар2 = Неопределено;
		СтруктураДанныхПоля.Свойство("П000020004000_1", Пар1);
		СтруктураДанныхПоля.Свойство("П000020004000_2", Пар2);
		Если Пар1 = "V" Тогда
			СтруктураДанныхПоля.Вставить("П000020004000", "1");
		ИначеЕсли Пар2 = "V" Тогда
			СтруктураДанныхПоля.Вставить("П000020004000", "2");
		Иначе
		// Пока не предусмотрено форматом, ставим пустышку
			СтруктураДанныхПоля.Вставить("П000020004000", "");
		КонецЕсли;

		Если (СтруктураДанныхПоля.Строка060Числитель = 0)
		 Или (СтруктураДанныхПоля.Строка060Знаменатель = 0) Тогда
			СтруктураДанныхПоля.Вставить("_ПоказательДробь", "");
		Иначе
			Числитель = Формат(СтруктураДанныхПоля.Строка060Числитель, "ЧГ=0");
			Знаменатель = Формат(СтруктураДанныхПоля.Строка060Знаменатель, "ЧГ=0");
			СтруктураДанныхПоля.Вставить("_ПоказательДробь", Числитель + "/" + Знаменатель);
		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло18   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло18   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло18   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

								ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "П000020004000" Тогда

		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1_1" Тогда

		мКБКРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1_2" Тогда

		мКБКРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1_3" Тогда

		мКБКРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1_4" Тогда

		мКБКРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1_1" Тогда

		мОКАТОРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1_2" Тогда

		мОКАТОРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1_3" Тогда

		мОКАТОРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1_4" Тогда

		мОКАТОРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаРаздел1_1" Тогда

		мСуммаРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаРаздел1_2" Тогда

		мСуммаРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаРаздел1_3" Тогда

		мСуммаРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаРаздел1_4" Тогда

		мСуммаРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_1" Тогда

		мСумма2Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_2" Тогда

		мСумма2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_3" Тогда

		мСумма2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_4" Тогда

		мСумма2Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	Если НомерКвартала = "4" Тогда
		мТитульный.Области.НалогПериод.Значение = "0";
	КонецЕсли;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "        ";
	ДатаПодписиИП      = "        ";
	ДатаПодписиУпП     = "        ";

	СтрДатаподписи = Формат(ДатаПодписи, "ДФ = 'ддММгггг'");
	Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргДиректор.Значение)) Тогда
		ДатаПодписиРук = СтрДатаПодписи;
	КонецЕсли;

	Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргУп.Значение)) Тогда
		ДатаПодписиУпП = СтрДатаПодписи;
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Если ЧП Тогда
		ДатаПодписиИП = СтрДатаПодписи;
	КонецЕсли;

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПодписиРук", 8, ДатаПодписиРук);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПодписиИП", 8, ДатаПодписиИП);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПодписиОргУп", 8, ДатаПодписиУпП);

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиРук, "ДатаПодписи1_",, "Раздел1",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиИП, "ДатаПодписи2_",, "Раздел1",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпП, "ДатаПодписи3_",, "Раздел1",, Ложь);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ОКВЭДКвадратикиТочкиРазделения, ТелОрганизации, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИО";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
	// Процедура "Заглушка". Для совместимости в других механизмах.
	Возврат;
КонецПроцедуры // УправлениеЛистами

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КБКРаздел1_1" Тогда

		Рез = мКБКРаздел1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_2" Тогда
		Рез = мКБКРаздел1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_3" Тогда
		Рез = мКБКРаздел1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_4" Тогда
		Рез = мКБКРаздел1_4;

	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1_1" Тогда
		Рез = мОКАТОРаздел1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1_2" Тогда
		Рез = мОКАТОРаздел1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1_3" Тогда
		Рез = мОКАТОРаздел1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1_4" Тогда
		Рез = мОКАТОРаздел1_4;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаРаздел1_1" Тогда
		Рез = мСуммаРаздел1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаРаздел1_2" Тогда
		Рез = мСуммаРаздел1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаРаздел1_3" Тогда
		Рез = мСуммаРаздел1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаРаздел1_4" Тогда
		Рез = мСуммаРаздел1_4;

	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_1" Тогда
		Рез = мСумма2Раздел1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_2" Тогда
		Рез = мСумма2Раздел1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_3" Тогда
		Рез = мСумма2Раздел1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_4" Тогда
		Рез = мСумма2Раздел1_4;

	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		// !!! особая обработка печати раздела 2
		Если Парам1.ИмяТабличногоПоля = "ПолеТабличногоДокументаРаздел2" Тогда
			
			// перед печатью сохраняем состояние табличного документа во временную переменную
			// и удаляем область строки с показателем П000020002500
			ТаблДокРаздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2.ПолучитьОбласть();
			ВертикальнаяКоординатаОбласти = ЭлементыФормы.ПолеТабличногоДокументаРаздел2.Области.П000020002500.Верх;
			ОбластьСтрокаКБК = ЭлементыФормы.ПолеТабличногоДокументаРаздел2.Область(ВертикальнаяКоординатаОбласти, 0, ВертикальнаяКоординатаОбласти);
			ЭлементыФормы.ПолеТабличногоДокументаРаздел2.УдалитьОбласть(ОбластьСтрокаКБК, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			// вызываем процедуру формирования печатной формы
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
			
			// после печати восстанавливаем состояние табличного документа
			ЭлементыФормы.ПолеТабличногоДокументаРаздел2.Очистить();
			ЭлементыФормы.ПолеТабличногоДокументаРаздел2.Вывести(ТаблДокРаздел2);
			
		Иначе
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если ПолучитьСвойствоРаздела(ВыбТабличноеПоле.Имя, "ПредставлениеДанных") Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ВыбТабличноеПоле.Имя);
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем СохранитьОшибка;
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
 
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
				// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
				// данные многостраничных разделов уже были выведены в соответствующие листы
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ИмпортДанныхИзАвансовогоРасчета
// Процедура импортирует сведения из авансового расчета по земельномун алогу за 9 мес. текущего отчетного года.
//
Процедура ИмпортДанныхИзАвансовогоРасчета()
	Перем ТаблицаМногостраничногоДокумента;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетАвансыЗемля");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -3)));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -3)));
	

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	Если НЕ ПустаяСтрока(КодИФНС) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	НайденныеАвансовыеРасчеты = Запрос.Выполнить().Выгрузить();
	Если НайденныеАвансовыеРасчеты.Количество() = 0 Тогда
		Сообщить("Не найдены авансовые расчеты по земельному налогу за 3 квартал по заданной организации и коду ИФНС.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	Если НайденныеАвансовыеРасчеты.Количество() > 1 Тогда
		НайденныеАвансовыеРасчеты.Колонки.Добавить("Представление",,"Авансовые расчеты по земельному налогу", 100);
		Для каждого Отчет Из НайденныеАвансовыеРасчеты Цикл
			Отчет.Представление = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Отчет.Ссылка);
		КонецЦикла;
		НайденныеРасчеты = НайденныеАвансовыеРасчеты.Скопировать();
		НайденныеРасчеты.Колонки.Удалить("Ссылка");
		ВыбранныйАвансовыйРасчет = НайденныеРасчеты.ВыбратьСтроку("Выбор авансового расчета по земельному налогу");
		Если ВыбранныйАвансовыйРасчет = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АвансовыйРасчет = НайденныеАвансовыеРасчеты[(НайденныеРасчеты.Индекс(ВыбранныйАвансовыйРасчет))].Получить(0);
	Иначе
		АвансовыйРасчет = НайденныеАвансовыеРасчеты[0].Получить(0);
	КонецЕсли;
	Состояние("Импорт данных из авансового расчета ...");
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

	СтруктураДанных = АвансовыйРасчет.ДанныеОтчета.Получить();
	ТаблицаРаздела2АвансовогоОтчета = СтруктураДанных.ДанныеМногостраничныхРазделов.Раздел2.Скопировать();
	ПервыйПроход = Истина;
	Для каждого Экз Из ТаблицаРаздела2АвансовогоОтчета Цикл
		Если НЕ ПервыйПроход Тогда
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
			ВставитьДополнительнуюСтраницу("Раздел2");
		КонецЕсли;
		// Кадастровый номер, стр. 010.
		мРаздел2.Области.П000020001000.Значение = Экз.Данные.П000020001000;
		// Код по ОКАТО, стр. 020.
		мРаздел2.Области.П000020002000.Значение = Экз.Данные.П000020002000;
		// Категория земель, стр. 030.
		мРаздел2.Области.П000020003000.Значение = Экз.Данные.П000020003000;
		// Период проектирования и строительства, стр. 040.
		мРаздел2.Области.П000020004000_1.Значение = Экз.Данные.П000020004000_1;
		// Период проектирования и строительства, стр. 040.
		мРаздел2.Области.П000020004000_2.Значение = Экз.Данные.П000020004000_2;
		// Кадастровая стоимость зем. участка, стр. 050.
		мРаздел2.Области.П000020005000.Значение = Экз.Данные.П000020005000;
		// Доля налогоплательщика в праве на земельный участок, стр. 060.
		Попытка
		// Если пытается импорт из авансового расчета другой формы. Нет показателя числителя и знаменателя.
		мРаздел2.Области.Строка060Числитель.Значение = Экз.Данные.Строка060Числитель;
		мРаздел2.Области.Строка060Знаменатель.Значение = Экз.Данные.Строка060Знаменатель;
		Исключение
		КонецПопытки;

		// Налоговая ставка в %. Строка 220, в расчете строка 200.
		мРаздел2.Области.П000020022000.Значение = Экз.Данные.П000020020000;

		Расчет("Раздел2");
		ПервыйПроход = Ложь;
	КонецЦикла;
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	Сообщить("Импорт данных из авансового отчета завершен успешно.", СтатусСообщения.Обычное);

КонецПроцедуры // ИмпортДанныхИзАвансовогоРасчета

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если (ФлажокОтклАвтоРасчет) Или (мРежимПечати) Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		П000020006000 = мРаздел2.Области.Строка060Числитель.Значение / ?(мРаздел2.Области.Строка060Знаменатель.Значение = 0, 1, мРаздел2.Области.Строка060Знаменатель.Значение);
		Если П000020006000 > 1 Тогда
			Если мРаздел2.Области.Строка060Знаменатель.Значение = 0 Тогда
				П000020006000 = 0;
				мРаздел2.Области.Строка060Числитель.Значение = 0;
				Сообщить("Доля налогоплательщика в праве на земельный участок не может превышать 1.", СтатусСообщения.Информация);
				Сообщить("По строке 060 не указан знаменатель дроби.", СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;

		// Коэффициент К1 определяется как отношение числа полных месяцев, 
		// в течение которых отсутствует налоговая льгота, к числу календарных 
		// месяцев в налоговом периоде.
		//
		
		Если Год(мДатаКонцаПериодаОтчета) >= 2008 Тогда
			ЧислоМесяцев = 12;
		Иначе
			ЧислоМесяцев = Месяц(мДатаКонцаПериодаОтчета);
		КонецЕсли;
		
		Если мРаздел2.Области.П000020019000.Значение = 0 Тогда
			П000020020000 = 1;
		Иначе			
			П000020020000 = Макс((мРаздел2.Области.П000020023000.Значение - мРаздел2.Области.П000020019000.Значение) / ЧислоМесяцев, 0);
		КонецЕсли;                                                                                     		
		
		мРаздел2.Области.П000020020000.Значение = П000020020000;

		мРаздел2.Области.П000020021000.Значение = 0;

		Если РегламентированнаяОтчетность.ПустоеЗначение(П000020006000) = 1 Тогда
			Значение = мРаздел2.Области.П000020005000.Значение;
		Иначе
			Значение = Окр(мРаздел2.Области.П000020005000.Значение * (П000020006000));
		КонецЕсли;

		Если РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020012000.Значение + мРаздел2.Области.П000020016000.Значение + мРаздел2.Области.П000020018000.Значение) = 1 Тогда

			мРаздел2.Области.П000020021000.Значение = Значение - (мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение);

		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение + мРаздел2.Области.П000020012000.Значение + мРаздел2.Области.П000020018000.Значение) = 1 Тогда

			мРаздел2.Области.П000020021000.Значение = Значение - мРаздел2.Области.П000020016000.Значение;

		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение + мРаздел2.Области.П000020012000.Значение + мРаздел2.Области.П000020016000.Значение) = 1 Тогда

			мРаздел2.Области.П000020021000.Значение = Значение - мРаздел2.Области.П000020018000.Значение;

		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение + мРаздел2.Области.П000020016000.Значение + мРаздел2.Области.П000020018000.Значение) = 1 Тогда

			мРаздел2.Области.П000020021000.Значение = Значение - Окр(Значение * (мРаздел2.Области.П000020012000.Значение) * (1 - мРаздел2.Области.П000020020000.Значение));

		ИначеЕсли РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение + мРаздел2.Области.П000020012000.Значение + мРаздел2.Области.П000020016000.Значение + мРаздел2.Области.П000020018000.Значение) = 1 Тогда

			мРаздел2.Области.П000020021000.Значение = Значение - Окр(Значение * (1 - мРаздел2.Области.П000020020000.Значение));

		КонецЕсли;

		мРаздел2.Области.П000020021000.Значение = Макс(мРаздел2.Области.П000020021000.Значение, 0);
		// Если размер не облагаемой налогом суммы, указанной по строке с кодом 080,
		// либо по строке с кодом 100 или сумма показателей, указанных по строкам 
		// с кодом 080 и кодом 100, превышает размер налоговой базы, определенной 
		// в отношении земельного участка, налоговая база принимается равной нулю 
		// и указывается по строке с кодом 210.
		//
		//Если мРаздел2.Области.П000020008000.Значение + мРаздел2.Области.П000020010000.Значение > мРаздел2.Области.П000020021000.Значение Тогда
		//	мРаздел2.Области.П000020021000.Значение = 0;
		//КонецЕсли;

		// Коэффициент К2 определяется как отношение числа полных месяцев, 
		// в течение которых данный земельный участок находился в собственности
		// (постоянном (бессрочном) пользовании, пожизненном наследуемом владении) 
		// налогоплательщика, указанных по строке с кодом 230, к числу календарных 
		// месяцев в налоговом периоде.
		//
		мРаздел2.Области.П000020024000.Значение = мРаздел2.Области.П000020023000.Значение / Месяц(мДатаКонцаПериодаОтчета);

		// Сумма исчисленного налога за налоговый период рассчитывается как 
		// произведение налоговой базы, указанной по строке с кодом 210, 
		// налоговой ставки, указанной по строке с кодом 220, и коэффициента К2, 
		// указанного по строке с кодом 240, деленного на сто.
		// Если декларация представляется налогоплательщиком в отношении 
		// земельных участков, приобретенных в собственность на условиях 
		// осуществления на них жилищного строительства, то по строке с кодом 250
		// отражается исчисленная сумма налога, которая определяется как произведение 
		// значений строк с кодами 210, 220 и 240, деленного на сто, и коэффициента 2, 
		// если по строке с кодом 040 соответствующий квадрат ("3 года") отмечен 
		// знаком "V", или коэффициента 4, если по строке с кодом 040 
		// соответствующий квадрат ("свыше 3 лет") отмечен знаком "V".
		//
		Коэффициент = 1;
		Коэффициент = ?(РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020004000_1.Значение), Коэффициент, 2);
		Коэффициент = ?(РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2.Области.П000020004000_2.Значение), Коэффициент, 4);

		мРаздел2.Области.П000020025000.Значение = мРаздел2.Области.П000020021000.Значение * мРаздел2.Области.П000020022000.Значение * (мРаздел2.Области.П000020024000.Значение / 100) * Коэффициент;

		// Исчисленная сумма налога, подлежащая к уплате в бюджет за налоговый период, 
		// определяется как разность значений строк с кодами 250 и 270.
		//
		мРаздел2.Области.П000020028000.Значение = мРаздел2.Области.П000020025000.Значение - мРаздел2.Области.П000020027000.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел2");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	мБезОткрытияФормы = БезОткрытияФормы;

	мНеВызыватьРасчет = Ложь;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2      = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// мРаздел2.Области.П000020006000.ЭлементУправления.МинимальноеЗначение = 0;
	// мРаздел2.Области.П000020006000.ЭлементУправления.МаксимальноеЗначение = 1;

	мРаздел2.Области.П000020012000.ЭлементУправления.МинимальноеЗначение = 0;
	мРаздел2.Области.П000020012000.ЭлементУправления.МаксимальноеЗначение = 1;

	мРаздел2.Области.П000020014000.ЭлементУправления.МинимальноеЗначение = 0;
	мРаздел2.Области.П000020014000.ЭлементУправления.МаксимальноеЗначение = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;
	мРежимПечати = Ложь;

	// Получаем список налоговых льгот, кодов КБК и КБК 2005

	Если НЕ БезОткрытияФормы Тогда
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		ЗагрузитьПоказателиИзМакета("Льготы");
		ЗагрузитьПоказателиИзМакета("КатегорииЗемли");
		ЗагрузитьПоказателиИзМакета("КодыКБК2007");
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);
	КонецЕсли;

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			
			мТитульный.Области.ВидДок.Значение = "1";

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			// Не убирать расчет при открытии, специально сделано для заполнения некоторых параметров
			// на листе раздела 2
			Расчет("Раздел2");
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура СформироватьРаздел1()
	
	РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, "Раздел1");
	
	ДанныеДляЗаполнения = Новый ТаблицаЗначений;
	ДанныеДляЗаполнения.Колонки.Добавить("КБК");
	ДанныеДляЗаполнения.Колонки.Добавить("ОКАТО");
	ДанныеДляЗаполнения.Колонки.Добавить("ИсчисленнаяСуммаНалога");
	ДанныеДляЗаполнения.Колонки.Добавить("СуммаАвансовыхПлатежей");

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);

	ТаблицаСтраницРаздела = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	КБК = "";
	ОКАТО = "";
	ИсчисленнаяСуммаНалога = 0;
	СуммаАвансовыхПлатежей = 0;

	Для Инд = 0 По ТаблицаСтраницРаздела.Количество() - 1 Цикл

		ТекЭкземпляр = ТаблицаСтраницРаздела[Инд].Данные;
		//ТекЭкземплярДопСтр  =  ТаблицаСтраницРаздела[Инд].ДанныеДопСтрок;

		ТекЭкземпляр.Свойство("П000020002500" , КБК);
		ТекЭкземпляр.Свойство("П000020002000" , ОКАТО);
		ТекЭкземпляр.Свойство("П000020028000" , ИсчисленнаяСуммаНалога);
		ТекЭкземпляр.Свойство("П000020029000" , СуммаАвансовыхПлатежей);

		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ОКАТО) ИЛИ НЕ РегламентированнаяОтчетность.ПустоеЗначение(КБК) Тогда

			НовСтрока = ДанныеДляЗаполнения.Добавить();
			НовСтрока.ОКАТО     = ОКАТО;
			НовСтрока.КБК     = КБК;
			НовСтрока.ИсчисленнаяСуммаНалога     = ОкруглитьЧислоПоФормату(ИсчисленнаяСуммаНалога);
			НовСтрока.СуммаАвансовыхПлатежей     = ОкруглитьЧислоПоФормату(СуммаАвансовыхПлатежей);

		КонецЕсли;

	КонецЦикла;

	ДанныеДляЗаполнения.Свернуть("КБК, ОКАТО", "ИсчисленнаяСуммаНалога, СуммаАвансовыхПлатежей");

	Счетчик = 1;
	Для Инд = 0 По ДанныеДляЗаполнения.Количество() - 1 Цикл

		Если Счетчик > 4 Тогда
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
			Счетчик = 1;
		КонецЕсли;

		СуммаНалога = ДанныеДляЗаполнения[Инд].ИсчисленнаяСуммаНалога - ДанныеДляЗаполнения[Инд].СуммаАвансовыхПлатежей;

		Если Счетчик = 1 Тогда 
			мКБКРаздел1_1 = ДанныеДляЗаполнения[Инд].КБК;
			мОКАТОРаздел1_1 = ДанныеДляЗаполнения[Инд].ОКАТО; // ОКАТО
			мСуммаРаздел1_1 = ?(СуммаНалога < 0, 0, СуммаНалога);        // Сумма авансового платежа
			мСумма2Раздел1_1 = ?(СуммаНалога > 0, 0, (-1) * СуммаНалога); // Сумма к уменьшению
		ИначеЕсли Счетчик = 2 Тогда
			мКБКРаздел1_2 = ДанныеДляЗаполнения[Инд].КБК;
			мОКАТОРаздел1_2 = ДанныеДляЗаполнения[Инд].ОКАТО; // ОКАТО
			мСуммаРаздел1_2 = ?(СуммаНалога < 0, 0, СуммаНалога);        // Сумма авансового платежа
			мСумма2Раздел1_2 = ?(СуммаНалога > 0, 0, (-1) * СуммаНалога); // Сумма к уменьшению

		ИначеЕсли Счетчик = 3 Тогда
			мКБКРаздел1_3 = ДанныеДляЗаполнения[Инд].КБК;
			мОКАТОРаздел1_3 = ДанныеДляЗаполнения[Инд].ОКАТО; // ОКАТО
			мСуммаРаздел1_3 = ?(СуммаНалога < 0, 0, СуммаНалога);        // Сумма авансового платежа
			мСумма2Раздел1_3 = ?(СуммаНалога > 0, 0, (-1) * СуммаНалога); // Сумма к уменьшению

		ИначеЕсли Счетчик = 4 Тогда
			мКБКРаздел1_4 = ДанныеДляЗаполнения[Инд].КБК;
			мОКАТОРаздел1_4 = ДанныеДляЗаполнения[Инд].ОКАТО; // ОКАТО
			мСуммаРаздел1_4 = ?(СуммаНалога < 0, 0, СуммаНалога);        // Сумма авансового платежа
			мСумма2Раздел1_4 = ?(СуммаНалога > 0, 0, (-1) * СуммаНалога); // Сумма к уменьшению

		КонецЕсли;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010001000_1_", 20, мКБКРаздел1_1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010001000_2_", 20, мКБКРаздел1_2);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010001000_3_", 20, мКБКРаздел1_3);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010001000_4_", 20, мКБКРаздел1_4);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010002000_1_", 11, мОКАТОРаздел1_1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010002000_2_", 11, мОКАТОРаздел1_2);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010002000_3_", 11, мОКАТОРаздел1_3);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "П000010002000_4_", 11, мОКАТОРаздел1_4);

		// Суммы заполняем отдельной процедурой
		ЗаполнениеЗначенийВКвадратиках("Раздел1");

		Счетчик = Счетчик + 1;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
// Для присвоения показателям отчета вычисленного значения необходимо
// использовать процедуру
//
//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
//
Процедура ЗаполнитьАвто() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Перед заполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	// Очистим декларацию.
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	Расчет("");

	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Массив для отбора по налоговому органу.
	МассивНО = Новый Массив;
	Если НЕ ЗначениеЗаполнено(мСсылкаНО) Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
	ИначеЕсли мСсылкаНО.Код = Организация.КодИМНС Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
		МассивНО.Добавить(мСсылкаНО);
	Иначе
		МассивНО.Добавить(мСсылкаНО);
	КонецЕсли;
	
	// Выборка земельных участков и числа полных месяцев владения ими.
	// При этом если возникновение (прекращение) у налогоплательщика в течение налогового периода 
	// права собственности (постоянного (бессрочного) пользования, пожизненного наследуемого владения) 
	// на земельный участок (его долю) произошло до 15-го числа соответствующего месяца включительно, 
	// за полный месяц принимается месяц возникновения указанных прав. Если возникновение (прекращение)
	// указанных прав произошло после 15-го числа соответствующего месяца, за полный месяц принимается 
	// месяц прекращения указанных прав.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", МассивНО);
	
	Период = НачалоГода(мДатаНачалаПериодаОтчета);
	
	ТекстОбъединяющегоЗапроса = "";
	
	Пока Период <= мДатаКонцаПериодаОтчета Цикл
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(" + Формат(Период, "ДФ=MM") + " КАК ЧИСЛО) КАК НомерМесяца,
		|	РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	NULL КАК НалоговаяЛьготаПоНалоговойБазе,
		|	1 КАК КоличествоМесяцев,
		|	0 КАК КоличествоМесяцевПримененияЛьготы
		|ПОМЕСТИТЬ
		|	ВладениеЗемельнымиУчастками" + Формат(Период, "ДФ=MM") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
		|				ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ, 14),
		|				Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|	ГДЕ
		|		РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу = ИСТИНА
		|		И НалоговыйОрган В (&НалоговыйОрган)
		|
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РегистрацияЗемельныхУчастков.ОсновноеСредство
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|	ГДЕ
		|		РегистрацияЗемельныхУчастков.Организация = &Организация
		|		И РегистрацияЗемельныхУчастков.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ, 14)
		|		И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу = ИСТИНА
		|		И РегистрацияЗемельныхУчастков.НалоговыйОрган В (&НалоговыйОрган)
		|	) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(" + Формат(Период, "ДФ=MM") + " КАК ЧИСЛО) КАК НомерМесяца,
		|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговаяЛьготаПоНалоговойБазе,
		|	0 КАК КоличествоМесяцев,
		|	1 КАК КоличествоМесяцевПримененияЛьготы
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяЛьготаПоНалоговойБазе
		|		ИЗ
		|			РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, -1), МЕСЯЦ),
		|					Организация = &Организация
		|						И НалоговыйОрган В (&НалоговыйОрган)) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|		ГДЕ
		|			РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу = ИСТИНА
		|			И РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияЗемельныхУчастков.ОсновноеСредство,
		|			РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе
		|		ИЗ
		|			РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|		ГДЕ
		|			РегистрацияЗемельныхУчастков.Организация = &Организация
		|			И РегистрацияЗемельныхУчастков.НалоговыйОрган В (&НалоговыйОрган)
		|			И РегистрацияЗемельныхУчастков.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
		|			И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу = ИСТИНА
		|			И РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)
		|		) КАК РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам
		|";
		Запрос.Выполнить();
		
		ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		                              |",
									  "ОБЪЕДИНИТЬ ВСЕ
									  |ВЫБРАТЬ *
		                              |")
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ПОМЕСТИТЬ ВладениеЗемельнымиУчастками
									  |",
									  "")
								  + "ИЗ ВладениеЗемельнымиУчастками" + Формат(Период, "ДФ=MM") + "
									|";
		
		Период = ДобавитьМесяц(Период, 1);	
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Период", КонецГода(мДатаНачалаПериодаОтчета));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВладениеУчастками.ОсновноеСредство,
	|	ЕСТЬNULL(ВладениеУчастками.КоличествоМесяцевВладения, 0) КАК КоличествоМесяцевВладения,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КодКатегорииЗемель,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КБК КАК КБК,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.КадастроваяСтоимость, 0) КАК КадастроваяСтоимость,
	|	ВЫБОР
	|		КОГДА РегистрацияЗемельныхУчастковСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|		  ИЛИ РегистрацияЗемельныхУчастковСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
	|			ТОГДА РегистрацияЗемельныхУчастковСрезПоследних.КодПоОКАТО
	|		ИНАЧЕ РегистрацияЗемельныхУчастковСрезПоследних.Организация.КодПоОКАТО
	|	КОНЕЦ КАК КодПоОКАТО,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ОбщаяСобственность, ЛОЖЬ) КАК ОбщаяСобственность,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДоляВПравеОбщейСобственностиЧислитель, 0) КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДоляВПравеОбщейСобственностиЗнаменатель, 0) КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ЖилищноеСтроительство, ЛОЖЬ) КАК ЖилищноеСтроительство,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДатаНачалаПроектирования, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачалаПроектирования,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ДатаРегистрацииПравНаОбъектНедвижимости, ДАТАВРЕМЯ(1,1,1)) КАК ДатаРегистрацииПравНаОбъектНедвижимости,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.НалоговаяСтавка, 0) КАК НалоговаяСтавка,
	|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговаяЛьготаПоНалоговойБазе,
	|	ЕСТЬNULL(Льготы.КоличествоМесяцевПримененияЛьготы, 0) КАК КоличествоМесяцевПримененияЛьготы,
	|	РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ДоляНеОблагаемойНалогомПлощадиЧислитель, 0) КАК ДоляНеОблагаемойНалогомПлощадиЧислитель,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ДоляНеОблагаемойНалогомПлощадиЗнаменатель, 0) КАК ДоляНеОблагаемойНалогомПлощадиЗнаменатель,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.УменьшениеНалоговойБазыПоСтатье391, ЛОЖЬ) КАК УменьшениеНалоговойБазыПоСтатье391,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.УменьшениеНалоговойБазыНаСумму, ЛОЖЬ) КАК УменьшениеНалоговойБазыНаСумму,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.НеОблагаемаяНалогомСумма, 0) КАК НеОблагаемаяНалогомСумма,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка, 0) КАК СниженнаяНалоговаяСтавка,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога, 0) КАК ПроцентУменьшенияСуммыНалога,
	|	ЕСТЬNULL(РегистрацияЗемельныхУчастковСрезПоследних.СуммаУменьшенияСуммыНалога, 0) КАК СуммаУменьшенияСуммыНалога
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВладениеЗемельнымиУчастками.ОсновноеСредство КАК ОсновноеСредство,
	|		СУММА(ВладениеЗемельнымиУчастками.КоличествоМесяцев) КАК КоличествоМесяцевВладения
	|	ИЗ
	|		ВладениеЗемельнымиУчастками
	|	СГРУППИРОВАТЬ ПО
	|		ВладениеЗемельнымиУчастками.ОсновноеСредство
	|	) КАК ВладениеУчастками
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ
	|			ПрименениеЛьготы.ОсновноеСредство,
	|			ПрименениеЛьготы.КоличествоМесяцевПримененияЛьготы
	|		ИЗ
	|			(ВЫБРАТЬ 
	|				МАКСИМУМ(НомерМесяца) КАК НомерМесяца, 
	|				ОсновноеСредство
	|			ИЗ 
	|				ВладениеЗемельнымиУчастками 
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL) 
	|			СГРУППИРОВАТЬ ПО 
	|				ОсновноеСредство
	|			) КАК НомераПоследнихМесяцев
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ОсновноеСредство,
	|				НомерМесяца,
	|				НалоговаяЛьготаПоНалоговойБазе
	|			ИЗ 
	|				ВладениеЗемельнымиУчастками 
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL)
	|			) КАК ВидыЛьгот
	|		ПО НомераПоследнихМесяцев.ОсновноеСредство = ВидыЛьгот.ОсновноеСредство
	|		 И НомераПоследнихМесяцев.НомерМесяца = ВидыЛьгот.НомерМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВладениеЗемельнымиУчастками.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(ВладениеЗемельнымиУчастками.КоличествоМесяцевПримененияЛьготы) КАК КоличествоМесяцевПримененияЛьготы
	|			ИЗ
	|				ВладениеЗемельнымиУчастками
	|			ГДЕ 
	|				НЕ (НалоговаяЛьготаПоНалоговойБазе ЕСТЬ NULL)
	|			СГРУППИРОВАТЬ ПО
	|				ВладениеЗемельнымиУчастками.ОсновноеСредство,
	|				ВладениеЗемельнымиУчастками.НалоговаяЛьготаПоНалоговойБазе
	|			) КАК ПрименениеЛьготы
	|		ПО ВидыЛьгот.ОсновноеСредство = ПрименениеЛьготы.ОсновноеСредство
	|		) КАК Льготы
	|	ПО ВладениеУчастками.ОсновноеСредство = Льготы.ОсновноеСредство
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&Период, Организация = &Организация И ВключатьВНалоговуюБазу = ИСТИНА) КАК РегистрацияЗемельныхУчастковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&Период, Организация = &Организация И ВключатьВНалоговуюБазу = ИСТИНА И НалоговаяЛьготаПоНалоговойБазе <> ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеПрименяется)) КАК РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам
	|		ПО РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.ОсновноеСредство = РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство
	|		 И РегистрацияЗемельныхУчастковСрезПоследнихПоЛьготам.НалоговыйОрган В (&НалоговыйОрган)
	|	ПО РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство = ВладениеУчастками.ОсновноеСредство
	|	И РегистрацияЗемельныхУчастковСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
	|";
	ВыборкаЗемельныхУчастков = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗемельныхУчастков.Количество() = 0 Тогда
		
		НаименованиеНО = ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.ОргИМНС.Значение;
		
		Если НЕ ПустаяСтрока(НаименованиеНО) 
		 ИЛИ НЕ ПустаяСтрока(КодНО) Тогда
		   
			ПредставлениеНалоговогоОргана = " по " + СокрЛП(НаименованиеНО);
			
			Если НЕ ПустаяСтрока(КодНО) Тогда
				
				ПредставлениеНалоговогоОргана = ПредставлениеНалоговогоОргана + ?(ПустаяСтрока(НаименованиеНО), "ИФНС с кодом ", " (") + СокрЛП(КодНО)  + ?(ПустаяСтрока(НаименованиеНО), "", ")");
				
			КонецЕсли;
			
		Иначе
			
			ПредставлениеНалоговогоОргана = "";
		   
		КонецЕсли;
		
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			Если ГлавныйИнтерфейс.Полный.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Внеоборотные активы"" - ""Регистрация земельных участков"")";
			ИначеЕсли ГлавныйИнтерфейс.БухгалтерскийИНалоговыйУчет.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Основные средства и нематериальные активы"" - ""Регистрация земельных участков"")";
			ИначеЕсли ГлавныйИнтерфейс.УправлениеОборудованием.Видимость Тогда
				ПутьКРегистру = "(меню ""Основные средства"" - ""Регистрация земельных участков"")";
			Иначе
				ПутьКРегистру = "(меню ""Операции"" - ""Регистры сведений..."" - ""Регистрация земельных участков"")";
			КонецЕсли;
			
		Иначе
			ПутьКРегистру = "(меню ""ОС"" - ""Регистрация земельных участков"")";
		КонецЕсли;
		
		Сообщить("Отсутствуют данные о регистрации земельных участков на " + ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина") + " для " + Организация + ПредставлениеНалоговогоОргана + "
		         |" + ПутьКРегистру + ".");
 		Возврат;
		
	КонецЕсли;
	
	ПериодОтчета = НачалоГода(мДатаНачалаПериодаОтчета);
	
	ПерваяСтраницаРаздела2 = Истина;
	
	Пока ВыборкаЗемельныхУчастков.Следующий() Цикл
		
		Если НЕ (ВыборкаЗемельныхУчастков.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПерваяСтраницаРаздела2 Тогда
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
			ВставитьДополнительнуюСтраницу("Раздел2");
		Иначе
			ПерваяСтраницаРаздела2 = Ложь;
		КонецЕсли;
		
		// Кадастровый номер.
		мРаздел2.Области["П000020001000"].Значение = ВыборкаЗемельныхУчастков.КадастровыйНомер;
		
		// Код по ОКАТО.
		мРаздел2.Области["П000020002000"].Значение = ВыборкаЗемельныхУчастков.КодПоОКАТО;
		
		// КБК.
		мРаздел2.Области["П000020002500"].Значение = ВыборкаЗемельныхУчастков.КБК;
		
		// Код категории земель.
		мРаздел2.Области["П000020003000"].Значение = ВыборкаЗемельныхУчастков.КодКатегорииЗемель;
		
		// Период проектирования и строительства.
		Если ВыборкаЗемельныхУчастков.ЖилищноеСтроительство 
		   И НЕ (ВыборкаЗемельныхУчастков.ДатаНачалаПроектирования = Дата(1,1,1)) Тогда
			
			Если ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости = Дата(1,1,1)
			   ИЛИ (НЕ (ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости = Дата(1,1,1))
			        И НЕ (ВыборкаЗемельныхУчастков.ДатаРегистрацииПравНаОбъектНедвижимости < ПериодОтчета)) Тогда
				
				ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда // заглушка для прохождения синтакс-контроля в ББУ 8
					УправлениеВнеоборотнымиАктивами = РегламентированнаяОтчетность;
				КонецЕсли;
				ПериодПроектированияИСтроительства = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаЗемельныхУчастков.ДатаНачалаПроектирования, ПериодОтчета) / 12;
				
				Если ПериодПроектированияИСтроительства > 3 Тогда
					
					// Период проектирования и строительства - свыше 3-х лет.
					мРаздел2.Области["П000020004000_2"].Значение = "V";
					
				Иначе
					
					// Период проектирования и строительства - 3 года.
					мРаздел2.Области["П000020004000_1"].Значение = "V";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Кадастровая стоимость.
		мРаздел2.Области["П000020005000"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость;
	
		// Доля в праве на земельный участок.
		Если ВыборкаЗемельныхУчастков.ОбщаяСобственность Тогда
			
			// Числитель.
			мРаздел2.Области["Строка060Числитель"].Значение = ВыборкаЗемельныхУчастков.ДоляВПравеОбщейСобственностиЧислитель;
			
			// Знаменатель.
			мРаздел2.Области["Строка060Знаменатель"].Значение = ВыборкаЗемельныхУчастков.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы Тогда

		
			Если ВыборкаЗемельныхУчастков.УменьшениеНалоговойБазыНаСумму Тогда
			
				// Код налоговолй льготы - не облагаемая налогом сумма.
				мРаздел2.Области["П000020007000"].Значение = "3022100";
				
				// Не облагаемая налогом сумма.
				мРаздел2.Области["П000020008000"].Значение = ВыборкаЗемельныхУчастков.НеОблагаемаяНалогомСумма;
				
			КонецЕсли;
			
			Если ВыборкаЗемельныхУчастков.УменьшениеНалоговойБазыПоСтатье391 Тогда
			
				// Код налоговой льготы - не облагаемая налогом сумма на федеральном уровне.
				мРаздел2.Области["П000020009000"].Значение = ВыборкаЗемельныхУчастков.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391;
				
				// Не облагаемая налогом сумма на федеральном уровне (10 000 руб.).
				мРаздел2.Области["П000020010000"].Значение = 10000;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь Тогда
		
			// Код налоговой льготы - не облагаемая налогом площадь.
			мРаздел2.Области["П000020011000"].Значение = "3022300";
			
			Если НЕ ВыборкаЗемельныхУчастков.ДоляНеОблагаемойНалогомПлощадиЗнаменатель = 0 Тогда
			
				ДоляНеОблагаемойНалогомПлощади = Окр(ВыборкаЗемельныхУчастков.ДоляНеОблагаемойНалогомПлощадиЧислитель / ВыборкаЗемельныхУчастков.ДоляНеОблагаемойНалогомПлощадиЗнаменатель, 6);
											   
			Иначе

				ДоляНеОблагаемойНалогомПлощади = 0;
				
			КонецЕсли;
			
			// Доля не облагаемой площади (десятичная дробь).
			мРаздел2.Области["П000020012000"].Значение = ДоляНеОблагаемойНалогомПлощади;
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020019000"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное Тогда
		
			// Код налоговой льготы - освобождение от налогообложения.
			мРаздел2.Области["П000020015000"].Значение = "3022400";
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020019000"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
			// Расчет коэффициента К1.
			Расчет();
			
			// Коэффициент К1: отношение числа полных месяцев, в течение которых отсутствует налоговая льгота,
			// к числу календарных месяцев в налоговом периоде.
			КоэффициентК1 = мРаздел2.Области["П000020020000"].Значение;
			
			// Сумма налоговой льготы (с учетом коэффициента К1).
			мРаздел2.Области["П000020016000"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость * (1 - КоэффициентК1);
			
		КонецЕсли;
		
		Если ВыборкаЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
			
			// Код налоговой льготы - освобождение от налогообложения на федеральном уровне.
			мРаздел2.Области["П000020017000"].Значение = ВыборкаЗемельныхУчастков.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395;
			
			// Количество полных месяцев пользования льготой.
			мРаздел2.Области["П000020019000"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевПримененияЛьготы;
			
			// Расчет коэффициента К1.
			Расчет();
			
			// Коэффициент К1: отношение числа полных месяцев, в течение которых отсутствует налоговая льгота,
			// к числу календарных месяцев в налоговом периоде.
			КоэффициентК1 = мРаздел2.Области["П000020020000"].Значение;
			
			// Сумма налоговой льготы (с учетом коэффициента К1).
			мРаздел2.Области["П000020018000"].Значение = ВыборкаЗемельныхУчастков.КадастроваяСтоимость * (1 - КоэффициентК1);
			
		КонецЕсли;
		
		// Налоговая ставка.
		НалоговаяСтавка = ВыборкаЗемельныхУчастков.НалоговаяСтавка;
		
		мРаздел2.Области["П000020022000"].Значение = НалоговаяСтавка;
		
		// Количество полных месяцев владения земельным участком в течение налогового периода.
		мРаздел2.Области["П000020023000"].Значение = ВыборкаЗемельныхУчастков.КоличествоМесяцевВладения;
		
		Расчет();
		
		// Коэффициент К2: отношение числа полных месяцев владения земельным участком
		// к числу календарных месяцев в налоговом периоде.
		КоэффициентК2 = мРаздел2.Области["П000020024000"].Значение;
		НалоговаяБаза = мРаздел2.Области["П000020021000"].Значение;
		СуммаНалога   = мРаздел2.Области["П000020028000"].Значение;
		
		КодНалоговойЛьготыВОтношенииСуммыНалога   = "";
		СуммаНалоговойЛьготыВОтношенииСуммыНалога = 0;
		
		Если ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.ПроцентУменьшенияСуммыНалога) 
		 ИЛИ ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.СуммаУменьшенияСуммыНалога) 
		 ИЛИ ЗначениеЗаполнено(ВыборкаЗемельныхУчастков.СниженнаяНалоговаяСтавка) Тогда
		
			// Код налоговой льготы в виде уменьшения суммы налога и (или) снижения налоговой ставки.
			мРаздел2.Области["П000020026000"].Значение = "3022200";
			
			СуммаУменьшения = СуммаНалога * ВыборкаЗемельныхУчастков.ПроцентУменьшенияСуммыНалога / 100                                      // уменьшение в процентах.
			                + ВыборкаЗемельныхУчастков.СуммаУменьшенияСуммыНалога                                                            // уменьшение на сумму.
							+ ?(ВыборкаЗемельныхУчастков.СниженнаяНалоговаяСтавка > 0,                                                       // снижение налоговой ставки.
							    СуммаНалога - НалоговаяБаза * КоэффициентК2 * (ВыборкаЗемельныхУчастков.СниженнаяНалоговаяСтавка / 100),
								0); 
			
			// Сумма налоговой льготы в виде уменьшения суммы налога и (или) снижения налоговой ставки.
 			мРаздел2.Области["П000020027000"].Значение = СуммаУменьшения;
													
		КонецЕсли;
		
		Расчет();
	
	КонецЦикла;
	
	СформироватьРаздел1();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаРаздел2Строка060ЧислительПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел2Строка060ЧислительПриИзменении(Элемент)
	Знаменатель = мРаздел2.Области.Строка060Знаменатель.Значение;
	Числитель = Элемент.Значение;
	Если Знаменатель < Числитель Тогда
		мРаздел2.Области.Строка060Знаменатель.Очистить();
	КонецЕсли;
	мРаздел2.Области.Строка060Знаменатель.ЭлементУправления.МинимальноеЗначение = Числитель;

	мНеВызыватьРасчет = Ложь;
	Если мРаздел2.Области.Строка060Знаменатель.Значение = 0 Тогда
		мНеВызыватьРасчет = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Строка060ЧислительПриИзменении

// КнопкаУдалитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1); // удалить
	УдалитьДополнительнуюСтраницу();
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1Нажатие

Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1); // удалить
	УдалитьДополнительнуюСтраницу("Раздел2");
КонецПроцедуры

// КнопкаПредыдущаяСтраницаРаздел1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1Нажатие

// КнопкаПредыдущаяСтраницаРаздел2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2Нажатие

// КнопкаПерейтиНаСтраницуРаздел1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц();
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел1Нажатие

// КнопкаПерейтиНаСтраницуРаздел2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц();
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел2Нажатие

// КнопкаДобавитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)
	ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ТекСтраница = "Раздел1" Тогда
		СРП = мРаздел1.Области.П000010000100.Значение;
	КонецЕсли;

	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();

	Если ТекСтраница = "Раздел1" Тогда
		мРаздел1.Области.П000010000100.Значение = СРП;
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1Нажатие

// КнопкаДобавитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу("Раздел2");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел2Нажатие

// Обработчик нажатия на кнопку "Регистрация земельных участков".
// Открывает форму списка регистра сведений "Регистрация земельных участков".
//
Процедура КнопкаРегистрацияЗемельныхУчастковНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияЗемельныхУчастков.ПолучитьФормуСписка();
	Форма.Организация = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	Форма.РегистрСведенийСписок.Отбор.Организация.Значение      = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.Использование = Истина;	
	Форма.Открыть();
	
КонецПроцедуры // КнопкаРегистрацияЗемельныхУчастковНажатие() 

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации <> "ББУ" И ИДКонфигурации <> "БГУ" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
	
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		
		КнопкаСтавки = КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
												"РегистрацияЗемельныхУчастков",
												ТипКнопкиКоманднойПанели.Действие,
												"Регистрация земельных участков",
												Новый Действие("КнопкаРегистрацияЗемельныхУчастковНажатие"));
												
		КнопкаСтавки.Подсказка = "Открыть журнал регистрации земельных участков";
								 
		КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
								 Новый УникальныйИдентификатор,
								  ТипКнопкиКоманднойПанели.Разделитель);
								  
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// КнопкаСледующаяСтраницаРаздел1Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1Нажатие

Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
КонецПроцедуры

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	Расчет("");
	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	Расчет("");
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	ЗаполнитьДатуВЯчейках();

	мВПрограммеИзмененаОрганизация = Ложь;

	// Заполнить ТОЛЬКО параметры по текущей организации зависящие от даты подписания документа
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда

				Прервать;

			Иначе

				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
				ИначеЕсли РазделВМакете = "КатегорииЗемли" Тогда
					НовСтрока = мКатегорииЗемли.Добавить();
				ИначеЕсли РазделВМакете = "Льготы" Тогда
					НовСтрока = мЛьготы.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2007" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2007.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло18   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло18   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло18   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	Если НЕ ФлажокОтклАвтоРасчет Тогда
		ПровитьСтроку190И230Раздела2();
	КонецЕсли;

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Область.Имя;

	// КБК
	Если Найти(Ячейка,"П000010001000") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 15, 1);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КБКРаздел1_" + НомерСтроки);

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2005;
		ИначеЕсли Год(ДатаПодписи) = 2006 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2006;
		ИначеЕсли Год(ДатаПодписи) >= 2007 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2007;
		КонецЕсли;

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), ПервоначальноеЗначение, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ТаблицаКБК, Неопределено,СтандартнаяОбработка, 20);
		Если Рез.ЗначениеВведено Тогда
			НомерСтроки = Сред(Область.Имя, 15, 1);
			ОбновитьПеременныеМодуля("КБКРаздел1_" + НомерСтроки, Рез.Значение);
		КонецЕсли;

	ИначеЕсли Найти(Ячейка,"П000010002000") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 15, 1);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("ОКАТОРаздел1_" + НомерСтроки);

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Рез.ЗначениеВведено Тогда
			ОбновитьПеременныеМодуля("ОКАТОРаздел1_" + НомерСтроки, Рез.Значение);
		КонецЕсли;

	ИначеЕсли Найти(Ячейка,"П000010003000") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 15, 1);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СуммаРаздел1_" + НомерСтроки);

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), ПервоначальноеЗначение, 17, 2, Истина, "Введите сумму налога к уплате", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Рез.ЗначениеВведено Тогда
			ОбновитьПеременныеМодуля("СуммаРаздел1_" + НомерСтроки, Рез.Значение);
			// Для простоты контроля логики вывода значений в строках 030 и 040 перезаполним весь раздел 1 показателями, с учтенной логикой в процедуре
			// ЗаполнениеЗначенийВКвадратиках
			ЗаполнениеЗначенийВКвадратиках("Раздел1");
		КонецЕсли;
	ИначеЕсли Найти(Ячейка,"П000010004000") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 15, 1);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("Сумма2Раздел1_" + НомерСтроки);

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), ПервоначальноеЗначение, 17, 2, Истина, "Введите сумму к уменьшению", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Рез.ЗначениеВведено Тогда
			ОбновитьПеременныеМодуля("Сумма2Раздел1_" + НомерСтроки, Рез.Значение);
			// Для простоты контроля логики вывода значений в строках 030 и 040 перезаполним весь раздел 1 показателями, с учтенной логикой в процедуре
			// ЗаполнениеЗначенийВКвадратиках
			ЗаполнениеЗначенийВКвадратиках("Раздел1");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 020, ОКАТО.
	Если ОбластьИмя = "П000020002000" Тогда
		ПервоначальноеЗначение = СокрЛП(Элемент.ТекущаяОбласть.Значение);
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", ОбластьИмя, ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено, СтандартнаяОбработка);

	ИначеЕсли ОбластьИмя = "П000020002500" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = СокрЛП(Элемент.ТекущаяОбласть.Значение);

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2005;
		ИначеЕсли Год(ДатаПодписи) = 2006 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2006;
		ИначеЕсли Год(ДатаПодписи) >= 2007 Тогда
			ТаблицаКБК = мКодыБюджетнойКлассификации2007;
		КонецЕсли;

		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 20);

		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма,
																				"Раздел2",
																				ОбластьИмя,
																				ПервоначальноеЗначение,
																				20,
																				0,
																				Ложь,
																				"Введите КБК (20 знаков)",
																				"Выбор КБК",
																				ТаблицаКБК,
																				Неопределено,
																				СтандартнаяОбработка,
																				,
																				,
																				,СтруктураКонтроля);
																				
	ИначеЕсли ОбластьИмя = "П000020004000_1" Тогда

		СтандартнаяОбработка = Ложь;

		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			мРаздел2.Области.П000020004000_2.Значение = "";
		КонецЕсли;

		Модифицированность = Истина;
		Расчет("Раздел2");

	ИначеЕсли ОбластьИмя = "П000020004000_2" Тогда

		СтандартнаяОбработка = Ложь;

		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			мРаздел2.Области.П000020004000_1.Значение = "";
		КонецЕсли;

		Модифицированность = Истина;
		Расчет("Раздел2");

	// Строка 030. Категория земли.
	ИначеЕсли ОбластьИмя = "П000020003000" Тогда

		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 12);

		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Раздел2"                   // Название раздела.
										   , ОбластьИмя                 // Имя ячейки для записи.
										   , СокрЛП(Область.Значение) // Первоначальное значение.
										   , 12                          // РазмерностьЦ - возможная длинна ИННа.
										   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
										   , Ложь                       // Это сумма?
										   , "Категория земель"         // Текст ввода.
										   , "Категория земель"         // Текст выбора из таблицы значений.
										   , мКатегорииЗемли            // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   ,                            // Кол-во квадратиков, если в квадратах
										   ,                            // Колонка поиска, если ТаблицаЗначений
										   , СтруктураКонтроля          // Структура требований ручного ввода
										   );
		
	ИначеЕсли ((ОбластьИмя = "П000020007000")
	      Или (ОбластьИмя = "П000020009000")
	      Или (ОбластьИмя = "П000020011000")
	      Или (ОбластьИмя = "П000020013000")
	      Или (ОбластьИмя = "П000020015000")
	      Или (ОбластьИмя = "П000020017000")
	      Или (ОбластьИмя = "П000020026000")) И (НЕ мАвтоВыборКодов) Тогда
		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 7);

		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Раздел2"                   // Название раздела.
										   , ОбластьИмя                 // Имя ячейки для записи.
										   , СокрЛП(Область.Значение) // Первоначальное значение.
										   , 7                          // РазмерностьЦ - возможная длинна ИННа.
										   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
										   , Ложь                       // Это сумма?
										   , "Ввод льготы"       // Текст ввода.
										   , "Выбор льготы"             // Текст выбора из таблицы значений.
										   , мЛьготы                    // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   ,                            // Кол-во квадратиков, если в квадратах
										   ,                            // Колонка поиска, если ТаблицаЗначений
										   , СтруктураКонтроля          // Структура требований ручного ввода
										   );
		
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (Найти(Область.Имя, "КодИМНС") > 0) Или (Найти(Область.Имя, "ОргИМНС") > 0) Тогда
		РегламентированнаяОтчетность.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный");
		ПроставитьСведенияОПредставителеОрганизации();
		// Проставим/или очистим дату в разделах, от Представителя
		ЗаполнитьДатуВЯчейках();

	ИначеЕсли Найти(ОбластьИмя, "ОКВЭД") > 0 Тогда
		РегламентированнаяОтчетность.УстановитьКодОКВЭДНаТитульномЛисте(ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если НЕ мНеВызыватьРасчет Тогда
		Если Страница = "Раздел2" Тогда
			Расчет(Страница);
		КонецЕсли;
	Иначе
		мНеВызыватьРасчет = Ложь;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ПолеТабличногоДокументаРаздел1СРППриИзменении
// Процедура-обработчик события "ПриИзменении" в ячейки СРП раздела 1
Процедура ПолеТабличногоДокументаРаздел1СРППриИзменении(Элемент)

	Перем ТаблицаСтраницРаздела;

	// Изменим во всех листах многостраничного документа.
	СРП = мРаздел1.Области.П000010000100.Значение;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		Если Страница.Данные <> Неопределено Тогда
			Страница.Данные.П000010000100 = СРП;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1СРППриИзменении

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// ЗаполнитьНажатие
//
Процедура ЗаполнитьНажатие(Элемент)
	ИмпортДанныхИзАвансовогоРасчета();
КонецПроцедуры // ЗаполнитьНажатие

// ПровитьСтроку190И230Раздела2
//
Процедура ПровитьСтроку190И230Раздела2()

	Если (мРаздел2.Области.П000020019000.Значение > 12) Или (мРаздел2.Области.П000020019000.Значение < 0) Тогда
		Сообщить("Показатель по строке 190 ""Количество полных месяцев использования льготы"" может принимать значения от 0 до 12.", СтатусСообщения.Внимание);
		мРаздел2.Области.П000020019000.Значение = 0;
	КонецЕсли;

	Если (мРаздел2.Области.П000020023000.Значение > 12) Или (мРаздел2.Области.П000020023000.Значение < 1) Тогда
		Сообщить("Показатель по строке 230 ""Количество полных месяцев владения земельным участком в течение налогового периода""" + Символы.ПС + "может принимать значения от 1 до 12.", СтатусСообщения.Внимание);
		мРаздел2.Области.П000020023000.Значение = 0;
	КонецЕсли;

КонецПроцедуры // ПровитьСтроку190И230Раздела2

Процедура ПолеТабличногоДокументаРаздел2П000020019000ПриИзменении(Элемент)
	Если НЕ ФлажокОтклАвтоРасчет Тогда
		ПровитьСтроку190И230Раздела2();
	КонецЕсли;
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2П000020023000ПриИзменении(Элемент)
	Если НЕ ФлажокОтклАвтоРасчет Тогда
		ПровитьСтроку190И230Раздела2();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML2007");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Если РабочаяДата >= '20081001' Тогда
		Возврат "NO_ZEMND"
				+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	Иначе
		Возврат "NO_ZEMND"
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ОКВЭД = СокрЛП(Титульный.ОКВЭД1 + Титульный.ОКВЭД2) + "." + СокрЛП(Титульный.ОКВЭД3 + Титульный.ОКВЭД4) + "." + СокрЛП(Титульный.ОКВЭД5 + Титульный.ОКВЭД6);
	ОКВЭД = СтрЗаменить(СокрЛП(СтрЗаменить(ОКВЭД, ".", " ")), " ", ".");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ИдДок",			Строка(Новый УникальныйИдентификатор));
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",		СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	Параметры.Вставить("ОКВЭДОрг",		ОКВЭД);
	Параметры.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("КНД",			"1153005");
	Параметры.Вставить("ВидДок",		Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПериодОтч",		"34");
	Параметры.Вставить("ГодПериодОтч",	Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",	ФИОРук.Фамилия);
	Параметры.Вставить("ИмяРук",		ФИОРук.Имя);
	Параметры.Вставить("ОтчествоРук",	ФИОРук.Отчество);
	
	ФИОПред = РазложитьФИО(Титульный.ОргУп);
	Параметры.Вставить("ФамилияПред",	ФИОПред.Фамилия);
	Параметры.Вставить("ИмяПред",		ФИОПред.Имя);
	Параметры.Вставить("ОтчествоПред",	ФИОПред.Отчество);
	Параметры.Вставить("ДокПред",		СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РазложитьФИО(Титульный.ОргНазв);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух, ТелБух");
	Если Параметры.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		Параметры.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		Параметры.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОИП.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		Параметры.Вставить("ТелОтв",        ?(Параметры.Свойство("ТелОрг"), Параметры.ТелОрг, ""));
	Иначе
		ФИОБух = РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		Параметры.Вставить("ДолжОтв",		"Главный бухгалтер");
		Параметры.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОБух.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		Параметры.Вставить("ТелОтв",        СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	// параметры, специфичные для текущего отчета
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	КБКОКАТОРаздела1 = Новый ТаблицаЗначений;
	КБКОКАТОРаздела1.Колонки.Добавить("ОКАТО");
	КБКОКАТОРаздела1.Колонки.Добавить("КБК");
	КБКОКАТОРаздела1.Колонки.Добавить("НомерЛиста");
	КБКОКАТОРаздела1.Колонки.Добавить("НомерПарыКБКОКАТО");
	
	КБКОКАТОРаздела2 = Новый ТаблицаЗначений;
	КБКОКАТОРаздела2.Колонки.Добавить("ОКАТО");
	КБКОКАТОРаздела2.Колонки.Добавить("КБК");
	КБКОКАТОРаздела2.Колонки.Добавить("НомерЛиста");
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ФамилияИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Титульный.ОргНазв) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.КодИМНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.ОКВЭД1) И ПустаяСтрока(Титульный.ОКВЭД2) И ПустаяСтрока(Титульный.ОКВЭД3)
	И ПустаяСтрока(Титульный.ОКВЭД4) И ПустаяСтрока(Титульный.ОКВЭД5) И ПустаяСтрока(Титульный.ОКВЭД6) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияПред) И ПустаяСтрока(Параметры.ИмяПред) Тогда
		Если НЕ Параметры.ЭтоПБОЮЛ Тогда
			Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия руководителя!", "Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(Параметры.ИмяРук) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя руководителя!", "Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Параметры.ФамилияПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия представителя!", "Титульный", "ОргУп");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя представителя!", "Титульный", "ОргУп");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ДокПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		ИндексЛиста = Раздел1.Индекс(Лист) + 1;
		Для Инд = 1 По 4 Цикл
			ТекКБК = СокрЛП(ДанныеЛиста["КБКРаздел1_" + Инд]);
			ТекОКАТО = СокрЛП(ДанныеЛиста["ОКАТОРаздел1_" + Инд]);
			Если НЕ ПустаяСтрока(ТекКБК) ИЛИ НЕ ПустаяСтрока(ТекОКАТО) Тогда
				НовСтр = КБКОКАТОРаздела1.Добавить();
				НовСтр.ОКАТО = ТекОКАТО;
				НовСтр.КБК = ТекКБК;
				НовСтр.НомерЛиста = Раздел1.Индекс(Лист) + 1;
				НовСтр.НомерПарыКБКОКАТО = Инд;
				ДлинаКБК = СтрДлина(ТекКБК);
				Если ДлинаКБК <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаКБК = 0, "", " верно") + " задан КБК!", "Раздел1", "П000010001000_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаОКАТО = СтрДлина(ТекОКАТО);
				Если ДлинаОКАТО <> 11 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаОКАТО = 0, "", " верно") + " задан код ОКАТО!", "Раздел1", "П000010002000_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Лист2 Из Раздел2 Цикл
		
		ДанныеЛиста2 = Лист2.Данные;
		НомерЛиста = Раздел2.Индекс(Лист2) + 1;
		
		Если 	ЗначениеЗаполнено(ДанныеЛиста2.П000020001000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020002000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020002500)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020003000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020005000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020007000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020008000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020009000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020010000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020001000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020001000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020011000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020012000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020013000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020014000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020015000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020016000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020017000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020018000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020021000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020022000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020023000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020024000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020025000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020026000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020027000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020028000)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста2.П000020029000) Тогда
			
			НовСтр = КБКОКАТОРаздела2.Добавить();
			НовСтр.ОКАТО = СокрЛП(ДанныеЛиста2.П000020002000);
			НовСтр.КБК = СокрЛП(ДанныеЛиста2.П000020002500);
			НовСтр.НомерЛиста = Раздел2.Индекс(Лист2) + 1;
					
			Если ПустаяСтрока(ДанныеЛиста2.П000020001000) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не указан кадастровый номер земельного участка!", "Раздел2", "П000020001000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020002000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020002000));
			Если ДлинаП000020002000 <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002000 = 0, "", "верно") + " указано значение кода ОКАТО!", "Раздел2", "П000020002000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020002500 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020002500));
			Если ДлинаП000020002500 <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002500 = 0, "", "верно") + " указано значение кода бюджетной классификации!", "Раздел2", "П000020002500", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020003000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020003000));
			Если ДлинаП000020003000 <> 12 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020003000 = 0, "", "верно") + " указано значение показателя ""Категория земель (код)""!", "Раздел2", "П000020003000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка060Числитель = ДанныеЛиста2.Строка060Числитель;
			Строка060Знаменатель = ДанныеЛиста2.Строка060Знаменатель;
			Если Строка060Числитель <> 0 И Строка060Знаменатель = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан знаменатель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "Строка060Знаменатель", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель = 0 И Строка060Знаменатель <> 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан числитель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "Строка060Числитель", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель > Строка060Знаменатель Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 числитель в доле налогоплательщика в праве на земельный участок не может быть больше знаменателя!", "Раздел2", "Строка060Числитель", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020007000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020007000));
			Если ДлинаП000020007000 <> 0 И ДлинаП000020007000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 070!", "Раздел2", "П000020007000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020009000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020009000));
			Если ДлинаП000020009000 <> 0 И ДлинаП000020009000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 090!", "Раздел2", "П000020009000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020011000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020011000));
			Если ДлинаП000020011000 <> 0 И ДлинаП000020011000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 110!", "Раздел2", "П000020011000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020015000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020015000));
			Если ДлинаП000020015000 <> 0 И ДлинаП000020015000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 150!", "Раздел2", "П000020015000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020017000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020017000));
			Если ДлинаП000020017000 <> 0 И ДлинаП000020017000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 170!", "Раздел2", "П000020017000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020026000 = СтрДлина(СокрЛП(ДанныеЛиста2.П000020026000));
			Если ДлинаП000020026000 <> 0 И ДлинаП000020026000 <> 7 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020026000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КБКОКАТОРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов ОКАТО и КБК в разделе 1!", "Раздел1", "П000010002000_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КБКОКАТОРаздела2.Количество() = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов ОКАТО и КБК  в разделе 2!", "Раздел2", "П000020002000", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого ЕдКБКОКАТОРаздела1 Из КБКОКАТОРаздела1 Цикл
		Если КБКОКАТОРаздела2.НайтиСтроки(Новый Структура("КБК, ОКАТО", ЕдКБКОКАТОРаздела1.КБК, ЕдКБКОКАТОРаздела1.ОКАТО)).Количество() = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Для значений ОКАТО """ + ЕдКБКОКАТОРаздела1.ОКАТО + """ и КБК """ + ЕдКБКОКАТОРаздела1.КБК + """ на странице " + ЕдКБКОКАТОРаздела1.НомерЛиста + " раздела 1 отсутствуют заполненные экземпляры раздела 2!", "Раздел1", "П000010002000_" + ЕдКБКОКАТОРаздела1.НомерПарыКБКОКАТО, ЕдКБКОКАТОРаздела1.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЕдКБКОКАТОРаздела2 Из КБКОКАТОРаздела2 Цикл
		Если КБКОКАТОРаздела1.НайтиСтроки(Новый Структура("КБК, ОКАТО", ЕдКБКОКАТОРаздела2.КБК, ЕдКБКОКАТОРаздела2.ОКАТО)).Количество() = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Для значений ОКАТО """ + ЕдКБКОКАТОРаздела2.ОКАТО + """ и КБК """ + ЕдКБКОКАТОРаздела2.КБК + """ на странице " + ЕдКБКОКАТОРаздела2.НомерЛиста + " раздела 2 отсутствуют соответствующие значения в разделе 1!", "Раздел2", "П000020002000", ЕдКБКОКАТОРаздела2.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	СоответствиеНаименованияСРППорядку = Новый Соответствие;
	
	// формирование таблицы данных для выгрузки
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("НаимСРП");
	ТаблицаДанныхОтчета.Колонки.Добавить("ПорядокСРП");
	ТаблицаДанныхОтчета.Колонки.Добавить("КБК");
	ТаблицаДанныхОтчета.Колонки.Добавить("ОКАТО");
	ТаблицаДанныхОтчета.Колонки.Добавить("СумУплНал");
	ТаблицаДанныхОтчета.Колонки.Добавить("СумУменьш");
	ТаблицаДанныхОтчета.Колонки.Добавить("ДанныеРаздела1");
	ТаблицаДанныхОтчета.Колонки.Добавить("ДанныеРаздела2");
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеРаздела1 = Лист.Данные;
		Для ТекНомерПарыКБКОКАТО = 1 По 4 Цикл
			ТекОКАТО = СокрЛП(ДанныеРаздела1["ОКАТОРаздел1_" + ТекНомерПарыКБКОКАТО]);
			ТекКБК = СокрЛП(ДанныеРаздела1["КБКРаздел1_" + ТекНомерПарыКБКОКАТО]);
			Если ПустаяСтрока(ТекОКАТО) ИЛИ ПустаяСтрока(ТекКБК) Тогда
				Продолжить;
			КонецЕсли;
			НовСтр = ТаблицаДанныхОтчета.Добавить();
			НовСтр.НаимСРП = СокрЛП(ДанныеРаздела1.П000010000100);
			НовСтр.ОКАТО = ТекОКАТО;
			НовСтр.КБК = ТекКБК;
			НовСтр.СумУплНал = ДанныеРаздела1["СуммаРаздел1_" + ТекНомерПарыКБКОКАТО];
			НовСтр.СумУменьш = ДанныеРаздела1["Сумма2Раздел1_" + ТекНомерПарыКБКОКАТО];
			НовСтр.ДанныеРаздела2 = Новый Массив;
			ПорядокСРП = СоответствиеНаименованияСРППорядку[НовСтр.НаимСРП];
			Если ПорядокСРП = Неопределено Тогда
				ПорядокСРП = Раздел1.Индекс(Лист);
				СоответствиеНаименованияСРППорядку.Вставить(НовСтр.НаимСРП, ПорядокСРП);
			КонецЕсли;
			НовСтр.ПорядокСРП = ПорядокСРП;
		КонецЦикла;
	КонецЦикла;
	
	// связываем данные из раздела 2 с данными раздела 1
	Для Каждого Лист Из Раздел2 Цикл
		ДанныеРаздела2 = Лист.Данные;
		ТекОКАТО = СокрЛП(ДанныеРаздела2.П000020002000);
		ТекКБК = СокрЛП(ДанныеРаздела2.П000020002500);
		Если ПустаяСтрока(ТекОКАТО) ИЛИ ПустаяСтрока(ТекКБК) Тогда
			Продолжить;
		КонецЕсли;
		ТаблСтр = ТаблицаДанныхОтчета.НайтиСтроки(Новый Структура("КБК, ОКАТО", ТекКБК, ТекОКАТО));
		Для Каждого ЭлТаблСтр Из ТаблСтр Цикл
			ЭлТаблСтр.ДанныеРаздела2.Добавить(ДанныеРаздела2);
		конецЦикла;
	КонецЦикла;
	
	КолСтр = ТаблицаДанныхОтчета.Количество();
	Для Инд = 1 По КолСтр Цикл
		ТекИнд = КолСтр - Инд;
		ТекСтр = ТаблицаДанныхОтчета.Получить(ТекИнд);
		Если ТекСтр.ДанныеРаздела2.Количество() = 0 Тогда
			ТаблицаДанныхОтчета.Удалить(ТекСтр);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанныхОтчета.Сортировать("ПорядокСРП");
	
	// выгрузка сформированной таблицы с данными
	СумНалУпл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалУпл");
	СоответствиеНаименованияСРПСтрокеДерева = Новый Соответствие;
	
	ПослНаимСРП = Неопределено;
	
	Для Каждого ТекСтр1 Из ТаблицаДанныхОтчета Цикл
		
		ДанныеЛиста = Лист.Данные;
		
		// создаем или используем существующую ветку СумНалУпл
		Если ПослНаимСРП <> ТекСтр1.НаимСРП Тогда // создаем новый узел
			ТекСумНалУпл = СкопироватьУзел(УзелРодитель, СумНалУпл);
			ЗадатьЗначениеЭлемента(ТекСумНалУпл, "НаимСРП", ТекСтр1.НаимСРП);
			ПослНаимСРП = ТекСтр1.НаимСРП;
		КонецЕсли;
		
		ТекСумУпл = СкопироватьУзел(ТекСумНалУпл, ПолучитьПодчиненныйЭлемент(ТекСумНалУпл, "СумУпл"));
		
		ЗадатьЗначениеЭлемента(ТекСумУпл, "КБК", ТекСтр1.КБК);
		ЗадатьЗначениеЭлемента(ТекСумУпл, "ОКАТО", ТекСтр1.ОКАТО);
		ЗадатьЗначениеЭлемента(ТекСумУпл, "СумУплНал", ТекСтр1.СумУплНал);
		ЗадатьЗначениеЭлемента(ТекСумУпл, "СумУменьш", ТекСтр1.СумУменьш);
		
		УзелСтрокаРаздела2 = ПолучитьПодчиненныйЭлемент(ТекСумУпл, "РасчПлатЗН");
			
		Для Каждого Лист2 Из ТекСтр1.ДанныеРаздела2 Цикл
			
			ТекРасчПлатЗН = СкопироватьУзел(ТекСумУпл, УзелСтрокаРаздела2);
				
			ПерПроектСтр = ?(ПустаяСтрока(Лист2.П000020004000_1), ?(ПустаяСтрока(Лист2.П000020004000_2), 0, 2), 1);
			ЗадатьЗначениеЭлемента(ТекРасчПлатЗН, "НомКадастрЗУ",		СокрЛП(Лист2.П000020001000));
			ЗадатьЗначениеЭлемента(ТекРасчПлатЗН, "КатегорЗем",			СокрЛП(Лист2.П000020003000));
			Если ПерПроектСтр > 0 Тогда
				ЗадатьЗначениеЭлемента(ТекРасчПлатЗН, "ПерПроектСтр",		ПерПроектСтр);
			КонецЕсли;
			ЗадатьЗначениеЭлемента(ТекРасчПлатЗН, "СтКадастрЗУ",		Лист2.П000020005000);
			ЗадатьЗначениеЭлемента(ТекРасчПлатЗН, "НалСтав",			Лист2.П000020022000);

			УзелДоляЗУ = ПолучитьПодчиненныйЭлемент(ТекРасчПлатЗН, "ДоляЗУ");
			ЗадатьЗначениеЭлемента(УзелДоляЗУ, "ЧислДолЗУ",				Лист2.Строка060Числитель);
			ЗадатьЗначениеЭлемента(УзелДоляЗУ, "ЗнамДолЗУ",				Лист2.Строка060Знаменатель);
					
			ОпрНалБаза = ПолучитьПодчиненныйЭлемент(ТекРасчПлатЗН, "ОпрНалБаза");
					
			ЗадатьЗначениеЭлемента(ОпрНалБаза, "КолМесЛьгот", 			Лист2.П000020019000);
			ЗадатьЗначениеЭлемента(ОпрНалБаза, "К1", 					Лист2.П000020020000);
			ЗадатьЗначениеЭлемента(ОпрНалБаза, "НалБаза", 				Лист2.П000020021000);
					
			Если СтрДлина(СокрЛП(Лист2.П000020007000)) = 7 Тогда
				Льгот387_2Сум = ПолучитьПодчиненныйЭлемент(ОпрНалБаза, "Льгот387_2Сум");
				ЗадатьЗначениеЭлемента(Льгот387_2Сум, "КодНалЛьгот", 	СокрЛП(Лист2.П000020007000));
				ЗадатьЗначениеЭлемента(Льгот387_2Сум, "СумНеОбл", 		Лист2.П000020008000);
			КонецЕсли;
					
			Если СтрДлина(СокрЛП(Лист2.П000020009000)) = 7 Тогда
				Льгот391_5 = ПолучитьПодчиненныйЭлемент(ОпрНалБаза, "Льгот391_5");
				ЗадатьЗначениеЭлемента(Льгот391_5, "КодНалЛьгот", 		СокрЛП(Лист2.П000020009000));
				ЗадатьЗначениеЭлемента(Льгот391_5, "СумНеОбл", 			Лист2.П000020010000);
			КонецЕсли;
					
			Если СтрДлина(СокрЛП(Лист2.П000020011000)) = 7 Тогда
				Льгот387_2Пл = ПолучитьПодчиненныйЭлемент(ОпрНалБаза, "Льгот387_2Пл");
				ЗадатьЗначениеЭлемента(Льгот387_2Пл, "КодНалЛьгот", 	СокрЛП(Лист2.П000020011000));
				ЗадатьЗначениеЭлемента(Льгот387_2Пл, "ДоляПлЗУ", 		Лист2.П000020012000);
			КонецЕсли;
					
			Если СтрДлина(СокрЛП(Лист2.П000020015000)) = 7 Тогда
				Льгот387_2Осв = ПолучитьПодчиненныйЭлемент(ОпрНалБаза, "Льгот387_2Осв");
				ЗадатьЗначениеЭлемента(Льгот387_2Осв, "КодНалЛьгот", 	СокрЛП(Лист2.П000020015000));
				ЗадатьЗначениеЭлемента(Льгот387_2Осв, "СумЛьгот", 		Лист2.П000020016000);
			КонецЕсли;
					
			Если СтрДлина(СокрЛП(Лист2.П000020017000)) = 7 Тогда
				Льгот395 = ПолучитьПодчиненныйЭлемент(ОпрНалБаза, "Льгот395");
				ЗадатьЗначениеЭлемента(Льгот395, "КодНалЛьгот", 		СокрЛП(Лист2.П000020017000));
				ЗадатьЗначениеЭлемента(Льгот395, "СумЛьгот", 			Лист2.П000020018000);
			КонецЕсли;
					
			СумНалИсчисл = ПолучитьПодчиненныйЭлемент(ТекРасчПлатЗН, "СумНалИсчисл");
					
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "КолМесВлЗУ", 			Лист2.П000020023000);
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "К2", 					Лист2.П000020024000);
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "СумИсчисл", 			Лист2.П000020025000);
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "КодЛьгот387_2", 		СокрЛП(Лист2.П000020026000));
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "СумЛьгот", 			Лист2.П000020027000);
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "СумУплат", 			Лист2.П000020028000);
			ЗадатьЗначениеЭлемента(СумНалИсчисл, "СумАвУплат", 			Лист2.П000020029000);
				
		КонецЦикла;
	КонецЦикла;
	
	// очищаем дерево от незаполненных веток
	УдалитьПервуюВеткуЕслиБольшеОдной(УзелРодитель, "СумНалУпл");
	Для Каждого СумНалУпл Из УзелРодитель.Строки Цикл
		Если СумНалУпл.Код = "СумНалУпл" Тогда
			УдалитьПервуюВеткуЕслиБольшеОдной(СумНалУпл, "СумУпл");
			Для Каждого СумНалУплСтр Из СумНалУпл.Строки Цикл
				Если СумНалУплСтр.Код = "СумУпл" Тогда
					УдалитьПервуюВеткуЕслиБольшеОдной(СумНалУплСтр, "РасчПлатЗН");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПервуюВеткуЕслиБольшеОдной(Родитель, КодПотомка)
	
	ПерваяВетка = Неопределено;
	Для Каждого Стр Из Родитель.Строки Цикл
		Если Стр.Код = КодПотомка Тогда
			Если ПерваяВетка = Неопределено Тогда
				ПерваяВетка = Стр;
			Иначе
				Родитель.Строки.Удалить(ПерваяВетка);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если (Найти(Стр.Обязательность, "Н") <> 0 ИЛИ Найти(Стр.Обязательность, "H") <> 0) И УзелПуст(Стр) Тогда // учтем оба варианта: кириллицу и латиницу
			Узел.Строки.Удалить(Стр);
		Иначе
			ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = "СодПерСвед" Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = "СодПерСвед" Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_ZEMND_1_075_00_04_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура Заполнить1Нажатие(Элемент)
	
	СформироватьРаздел1();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мСтруктураМногострочныхРазделов = Новый Структура;

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 55);

мКодыБюджетнойКлассификации2006 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Название",,, 55);

мКодыБюджетнойКлассификации2007 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2007.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2007.Колонки.Добавить("Название",,, 55);

мКатегорииЗемли = Новый ТаблицаЗначений;
мКатегорииЗемли.Колонки.Добавить("Код",,, 13);
мКатегорииЗемли.Колонки.Добавить("Название",,, 55);

мЛьготы = Новый ТаблицаЗначений;
мЛьготы.Колонки.Добавить("Код",,, 11);
мЛьготы.Колонки.Добавить("Название",,, 55);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 1
ТаблицаСтраницыРаздела1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздела1);

// Элемент структуры - данные дополнительных страниц Раздела 2
ТаблицаСтраницыРаздела2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздела2);


//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "25/05/2007";

// Код отчета, равен КНД
мКодОтчета   = "1153005";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СтруктураXML2007", "Формат 4.01", Истина);
