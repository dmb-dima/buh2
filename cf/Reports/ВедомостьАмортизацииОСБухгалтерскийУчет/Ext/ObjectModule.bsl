Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;

Перем ИДКонфигурации;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если ДанныеОтчета = Неопределено Тогда
		ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
	
	// Дополнительные поля	
	Если Не ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Использование");
		ДополнительныеПоля.Колонки.Добавить("Представление");
		ДополнительныеПоля.Колонки.Добавить("Поле");
		ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ДатаПринятияКУчету";
		НоваяСтрока.Представление  = "Дата принятия к учету";
		НоваяСтрока.Использование  = Ложь;
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ПервоначальнаяСтоимость";
		НоваяСтрока.Представление  = "Первоначальная стоимость";
		НоваяСтрока.Использование  = Ложь;
		
	КонецЕсли;
	
	// Группировки
	Если Не ДанныеОтчета.Свойство("Группировка") Тогда
		Группировка = Новый ТаблицаЗначений;
		Группировка.Колонки.Добавить("Использование");
		Группировка.Колонки.Добавить("Представление");
		Группировка.Колонки.Добавить("Поле");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
		ДанныеОтчета.Вставить("Группировка", Группировка);
	
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "Подразделение";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "Подразделение";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "МОЛ";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "МОЛ";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "СчетУчета";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = "Счет учета";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "ГруппаОС";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = "Группа ОС";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "АмортизационнаяГруппа";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = "Амортизационная группа";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "СпособНачисленияАмортизации";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = "Способ начисления амортизации";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
	КонецЕсли;	
		
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт

	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	

	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	ЗаголовокКолонкиОС = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + ?(ПустаяСтрока(ЗаголовокКолонкиОС), "", " \ ");
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

	МассивДляУдаления = Новый Массив;
	Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
		
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	НовыйЭлемент.Значение = ЗаголовокКолонкиОС;	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериода",         НачалоДня(НачалоПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериодаОстатков", Новый Граница(НачалоДня(НачалоПериода), ВидГраницы.Исключая));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериодаОстатков", Дата(1,1,1,0,0,1));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериодаОстатков", Новый Граница(КонецДня(КонецПериода)));
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Подразделение", Подразделение);
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки;
	
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	
	ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПоказатели.Заголовок     = "Показатели";
	ГруппаПоказатели.Использование = Истина;
	ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаДанныеНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачало.Заголовок     = "На начало периода";
	ГруппаДанныеНаНачало.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоСтоимость.Заголовок     = "Стоимость";
	ГруппаДанныеНаНачалоСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоАмортизация = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоАмортизация.Заголовок     = "Амортизация (износ)";
	ГруппаДанныеНаНачалоАмортизация.Использование = Истина;
	ГруппаДанныеНаНачалоАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоОстаточнаяСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Заголовок     = "Остаточная стоимость" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", " (с учетом износа)", "");
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = "За период";
	ГруппаОбороты.Использование = Истина;
	ГруппаУвеличениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУвеличениеСтоимости.Заголовок     = "Увеличение стоимости";
	ГруппаУвеличениеСтоимости.Использование = Истина;
	ГруппаУвеличениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачислениеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачислениеАмортизации.Заголовок     = "Начисление амортизации (износа)";
	ГруппаНачислениеАмортизации.Использование = Истина;
	ГруппаНачислениеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаУменьшениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУменьшениеСтоимости.Заголовок     = "Уменьшение стоимости";
	ГруппаУменьшениеСтоимости.Использование = Истина;
	ГруппаУменьшениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСписаниеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСписаниеАмортизации.Заголовок     = "Списание амортизации (износа)";
	ГруппаСписаниеАмортизации.Использование = Истина;
	ГруппаСписаниеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаДанныеНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонец.Заголовок     = "На конец периода";
	ГруппаДанныеНаКонец.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецСтоимость.Заголовок     = "Стоимость";
	ГруппаДанныеНаКонецСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецАмортизация = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецАмортизация.Заголовок     = "Амортизация (износ)";
	ГруппаДанныеНаКонецАмортизация.Использование = Истина;
	ГруппаДанныеНаКонецАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецОстаточнаяСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Заголовок     = "Остаточная стоимость" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", " (с учетом износа)", "");
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ГруппаОсновноеСредство = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОсновноеСредство.Заголовок     = "";
	ГруппаОсновноеСредство.Использование = Истина;
	ГруппаОсновноеСредство.Расположение = РасположениеПоляКомпоновкиДанных.Вместе;
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОсновноеСредство, "ОсновноеСредство");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОсновноеСредство, "ИнвентарныйНомер");
	
	Если ДанныеОтчета.ПоказателиОтчета.БУ.Значение Тогда
	
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        "ПоказательБУ");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "НаНачалоПериода.СтоимостьОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "НаНачалоПериода.АмортизацияИзносОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость, "НаНачалоПериода.ОстаточнаяСтоимостьНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "ЗаПериод.СтоимостьУвеличение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "ЗаПериод.СтоимостьУменьшение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "ЗаПериод.АмортизацияИзносНачисление");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "ЗаПериод.АмортизацияИзносСписание");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "НаКонецПериода.СтоимостьОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "НаКонецПериода.АмортизацияИзносОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "НаКонецПериода.ОстаточнаяСтоимостьКонПериода");
		
	КонецЕсли;
	
	Если ДанныеОтчета.ПоказателиОтчета.НУ.Значение Тогда
	
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        "ПоказательНУ");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "НаНачалоПериода.СтоимостьНУОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "НаНачалоПериода.АмортизацияНУОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость, "НаНачалоПериода.ОстаточнаяСтоимостьНУНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "ЗаПериод.СтоимостьНУУвеличение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "ЗаПериод.СтоимостьНУУменьшение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "ЗаПериод.АмортизацияНУНачисление");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "ЗаПериод.АмортизацияНУСписание");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "НаКонецПериода.СтоимостьНУОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "НаКонецПериода.АмортизацияНУОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "НаКонецПериода.ОстаточнаяСтоимостьНУКонПериода");
		
	КонецЕсли;
	
	Если ДанныеОтчета.ПоказателиОтчета.ПР.Значение Тогда
	
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        "ПоказательПР");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "НаНачалоПериода.СтоимостьПРОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "НаНачалоПериода.АмортизацияПРОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость, "НаНачалоПериода.ОстаточнаяСтоимостьПРНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "ЗаПериод.СтоимостьПРУвеличение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "ЗаПериод.СтоимостьПРУменьшение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "ЗаПериод.АмортизацияПРНачисление");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "ЗаПериод.АмортизацияПРСписание");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "НаКонецПериода.СтоимостьПРОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "НаКонецПериода.АмортизацияПРОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "НаКонецПериода.ОстаточнаяСтоимостьПРКонПериода");
		
	КонецЕсли;
	
	Если ДанныеОтчета.ПоказателиОтчета.ВР.Значение Тогда
	
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        "ПоказательВР");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "НаНачалоПериода.СтоимостьВРОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "НаНачалоПериода.АмортизацияВРОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость, "НаНачалоПериода.ОстаточнаяСтоимостьВРНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "ЗаПериод.СтоимостьВРУвеличение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "ЗаПериод.СтоимостьВРУменьшение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "ЗаПериод.АмортизацияВРНачисление");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "ЗаПериод.АмортизацияВРСписание");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "НаКонецПериода.СтоимостьВРОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "НаКонецПериода.АмортизацияВРОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "НаКонецПериода.ОстаточнаяСтоимостьВРКонПериода");
		
	КонецЕсли;
	
	Если ДанныеОтчета.ПоказателиОтчета.Контроль.Значение Тогда
	
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        "ПоказательКонтроль");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "НаНачалоПериода.СтоимостьКонтрольОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "НаНачалоПериода.АмортизацияКонтрольОстатокНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость, "НаНачалоПериода.ОстаточнаяСтоимостьКонтрольНачПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "ЗаПериод.СтоимостьКонтрольУвеличение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "ЗаПериод.СтоимостьКонтрольУменьшение");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "ЗаПериод.АмортизацияКонтрольНачисление");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "ЗаПериод.АмортизацияКонтрольСписание");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "НаКонецПериода.СтоимостьКонтрольОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "НаКонецПериода.АмортизацияКонтрольОстатокКонПериода");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "НаКонецПериода.ОстаточнаяСтоимостьКонтрольКонПериода");
		
	КонецЕсли;
	
	Если ГруппаПоказатели.Элементы.Количество() <= 1 Тогда
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;
	
	Для Каждого ПолеГруппировки Из ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОсновноеСредство, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СтандартныеОтчеты.ДобавитьОтборПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

Функция ПолучитьПредставлениеНастройкиДляИстории() Экспорт
	
	ПредставлениеОрганизации = СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект);
	ПредставлениеОрганизации = ?(Не ПустаяСтрока(ПредставлениеОрганизации), " ", "") + ПредставлениеОрганизации;
	
	ПредставлениеПодразделение = ?(ЗначениеЗаполнено(Подразделение), " " + Подразделение, "");
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	
	ОсновнаяЧастьПредставления = СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект) + ПредставлениеОрганизации + ПредставлениеПодразделение;
	
	СоответствиеПоказателей = Новый Соответствие;
	СоответствиеПоказателей.Вставить("БУ",       "БУ");
	СоответствиеПоказателей.Вставить("НУ",       "НУ");
	СоответствиеПоказателей.Вставить("ПР",       "ПР");
	СоответствиеПоказателей.Вставить("ВР",       "ВР");
	СоответствиеПоказателей.Вставить("Контроль", "Контр.");
	
	ПредставлениеПоказатели = "";
	Для Каждого Показатель Из ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение Тогда
			ПредставлениеПоказатели = ПредставлениеПоказатели + СоответствиеПоказателей[Показатель.Ключ]+ ", ";
		КонецЕсли;
	КонецЦикла;
	ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
	
	ПредставлениеГруппировка = "";
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
		КонецЕсли;	
	КонецЦикла;
	ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
	
	ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
	
	Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеНастройкиДляИстории()

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Ведомость амортизации ОС" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета();
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
КонецПроцедуры

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(ТаблицаПолей) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	Если Не ПоказателиОтчета.БУ.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияИзносОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьУвеличение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьУменьшение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияИзносНачисление";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияИзносСписание";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияИзносОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимостьКонПериода";
	КонецЕсли;
	Если Не ПоказателиОтчета.НУ.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьНУОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияНУОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьНУНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьНУУвеличение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьНУУменьшение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияНУНачисление";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияНУСписание";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьНУОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияНУОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимостьНУКонПериода";
	КонецЕсли;
	Если Не ПоказателиОтчета.ПР.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьПРОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияПРОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьПРНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьПРУвеличение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьПРУменьшение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияПРНачисление";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияПРСписание";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьПРОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияПРОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимостьПРКонПериода";
	КонецЕсли;
	Если Не ПоказателиОтчета.ВР.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьВРОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияВРОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьВРНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьВРУвеличение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьВРУменьшение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияВРНачисление";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияВРСписание";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьВРОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияВРОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимостьВРКонПериода";
	КонецЕсли;
	Если Не ПоказателиОтчета.Контроль.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьКонтрольОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияКонтрольОстатокНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьКонтрольНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьКонтрольУвеличение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьКонтрольУменьшение";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияКонтрольНачисление";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияКонтрольСписание";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьКонтрольОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияКонтрольОстатокКонПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимостьКонтрольКонПериода";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
	
	ДобавитьПоляРесурсовВЗапрещенныеПоля(РодителиПоля);
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	Форма.Режим = "Отбор";
	Форма.РодителиПоля = РодителиПоля;
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		СтандартныеОтчеты.ОтборПриОкончанииРедактирования(ФормаОтчета, Неопределено, Истина, Ложь);
		
		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры // ОтборДобавитьЭлемент()

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	Если СохранятьНастройкуОтчета Тогда	
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
Если ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП" Тогда
	СхемаКомпоновкиДанных = ПолучитьМакет("СхемаКомпоновкиДанныхБАУ");
КонецЕсли;

#КонецЕсли