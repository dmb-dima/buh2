////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем мИдГруппы8;
Перем мИдГруппы9;
Перем мИдГруппы10;
Перем мИдГруппы11;
Перем мИдГруппы12;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем РежимОтладки;
Перем ОбязРазделов;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

Перем мСохранятьРасшифровку Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мБезКонсолидации Экспорт;
// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

Перем мДанныеОтчета Экспорт;
Перем ПоказателиВыгружаемыеСоЗнакомПлюс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет оборот по дебету счета, указанного в качестве параметра 
// функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма оборота по дебету указаного счета.
//
Функция ДО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция складывает числа по указанной колонке таблицы значений,
// содержащей строки многострочной части, предварительно округляя
// их по формату представления, заданному в форме отчета.
//
// Параметры:
//  СтруктураГруппы - переменная типа ТаблицаЗначений, содержащая
//                    строки какой-либо многострочной части
//  ИмяКолонки      - строка, имя колонки таблицы значений, для
//                    которой необходимо выполнить сложение.
//
// Примечание:
//  Функция использует функцию  ОкруглитьЧислоПоФормату().
//
Функция ИтогПоКолонке(СтруктураГруппы, ИмяКолонки)

	СуммаИтог = 0;

	Для Каждого Стр Из СтруктураГруппы Цикл
		СуммаИтог = СуммаИтог + ОкруглитьЧислоПоФормату(Стр[ИмяКолонки]);
	КонецЦикла;

	Возврат СуммаИтог;

КонецФункции // ИтогПоКолонке()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период для показа в шапке отчета
	//ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;
	
	// Период в заголовке отчета
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.)";
	
	// Показатель "Предыдущий год" (гр. 1 по строке 011)
	мФормаОтчета.Области.П000010001101.Значение = Формат(ДобавитьМесяц(мДатаНачалаПериодаОтчета, - 1), "ДФ = 'гггг'") + " г.";

	// Показатель "Отчетный год"   (гр. 1 по строке 071)
	мФормаОтчета.Области.П000010007101.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'") + " г.";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		//Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "КодОКОНХ");

		Сведения.Добавить("", "ОргПравФорм");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		//КППЮЛ = ""; // КПП

		НаимЮЛПол = ""; // Полное наименование 

		ОКПО = "";
		ОКВЭД = "";

		ОснВидДеят = "";

		ФормСобств = "";

		ОКОПФ = "";

		ОКФС = "";

		КодОКОНХ = "";

		ОргПравФорм1 = "";


	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		//ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;

		Возврат;

	КонецЕсли;

	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	мИННЮЛ = ИННЮЛ;

	мФормаОтчета.Области.ОргИНН.Значение = мИННЮЛ;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с кодом ОКПО
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКПО.Значение)) Тогда
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мФормаОтчета.Области.ОргКодОКПО.Значение  = "";
		Иначе
			мФормаОтчета.Области.ОргКодОКПО.Значение  = ОКПО;
		КонецЕсли;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКВЭД.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФорма.Значение)) Тогда
		мФормаОтчета.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргОтрасль.Значение)) Тогда
		мФормаОтчета.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКОПФ.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКФС.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФормаСобств.Значение)) Тогда
		мФормаОтчета.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргДиректор.Значение)) Тогда
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргБухгалтер.Значение)) Тогда
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Форма №3: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Форма №3: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Форма №3: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				
				// По причине присутствия в форме отчета многострочных разделов,
				// содержащих пару строк с разными кодами строки в группе строк,
				// устанавливаем принадлежность показателя многострочному разделу.
				Если ИмяГруппы = "П0000200152" Тогда
					ИмяГруппы = мИдГруппы7;
				ИначеЕсли ИмяГруппы = "П0000200162" Тогда
					ИмяГруппы = мИдГруппы8;
				ИначеЕсли ИмяГруппы = "П0000200172" Тогда
					ИмяГруппы = мИдГруппы9;
				ИначеЕсли ИмяГруппы = "П0000200182" Тогда
					ИмяГруппы = мИдГруппы10;
				КонецЕсли;

				Если Не мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
					Сообщить("Не определена принадлежность показателя по коду " + ИмяПоказателя + 
					         " многострочному разделу формы!", СтатусСообщения.Внимание);

					Продолжить;
				КонецЕсли;

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ФормаОтчета";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем ИмяПоследнейЯчейкиПоследнейСтроки;

	ТекТабличноеПоле = мФормаОтчета;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана добавляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	Если (ИмяГруппы = мИдГруппы7) ИЛИ (ИмяГруппы = мИдГруппы8)
	 ИЛИ (ИмяГруппы = мИдГруппы9) ИЛИ (ИмяГруппы = мИдГруппы10) Тогда

		// Имеем многострочный раздел, содержащий пару добавляемых строк.
		// Определим имя последней ячейки второй строки (из пары строк)
		ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[СтруктураГруппы.Колонки.Количество()-1].Имя + "_" + КолСтрок;

		ОбластьЯчейки          = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	КонецЕсли; 

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	// Если многострочная группа содержат более одной строки,
	// всегда отображаемых в форме отчета, то при добавлении новых
	// строк в группу должна расширяться секция последней строки.
	// Такое требование обусловлено реализацией вывода на печать
	// только заполненных строк многострочной группы.
	ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + ИсходноеКоличествоСтрокГруппы;

	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
	// область именованной секции
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";

		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Если Лев(ИмяСекции, 1) = "П" Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекТабличноеПоле = мФормаОтчета;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		Если (ИмяГруппы = мИдГруппы7) ИЛИ (ИмяГруппы = мИдГруппы8)
			ИЛИ (ИмяГруппы = мИдГруппы9) ИЛИ (ИмяГруппы = мИдГруппы10) Тогда
			
			// Имеем многострочный раздел, содержащий пару добавляемых строк.
			// Определим имя последней ячейки второй строки (из пары строк)
			ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[СтруктураГруппы.Колонки.Количество()-1].Имя + "_" + НомУдаляемойСтроки;
			
			ОбластьЯчейки          = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
		КонецЕсли;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧЦ = 3") + ".";
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = мФормаОтчета;

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = мФормаОтчета;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			Если (ИмяГруппы = мИдГруппы7) ИЛИ (ИмяГруппы = мИдГруппы8)
			 ИЛИ (ИмяГруппы = мИдГруппы9) ИЛИ (ИмяГруппы = мИдГруппы10) Тогда

				// Имеем многострочный раздел, содержащий пару добавляемых строк.
				// Определим имя последней ячейки второй строки (из пары строк)
				ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[СтруктураГруппы.Колонки.Количество()-1].Имя + "_" + НомИсходнойСтроки;

				ОбластьЯчейки          = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			КонецЕсли;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			// Если многострочная группа содержат более одной строки,
			// всегда отображаемых в форме отчета, то при добавлении новых
			// строк в группу должна расширяться секция последней строки.
			// Такое требование обусловлено реализацией вывода на печать
			// только заполненных строк многострочной группы.
			ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + ИсходноеКоличествоСтрокГруппы;

			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
				КонецЕсли;

			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" Тогда
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура удаляет все дополнительные строки, вставленные в табличный документ.
// Удаляет данные этих строк из структуры многострочных разделов.
// 
Процедура УдалитьДопСтрокиМногострочныхРазделов()
	Перем ИсходноеКоличествоСтрокГруппы;

	// Выясним, имеются ли дополнительные строки, добавленные в многострочный раздел.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФормаОтчета;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				Если (ИмяГруппы = мИдГруппы7) ИЛИ (ИмяГруппы = мИдГруппы8)
					ИЛИ (ИмяГруппы = мИдГруппы9) ИЛИ (ИмяГруппы = мИдГруппы10) Тогда

					// Имеем многострочный раздел, содержащий пару добавляемых строк.
					// Определим имя последней ячейки второй строки (из пары строк)
					ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[СтруктураГруппы.Колонки.Количество()-1].Имя + "_" + НСтр;

					ОбластьЯчейки          = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				КонецЕсли;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

КонецПроцедуры // УдалитьДопСтрокиМногострочныхРазделов()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мФормаОтчета;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Удаляем дополнительные строки многострочных разделов
	УдалитьДопСтрокиМногострочныхРазделов();

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	СпП.Очистить();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Процедура выводит на печать заполненные строки секции (именованных строк)
// табличного документа с заданным именем.
//
// Параметры
//  ПечатнаяФорма          – табличный документ – печатная форма;
//  ИмяСекции              – строка – имя выводимой на печать секции;
//  НоваяСтраница          – булево – признак начала новой строки;
//  СписокВложенныхСекций  – список значений – список выведенных на печать вложенных секций.
//
Процедура ВывестиНепустыеСтроки(ПечатнаяФорма, ИмяСекции, НоваяСтраница = Ложь, СписокВложенныхСекций = Неопределено)

	ОбластьСекции = мФормаОтчета.ПолучитьОбласть(ИмяСекции);

	КолвоВложенныхСекций   = 0;
	ВыведенЗаголовокСекции = Ложь;

	Если СписокВложенныхСекций = Неопределено Тогда
		СписокВложенныхСекций = Новый СписокЗначений();
	КонецЕсли;

	Для каждого Строка Из ОбластьСекции.Области Цикл

		Если Строка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.Имя = ИмяСекции Тогда
			Продолжить;
		КонецЕсли;

		// Проверяем, была ли выведена на печать вложенная секция
		Если СписокВложенныхСекций.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			// Секция ранее была выведена на печать
			Продолжить;
		КонецЕсли;

		КолвоВложенныхСекций = КолвоВложенныхСекций + 1;

		ОбластьСтроки = мФормаОтчета.ПолучитьОбласть(Строка.Имя);

		ЕстьЗаполненныеЯчейки = Ложь;

		ВложеннаяСекция = Ложь;

		Для каждого Ячейка Из ОбластьСтроки.Области Цикл

			Если Ячейка.Имя = Строка.Имя Тогда
				Продолжить;
			КонецЕсли;

			Если ВложеннаяСекция Тогда
				Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				// Это есть вложенная секция. Проверяем ее на наличие заполненных строк
				ВложеннаяСекция = Истина;
				
				ОбластьСтроки2 = мФормаОтчета.ПолучитьОбласть(Ячейка.Имя);

				Для каждого Ячейка2 Из ОбластьСтроки2.Области Цикл

					Если Ячейка2.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;

					Если Не Ячейка2.СодержитЗначение Тогда
						Продолжить;
					КонецЕсли;

					ЗначениеЯчейки = Ячейка2.Значение;

					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЕстьЗаполненныеЯчейки = Истина;
						
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если ЕстьЗаполненныеЯчейки Тогда
					// Выводим заголовок секции
					Если Не ВыведенЗаголовокСекции Тогда

						// Сначала проверим, передан ли признак начала новой строки
						Если НоваяСтраница Тогда
							ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;

						Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
							ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
							ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
						КонецЕсли;

						ВыведенЗаголовокСекции = Истина;
					КонецЕсли;

					// Добавляем в список выведенных на печать секций имя текущей секции
					СписокВложенныхСекций.Добавить(Строка.Имя);

					// Выводим на печать непустую вложенную секцию
					ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,, СписокВложенныхСекций);
					ЕстьЗаполненныеЯчейки = Ложь;

					Прервать;
				КонецЕсли;

			Иначе

				Если Не Ячейка.СодержитЗначение Тогда
					Продолжить;
				КонецЕсли;

				// Следующие показатели, несмотря на то, что содержат значение,
				// не могут служить признаком заполненной строки, так как их значение
				// (отчетный год) всегда отображается в форме отчета.
				Если (Ячейка.Имя = "П000010001101") ИЛИ (Ячейка.Имя = "П000010007101") Тогда
					Продолжить;
				КонецЕсли;

				ЗначениеЯчейки = Ячейка.Значение;

				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЕстьЗаполненныеЯчейки = Истина;

					Прервать;
				КонецЕсли; 

			КонецЕсли;

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			// Выводим заголовок секции
			Если Не ВыведенЗаголовокСекции Тогда

				// Сначала проверим, передан ли признак начала новой строки
				Если НоваяСтраница Тогда
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
					ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
					ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
				КонецЕсли;

				ВыведенЗаголовокСекции = Истина;
			КонецЕсли;

			СписокВложенныхСекций.Добавить(Строка.Имя);

			Если ВРег(Лев(Строка.Имя, 6)) = "ГРУППА" Тогда
				ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,, СписокВложенныхСекций);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьСтроки);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Выводим подвал секции
	Если ВыведенЗаголовокСекции Тогда
		Если мФормаОтчета.Области.Найти("Подвал" + ИмяСекции) <> Неопределено Тогда
			ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Подвал" + ИмяСекции);
			ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
		КонецЕсли;
	КонецЕсли;

	Если КолвоВложенныхСекций = 0 Тогда
		// Это тот случай, когда секция состоит из единственной строки.
		// Проверяем эту строку на предмет заполненных ячеек.
		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСекции.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			ПечатнаяФорма.Вывести(ОбластьСекции);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВывестиНепустыеСтроки()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Форма №3";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0).КоличествоСтраниц() > 1 Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Форма №3", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Раздел1");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	// Остаток на начало года, предшествующего предыдущему, выводим всегда
	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("П0100010");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа1");
	
	// Остаток на начало предыдущего года выводим всегда
	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("П0100030");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа2");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа3");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа4");
	
	// Остаток на конец предыдущего года выводим всегда
	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("П0100070");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа5");

	// Остаток на начало отчетного года выводим всегда
	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("П0100100");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа6");

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа7", Истина);

	// Остаток на конец отчетного года выводим всегда
	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("П0100140");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа8");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа9");

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.УправлениеВариантами = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = (Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0);
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		ПрорисоватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий				   = КомментарийОбщий;
	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мСохраненныйДок.КодИМНС = Организация.КодИМНС;
	КонецЕсли;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// Сохраняем расшифровку
	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Вставить("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий 		 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
			мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы2;
	Перем СтруктураГруппы3;
	Перем СтруктураГруппы4;
	Перем СтруктураГруппы5;
	Перем СтруктураГруппы6;
	Перем СтруктураГруппы7;
	Перем СтруктураГруппы8;
	Перем СтруктураГруппы9;
	Перем СтруктураГруппы10;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1,  СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2,  СтруктураГруппы2);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3,  СтруктураГруппы3);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4,  СтруктураГруппы4);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5,  СтруктураГруппы5);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6,  СтруктураГруппы6);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7,  СтруктураГруппы7);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8,  СтруктураГруппы8);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9,  СтруктураГруппы9);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10, СтруктураГруппы10);

	// Раздел I. Изменения капитала
	////
	// строка 010
	мФормаОтчета.Области.П000010001007.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001005.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001006.Значение);

	// строка 011
	мФормаОтчета.Области.П000010001107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001106.Значение);
	
	// строка 012
	мФормаОтчета.Области.П000010001207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001204.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001206.Значение);
	
	// строки по коду 020 многострочного раздела
	Для Ном = 1 По СтруктураГруппы1.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010002007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010002004"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010002005"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010002006"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы1[Ном - 1];
		ТекСтрокаТаблицы["П000010002007"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010002007"+НомСтр].Значение);

	КонецЦикла;

	// строка 030
	мФормаОтчета.Области.П000010003003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001003.Значение);
	
	мФормаОтчета.Области.П000010003004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001204.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы1, "П000010002004");
	
	мФормаОтчета.Области.П000010003005.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001005.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы1, "П000010002005");
	
	мФормаОтчета.Области.П000010003006.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001006.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001106.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001206.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы1, "П000010002006");

	мФормаОтчета.Области.П000010003007.Значение = мФормаОтчета.Области.П000010003003.Значение
	                                            + мФормаОтчета.Области.П000010003004.Значение
	                                            + мФормаОтчета.Области.П000010003005.Значение
	                                            + мФормаОтчета.Области.П000010003006.Значение;
	
	// строка 031
	мФормаОтчета.Области.П000010003107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010003104.Значение);
	
	// строка 032
	мФормаОтчета.Области.П000010003207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010003206.Значение);
	
	// строка 033
	мФормаОтчета.Области.П000010003307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010003306.Значение);
	
	// строка 040
	мФормаОтчета.Области.П000010004007.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010004005.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010004006.Значение);
	
	// строка 051
	мФормаОтчета.Области.П000010005107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010005103.Значение);
	
	// строка 052 
	мФормаОтчета.Области.П000010005207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010005203.Значение);
	
	// строка 053
	мФормаОтчета.Области.П000010005307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010005303.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010005306.Значение);

	// строки по коду 054 многострочного раздела
	Для Ном = 1 По СтруктураГруппы2.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010005407"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010005403"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010005404"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010005405"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010005406"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы2[Ном - 1];
		ТекСтрокаТаблицы["П000010005407"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010005407"+НомСтр].Значение);

	КонецЦикла;

	// строка 061
	мФормаОтчета.Области.П000010006107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006103.Значение);

	// строка 062
	мФормаОтчета.Области.П000010006207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006203.Значение);

	// строка 063
	мФормаОтчета.Области.П000010006307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006303.Значение)
	                 + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006306.Значение);

	// строки по коду 064 многострочного раздела
	Для Ном = 1 По СтруктураГруппы3.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010006407"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010006403"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010006404"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010006405"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010006406"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы3[Ном - 1];
		ТекСтрокаТаблицы["П000010006407"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010006407"+НомСтр].Значение);

	КонецЦикла;

	// строка 070
	мФормаОтчета.Области.П000010007007.Значение = мФормаОтчета.Области.П000010007003.Значение
	                                            + мФормаОтчета.Области.П000010007004.Значение
	                                            + мФормаОтчета.Области.П000010007005.Значение
	                                            + мФормаОтчета.Области.П000010007006.Значение;

	// строка 071
	мФормаОтчета.Области.П000010007107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007106.Значение);

	// строка 072
	мФормаОтчета.Области.П000010007207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007204.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007206.Значение);

	// строки 080 многострочного раздела
	Для Ном = 1 По СтруктураГруппы4.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010008007"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010008004"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010008005"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010008006"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы4[Ном - 1];
		ТекСтрокаТаблицы["П000010008007"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010008007"+НомСтр].Значение);

	КонецЦикла;

	// строка 100
	мФормаОтчета.Области.П000010010003.Значение = мФормаОтчета.Области.П000010007003.Значение;

	мФормаОтчета.Области.П000010010004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007204.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы4, "П000010008004");

	мФормаОтчета.Области.П000010010005.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007005.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы4, "П000010008005");

	мФормаОтчета.Области.П000010010006.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007006.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007106.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007206.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы4, "П000010008006");

	мФормаОтчета.Области.П000010010007.Значение = мФормаОтчета.Области.П000010010003.Значение
	                                            + мФормаОтчета.Области.П000010010004.Значение
	                                            + мФормаОтчета.Области.П000010010005.Значение
	                                            + мФормаОтчета.Области.П000010010006.Значение;

	// строка 101
	мФормаОтчета.Области.П000010010107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010104.Значение);

	// строка 102
	мФормаОтчета.Области.П000010010207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010206.Значение);

	// строка 103
	мФормаОтчета.Области.П000010010307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010306.Значение);

	// строка 110
	мФормаОтчета.Области.П000010011007.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010011005.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010011006.Значение);
	
	// строка 121
	мФормаОтчета.Области.П000010012107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012103.Значение);
	
	// строка 122
	мФормаОтчета.Области.П000010012207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012203.Значение);
	
	// строка 123
	мФормаОтчета.Области.П000010012307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012303.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012306.Значение);
	
	// строки 124 многострочного раздела
	Для Ном = 1 По СтруктураГруппы5.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010012407"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010012403"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010012404"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010012405"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010012406"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы5[Ном - 1];
		ТекСтрокаТаблицы["П000010012407"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010012407"+НомСтр].Значение);

	КонецЦикла;

	// строка 131
	мФормаОтчета.Области.П000010013107.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013103.Значение);

	// строка 132
	мФормаОтчета.Области.П000010013207.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013203.Значение);

	// строка 133
	мФормаОтчета.Области.П000010013307.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013303.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013306.Значение);

	// строки 134 многострочного раздела
	Для Ном = 1 По СтруктураГруппы6.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 7
		мФормаОтчета.Области["П000010013407"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010013403"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010013404"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010013405"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010013406"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы6[Ном - 1];
		ТекСтрокаТаблицы["П000010013407"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010013407"+НомСтр].Значение);

	КонецЦикла;

	// строка 140
	мФормаОтчета.Области.П000010014003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012103.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012203.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012303.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010012403")
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013103.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013203.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013303.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы6, "П000010013403");


	мФормаОтчета.Области.П000010014004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010104.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010012404")
	                                            + ИтогПоКолонке(СтруктураГруппы6, "П000010013404");

	мФормаОтчета.Области.П000010014005.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010005.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010011005.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010012405")
	                                            + ИтогПоКолонке(СтруктураГруппы6, "П000010013405");

	мФормаОтчета.Области.П000010014006.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010006.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010206.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010306.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010011006.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012306.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010012406")
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013306.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы6, "П000010013406");

	мФормаОтчета.Области.П000010014007.Значение = мФормаОтчета.Области.П000010014003.Значение 
	                                            + мФормаОтчета.Области.П000010014004.Значение
	                                            + мФормаОтчета.Области.П000010014005.Значение
	                                            + мФормаОтчета.Области.П000010014006.Значение;

	// Раздел II. Резервы
	////

	// строки по коду 151 многострочного раздела
	Для Ном = 1 По СтруктураГруппы7.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6 строки 151
		мФормаОтчета.Области["П000020015106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015105"+НомСтр].Значение);

		// Расчет показателя по графе 6 строки 152
		мФормаОтчета.Области["П000020015206"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015203"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015204"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015205"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы7[Ном - 1];
		ТекСтрокаТаблицы["П000020015106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015106"+НомСтр].Значение);
		ТекСтрокаТаблицы["П000020015206"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020015206"+НомСтр].Значение);

	КонецЦикла;

	// строки по коду 161 многострочного раздела
	Для Ном = 1 По СтруктураГруппы8.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6 строки 161
		мФормаОтчета.Области["П000020016106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016105"+НомСтр].Значение);

		// Расчет показателя по графе 6 строки 162
		мФормаОтчета.Области["П000020016206"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016203"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016204"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016205"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы8[Ном - 1];
		ТекСтрокаТаблицы["П000020016106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016106"+НомСтр].Значение);
		ТекСтрокаТаблицы["П000020016206"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020016206"+НомСтр].Значение);

	КонецЦикла;

	// строки по коду 171 многострочного раздела
	Для Ном = 1 По СтруктураГруппы9.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6 строки 171
		мФормаОтчета.Области["П000020017106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017105"+НомСтр].Значение);

		// Расчет показателя по графе 6 строки 172
		мФормаОтчета.Области["П000020017206"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017203"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017204"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017205"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы9[Ном - 1];
		ТекСтрокаТаблицы["П000020017106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017106"+НомСтр].Значение);
		ТекСтрокаТаблицы["П000020017206"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020017206"+НомСтр].Значение);

	КонецЦикла;

	// строки по коду 181 многострочного раздела
	Для Ном = 1 По СтруктураГруппы10.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6 строки 181
		мФормаОтчета.Области["П000020018106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018105"+НомСтр].Значение);

		// Расчет показателя по графе 6 строки 182
		мФормаОтчета.Области["П000020018206"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018203"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018204"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018205"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы10[Ном - 1];
		ТекСтрокаТаблицы["П000020018106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018106"+НомСтр].Значение);
		ТекСтрокаТаблицы["П000020018206"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000020018206"+НомСтр].Значение);

	КонецЦикла;

КонецПроцедуры // Расчет()

// Создает и заполняет дополнительные строки многострочного
// раздела формы. Вызывается при автозаполнении отчета по
// данным учета.
// 
// Параметры
//  ДанныеДопСтрок  – таблица значений – содержит данные 
//                 для заполнения дополнительных строк.
//
Процедура АвтозаполнениеДопСтрок(ДанныеДопСтрок)
	Перем СтруктураГруппы;
	Перем ИмяГруппы;

	// Обновляем структуру данных многострочного раздела
	Для каждого СтрокаТаблицы Из ДанныеДопСтрок Цикл

		Если СтрокаТаблицы.Раздел <> ИмяГруппы Тогда
			ИмяГруппы = СтрокаТаблицы.Раздел;
			Если ИмяГруппы = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		КонецЕсли;

		Наименование              = СтрокаТаблицы.Наименование;
		ОстатокПредыдущийГод      = СтрокаТаблицы.ОстатокПредыдущийГод;
		ПоступилоПредыдущийГод    = СтрокаТаблицы.ПоступилоПредыдущийГод;
		ИспользованоПредыдущийГод = СтрокаТаблицы.ИспользованоПредыдущийГод;
		ОстатокОтчетныйГод        = СтрокаТаблицы.ОстатокОтчетныйГод;
		ПоступилоОтчетныйГод      = СтрокаТаблицы.ПоступилоОтчетныйГод;
		ИспользованоОтчетныйГод   = СтрокаТаблицы.ИспользованоОтчетныйГод;

		ЗаполнилиПустуюСтроку = 0;
		Для Каждого СтрокаГруппы Из СтруктураГруппы Цикл
			Если ПустаяСтрока(СтрокаГруппы[0]) И (СтрокаГруппы[1] = 0) И (СтрокаГруппы[2] = 0)
			   И (СтрокаГруппы[3] = 0) И (СтрокаГруппы[4] = 0) И (СтрокаГруппы[5] = 0)
			   И (СтрокаГруппы[6] = 0) И (СтрокаГруппы[7] = 0) И (СтрокаГруппы[8] = 0) Тогда

				// Это первая незаполненная строка многострочного раздела
				СтрокаГруппы[0] = Наименование;
				СтрокаГруппы[1] = ОстатокПредыдущийГод;
				СтрокаГруппы[2] = ПоступилоПредыдущийГод;
				СтрокаГруппы[3] = ИспользованоПредыдущийГод;
				СтрокаГруппы[4] = ОстатокПредыдущийГод + ПоступилоПредыдущийГод + ИспользованоПредыдущийГод;
				СтрокаГруппы[5] = ОстатокОтчетныйГод;
				СтрокаГруппы[6] = ПоступилоОтчетныйГод;
				СтрокаГруппы[7] = ИспользованоОтчетныйГод;
				СтрокаГруппы[8] = ОстатокОтчетныйГод + ПоступилоОтчетныйГод + ИспользованоОтчетныйГод;

				ЗаполнилиПустуюСтроку = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполнилиПустуюСтроку = 0 Тогда
			// Определяем порядковый номер последней строки перед вставкой
			НоваяСтрока    = СтруктураГруппы.Добавить();
			НоваяСтрока[0] = Наименование;
			НоваяСтрока[1] = ОстатокПредыдущийГод;
			НоваяСтрока[2] = ПоступилоПредыдущийГод;
			НоваяСтрока[3] = ИспользованоПредыдущийГод;
			НоваяСтрока[4] = ОстатокПредыдущийГод + ПоступилоПредыдущийГод + ИспользованоПредыдущийГод;
			НоваяСтрока[5] = ОстатокОтчетныйГод;
			НоваяСтрока[6] = ПоступилоОтчетныйГод;
			НоваяСтрока[7] = ИспользованоОтчетныйГод;
			НоваяСтрока[8] = ОстатокОтчетныйГод + ПоступилоОтчетныйГод + ИспользованоОтчетныйГод;
		КонецЕсли;

		Если ДанныеДопСтрок.Индекс(СтрокаТаблицы) = (ДанныеДопСтрок.Количество() - 1) Тогда
			// Последняя строка таблицы значений.
			// Выводим дополнительные строки в таблицу
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		Иначе
			СледующаяСтрока = ДанныеДопСтрок.Получить(ДанныеДопСтрок.Индекс(СтрокаТаблицы) + 1);
			Если СледующаяСтрока.Раздел <> ИмяГруппы Тогда
				// Конец перечня параметров одного многострочного раздела
				// Выводим дополнительные строки в таблицу
				ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // АвтозаполнениеДопСтрок()

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	Перем ТаблДанныхДопСтрокОбщ;
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).

	
	//////// ПОРЯДОК АВТОЗАПОЛНЕНИЯ МНОГОСТРОЧНЫХ РАЗДЕЛОВ ФОРМЫ
	//
	// Для создания и заполнения дополнительных строк Раздела II "Резервы" 
	// необходимо предварительно заполнить таблицу значений ТаблДанныхДопСтрок,
	// далее вызвать процедуру АвтозаполнениеДопСтрок(), передав в качестве
	// параметра таблицу значений ТаблДанныхДопСтрок.
	//
	////////
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	// Очищаем форму перед заполнением
	Очистить();
	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Раздел");     // идентификатор многострочного раздела
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");
	ТаблДанныхДопСтрок.Колонки.Добавить("ОстатокПредыдущийГод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ПоступилоПредыдущийГод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ИспользованоПредыдущийГод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ОстатокОтчетныйГод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ПоступилоОтчетныйГод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ИспользованоОтчетныйГод");

	// Инициализация
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет14      = ПС.РезервыПодСнижениеСтоимостиМЦ;
	Счет62      = ПС.РасчетыСПокупателямиИЗаказчиками;
	Счет63      = ПС.РезервыПоСомнительнымДолгам;
	Счет70      = ПС.РасчетыСПерсоналомПоОплатеТруда;
	Счет75_02   = ПС.РасчетыПоВыплатеДоходов;
	Счет76      = ПС.РасчетыСРазнымиДебиторамиИКредиторами;
	Счет80      = ПС.УставныйКапитал;
	Счет81      = ПС.СобственныеАкции;
	Счет82      = ПС.РезервныйКапитал;
	Счет82_01   = ПС.РезервыОбразованныеВСоответствииСЗаконодательством;
	Счет82_02   = ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами;
	Счет83      = ПС.ДобавочныйКапитал;
	Счет84      = ПС.НераспределеннаяПрибыль;
	Счет84_01   = ПС.ПрибыльПодлежащаяРаспределению;
	Счет84_02   = ПС.УбытокПодлежащийПокрытию;
	Счет91_01   = ПС.ПрочиеДоходы;
	Счет91_02   = ПС.ПрочиеРасходы;
	Счет99      = ПС.ПрибылиИУбытки;

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблДанныхДопСтрок);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		Итоги   = "НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";

		// От даты конца периода отнимаем 12 месяцев
		ДатаКонцаПериодаПрошлогоГода = КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		ДатаНачалаПериодаПрошлогоГода = НачалоГода(ДатаКонцаПериодаПрошлогоГода);
		
		ДатаКонцаПериодаГодаПредшествующегоПрошлому = КонецГода(ДобавитьМесяц(ДатаНачалаПериодаПрошлогоГода, -1));
		ДатаНачалаПериодаГодаПредшествующегоПрошлому = НачалоГода(ДатаКонцаПериодаГодаПредшествующегоПрошлому);

		// Бухгалтерские итоги по счетам, без аналитики - за период, предшествующий прошлому
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому, , , , , , "Организация", мОргРасшифровка);

		// строка 010 "Остаток на 31 декабря года, предшествующего предыдущему"
		П010001003 = СКК(Счет80);
		УстановитьЗначениеПоказателя("П000010001003", П010001003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003","Строка 010 ""Остаток на 31 декабря года, предшествующего предыдущему"", графа 3 ""Уставный капитал""","+","!СКК", П010001003, Счет80, , ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому);

		П010001004 = СКК(Счет83);
		УстановитьЗначениеПоказателя("П000010001004", П010001004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001004","Строка 010 ""Остаток на 31 декабря года, предшествующего предыдущему"", графа 4 ""Добавочный капитал""","+","!СКК", П010001004, Счет83, , ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому);

		П010001005 = СКК(Счет82);
		УстановитьЗначениеПоказателя("П000010001005", П010001005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001005","Строка 010 ""Остаток на 31 декабря года, предшествующего предыдущему"", графа 5 ""Резервный капитал""","+","!СКК", П010001005, Счет82, , ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому);

		П010001006_84_К = СКК(Счет84);
		П010001006_84_Д = СКД(Счет84);
		
		П010001006 = П010001006_84_К - П010001006_84_Д;
		УстановитьЗначениеПоказателя("П000010001006", П010001006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001006","Строка 010 ""Остаток на 31 декабря года, предшествующего предыдущему"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!СКК", П010001006_84_К, Счет84, , ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001006","","-","!СКД", -П010001006_84_Д, Счет84, , ДатаНачалаПериодаГодаПредшествующегоПрошлому, ДатаКонцаПериодаГодаПредшествующегоПрошлому);

		// Бухгалтерские итоги по счетам, без аналитики - за период, предшествующий отчетному
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		// строка 032 "Чистая прибыль"
		П010003206_84_01_К = ОБ(Счет99, Счет84_01);
		П010003206_84_02_Д = ОБ(Счет84_02, Счет99);

		П010003206 = П010003206_84_01_К - П010003206_84_02_Д;
		УстановитьЗначениеПоказателя("П000010003206", П010003206);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003206","Строка 032 ""Чистая прибыль"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!ОБ", П010003206_84_01_К, Счет99, Счет84_01, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003206","","-","!ОБ", -П010003206_84_02_Д, Счет84_02, Счет99, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// строка 033 "Дивиденды"
		П010003306_75_02 = ОБ(Счет84, Счет75_02);
		П010003306_70    = ОБ(Счет84, Счет70);

		П010003306 = -(П010003306_75_02 + П010003306_70);
		УстановитьЗначениеПоказателя("П000010003306", П010003306);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003306","Строка 033 ""Дивиденды"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!ОБ", П010003306_75_02, Счет84, Счет75_02, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003306","","+","!ОБ", П010003306_70, Счет84, Счет70, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// строка 040 "Отчисления в резервный фонд"
		П010004005_82_К = ОБ(Счет84, Счет82);
		П010004005_82_Д = ОБ(Счет82, Счет84);

		П010004005 = П010004005_82_К - П010004005_82_Д;
		УстановитьЗначениеПоказателя("П000010004005", П010004005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004005","Строка 040 ""Отчисления в резервный фонд"", графа 5 ""Резервный капитал""","+","!ОБ", П010004005_82_К, Счет84, Счет82, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004005","","-","!ОБ", -П010004005_82_Д, Счет82, Счет84, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// Показатели в колонках 5 и 6 связаны: отчисления в резервный фонд уменьшают 
		// нераспределенную прибыль; погашение убытка, в свою очередь, уменьшает 
		// резервный фонд.
		УстановитьЗначениеПоказателя("П000010004006", -П010004005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004006","Строка 040 ""Отчисления в резервный фонд"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","Значение из графы 5 с противоположным знаком", П010004005, , , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// строка 070 "Остаток на 31 декабря предыдущего года"
		П010007003 = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет80);
		УстановитьЗначениеПоказателя("П000010007003", П010007003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007003","Строка 070 ""Остаток на 31 декабря предыдущего года"", графа 3 ""Уставный капитал""","+","!СКК", П010007003, Счет80, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		П010007004 = СКК(Счет83);
		УстановитьЗначениеПоказателя("П000010007004", П010007004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007004","Строка 070 ""Остаток на 31 декабря предыдущего года"", графа 4 ""Добавочный капитал""","+","!СКК", П010007004, Счет83, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		П010007005 = СКК(Счет82);
		УстановитьЗначениеПоказателя("П000010007005", П010007005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007005","Строка 070 ""Остаток на 31 декабря предыдущего года"", графа 5 ""Резервный капитал""","+","!СКК", П010007005, Счет82, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		П010007006_84_К = СКК(Счет84);
		П010007006_84_Д = СКД(Счет84);
		
		П010007006 = П010007006_84_К - П010007006_84_Д;
		УстановитьЗначениеПоказателя("П000010007006", П010007006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007006","Строка 010 ""Остаток на 31 декабря года, предшествующего предыдущему"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!СКК", П010007006_84_К, Счет84, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007006","","-","!СКД", -П010007006_84_Д, Счет84, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// Отчетный год
		// Бухгалтерские итоги по счетам, без аналитики - за отчетный период
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		// строка 102 "Чистая прибыль"
		П010010206_84_01_К = ОБ(Счет99, Счет84_01);
		П010010206_84_02_Д = ОБ(Счет84_02, Счет99);

		П010010206 = П010010206_84_01_К - П010010206_84_02_Д;
		УстановитьЗначениеПоказателя("П000010010206", П010010206);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010206","Строка 102 ""Чистая прибыль"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!ОБ", П010010206_84_01_К , Счет99, Счет84_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010206","","-","!ОБ", -П010010206_84_02_Д, Счет84_02, Счет99);

		// строка 103 "Дивиденды"
		П010010306_75_02 = ОБ(Счет84, Счет75_02);
		П010010306_70    = ОБ(Счет84, Счет70);

		П010010306 = -(П010010306_75_02 + П010010306_70);
		УстановитьЗначениеПоказателя("П000010010306", П010010306);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010306","Строка 103 ""Дивиденды"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","!ОБ", П010010306_75_02, Счет84, Счет75_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010306","","+","!ОБ", П010010306_70, Счет84, Счет70);

		// строка 110 "Отчисления в резервный фонд"
		П010011005_82_К = ОБ(Счет84, Счет82);
		П010011005_82_Д = ОБ(Счет82, Счет84);

		П010011005 = П010011005_82_К - П010011005_82_Д;
		УстановитьЗначениеПоказателя("П000010011005", П010011005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011005","Строка 110 ""Отчисления в резервный фонд"", графа 5 ""Резервный капитал""","+","!ОБ", П010011005_82_К, Счет84, Счет82);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011005","","-","!ОБ", -П010011005_82_Д, Счет82, Счет84);

		// Показатели в колонках 5 и 6 связаны: отчисления в резервный фонд уменьшают 
		// нераспределенную прибыль; погашение убытка, в свою очередь, уменьшает 
		// резервный фонд.
		УстановитьЗначениеПоказателя("П000010011006", -П010011005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011006","Строка 110 ""Отчисления в резервный фонд"", графа 6 ""Нераспределенная прибыль (непокрытый убыток)""","+","Значение из графы 5 с противоположным знаком", П010011005);

		// Резервы

		// Резервы, образованные в соответствии с законодательством
		
		// Период предыдущего года, аналогичный отчетному
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		П151_ОстатокПред      = СНК(Счет82_01);
		П151_ПоступилоПред    = ОБ(Счет84, Счет82_01);
		П151_ИспользованоПред = -ДО(Счет82_01);

		// отчетный год
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		П151_Остаток      = СНК(Счет82_01);
		П151_Поступило    = ОБ(Счет84, Счет82_01);
		П151_Использовано = -ДО(Счет82_01);

		Если (Макс(П151_ОстатокПред, П151_ПоступилоПред, П151_ИспользованоПред, П151_Остаток, П151_Поступило, П151_Использовано) > 0)
		 ИЛИ  (Мин(П151_ОстатокПред, П151_ПоступилоПред, П151_ИспользованоПред, П151_Остаток, П151_Поступило, П151_Использовано) < 0) Тогда

			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Раздел                    = мИдГруппы7;
			НоваяСтрока.Наименование              = "Резервы, образованные в соответствии с законодательством";
			НоваяСтрока.ОстатокПредыдущийГод      = П151_ОстатокПред;
			НоваяСтрока.ПоступилоПредыдущийГод    = П151_ПоступилоПред;
			НоваяСтрока.ИспользованоПредыдущийГод = П151_ИспользованоПред;
			НоваяСтрока.ОстатокОтчетныйГод        = П151_Остаток;
			НоваяСтрока.ПоступилоОтчетныйГод      = П151_Поступило;
			НоваяСтрока.ИспользованоОтчетныйГод   = П151_Использовано;

		КонецЕсли;

		// Резервы, образованные в соответствии с учредительными документами

		// Период предыдущего года, аналогичный отчетному
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		П161_ОстатокПред      = СНК(Счет82_02);
		П161_ПоступилоПред    = ОБ(Счет84, Счет82_02);
		П161_ИспользованоПред = -ДО(Счет82_02);

		// отчетный год
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		П161_Остаток      = СНК(Счет82_02);
		П161_Поступило    = ОБ(Счет84, Счет82_02);
		П161_Использовано = -ДО(Счет82_02);

		Если (Макс(П161_ОстатокПред, П161_ПоступилоПред, П161_ИспользованоПред, П161_Остаток, П161_Поступило, П161_Использовано) > 0)
		 ИЛИ  (Мин(П161_ОстатокПред, П161_ПоступилоПред, П161_ИспользованоПред, П161_Остаток, П161_Поступило, П161_Использовано) < 0) Тогда

			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Раздел                    = мИдГруппы8;
			НоваяСтрока.Наименование              = "Резервы, образованные в соответствии с учредительными документами";
			НоваяСтрока.ОстатокПредыдущийГод      = П161_ОстатокПред;
			НоваяСтрока.ПоступилоПредыдущийГод    = П161_ПоступилоПред;
			НоваяСтрока.ИспользованоПредыдущийГод = П161_ИспользованоПред;
			НоваяСтрока.ОстатокОтчетныйГод        = П161_Остаток;
			НоваяСтрока.ПоступилоОтчетныйГод      = П161_Поступило;
			НоваяСтрока.ИспользованоОтчетныйГод   = П161_Использовано;

		КонецЕсли;


		// Оценочные резервы

		// Резервы под снижение стоимости материальных ценностей

		// Период предыдущего года, аналогичный отчетному
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		П171_ОстатокПред      = СНК(Счет14);
		П171_ПоступилоПред    = ОБ(Счет91_02, Счет14);
		П171_ИспользованоПред = -ОБ(Счет14, Счет91_01);

		// отчетный год
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);
		
		П171_Остаток      = СНК(Счет14);
		П171_Поступило    = ОБ(Счет91_02, Счет14);
		П171_Использовано = -ОБ(Счет14, Счет91_01);

		Если (Макс(П171_ОстатокПред, П171_ПоступилоПред, П171_ИспользованоПред, П171_Остаток, П171_Поступило, П171_Использовано) > 0)
		 ИЛИ  (Мин(П171_ОстатокПред, П171_ПоступилоПред, П171_ИспользованоПред, П171_Остаток, П171_Поступило, П171_Использовано) < 0) Тогда

			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Раздел                    = мИдГруппы9;
			НоваяСтрока.Наименование              = "Резервы под снижение стоимости материальных ценностей";
			НоваяСтрока.ОстатокПредыдущийГод      = П171_ОстатокПред;
			НоваяСтрока.ПоступилоПредыдущийГод    = П171_ПоступилоПред;
			НоваяСтрока.ИспользованоПредыдущийГод = П171_ИспользованоПред;
			НоваяСтрока.ОстатокОтчетныйГод        = П171_Остаток;
			НоваяСтрока.ПоступилоОтчетныйГод      = П171_Поступило;
			НоваяСтрока.ИспользованоОтчетныйГод   = П171_Использовано;

		КонецЕсли;

		// Резервы по сомнительным долгам

		// Период предыдущего года, аналогичный отчетному
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);
		
		П171_ОстатокПред      = СНК(Счет63);
		П171_ПоступилоПред    = ОБ(Счет91_02, Счет63);
		П171_ИспользованоПред = -(ОБ(Счет63, Счет91_01) + ОБ(Счет63, Счет62) + ОБ(Счет63, Счет76));

		// отчетный год
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);
		
		П171_Остаток      = СНК(Счет63);
		П171_Поступило    = ОБ(Счет91_02, Счет63);
		П171_Использовано = -(ОБ(Счет63, Счет91_01) + ОБ(Счет63, Счет62) + ОБ(Счет63, Счет76));

		Если (Макс(П171_ОстатокПред, П171_ПоступилоПред, П171_ИспользованоПред, П171_Остаток, П171_Поступило, П171_Использовано) > 0)
		 ИЛИ  (Мин(П171_ОстатокПред, П171_ПоступилоПред, П171_ИспользованоПред, П171_Остаток, П171_Поступило, П171_Использовано) < 0) Тогда

			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Раздел                    = мИдГруппы9;
			НоваяСтрока.Наименование              = "Резервы по сомнительным долгам";
			НоваяСтрока.ОстатокПредыдущийГод      = П171_ОстатокПред;
			НоваяСтрока.ПоступилоПредыдущийГод    = П171_ПоступилоПред;
			НоваяСтрока.ИспользованоПредыдущийГод = П171_ИспользованоПред;
			НоваяСтрока.ОстатокОтчетныйГод        = П171_Остаток;
			НоваяСтрока.ПоступилоОтчетныйГод      = П171_Поступило;
			НоваяСтрока.ИспользованоОтчетныйГод   = П171_Использовано;

		КонецЕсли;


		// Резервы предстоящих расходов
		
		// Выполняем отдельно запрос по предыдущему году, и отдельно - по отчетному
		
		// Бухгалтерские итоги по резервам предстоящих расходов
		// Период предыдущего года, аналогичный отчетному

		ТаблДанныхПоРезервамДопРасх = Новый ТаблицаЗначений();
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("Резерв");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ОстатокПредыдущийГод");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ПоступилоПредыдущийГод");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ИспользованоПредыдущийГод");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ОстатокОтчетныйГод");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ПоступилоОтчетныйГод");
		ТаблДанныхПоРезервамДопРасх.Колонки.Добавить("ИспользованоОтчетныйГод");
		
		// Период предыдущего года, аналогичный отчетному
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , "96", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		Пока ВыборкаПоСубконто.Следующий() Цикл
			
			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			П181_ОстатокПред      = ВыборкаПоСубконто.СуммаНачальныйОстатокКт;
			П181_ПоступилоПред    = ВыборкаПоСубконто.СуммаОборотКт;
			П181_ИспользованоПред = - ВыборкаПоСубконто.СуммаОборотДт;
			
			СтрокаТаблДанныхПоРезервамДопРасх = ТаблДанныхПоРезервамДопРасх.Добавить();

			СтрокаТаблДанныхПоРезервамДопРасх.Резерв                    = ВыбранноеСубконто;
			СтрокаТаблДанныхПоРезервамДопРасх.ОстатокПредыдущийГод      = П181_ОстатокПред;
			СтрокаТаблДанныхПоРезервамДопРасх.ПоступилоПредыдущийГод    = П181_ПоступилоПред;
			СтрокаТаблДанныхПоРезервамДопРасх.ИспользованоПредыдущийГод = П181_ИспользованоПред;
			СтрокаТаблДанныхПоРезервамДопРасх.ОстатокОтчетныйГод        = 0;
			СтрокаТаблДанныхПоРезервамДопРасх.ПоступилоОтчетныйГод      = 0;
			СтрокаТаблДанныхПоРезервамДопРасх.ИспользованоОтчетныйГод   = 0;

		КонецЦикла;
		
		// отчетный год
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "96", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();
		
		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			П181_Остаток      = ВыборкаПоСубконто.СуммаНачальныйОстатокКт;
			П181_Поступило    = ВыборкаПоСубконто.СуммаОборотКт;
			П181_Использовано = -ВыборкаПоСубконто.СуммаОборотДт;

			// Ищем в таблице значений вид резерва
			НомерСтроки = 0;
			СтрокаТаблДанныхПоРезервамДопРасх = ТаблДанныхПоРезервамДопРасх.Найти(ТаблДанныхПоРезервамДопРасх, "Резерв");
			
			Если СтрокаТаблДанныхПоРезервамДопРасх = Неопределено Тогда
				// Если резерва в таблице еще нет - добавляем
				СтрокаТаблДанныхПоРезервамДопРасх = ТаблДанныхПоРезервамДопРасх.Добавить();
				СтрокаТаблДанныхПоРезервамДопРасх.Резерв = ВыбранноеСубконто;
				СтрокаТаблДанныхПоРезервамДопРасх.ОстатокПредыдущийГод      = 0;
				СтрокаТаблДанныхПоРезервамДопРасх.ПоступилоПредыдущийГод    = 0;
				СтрокаТаблДанныхПоРезервамДопРасх.ИспользованоПредыдущийГод = 0;
				
			КонецЕсли;

			СтрокаТаблДанныхПоРезервамДопРасх.ОстатокОтчетныйГод        = П181_Остаток;
			СтрокаТаблДанныхПоРезервамДопРасх.ПоступилоОтчетныйГод      = П181_Поступило;
			СтрокаТаблДанныхПоРезервамДопРасх.ИспользованоОтчетныйГод   = П181_Использовано;

		КонецЦикла;
		
		// Теперь таблица значений ТаблДанныхПоРезервамДопРасх содержит информацию
		// о резервах дополнительных расходов. Переносим ее в таблицу ТаблДанныхДопСтрок.
		Инд = 0;
		
		Для каждого Строка Из ТаблДанныхПоРезервамДопРасх Цикл
			
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Раздел                    = мИдГруппы10;
			НоваяСтрока.Наименование              = Строка.Резерв.Наименование;
			НоваяСтрока.ОстатокПредыдущийГод      = Строка.ОстатокПредыдущийГод;
			НоваяСтрока.ПоступилоПредыдущийГод    = Строка.ПоступилоПредыдущийГод;
			НоваяСтрока.ИспользованоПредыдущийГод = Строка.ИспользованоПредыдущийГод;
			НоваяСтрока.ОстатокОтчетныйГод        = Строка.ОстатокОтчетныйГод;
			НоваяСтрока.ПоступилоОтчетныйГод      = Строка.ПоступилоОтчетныйГод;
			НоваяСтрока.ИспользованоОтчетныйГод   = Строка.ИспользованоОтчетныйГод;
			
		КонецЦикла;
		// _____________________________


		Если ТаблДанныхДопСтрок.Количество() > 0 Тогда
			Если мБезКонсолидации Тогда
				// Создаем и заполняем дополнительные строки.
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрок);
			Иначе
				// Сохраним в накопительной таблице
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблДанныхДопСтрок, ТаблДанныхДопСтрокОбщ);
				ТаблДанныхДопСтрок.Очистить();
			КонецЕсли;
		КонецЕсли;

		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("Раздел, Наименование", "ОстатокПредыдущийГод, ПоступилоПредыдущийГод, ИспользованоПредыдущийГод, ОстатокОтчетныйГод, ПоступилоОтчетныйГод, ИспользованоОтчетныйГод");
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрокОбщ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

    ///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Форма №3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ФормироватьСтруктуруСтраницОтчета();

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;

			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"ФормаОтчета");

	ДоступностьКнопокДобавитьУдалить();

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		ПрорисоватьПодменюПечать();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПрорисоватьПодменюПечать()
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0 Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	Иначе
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), , Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
Процедура ПоказатьКодЕИ()

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "383";
		мФормаОтчета.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "384";
		мФормаОтчета.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "385";
		мФормаОтчета.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;

КонецПроцедуры // ПоказатьКодЕИ

// ОбработчикИзменения
//
Процедура ОбработчикИзменения()

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ОбработчикИзменения

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	//ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);
		КнопкаУдалить  = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки"  + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

		Если КнопкаУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаУдалить.Доступность = Ложь;
			Иначе
				КнопкаУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

Процедура ОсновнаяПанельПриСменеСтраницы(а, б) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик нажатия кнопки <Добавить>
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиНажатие()

// Процедура - обработчик нажатия кнопки <Удалить>
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзменении(Элемент)

	ОбработчикИзменения();

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")
	 Или (ОбластьИмя = "П000010001003")) Тогда
		ОбработчикИзменения();
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораВариантЗаполненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 или 
		мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=3; ЧГ=0";
		
	ИначеЕсли мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=6; ЧГ=0";
		
	КонецЕсли;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020016203");
	МногострочныеИсключения.Добавить("П000020017203");
	МногострочныеИсключения.Добавить("П000020018203");
	МногострочныеИсключения.Добавить("П000020031003");
	МногострочныеИсключения.Добавить("П000020034003");
	МногострочныеИсключения.Добавить("П000020037003");
	МногострочныеИсключения.Добавить("П000020040003");
	МногострочныеИсключения.Добавить("П000020035003");
	МногострочныеИсключения.Добавить("П000020038003");
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020041003");
		 
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020016203");
	МногострочныеИсключения.Добавить("П000020017203");
	МногострочныеИсключения.Добавить("П000020018203");
	МногострочныеИсключения.Добавить("П000020031003");
	МногострочныеИсключения.Добавить("П000020034003");
	МногострочныеИсключения.Добавить("П000020037003");
	МногострочныеИсключения.Добавить("П000020040003");
	МногострочныеИсключения.Добавить("П000020035003");
	МногострочныеИсключения.Добавить("П000020038003");
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020041003");
	
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	//*************************************************************************************************************************
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020016203");
	МногострочныеИсключения.Добавить("П000020017203");
	МногострочныеИсключения.Добавить("П000020018203");
	МногострочныеИсключения.Добавить("П000020031003");
	МногострочныеИсключения.Добавить("П000020034003");
	МногострочныеИсключения.Добавить("П000020037003");
	МногострочныеИсключения.Добавить("П000020040003");
	МногострочныеИсключения.Добавить("П000020035003");
	МногострочныеИсключения.Добавить("П000020038003");
	МногострочныеИсключения.Добавить("П000020032003");
	МногострочныеИсключения.Добавить("П000020041003");
	
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
				СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
				СтатусПроверки = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели201() Экспорт
	
	Орг = мСохраненныйДок.Организация;
	ДатаПодписи = мСохраненныйДок.ДатаПодписи;
	ТаблицаСообщений.Очистить();
	РезПроверки1 = ПроверитьШапку(Ложь);
	РезПроверки2 = ПроверитьПредписанныеПоказатели(Ложь);
	Возврат (РезПроверки1 И РезПроверки2);
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат ПроверитьПоказателиXML();
	Иначе
		Возврат ПроверитьПоказатели201();
	КонецЕсли;
	
КонецФункции

Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат УниверсальнаяВыгрузкаXML(Текст);
	Иначе
		Возврат УниверсальнаяВыгрузка201(Текст);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьШапку(БратьИзФормы = Истина)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	
	Орг = мСохраненныйДок.Организация;
	
	ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКПО) Тогда
		СообщитьВТС("Не задано значение кода по ОКПО", "ФормаОтчета", "ОргКодОКПО");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОснВидДеят) Тогда
		СообщитьВТС("Не задано наименование основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргОтрасль");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКВЭД) Тогда
		СообщитьВТС("Не задан код основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОргПравФорм) Тогда
		СообщитьВТС("Не задано наименование организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргФорма");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКОПФ) Тогда
		СообщитьВТС("Не задан код организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ФормСобств) Тогда
		СообщитьВТС("Не задано наименование формы собственности по ОКФС", "ФормаОтчета", "ОргФормаСобств");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКФС) Тогда
		СообщитьВТС("Не задан код собственности по ОКФС", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Возврат НЕ Булево(СтатусПроверки);
	
КонецФункции

Процедура ПроставитьПоказателиКоторыхНетНаФорме(Текст)
	
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		Тек13Симв = Лев(Текст.ПолучитьСтроку(ТекИнд), 13);
		
		Если Тек13Симв = "П000010001007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010001008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010001009:");
		ИначеЕсли Тек13Симв = "П000010003007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010003008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010003009:");
		ИначеЕсли Тек13Симв = "П000010003107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010003108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010003109:");
		ИначеЕсли Тек13Симв = "П000010004007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010004008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010004009:");
		ИначеЕсли Тек13Симв = "П000010005007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010005008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010005009:");
		ИначеЕсли Тек13Симв = "П000010011107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010011108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010011109:");
		ИначеЕсли Тек13Симв = "П000010014107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010014108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010014109:");
		ИначеЕсли Тек13Симв = "П000010015007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010015008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010015009:");
		ИначеЕсли Тек13Симв = "П000010017007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010017008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010017009:");
		ИначеЕсли Тек13Симв = "П000010017107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010017108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010017109:");
		ИначеЕсли Тек13Симв = "П000010018007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010018008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010018009:");
		ИначеЕсли Тек13Симв = "П000010019007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010019008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010019009:");
		ИначеЕсли Тек13Симв = "П000010025107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010025108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010025109:");
		ИначеЕсли Тек13Симв = "П000010028107" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010028108:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010028109:");
		ИначеЕсли Тек13Симв = "П000010029007" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000010029008:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000010029009:");
		ИначеЕсли Тек13Симв = "П000020030001" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000020030003:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000020030004:");
			Текст.Вставитьстроку(ТекИнд + 3, "П000020030005:");
			Текст.Вставитьстроку(ТекИнд + 4, "П000020030006:");
		ИначеЕсли Тек13Симв = "П000020033001" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000020033003:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000020033004:");
			Текст.Вставитьстроку(ТекИнд + 3, "П000020033005:");
			Текст.Вставитьстроку(ТекИнд + 4, "П000020033006:");
		ИначеЕсли Тек13Симв = "П000020036001" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000020036003:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000020036004:");
			Текст.Вставитьстроку(ТекИнд + 3, "П000020036005:");
			Текст.Вставитьстроку(ТекИнд + 4, "П000020036006:");
		ИначеЕсли Тек13Симв = "П000020039001" Тогда
			Текст.Вставитьстроку(ТекИнд + 1, "П000020039003:");
			Текст.Вставитьстроку(ТекИнд + 2, "П000020039004:");
			Текст.Вставитьстроку(ТекИнд + 3, "П000020039005:");
			Текст.Вставитьстроку(ТекИнд + 4, "П000020039006:");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ПроставитьКонцыБлока(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	КонцыБлоков.Добавить("П000010003109");
	КонцыБлоков.Добавить("П000010011007");
	КонцыБлоков.Добавить("П000010014007");
	КонцыБлоков.Добавить("П000010014109");
	КонцыБлоков.Добавить("П000010017009");
	КонцыБлоков.Добавить("П000010017109");
	КонцыБлоков.Добавить("П000010025007");
	КонцыБлоков.Добавить("П000010025109");
	КонцыБлоков.Добавить("П000010028007");
	КонцыБлоков.Добавить("П000010028109");
	КонцыБлоков.Добавить("П000010029009");
	КонцыБлоков.Добавить("П000020032006");
	КонцыБлоков.Добавить("П000020035006");
	КонцыБлоков.Добавить("П000020038006");
	КонцыБлоков.Добавить("П000020041006");
	КонцыБлоков.Добавить("П000020043006");
	КонцыБлоков.Добавить("П000020044006");
	КонцыБлоков.Добавить("П000020045006");
	КонцыБлоков.Добавить("П000020046006");
	
	ИзменятьЗнакПоказателей = (РабочаяДата >= '20070701000000');
	Если ИзменятьЗнакПоказателей Тогда
		ПоложительныеПоказатели = Новый Соответствие;
		ПоложительныеПоказатели.Вставить("П000010007006", Истина);
		ПоложительныеПоказатели.Вставить("П000010007007", Истина);
		ПоложительныеПоказатели.Вставить("П000010008006", Истина);
		ПоложительныеПоказатели.Вставить("П000010012003", Истина);
		ПоложительныеПоказатели.Вставить("П000010012007", Истина);
		ПоложительныеПоказатели.Вставить("П000010013003", Истина);
		ПоложительныеПоказатели.Вставить("П000010013007", Истина);
		ПоложительныеПоказатели.Вставить("П000010014003", Истина);
		ПоложительныеПоказатели.Вставить("П000010014006", Истина);
		ПоложительныеПоказатели.Вставить("П000010014007", Истина);
		ПоложительныеПоказатели.Вставить("П000010014103", Истина);
		ПоложительныеПоказатели.Вставить("П000010014104", Истина);
		ПоложительныеПоказатели.Вставить("П000010014105", Истина);
		ПоложительныеПоказатели.Вставить("П000010014106", Истина);
		ПоложительныеПоказатели.Вставить("П000010014107", Истина);
		ПоложительныеПоказатели.Вставить("П000010021006", Истина);
		ПоложительныеПоказатели.Вставить("П000010021007", Истина);
		ПоложительныеПоказатели.Вставить("П000010022006", Истина);
		ПоложительныеПоказатели.Вставить("П000010026003", Истина);
		ПоложительныеПоказатели.Вставить("П000010026007", Истина);
		ПоложительныеПоказатели.Вставить("П000010027003", Истина);
		ПоложительныеПоказатели.Вставить("П000010027007", Истина);
		ПоложительныеПоказатели.Вставить("П000010028003", Истина);
		ПоложительныеПоказатели.Вставить("П000010028006", Истина);
		ПоложительныеПоказатели.Вставить("П000010028007", Истина);
		ПоложительныеПоказатели.Вставить("П000010028103", Истина);
		ПоложительныеПоказатели.Вставить("П000010028104", Истина);
		ПоложительныеПоказатели.Вставить("П000010028105", Истина);
		ПоложительныеПоказатели.Вставить("П000010028106", Истина);
		ПоложительныеПоказатели.Вставить("П000010028107", Истина);
		ПоложительныеПоказатели.Вставить("П000020031005", Истина);
		ПоложительныеПоказатели.Вставить("П000020032005", Истина);
		ПоложительныеПоказатели.Вставить("П000020034005", Истина);
		ПоложительныеПоказатели.Вставить("П000020035005", Истина);
		ПоложительныеПоказатели.Вставить("П000020037005", Истина);
		ПоложительныеПоказатели.Вставить("П000020038005", Истина);
		ПоложительныеПоказатели.Вставить("П000020040005", Истина);
		ПоложительныеПоказатели.Вставить("П000020041005", Истина);
	КонецЕсли;
	
	Строки254 = Новый Массив;
	Строки254.Добавить("П000010003101");
	Строки254.Добавить("П000010011101");
	Строки254.Добавить("П000010014101");
	Строки254.Добавить("П000010017101");
	Строки254.Добавить("П000010025101");
	Строки254.Добавить("П000010028101");
	Строки254.Добавить("П000020030001");
	Строки254.Добавить("П000020033001");
	Строки254.Добавить("П000020036001");
	Строки254.Добавить("П000020039001");
	Строки254.Добавить("П000020044001");
	Строки254.Добавить("П000020046001");
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если Строки254.Найти(Тек13Симв) <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СокрЛП(Сред(ТекСтрока, 15, 254)));
		КонецЕсли;
		
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");			
		КонецЕсли;
		
		Если ИзменятьЗнакПоказателей И ПоложительныеПоказатели.Получить(Тек13Симв) = Истина И Сред(ТекСтрока, 15, 1) = "-" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + Сред(ТекСтрока, 16));
		КонецЕсли;
		
		Если ТекСтрока = "П000010003101:" 
			И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010003104:"
			И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010003105:"
			И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010003106:"
			И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010003107:" Тогда
			
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			
		КонецЕсли;
		
		Если ТекСтрока = "П000010011101:" 
			И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010011103:"
			И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010011104:"
			И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010011105:"
			И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010011106:"
			И Текст.ПолучитьСтроку(ТекИнд + 5) = "П000010011107:" Тогда
			
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			
		КонецЕсли;
		
		Если ТекСтрока = "П000010014101:" 
			И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010014103:"
			И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010014104:"
			И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010014105:"
			И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010014106:"
			И Текст.ПолучитьСтроку(ТекИнд + 5) = "П000010014107:" Тогда
			
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			
		КонецЕсли;
		
		Если ТекСтрока = "П000010017101:" 
			И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010017104:"
			И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010017105:"
			И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010017106:"
			И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010017107:" Тогда
			
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			
		КонецЕсли;
		
		Если ТекСтрока = "П000010025101:" 
			И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010025103:"
			И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010025104:"
			И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010025105:"
			И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010025106:"
			И Текст.ПолучитьСтроку(ТекИнд + 5) = "П000010025107:" Тогда
			
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			
		КонецЕсли;
		
		//Если ТекСтрока = "П000010028101:" 
		//	И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010028103:"
		//	И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010028104:"
		//	И Текст.ПолучитьСтроку(ТекИнд + 3) = "П000010028105:"
		//	И Текст.ПолучитьСтроку(ТекИнд + 4) = "П000010028106:"
		//	И Текст.ПолучитьСтроку(ТекИнд + 5) = "П000010028107:" Тогда
		//	
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	Текст.УдалитьСтроку(ТекИнд);
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьШапку(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	Данные.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	Вид = мСохраненныйДок.Вид;
	
	Дата2Число = ТекПоказатели.ДатаКонцаПериодаОтчетаЧисло;
	Дата2Месяц = ТекПоказатели.ДатаКонцаПериодаОтчетаМесяц;
	Дата2Год   = ТекПоказатели.ДатаКонцаПериодаОтчетаГод;
	Дата2 = Дата(Дата2Год, Дата2Месяц, Дата2Число);
	
	//ПризПериодОтч = 2;
	//Если Дата2 = КонецГода(Дата2) Тогда
		ПризПериодОтч = 3;
	//КонецЕсли;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ОКЕИ = 385;
	Иначе
		ОКЕИ = 384;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:2");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + НаименованиеОтчетаДляВыгрузки);
	Текст.ДобавитьСтроку("ВерФОтч:2.01002");
	Текст.ДобавитьСтроку("ПериодВерОтч:16.01.2004,");
	Текст.ДобавитьСтроку("ПризПериодОтч:"	+ ПризПериодОтч); 
	Текст.ДобавитьСтроку("НачПериодОтч:"	+ Формат(НачалоГода(Дата2),"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("КонПериодОтч:"	+ Формат(Дата2,"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("ОКЕИ:" + ОКЕИ);
	ВарФОтч = ?(Вид = 999 ИЛИ мОтключитьАвтоматическоеУправлениеВариантами = Истина, 999, Вид + 1);
	Текст.ДобавитьСтроку("ВарФОтч:" + Формат(ВарФОтч, "ЧЦ=3; ЧН=; ЧВН="));//Текст.ДобавитьСтроку("ВарФОтч:999");
	Текст.ДобавитьСтроку("КолПокФОтч:");
	Текст.ДобавитьСтроку("###");

	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Текст.ДобавитьСтроку("ОКПО:" + ВРЕГ(СокрЛП(Лев(ОКПО, 8))));
	Текст.ДобавитьСтроку("ОснВидДеят:" + ВРЕГ(СокрЛП(Лев(ОснВидДеят, 254))));
	Текст.ДобавитьСтроку("ОКВЭД:" + ВРЕГ(СокрЛП(Лев(ОКВЭД, 8))));
	Текст.ДобавитьСтроку("ОргПравФорм:" + ВРЕГ(СокрЛП(Лев(ОргПравФорм, 254))));
	Текст.ДобавитьСтроку("ОКОПФ:" + ВРЕГ(СокрЛП(Лев(ОКОПФ, 2))));
	Текст.ДобавитьСтроку("ФормСобств:" + ВРЕГ(СокрЛП(Лев(ФормСобств, 254))));
	Текст.ДобавитьСтроку("ОКФС:" + ВРЕГ(СокрЛП(Лев(ОКФС, 2))));
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка201(Текст = Неопределено) Экспорт
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	ВыгрузитьШапку(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ПроставитьПоказателиКоторыхНетНаФорме(Текст);
	
	ПроставитьКонцыБлока(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки502");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой()
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010003306");
	//ИменаПоказателейСоЗнакомПлюс.Добавить("П000010003307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010004006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006103");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006203");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006303");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006306");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006404");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006405");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006406");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010006407");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010010306");
	//ИменаПоказателейСоЗнакомПлюс.Добавить("П000010010307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010011006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013103");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013203");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013303");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013306");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013404");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013405");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013406");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013407");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020015105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020015205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020016105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020016205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020017105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020017205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020018105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020018205");
	
	ПоказателиОсновногоРаздела = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Если ПоказателиОсновногоРаздела.Свойство(Пок + "_1") Тогда
			НомерСтроки = 1;
			Пока ПоказателиОсновногоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ЗначениеПоказателя < 0 Тогда
					ПоказателиОсновногоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		ИначеЕсли ПоказателиОсновногоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
			ПоказателиОсновногоРаздела.Вставить(Пок, -ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",			"0710003");
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)]);
	Параметры.Вставить("ОтчетГод",		Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Если Параметры.Период = "34" Тогда
		Параметры.Вставить("ВидДок",	Строка(мСохраненныйДок.Вид));
	Иначе
		Параметры.Вставить("ВидДок",	""); //показатель необязательный, перед выгрузкой будет удален
	КонецЕсли;
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",		СокрЛП(Титульный.ОргИНН));
	Параметры.Вставить("КППОрг", 		СокрЛП(Организация.КПП));
	Параметры.Вставить("КодИФНС",		СокрЛП(Организация.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	// различные коды
	Параметры.Вставить("ОКПО",			СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД",			СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОКОПФ",			СокрЛП(Титульный.ОргКодОКОПФ));
	Параметры.Вставить("ОКФС",			СокрЛП(Титульный.ОргКодОКФС));
	Параметры.Вставить("ОКЕИ",			СокрЛП(Титульный.КодЕИ));
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	Параметры.Вставить("ФорматВывода",	"ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",	СокрЛП(ФИОРук.Фамилия));
	Параметры.Вставить("ИмяРук",		СокрЛП(ФИОРук.Имя));
	Параметры.Вставить("ОтчествоРук",	СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РазложитьФИО(Титульный.ОргБухгалтер);
	Параметры.Вставить("ФамилияБух",	СокрЛП(ФИОБух.Фамилия));
	Параметры.Вставить("ИмяБух",		СокрЛП(ФИОБух.Имя));
	Параметры.Вставить("ОтчествоБух",	СокрЛП(ФИОБух.Отчество));
	
	// телефон
	Параметры.Вставить("ТелОрг", РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(мСохраненныйДок.Организация, мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	Параметры.Вставить("ВерсФорм",					"5.02");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_BUH3");
	
	// формируем ИдФайл на основании значений других параметров
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));

	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "ФормаОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "ФормаОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "ФормаОтчета", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формат выгрузки допускает выгрузку отчетов только за календарный год!", "ФормаОтчета", "ПериодОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "ФормаОтчета", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННОрг, Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "ФормаОтчета", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "ФормаОтчета", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя ответственного сотрудника!", "ФормаОтчета", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "ФормаОтчета", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "ФормаОтчета", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.ОКПО) И (СтрДлина(Параметры.ОКПО) < 8 ИЛИ СтрДлина(Параметры.ОКПО) > 10 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКПО)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "ФормаОтчета", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКОПФ!", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКОПФ) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКОПФ!", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКФС!", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКФС) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКФС!", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКЕИ!", "ФормаОтчета", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКЕИ) <> 3 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКЕИ!", "ФормаОтчета", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на заполнение наименования статьи в непустых строках табличных частей
	Данные = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопСтроки = Новый Структура;
	ДопСтроки.Вставить("П000010002001", Новый Структура("П000010002004, П000010002005, П000010002006, П000010002007"));
	ДопСтроки.Вставить("П000010005401", Новый Структура("П000010005403, П000010005404, П000010005405, П000010005406, П000010005407"));
	ДопСтроки.Вставить("П000010006401", Новый Структура("П000010006403, П000010006404, П000010006405, П000010006406, П000010006407"));
	ДопСтроки.Вставить("П000010008001", Новый Структура("П000010008004, П000010008005, П000010008006, П000010008007"));
	ДопСтроки.Вставить("П000010012401", Новый Структура("П000010012403, П000010012404, П000010012405, П000010012406, П000010012407"));
	ДопСтроки.Вставить("П000010013401", Новый Структура("П000010013403, П000010013404, П000010013405, П000010013406, П000010013407"));
	ДопСтроки.Вставить("П000020015101", Новый Структура("П000020015103, П000020015104, П000020015105, П000020015106, П000020015203, П000020015204, П000020015205, П000020015206"));
	ДопСтроки.Вставить("П000020016101", Новый Структура("П000020016103, П000020016104, П000020016105, П000020016106, П000020016203, П000020016204, П000020016205, П000020016206"));
	ДопСтроки.Вставить("П000020017101", Новый Структура("П000020017103, П000020017104, П000020017105, П000020017106, П000020017203, П000020017204, П000020017205, П000020017206"));
	ДопСтроки.Вставить("П000020018101", Новый Структура("П000020018103, П000020018104, П000020018105, П000020018106, П000020018203, П000020018204, П000020018205, П000020018206"));
	ДопСтроки.Вставить("П000030021101", Новый Структура("П000030021103, П000030021104, П000030021105, П000030021106"));
	ДопСтроки.Вставить("П000030022101", Новый Структура("П000030022103, П000030022104, П000030022105, П000030022106"));
	
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		ИндСтр = 1;
		Пока Данные.Свойство(ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")) Цикл
			Если ПустаяСтрока(Данные[ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")]) Тогда
				Для Каждого СуммаДопСтроки Из ДопСтрока.Значение Цикл
					Если ЗначениеЗаполнено(ЗначениеПериведенноеКЕдиницеИзмерения(Данные[СуммаДопСтроки.Ключ + "_" + Формат(ИндСтр, "ЧГ=")], Параметры)) Тогда
						РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана статья!", "ФормаОтчета", ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ="));
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ИндСтр = ИндСтр + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);//!!!
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	ВозможныеИменаКлючевыхУзловТЧ = Новый Массив;
	ВозможныеИменаКлючевыхУзловТЧ.Добавить("ДопДан");
	ВозможныеИменаКлючевыхУзловТЧ.Добавить("Дополн");
	
	Для Каждого ИмяКлючевогоУзлаТЧ Из ВозможныеИменаКлючевыхУзловТЧ Цикл
		КлючевыеУзлыТЧ = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", ИмяКлючевогоУзлаТЧ), Истина);
		Для Каждого КлючевойУзелТЧ Из КлючевыеУзлыТЧ Цикл
			ЗаполнитьАтрибутыУзлаИтогамиПоТЧ(КлючевойУзелТЧ);
		КонецЦикла;
	КонецЦикла;
	
	ВозможныеИменаКлючевыхУзловТЧВарианта2 = Новый Массив;
	ВозможныеИменаКлючевыхУзловТЧВарианта2.Добавить("РезЗакон");
	ВозможныеИменаКлючевыхУзловТЧВарианта2.Добавить("РезУчред");
	ВозможныеИменаКлючевыхУзловТЧВарианта2.Добавить("РезОцен");
	ВозможныеИменаКлючевыхУзловТЧВарианта2.Добавить("РезПредРас");
	
	Для Каждого ИмяКлючевогоУзлаТЧВарианта2 Из ВозможныеИменаКлючевыхУзловТЧВарианта2 Цикл
		КлючевыеУзлыТЧ = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", ИмяКлючевогоУзлаТЧВарианта2), Истина);
		Для Каждого КлючевойУзелТЧ Из КлючевыеУзлыТЧ Цикл
			ЗаполнитьАтрибутыУзлаИтогамиПоТЧВарианта2(КлючевойУзелТЧ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАтрибутыУзлаИтогамиПоТЧВарианта2(Узел)
	
	СоотвСуммыПоАтрибутам = Новый Соответствие;
	СоотвСуммыПоАтрибутам.Вставить("ПредГод", Новый Структура("СумНач, Увелич, Уменьш, СумКон", 0, 0, 0, 0));
	СоотвСуммыПоАтрибутам.Вставить("ОтчГод", Новый Структура("СумНач, Увелич, Уменьш, СумКон", 0, 0, 0, 0));
	
	УзлыВтчНаимРез = Узел.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаимРез"));
	Для Каждого УзелВтчНаимРез Из УзлыВтчНаимРез Цикл // ВтчНаимРез
		Для Каждого Стр Из УзелВтчНаимРез.Строки Цикл // ПредГод, ОтчГод
			Если Стр.Тип = "С" ИЛИ Стр.Тип = "С" Тогда
				
				СуммыПоАтрибутам = СоотвСуммыПоАтрибутам[Стр.Код];
				Для Каждого СтрАтрибут Из Стр.Строки Цикл
					Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
						СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммыПоАтрибутам[СтрАтрибут.Код] + ЧисловоеЗначение(СтрАтрибут.Значение));
					КонецЕсли;
				КонецЦикла;
				СоотвСуммыПоАтрибутам.Вставить(Стр.Код, СуммыПоАтрибутам);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Эл Из СоотвСуммыПоАтрибутам Цикл
		УзелИтог = Узел.Строки.Найти(Эл.Ключ, "Код");
		Если УзелИтог <> Неопределено Тогда
			Для Каждого Атрибут Из Эл.Значение Цикл
				УзелАтрибут = УзелИтог.Строки.Найти(Атрибут.Ключ, "Код");
				Если УзелАтрибут <> Неопределено Тогда
					УзелАтрибут.Значение = Формат(Атрибут.Значение, "ЧН=; ЧГ=");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАтрибутыУзлаИтогамиПоТЧ(Узел)
	
	СуммыПоАтрибутам = Новый Структура;
	УзлыВтчНаим = Узел.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаим"));
	Для Каждого УзелВтчНаим Из УзлыВтчНаим Цикл
		Для Каждого СтрАтрибут Из УзелВТчНаим.Строки Цикл
			Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
				ЗначениеАтрибутаЧисло = ЧисловоеЗначение(СтрАтрибут.Значение);
				СуммаПоАтрибуту = ?(СуммыПоАтрибутам.Свойство(СтрАтрибут.Код), СуммыПоАтрибутам[СтрАтрибут.Код], 0);
				СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммаПоАтрибуту + ЗначениеАтрибутаЧисло);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого КлючИЗначение Из СуммыПоАтрибутам Цикл
		АтрибутГоловногоУзлаТЧ = Узел.Строки.Найти(КлючИЗначение.Ключ, "Код");
		Если АтрибутГоловногоУзлаТЧ <> Неопределено Тогда
			АтрибутГоловногоУзлаТЧ.Значение = Формат(КлючИЗначение.Значение, "ЧН=; ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЧисловоеЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				УдалитьУзел(Узел);
			ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
				УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "ФормаОтчета", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "ФормаОтчета", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, Параметры)
	
	Возврат Число(Формат(Значение, Параметры.ФорматВывода));
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда // !!!
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если Параметры.Свойство(ИмяСвойства) Тогда // !!!
						ЗначениеСвойства = Параметры[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, Параметры));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "ФормаОтчета", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "ФормаОтчета", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_BUH3_1_025_00_05_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000100020";
мИдГруппы2  = "П0000100054";
мИдГруппы3  = "П0000100064";
мИдГруппы4  = "П0000100080";
мИдГруппы5  = "П0000100124";
мИдГруппы6  = "П0000100134";
мИдГруппы7  = "П0000200151";
мИдГруппы8  = "П0000200161";
мИдГруппы9  = "П0000200171";
мИдГруппы10 = "П0000200181";
мИдГруппы11 = "П0000300211";
мИдГруппы12 = "П0000300221";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;
КолИсхСтрокИдГруппы4 = 1;
КолИсхСтрокИдГруппы5 = 1;
КолИсхСтрокИдГруппы6 = 1;
КолИсхСтрокИдГруппы7 = 1;
КолИсхСтрокИдГруппы8 = 1;
КолИсхСтрокИдГруппы9 = 1;
КолИсхСтрокИдГруппы10 = 1;
КолИсхСтрокИдГруппы11 = 3;
КолИсхСтрокИдГруппы12 = 3;

// Структура строк многострочного раздела
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010002001", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("П000010002004", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010002005", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010002006", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010002007", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000010005401", ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("П000010005403", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010005404", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010005405", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010005406", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010005407", ОписаниеТиповЧисло);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000010006401", ОписаниеТиповСтрока);
СтруктураГруппы3.Колонки.Добавить("П000010006403", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000010006404", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000010006405", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000010006406", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000010006407", ОписаниеТиповЧисло);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000010008001", ОписаниеТиповСтрока);
СтруктураГруппы4.Колонки.Добавить("П000010008004", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000010008005", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000010008006", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000010008007", ОписаниеТиповЧисло);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000010012401", ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("П000010012403", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010012404", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010012405", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010012406", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010012407", ОписаниеТиповЧисло);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000010013401", ОписаниеТиповСтрока);
СтруктураГруппы6.Колонки.Добавить("П000010013403", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010013404", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010013405", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010013406", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010013407", ОписаниеТиповЧисло);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000020015101", ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("П000020015103", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015104", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015105", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015106", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015203", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015204", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015205", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000020015206", ОписаниеТиповЧисло);

СтруктураГруппы8 = Новый ТаблицаЗначений;
СтруктураГруппы8.Колонки.Добавить("П000020016101", ОписаниеТиповСтрока);
СтруктураГруппы8.Колонки.Добавить("П000020016103", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016104", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016105", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016106", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016203", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016204", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016205", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000020016206", ОписаниеТиповЧисло);

СтруктураГруппы9 = Новый ТаблицаЗначений;
СтруктураГруппы9.Колонки.Добавить("П000020017101", ОписаниеТиповСтрока);
СтруктураГруппы9.Колонки.Добавить("П000020017103", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017104", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017105", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017106", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017203", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017204", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017205", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000020017206", ОписаниеТиповЧисло);

СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("П000020018101", ОписаниеТиповСтрока);
СтруктураГруппы10.Колонки.Добавить("П000020018103", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018104", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018105", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018106", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018203", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018204", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018205", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000020018206", ОписаниеТиповЧисло);

СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("П000030021101", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000030021103", ОписаниеТиповЧисло);
СтруктураГруппы11.Колонки.Добавить("П000030021104", ОписаниеТиповЧисло);
СтруктураГруппы11.Колонки.Добавить("П000030021105", ОписаниеТиповЧисло);
СтруктураГруппы11.Колонки.Добавить("П000030021106", ОписаниеТиповЧисло);

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000030022101", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000030022103", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000030022104", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000030022105", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000030022106", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы8, СтруктураГруппы8);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы9, СтруктураГруппы9);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы8, КолИсхСтрокИдГруппы8);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы9, КолИсхСтрокИдГруппы9);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, КолИсхСтрокИдГруппы10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, КолИсхСтрокИдГруппы11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрокИдГруппы12);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/11/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710003";

//универсальная выгрузка и попутные
РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
//ОбязРазделов.Добавить("Баланс");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей", "Формат 2.01002", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

НаименованиеОтчетаДляВыгрузки = "ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА";
КНД = "0710003";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
