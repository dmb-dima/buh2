////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем мИдГруппы8;
Перем мИдГруппы9;
Перем мИдГруппы10;
Перем мИдГруппы11;
Перем мИдГруппы12;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем РежимОтладки;
Перем ОбязРазделов;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

Перем мСохранятьРасшифровку Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мБезКонсолидации Экспорт;

// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

Перем мДанныеОтчета Экспорт;
Перем ПоказателиВыгружаемыеСоЗнакомПлюс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДР()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНКР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // СКК()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция складывает числа по указанной колонке таблицы значений,
// содержащей строки многострочной части, предварительно округляя
// их по формату представления, заданному в форме отчета.
//
// Параметры:
//  СтруктураГруппы - переменная типа ТаблицаЗначений, содержащая
//                    строки какой-либо многострочной части
//  ИмяКолонки      - строка, имя колонки таблицы значений, для
//                    которой необходимо выполнить сложение.
//
// Примечание:
//  Функция использует функцию  ОкруглитьЧислоПоФормату().
//
Функция ИтогПоКолонке(СтруктураГруппы, ИмяКолонки)

	СуммаИтог = 0;

	Для Каждого Стр Из СтруктураГруппы Цикл
		СуммаИтог = СуммаИтог + ОкруглитьЧислоПоФормату(Стр[ИмяКолонки]);
	КонецЦикла;

	Возврат СуммаИтог;

КонецФункции // ИтогПоКолонке()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2006Кв4");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2006Кв4");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период для показа в шапке отчета
	//ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;
	
	// Период в заголовке отчета
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.)";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "КодОКОНХ");

		Сведения.Добавить("", "ОргПравФорм");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН

		НаимЮЛПол = ""; // Полное наименование 

		ОКПО = "";
		ОКВЭД = "";

		АдрЮР = "";

		ОснВидДеят = "";

		ФормСобств = "";

		ОКОПФ = "";

		ОКФС = "";

		КодОКОНХ = "";

		ОргПравФорм1 = "";

		АдрПочт = "";

	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера


	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);

		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;

		Возврат;

	КонецЕсли;

	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	мФормаОтчета.Области.ОргИНН.Значение = мИННЮЛ;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКПО.Значение)) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мФормаОтчета.Области.ОргКодОКПО.Значение  = "";
		Иначе
			мФормаОтчета.Области.ОргКодОКПО.Значение  = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКВЭД.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФорма.Значение)) Тогда
		мФормаОтчета.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргОтрасль.Значение)) Тогда
		мФормаОтчета.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКОПФ.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКФС.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФормаСобств.Значение)) Тогда
		мФормаОтчета.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргДиректор.Значение)) Тогда
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргБухгалтер.Значение)) Тогда
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Форма №5: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Форма №5: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Форма №5: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ФормаОтчета";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем ИмяПоследнейЯчейкиПоследнейСтроки;

	ТекТабличноеПоле = мФормаОтчета;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана добавляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	// Если многострочная группа содержат более одной строки,
	// всегда отображаемых в форме отчета, то при добавлении новых
	// строк в группу должна расширяться секция последней строки.
	// Такое требование обусловлено реализацией вывода на печать
	// только заполненных строк многострочной группы.
	ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + ИсходноеКоличествоСтрокГруппы;

	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
	// область именованной секции
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";

		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Если Лев(ИмяСекции, 1) = "П" Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекТабличноеПоле = мФормаОтчета;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧЦ = 3") + ".";
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = мФормаОтчета;

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

Процедура ОсновнаяПанельПриСменеСтраницы(а, б) Экспорт
КонецПроцедуры

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = мФормаОтчета;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			// Если многострочная группа содержат более одной строки,
			// всегда отображаемых в форме отчета, то при добавлении новых
			// строк в группу должна расширяться секция последней строки.
			// Такое требование обусловлено реализацией вывода на печать
			// только заполненных строк многострочной группы.
			ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + ИсходноеКоличествоСтрокГруппы;

			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
				КонецЕсли;

			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" Тогда
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура удаляет все дополнительные строки, вставленные в табличный документ.
// Удаляет данные этих строк из структуры многострочных разделов.
// 
Процедура УдалитьДопСтрокиМногострочныхРазделов()
	Перем ИсходноеКоличествоСтрокГруппы;

	// Выясним, имеются ли дополнительные строки, добавленные в многострочный раздел.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФормаОтчета;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Добавлена очистка первых строк многострочных частей, чтобы таблица в многострочной структуре была очищена.
	мФормаОтчета.Области.П000010003501_1.Значение = "";
	мФормаОтчета.Области.П000010003503_1.Значение = 0;
	мФормаОтчета.Области.П000010003504_1.Значение = 0;
	мФормаОтчета.Области.П000010003505_1.Значение = 0;
	
	мФормаОтчета.Области.П000010005101_1.Значение = "";
	мФормаОтчета.Области.П000010005103_1.Значение = 0;
	мФормаОтчета.Области.П000010005104_1.Значение = 0;
	
	мФормаОтчета.Области.П000010005101_2.Значение = "";
	мФормаОтчета.Области.П000010005103_2.Значение = 0;
	мФормаОтчета.Области.П000010005104_2.Значение = 0;
	
	мФормаОтчета.Области.П000010005101_3.Значение = "";
	мФормаОтчета.Области.П000010005103_3.Значение = 0;
	мФормаОтчета.Области.П000010005104_3.Значение = 0;

	мФормаОтчета.Области.П000010015301_1.Значение = "";
	мФормаОтчета.Области.П000010015303_1.Значение = 0;
	мФормаОтчета.Области.П000010015304_1.Значение = 0;

	мФормаОтчета.Области.П000010016101_1.Значение = "";
	мФормаОтчета.Области.П000010016103_1.Значение = 0;
	мФормаОтчета.Области.П000010016104_1.Значение = 0;

	мФормаОтчета.Области.П000010023001_1.Значение = "";
	мФормаОтчета.Области.П000010023003_1.Значение = 0;
	мФормаОтчета.Области.П000010023004_1.Значение = 0;
	мФормаОтчета.Области.П000010023005_1.Значение = 0;

	мФормаОтчета.Области.П000010031101_1.Значение = "";
	мФормаОтчета.Области.П000010031103_1.Значение = 0;
	мФормаОтчета.Области.П000010031104_1.Значение = 0;
	мФормаОтчета.Области.П000010031105_1.Значение = 0;
	
	мФормаОтчета.Области.П000010031101_2.Значение = "";
	мФормаОтчета.Области.П000010031103_2.Значение = 0;
	мФормаОтчета.Области.П000010031104_2.Значение = 0;
	мФормаОтчета.Области.П000010031105_2.Значение = 0;

	мФормаОтчета.Области.П000010041101_1.Значение = "";
	мФормаОтчета.Области.П000010041103_1.Значение = 0;
	мФормаОтчета.Области.П000010041104_1.Значение = 0;
	мФормаОтчета.Области.П000010041105_1.Значение = 0;

	мФормаОтчета.Области.П000010041101_2.Значение = "";
	мФормаОтчета.Области.П000010041103_2.Значение = 0;
	мФормаОтчета.Области.П000010041104_2.Значение = 0;
	мФормаОтчета.Области.П000010041105_2.Значение = 0;

	мФормаОтчета.Области.П000010065301_1.Значение = "";
	мФормаОтчета.Области.П000010065303_1.Значение = 0;
	мФормаОтчета.Области.П000010065304_1.Значение = 0;

	мФормаОтчета.Области.П000010082401_1.Значение = "";
	мФормаОтчета.Области.П000010082403_1.Значение = 0;
	мФормаОтчета.Области.П000010082404_1.Значение = 0;

	мФормаОтчета.Области.П000010084401_1.Значение = "";
	мФормаОтчета.Области.П000010084403_1.Значение = 0;
	мФормаОтчета.Области.П000010084404_1.Значение = 0;

	мФормаОтчета.Области.П000010091101_1.Значение = "";
	мФормаОтчета.Области.П000010091103_1.Значение = 0;
	мФормаОтчета.Области.П000010091104_1.Значение = 0;
	
	мФормаОтчета.Области.П000010091101_2.Значение = "";
	мФормаОтчета.Области.П000010091103_2.Значение = 0;
	мФормаОтчета.Области.П000010091104_2.Значение = 0;
	
	мФормаОтчета.Области.П000010091101_3.Значение = "";
	мФормаОтчета.Области.П000010091103_3.Значение = 0;
	мФормаОтчета.Области.П000010091104_3.Значение = 0;

	мФормаОтчета.Области.П000010092101_1.Значение = "";
	мФормаОтчета.Области.П000010092103_1.Значение = 0;
	мФормаОтчета.Области.П000010092104_1.Значение = 0;
	мФормаОтчета.Области.П000010092105_1.Значение = 0;
	
	мФормаОтчета.Области.П000010092101_2.Значение = "";
	мФормаОтчета.Области.П000010092103_2.Значение = 0;
	мФормаОтчета.Области.П000010092104_2.Значение = 0;
	мФормаОтчета.Области.П000010092105_2.Значение = 0;

	мФормаОтчета.Области.П000010092101_3.Значение = "";
	мФормаОтчета.Области.П000010092103_3.Значение = 0;
	мФормаОтчета.Области.П000010092104_3.Значение = 0;
	мФормаОтчета.Области.П000010092105_3.Значение = 0;
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

КонецПроцедуры // УдалитьДопСтрокиМногострочныхРазделов()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мФормаОтчета;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Удаляем дополнительные строки многострочных разделов
	УдалитьДопСтрокиМногострочныхРазделов();

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	СпП.Очистить();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Процедура выводит на печать заполненные строки секции (именованных строк)
// табличного документа с заданным именем.
//
// Параметры
//  ПечатнаяФорма          – табличный документ – печатная форма;
//  ИмяСекции              – строка – имя выводимой на печать секции;
//  НоваяСтраница          – булево – признак начала новой строки;
//  ИмяНовойСтраницы       – строка – имя секции - шапки новой страницы;
//  СписокВложенныхСекций  – список значений – список выведенных на печать вложенных секций.
//
Процедура ВывестиНепустыеСтроки(ПечатнаяФорма, ИмяСекции, НоваяСтраница = Ложь, ИмяНовойСтраницы = "", СписокВложенныхСекций = Неопределено)

	ОбластьСекции = мФормаОтчета.ПолучитьОбласть(ИмяСекции);

	КолвоВложенныхСекций   = 0;
	ВыведенЗаголовокСекции = Ложь;

	Если СписокВложенныхСекций = Неопределено Тогда
		СписокВложенныхСекций = Новый СписокЗначений();
	КонецЕсли;

	Для каждого Строка Из ОбластьСекции.Области Цикл

		Если Строка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.Имя = ИмяСекции Тогда
			Продолжить;
		КонецЕсли;

		// Проверяем, была ли выведена на печать вложенная секция
		Если СписокВложенныхСекций.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			// Секция ранее была выведена на печать
			Продолжить;
		КонецЕсли;

		КолвоВложенныхСекций = КолвоВложенныхСекций + 1;

		ОбластьСтроки = мФормаОтчета.ПолучитьОбласть(Строка.Имя);

		ЕстьЗаполненныеЯчейки = Ложь;

		ВложеннаяСекция = Ложь;

		Для каждого Ячейка Из ОбластьСтроки.Области Цикл

			Если Ячейка.Имя = Строка.Имя Тогда
				Продолжить;
			КонецЕсли;

			Если ВложеннаяСекция Тогда
				Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				// Это есть вложенная секция. Проверяем ее на наличие заполненных строк
				ВложеннаяСекция = Истина;
				
				ОбластьСтроки2 = мФормаОтчета.ПолучитьОбласть(Ячейка.Имя);

				Для каждого Ячейка2 Из ОбластьСтроки2.Области Цикл

					Если Ячейка2.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;

					Если Не Ячейка2.СодержитЗначение Тогда
						Продолжить;
					КонецЕсли;

					ЗначениеЯчейки = Ячейка2.Значение;

					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЕстьЗаполненныеЯчейки = Истина;
						
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если ЕстьЗаполненныеЯчейки Тогда
					// Выводим заголовок секции
					Если Не ВыведенЗаголовокСекции Тогда

						// Сначала проверим, передан ли признак начала новой строки
						Если НоваяСтраница Тогда
							ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
							Если Не ПустаяСтрока(ИмяНовойСтраницы) Тогда
								ОбластьЗаголовокСтраницы = мФормаОтчета.ПолучитьОбласть(ИмяНовойСтраницы);
								ПечатнаяФорма.Вывести(ОбластьЗаголовокСтраницы);
							КонецЕсли;
						КонецЕсли;

						Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
							ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
							ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
						КонецЕсли;

						ВыведенЗаголовокСекции = Истина;
					КонецЕсли;

					// Добавляем в список выведенных на печать секций имя текущей секции
					СписокВложенныхСекций.Добавить(Строка.Имя);

					// Выводим на печать непустую вложенную секцию
					ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,,, СписокВложенныхСекций);
					ЕстьЗаполненныеЯчейки = Ложь;

					Прервать;
				КонецЕсли;

			Иначе

				Если Не Ячейка.СодержитЗначение Тогда
					Продолжить;
				КонецЕсли;

				// Следующие показатели, несмотря на то, что содержат значение,
				// не могут служить признаком заполненной строки, так как их значение
				// (отчетный год) всегда отображается в форме отчета.
				//Если (Ячейка.Имя = "П000010001101") ИЛИ (Ячейка.Имя = "П000010007101") Тогда
				//	Продолжить;
				//КонецЕсли;

				ЗначениеЯчейки = Ячейка.Значение;

				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЕстьЗаполненныеЯчейки = Истина;

					Прервать;
				КонецЕсли; 

			КонецЕсли;

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			// Выводим заголовок секции
			Если Не ВыведенЗаголовокСекции Тогда

				// Сначала проверим, передан ли признак начала новой строки
				Если НоваяСтраница Тогда
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Если Не ПустаяСтрока(ИмяНовойСтраницы) Тогда
						ОбластьЗаголовокСтраницы = мФормаОтчета.ПолучитьОбласть(ИмяНовойСтраницы);
						ПечатнаяФорма.Вывести(ОбластьЗаголовокСтраницы);
					КонецЕсли;
				КонецЕсли;

				Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
					ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
					ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
				КонецЕсли;

				ВыведенЗаголовокСекции = Истина;
			КонецЕсли;

			СписокВложенныхСекций.Добавить(Строка.Имя);

			Если ВРег(Лев(Строка.Имя, 6)) = "ГРУППА" Тогда
				ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,,, СписокВложенныхСекций);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьСтроки);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Выводим подвал секции
	Если ВыведенЗаголовокСекции Тогда
		Если мФормаОтчета.Области.Найти("Подвал" + ИмяСекции) <> Неопределено Тогда
			ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Подвал" + ИмяСекции);
			ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
		КонецЕсли;
	КонецЕсли;

	Если КолвоВложенныхСекций = 0 Тогда
		// Это тот случай, когда секция состоит из единственной строки.
		// Проверяем эту строку на предмет заполненных ячеек.
		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСекции.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			ПечатнаяФорма.Вывести(ОбластьСекции);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВывестиНепустыеСтроки()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Форма №5";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0).КоличествоСтраниц() > 1 Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.УправлениеВариантами = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = (Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0);
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		ПрорисоватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Расчет чистых Форма №5", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	ВыведенЗаголовокЛист2 = Ложь;
	ВыведенЗаголовокЛист3 = Ложь;
	ВыведенЗаголовокЛист4 = Ложь;
	ВыведенЗаголовокЛист5 = Ложь;
	ВыведенЗаголовокЛист6 = Ложь;

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа1");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа2");

	КонтрольноеКолвоСтрок = ПечатнаяФорма.ВысотаТаблицы;

	ШапкаВыводимогоЛиста = "ШапкаЛиста2";

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа3", Истина, ШапкаВыводимогоЛиста);

	Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа4");
		ВыведенЗаголовокЛист2 = Истина;
	Иначе
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа4", Истина, ШапкаВыводимогоЛиста);
		Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
			ВыведенЗаголовокЛист2 = Истина;
		КонецЕсли;
	КонецЕсли;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа5");

	КонтрольноеКолвоСтрок = ПечатнаяФорма.ВысотаТаблицы;

	Если ВыведенЗаголовокЛист2 Тогда
		ШапкаВыводимогоЛиста = "ШапкаЛиста3";
	КонецЕсли;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа6", Истина, ШапкаВыводимогоЛиста);
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа7");

	Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа8");
		Если ВыведенЗаголовокЛист2 Тогда
			ВыведенЗаголовокЛист3 = Истина;
		КонецЕсли;
	Иначе
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа8", Истина, ШапкаВыводимогоЛиста);
		Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
			Если ВыведенЗаголовокЛист2 Тогда
				ВыведенЗаголовокЛист3 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа9");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа10");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа11");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа12");

	КонтрольноеКолвоСтрок = ПечатнаяФорма.ВысотаТаблицы;

	Если ВыведенЗаголовокЛист3 Тогда
		ШапкаВыводимогоЛиста = "ШапкаЛиста4";
	КонецЕсли;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа13", Истина, ШапкаВыводимогоЛиста);
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа14");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа15");

	Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
		Если ВыведенЗаголовокЛист3 Тогда
			ВыведенЗаголовокЛист4 = Истина;
		КонецЕсли;
	КонецЕсли;

	КонтрольноеКолвоСтрок = ПечатнаяФорма.ВысотаТаблицы;

	Если ВыведенЗаголовокЛист4 Тогда
		ШапкаВыводимогоЛиста = "ШапкаЛиста5";
	КонецЕсли;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа16", Истина, ШапкаВыводимогоЛиста);

	Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа17");
		Если ВыведенЗаголовокЛист4 Тогда
			ВыведенЗаголовокЛист5 = Истина;
		КонецЕсли;
	Иначе
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа17", Истина, ШапкаВыводимогоЛиста);
		Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
			Если ВыведенЗаголовокЛист4 Тогда
				ВыведенЗаголовокЛист5 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВыведенЗаголовокЛист5 Тогда
		ШапкаВыводимогоЛиста = "ШапкаЛиста6";
	КонецЕсли;

	КонтрольноеКолвоСтрок = ПечатнаяФорма.ВысотаТаблицы;

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа18", Истина, ШапкаВыводимогоЛиста);

	Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа19");
		Если ВыведенЗаголовокЛист5 Тогда
			ВыведенЗаголовокЛист6 = Истина;
		КонецЕсли;
	Иначе
		ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа19", Истина, ШапкаВыводимогоЛиста);
		Если ПечатнаяФорма.ВысотаТаблицы <> КонтрольноеКолвоСтрок Тогда
			Если ВыведенЗаголовокЛист5 Тогда
				ВыведенЗаголовокЛист6 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	РазбитьПечатнуюФорму(ПечатнаяФорма);

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);


КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий				   = КомментарийОбщий;
	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мСохраненныйДок.КодИМНС = Организация.КодИМНС;
	КонецЕсли;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Вставить("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий 		 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			// До перерисовки поле ОргКодКФС было ошибочка в КодеЕИ с признаком содержит значение.
			// После перерисовки конечно поля этого нет, и поэтому чтобы правильно восстанавливались
			// данные, этот показатель пропускается.
			Если ИмяПоказателя = "ОргКодКФС" Тогда
				Продолжить;
			Иначе
				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
			мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы5;
	Перем СтруктураГруппы6;
	Перем СтруктураГруппы7;
	Перем СтруктураГруппы8;
	Перем СтруктураГруппы9;
	Перем СтруктураГруппы10;
	Перем СтруктураГруппы12;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1,   СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5,   СтруктураГруппы5);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6,   СтруктураГруппы6);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7,   СтруктураГруппы7);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы8,   СтруктураГруппы8);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы9,   СтруктураГруппы9);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы10,  СтруктураГруппы10);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12,  СтруктураГруппы12);

	// строка 010
	мФормаОтчета.Области.П000010001003.Значение = мФормаОтчета.Области.П000010001103.Значение 
	                                            + мФормаОтчета.Области.П000010001203.Значение 
	                                            + мФормаОтчета.Области.П000010001303.Значение 
	                                            + мФормаОтчета.Области.П000010001403.Значение 
	                                            + мФормаОтчета.Области.П000010001503.Значение;
	
	мФормаОтчета.Области.П000010001004.Значение = мФормаОтчета.Области.П000010001104.Значение 
	                                            + мФормаОтчета.Области.П000010001204.Значение 
	                                            + мФормаОтчета.Области.П000010001304.Значение
	                                            + мФормаОтчета.Области.П000010001404.Значение 
	                                            + мФормаОтчета.Области.П000010001504.Значение;
	
	мФормаОтчета.Области.П000010001005.Значение = мФормаОтчета.Области.П000010001105.Значение 
	                                            + мФормаОтчета.Области.П000010001205.Значение 
	                                            + мФормаОтчета.Области.П000010001305.Значение 
	                                            + мФормаОтчета.Области.П000010001405.Значение 
	                                            + мФормаОтчета.Области.П000010001505.Значение;
	
	мФормаОтчета.Области.П000010001006.Значение = мФормаОтчета.Области.П000010001003.Значение 
	                                            + мФормаОтчета.Области.П000010001004.Значение 
	                                            + мФормаОтчета.Области.П000010001005.Значение;
	
	// строки 011 - 015
	мФормаОтчета.Области.П000010001106.Значение = мФормаОтчета.Области.П000010001103.Значение 
	                                            + мФормаОтчета.Области.П000010001104.Значение 
	                                            + мФормаОтчета.Области.П000010001105.Значение;

	мФормаОтчета.Области.П000010001206.Значение = мФормаОтчета.Области.П000010001203.Значение 
	                                            + мФормаОтчета.Области.П000010001204.Значение 
	                                            + мФормаОтчета.Области.П000010001205.Значение;

	мФормаОтчета.Области.П000010001306.Значение = мФормаОтчета.Области.П000010001303.Значение 
	                                            + мФормаОтчета.Области.П000010001304.Значение 
	                                            + мФормаОтчета.Области.П000010001305.Значение;
	
	мФормаОтчета.Области.П000010001406.Значение = мФормаОтчета.Области.П000010001403.Значение 
	                                            + мФормаОтчета.Области.П000010001404.Значение 
	                                            + мФормаОтчета.Области.П000010001405.Значение;

	мФормаОтчета.Области.П000010001506.Значение = мФормаОтчета.Области.П000010001503.Значение 
	                                            + мФормаОтчета.Области.П000010001504.Значение 
	                                            + мФормаОтчета.Области.П000010001505.Значение;
	
	// строка 020
	мФормаОтчета.Области.П000010002006.Значение = мФормаОтчета.Области.П000010002003.Значение 
	                                            + мФормаОтчета.Области.П000010002004.Значение 
	                                            + мФормаОтчета.Области.П000010002005.Значение;
	
	// строка 030
	мФормаОтчета.Области.П000010003006.Значение = мФормаОтчета.Области.П000010003003.Значение 
	                                            + мФормаОтчета.Области.П000010003004.Значение 
	                                            + мФормаОтчета.Области.П000010003005.Значение;
	
	// строки по коду 035 многострочного раздела
	Для Ном = 1 По СтруктураГруппы1.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6
		мФормаОтчета.Области["П000010003506"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010003503"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010003504"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010003505"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы1[Ном - 1];
		ТекСтрокаТаблицы["П000010003506"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010003506"+НомСтр].Значение);

	КонецЦикла;

	// строка 040
	мФормаОтчета.Области.П000010004006.Значение = мФормаОтчета.Области.П000010004003.Значение 
	                                            + мФормаОтчета.Области.П000010004004.Значение 
	                                            + мФормаОтчета.Области.П000010004005.Значение;
	
	// строки 070 - 120
	мФормаОтчета.Области.П000010007006.Значение = мФормаОтчета.Области.П000010007003.Значение 
	                                            + мФормаОтчета.Области.П000010007004.Значение 
	                                            + мФормаОтчета.Области.П000010007005.Значение;
	
	мФормаОтчета.Области.П000010007506.Значение = мФормаОтчета.Области.П000010007503.Значение 
	                                            + мФормаОтчета.Области.П000010007504.Значение 
	                                            + мФормаОтчета.Области.П000010007505.Значение;
	
	мФормаОтчета.Области.П000010008006.Значение = мФормаОтчета.Области.П000010008003.Значение 
	                                            + мФормаОтчета.Области.П000010008004.Значение 
	                                            + мФормаОтчета.Области.П000010008005.Значение;
	
	мФормаОтчета.Области.П000010008506.Значение = мФормаОтчета.Области.П000010008503.Значение 
	                                            + мФормаОтчета.Области.П000010008504.Значение 
	                                            + мФормаОтчета.Области.П000010008505.Значение;

	мФормаОтчета.Области.П000010009006.Значение = мФормаОтчета.Области.П000010009003.Значение 
	                                            + мФормаОтчета.Области.П000010009004.Значение 
	                                            + мФормаОтчета.Области.П000010009005.Значение;
	
	мФормаОтчета.Области.П000010009506.Значение = мФормаОтчета.Области.П000010009503.Значение 
	                                            + мФормаОтчета.Области.П000010009504.Значение 
	                                            + мФормаОтчета.Области.П000010009505.Значение;
	
	мФормаОтчета.Области.П000010010006.Значение = мФормаОтчета.Области.П000010010003.Значение 
	                                            + мФормаОтчета.Области.П000010010004.Значение 
	                                            + мФормаОтчета.Области.П000010010005.Значение;

	мФормаОтчета.Области.П000010010506.Значение = мФормаОтчета.Области.П000010010503.Значение 
	                                            + мФормаОтчета.Области.П000010010504.Значение 
	                                            + мФормаОтчета.Области.П000010010505.Значение;

	мФормаОтчета.Области.П000010011006.Значение = мФормаОтчета.Области.П000010011003.Значение 
	                                            + мФормаОтчета.Области.П000010011004.Значение 
	                                            + мФормаОтчета.Области.П000010011005.Значение;

	мФормаОтчета.Области.П000010011506.Значение = мФормаОтчета.Области.П000010011503.Значение 
	                                            + мФормаОтчета.Области.П000010011504.Значение 
	                                            + мФормаОтчета.Области.П000010011505.Значение;

	мФормаОтчета.Области.П000010012006.Значение = мФормаОтчета.Области.П000010012003.Значение 
	                                            + мФормаОтчета.Области.П000010012004.Значение
	                                            + мФормаОтчета.Области.П000010012005.Значение;
	
	// строка 130
	мФормаОтчета.Области.П000010013003.Значение = мФормаОтчета.Области.П000010007003.Значение 
	                                            + мФормаОтчета.Области.П000010007503.Значение 
	                                            + мФормаОтчета.Области.П000010008003.Значение 
	                                            + мФормаОтчета.Области.П000010008503.Значение 
	                                            + мФормаОтчета.Области.П000010009003.Значение 
	                                            + мФормаОтчета.Области.П000010009503.Значение
	                                            + мФормаОтчета.Области.П000010010003.Значение 
	                                            + мФормаОтчета.Области.П000010010503.Значение 
	                                            + мФормаОтчета.Области.П000010011003.Значение 
	                                            + мФормаОтчета.Области.П000010011503.Значение
	                                            + мФормаОтчета.Области.П000010012003.Значение;

	мФормаОтчета.Области.П000010013004.Значение = мФормаОтчета.Области.П000010007004.Значение 
	                                            + мФормаОтчета.Области.П000010007504.Значение 
	                                            + мФормаОтчета.Области.П000010008004.Значение 
	                                            + мФормаОтчета.Области.П000010008504.Значение 
	                                            + мФормаОтчета.Области.П000010009004.Значение 
	                                            + мФормаОтчета.Области.П000010009504.Значение
	                                            + мФормаОтчета.Области.П000010010004.Значение 
	                                            + мФормаОтчета.Области.П000010010504.Значение 
	                                            + мФормаОтчета.Области.П000010011004.Значение 
	                                            + мФормаОтчета.Области.П000010011504.Значение 
	                                            + мФормаОтчета.Области.П000010012004.Значение;

	мФормаОтчета.Области.П000010013005.Значение = мФормаОтчета.Области.П000010007005.Значение 
	                                            + мФормаОтчета.Области.П000010007505.Значение 
	                                            + мФормаОтчета.Области.П000010008005.Значение 
	                                            + мФормаОтчета.Области.П000010008505.Значение 
	                                            + мФормаОтчета.Области.П000010009005.Значение 
	                                            + мФормаОтчета.Области.П000010009505.Значение
	                                            + мФормаОтчета.Области.П000010010005.Значение 
	                                            + мФормаОтчета.Области.П000010010505.Значение 
	                                            + мФормаОтчета.Области.П000010011005.Значение 
	                                            + мФормаОтчета.Области.П000010011505.Значение 
	                                            + мФормаОтчета.Области.П000010012005.Значение;

	мФормаОтчета.Области.П000010013006.Значение = мФормаОтчета.Области.П000010013003.Значение 
	                                            + мФормаОтчета.Области.П000010013004.Значение 
	                                            + мФормаОтчета.Области.П000010013005.Значение;

	// строка 140
	мФормаОтчета.Области.П000010014003.Значение = мФормаОтчета.Области.П000010014103.Значение 
	                                            + мФормаОтчета.Области.П000010014203.Значение 
	                                            + мФормаОтчета.Области.П000010014303.Значение;

	мФормаОтчета.Области.П000010014004.Значение = мФормаОтчета.Области.П000010014104.Значение 
	                                            + мФормаОтчета.Области.П000010014204.Значение 
	                                            + мФормаОтчета.Области.П000010014304.Значение;

	// строки 210 - 240
	мФормаОтчета.Области.П000010021006.Значение = мФормаОтчета.Области.П000010021003.Значение 
	                                            + мФормаОтчета.Области.П000010021004.Значение 
	                                            + мФормаОтчета.Области.П000010021005.Значение;

	мФормаОтчета.Области.П000010022006.Значение = мФормаОтчета.Области.П000010022003.Значение 
	                                            + мФормаОтчета.Области.П000010022004.Значение 
	                                            + мФормаОтчета.Области.П000010022005.Значение;

	мФормаОтчета.Области.П000010024006.Значение = мФормаОтчета.Области.П000010024003.Значение 
	                                            + мФормаОтчета.Области.П000010024004.Значение 
	                                            + мФормаОтчета.Области.П000010024005.Значение; 

	// строки по коду 230 многострочного раздела
	Для Ном = 1 По СтруктураГруппы5.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6
		мФормаОтчета.Области["П000010023006"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010023003"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010023004"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010023005"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы5[Ном - 1];
		ТекСтрокаТаблицы["П000010023006"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010023006"+НомСтр].Значение);

	КонецЦикла;

	// строка 250
	мФормаОтчета.Области.П000010025003.Значение = мФормаОтчета.Области.П000010021003.Значение 
	                                            + мФормаОтчета.Области.П000010022003.Значение 
	                                            + мФормаОтчета.Области.П000010024003.Значение 
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010023003");
	
	мФормаОтчета.Области.П000010025004.Значение = мФормаОтчета.Области.П000010021004.Значение 
	                                            + мФормаОтчета.Области.П000010022004.Значение 
	                                            + мФормаОтчета.Области.П000010024004.Значение 
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010023004");
	
	мФормаОтчета.Области.П000010025005.Значение = мФормаОтчета.Области.П000010021005.Значение 
	                                            + мФормаОтчета.Области.П000010022005.Значение 
	                                            + мФормаОтчета.Области.П000010024005.Значение 
	                                            + ИтогПоКолонке(СтруктураГруппы5, "П000010023005");
	
	мФормаОтчета.Области.П000010025006.Значение = мФормаОтчета.Области.П000010025003.Значение 
	                                            + мФормаОтчета.Области.П000010025004.Значение 
	                                            + мФормаОтчета.Области.П000010025005.Значение;
	
	// строка 310
	мФормаОтчета.Области.П000010031006.Значение = мФормаОтчета.Области.П000010031003.Значение 
	                                            + мФормаОтчета.Области.П000010031004.Значение 
	                                            + мФормаОтчета.Области.П000010031005.Значение;
	
	// строки по коду 311 многострочного раздела
	Для Ном = 1 По СтруктураГруппы6.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6
		мФормаОтчета.Области["П000010031106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010031103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010031104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010031105"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы6[Ном - 1];
		ТекСтрокаТаблицы["П000010031106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010031106"+НомСтр].Значение);

	КонецЦикла;

	// строка 410
	мФормаОтчета.Области.П000010041006.Значение = мФормаОтчета.Области.П000010041003.Значение 
	                                            + мФормаОтчета.Области.П000010041004.Значение 
	                                            + мФормаОтчета.Области.П000010041005.Значение;

	// строки по коду 411 многострочного раздела
	Для Ном = 1 По СтруктураГруппы7.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6
		мФормаОтчета.Области["П000010041106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010041103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010041104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010041105"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы7[Ном - 1];
		ТекСтрокаТаблицы["П000010041106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010041106"+НомСтр].Значение);

	КонецЦикла;

	// строка 540
	мФормаОтчета.Области.П000010054003.Значение = мФормаОтчета.Области.П000010051003.Значение 
	                                            + мФормаОтчета.Области.П000010051503.Значение 
	                                            + мФормаОтчета.Области.П000010052003.Значение
	                                            + мФормаОтчета.Области.П000010052503.Значение 
	                                            + мФормаОтчета.Области.П000010053003.Значение 
	                                            + мФормаОтчета.Области.П000010053503.Значение; 

	мФормаОтчета.Области.П000010054004.Значение = мФормаОтчета.Области.П000010051004.Значение 
	                                            + мФормаОтчета.Области.П000010051504.Значение 
	                                            + мФормаОтчета.Области.П000010052004.Значение
	                                            + мФормаОтчета.Области.П000010052504.Значение 
	                                            + мФормаОтчета.Области.П000010053004.Значение 
	                                            + мФормаОтчета.Области.П000010053504.Значение; 

	мФормаОтчета.Области.П000010054005.Значение = мФормаОтчета.Области.П000010051005.Значение 
	                                            + мФормаОтчета.Области.П000010051505.Значение 
	                                            + мФормаОтчета.Области.П000010052005.Значение
	                                            + мФормаОтчета.Области.П000010052505.Значение 
	                                            + мФормаОтчета.Области.П000010053005.Значение 
	                                            + мФормаОтчета.Области.П000010053505.Значение; 

	мФормаОтчета.Области.П000010054006.Значение = мФормаОтчета.Области.П000010051006.Значение 
	                                            + мФормаОтчета.Области.П000010051506.Значение 
	                                            + мФормаОтчета.Области.П000010052006.Значение
	                                            + мФормаОтчета.Области.П000010052506.Значение 
	                                            + мФормаОтчета.Области.П000010053006.Значение 
	                                            + мФормаОтчета.Области.П000010053506.Значение; 

	// строка 570
	мФормаОтчета.Области.П000010057003.Значение = мФормаОтчета.Области.П000010055003.Значение 
	                                            + мФормаОтчета.Области.П000010055503.Значение 
	                                            + мФормаОтчета.Области.П000010056003.Значение 
	                                            + мФормаОтчета.Области.П000010056503.Значение;
	
	мФормаОтчета.Области.П000010057004.Значение = мФормаОтчета.Области.П000010055004.Значение 
	                                            + мФормаОтчета.Области.П000010055504.Значение 
	                                            + мФормаОтчета.Области.П000010056004.Значение 
	                                            + мФормаОтчета.Области.П000010056504.Значение;
	
	мФормаОтчета.Области.П000010057005.Значение = мФормаОтчета.Области.П000010055005.Значение 
	                                            + мФормаОтчета.Области.П000010055505.Значение 
	                                            + мФормаОтчета.Области.П000010056005.Значение 
	                                            + мФормаОтчета.Области.П000010056505.Значение;
	
	мФормаОтчета.Области.П000010057006.Значение = мФормаОтчета.Области.П000010055006.Значение 
	                                            + мФормаОтчета.Области.П000010055506.Значение 
	                                            + мФормаОтчета.Области.П000010056006.Значение 
	                                            + мФормаОтчета.Области.П000010056506.Значение;
	
	// строка 610
	мФормаОтчета.Области.П000010061003.Значение = мФормаОтчета.Области.П000010061103.Значение 
	                                            + мФормаОтчета.Области.П000010061203.Значение 
	                                            + мФормаОтчета.Области.П000010061303.Значение;

	мФормаОтчета.Области.П000010061004.Значение = мФормаОтчета.Области.П000010061104.Значение
	                                            + мФормаОтчета.Области.П000010061204.Значение
	                                            + мФормаОтчета.Области.П000010061304.Значение;
	
	// строка 620
	мФормаОтчета.Области.П000010062003.Значение = мФормаОтчета.Области.П000010062103.Значение
	                                            + мФормаОтчета.Области.П000010062203.Значение
	                                            + мФормаОтчета.Области.П000010062303.Значение;

	мФормаОтчета.Области.П000010062004.Значение = мФормаОтчета.Области.П000010062104.Значение
	                                            + мФормаОтчета.Области.П000010062204.Значение
	                                            + мФормаОтчета.Области.П000010062304.Значение; 
	
	// строка 630
	мФормаОтчета.Области.П000010063003.Значение = мФормаОтчета.Области.П000010061003.Значение
	                                            + мФормаОтчета.Области.П000010062003.Значение;

	мФормаОтчета.Области.П000010063004.Значение = мФормаОтчета.Области.П000010061004.Значение
	                                            + мФормаОтчета.Области.П000010062004.Значение;
	
	// строка 640
	мФормаОтчета.Области.П000010064003.Значение = мФормаОтчета.Области.П000010064103.Значение
	                                            + мФормаОтчета.Области.П000010064203.Значение
	                                            + мФормаОтчета.Области.П000010064303.Значение
	                                            + мФормаОтчета.Области.П000010064403.Значение
	                                            + мФормаОтчета.Области.П000010064503.Значение
	                                            + мФормаОтчета.Области.П000010064603.Значение;

	мФормаОтчета.Области.П000010064004.Значение = мФормаОтчета.Области.П000010064104.Значение
	                                            + мФормаОтчета.Области.П000010064204.Значение
	                                            + мФормаОтчета.Области.П000010064304.Значение
	                                            + мФормаОтчета.Области.П000010064404.Значение
	                                            + мФормаОтчета.Области.П000010064504.Значение
	                                            + мФормаОтчета.Области.П000010064604.Значение;
	
	// строка 650
	мФормаОтчета.Области.П000010065003.Значение = мФормаОтчета.Области.П000010065103.Значение
	                                            + мФормаОтчета.Области.П000010065203.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы8, "П000010065303");

	мФормаОтчета.Области.П000010065004.Значение = мФормаОтчета.Области.П000010065104.Значение
	                                            + мФормаОтчета.Области.П000010065204.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы8, "П000010065304");
	
	// строка 660
	мФормаОтчета.Области.П000010066003.Значение = мФормаОтчета.Области.П000010064003.Значение
	                                            + мФормаОтчета.Области.П000010065003.Значение;

	мФормаОтчета.Области.П000010066004.Значение = мФормаОтчета.Области.П000010064004.Значение
	                                            + мФормаОтчета.Области.П000010065004.Значение;
	
	// строка 760
	мФормаОтчета.Области.П000010076003.Значение = мФормаОтчета.Области.П000010071003.Значение
	                                            + мФормаОтчета.Области.П000010072003.Значение
	                                            + мФормаОтчета.Области.П000010073003.Значение
	                                            + мФормаОтчета.Области.П000010074003.Значение
	                                            + мФормаОтчета.Области.П000010075003.Значение;

	мФормаОтчета.Области.П000010076004.Значение = мФормаОтчета.Области.П000010071004.Значение
	                                            + мФормаОтчета.Области.П000010072004.Значение
	                                            + мФормаОтчета.Области.П000010073004.Значение
	                                            + мФормаОтчета.Области.П000010074004.Значение
	                                            + мФормаОтчета.Области.П000010075004.Значение;

	// строка 820
	мФормаОтчета.Области.П000010082003.Значение = мФормаОтчета.Области.П000010082103.Значение
	                                            + мФормаОтчета.Области.П000010082203.Значение
	                                            + мФормаОтчета.Области.П000010082303.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы9, "П000010082403");

	мФормаОтчета.Области.П000010082004.Значение = мФормаОтчета.Области.П000010082104.Значение
	                                            + мФормаОтчета.Области.П000010082204.Значение
	                                            + мФормаОтчета.Области.П000010082304.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы9, "П000010082404");

	// строка 840
	мФормаОтчета.Области.П000010084003.Значение = мФормаОтчета.Области.П000010084103.Значение
	                                            + мФормаОтчета.Области.П000010084203.Значение
	                                            + мФормаОтчета.Области.П000010084303.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы10, "П000010084403");

	мФормаОтчета.Области.П000010084004.Значение = мФормаОтчета.Области.П000010084104.Значение
	                                            + мФормаОтчета.Области.П000010084204.Значение
	                                            + мФормаОтчета.Области.П000010084304.Значение
	                                            + ИтогПоКолонке(СтруктураГруппы10, "П000010084404");

	// строка 920
	мФормаОтчета.Области.П000010092006.Значение = мФормаОтчета.Области.П000010092003.Значение
	                                            + мФормаОтчета.Области.П000010092004.Значение
	                                            + мФормаОтчета.Области.П000010092005.Значение;
	
	// строки по коду 921
	Для Ном = 1 По СтруктураГруппы12.Количество() Цикл

		НомСтр = "_" + Ном;
		
		// Расчет показателя по графе 6
		мФормаОтчета.Области["П000010092106"+НомСтр].Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010092103"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010092104"+НомСтр].Значение)
		                                                      + ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010092105"+НомСтр].Значение);

		// здесь же обновляем структуру многострочного раздела
		ТекСтрокаТаблицы = СтруктураГруппы12[Ном - 1];
		ТекСтрокаТаблицы["П000010092106"] = ОкруглитьЧислоПоФормату(мФормаОтчета.Области["П000010092106"+НомСтр].Значение);

	КонецЦикла;

КонецПроцедуры // Расчет()

// Создает и заполняет дополнительные строки многострочного
// раздела формы. Вызывается при автозаполнении отчета по
// данным учета.
// 
// Параметры
//  ДанныеДопСтрок  – таблица значений – содержит данные 
//                 для заполнения дополнительных строк.
//
Процедура АвтозаполнениеДопСтрок(ДанныеДопСтрок)
	Перем СтруктураГруппы;
	Перем ИмяГруппы;

	// Обновляем структуру данных многострочного раздела
	Для каждого СтрокаТаблицы Из ДанныеДопСтрок Цикл

		Если СтрокаТаблицы.Раздел <> ИмяГруппы Тогда
			ИмяГруппы = СтрокаТаблицы.Раздел;
			Если ИмяГруппы = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		КонецЕсли;

		Наименование      = СтрокаТаблицы.Наименование;
		ОстатокНаНачало   = СтрокаТаблицы.ОстатокНаНачало;
		ПоступилоЗаПериод = СтрокаТаблицы.ПоступилоЗаПериод;
		ВыбылоЗаПериод    = СтрокаТаблицы.ВыбылоЗаПериод;
		ОстатокНаКонец    = СтрокаТаблицы.ОстатокНаКонец;

		ЗаполнилиПустуюСтроку = 0;
		Для Каждого СтрокаГруппы Из СтруктураГруппы Цикл

			ЕстьПустаяСтрока = Истина;
			Для НомерКолонки = 0 По (СтруктураГруппы.Колонки.Количество() - 1) Цикл
				Если ЗначениеЗаполнено(СтрокаГруппы[НомерКолонки]) Тогда
					ЕстьПустаяСтрока = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ЕстьПустаяСтрока Тогда

				// Это первая незаполненная строка многострочного раздела
				СтрокаГруппы[0] = Наименование;
				СтрокаГруппы[1] = ОстатокНаНачало;
				Если СтруктураГруппы.Колонки.Количество() = 3 Тогда
				СтрокаГруппы[2] = ОстатокНаКонец;
				Иначе
				СтрокаГруппы[2] = ПоступилоЗаПериод;
				СтрокаГруппы[3] = ВыбылоЗаПериод;
				СтрокаГруппы[4] = ОстатокНаКонец;
				КонецЕсли;

				ЗаполнилиПустуюСтроку = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ЗаполнилиПустуюСтроку = 0 Тогда
			// Определяем порядковый номер последней строки перед вставкой
			НоваяСтрока    = СтруктураГруппы.Добавить();

			НоваяСтрока[0] = Наименование;
			НоваяСтрока[1] = ОстатокНаНачало;
			Если СтруктураГруппы.Колонки.Количество() = 3 Тогда
				НоваяСтрока[2] = ОстатокНаКонец;
			Иначе
				НоваяСтрока[2] = ПоступилоЗаПериод;
				НоваяСтрока[3] = ВыбылоЗаПериод;
				НоваяСтрока[4] = ОстатокНаКонец;
			КонецЕсли;

		КонецЕсли;

		Если ДанныеДопСтрок.Индекс(СтрокаТаблицы) = (ДанныеДопСтрок.Количество() - 1) Тогда
			// Последняя строка таблицы значений.
			// Выводим дополнительные строки в таблицу
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		Иначе
			СледующаяСтрока = ДанныеДопСтрок.Получить(ДанныеДопСтрок.Индекс(СтрокаТаблицы) + 1);
			Если СледующаяСтрока.Раздел <> ИмяГруппы Тогда
				// Конец перечня параметров одного многострочного раздела
				// Выводим дополнительные строки в таблицу
				ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // АвтозаполнениеДопСтрок()

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	Перем ТаблДанныхДопСтрокОбщ;

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//////// ИНСТРУКЦИЯ ПО ЗАПОЛНЕНИЮ ОТЧЕТА ПО ДАННЫМ УЧЕТА
	//
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	//// ПОРЯДОК АВТОЗАПОЛНЕНИЯ МНОГОСТРОЧНЫХ РАЗДЕЛОВ ФОРМЫ
	//
	// Для создания и заполнения дополнительных строк в многострочных разделах
	// необходимо предварительно заполнить таблицу значений ТаблДанныхДопСтрок,
	// далее вызвать процедуру АвтозаполнениеДопСтрок(), передав в качестве
	// параметров таблицу значений ТаблДанныхДопСтрок.
	//
	// Примечание 1. Для строк 051, 153, 161, 653, 824, 844, 911.заполняюся только
	// колонки "Раздел", "Наименование", "ОстатокНаНачало" и "ОстатокНаКонец" 
	// таблицы значений.
	//
	// Примечание 2. Идентификаторы многострочных разделов:
	//                  строка       идентификатор
	//                   035    -     мИдГруппы1;
	//                   051    -     мИдГруппы2;
	//                   153    -     мИдГруппы3;
	//                   161    -     мИдГруппы4;
	//                   230    -     мИдГруппы5;
	//                   311    -     мИдГруппы6;
	//                   411    -     мИдГруппы7;
	//                   653    -     мИдГруппы8;
	//                   824    -     мИдГруппы9;
	//                   844    -     мИдГруппы10;
	//                   911    -     мИдГруппы11;
	//                   921    -     мИдГруппы12;
	////////
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	// Очищаем расшифровку.
	СпП.Очистить();
	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Раздел");           // идентификатор многострочного раздела
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");     // наименование вписываемого показателя
	ТаблДанныхДопСтрок.Колонки.Добавить("ОстатокНаНачало");
	ТаблДанныхДопСтрок.Колонки.Добавить("ПоступилоЗаПериод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ВыбылоЗаПериод");
	ТаблДанныхДопСтрок.Колонки.Добавить("ОстатокНаКонец");

	// Предварительно удаляем дополнительные строки многострочных разделов
	УдалитьДопСтрокиМногострочныхРазделов();

	ПС = ПланыСчетов["Хозрасчетный"];
	
	// Проверим есть ли счет 76.НА в ПС
	Ссылка = ПС.НайтиПоКоду("76.НА");
	Если Ссылка.Код <> "" Тогда
		Есть76НА = Истина
	Иначе 
		Есть76НА = Ложь
	КонецЕсли;

	СчетаУчетаОС = Новый Массив;
	Счет01_01   = ПС.ОСвОрганизации;
	СчетаУчетаОС.Добавить(Счет01_01);
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Счет01_11   = ПС.ОСвРамкахЦелевогоФинансирования;
		СчетаУчетаОС.Добавить(Счет01_11);
	КонецЕсли;
	
	Счет02_01   = ПС.АмортизацияОС_01;
	Счет02_02   = ПС.АмортизацияОС_03;
	Счет03_01   = ПС.МЦвОрганизации;
	Счет03_02   = ПС.МЦ_ПредоставленныеВоВременноеВладение;
	Счет03_03   = ПС.МЦ_ПредоставленныеВоВременноеПользование;
	Счет03_04   = ПС.ПрочиеДоходныеВложения;
	Счет05      = ПС.АмортизацияНематериальныхАктивов;
	Счет08_08   = ПС.ВыполнениеНИОКР;
	Счет20      = ПС.ОсновноеПроизводство;
	Счет21      = ПС.Полуфабрикаты;
	Счет23      = ПС.ВспомогательныеПроизводства;
	Счет29      = ПС.ОбслуживающиеПроизводства;
	Счет44      = ПС.РасходыНаПродажу;
	Счет55_03   = ПС.ДепозитныеСчета;
	Счет55_23   = ПС.ДепозитныеСчетаВал;
	Счет58_01_1 = ПС.Паи;
	Счет58_01_2 = ПС.Акции;
	Счет58_02   = ПС.ДолговыеЦенныеБумаги;
	Счет58_03   = ПС.ПредоставленныеЗаймы;
	Счет58_04   = ПС.ВкладыПоДоговоруПростогоТоварищества;
	Счет58_05   = ПС.ПриобретенныеПрава;
	Счет59      = ПС.РезервыПодОбесценениеФинансовыхВложений;
	Счет60_01   = ПС.РасчетыСПоставщиками;
	Счет60_02   = ПС.РасчетыПоАвансамВыданным;
	Счет60_03   = ПС.ВекселяВыданные;
	Счет60_21   = ПС.РасчетыСПоставщикамиВал;
	Счет60_22   = ПС.РасчетыПоАвансамВыданнымВал;
	Счет60_31   = ПС.РасчетыСПоставщикамиУЕ;
	Счет60_32   = ПС.РасчетыПоАвансамВыданнымУЕ;
	Счет62_01   = ПС.РасчетыСПокупателями;
	Счет62_02   = ПС.РасчетыПоАвансамПолученным;
	Счет62_03   = ПС.ВекселяПолученные;
	Счет62_21   = ПС.РасчетыСПокупателямиВал;
	Счет62_22   = ПС.РасчетыПоАвансамПолученнымВал;
	Счет62_31   = ПС.РасчетыСПокупателямиУЕ;
	Счет62_32   = ПС.РасчетыПоАвансамПолученнымУЕ;
	Счет63      = ПС.РезервыПоСомнительнымДолгам;
	Счет66_01   = ПС.КраткосрочныеКредиты;
	Счет66_02   = ПС.ПроцентыПоКраткосрочнымКредитам;
	Счет66_03   = ПС.КраткосрочныеЗаймы;
	Счет66_04   = ПС.ПроцентыПоКраткосрочнымЗаймам;
	Счет66_21   = ПС.КраткосрочныеКредитыВал;
	Счет66_22   = ПС.ПроцентыПоКраткосрочнымКредитамВал;
	Счет66_23   = ПС.КраткосрочныеЗаймыВал;
	Счет66_24   = ПС.ПроцентыПоКраткосрочнымЗаймамВал;
	Счет67_01   = ПС.ДолгосрочныеКредиты;
	Счет67_02   = ПС.ПроцентыПоДолгосрочнымКредитам;
	Счет67_03   = ПС.ДолгосрочныеЗаймы;
	Счет67_04   = ПС.ПроцентыПоДолгосрочнымЗаймам;
	Счет67_21   = ПС.ДолгосрочныеКредитыВал;
	Счет67_22   = ПС.ПроцентыПоДолгосрочнымКредитамВал;
	Счет67_23   = ПС.ДолгосрочныеЗаймыВал;
	Счет67_24   = ПС.ПроцентыПоДолгосрочнымЗаймамВал;

	Счет68_01   = ПС.НДФЛ;
	Счет68_02   = ПС.НДС;
	Счет68_03   = ПС.Акцизы;
	Счет68_04_1 = ПС.РасчетыСБюджетом;
	Счет68_04_2 = ПС.РасчетНалогаНаПрибыль;
	Счет68_07   = ПС.ТранспортныйНалог;
	Счет68_08   = ПС.НалогНаИмущество;
	Счет68_09   = ПС.НалогНаРекламу;
	Счет68_10   = ПС.ПрочиеНалогиИСборы;
	Счет68_11   = ПС.ЕНВД;
	Счет68_12   = ПС.ЕНприУСН;
	Счет68_22   = ПС.НДСпоЭкспортуКВозмещению;

	Счет69      = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет70      = ПС.РасчетыСПерсоналомПоОплатеТруда;
	Счет71      = ПС.РасчетыСПодотчетнымиЛицами_;
	Счет73      = ПС.РасчетыСПерсоналомПоПрочимОперациям;
	Счет75_01   = ПС.РасчетыПоВкладамВУставныйКапитал;
	Счет75_02   = ПС.РасчетыПоВыплатеДоходов;

	Счет76_01   = ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию;
	Счет76_02   = ПС.РасчетыПоПретензиям;
	Счет76_03   = ПС.РасчетыПоПричитающимсяДивидендам;
	Счет76_04   = ПС.РасчетыПоДепонированнымСуммам;
	Счет76_05   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Счет76_06   = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет76_09   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Счет76_21   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
	Счет76_22   = ПС.РасчетыПоПретензиямВал;
	Счет76_25   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Счет76_26   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Счет76_29   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Счет76_32   = ПС.РасчетыПоПретензиямУЕ;
	Счет76_35   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Счет76_36   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Счет76_39   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Счет76_41   = ПС.РасчетыПоИсполнительнымДокументамРаботников;
	
	Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Счет76_51   = ПС.РасчетыПоЦелевомуФинансированию;
		Счет76_52   = ПС.РасчетыПоЦелевомуФинансированиюВал;
	КонецЕсли;
	
	Счет76_АВ   = ПС.НДСпоАвансамИПредоплатам;
	Счет76_ВА   = ПС.НДСпоАвансамИПредоплатамВыданным;
	Если Есть76НА Тогда
		Счет76_НА   = ПС.РасчетыНДСНалоговогоАгента;
	КонецЕсли;
	Счет76_Н    = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	Счет91_02   = ПС.ПрочиеРасходы;
	Счет96      = ПС.РезервыПредстоящихРасходов;
	Счет97      = ПС.РасходыБудущихПериодов;
	Счет001     = ПС.АрендованныеОсновныеСредства;

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблДанныхДопСтрок);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт,
		        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт,
		        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
		        |КорОборотДт, КорОборотКт";

		// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
		СчетаУчетаРасчетов = Новый Массив;
		СчетаУчетаРасчетов.Добавить(Счет60_01);
		СчетаУчетаРасчетов.Добавить(Счет60_21);
		СчетаУчетаРасчетов.Добавить(Счет60_31);
		СчетаУчетаРасчетов.Добавить(Счет62_01);
		СчетаУчетаРасчетов.Добавить(Счет62_21);
		СчетаУчетаРасчетов.Добавить(Счет62_31);

		// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
		ВидыСубконтоДляРасчета = Новый Массив;
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		ИтогиРС = "НачальныйОстатокДт,
		          |НачальныйОстатокКт,
		          |КонечныйОстатокДт,
		          |КонечныйОстатокКт,
		          |ОборотДт,
		          |ОборотКт";

		// Бухгалтерские итоги по НМА
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "04.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();
		
		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		П010001103 = 0;
		П010001104 = 0;
		П010001105 = 0;

		П010001203 = 0;
		П010001204 = 0;
		П010001205 = 0;
		
		П010001303 = 0;
		П010001304 = 0;
		П010001305 = 0;

		П010001403 = 0;
		П010001404 = 0;
		П010001405 = 0;
		
		П010001503 = 0;
		П010001504 = 0;
		П010001505 = 0;
		
		П010002003 = 0;
		П010002004 = 0;
		П010002005 = 0;

		П010003003 = 0;
		П010003004 = 0;
		П010003005 = 0;

		П010004003 = 0;
		П010004004 = 0;
		П010004005 = 0;

		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			Если ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ИсключительноеПравоНаИзобретение Тогда

				П010001103 = П010001103 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010001104 = П010001104 + ВыборкаПоСубконто.СуммаОборотДт;
				П010001105 = П010001105 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ИсключительноеПравоНаПрограммыДляЭВМ Тогда

				П010001203 = П010001203 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010001204 = П010001204 + ВыборкаПоСубконто.СуммаОборотДт;
				П010001205 = П010001205 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ИмущественноеПравоНаТопологииИМС Тогда

				П010001303 = П010001303 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010001304 = П010001304 + ВыборкаПоСубконто.СуммаОборотДт;
				П010001305 = П010001305 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ИсключительноеПравоНаТоварныйЗнак Тогда

				П010001403 = П010001403 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010001404 = П010001404 + ВыборкаПоСубконто.СуммаОборотДт;
				П010001405 = П010001405 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ИсключительноеПравоНаСелекционныеДостижения Тогда

				П010001503 = П010001503 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010001504 = П010001504 + ВыборкаПоСубконто.СуммаОборотДт;
				П010001505 = П010001505 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ОрганизационныеРасходы Тогда

				П010002003 = П010002003 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010002004 = П010002004 + ВыборкаПоСубконто.СуммаОборотДт;
				П010002005 = П010002005 + ВыборкаПоСубконто.СуммаОборотКт;

			ИначеЕсли ВыбранноеСубконто.ВидНМА = Перечисления.ВидыНМА.ДеловаяРепутацияОрганизации Тогда

				П010003003 = П010003003 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010003004 = П010003004 + ВыборкаПоСубконто.СуммаОборотДт;
				П010003005 = П010003005 + ВыборкаПоСубконто.СуммаОборотКт;

			Иначе 

				// НМА других групп
				П010004003 = П010004003 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
				П010004004 = П010004004 + ВыборкаПоСубконто.СуммаОборотДт;
				П010004005 = П010004005 + ВыборкаПоСубконто.СуммаОборотКт;

			КонецЕсли;

		КонецЦикла;

		УстановитьЗначениеПоказателя("П000010001103",  П010001103);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001103","Строка 011 ""у патентообладателя на изобретение..."", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Права по патентам""/", П010001103);
		
		УстановитьЗначениеПоказателя("П000010001104",  П010001104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001104","Строка 011 ""у патентообладателя на изобретение..."", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Права по патентам""/", П010001104);

		УстановитьЗначениеПоказателя("П000010001105", -П010001105);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001105","Строка 011 ""у патентообладателя на изобретение..."", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Права по патентам""/", -П010001105);

		УстановитьЗначениеПоказателя("П000010001203",  П010001203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001203","Строка 012 ""у правообладателя на программы ЭВМ..."", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Права на программы ЭВМ""/", П010001203);

		УстановитьЗначениеПоказателя("П000010001204",  П010001204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001204","Строка 012 ""у правообладателя на программы ЭВМ..."", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Права на программы ЭВМ""/", П010001204);

		УстановитьЗначениеПоказателя("П000010001205", -П010001205);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001205","Строка 012 ""у правообладателя на программы ЭВМ..."", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Права на программы ЭВМ""/", -П010001205);

		УстановитьЗначениеПоказателя("П000010001303",  П010001303);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001303","Строка 013 ""у правообладателя на топологии интегральных микросхем"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Права на топологии микросхем""/", П010001303);

		УстановитьЗначениеПоказателя("П000010001304",  П010001304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001304","Строка 013 ""у правообладателя на топологии интегральных микросхем"", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Права на топологии микросхем""/", П010001304);

		УстановитьЗначениеПоказателя("П000010001305", -П010001305);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001305","Строка 013 ""у правообладателя на топологии интегральных микросхем"", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Права на топологии микросхем""/", -П010001305);

		УстановитьЗначениеПоказателя("П000010001403",  П010001403);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001403","Строка 014 ""у владельца на товарный знак..."", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Права на товарный знак""/", П010001403);

		УстановитьЗначениеПоказателя("П000010001404",  П010001404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001404","Строка 014 ""у владельца на товарный знак..."", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Права на товарный знак""/", П010001404);

		УстановитьЗначениеПоказателя("П000010001405", -П010001405);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001405","Строка 014 ""у владельца на товарный знак..."", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Права на товарный знак""/", -П010001405);

		УстановитьЗначениеПоказателя("П000010001503",  П010001503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001503","Строка 015 ""у патентообладателя на селекционные достижения"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Права на селекционные достижения""/", П010001503);

		УстановитьЗначениеПоказателя("П000010001504",  П010001504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001504","Строка 015 ""у патентообладателя на селекционные достижения"", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Права на селекционные достижения""/", П010001504);

		УстановитьЗначениеПоказателя("П000010001505", -П010001505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001505","Строка 015 ""у патентообладателя на селекционные достижения"", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Права на селекционные достижения""/", -П010001505);

		УстановитьЗначениеПоказателя("П000010002003",  П010002003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002003","Строка 020 ""Организационные расходы"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Организационные расходы""/", П010002003);

		УстановитьЗначениеПоказателя("П000010002004",  П010002004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002004","Строка 020 ""Организационные расходы"", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Организационные расходы""/", П010002004);

		УстановитьЗначениеПоказателя("П000010002005", -П010002005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002005","Строка 020 ""Организационные расходы"", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Организационные расходы""/", -П010002005);
		
		УстановитьЗначениеПоказателя("П000010003003",  П010003003);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003003","Строка 030 ""Деловая репутация организации"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Деловая репутация организации""/", П010003003);
		
		УстановитьЗначениеПоказателя("П000010003004",  П010003004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003004","Строка 030 ""Деловая репутация организации"", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Деловая репутация организации""/", П010003004);
		
		УстановитьЗначениеПоказателя("П000010003005", -П010003005);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003005","Строка 030 ""Деловая репутация организации"", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Деловая репутация организации""/", -П010003005);
		
		УстановитьЗначениеПоказателя("П000010004003",  П010004003);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004003","Строка 040 ""Прочие"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счета 04.01 /группа НМА ""Прочие нематериальные активы""/", П010004003);
		
		УстановитьЗначениеПоказателя("П000010004004",  П010004004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004004","Строка 040 ""Прочие"", графа 4 ""Поступило""","+","Оборот за период по дебету счета 04.01 /группа НМА ""Прочие нематериальные активы""/", П010004004);
		
		УстановитьЗначениеПоказателя("П000010004005", -П010004005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004005","Строка 040 ""Прочие"", графа 5 ""Выбыло""","-","Оборот за период по кредиту счета 04.01 /группа НМА ""Прочие нематериальные активы""/", -П010004005);

		// вычисляем общую сумму амортизации НМА
		П010005003 = СНК(Счет05);
		УстановитьЗначениеПоказателя("П000010005003", П010005003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010005003","Строка 050 ""Амортизация нематериальных активов - всего"", графа 3 ""На начало отчетного года""","+","!СНК", П010005003);

		П010005004 = СКК(Счет05);
		УстановитьЗначениеПоказателя("П000010005004", П010005004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010005004","Строка 050 ""Амортизация нематериальных активов - всего"", графа 4 ""На конец отчетного периода""","+","!СКК", П010005004);

		ПределСуммыАмортизации = П010005004 * 0.05;

		// Бухгалтерские итоги по НМА
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "05", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			Если ВыбранноеСубконто.ЭтоГруппа ИЛИ ВыбранноеСубконто.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли; 

			АмортизацияНаНачалоГода   = ВыборкаПоСубконто.СуммаНачальныйОстатокКт;
			АмортизацияНаКонецПериода = ВыборкаПоСубконто.СуммаКонечныйОстатокКт;
			
			Если АмортизацияНаКонецПериода > 0 Тогда 
				Если АмортизацияНаКонецПериода >= ПределСуммыАмортизации Тогда
		
					НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
					НоваяСтрока.Раздел = мИдГруппы2;
					НоваяСтрока.ОстатокНаНачало = АмортизацияНаНачалоГода;
					НоваяСтрока.ОстатокНаКонец  = АмортизацияНаКонецПериода;

				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

		// Бухгалтерские итоги по ОС
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		П010007003 = 0;
		П010007004 = 0;
		П010007005 = 0;

		П010007503 = 0;
		П010007504 = 0;
		П010007505 = 0;
		
		П010008003 = 0;
		П010008004 = 0;
		П010008005 = 0;

		П010008503 = 0;
		П010008504 = 0;
		П010008505 = 0;

		П010009003 = 0;
		П010009004 = 0;
		П010009005 = 0;

		П010009503 = 0;
		П010009504 = 0;
		П010009505 = 0;

		П010010003 = 0;
		П010010004 = 0;
		П010010005 = 0;

		П010010503 = 0;
		П010010504 = 0;
		П010010505 = 0;

		П010011003 = 0;
		П010011004 = 0;
		П010011005 = 0;

		П010011503 = 0;
		П010011504 = 0;
		П010011505 = 0;

		П010014103 = 0;
		П010014104 = 0;

		П010014203 = 0;
		П010014204 = 0;

		П010014303 = 0;
		П010014304 = 0;

		П010016003 = 0;
		П010016004 = 0;

		П010021003 = 0;
		П010021004 = 0;
		П010021005 = 0;

		П010022003 = 0;
		П010022004 = 0;
		П010022005 = 0;
		
		П010024003 = 0;
		П010024004 = 0;
		П010024005 = 0;

		П010026003 = 0;
		П010026004 = 0;

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
			
			ВыборкаПоСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");

			Пока ВыборкаПоСчетам.Следующий() Цикл
				Если СчетаУчетаОС.Найти(ВыборкаПоСчетам.Счет)<>Неопределено Тогда

					// Сведения об основных средствах

					Если ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.Здания Тогда

						П010007003 = П010007003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010007004 = П010007004 + ВыборкаПоСчетам.СуммаОборотДт;

						// здесь и далее принимается допущение, что субконто считается выбывшим, если его стоимость списана по счета 01.1
						П010007005 = П010007005 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.Сооружения Тогда

						П010007503 = П010007503 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010007504 = П010007504 + ВыборкаПоСчетам.СуммаОборотДт;
						П010007505 = П010007505 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.МашиныИОборудование Тогда

						П010008003 = П010008003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010008004 = П010008004 + ВыборкаПоСчетам.СуммаОборотДт;
						П010008005 = П010008005 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ТранспортныеСредства Тогда

						П010008503 = П010008503 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010008504 = П010008504 + ВыборкаПоСчетам.СуммаОборотДт;
						П010008505 = П010008505 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь Тогда

						П010009003 = П010009003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010009004 = П010009004 + ВыборкаПоСчетам.СуммаОборотДт;
						П010009005 = П010009005 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.РабочийСкот Тогда

						П010009503 = П010009503 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010009504 = П010009504 + ВыборкаПоСчетам.СуммаОборотДт;
						П010009505 = П010009505 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ПродуктивныйСкот Тогда

						П010010003 = П010010003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010010004 = П010010004 + ВыборкаПоСчетам.СуммаОборотДт;
						П010010005 = П010010005 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.МноголетниеНасаждения Тогда

						П010010503 = П010010503 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010010504 = П010010504 + ВыборкаПоСчетам.СуммаОборотДт;
						П010010505 = П010010505 + ВыборкаПоСчетам.СуммаОборотКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ЗемельныеУчастки 
					      ИЛИ ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ОбъектыПриродопользования Тогда

						П010011503 = П010011503 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010011504 = П010011504 + ВыборкаПоСчетам.СуммаОборотДт;
						П010011505 = П010011505 + ВыборкаПоСчетам.СуммаОборотКт;

					Иначе

						П010011003 = П010011003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
						П010011004 = П010011004 + ВыборкаПоСчетам.СуммаОборотДт;
						П010011005 = П010011005 + ВыборкаПоСчетам.СуммаОборотКт;

					КонецЕсли;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет02_01 Тогда

					// Накапливаем амортизацию основных средств
					Если ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.Здания
					 ИЛИ ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.Сооружения Тогда

						П010014103 = П010014103 + ВыборкаПоСчетам.СуммаНачальныйОстатокКт;
						П010014104 = П010014104 + ВыборкаПоСчетам.СуммаКонечныйОстатокКт;

					ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.МашиныИОборудование
					      ИЛИ ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.ТранспортныеСредства Тогда

						П010014203 = П010014203 + ВыборкаПоСчетам.СуммаНачальныйОстатокКт;
						П010014204 = П010014204 + ВыборкаПоСчетам.СуммаКонечныйОстатокКт;

					Иначе

						П010014303 = П010014303 + ВыборкаПоСчетам.СуммаНачальныйОстатокКт;
						П010014304 = П010014304 + ВыборкаПоСчетам.СуммаКонечныйОстатокКт;

					КонецЕсли;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет001 Тогда

					// Сведения об основных средствах, переданных в аренду
					П010016003 = П010016003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
					П010016004 = П010016004 + ВыборкаПоСчетам.СуммаКонечныйОстатокДт;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет02_02 Тогда

					// Амортизация доходных вложений в материальные ценности
					П010026003 = П010026003 + ВыборкаПоСчетам.СуммаНачальныйОстатокКт;
					П010026004 = П010026004 + ВыборкаПоСчетам.СуммаКонечныйОстатокКт;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет03_01 Тогда

					// Имущество, предоставляемое по договору проката
					П010022003 = П010022003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
					П010022004 = П010022004 + ВыборкаПоСчетам.СуммаОборотДт;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет03_02 Тогда

					П010021003 = П010021003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
					П010021004 = П010021004 + ВыборкаПоСчетам.СуммаОборотДт;
					П010021005 = П010021005 + ВыборкаПоСчетам.СуммаОборотКт;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет03_03 Тогда

					П010022003 = П010022003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
					П010022005 = П010022005 + ВыборкаПоСчетам.СуммаОборотКт;

				ИначеЕсли ВыборкаПоСчетам.Счет = Счет03_04 Тогда

					П010024003 = П010024003 + ВыборкаПоСчетам.СуммаНачальныйОстатокДт;
					П010024004 = П010024004 + ВыборкаПоСчетам.СуммаОборотДт;
					П010024005 = П010024005 + ВыборкаПоСчетам.СуммаОборотКт;

				КонецЕсли;
			КонецЦикла;

		КонецЦикла; // конец цикла по основным средствам

		ТекстСчетаУчетаОС = "счета 01.01";
		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			ТекстСчетаУчетаОС = "счетов 01.01 и 01.11";
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010007003",  П010007003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007003","Строка 070 ""Здания"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Здания""/", П010007003);

		УстановитьЗначениеПоказателя("П000010007004",  П010007004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007004","Строка 070 ""Здания"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Здания""/", П010007004);

		УстановитьЗначениеПоказателя("П000010007005", -П010007005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007005","Строка 070 ""Здания"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Здания""/", -П010007005);

		УстановитьЗначениеПоказателя("П000010007503",  П010007503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007503","Строка 075 ""Сооружения и передаточные устройства"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Сооружения""/", П010007503);

		УстановитьЗначениеПоказателя("П000010007504",  П010007504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007504","Строка 075 ""Сооружения и передаточные устройства"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Сооружения""/", П010007504);

		УстановитьЗначениеПоказателя("П000010007505", -П010007505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007505","Строка 075 ""Сооружения и передаточные устройства"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Сооружения""/", -П010007505);

		УстановитьЗначениеПоказателя("П000010008003",  П010008003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008003","Строка 080 ""Машины и оборудование"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Машины и оборудование (кроме офисного)""/", П010008003);

		УстановитьЗначениеПоказателя("П000010008004",  П010008004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008004","Строка 080 ""Машины и оборудование"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Машины и оборудование (кроме офисного)""/", П010008004);

		УстановитьЗначениеПоказателя("П000010008005", -П010008005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008005","Строка 080 ""Машины и оборудование"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Машины и оборудование (кроме офисного)""/", -П010008005);

		УстановитьЗначениеПоказателя("П000010008503",  П010008503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008503","Строка 085 ""Транспортные средства"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Транспортные средства""/", П010008503);

		УстановитьЗначениеПоказателя("П000010008504",  П010008504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008504","Строка 085 ""Транспортные средства"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Транспортные средства""/", П010008504);

		УстановитьЗначениеПоказателя("П000010008505", -П010008505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008505","Строка 085 ""Транспортные средства"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Транспортные средства""/", -П010008505);

		УстановитьЗначениеПоказателя("П000010009003",  П010009003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003","Строка 090 ""Производственный и хозяйственный инвентарь"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Производственный и хозяйственный инвентарь""/", П010009003);

		УстановитьЗначениеПоказателя("П000010009004",  П010009004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004","Строка 090 ""Производственный и хозяйственный инвентарь"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Производственный и хозяйственный инвентарь""/", П010009004);

		УстановитьЗначениеПоказателя("П000010009005", -П010009005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009005","Строка 090 ""Производственный и хозяйственный инвентарь"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Производственный и хозяйственный инвентарь""/", -П010009005);

		УстановитьЗначениеПоказателя("П000010009503",  П010009503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009503","Строка 095 ""Рабочий скот"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Рабочий скот""/", П010009503);

		УстановитьЗначениеПоказателя("П000010009504",  П010009504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009504","Строка 095 ""Рабочий скот"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Рабочий скот""/", П010009504);

		УстановитьЗначениеПоказателя("П000010009505", -П010009505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009505","Строка 095 ""Рабочий скот"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Рабочий скот""/", -П010009505);

		УстановитьЗначениеПоказателя("П000010010003",  П010010003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003","Строка 100 ""Продуктивный скот"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Продуктивный скот""/", П010010003);

		УстановитьЗначениеПоказателя("П000010010004",  П010010004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004","Строка 100 ""Продуктивный скот"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Продуктивный скот""/", П010010004);

		УстановитьЗначениеПоказателя("П000010010005", -П010010005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010005","Строка 100 ""Продуктивный скот"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Продуктивный скот""/", -П010010005);

		УстановитьЗначениеПоказателя("П000010010503",  П010010503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010503","Строка 105 ""Многолетние насаждения"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Многолетние насаждения""/", П010010503);

		УстановитьЗначениеПоказателя("П000010010504",  П010010504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010504","Строка 105 ""Многолетние насаждения"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группа ОС ""Многолетние насаждения""/", П010010504);

		УстановитьЗначениеПоказателя("П000010010505", -П010010505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010505","Строка 105 ""Многолетние насаждения"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группа ОС ""Многолетние насаждения""/", -П010010505);

		УстановитьЗначениеПоказателя("П000010011003",  П010011003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011003","Строка 110 ""Другие виды основных средств"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группы ОС ""Офисное оборудование"", ""Капитальные вложения в арендованное имущество"", ""Другие виды основных средств""/", П010011003);

		УстановитьЗначениеПоказателя("П000010011004",  П010011004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011004","Строка 110 ""Другие виды основных средств"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группы ОС ""Офисное оборудование"", ""Капитальные вложения в арендованное имущество"", ""Другие виды основных средств""/", П010011004);

		УстановитьЗначениеПоказателя("П000010011005", -П010011005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011005","Строка 110 ""Другие виды основных средств"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группы ОС ""Офисное оборудование"", ""Капитальные вложения в арендованное имущество"", ""Другие виды основных средств""/", -П010011005);

		УстановитьЗначениеПоказателя("П000010011503",  П010011503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011503","Строка 115 ""Земельные участки и объекты природопользования"", графа 3 ""Остаток на начало отчетного года""","+","Сальдо на начало года по дебету "+ТекстСчетаУчетаОС+" /группы ОС ""Земельные участки"", ""Объекты природопользования""/", П010011503);

		УстановитьЗначениеПоказателя("П000010011504",  П010011504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011504","Строка 115 ""Земельные участки и объекты природопользования"", графа 4 ""Поступило""","+","Оборот за период по дебету "+ТекстСчетаУчетаОС+" /группы ОС ""Земельные участки"", ""Объекты природопользования""/", П010011504);

		УстановитьЗначениеПоказателя("П000010011505", -П010011505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011505","Строка 115 ""Земельные участки и объекты природопользования"", графа 5 ""Выбыло""","-","Оборот за период по кредиту "+ТекстСчетаУчетаОС+" /группы ОС ""ЗемельныеУчастки"", ""Объекты природопользования""/", -П010011505);


		УстановитьЗначениеПоказателя("П000010014103", П010014103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014103","Строка 141 ""Амортизация зданий и сооружений"", графа 3 ""На начало отчетного года""","+","Сальдо на начало года по кредиту счета 02.01 /группы ОС ""Здания"", ""Сооружения""/", П010014103);

		УстановитьЗначениеПоказателя("П000010014104", П010014104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014104","Строка 141 ""Амортизация зданий и сооружений"", графа 4 ""На конец отчетного периода""","+","Сальдо на конец отчетного периода по кредиту счета 02.01 /группы ОС ""Здания"", ""Сооружения""/", П010014104);

		УстановитьЗначениеПоказателя("П000010014203", П010014203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014203","Строка 142 ""Амортизация машин, оборудования, транспортных средств"", графа 3 ""На начало отчетного года""","+","Сальдо на начало года по кредиту счета 02.01 /группы ОС ""Машины и оборудование (кроме офисного)"", ""Транспортные средства""/", П010014203);

		УстановитьЗначениеПоказателя("П000010014204", П010014204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014204","Строка 142 ""Амортизация машин, оборудования, транспортных средств"", графа 4 ""На конец отчетного периода""","+","Сальдо на конец отчетного периода по кредиту счета 02.01 /группы ОС ""Машины и оборудование (кроме офисного)"", ""Транспортные средства""/", П010014204);

		УстановитьЗначениеПоказателя("П000010014303", П010014303);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014303","Строка 143 ""Амортизация других ОС"", графа 3 ""На начало отчетного года""","+","Сальдо на начало года по кредиту счета 02.01 /все прочие группы ОС/", П010014303);

		УстановитьЗначениеПоказателя("П000010014304", П010014304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014304","Строка 143 ""Амортизация других ОС"", графа 4 ""На конец отчетного периода""","+","Сальдо на конец отчетного периода по кредиту счета 02.01 /все прочие группы ОС/", П010014304);


		УстановитьЗначениеПоказателя("П000010016003", П010016003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003","Строка 160 ""Получено объектов основных средств в аренду - всего"", графа 3 ""На начало отчетного года""","+","Сальдо на начало года по дебету счета 001 для всех ОС, учитываемых на счете 001", П010016003);

		УстановитьЗначениеПоказателя("П000010016004", П010016004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016004","Строка 160 ""Получено объектов основных средств в аренду - всего"", графа 4 ""На конец отчетного периода""","+","Сальдо на конец отчетного периода по дебету счета 001 для всех ОС, учитываемых на счете 001", П010016004);


		УстановитьЗначениеПоказателя("П000010021003", П010021003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021003","Строка 210 ""Имущество для передачи в лизинг"", графа 3 ""Наличие на начало отчетного года""","+","!СНД", П010021003, Счет03_02);

		УстановитьЗначениеПоказателя("П000010021004", П010021004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004","Строка 210 ""Имущество для передачи в лизинг"", графа 4 ""Поступило""","+","!ДО", П010021004, Счет03_02);

		УстановитьЗначениеПоказателя("П000010021005", -П010021005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021005","Строка 210 ""Имущество для передачи в лизинг"", графа 5 ""Выбыло""","-","!КО", П010021005, Счет03_02);


		УстановитьЗначениеПоказателя("П000010022003", П010022003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022003", "Строка 220 ""Имущество, предоставляемое по договору проката"", графа 3 ""Наличие на начало отчетного года""","+","Сальдо на начало года по дебету счетов 03.01, 03.03", П010022003);

		УстановитьЗначениеПоказателя("П000010022004", П010022004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022004", "Строка 220 ""Имущество, предоставляемое по договору проката"", графа 4 ""Поступило""", "+", "!ДО", П010022004, Счет03_01);

		УстановитьЗначениеПоказателя("П000010022005", -П010022005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022005", "Строка 220 ""Имущество, предоставляемое по договору проката"", графа 5 ""Выбыло""", "-", "!КО", П010022005, Счет03_03);

		УстановитьЗначениеПоказателя("П000010024003", П010024003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "Строка 240 ""Прочие"", графа 3 ""Наличие на начало отчетного года""", "+", "!СНД", П010024003, Счет03_04);

		УстановитьЗначениеПоказателя("П000010024004", П010024004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "Строка 240 ""Прочие"", графа 4 ""Поступило""", "+", "!ДО", П010024004, Счет03_04);

		УстановитьЗначениеПоказателя("П000010024005", -П010024005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024005", "Строка 240 ""Прочие"""", графа 5 ""Выбыло""", "-", "!КО", П010024005, Счет03_04);

		УстановитьЗначениеПоказателя("П000010026003", П010026003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "Строка 260 ""Амортизация доходных вложений в материальные ценности"", графа 3 ""На начало отчетного года""", "+", "!СНК", П010024003, Счет02_02);

		УстановитьЗначениеПоказателя("П000010026004", П010026004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "Строка 260 ""Амортизация доходных вложений в материальные ценности"", графа 4 ""На конец отчетного периода""", "+", "!СКК", П010024004, Счет02_02);

		// Расходы на научно-исследовательские, опытно-конструкторские и технологические работы
		П010032003 = СНД(Счет08_08);
		УстановитьЗначениеПоказателя("П000010032003", П010032003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010032003","Строка 320 ""Сумма расходов по незаконченным научно-исследовательским, опытно-конструкторским и технологическим работам"", графа 3 ""На начало отчетного года""","+","!СНД", П010032003, Счет08_08);

		П010032004 = СКД(Счет08_08);
		УстановитьЗначениеПоказателя("П000010032004", П010032004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010032004","Строка 320 ""Сумма расходов по незаконченным научно-исследовательским, опытно-конструкторским и технологическим работам"", графа 4 ""На конец отчетного периода""","+","!СКД", П010032004, Счет08_08);


		П010033003 = ОБ(Счет91_02, Счет08_08);
		УстановитьЗначениеПоказателя("П000010033003", П010033003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010033003","Строка 330 ""Сумма не давших положительных результатов расходов..."", графа 3 ""За отчетный период""","+","!ОБ", П010033003, Счет91_02, Счет08_08);

		
		// Строка 510 "Вклады в уставные (складочные) капиталы других организаций - всего"
		П010051003_58_01_1 = СНД(Счет58_01_1);
		УстановитьЗначениеПоказателя("П000010051003", П010051003_58_01_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051003","Строка 510 ""Вклады в уставные (складочные) капиталы других организаций - всего"", графа 3 ""Долгосрочные на начало отчетного года""","+","!СНД", П010051003_58_01_1, Счет58_01_1);

		П010051004_58_01_1 = СКД(Счет58_01_1);
		УстановитьЗначениеПоказателя("П000010051004", П010051004_58_01_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051004","Строка 510 ""Вклады в уставные (складочные) капиталы других организаций - всего"", графа 4 ""Долгосрочные на конец отчетного периода""","+","!СКД", П010051004_58_01_1, Счет58_01_1);

		// Бухгалтерские итоги по ценным бумагам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "58.01.2, 59", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		П010051005_58_01_2 = 0;
		П010051006_58_01_2 = 0;
		
		П010051005_59      = 0;
		П010051006_59      = 0;

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
			
			ВыборкаПоСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");

			Пока ВыборкаПоСчетам.Следующий() Цикл
				Если ВыборкаПоСчетам.Счет = Счет58_01_2 Тогда
					П010051005_58_01_2 = П010051005_58_01_2 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
					П010051006_58_01_2 = П010051006_58_01_2 + ВыборкаПоСубконто.СуммаКонечныйОстатокДт;
					
				ИначеЕсли ВыборкаПоСчетам.Счет = Счет59 Тогда
					П010051005_59      = П010051005_59 + ВыборкаПоСубконто.СуммаНачальныйОстатокКт;
					П010051006_59      = П010051006_59 + ВыборкаПоСубконто.СуммаКонечныйОстатокКт;

				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

		П010051005 = П010051005_58_01_2 - П010051005_59;
		УстановитьЗначениеПоказателя("П000010051005", П010051005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051005","Строка 510 ""Вклады в уставные (складочные) капиталы других организаций - всего"", графа 5 ""Краткосрочные на начало отчетного года""","+","!СНД", П010051005_58_01_2, Счет58_01_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051005","","-","Сальдо на начало отчетного периода по кредиту счета 59 по ценным бумагам, учтенным на счете 58.01.2", -П010051005_59);

		П010051006 = П010051006_58_01_2 - П010051006_59;
		УстановитьЗначениеПоказателя("П000010051006", П010051006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051006","Строка 510 ""Вклады в уставные (складочные) капиталы других организаций - всего"", графа 6 ""Краткосрочные на конец отчетного периода""","+","!СКД", П010051006_58_01_2, Счет58_01_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051006","","-","Сальдо на конец отчетного периода по кредиту счета 59 по ценным бумагам, учтенным на счете 58.01.2", -П010051006_59);


		// Ценные бумаги гругих организаций
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "58.02, 59", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		П010052005_58_02 = 0;
		П010052006_58_02 = 0;
		
		П010052005_59    = 0;
		П010052006_59    = 0;

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
			
			ВыборкаПоСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");

			Пока ВыборкаПоСчетам.Следующий() Цикл
				Если ВыборкаПоСчетам.Счет = Счет58_02 Тогда
					П010052005_58_02 = П010052005_58_02 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
					П010052006_58_02 = П010052006_58_02 + ВыборкаПоСубконто.СуммаКонечныйОстатокДт;
					
				ИначеЕсли ВыборкаПоСчетам.Счет = Счет59 Тогда
					П010052005_59    = П010052005_59 + ВыборкаПоСубконто.СуммаНачальныйОстатокКт;
					П010052006_59    = П010052006_59 + ВыборкаПоСубконто.СуммаКонечныйОстатокКт;

				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

		П010052005 = П010052005_58_02 - П010052005_59;
		УстановитьЗначениеПоказателя("П000010052005", П010052005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052005","Строка 520 ""Ценные бумаги других организаций - всего"", графа 5 ""Краткосрочные на начало отчетного года""","+","!СНД", П010052005_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052005","","-","Сальдо на начало отчетного периода по кредиту счета 59 по ценным бумагам, учтенным на счете 58.02", -П010052005_59);

		П010052006 = П010052006_58_02 - П010052006_59;
		УстановитьЗначениеПоказателя("П000010052006", П010052006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052006","Строка 520 ""Ценные бумаги других организаций - всего"", графа 6 ""Краткосрочные на конец отчетного периода""","+","!СКД", П010052006_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052006","","-","Сальдо на конец отчетного периода по кредиту счета 59 по ценным бумагам, учтенным на счете 58.02", -П010052006_59);

		// строка 530 "Депозитные вклады"
		// Так как аналитика на счете 55 не позволяет разделить вклады
		// на долгосрочные и краткосрочные, считаем все депозитные вклады
		// краткосрочными
		П010053005_55_03 = СНД(Счет55_03);
		П010053005_55_23 = СНД(Счет55_23);

		П010053005 = П010053005_55_03 + П010053005_55_23;
		УстановитьЗначениеПоказателя("П000010053005", П010053005);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053005","Строка 530 ""Депозитные вклады"", графа 5 ""Краткосрочные на начало отчетного года""","+","!СНД", П010053005_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053005","","+","!СНД", П010053005_55_23, Счет55_23);
		

		П010053006_55_03 = СКД(Счет55_03);
		П010053006_55_23 = СКД(Счет55_23);

		П010053006 = П010053006_55_03 + П010053006_55_23;
		УстановитьЗначениеПоказателя("П000010053006", П010053006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053006","Строка 530 ""Депозитные вклады"", графа 6 ""Краткосрочные на конец отчетного периода""","+","!СКД", П010053006_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053006","","+","!СКД", П010053006_55_23, Счет55_23);

		// строки 525, 535
		П010052505 = СНД(Счет58_03);
		УстановитьЗначениеПоказателя("П000010052505", П010052505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052505","Строка 525 ""Предоставленные займы"", графа 5 ""Краткосрочные на начало отчетного года""","+","!СНД", П010052505, Счет58_03);

		П010052506 = СКД(Счет58_03);
		УстановитьЗначениеПоказателя("П000010052506", П010052506);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010052506","Строка 525 ""Предоставленные займы"", графа 6 ""Краткосрочные на конец отчетного периода""","+","!СКД", П010052506, Счет58_03);

		П010053505_58_04 = СНД(Счет58_04);
		П010053505_58_05 = СНД(Счет58_05);
		
		П010053505 = П010053505_58_04 + П010053505_58_05;
		УстановитьЗначениеПоказателя("П000010053505", П010053505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053505","Строка 535 ""Прочие"", графа 5 ""Краткосрочные на начало отчетного года""","+","!СНД", П010053505_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053505","","+","!СНД", П010053505_58_05, Счет58_05);

		П010053506_58_04 = СКД(Счет58_04);
		П010053506_58_05 = СКД(Счет58_05);
		
		П010053506 = П010053506_58_04 + П010053506_58_05;
		УстановитьЗначениеПоказателя("П000010053506", П010053506);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053506","Строка 535 ""Прочие"", графа 6 ""Краткосрочные на конец отчетного периода""","+","!СКД", П010053506_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010053506","","+","!СКД", П010053506_58_05, Счет58_05);


		// Дебиторская и кредиторская задолженность
		// Из-за отсутствия необходимой аналитики для анализа срока погашения задолженности, 
		// всю задолженность считаем краткосрочной.
		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "76", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация", мОргРасшифровка);

		П010061303_76_01 = 0;
		П010061304_76_01 = 0;
		
		П010064603_76_01 = 0;
		П010064604_76_01 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_01);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_21 = 0;
		П010061304_76_21 = 0;

		П010064603_76_21 = 0;
		П010064604_76_21 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_21);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_05 = 0;
		П010061304_76_05 = 0;

		П010064103_76_05 = 0;
		П010064104_76_05 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_05);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_25 = 0;
		П010061304_76_25 = 0;

		П010064103_76_25 = 0;
		П010064104_76_25 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_25);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_35 = 0;
		П010061304_76_35 = 0;

		П010064103_76_35 = 0;
		П010064104_76_35 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_35);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061103_76_06 = 0;
		П010061104_76_06 = 0;

		П010064103_76_06 = 0;
		П010064104_76_06 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_06);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061103_76_26 = 0;
		П010061104_76_26 = 0;

		П010064103_76_26 = 0;
		П010064104_76_26 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_26);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061103_76_36 = 0;
		П010061104_76_36 = 0;

		П010064103_76_36 = 0;
		П010064104_76_36 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_36);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		П010061303_76_09 = 0;
		П010061304_76_09 = 0;
		
		П010064603_76_09 = 0;
		П010064604_76_09 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_09);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_29 = 0;
		П010061304_76_29 = 0;

		П010064603_76_29 = 0;
		П010064604_76_29 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_29);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_76_39 = 0;
		П010061304_76_39 = 0;

		П010064603_76_39 = 0;
		П010064604_76_39 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_39);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			
			П010061303_76_51 = 0;
			П010061304_76_51 = 0;
			
			П010064603_76_51 = 0;
			П010064604_76_51 = 0;

			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_51);

			Если НЕ ВыборкаПоСчету = Неопределено Тогда

				П010061303_76_51 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010061304_76_51 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

				П010064603_76_51 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010064604_76_51 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

			КонецЕсли;

			П010061303_76_52 = 0;
			П010061304_76_52 = 0;
			
			П010064603_76_52 = 0;
			П010064604_76_52 = 0;

			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_52);

			Если НЕ ВыборкаПоСчету = Неопределено Тогда

				П010061303_76_52 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010061304_76_52 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

				П010064603_76_52 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010064604_76_52 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

			КонецЕсли;
			
		КонецЕсли;

		Если Есть76НА Тогда   
			
			П010061303_76_НА = 0;
			П010061304_76_НА = 0;
			
			П010064603_76_НА = 0;
			П010064604_76_НА = 0;
			
			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_НА);
			
			Если НЕ ВыборкаПоСчету = Неопределено Тогда
				
				П010061303_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010061304_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
				
				П010064603_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010064604_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
				
			КонецЕсли;
		КонецЕсли;


		// На активных счетах учета расчетов с покупателями и заказчиками, на которых
		// допускается учет авансов, может возникать ситуация, когда полученный аванс
		// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
		// остаток надо извлечь и затем прибавить к кредитоской  задолженности, которая
		// образовалась на счетах учета полученных авансов.
		
		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация", мОргРасшифровка);

		// В дебиторской задолженнотси учитываем только дебетовое развернутое сальдо
		П010061103_62_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_01);
		П010061104_62_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_01);

		П010061103_62_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_21);
		П010061104_62_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_21);

		П010061103_62_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_31);
		П010061104_62_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_31);

		// Кредитовое сальдо учитываем в кредиторской задолженности
		П010064203_62_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_01);
		П010064204_62_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_01);
		
		П010064203_62_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_21);
		П010064204_62_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_21);

		П010064203_62_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_31);
		П010064204_62_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_31);

		// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
		// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
		// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
		// надо извлечь и затем прибавить к дебиторской задолженности, которая 
		// образовалась на счетах учета выплаченных авансов.
		
		// В кредиторской задолженности учитываем только кредитовое слаьдо
		П010064103_60_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_01);
		П010064104_60_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_01);

		П010064103_60_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_21);
		П010064104_60_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_21);

		П010064103_60_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_31);
		П010064104_60_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_31);

		// Дебетовое сальдо учитываем в дебиторской задолженности.
		П010061203_60_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_01);
		П010061204_60_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_01);

		П010061203_60_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_21);
		П010061204_60_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_21);

		П010061203_60_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_31);
		П010061204_60_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_31);

		П010061103_63    = СНК(Счет63);

		// строка 611 "расчеты с покупателями и заказчиками"
		П010061103 = П010061103_62_01_СНД
		           + П010061103_62_21_СНД
		           + П010061103_62_31_СНД
		           - П010061103_63
		           + П010061103_76_06
		           + П010061103_76_26
		           + П010061103_76_36;

		УстановитьЗначениеПоказателя("П000010061103", П010061103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "Строка 611 ""расчеты с покупателями и заказчиками"", графа 3 ""Остаток на начало отчетного года""", "+", "Сальдо на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061103_62_01_СНД, Счет62_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "+", "Сальдо на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061103_62_21_СНД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "+", "Сальдо на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061103_62_31_СНД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "-", "!СНК", -П010061103_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "+", "Сальдо на начало периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010061103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "+", "Сальдо на начало периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010061103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061103", "", "+", "Сальдо на начало периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010061103_76_36, Счет76_36);

		П010061104_63    = СКК(Счет63);

		П010061104 = П010061104_62_01_СКД
		           + П010061104_62_21_СКД
		           + П010061104_62_31_СКД
		           - П010061104_63
		           + П010061104_76_06
		           + П010061104_76_26
		           + П010061104_76_36;

		УстановитьЗначениеПоказателя("П000010061104", П010061104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "Строка 611 ""расчеты с покупателями и заказчиками"", графа 4 ""Остаток на конец отчетного периода""", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061104_62_01_СКД, Счет62_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061104_62_21_СКД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061104_62_31_СКД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "-", "!СКК", -П010061104_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010061104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010061104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061104", "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010061104_76_36, Счет76_36);

		// строка 612 "авансы выданные"
		П010061203_60_02 = СНД(Счет60_02);
		П010061203_60_22 = СНД(Счет60_22);
		П010061203_60_32 = СНД(Счет60_32);
		
		П010061203 = П010061203_60_02
		           + П010061203_60_01_СНД
		           + П010061203_60_22
		           + П010061203_60_21_СНД
		           + П010061203_60_32
		           + П010061203_60_31_СНД;

		УстановитьЗначениеПоказателя("П000010061203", П010061203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "Строка 612 ""авансы выданные"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНД", П010061203_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061203_60_01_СНД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "", "+", "!СНД", П010061203_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061203_60_21_СНД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "", "+", "!СНД", П010061203_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061203", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061203_60_31_СНД, Счет60_31);

		П010061204_60_02 = СКД(Счет60_02);
		П010061204_60_22 = СКД(Счет60_22);
		П010061204_60_32 = СКД(Счет60_32);
		
		П010061204 = П010061204_60_02
		           + П010061204_60_01_СКД
		           + П010061204_60_22
		           + П010061204_60_21_СКД
		           + П010061204_60_32
		           + П010061204_60_31_СКД;

		УстановитьЗначениеПоказателя("П000010061204", П010061204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "Строка 612 ""авансы выданные"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКД", П010061204_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061204_60_01_СКД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "", "+", "!СКД", П010061204_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061204_60_21_СКД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "", "+", "!СКД", П010061204_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061204", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010061204_60_31_СКД, Счет60_31);

		// Собираем данные по субсчетам счета 68

		// Развернутые итоги по субсчету 68.04.1 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_04_1);

		П010061303_68_04_1 = 0;
		П010061304_68_04_1 = 0;

		П010064303_68_04_1 = 0;
		П010064304_68_04_1 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064303_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064304_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		// Развернутые итоги по субсчету 68.10 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.10", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_10);

		П010061303_68_10 = 0;
		П010061304_68_10 = 0;

		П010064303_68_10 = 0;
		П010064304_68_10 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064303_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064304_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_68_01   = СНД(Счет68_01);
		П010061303_68_02   = СНД(Счет68_02);
		П010061303_68_03   = СНД(Счет68_03);

		П010061303_68_04_2 = СНД(Счет68_04_2);
		П010061303_68_07   = СНД(Счет68_07);
		П010061303_68_08   = СНД(Счет68_08);
		П010061303_68_09   = СНД(Счет68_09);

		П010061303_68_11   = СНД(Счет68_11);
		П010061303_68_12   = СНД(Счет68_12);
		П010061303_68_22   = СНД(Счет68_22);

		П010061303_68 = 0;

		П010061303_68 = П010061303_68_01
		              + П010061303_68_02
		              + П010061303_68_03
		              + П010061303_68_04_1
		              + П010061303_68_04_2
		              + П010061303_68_07
		              + П010061303_68_08
		              + П010061303_68_09
		              + П010061303_68_10
		              + П010061303_68_11
		              + П010061303_68_12
		              + П010061303_68_22;

		П010061304_68_01   = СКД(Счет68_01);
		П010061304_68_02   = СКД(Счет68_02);
		П010061304_68_03   = СКД(Счет68_03);

		П010061304_68_04_2 = СКД(Счет68_04_2);
		П010061304_68_07   = СКД(Счет68_07);
		П010061304_68_08   = СКД(Счет68_08);
		П010061304_68_09   = СКД(Счет68_09);

		П010061304_68_11   = СКД(Счет68_11);
		П010061304_68_12   = СКД(Счет68_12);
		П010061304_68_22   = СКД(Счет68_22);

		П010061304_68 = 0;
		
		П010061304_68 = П010061304_68_01
		              + П010061304_68_02
		              + П010061304_68_03
		              + П010061304_68_04_1
		              + П010061304_68_04_2
		              + П010061304_68_07
		              + П010061304_68_08
		              + П010061304_68_09
		              + П010061304_68_10
		              + П010061304_68_11
		              + П010061304_68_12
		              + П010061304_68_22;

		П010064303_68_01   = СНК(Счет68_01);
		П010064303_68_02   = СНК(Счет68_02);
		П010064303_68_03   = СНК(Счет68_03);

		П010064303_68_04_2 = СНК(Счет68_04_2);
		П010064303_68_07   = СНК(Счет68_07);
		П010064303_68_08   = СНК(Счет68_08);
		П010064303_68_09   = СНК(Счет68_09);

		П010064303_68_11   = СНК(Счет68_11);
		П010064303_68_12   = СНК(Счет68_12);
		П010064303_68_22   = СНК(Счет68_22);

		П010064303_68 = 0;
		
		П010064303_68 = П010064303_68_01
		              + П010064303_68_02
		              + П010064303_68_03
		              + П010064303_68_04_1
		              + П010064303_68_04_2
		              + П010064303_68_07
		              + П010064303_68_08
		              + П010064303_68_09
		              + П010064303_68_10
		              + П010064303_68_11
		              + П010064303_68_12
		              + П010064303_68_22;

		П010064304_68_01   = СКК(Счет68_01);
		П010064304_68_02   = СКК(Счет68_02);
		П010064304_68_03   = СКК(Счет68_03);

		П010064304_68_04_2 = СКК(Счет68_04_2);
		П010064304_68_07   = СКК(Счет68_07);
		П010064304_68_08   = СКК(Счет68_08);
		П010064304_68_09   = СКК(Счет68_09);

		П010064304_68_11   = СКК(Счет68_11);
		П010064304_68_12   = СКК(Счет68_12);
		П010064304_68_22   = СКК(Счет68_22);

		П010064304_68 = 0;
		
		П010064304_68 = П010064304_68_01
		              + П010064304_68_02
		              + П010064304_68_03
		              + П010064304_68_04_1
		              + П010064304_68_04_2
		              + П010064304_68_07
		              + П010064304_68_08
		              + П010064304_68_09
		              + П010064304_68_10
		              + П010064304_68_11
		              + П010064304_68_12
		              + П010064304_68_22;

		// Собираем данные по субсчетам счета 69
		П010061303_69 = СНДР(Счет69);
		П010061304_69 = СКДР(Счет69);

		П010064603_69 = СНКР(Счет69);
		П010064604_69 = СККР(Счет69);

		// Развернутые итоги по счету 71
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации, , , "Организация", мОргРасшифровка);
		ИначеЕсли ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, , , "Организация", мОргРасшифровка);
		КонецЕсли;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет71);
		
		П010061303_71 = 0;
		П010061304_71 = 0;

		П010064603_71 = 0;
		П010064604_71 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010061303_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010061304_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010064603_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010064604_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010061303_73    = СНД(Счет73);
		П010061303_75_01 = СНД(Счет75_01);
		П010061303_76_02 = СНД(Счет76_02);
		П010061303_76_22 = СНД(Счет76_22);
		П010061303_76_32 = СНД(Счет76_32);
		П010061303_76_03 = СНД(Счет76_03);
		П010061303_76_41 = СНД(Счет76_41);
		П010061303_76_АВ = СНД(Счет76_АВ);

		П010061303 = П010061303_68
		           + П010061303_69
		           + П010061303_71
		           + П010061303_73
		           + П010061303_75_01
		           + П010061303_76_01
		           + П010061303_76_21
		           + П010061303_76_02
		           + П010061303_76_22
		           + П010061303_76_32
		           + П010061303_76_05
		           + П010061303_76_25
		           + П010061303_76_35
		           + П010061303_76_03
		           + П010061303_76_09
		           + П010061303_76_29
		           + П010061303_76_39
		           + П010061303_76_41
		           + П010061303_76_АВ;

		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			П010061303 = П010061303
			           + П010061303_76_51
			           + П010061303_76_52;
		КонецЕсли;

	    Если Есть76НА Тогда
			П010061303 = П010061303 + П010061303_76_НА;	 	
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010061303", П010061303);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "Строка 613 ""прочая"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНД", П010061303_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_03, Счет68_03);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010061303_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010061303_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_68_22, Счет68_22);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНДР", П010061303_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010061303_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_75_01, Счет75_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010061303_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010061303_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010061303_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010061303_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010061303_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010061303_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010061303_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010061303_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_41, Счет76_41);
		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", П010061303_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", П010061303_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "!СНД", П010061303_76_АВ, Счет76_АВ);
		Если Есть76НА Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061303", "", "+", "Сальдо на начало периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010061303_76_НА, Счет76_НА);
		КонецЕсли;
		
		П010061304_73    = СКД(Счет73);
		П010061304_75_01 = СКД(Счет75_01);
		П010061304_76_02 = СКД(Счет76_02);
		П010061304_76_22 = СКД(Счет76_22);
		П010061304_76_32 = СКД(Счет76_32);
		П010061304_76_03 = СКД(Счет76_03);
		П010061304_76_41 = СКД(Счет76_41);
		П010061304_76_АВ = СКД(Счет76_АВ);

		П010061304 = П010061304_68
		           + П010061304_69
		           + П010061304_71
		           + П010061304_73
		           + П010061304_75_01
		           + П010061304_76_01
		           + П010061304_76_21
		           + П010061304_76_02
		           + П010061304_76_22
		           + П010061304_76_32
		           + П010061304_76_05
		           + П010061304_76_25
		           + П010061304_76_35
		           + П010061304_76_03
		           + П010061304_76_09
		           + П010061304_76_29
		           + П010061304_76_39
		           + П010061304_76_41
		           + П010061304_76_АВ;

		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			П010061304 = П010061304
			           + П010061304_76_51
			           + П010061304_76_52;
		КонецЕсли;

		Если Есть76НА Тогда
			П010061304 = П010061304 + П010061304_76_НА;   
		КонецЕсли; 
				   
		УстановитьЗначениеПоказателя("П000010061304", П010061304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "Строка 613 ""прочая"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКД", П010061304_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010061304_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010061304_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_68_22, Счет68_22);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКДР", П010061304_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010061304_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_75_01, Счет75_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010061304_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010061304_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010061304_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010061304_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010061304_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010061304_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010061304_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010061304_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_41, Счет76_41);
		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", П010061304_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", П010061304_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "!СКД", П010061304_76_АВ, Счет76_АВ);
		Если Есть76НА Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061304", "", "+", "Сальдо на конец периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010061304_76_НА, Счет76_НА);
		КонецЕсли;
			
		// Расчеты с поставщиками и подрядчиками
		П010064103 = П010064103_60_01_СНК
		           + П010064103_60_21_СНК
		           + П010064103_60_31_СНК
		           + П010064103_76_05
		           + П010064103_76_25
		           + П010064103_76_35
		           + П010064103_76_06
		           + П010064103_76_26
		           + П010064103_76_36;

		УстановитьЗначениеПоказателя("П000010064103", П010064103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "Строка 641 ""расчеты с поставщиками и подрядчиками"", графа ""Остаток на начало отчетного года""", "+", "Сальдо на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064103_60_01_СНК, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064103_60_21_СНК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064103_60_31_СНК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010064103_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010064103_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010064103_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010064103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010064103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064103", "", "+", "Сальдо на начало периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010064103_76_36, Счет76_36);

		П010064104 = П010064104_60_01_СКК
		           + П010064104_60_21_СКК
		           + П010064104_60_31_СКК
		           + П010064104_76_05
		           + П010064104_76_25
		           + П010064104_76_35
		           + П010064104_76_06
		           + П010064104_76_26
		           + П010064104_76_36;

		УстановитьЗначениеПоказателя("П000010064104", П010064104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "Строка 641 ""расчеты с поставщиками и подрядчиками"", графа ""Остаток на конец отчетного периода""", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064104_60_01_СКК, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064104_60_21_СКК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064104_60_31_СКК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010064104_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010064104_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010064104_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010064104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010064104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064104", "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010064104_76_36, Счет76_36);
		
		// авансы полученные 
		
		П010064203_62_02 = СНК(Счет62_02);
		П010064203_62_22 = СНК(Счет62_22);
		П010064203_62_32 = СНК(Счет62_32);
		
		П010064203 = П010064203_62_02
		           + П010064203_62_01_СНК
		           + П010064203_62_22
		           + П010064203_62_21_СНК
		           + П010064203_62_32
		           + П010064203_62_31_СНК;

		УстановитьЗначениеПоказателя("П000010064203", П010064203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "Строка 642 ""авансы полученные "", графа ""Остаток на начало отчетного года""", "+", "!СНК", П010064203_62_02, Счет62_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064203_62_01_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "", "+", "!СНК", П010064203_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064203_62_21_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "", "+", "!СНК", П010064203_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064203", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064203_62_31_СНК);


		П010064204_62_02 = СКК(Счет62_02);
		П010064204_62_22 = СКК(Счет62_22);
		П010064204_62_32 = СКК(Счет62_32);

		П010064204 = П010064204_62_02
		           + П010064204_62_01_СКК
		           + П010064204_62_22
		           + П010064204_62_21_СКК
		           + П010064204_62_32
		           + П010064204_62_31_СКК;

		УстановитьЗначениеПоказателя("П000010064204", П010064204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "Строка 642 ""авансы полученные "", графа ""Остаток на конец отчетного перирода""", "+", "!СКК", П010064204_62_02, Счет62_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064204_62_01_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "", "+", "!СКК", П010064204_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064204_62_21_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "", "+", "!СКК", П010064204_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064204", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010064204_62_31_СКК);
		
		// расчеты по налогам и сборам
		П010064303 = П010064303_68;
		УстановитьЗначениеПоказателя("П000010064303", П010064303);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "Строка 643 ""расчеты по налогам и сборам"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНК", П010064303_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_03, Счет68_03);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "Сальдо на начало периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010064303_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "Сальдо на начало периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010064303_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064303", "", "+", "!СНК", П010064303_68_22, Счет68_22);

		П010064304 = П010064304_68;
		УстановитьЗначениеПоказателя("П000010064304", П010064304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "Строка 643 ""расчеты по налогам и сборам"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКК", П010064304_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_03, Счет68_03);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "Сальдо на конец периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010064304_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "Сальдо на конец периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010064304_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064304", "", "+", "!СКК", П010064304_68_22, Счет68_22);

		// кредиты краткосрочные
		П010064403_66_01 = СНК(Счет66_01);
		П010064403_66_02 = СНК(Счет66_02);
		П010064403_66_21 = СНК(Счет66_21);
		П010064403_66_22 = СНК(Счет66_22);
		
		П010064403 = П010064403_66_01
		           + П010064403_66_02
		           + П010064403_66_21
		           + П010064403_66_22;
		УстановитьЗначениеПоказателя("П000010064403", П010064403);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064403", "Строка 644 ""кредиты"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНК", П010064403_66_01, Счет66_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064403", "", "+", "!СНК", П010064403_66_02, Счет66_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064403", "", "+", "!СНК", П010064403_66_21, Счет66_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064403", "", "+", "!СНК", П010064403_66_22, Счет66_22);

		
		П010064404_66_01 = СКК(Счет66_01);
		П010064404_66_02 = СКК(Счет66_02);
		П010064404_66_21 = СКК(Счет66_21);
		П010064404_66_22 = СКК(Счет66_22);
		
		П010064404 = П010064404_66_01
		           + П010064404_66_02
		           + П010064404_66_21
		           + П010064404_66_22;
		УстановитьЗначениеПоказателя("П000010064404", П010064404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064404", "Строка 644 ""кредиты"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКК", П010064404_66_01, Счет66_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064404", "", "+", "!СКК", П010064404_66_02, Счет66_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064404", "", "+", "!СКК", П010064404_66_21, Счет66_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064404", "", "+", "!СКК", П010064404_66_22, Счет66_22);


		// займы краткосрочные
		П010064503_66_03 = СНК(Счет66_03);
		П010064503_66_04 = СНК(Счет66_04);
		П010064503_66_23 = СНК(Счет66_23);
		П010064503_66_24 = СНК(Счет66_24);
		
		П010064503 = П010064503_66_03
		           + П010064503_66_04
		           + П010064503_66_23
		           + П010064503_66_24;
		УстановитьЗначениеПоказателя("П000010064503", П010064503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064503", "Строка 645 ""займы"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНК", П010064503_66_03, Счет66_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064503", "", "+", "!СНК", П010064503_66_04, Счет66_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064503", "", "+", "!СНК", П010064503_66_23, Счет66_23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064503", "", "+", "!СНК", П010064503_66_24, Счет66_24);


		П010064504_66_03 = СКК(Счет66_03);
		П010064504_66_04 = СКК(Счет66_04);
		П010064504_66_23 = СКК(Счет66_23);
		П010064504_66_24 = СКК(Счет66_24);
		
		П010064504 = П010064504_66_03
		           + П010064504_66_04
		           + П010064504_66_23
		           + П010064504_66_24;
		УстановитьЗначениеПоказателя("П000010064504", П010064504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064504", "Строка 645 ""займы"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКК", П010064504_66_03, Счет66_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064504", "", "+", "!СКК", П010064504_66_04, Счет66_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064504", "", "+", "!СКК", П010064504_66_23, Счет66_23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064504", "", "+", "!СКК", П010064504_66_24, Счет66_24);


		// прочая краткосрочная кредиторская задолженность

		П010064603_70    = СНК(Счет70);
		П010064603_76_03 = СНК(Счет76_03);
		П010064603_76_04 = СНК(Счет76_04);
		П010064603_76_41 = СНК(Счет76_41);
		П010064603_76_ВА = СНК(Счет76_ВА);
		П010064603_76_Н  = СНК(Счет76_Н);
		П010064603_75_02 = СНК(Счет75_02);

		П010064603 = П010064603_69
		           + П010064603_70
		           + П010064603_71
		           + П010064603_75_02
		           + П010064603_76_01
		           + П010064603_76_21
		           + П010064603_76_03
		           + П010064603_76_04
		           + П010064603_76_09
		           + П010064603_76_29
		           + П010064603_76_39
		           + П010064603_76_41
		           + П010064603_76_ВА
		           + П010064603_76_Н;

		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			П010064603 = П010064603
			           + П010064603_76_51
			           + П010064603_76_52;
		КонецЕсли;

		Если Есть76НА Тогда
			П010064603 = П010064603 + П010064603_76_НА;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П000010064603", П010064603);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "Строка 646 ""прочая"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНКР", П010064603_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_70, Счет70);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010064603_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_75_02, Счет75_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010064603_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010064603_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010064603_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010064603_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010064603_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_76_41, Счет76_41);
		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", П010064603_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", П010064603_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_76_ВА, Счет76_ВА);
		Если Есть76НА Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "Сальдо на начало периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010064603_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064603", "", "+", "!СНК", П010064603_76_Н, Счет76_Н);
		
		П010064604_70    = СКК(Счет70);
		П010064604_76_03 = СКК(Счет76_03);
		П010064604_76_04 = СКК(Счет76_04);
		П010064604_76_41 = СКК(Счет76_41);
		П010064604_76_ВА = СКК(Счет76_ВА);
		П010064604_76_Н  = СКК(Счет76_Н);
		П010064604_75_02 = СКК(Счет75_02);

		П010064604 = П010064604_69
		           + П010064604_70
		           + П010064604_71
		           + П010064604_75_02
		           + П010064604_76_01
		           + П010064604_76_21
		           + П010064604_76_03
		           + П010064604_76_04
		           + П010064604_76_09
		           + П010064604_76_29
		           + П010064604_76_39
		           + П010064604_76_41
		           + П010064604_76_ВА
		           + П010064604_76_Н;

		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			П010064604 = П010064604
			           + П010064604_76_51
			           + П010064604_76_52;
		КонецЕсли;

		Если Есть76НА Тогда
			П010064604 = П010064604 + П010064604_76_НА;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П000010064604", П010064604);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "Строка 646 ""прочая"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СККР", П010064604_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_70, Счет70);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на начало периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010064604_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_75_02, Счет75_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010064604_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010064604_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010064604_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010064604_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010064604_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_76_41, Счет76_41);

		Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", П010064604_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", П010064604_76_52, Счет76_52);
		КонецЕсли;

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_76_ВА, Счет76_ВА);

		Если Есть76НА Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "Сальдо на конец периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010064604_76_НА, Счет76_НА);
		КонецЕсли;

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064604", "", "+", "!СКК", П010064604_76_Н, Счет76_Н);

		// долгосрочная кредиторская задолженность

		// кредиты
		П010065103_67_01 = СНК(Счет67_01);
		П010065103_67_02 = СНК(Счет67_02);
		П010065103_67_21 = СНК(Счет67_21);
		П010065103_67_22 = СНК(Счет67_22);
		
		П010065103 = П010065103_67_01
		           + П010065103_67_02
		           + П010065103_67_21
		           + П010065103_67_22;
		УстановитьЗначениеПоказателя("П000010065103", П010065103);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065103", "Строка 651 ""кредиты"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНК", П010065103_67_01, Счет67_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065103", "", "+", "!СНК", П010065103_67_02, Счет67_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065103", "", "+", "!СНК", П010065103_67_21, Счет67_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065103", "", "+", "!СНК", П010065103_67_22, Счет67_22);

		П010065104_67_01 = СКК(Счет67_01);
		П010065104_67_02 = СКК(Счет67_02);
		П010065104_67_21 = СКК(Счет67_21);
		П010065104_67_22 = СКК(Счет67_22);
		
		П010065104 = П010065104_67_01
		           + П010065104_67_02
		           + П010065104_67_21
		           + П010065104_67_22;
		УстановитьЗначениеПоказателя("П000010065104", П010065104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065104", "Строка 651 ""кредиты"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКК", П010065104_67_01, Счет67_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065104", "", "+", "!СКК", П010065104_67_02, Счет67_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065104", "", "+", "!СКК", П010065104_67_21, Счет67_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065104", "", "+", "!СКК", П010065104_67_22, Счет67_22);
		
		// займы
		П010065203_67_03 = СНК(Счет67_03);
		П010065203_67_04 = СНК(Счет67_04);
		П010065203_67_23 = СНК(Счет67_23);
		П010065203_67_24 = СНК(Счет67_24);
		
		П010065203 = П010065203_67_03
		           + П010065203_67_04
		           + П010065203_67_23
		           + П010065203_67_24;
		УстановитьЗначениеПоказателя("П000010065203", П010065203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065203", "Строка 652 ""займы"", графа 3 ""Остаток на начало отчетного года""", "+", "!СНК", П010065203_67_03, Счет67_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065203", "", "+", "!СНК", П010065203_67_04, Счет67_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065203", "", "+", "!СНК", П010065203_67_23, Счет67_23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065203", "", "+", "!СНК", П010065203_67_24, Счет67_24);


		П010065204_67_03 = СКК(Счет67_03);
		П010065204_67_04 = СКК(Счет67_04);
		П010065204_67_23 = СКК(Счет67_23);
		П010065204_67_24 = СКК(Счет67_24);
		
		П010065204 = П010065204_67_03
		           + П010065204_67_04
		           + П010065204_67_23
		           + П010065204_67_24;
		УстановитьЗначениеПоказателя("П000010065204", П010065204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065204", "Строка 652 ""займы"", графа 4 ""Остаток на конец отчетного периода""", "+", "!СКК", П010065204_67_03, Счет67_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065204", "", "+", "!СКК", П010065204_67_04, Счет67_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065204", "", "+", "!СКК", П010065204_67_23, Счет67_23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065204", "", "+", "!СКК", П010065204_67_24, Счет67_24);

		// строка 765 "Изменение остатков незавершенного производства"
		П010076503_20_Н = СНД(Счет20);
		П010076503_20_К = СКД(Счет20);
		
		П010076503_21_Н = СНД(Счет21);
		П010076503_21_К = СКД(Счет21);

		П010076503_23_Н = СНД(Счет23);
		П010076503_23_К = СКД(Счет23);
		
		П010076503_29_Н = СНД(Счет29);
		П010076503_29_К = СКД(Счет29);
		
		П010076503_44_Н = СНД(Счет44);
		П010076503_44_К = СКД(Счет44);
		
		П010076503 = П010076503_20_К - П010076503_20_Н
		           + П010076503_21_К - П010076503_21_Н
		           + П010076503_23_К - П010076503_23_Н
		           + П010076503_29_К - П010076503_29_Н
		           + П010076503_44_К - П010076503_44_Н;
		УстановитьЗначениеПоказателя("П000010076503", П010076503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "Строка 765 ""Изменение остатков незавершенного производства"", графа 3 ""За отчетный год""", "+", "!СКД", П010076503_20_К, Счет20);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "-", "!СНД", -П010076503_20_Н, Счет20);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "+", "!СКД", П010076503_21_К, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "-", "!СНД", -П010076503_21_Н, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "+", "!СКД", П010076503_23_К, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "-", "!СНД", -П010076503_23_Н, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "+", "!СКД", П010076503_29_К, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "-", "!СНД", -П010076503_29_Н, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "+", "!СКД", П010076503_44_К, Счет44);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076503", "", "-", "!СНД", -П010076503_44_Н, Счет44);

		// строка 766 "Изменение остатков расходов будущих периодов"
		П010076603_97_Н = СНД(Счет97);
		П010076603_97_К = СКД(Счет97);

		П010076603 = П010076603_97_К - П010076603_97_Н;
		УстановитьЗначениеПоказателя("П000010076603", П010076603);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076603", "Строка 766 ""Изменение остатков расходов будущих периодов"", графа 3 ""За отчетный год""", "+", "!СКД", П010076603_97_К, Счет97);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076603", "", "-", "!СНД", -П010076603_97_Н, Счет97);

		// строка 767 "Изменение остатков резервов предстоящих расходов"
		П010076703_96_Н = СНК(Счет96);
		П010076703_96_К = СКК(Счет96);
		
		П010076703 = П010076703_96_К - П010076703_96_Н;
		УстановитьЗначениеПоказателя("П000010076703", П010076703);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076703", "Строка 767 ""Изменение остатков резервов предстоящих расходов"", графа 3 ""За отчетный год""", "+", "!СКК", П010076703_96_К, Счет96);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076703", "", "-", "!СНК", -П010076703_96_Н, Счет96);

		// строка 810 "Обеспечения полученные - всего"
		П000010081003 = СНД(Счет62_03);
		УстановитьЗначениеПоказателя("П000010081003", П000010081003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010081003","Строка 810 ""Обеспечения полученные - всего"", графа 3 ""Остаток на начало отчетного года""","+","!СНД", П000010081003, Счет62_03);

		П000010081004 = СКД(Счет62_03);
		УстановитьЗначениеПоказателя("П000010081004", П000010081004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010081004","Строка 810 ""Обеспечения полученные - всего"", графа 4 ""Остаток на конец отчетного периода""","+","!СКД", П000010081004, Счет62_03);

		// строка 811 "в том числе векселя" (полученные)
		П000010081103 = П000010081003;
		УстановитьЗначениеПоказателя("П000010081103", П000010081103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010081103","Строка 811 ""векселя"", графа 3 ""Остаток на начало отчетного года""","+","!СНД", П000010081103, Счет62_03);

		П000010081104 = П000010081004;
		УстановитьЗначениеПоказателя("П000010081104", П000010081104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010081104","Строка 811 ""векселя"", графа 4 ""Остаток на конец отчетного периода""","+","!СКД", П000010081104, Счет62_03);

		// строка 830 "Обеспечения выданнные - всего"
		П000010083003 = СНК(Счет60_03);
		УстановитьЗначениеПоказателя("П000010083003", П000010083003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010083003","Строка 830 ""Обеспечения выданные - всего"", графа 3 ""Остаток на начало отчетного года""","+","!СНК", П000010083003, Счет60_03);

		П000010083004 = СКК(Счет60_03);
		УстановитьЗначениеПоказателя("П000010083004", П000010083004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010083004","Строка 830 ""Обеспечения выданные - всего"", графа 4 ""Остаток на конец отчетного периода""","+","!СКК", П000010083004, Счет60_03);

		// строка 831 "в том числе векселя" (выданные)
		П000010083103 = П000010083003;
		УстановитьЗначениеПоказателя("П000010083103", П000010083103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010083103","Строка 831 ""векселя"", графа 3 ""Остаток на начало отчетного года""","+","!СНК", П000010083103, Счет60_03);

		П000010083104 = П000010083004;
		УстановитьЗначениеПоказателя("П000010083104", П000010083104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010083104","Строка 831 ""векселя"", графа 4 ""Остаток на конец отчетного периода""","+","!СКК", П000010083104, Счет60_03);


		// За аналогичный период предыдущего года
		// От даты конца периода отнимаем 12 месяцев
		ДатаКонцаПериодаПрошлогоГода = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		ДатаНачалаПериодаПрошлогоГода = НачалоГода(ДатаКонцаПериодаПрошлогоГода);

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		П010033004 = ОБ(Счет91_02, Счет08_08);
		УстановитьЗначениеПоказателя("П000010033004", П010033004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010033004","Строка 330 ""Сумма не давших положительных результатов расходов..."", графа 4 ""За аналогич- ный период предыдущего года""","+","!ОБ", П010033004, Счет91_02, Счет08_08, ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// строка 765 "Изменение остатков незавершенного производства"
		П010076504_20_Н = СНД(Счет20);
		П010076504_20_К = СКД(Счет20);
		
		П010076504_21_Н = СНД(Счет21);
		П010076504_21_К = СКД(Счет21);

		П010076504_23_Н = СНД(Счет23);
		П010076504_23_К = СКД(Счет23);
		
		П010076504_29_Н = СНД(Счет29);
		П010076504_29_К = СКД(Счет29);
		
		П010076504_44_Н = СНД(Счет44);
		П010076504_44_К = СКД(Счет44);
		
		П010076504 = П010076504_20_К - П010076504_20_Н
		           + П010076504_21_К - П010076504_21_Н
		           + П010076504_23_К - П010076504_23_Н
		           + П010076504_29_К - П010076504_29_Н
		           + П010076504_44_К - П010076504_44_Н;
		УстановитьЗначениеПоказателя("П000010076504", П010076504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "Строка 765 ""Изменение остатков незавершенного производства"", графа 4 ""За предыдущий год""", "+", "!СКД", П010076504_20_К, Счет20, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "-", "!СНД", -П010076504_20_Н, Счет20, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "+", "!СКД", П010076504_21_К, Счет21, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "-", "!СНД", -П010076504_21_Н, Счет21, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "+", "!СКД", П010076504_23_К, Счет23, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "-", "!СНД", -П010076504_23_Н, Счет23, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "+", "!СКД", П010076504_29_К, Счет29, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "-", "!СНД", -П010076504_29_Н, Счет29, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "+", "!СКД", П010076504_44_К, Счет44, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076504", "", "-", "!СНД", -П010076504_44_Н, Счет44, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// строка 766 "Изменение остатков расходов будущих периодов"
		П010076604_97_Н = СНД(Счет97);
		П010076604_97_К = СНД(Счет97);

		П010076604 = П010076604_97_К - П010076604_97_Н;
		УстановитьЗначениеПоказателя("П000010076604", П010076604);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076604", "Строка 766 ""Изменение остатков расходов будущих периодов"", графа 4 ""За предыдущий год""", "+", "!СКД", П010076604_97_К, Счет97, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076604", "", "-", "!СНД", -П010076604_97_Н, Счет97, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		
		// строка 767 "Изменение остатков резервов предстоящих расходов"
		П010076704_96_Н = СНК(Счет96);
		П010076704_96_К = СКК(Счет96);
		
		П010076704 = П010076704_96_К - П010076704_96_Н;
		УстановитьЗначениеПоказателя("П000010076704", П010076704);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076704", "Строка 767 ""Изменение остатков резервов предстоящих расходов"", графа 4 ""За предыдущий год""", "+", "!СКК", П010076704_96_К, Счет96, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010076704", "", "-", "!СНК", -П010076704_96_Н, Счет96, , ДатаНачалаПериодаПрошлогоГода, ДатаКонцаПериодаПрошлогоГода);

		// Создаем и заполняем дополнительные строки
		// Создаем и заполняем дополнительные строки
		Если ТаблДанныхДопСтрок.Количество() > 0 Тогда
			Если мБезКонсолидации Тогда
				// Создаем и заполняем дополнительные строки.
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрок);
			Иначе
				// Сохраним в накопительной таблице
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблДанныхДопСтрок, ТаблДанныхДопСтрокОбщ);
				ТаблДанныхДопСтрок.Очистить();
			КонецЕсли;
		КонецЕсли;

		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("Раздел, Наименование", "ОстатокНаНачало, ПоступилоЗаПериод, ВыбылоЗаПериод, ОстатокНаКонец");
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрокОбщ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ФормироватьСтруктуруСтраницОтчета();

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2006Кв4");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

    ///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Форма №5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;

			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"ФормаОтчета");

	ДоступностьКнопокДобавитьУдалить();

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		ПрорисоватьПодменюПечать();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПрорисоватьПодменюПечать()
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 12 = 0 Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	Иначе
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), , Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
Процедура ПоказатьКодЕИ()

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мФормаОтчета.Области.КодЕИ1.Значение = "383";
		мФормаОтчета.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мФормаОтчета.Области.КодЕИ1.Значение = "384";
		мФормаОтчета.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мФормаОтчета.Области.КодЕИ1.Значение = "385";
		мФормаОтчета.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;

КонецПроцедуры // ПоказатьКодЕИ

// ОбработчикИзменения
//
Процедура ОбработчикИзменения()

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ОбработчикИзменения

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	//ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);
		КнопкаУдалить  = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки"  + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

		Если КнопкаУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаУдалить.Доступность = Ложь;
			Иначе
				КнопкаУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения();
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик нажатия кнопки <Добавить>
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиНажатие()

// Процедура - обработчик нажатия кнопки <Удалить>
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораВариантЗаполненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 или 
		мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=3; ЧГ=0";
		
	ИначеЕсли мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=6; ЧГ=0";
		
	КонецЕсли;
		 
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	//*************************************************************************************************************************
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
				СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
				СтатусПроверки = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			//проверка на то, что раздел пуст
			//ПустойРаздел = Истина;
			//СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			//Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			//	
			//	КодПоказателя = Стр3.КодПоказателяПоСоставу;
			//	ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			//	ПризнакФормата = Стр3.ТипДанныхПоказателя;
			//	
			//	Если КодПоказателя="###" Тогда
			//		Продолжить;
			//	ИначеЕсли КодПоказателя="===" Тогда
			//		Прервать;	
			//	КонецЕсли;
			//	
			//	ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			//	Если Найти(ЧтоПроверять, "1") <> 0 Тогда
			//		
			//		Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, Ложь) = 1 Тогда
			//			ПустойРаздел = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	Если ВыводитьСообщения Тогда
			//		Сообщить(ПредставлениеОтчета + "Обязательный к заполнению " + ИмяРаздела + " пуст!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	СтатусПроверки = 1;
			//КонецЕсли;
			//конец проверки на пустой раздел
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели201() Экспорт
	
	Орг = мСохраненныйДок.Организация;
	ДатаПодписи = мСохраненныйДок.ДатаПодписи;
	ТаблицаСообщений.Очистить();
	РезПроверки1 = ПроверитьШапку(Ложь);
	РезПроверки2 = ПроверитьПредписанныеПоказатели(Ложь);
	Возврат (РезПроверки1 И РезПроверки2);
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат ПроверитьПоказателиXML();
	Иначе
		Возврат ПроверитьПоказатели201();
	КонецЕсли;
	
КонецФункции

Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат УниверсальнаяВыгрузкаXML(Текст);
	Иначе
		Возврат УниверсальнаяВыгрузка201(Текст);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьШапку(БратьИзФормы = Истина)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	
	Орг = мСохраненныйДок.Организация;
	
	ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКПО) Тогда
		СообщитьВТС("Не задано значение кода по ОКПО", "ФормаОтчета", "ОргКодОКПО");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОснВидДеят) Тогда
		СообщитьВТС("Не задано наименование основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргОтрасль");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКВЭД) Тогда
		СообщитьВТС("Не задан код основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОргПравФорм) Тогда
		СообщитьВТС("Не задано наименование организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргФорма");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКОПФ) Тогда
		СообщитьВТС("Не задан код организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ФормСобств) Тогда
		СообщитьВТС("Не задано наименование формы собственности по ОКФС", "ФормаОтчета", "ОргФормаСобств");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКФС) Тогда
		СообщитьВТС("Не задан код собственности по ОКФС", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Возврат НЕ Булево(СтатусПроверки);
	
КонецФункции

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ПроставитьКонцыБлока(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	КонцыБлоков.Добавить("П000010003006");
	КонцыБлоков.Добавить("П000010006004");
	КонцыБлоков.Добавить("П000010020204");
	КонцыБлоков.Добавить("П000010022004");
	КонцыБлоков.Добавить("П000010027006");
	КонцыБлоков.Добавить("П000010032006");
	КонцыБлоков.Добавить("П000010035006");
	КонцыБлоков.Добавить("П000010056204");
	КонцыБлоков.Добавить("П000010068304");
	КонцыБлоков.Добавить("П000010070304");
	КонцыБлоков.Добавить("П000010071004");
	КонцыБлоков.Добавить("П000010072006");
	//КонцыБлоков.Добавить("П000010037004");
	
	КонцыБлоков.Добавить("П000010004006");
	КонцыБлоков.Добавить("П000010006104");
	КонцыБлоков.Добавить("П000010020304");
	КонцыБлоков.Добавить("П000010022104");
	КонцыБлоков.Добавить("П000010028006");
	КонцыБлоков.Добавить("П000010032106");
	КонцыБлоков.Добавить("П000010035106");
	КонцыБлоков.Добавить("П000010056304");
	КонцыБлоков.Добавить("П000010068404");
	КонцыБлоков.Добавить("П000010070404");
	КонцыБлоков.Добавить("П000010071104");
	КонцыБлоков.Добавить("П000010072106");
	
	ИзменятьЗнакПоказателей = (РабочаяДата >= '20070701000000');
	Если ИзменятьЗнакПоказателей Тогда
		ПоложительныеПоказатели = Новый Соответствие;
		ПоложительныеПоказатели.Вставить("П000010001005", Истина);
		ПоложительныеПоказатели.Вставить("П000010001105", Истина);
		ПоложительныеПоказатели.Вставить("П000010001205", Истина);
		ПоложительныеПоказатели.Вставить("П000010001305", Истина);
		ПоложительныеПоказатели.Вставить("П000010001405", Истина);
		ПоложительныеПоказатели.Вставить("П000010001505", Истина);
		ПоложительныеПоказатели.Вставить("П000010002005", Истина);
		ПоложительныеПоказатели.Вставить("П000010003005", Истина);
		ПоложительныеПоказатели.Вставить("П000010004005", Истина);
		ПоложительныеПоказатели.Вставить("П000010005005", Истина);
		ПоложительныеПоказатели.Вставить("П000010007005", Истина);
		ПоложительныеПоказатели.Вставить("П000010008005", Истина);
		ПоложительныеПоказатели.Вставить("П000010009005", Истина);
		ПоложительныеПоказатели.Вставить("П000010010005", Истина);
		ПоложительныеПоказатели.Вставить("П000010011005", Истина);
		ПоложительныеПоказатели.Вставить("П000010012005", Истина);
		ПоложительныеПоказатели.Вставить("П000010013005", Истина);
		ПоложительныеПоказатели.Вставить("П000010014005", Истина);
		ПоложительныеПоказатели.Вставить("П000010015005", Истина);
		ПоложительныеПоказатели.Вставить("П000010016005", Истина);
		ПоложительныеПоказатели.Вставить("П000010017005", Истина);
		ПоложительныеПоказатели.Вставить("П000010018005", Истина);
		ПоложительныеПоказатели.Вставить("П000010026005", Истина);
		ПоложительныеПоказатели.Вставить("П000010027005", Истина);
		ПоложительныеПоказатели.Вставить("П000010028005", Истина);
		ПоложительныеПоказатели.Вставить("П000010029005", Истина);
		ПоложительныеПоказатели.Вставить("П000010030005", Истина);
		ПоложительныеПоказатели.Вставить("П000010032005", Истина);
		ПоложительныеПоказатели.Вставить("П000010032105", Истина);
		ПоложительныеПоказатели.Вставить("П000010035005", Истина);
		ПоложительныеПоказатели.Вставить("П000010035105", Истина);
		ПоложительныеПоказатели.Вставить("П000010072005", Истина);
		ПоложительныеПоказатели.Вставить("П000010072105", Истина);
	КонецЕсли;
	
	Строки254 = Новый Массив;
	Строки254.Добавить("П000010004001");
	Строки254.Добавить("П000010006101");
	Строки254.Добавить("П000010020301");
	Строки254.Добавить("П000010022101");
	Строки254.Добавить("П000010028001");
	Строки254.Добавить("П000010032101");
	Строки254.Добавить("П000010035101");
	Строки254.Добавить("П000010056301");
	Строки254.Добавить("П000010068401");
	Строки254.Добавить("П000010070401");
	Строки254.Добавить("П000010071101");
	Строки254.Добавить("П000010072101");
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Строки254.Найти(Тек13Симв) <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СокрЛП(Сред(ТекСтрока, 15, 254)));
		КонецЕсли;
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");			
		КонецЕсли;
		Если ИзменятьЗнакПоказателей И ПоложительныеПоказатели.Получить(Тек13Симв) = Истина И Сред(ТекСтрока, 15, 1) = "-" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + Сред(ТекСтрока, 16));
		КонецЕсли;
		Если Тек13Симв = "П000010024003" ИЛИ Тек13Симв = "П000010024004" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":");
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыгрузитьШапку(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	Данные.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	Вид = мСохраненныйДок.Вид;
	
	Дата2Число = ТекПоказатели.ДатаКонцаПериодаОтчетаЧисло;
	Дата2Месяц = ТекПоказатели.ДатаКонцаПериодаОтчетаМесяц;
	Дата2Год   = ТекПоказатели.ДатаКонцаПериодаОтчетаГод;
	Дата2 = Дата(Дата2Год, Дата2Месяц, Дата2Число);
	
	//ПризПериодОтч = 2;
	//Если Дата2 = КонецГода(Дата2) Тогда
		ПризПериодОтч = 3;
	//КонецЕсли;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ОКЕИ = 385;
	Иначе
		ОКЕИ = 384;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:2");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + НаименованиеОтчетаДляВыгрузки);
	Текст.ДобавитьСтроку("ВерФОтч:2.01002");
	Текст.ДобавитьСтроку("ПериодВерОтч:16.01.2004,");
	Текст.ДобавитьСтроку("ПризПериодОтч:"	+ ПризПериодОтч);
	Текст.ДобавитьСтроку("НачПериодОтч:"	+ Формат(НачалоГода(Дата2),"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("КонПериодОтч:"	+ Формат(Дата2,"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("ОКЕИ:" + ОКЕИ); 
	ВарФОтч = ?(Вид = 999 ИЛИ мОтключитьАвтоматическоеУправлениеВариантами = Истина, 999, Вид + 1);
	Текст.ДобавитьСтроку("ВарФОтч:" + Формат(ВарФОтч, "ЧЦ=3; ЧН=; ЧВН="));//Текст.ДобавитьСтроку("ВарФОтч:999");
	Текст.ДобавитьСтроку("КолПокФОтч:");
	Текст.ДобавитьСтроку("###");

	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Текст.ДобавитьСтроку("ОКПО:" + ВРЕГ(СокрЛП(Лев(ОКПО, 8))));
	Текст.ДобавитьСтроку("ОснВидДеят:" + ВРЕГ(СокрЛП(Лев(ОснВидДеят, 254))));
	Текст.ДобавитьСтроку("ОКВЭД:" + ВРЕГ(СокрЛП(Лев(ОКВЭД, 8))));
	Текст.ДобавитьСтроку("ОргПравФорм:" + ВРЕГ(СокрЛП(Лев(ОргПравФорм, 254))));
	Текст.ДобавитьСтроку("ОКОПФ:" + ВРЕГ(СокрЛП(Лев(ОКОПФ, 2))));
	Текст.ДобавитьСтроку("ФормСобств:" + ВРЕГ(СокрЛП(Лев(ФормСобств, 254))));
	Текст.ДобавитьСтроку("ОКФС:" + ВРЕГ(СокрЛП(Лев(ОКФС, 2))));
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка201(Текст = Неопределено) Экспорт
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	//выводим общие сведения информационной части
	//РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , , мСохраненныйДок.ДатаНачала);
	//ВывестиСведенияИнформационнойЧасти(Текст, Орг, СведенияОбОрганизации);
	//ВывестиСведенияИнформационнойЧасти();
	
	//
	////выводим сведения о физ. лицах и блок "описание форм отчетности"
	//ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	ВыгрузитьШапку(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ПроставитьКонцыБлока(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;
	
	// обход ошибки в формате выгрузки
	ТекстВыгрузки = Текст.ПолучитьТекст();
	ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, Символы.ПС + "П000010033004:", Символы.ПС + "П00001003304:");
	ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, Символы.ПС + "П000010034004:", Символы.ПС + "П00001003404:");
	Текст.УстановитьТекст(ТекстВыгрузки);

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей2006Кв4");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки502");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой()
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001405");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010001505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010002005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010003005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010003505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010004005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010007005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010007505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010008005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010008505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010009005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010009505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010010005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010010505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010011005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010011505");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010012005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010013005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010021005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010022005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010023005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010024005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010025005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010031005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010031105");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010041005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010041105");
	//ИменаПоказателейСоЗнакомПлюс.Добавить("П000010092005");
	//ИменаПоказателейСоЗнакомПлюс.Добавить("П000010092105");
	
	ПоказателиОсновногоРаздела = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Если ПоказателиОсновногоРаздела.Свойство(Пок + "_1") Тогда
			НомерСтроки = 1;
			Пока ПоказателиОсновногоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ЗначениеПоказателя < 0 Тогда
					ПоказателиОсновногоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		ИначеЕсли ПоказателиОсновногоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
			ПоказателиОсновногоРаздела.Вставить(Пок, -ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",			"0710005");
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)]);
	Параметры.Вставить("ОтчетГод",		Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Если Параметры.Период = "34" Тогда
		Параметры.Вставить("ВидДок",	Строка(мСохраненныйДок.Вид));
	Иначе
		Параметры.Вставить("ВидДок",	""); //показатель необязательный, перед выгрузкой будет удален
	КонецЕсли;
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",		СокрЛП(Титульный.ОргИНН));
	Параметры.Вставить("КППОрг", 		СокрЛП(Организация.КПП));
	Параметры.Вставить("КодИФНС",		СокрЛП(Организация.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	// различные коды
	Параметры.Вставить("ОКПО",			СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД",			СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОКОПФ",			СокрЛП(Титульный.ОргКодОКОПФ));
	Параметры.Вставить("ОКФС",			СокрЛП(Титульный.ОргКодОКФС));
	Параметры.Вставить("ОКЕИ",			СокрЛП(Титульный.КодЕИ1));
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	Параметры.Вставить("ФорматВывода",	"ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",	СокрЛП(ФИОРук.Фамилия));
	Параметры.Вставить("ИмяРук",		СокрЛП(ФИОРук.Имя));
	Параметры.Вставить("ОтчествоРук",	СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РазложитьФИО(Титульный.ОргБухгалтер);
	Параметры.Вставить("ФамилияБух",	СокрЛП(ФИОБух.Фамилия));
	Параметры.Вставить("ИмяБух",		СокрЛП(ФИОБух.Имя));
	Параметры.Вставить("ОтчествоБух",	СокрЛП(ФИОБух.Отчество));
	
	// телефон
	Параметры.Вставить("ТелОрг", РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(мСохраненныйДок.Организация, мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	Параметры.Вставить("ВерсФорм",					"5.02");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_BUH5");
	
	// формируем ИдФайл на основании значений других параметров
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));

	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "ФормаОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "ФормаОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "ФормаОтчета", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формат выгрузки допускает выгрузку отчетов только за календарный год!", "ФормаОтчета", "ПериодОтчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "ФормаОтчета", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННОрг, Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "ФормаОтчета", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "ФормаОтчета", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя ответственного сотрудника!", "ФормаОтчета", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "ФормаОтчета", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "ФормаОтчета", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.ОКПО) И (СтрДлина(Параметры.ОКПО) < 8 ИЛИ СтрДлина(Параметры.ОКПО) > 10 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКПО)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "ФормаОтчета", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКОПФ!", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКОПФ) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКОПФ!", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКФС!", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКФС) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКФС!", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код по ОКЕИ!", "ФормаОтчета", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКЕИ) <> 3 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКЕИ!", "ФормаОтчета", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на заполнение наименования статьи в непустых строках табличных частей
	Данные = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопСтроки = Новый Структура;
	ДопСтроки.Вставить("П000010003501", Новый Структура("П000010003503, П000010003504, П000010003505, П000010003506"));
	ДопСтроки.Вставить("П000010005101", Новый Структура("П000010005103, П000010005104"));
	ДопСтроки.Вставить("П000010015301", Новый Структура("П000010015303, П000010015304"));
	ДопСтроки.Вставить("П000010016101", Новый Структура("П000010016103, П000010016104"));
	ДопСтроки.Вставить("П000010023001", Новый Структура("П000010023003, П000010023004, П000010023005, П000010023006"));
	ДопСтроки.Вставить("П000010031101", Новый Структура("П000010031103, П000010031104, П000010031105, П000010031106"));
	ДопСтроки.Вставить("П000010041101", Новый Структура("П000010041103, П000010041104, П000010041105, П000010041106"));
	ДопСтроки.Вставить("П000010065301", Новый Структура("П000010065303, П000010065304"));
	ДопСтроки.Вставить("П000010082401", Новый Структура("П000010082403, П000010082404"));
	ДопСтроки.Вставить("П000010084401", Новый Структура("П000010084403, П000010084404"));
	ДопСтроки.Вставить("П000010091101", Новый Структура("П000010091103, П000010091104"));
	ДопСтроки.Вставить("П000010092101", Новый Структура("П000010092103, П000010092104, П000010092105, П000010092106"));
	
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		ИндСтр = 1;
		Пока Данные.Свойство(ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")) Цикл
			Если ПустаяСтрока(Данные[ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")]) Тогда
				Для Каждого СуммаДопСтроки Из ДопСтрока.Значение Цикл
					Если ЗначениеЗаполнено(ЗначениеПериведенноеКЕдиницеИзмерения(Данные[СуммаДопСтроки.Ключ + "_" + Формат(ИндСтр, "ЧГ=")], Параметры)) Тогда
						РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана статья!", "ФормаОтчета", ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ="));
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ИндСтр = ИндСтр + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);//!!!
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	КлючиДляПоискаУзловТЧ = Новый Массив;
	КлючиДляПоискаУзловТЧ.Добавить("П000010004003");
	КлючиДляПоискаУзловТЧ.Добавить("П000010015303");
	КлючиДляПоискаУзловТЧ.Добавить("П000010024003");
	КлючиДляПоискаУзловТЧ.Добавить("П000010065303");
	КлючиДляПоискаУзловТЧ.Добавить("П000010082303");
	КлючиДляПоискаУзловТЧ.Добавить("П000010084303");
	Для Каждого КлючДляПоискаУзлаТЧ Из КлючиДляПоискаУзловТЧ Цикл
		КлючУзел = ДеревоВыгрузки.Строки.Найти(КлючДляПоискаУзлаТЧ, "Ключ", Истина);
		Если КлючУзел <> Неопределено Тогда
			ЗаполнитьАтрибутыУзлаИтогамиПоТЧ(КлючУзел.Родитель.Родитель);
		КонецЕсли;
	КонецЦикла;
	
	КлючиНаименования = Новый Структура;
	КлючиНаименования.Вставить("П000010004001", "Прочие");
	КлючиНаименования.Вставить("П000010024001", "Прочие");
	КлючиНаименования.Вставить("П000010082301", "прочее");
	КлючиНаименования.Вставить("П000010084301", "прочее");
	Для Каждого КлючНаименования Из КлючиНаименования Цикл
		УзелНаименование = ДеревоВыгрузки.Строки.Найти(КлючНаименования.Ключ, "Ключ", Истина);
		Если УзелНаименование <> Неопределено Тогда
			
			// инициализируем наименование статьи
			Если НЕ УзелПуст(УзелНаименование.Родитель) Тогда
				УзелНаименование.Значение = КлючНаименования.Значение;
			КонецЕсли;
			
			// сдвигаем узел в конец
			УзелСтр = УзелНаименование.Родитель;
			Если УзелСтр.Родитель.Строки.Количество() - УзелСтр.Родитель.Строки.Индекс(УзелСтр) > 1 Тогда
				УзелСтр.Родитель.Строки.Сдвинуть(УзелСтр.Родитель.Строки.Индекс(УзелСтр), УзелСтр.Родитель.Строки.Количество() - УзелСтр.Родитель.Строки.Индекс(УзелСтр) - 1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАтрибутыУзлаИтогамиПоТЧ(Узел)
	
	СуммыПоАтрибутам = Новый Структура;
	УзлыВтчНаим = Узел.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаим"));
	Для Каждого УзелВтчНаим Из УзлыВтчНаим Цикл
		Для Каждого СтрАтрибут Из УзелВТчНаим.Строки Цикл
			Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
				ЗначениеАтрибутаЧисло = ЧисловоеЗначение(СтрАтрибут.Значение);
				СуммаПоАтрибуту = ?(СуммыПоАтрибутам.Свойство(СтрАтрибут.Код), СуммыПоАтрибутам[СтрАтрибут.Код], 0);
				СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммаПоАтрибуту + ЗначениеАтрибутаЧисло);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого КлючИЗначение Из СуммыПоАтрибутам Цикл
		АтрибутГоловногоУзлаТЧ = Узел.Строки.Найти(КлючИЗначение.Ключ, "Код");
		Если АтрибутГоловногоУзлаТЧ <> Неопределено Тогда
			АтрибутГоловногоУзлаТЧ.Значение = Формат(КлючИЗначение.Значение, "ЧН=; ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЧисловоеЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				УдалитьУзел(Узел);
			ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
				УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "ФормаОтчета", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "ФормаОтчета", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, Параметры)
	
	Возврат Число(Формат(Значение, Параметры.ФорматВывода));
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда // !!!
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если Параметры.Свойство(ИмяСвойства) Тогда // !!!
						ЗначениеСвойства = Параметры[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, Параметры));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "ФормаОтчета", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "ФормаОтчета", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_BUH5_1_027_00_05_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000100035";
мИдГруппы2  = "П0000100051";
мИдГруппы3  = "П0000100153";
мИдГруппы4  = "П0000100161";
мИдГруппы5  = "П0000100230";
мИдГруппы6  = "П0000100311";
мИдГруппы7  = "П0000100411";
мИдГруппы8  = "П0000100653";
мИдГруппы9  = "П0000100824";
мИдГруппы10 = "П0000100844";
мИдГруппы11 = "П0000100911";
мИдГруппы12 = "П0000100921";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1  = 1;
КолИсхСтрокИдГруппы2  = 3;
КолИсхСтрокИдГруппы3  = 1;
КолИсхСтрокИдГруппы4  = 1;
КолИсхСтрокИдГруппы5  = 1;
КолИсхСтрокИдГруппы6  = 2;
КолИсхСтрокИдГруппы7  = 2;
КолИсхСтрокИдГруппы8  = 1;
КолИсхСтрокИдГруппы9  = 1;
КолИсхСтрокИдГруппы10 = 1;
КолИсхСтрокИдГруппы11 = 3;
КолИсхСтрокИдГруппы12 = 3;

// Структура строк многострочного раздела
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010003501", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("П000010003503", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010003504", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010003505", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010003506", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000010005101", ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("П000010005103", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010005104", ОписаниеТиповЧисло);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000010015301", ОписаниеТиповСтрока);
СтруктураГруппы3.Колонки.Добавить("П000010015303", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000010015304", ОписаниеТиповЧисло);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000010016101", ОписаниеТиповСтрока);
СтруктураГруппы4.Колонки.Добавить("П000010016103", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000010016104", ОписаниеТиповЧисло);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000010023001", ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("П000010023003", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010023004", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010023005", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000010023006", ОписаниеТиповЧисло);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000010031101", ОписаниеТиповСтрока);
СтруктураГруппы6.Колонки.Добавить("П000010031103", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010031104", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010031105", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000010031106", ОписаниеТиповЧисло);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000010041101", ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("П000010041103", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000010041104", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000010041105", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("П000010041106", ОписаниеТиповЧисло);

СтруктураГруппы8 = Новый ТаблицаЗначений;
СтруктураГруппы8.Колонки.Добавить("П000010065301", ОписаниеТиповСтрока);
СтруктураГруппы8.Колонки.Добавить("П000010065303", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("П000010065304", ОписаниеТиповЧисло);

СтруктураГруппы9 = Новый ТаблицаЗначений;
СтруктураГруппы9.Колонки.Добавить("П000010082401", ОписаниеТиповСтрока);
СтруктураГруппы9.Колонки.Добавить("П000010082403", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("П000010082404", ОписаниеТиповЧисло);

СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("П000010084401", ОписаниеТиповСтрока);
СтруктураГруппы10.Колонки.Добавить("П000010084403", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П000010084404", ОписаниеТиповЧисло);

СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("П000010091101", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000010091103", ОписаниеТиповЧисло);
СтруктураГруппы11.Колонки.Добавить("П000010091104", ОписаниеТиповЧисло);

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000010092101", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000010092103", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000010092104", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000010092105", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("П000010092106", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы8, СтруктураГруппы8);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы9, СтруктураГруппы9);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы8, КолИсхСтрокИдГруппы8);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы9, КолИсхСтрокИдГруппы9);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, КолИсхСтрокИдГруппы10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, КолИсхСтрокИдГруппы11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрокИдГруппы12);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "15/11/2005";
//мВерсияФормы = "01/09/2006";
мВерсияФормы = "10/11/2006";

// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710005";

//универсальная выгрузка и попутные
РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
//ОбязРазделов.Добавить("Баланс");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей2006Кв4", "Формат 2.01002", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

НаименованиеОтчетаДляВыгрузки = "ПРИЛОЖЕНИЕ К БУХГАЛТЕРСКОМУ БАЛАНСУ";
КНД = "0710005";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");