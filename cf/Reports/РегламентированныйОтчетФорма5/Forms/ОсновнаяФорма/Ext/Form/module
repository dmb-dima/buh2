// Переменная хранит флаг нажания кнопки фильтра "Показывать только обособленные подразделения".
Перем мФильтрОбособ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()

	Если Месяц(мДатаКонцаПериодаОтчета) = 1 Тогда 
		СтрПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		СтрПериодОтчета = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	КонецЕсли;

	// Покажем период в диалоге
	ЭлементыФормы.НадписьПериодСоставленияОтчета.Заголовок = СтрПериодОтчета;

	КоличествоФорм = РегламентированнаяОтчетность.КоличествоФормСоответствующихВыбранномуПериоду(ЭтаФорма);
	Если КоличествоФорм >= 1 Тогда

		Если КоличествоФорм > 1 Тогда
			ЭлементыФормы.КнопкаВыбораФормы.Доступность = Истина;
		Иначе
			ЭлементыФормы.КнопкаВыбораФормы.Доступность = Ложь;
		КонецЕсли;

		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Истина;

	Иначе
		ЭлементыФормы.КнопкаВыбораФормы.Доступность = Ложь;
		ЭлементыФормы.ОписаниеНормативДок.Значение = "";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Ложь;
	КонецЕсли;

	РегламентированнаяОтчетность.ВыборФормыРегламентированногоОтчетаПоУмолчанию(ЭтаФорма);

КонецПроцедуры // ПоказатьПериод()

// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета.
//
Процедура ИзменитьПериод(Шаг)

	мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг));
	мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);

	ПоказатьПериод();

КонецПроцедуры // ИзменитьПериод()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемОсновнойФормыРегламентиованногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Восстановим список дополнительных организаций, если они были.
	Если мСкопированаФорма <> Неопределено Тогда
		СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
		ГруппаОрганизаций = Неопределено;
		СписокСохранения.Свойство("ГруппаОрганизаций", ГруппаОрганизаций);
		Если ГруппаОрганизаций <> Неопределено Тогда
			мГруппаОрганизаций = ГруппаОрганизаций;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	// Устанваливаем границы периода построения отчета как квартал
	// предшествующий текущему, нарастающим итогом с начала года.
	Если НЕ ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(КонецКвартала(РабочаяДата), -3));
		мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	ПоказатьПериод();

	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			Организация = ОргПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	// здесь отключаем стандартную обработку ПередЗакрытием формы
	// для подавления выдачи запроса на сохранение формы.
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура вызывается по нажатию кнопки "ОК" формы.
//   Инициализирует открытие нужной формы документа.
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопиран. 
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда

			Предупреждение("Форма отчета изменилась, копирование невозможно!");
			Возврат;

			//// очищаем данные скопированного отчета
			//СписокСохранения = Новый Структура();
			//ХранилищеДанных  = Новый ХранилищеЗначения(СписокСохранения);
			//мСохраненныйДок.ДанныеОтчета    = ХранилищеДанных;

		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(РегламентированнаяОтчетность.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст(), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	// устанавливаем дату представления отчета как рабочая дата
	ДатаПодписи                = РабочаяДата;

	ВыбФормаОтчета             = ПолучитьФорму(мВыбраннаяФорма);
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ВыбФормаОтчета);
	ВыбФормаОтчета.РежимВыбора = Ложь;
	ВыбФормаОтчета.Организация = Организация;
	ВыбФормаОтчета.мГруппаОрганизаций = мГруппаОрганизаций;

	ЭтаФорма.Закрыть();

	ВыбФормаОтчета.Открыть();
	ВыбФормаОтчета.Модифицированность = Истина;

КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура вызывается по нажатию кнопки "<" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаПредыдущийПериодНажатие(Элемент)

	ИзменитьПериод(-1);

КонецПроцедуры // КнопкаПредыдущийПериодНажатие()

// Процедура вызывается по нажатию кнопки ">" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаСледующийПериодНажатие(Элемент)

	ИзменитьПериод(1);

КонецПроцедуры // КнопкаСледующийПериодНажатие()

// Процедура вызывается по нажатию кнопки "..." формы.
//   Инициализирует выбор из списка требуемой формы отчета.
//
Процедура КнопкаВыбораФормыНажатие(Элемент)

	ВыбраннаяФорма = РегламентированнаяОтчетность.ВыбратьФормуОтчетаИзДействующегоСписка(ЭтаФорма);
	Если ВыбраннаяФорма <> Неопределено Тогда
		мВыбраннаяФорма = ВыбраннаяФорма;
	КонецЕсли;

КонецПроцедуры // КнопкаВыбораФормыНажатие()

////////////////////////////////////////////////////////////////////////////////
Функция ПолучитьВерсиюФорматаВыгрузки(Знач НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = РабочаяДата;
	КонецЕсли;
		
	Если НаДату > '20090101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия500;
	ИначеЕсли НаДату > '20050101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия201;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФормуДляПериода(НаДату) Экспорт
	
	Для Каждого Строка Из мТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(НаДату)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(НаДату))) Тогда

			Продолжить;
		КонецЕсли;

		мВыбраннаяФорма = Строка.ФормаОтчета;

		Возврат мВыбраннаяФорма;
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	Если мВыбраннаяФорма = Неопределено Тогда
		мВыбраннаяФорма = мТаблицаФормОтчета[0].ФормаОтчета;
	КонецЕсли;
	
	Возврат мВыбраннаяФорма;

КонецФункции

// ОрганизацияНачалоВыбора
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораОрганизаций", ЭтаФорма);
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ОрганизацияОсн", Организация);
	СтруктураНастройки.Вставить("Режим", "Консолидация");

	ФормаВыбора.НачальноеЗначениеВыбора = СтруктураНастройки;
	ФормаВыбора.ОткрытьМодально();
КонецПроцедуры // ОрганизацияНачалоВыбора

// ОрганизацияНачалоВыбораИзСписка
//
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка"));
	РезультатВыбора = ВыбратьИзСписка(СписокОрганизаций, Элемент, ?(НЕ ЗначениеЗаполнено(Организация), Неопределено, СписокОрганизаций.НайтиПоЗначению(Организация)));
	Если РезультатВыбора <> Неопределено Тогда
		Организация = РезультатВыбора.Значение;
		мГруппаОрганизаций.Очистить();
		// Уберем из списка, чтобы исключить дубль организации.
		//КолвоЭлементовКоллекции = мГруппаОрганизаций.Количество();
		//Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		//	ЭлементКоллекции = мГруппаОрганизаций[КолвоЭлементовКоллекции - ОбратныйИндекс];
		//	Если ЭлементКоллекции.Значение = Организация Тогда
		//		мГруппаОрганизаций.Удалить(ЭлементКоллекции);
		//	КонецЕсли;
		//КонецЦикла;
		// Флаг мФильтрОбособ действует только в рамках одной организации, связан с формой
		// выбора организации из списка. При перевоборе организации, флаг очищаем в Неопределено.
		мФильтрОбособ = Неопределено;
	КонецЕсли;
КонецПроцедуры // ОрганизацияНачалоВыбораИзСписка
