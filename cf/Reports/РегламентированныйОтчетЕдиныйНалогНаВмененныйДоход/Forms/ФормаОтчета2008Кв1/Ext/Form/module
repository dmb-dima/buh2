////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел31;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Коэфф. К2 - используется в обработчике, только для возврата к прошлому варианту
Перем мК2;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Список КБК после 2005
Перем мКодыБюджетнойКлассификации2006;

// Справочники
Перем мВидыПД2008;

// Сумма в квадратике на разделе 1
Перем мКБКРаздел1;

// Флаг, необходим при авторасчете раздела 1
Перем мИсключитьЗапускРасчета;

Перем мКодОКАТОРаздел1_1;
Перем мСумНалог1;

Перем мКодОКАТОРаздел1_2;
Перем мСумНалог2;

Перем мКодОКАТОРаздел1_3;
Перем мСумНалог3;

Перем мКодОКАТОРаздел1_4;
Перем мСумНалог4;

Перем мАдресРаздел2;

Перем мОКАТОРаздел2;
Перем мКодОКАТОРаздел31;

// Определим группу переменных задействованных в системе выгрузки в эл. виде.
Перем мМесяц1_1Раздел2;
Перем мМесяц1_2Раздел2;
Перем мМесяц1_3Раздел2;
Перем мМесяц2_1Раздел2;
Перем мМесяц2_2Раздел2;
Перем мМесяц2_3Раздел2;

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;
Перем мОписаниеТиповБулево;

Перем мРежимПечати Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

// Переменная для определения режима работы с отчетом. Без открытия или открыт.
Перем мБезОткрытияФормы Экспорт;


Перем МногострочныеИсключения;
Перем РежимОтладки;
Перем ОбязРазделов Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		УстановитьКоэффициентВРазделе2Декларации();

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("ПерестановкаСтраницЗапрещена", мОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 3.1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КодОКАТОРаздел31";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПерестановкаСтраницЗапрещена         = Ложь; // можно переставлять. а раздел 1 нельзя.

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// ОпределениеМесяцевВФормеОтчета
//
Процедура ОпределениеМесяцевВФормеОтчета()

	Если (мДокументВосстановлен) И (мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	Месяц1 = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -2), "ДФ=ММММ");
	Месяц2 = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -1), "ДФ=ММММ");
	Месяц3 = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММММ");

	мРаздел2.Области.Месяц050.Значение = Месяц1 + " месяц";
	мРаздел2.Области.Месяц060.Значение = Месяц2 + " месяц";
	мРаздел2.Области.Месяц070.Значение = Месяц3 + " месяц";

	мРаздел2.Области.Месяц110.Значение = Месяц1 + " месяц" + Символы.ПС + "(код стр.040 х код стр.050 х код стр.080  х  код стр.090)";
	мРаздел2.Области.Месяц120.Значение = Месяц2 + " месяц" + Символы.ПС + "(код стр.040 х код стр.060 х код стр.080  х  код стр.090)";
	мРаздел2.Области.Месяц130.Значение = Месяц3 + " месяц" + Символы.ПС + "(код стр.040 х код стр.070 х код стр.080  х  код стр.090)";

	Если мСкопированаФорма <> Неопределено Тогда
		ИнициализироватьПеременныеПериодаДляВыгрузки();
		Для каждого Экз Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
			Экз.Данные.Вставить("Месяц1_1Раздел2", мМесяц1_1Раздел2);
			Экз.Данные.Вставить("Месяц1_2Раздел2", мМесяц1_2Раздел2);
			Экз.Данные.Вставить("Месяц1_3Раздел2", мМесяц1_3Раздел2);

			Экз.Данные.Вставить("Месяц2_1Раздел2", мМесяц2_1Раздел2);
			Экз.Данные.Вставить("Месяц2_2Раздел2", мМесяц2_2Раздел2);
			Экз.Данные.Вставить("Месяц2_3Раздел2", мМесяц2_3Раздел2);
			// Тексты в табличном поле.
			Экз.Данные.Вставить("Месяц050", мРаздел2.Области.Месяц050.Значение);
			Экз.Данные.Вставить("Месяц060", мРаздел2.Области.Месяц060.Значение);
			Экз.Данные.Вставить("Месяц070", мРаздел2.Области.Месяц070.Значение);

			Экз.Данные.Вставить("Месяц110", мРаздел2.Области.Месяц110.Значение);
			Экз.Данные.Вставить("Месяц120", мРаздел2.Области.Месяц120.Значение);
			Экз.Данные.Вставить("Месяц130", мРаздел2.Области.Месяц130.Значение);

		КонецЦикла;

		// Форма скопирована.
		// Неободимо проверить, чтобы в разделе 2 коэф. был 1.096, вместо 1.296.
		// Коэф. 1.296 некоторое время применялся.
		//
		//ИзменитьКоэфИПересчитатьИтоги = Ложь;
		//Для каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
		//	Коэф = Стр.Данные.П000020008003;
		//	Если Коэф <> 1.096 Тогда
		//		ИзменитьКоэфИПересчитатьИтоги = Истина;
		//	КонецЕсли;
		//КонецЦикла;

		//Если ИзменитьКоэфИПересчитатьИтоги Тогда
		//	Модифицированность = Истина;
		//	Для каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
		//		ИндексЛиста = мСтруктураМногостраничныхРазделов.Раздел2.Индекс(Стр);
		//		ПоказатьСтраницуМногостраничногоРаздела(ИндексЛиста, "Раздел2", Истина);
		//		Коэф = мРаздел2.Области.П000020008003.Значение;
		//		Если Коэф <> 1.096 Тогда
		//			мРаздел2.Области.П000020008003.Значение = 1.096;

		//			Расчет("Раздел2");
		//			Расчет("Раздел3");
		//			ОбработкаРаздела31ПоСвязиОКАТО(мОКАТОРаздел2);
		//			Расчет("Раздел31");
		//			// Расчет("Раздел1", мОКАТОРаздел2);
		//			Расчет("Раздел1", Неопределено);
		//		КонецЕсли;
		//	КонецЦикла;

		//	Сообщить("Внимание. В декларации изменен корректирующий коэффициент К1.", СтатусСообщения.ОченьВажное);
		//	Сообщить("Итоговые показатели в декларации пересчитаны.", СтатусСообщения.ОченьВажное);

		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОпределениеМесяцевВФормеОтчета()

// Функция суммирует значения показателя по всему набору страниц многостраничного раздела.
//
// Параметры:
//   ИмяПоказателя        - строка, имя показателя;
//   ИмяПоказателяУсловие - строка, имя показателя, по которому строится условие суммирования;
//   Условие              - булево, накладываемое условие
//   ПарамЗначение        - значение параметра при выполнении условия.
//
// Возвращаемое значение:
//   число, сумма значений искомого показателя по всем страницам многостраничного раздела.
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;
	
	// Удалено округление по формату т.к. в отчете оно не нужно... 
	
	ВозвращаемоеЗнач = 0;
	
	// сначала определим имя табличного документа, содержащего показатель
	ИмяСтраницыОсновнойПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Если ИмяСтраницыОсновнойПанели = Неопределено Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыОсновнойПанели, ТаблицаСтраницРаздела) Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;

	// сначала определяем значение показателя по активной странице
	ЗначениеПоказателя = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателя].Значение;

	Если Не ИмяПоказателяУсловие = Неопределено Тогда
		Если ИмяПоказателяУсловие = "ОКАТОРаздел2" Тогда
			ЗначПоказателяУсл = мОКАТОРаздел2;
		Иначе
			ЗначПоказателяУсл = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателяУсловие].Значение;
		КонецЕсли;

		Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
			ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
		// Многостраничный раздел состоит из нескольких страниц.
		// Значение искомого реквизита суммируем по всем страницам.

		Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
			Если СтраницаРаздела.АктивнаяСтраница Тогда
				// по активной странице мы вычислили ранее
				Продолжить;
			КонецЕсли;

			СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

			Если СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Если ИмяПоказателяУсловие = Неопределено Тогда
					ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
				ИначеЕсли СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателяУсловие, ЗначПоказателяУсл) Тогда
					Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
						ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат ВозвращаемоеЗнач;
	
КонецФункции // СуммаПоказателяПоВсемСтраницам

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел1", мКБКРаздел1);

		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел1_1", мКодОКАТОРаздел1_1);
		СтруктураДанныхПоля.Вставить("СумНалог_1", мСумНалог1);

		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел1_2", мКодОКАТОРаздел1_2);
		СтруктураДанныхПоля.Вставить("СумНалог_2", мСумНалог2);

		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел1_3", мКодОКАТОРаздел1_3);
		СтруктураДанныхПоля.Вставить("СумНалог_3", мСумНалог3);

		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел1_4", мКодОКАТОРаздел1_4);
		СтруктураДанныхПоля.Вставить("СумНалог_4", мСумНалог4);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда

		мАдресРаздел2 = СобратьАдресИзТабличногоПоля("АдресРаздел2");
		СтруктураДанныхПоля.Вставить("АдресРаздел2", мАдресРаздел2);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел2", мОКАТОРаздел2);

		СтруктураДанныхПоля.Вставить("Месяц1_1Раздел2", мМесяц1_1Раздел2);
		СтруктураДанныхПоля.Вставить("Месяц1_2Раздел2", мМесяц1_2Раздел2);
		СтруктураДанныхПоля.Вставить("Месяц1_3Раздел2", мМесяц1_3Раздел2);

		СтруктураДанныхПоля.Вставить("Месяц2_1Раздел2", мМесяц2_1Раздел2);
		СтруктураДанныхПоля.Вставить("Месяц2_2Раздел2", мМесяц2_2Раздел2);
		СтруктураДанныхПоля.Вставить("Месяц2_3Раздел2", мМесяц2_3Раздел2);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел31" Тогда
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел31", мКодОКАТОРаздел31);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// СобратьАдресИзТабличногоПоля
//
Функция СобратьАдресИзТабличногоПоля(Знач АдресПриложения2)

	ПочтИндекс = "";

	Для Инд = 1 По 6 Цикл
		//мПриложение2.Области.ПочтИнд1_6
		ПочтИндекс = ПочтИндекс + мРаздел2.Области["Индекс" + Строка(Инд)].Значение;
	КонецЦикла;

	СубъектРФ = мРаздел2.Области["КодРегиона1"].Значение + мРаздел2.Области["КодРегиона2"].Значение;
	Район     = мРаздел2.Области["Район"].Значение;
	Город     = мРаздел2.Области["Город"].Значение;
	НП        = мРаздел2.Области["НаселенныйПункт"].Значение;
	Улица     = мРаздел2.Области["Улица"].Значение;
	Дома      = мРаздел2.Области["Дом"].Значение;
	Корпус    = мРаздел2.Области["Корпус"].Значение;
	Квартира  = мРаздел2.Области["Квартира"].Значение;

	АдресРезультат = СокрЛП(ПочтИндекс) + ","
	                + СокрЛП(СубъектРФ) + ","
	                + СокрЛП(Район) + ","
	                + СокрЛП(Город) + ","
	                + СокрЛП(НП) + ","
	                + СокрЛП(Улица) + ","
	                + СокрЛП(Дома) + ","
	                + СокрЛП(Корпус) + ","
	                + СокрЛП(Квартира);
	Если ПустаяСтрока(СтрЗаменить(АдресРезультат, ",", "")) Тогда
		Возврат "";
	Иначе
		Возврат "643," + АдресРезультат;
	Конецесли;
	
	Возврат АдресРезультат;

КонецФункции // СобратьАдресИзТабличногоПоля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;

		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;

			Если РегламентированнаяОтчетность.ПустоеЗначение(КодПоказателяПоСтруктуре) Тогда
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЗначениеВКвадратах = ?(РегламентированнаяОтчетность.ПустоеЗначение(КодПоказателяПоСтруктуре), Ложь, Истина);

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

				Если ЗначениеВКвадратах Тогда
					Если КодПоказателяПоСтруктуре = "СумНалог" Тогда
						Для Инд = 1 По 4 Цикл
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, "СумНалог" + Строка(Инд) + "_1", "УстановитьЗащиту",,"Раздел1");
						КонецЦикла;
					Иначе
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					КонецЕсли;
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
				КонецЕсли;

			Иначе

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					Если КодПоказателяПоСтруктуре = "СумНалог" Тогда
						Для Инд = 1 По 4 Цикл
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, "СумНалог" + Строка(Инд) + "_1", "СнятьЗащиту",,"Раздел1");
						КонецЦикла;
					Иначе
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					КонецЕсли;
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеВКвадратах Тогда
				Если КодПоказателяПоСтруктуре = "СумНалог" Тогда
					Для Инд = 1 По 4 Цикл
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, "СумНалог" + Строка(Инд) + "_1", "ПроставитьЦветРаскраски",ЦветФона,"Раздел1");
					КонецЦикла;
				Иначе
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				КонецЕсли;
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НомКвартал.Значение = НомерКвартала;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	// Период в заголовке отчета
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "        ";
	ДатаПодписиИП  = "        ";
	ДатаПодписиУпП = "        ";

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	ДатаПодписиИП  = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), ДатаПодписи, "        ");

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргУп.Значение) Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	ДатаРук = Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'");
	ДатаУпП = Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'");
	ДатаИП = Формат(ДатаПодписиИП,   "ДФ = 'ддММгггг'");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(ДатаРук, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп" + НомЯчейки].Значение = Сред(ДатаУпП, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП" + НомЯчейки].Значение = Сред(ДатаИП, НомЯчейки, 1);

	КонецЦикла;

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаРук, "ДатаПодписиРук", Неопределено, "Раздел1", Ложь, Ложь, Истина);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаИП, "ДатаПодписиИП", Неопределено, "Раздел1", Ложь, Ложь, Истина);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаУпП, "ДатаПодписиОргУп", Неопределено, "Раздел1", Ложь, Ложь, Истина);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОКАТО, КодНО, НаимНО, ТипНП, ТелОрганизации, ОКВЭДКвадратикиТочкиРазделения, ";
	КонецЕсли;

	Если Найти(Сведения, "ТипНП") > 0 Тогда
		Сведения = Сведения + "ФИОРук, ФИО";
	Иначе
		Сведения = Сведения + "ФИОРук, ФИО, ТипНП";
	КонецЕсли;

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		// Код окато заполняем только при открытии декларации, через кнопку Обновить
		// код окато не заполняется, т.к. лист раздела 1 многостраничный.

		Если (НЕ мВПрограммеИзмененаОрганизация) И (НЕ мДокументВосстановлен) Тогда
			Если СтрДлина(Результат.ОКАТО) = 11 И ОбщегоНазначения.ТолькоЦифрыВСтроке(Результат.ОКАТО) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО1_", 11, Результат.ОКАТО);
				мКодОКАТОРаздел1_1 = Результат.ОКАТО;
			Иначе
				// Если ОКАТО не соответствует требованиям, запишем пустое значение.
				мКодОКАТОРаздел1_1 = "";
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО1_", 11, "           ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			//Показатель              = КодПоказателяПоСтруктуре;
			//Раздел = ИмяПоляТаблДокумента;
			//Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Показатель);
			//РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел , роПолучитьСмысловуюЧастьИмениЯчейки(КодПоказателяВФорме), 15, Значение, Истина);
			Если ИмяПоляТаблДокумента = "Раздел1" Тогда
				ЗаполнениеЗначенийВКвадратиках(ИмяПоляТаблДокумента);
			КонецЕсли;

		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда

				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	// Включим видимость флажка проверки, по умолчанию - выключено.
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

		// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ВыбТабличноеПоле.Имя);
	ЗаполнениеЗначенийВКвадратиках(ВыбТабличноеПоле.Имя);

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, мБезОткрытияФормы);
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	мРежимПечати = Ложь;
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);


	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
 
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		// По умолчанию включим процедуры проверки.
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КБКРаздел1" Тогда
		Рез = мКБКРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1_1" Тогда
		Рез = мКодОКАТОРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1_2" Тогда
		Рез = мКодОКАТОРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1_3" Тогда
		Рез = мКодОКАТОРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1_4" Тогда
		Рез = мКодОКАТОРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СумНалог_1" Тогда
		Рез = мСумНалог1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СумНалог_2" Тогда
		Рез = мСумНалог2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СумНалог_3" Тогда
		Рез = мСумНалог3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СумНалог_4" Тогда
		Рез = мСумНалог4;
	ИначеЕсли КодПоказателяПоСтруктуре = "АдресРаздел2" Тогда
		Рез = мАдресРаздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел2" Тогда
		Рез = мОКАТОРаздел2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел31" Тогда
		Рез = мКодОКАТОРаздел31;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		мКБКРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1_1" Тогда
		мКодОКАТОРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1_2" Тогда
		мКодОКАТОРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1_3" Тогда
		мКодОКАТОРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1_4" Тогда
		мКодОКАТОРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СумНалог_1" Тогда
		мСумНалог1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СумНалог_2" Тогда
		мСумНалог2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СумНалог_3" Тогда
		мСумНалог3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СумНалог_4" Тогда
		мСумНалог4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "АдресРаздел2" Тогда
		мАдресРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел2" Тогда
		мОКАТОРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел31" Тогда
		мКодОКАТОРаздел31 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц1_1Раздел2" Тогда
		мМесяц1_1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц1_2Раздел2" Тогда
		мМесяц1_2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц1_3Раздел2" Тогда
		мМесяц1_3Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц2_1Раздел2" Тогда
		мМесяц2_1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц2_2Раздел2" Тогда
		мМесяц2_2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Месяц2_3Раздел2" Тогда
		мМесяц2_3Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалог1_", 15, мСумНалог1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалог2_", 15, мСумНалог2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалог3_", 15, мСумНалог3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СумНалог4_", 15, мСумНалог4, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	Страница = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если Страница = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли Страница = "Раздел1" Тогда

		мКБКРаздел1 = "";

		мКодОКАТОРаздел1_1 = "";
		мСумНалог1 = 0;

		мКодОКАТОРаздел1_2 = "";
		мСумНалог2 = 0;

		мКодОКАТОРаздел1_3 = "";
		мСумНалог3 = 0;

		мКодОКАТОРаздел1_4 = "";
		мСумНалог4 = 0;

	ИначеЕсли Страница = "Раздел2" Тогда

		мОКАТОРаздел2 = "";
		ИнициализироватьПеременныеПериодаДляВыгрузки();

	ИначеЕсли Страница = "Раздел31" Тогда
		мКодОКАТОРаздел31 = "";
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// ИнициализироватьПеременныеПериодаДляВыгрузки
//
Процедура ИнициализироватьПеременныеПериодаДляВыгрузки()

	Месяц1 = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -2), "ДФ=ММ");
	Месяц2 = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -1), "ДФ=ММ");
	Месяц3 = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММ");

	// Произведем инициализация переменных хранящие номер месяца по формату выгрузки.
	мМесяц1_1Раздел2 = Месяц1;
	мМесяц1_2Раздел2 = Месяц2;
	мМесяц1_3Раздел2 = Месяц3;

	мМесяц2_1Раздел2 = Месяц1;
	мМесяц2_2Раздел2 = Месяц2;
	мМесяц2_3Раздел2 = Месяц3;

КонецПроцедуры // ИнициализироватьПеременныеПериодаДляВыгрузки

// ВернутьНомерЛистаСЗаданнымКодомОКАТО
// Функция ищет в структуре многостраничных разделов лист раздела 3.1 с заданным кодом ОКАТО.
// Параметры:
//  ОКАТО          - требуемый код ОКАТО
// Возвращаемое значение:
//  Число, номер в таблице многостраничных разделов или значение -1 означает, что не найден лист.
//
Функция ВернутьНомерЛистаСЗаданнымКодомОКАТО(Знач ОКАТО)

	Результат = -1;

	// Сделаем поиск в два захода, 1 ищем соответсвующий ОКАТО, второй, пустой лист код ОКАТО и его можно вернуть.
	Для Инд = 1 По 2 Цикл
		СчетчикПроверенныхЛистов = -1;

		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл
			СчетчикПроверенныхЛистов = СчетчикПроверенныхЛистов + 1;
			// Если найден лист совпадающий по ОКАТО или второй прогон, если лист с пустым ОКАТО, то в него запишем.
			Если (СокрЛП(Стр.Данные.КодОКАТОРаздел31) = СокрЛП(ОКАТО) И Инд = 1)
			 Или (РегламентированнаяОтчетность.ПустоеЗначение(СокрЛП(Стр.Данные.КодОКАТОРаздел31)) И (Инд = 2)) Тогда
				Результат = СчетчикПроверенныхЛистов;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ВернутьНомерЛистаСЗаданнымКодомОКАТО

// ПодготовкаРазделаКЗаполнению
//
Процедура ПодготовкаРазделаКЗаполнению(Раздел)

	ОчиститьТабличноеПоле(Раздел);

	ТаблицаСтраницРаздела = Неопределено;
	ИмяСтраницы = СтрЗаменить(Раздел.Имя, "ПолеТабличногоДокумента", "");
	мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела);
	ИндексСтраницы = 0;

	Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл

		// Пропускаем активную страницу по той причине,
		// что данные активной страницы былы очищены ранее.
		СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			// удаляем дополнительную страницу
			ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;

		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;

	// Удалим варианты заполнения.
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма, ИмяСтраницы);

	// Отобразим статик страницы.
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры // ПодготовкаРазделаКЗаполнению

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто()
	Перем ТаблицаРаздела;

	// Подготовим разделы 1 и 3.1 для автозаполнения.
	// Удаляться страницы многостраничного раздела, кроме активного листа.
	ПодготовкаРазделаКЗаполнению(мРаздел1);
	ПодготовкаРазделаКЗаполнению(мРаздел31);

	// Проставим в раздел 1 единственный КБК.
	Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210502000021000110") Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210502000021000110");
	КонецЕсли;

	// Сохраним и зафиксируем все многостраничных разделы.
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// Создадим вспомогательную таблицу, где сохраним коды ОКАТО из раздела 2.
	ТаблицаОКАТОРаздел2 = Новый ТаблицаЗначений;
	ТаблицаОКАТОРаздел2.Колонки.Добавить("ОКАТО", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11)); // код ОКАТО
	//ТаблицаОКАТОРаздел2.Колонки.Добавить("Стр100", мОписаниеТиповЧислоЕ);           // сумма по строке 100

	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел2 Цикл
		ОКАТОРаздела   = СокрЛП(Стр.Данные.ОКАТОРаздел2);
		НовСтр = ТаблицаОКАТОРаздел2.Добавить();
		НовСтр.ОКАТО  = ОКАТОРаздела;
	КонецЦикла;

	ТаблДанных = ТаблицаОКАТОРаздел2.Скопировать();
	ТаблДанных.Свернуть("ОКАТО");

	// Найдем активную страницу и сохраним её номер, для возращение в исходное состояние в конце процедуры.
	//мСтруктураМногостраничныхРазделов.Свойство("Раздел31", ТаблицаРаздела);
	//НомАктивнойСтраницы = ТаблицаРаздела.Найти(Истина, "АктивнаяСтраница");
	//ИндАктивнаяСтраница = ТаблицаРаздела.Индекс(НомАктивнойСтраницы);

	Для Каждого Стр Из ТаблДанных Цикл

		// Найдем требуемый нам лист раздела 3.1, в случае, если листа с заданным кодом ОКАТО не окажется, возвращено будет -1.
		НомерЛистаСКодомОКАТО = ВернутьНомерЛистаСЗаданнымКодомОКАТО(Стр.ОКАТО);

		Если НомерЛистаСКодомОКАТО < 0 Тогда
			// Если лист не найден, то создадим новый экземпляр раздела 3.1, куда и запишем всю необходимую информацию по расчету.

			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел31");
			ВставитьДополнительнуюСтраницу("Раздел31");

			мКодОКАТОРаздел31 = Стр.ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, мКодОКАТОРаздел31);
			Расчет("Раздел31");
			Расчет("Раздел1");
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел31");
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел1");

		Иначе

			ПоказатьСтраницуМногостраничногоРаздела(НомерЛистаСКодомОКАТО, "Раздел31", Истина);

			мКодОКАТОРаздел31 = Стр.ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, мКодОКАТОРаздел31);
			Расчет("Раздел31");
			Расчет("Раздел1");
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел31");
			РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Раздел1");

			// Отобразим страницу
		КонецЕсли;

	КонецЦикла;

	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто

// ДобавитьРаздел1
//
Процедура ДобавитьРаздел1()

	КБК = мКБКРаздел1;
	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1");
	ВставитьДополнительнуюСтраницу("Раздел1");
	мКБКРаздел1 = КБК;
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, КБК);

КонецПроцедуры // ДобавитьРаздел1

// ПолучитьСуммуНалогаИзРаздела31
// Фунция предназначена для получения суммы налога по коду ОКАТО
// Парметры:
//  ОКАТО          - код ОКАТО
// Возвращаемое значение:
// Число сумма из раздела 3.1 или неопределено, если нет соответствия между ОКАТО из раздела 1 и 3
//
Функция ПолучитьСуммуНалогаИзРаздела31(Знач ОКАТО)

	// Обработаем активный лист
	Если мКодОКАТОРаздел31 = ОКАТО Тогда
		Возврат мРаздел31.Области.П000310004003.Значение;
	Иначе

		Результат = Неопределено;
		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл

			// Пропустим активный лист, т.к. его проверили ранее.
			Если Стр.АктивнаяСтраница Тогда
				Продолжить;
			КонецЕсли;

			Если Стр.Данные = Неопределено Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел31", Ложь);
			КонецЕсли;

			Если Стр.Данные.КодОКАТОРаздел31 = ОКАТО Тогда
				Результат = Стр.Данные.П000310004003;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Возврат ?(Результат = Неопределено, 0, Результат);

	КонецЕсли;

КонецФункции // ПолучитьСуммуНалогаИзРаздела31

// УказанныйКодОКАТОУжеЕстьВРазделе1
// Функция предназначена для проверки уникальности кода ОКАТО в разделе 1
// Параметры:
//  ОКАТО          - код окато
//  НомерИсключения- номер исключения, чтобы не сравнивать с предлагаемым к вводу значением.
// Возвращаеоме значение:
//  Истина         - если переданный код окато уже есть в разделе 1, ложь - если нет.
//
Функция УказанныйКодОКАТОУжеЕстьВРазделе1(Знач ОКАТО, Знач НомерИсключения)

	// проверим активный лист
	Если (мКодОКАТОРаздел1_1 = ОКАТО И НомерИсключения <> "1")
	   Или (мКодОКАТОРаздел1_2 = ОКАТО И НомерИсключения <> "2")
	   Или (мКодОКАТОРаздел1_3 = ОКАТО И НомерИсключения <> "3")
	   Или (мКодОКАТОРаздел1_4 = ОКАТО И НомерИсключения <> "4") Тогда
		Возврат Истина;
	Иначе
		Результат = Ложь;
		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл
			Если Стр.АктивнаяСтраница Тогда
				Продолжить;
			КонецЕсли;

			Если Стр.Данные = Неопределено Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
			КонецЕсли;

			Если (Стр.Данные.КодОКАТОРаздел1_1 = ОКАТО)
			   Или (Стр.Данные.КодОКАТОРаздел1_2 = ОКАТО)
			   Или (Стр.Данные.КодОКАТОРаздел1_3 = ОКАТО)
			   Или (Стр.Данные.КодОКАТОРаздел1_4 = ОКАТО) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;

КонецФункции // УказанныйКодОКАТОУжеЕстьВРазделе1

// ОбработкаРаздела31ПоСвязиОКАТО
// Процедура устанавливает связь между ОКАТО из РАЗДЕЛА 2 и 3.1
// При необходимости добавляет доп. страницу, в случае, если кода окато в разделе 3.1. не найдено.
//
Процедура ОбработкаРаздела31ПоСвязиОКАТО(Знач ОКАТО)

	// Вариант, когда ввденный код окато соответствует коду окато на активной странице отработан
	// через стандартный вызов расчтета с параметром Раздел31
	Если (НЕ ФлажокОтклАвтоРасчет) И (мКодОКАТОРаздел31 <> ОКАТО) Тогда
		// Рассчитаем показатели в разделе 31 от введенного ОКАТО.
		// 1. Найти лист с ОКАТО если есть
		// 2. Если есть, то сделать расчет раздела 31 в нем.
		СовпаденияНайдены = Ложь;
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел31", Ложь);
		КоличествоПустыхЛистовБезКодаОКАТО = 0;
		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл

			Если ПустаяСтрока(СокрЛП(Стр.Данные.КодОКАТОРаздел31)) Тогда
				КоличествоПустыхЛистовБезКодаОКАТО = КоличествоПустыхЛистовБезКодаОКАТО + 1;
			КонецЕсли;

			Если СокрЛП(Стр.Данные.КодОКАТОРаздел31) = СокрЛП(ОКАТО)  Тогда

				Если Стр.АктивнаяСтраница Тогда

					мКодОКАТОРаздел31 = ОКАТО;
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, мКодОКАТОРаздел31);
					// Далее все рассчитает Расчет раздела 3.1.

				Иначе

					П000020010003 = СуммаПоказателяПоВсемСтраницам("П000020010003");
					// Строка 030. Получим налоговую базу из раздела 2, с условием, что код ОКАТО в разделе 2 совпадает с текущим
					// кодом из раздела 3 активной страницы.
					П000020010003_фильтрОКАТО = СуммаПоказателяПоВсемСтраницам("П000020010003", "ОКАТОРаздел2", , ОКАТО);
					Стр.Данные.Вставить("П000310003003", П000020010003_фильтрОКАТО);

					// Строка 040.
					П000310002003 = ?(П000020010003 = 0, 1, П000020010003);
					Стр.Данные.Вставить("П000310004003", ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение * (П000020010003_фильтрОКАТО / П000310002003)));

					// Сохраним в структуре данных
					Стр.Данные.Вставить("КодОКАТОРаздел31", ОКАТО);
					Для Инд = 1 По 11 Цикл
						Стр.Данные.Вставить("ОКАТО31_" + Строка(Инд), Сред(ОКАТО, Инд, 1));
					КонецЦикла;
				КонецЕсли;

				СовпаденияНайдены = Истина;
				// Т.к. в листе 3.1 должны быть только уникальные коды ОКАТО, то больше не ищем.
				Прервать;

			КонецЕсли;

		КонецЦикла;
		// Если совпадений нет, т.е. введен код окато в раздел2, которого нет в 3.1
		// то добавим страницу в раздел 3.1 и её рассчитаем.
		Если (НЕ СовпаденияНайдены) и (КоличествоПустыхЛистовБезКодаОКАТО = 0) Тогда
			// Модифицируем структуру параметров автозаполнения ячеек
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел31");
			мИсключитьЗапускРасчета = Истина; // Отключим расчет при добавлении нового листа.
			ВставитьДополнительнуюСтраницу("Раздел31");
			мИсключитьЗапускРасчета = Ложь;  // Включим расчет при добавлении нового листа.
			мКодОКАТОРаздел31 = ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, мКодОКАТОРаздел31);

		ИначеЕсли (НЕ СовпаденияНайдены) и (КоличествоПустыхЛистовБезКодаОКАТО > 0) Тогда
			// запишем данные в первый же пустой лист где код ОКАТО ПУСТОЙ.

			Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл

				Если ПустаяСтрока(СокрЛП(Стр.Данные.КодОКАТОРаздел31)) Тогда

					Если Стр.АктивнаяСтраница Тогда

						мКодОКАТОРаздел31 = ОКАТО;
						РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, мКодОКАТОРаздел31);
						// Далее все рассчитает Расчет раздела 3.1.

					Иначе

						П000020010003 = СуммаПоказателяПоВсемСтраницам("П000020010003");
						// Строка 030. Получим налоговую базу из раздела 2, с условием, что код ОКАТО в разделе 2 совпадает с текущим
						// кодом из раздела 3 активной страницы.
						П000020010003_фильтрОКАТО = СуммаПоказателяПоВсемСтраницам("П000020010003", "ОКАТОРаздел2", , ОКАТО);
						Стр.Данные.Вставить("П000310003003", П000020010003_фильтрОКАТО);

						// Строка 040.
						П000310002003 = ?(П000020010003 = 0, 1, П000020010003);
						Стр.Данные.Вставить("П000310004003", ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение * (П000020010003_фильтрОКАТО / П000310002003)));

						// Сохраним в структуре данных
						Стр.Данные.Вставить("КодОКАТОРаздел31", ОКАТО);
						Для Инд = 1 По 11 Цикл
							Стр.Данные.Вставить("ОКАТО31_" + Строка(Инд), Сред(ОКАТО, Инд, 1));
						КонецЦикла;
					КонецЕсли;

					// Т.к. в листе 3.1 должны быть только уникальные коды ОКАТО, то больше не ищем.
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаРаздела31ПоСвязиОКАТО

// РасчетРаздела1ПоВсемОКАТО
//
Процедура РасчетРаздела1ПоВсемОКАТО()

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл
		Если Страница.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел31", Ложь);
		КонецЕсли;

		ОКАТОИзРаздела31 = ?(Страница.АктивнаяСтраница, мКодОКАТОРаздел31, Страница.Данные.КодОКАТОРаздел31);

		Если ОКАТОИзРаздела31 <> Неопределено Тогда
			// Пересчитаем раздел 1 для каждого ОКАТО из раздела 3.1, т.к. изменив показатель в любом из разделов сумма влияет на окончательный итог
			// раздела 1.

			Расчет("Раздел1", ОКАТОИзРаздела31);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РасчетРаздела1ПоВсемОКАТО

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", ОснованиеОКАТО = Неопределено) Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Проверим ОКАТО на активном листе раздела 1
		// Важно: в разделе 3.1 всегда должне быть окато уникален
		ИзмененияПрошли = Ложь;

		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);

		// Расчет умеет рассчитывать суммы в зависимости от переданного ему кода ОКАТО. Может быть 2 варианта:
		// 1. С листа раздела 2
		// 2. С листа раздела 3.1 (по умолчанию)
		Если ОснованиеОКАТО = Неопределено Тогда 
			// По умолчанию активное окато раздела 3.1
			// ОснованиеОКАТО = мКодОКАТОРаздел31;
			РасчетРаздела1ПоВсемОКАТО();
			Возврат;
		КонецЕсли;

		Значение = ПолучитьСуммуНалогаИзРаздела31(ОснованиеОКАТО);

		// Проверим в структуре раздела 1 и если находится нужный ОКАТО, та запишем в него данные.
		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл

			НомерСуммы = "";
			Если Стр.Данные.КодОКАТОРаздел1_1 = ОснованиеОКАТО Тогда
				НомерСуммы = "1";
			ИначеЕсли Стр.Данные.КодОКАТОРаздел1_2 = ОснованиеОКАТО Тогда
				НомерСуммы = "2";
			ИначеЕсли Стр.Данные.КодОКАТОРаздел1_3 = ОснованиеОКАТО Тогда
				НомерСуммы = "3";
			ИначеЕсли Стр.Данные.КодОКАТОРаздел1_4 = ОснованиеОКАТО Тогда
				НомерСуммы = "4";
			КонецЕсли;

			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(НомерСуммы) Тогда
				ИзмененияПрошли = Истина;
				// Вставим общую сумму (колонка 9)
				Стр.Данные.Вставить("СумНалог_" + НомерСуммы, Значение);

				// Переведем суммы в тексты и сохраним в квадратиках
				СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
				// Убираем пробелы между группами разрядов числа
				СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";
				Если ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда
					ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку("", 15," ");
				Иначе
					ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки);
					ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеДопСтрока, 15," ");
				КонецЕсли;

				Для Инд = 1 По 15 Цикл
					Стр.Данные.Вставить("СумНалог" + НомерСуммы + "_" + Строка(Инд), Сред(ЗначениеДопСтрока, Инд, 1));
				КонецЦикла;

				Если Стр.АктивнаяСтраница Тогда
					Если ОбновитьПеременныеМодуля("СумНалог_" + НомерСуммы, Значение) Тогда
						РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалог" + НомерСуммы + "_", 15, Значение, Истина);
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		КолвоЛистов = -1;
		// Если изменения не прошли, т.е. не было подходящего кода ОКАТО, то необходимо добавить запись
		Пока (НЕ ИзмененияПрошли) Цикл
			СчЛистов = -1;
			// Анализируем с первой страницы многостраничного раздела 1.
			Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл

				// Увеличим счетчик листов на 1.
				СчЛистов = СчЛистов + 1;

				// Переменная КолвоЛистов - кол-во листов, после вставки новой страницы, если не найдено на прошлом шаге код ОКАТО.
				Если КолвоЛистов > 0 Тогда
					// Дойдем до новой страницы.
					Если СчЛистов < КолвоЛистов Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				НомерСуммы = "";
				Если ПустаяСтрока(Стр.Данные.КодОКАТОРаздел1_1) И (мСумНалог1 = 0) Тогда
					НомерСуммы = "1";
					Если Стр.АктивнаяСтраница Тогда
						мКодОКАТОРаздел1_1 = ОснованиеОКАТО;
						мСумНалог1 = Значение;
					КонецЕсли;
					ИзмененияПрошли = Истина;
				ИначеЕсли ПустаяСтрока(Стр.Данные.КодОКАТОРаздел1_2) И (мСумНалог2 = 0) Тогда
					НомерСуммы = "2";
					Если Стр.АктивнаяСтраница Тогда
						мКодОКАТОРаздел1_2 = ОснованиеОКАТО;
						мСумНалог2 = Значение;
					КонецЕсли;
					ИзмененияПрошли = Истина;
				ИначеЕсли ПустаяСтрока(Стр.Данные.КодОКАТОРаздел1_3) И (мСумНалог3 = 0) Тогда
					НомерСуммы = "3";
					Если Стр.АктивнаяСтраница Тогда
						мКодОКАТОРаздел1_3 = ОснованиеОКАТО;
						мСумНалог3 = Значение;
					КонецЕсли;
					ИзмененияПрошли = Истина;
				ИначеЕсли ПустаяСтрока(Стр.Данные.КодОКАТОРаздел1_4) И (мСумНалог4 = 0) Тогда
					НомерСуммы = "4";
					Если Стр.АктивнаяСтраница Тогда
						мКодОКАТОРаздел1_4 = ОснованиеОКАТО;
						мСумНалог4 = Значение;
					КонецЕсли;
					ИзмененияПрошли = Истина;
				КонецЕсли;

				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(НомерСуммы) Тогда

					Стр.Данные.Вставить("КодОКАТОРаздел1" + "_" + НомерСуммы, ОснованиеОКАТО);
					Для Инд = 1 По 11 Цикл
						Стр.Данные.Вставить("КодОКАТО" + НомерСуммы + "_" + Строка(Инд), Сред(ОснованиеОКАТО, Инд, 1));
					КонецЦикла;

					// Вставим общую сумму (колонка 9)
					Стр.Данные.Вставить("СумНалог_" + НомерСуммы, Значение);

					// Переведем суммы в тексты и сохраним в квадратиках
					СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
					// Убираем пробелы между группами разрядов числа
					СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";
					Если ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда
						ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку("", 15," ");
					Иначе
						ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки);
						ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеДопСтрока, 15," ");
					КонецЕсли;

					Для Инд = 1 По 15 Цикл
						Стр.Данные.Вставить("СумНалог" + НомерСуммы + "_" + Строка(Инд), Сред(ЗначениеДопСтрока, Инд, 1));
					КонецЦикла;

					Если Стр.АктивнаяСтраница Тогда
						РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалог" + НомерСуммы + "_", 15, Значение, Истина);
						РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО" + НомерСуммы + "_", 11, ОснованиеОКАТО);
					КонецЕсли;

					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если НЕ ИзмененияПрошли Тогда
				// Если не нашли пустых показателей, то добавляем новую страницу раздела 1.
				// Одновременно возведем флаг, чтобы расчет не запустился при вставки страницы.
				мИсключитьЗапускРасчета = Истина;
				ДобавитьРаздел1();
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
				мИсключитьЗапускРасчета = Ложь;
				КолвоЛистов = мСтруктураМногостраничныхРазделов.Раздел1.Количество() - 1;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// Вырезка из Письма Минфина от 20.12.2005 № 03-11-05/121

		// Поэтому в налоговых декларациях по единому налогу на вмененный доход, представляемых за первый квартал 2006 года
		// и в последующие отчетные налоговые периоды, значения корректирующего коэффициента К2 могут округляться до третьего знака после запятой.
		К2_Строка90 = мРаздел2.Области.П000020009003.Значение;

		// Январь месяц (код стр.040 х код стр.050 х код  стр.080  х  код стр.090 х код стр.100)
		мРаздел2.Области.П000020011003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020004003.Значение
		                                        * мРаздел2.Области.П000020005003.Значение
		                                        * мРаздел2.Области.П000020008003.Значение
		                                        * ?(К2_Строка90 = 0, 1, К2_Строка90));

		мРаздел2.Области.П000020012003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020004003.Значение
		                                        * мРаздел2.Области.П000020006003.Значение
		                                        * мРаздел2.Области.П000020008003.Значение
		                                        * ?(К2_Строка90 = 0, 1, К2_Строка90));

		мРаздел2.Области.П000020013003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020004003.Значение
		                                        * мРаздел2.Области.П000020007003.Значение
		                                        * мРаздел2.Области.П000020008003.Значение
		                                        * ?(К2_Строка90 = 0, 1, К2_Строка90));

		// Налоговая база по строке 100
		мРаздел2.Области.П000020010003.Значение = мРаздел2.Области.П000020011003.Значение
		                                        + мРаздел2.Области.П000020012003.Значение
		                                        + мРаздел2.Области.П000020013003.Значение;

		мРаздел2.Области.П000020014003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020010003.Значение * 15 / 100);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		мРаздел3.Области.П000030001003.Значение = СуммаПоказателяПоВсемСтраницам("П000020014003");
		мРаздел3.Области.П000030004003.Значение = Мин((мРаздел3.Области.П000030001003.Значение - ОкруглитьЧислоПоФормату(0.5 * мРаздел3.Области.П000030001003.Значение)), ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030003003.Значение));
		мРаздел3.Области.П000030005003.Значение = Макс(0, мРаздел3.Области.П000030001003.Значение - мРаздел3.Области.П000030004003.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда

		П000020010003 = СуммаПоказателяПоВсемСтраницам("П000020010003");
		// Произведем расчет внутри структуры многостраничного документа раздел 31 на основании раздела 2.

		Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл

			Если Стр.Данные = Неопределено Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел31", Ложь);
			КонецЕсли;

			Стр.Данные.Вставить("П000310002003", П000020010003);

			// Строка 040.
			П000310002003 = ?(П000020010003 = 0, 1, П000020010003);
			Стр.Данные.Вставить("П000310004003", ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение * (Стр.Данные.П000310003003 /П000310002003)));

		КонецЦикла;

		// Запишем на активную страницу табличного документа.
		мРаздел31.Области.П000310002003.Значение = П000020010003;

		// Строка 030. Получим налоговую базу из раздела 2, с условием, что код ОКАТО в разделе 2 совпадает с текущим
		// кодом из раздела 3 активной страницы.
		П000020010003_фильтрОКАТО = СуммаПоказателяПоВсемСтраницам("П000020010003", "ОКАТОРаздел2", , мКодОКАТОРаздел31);
		мРаздел31.Области.П000310003003.Значение = П000020010003_фильтрОКАТО;

		// Строка 040.
		П000310002003 = ?(П000020010003 = 0, 1, П000020010003);
		мРаздел31.Области.П000310004003.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005003.Значение * (мРаздел31.Области.П000310003003.Значение /П000310002003));

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел2");
		Расчет("Раздел3");
		Расчет("Раздел31");
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	// Вызывается только для раздела 2.
	Если ИмяСтраницы = "Раздел2" Тогда
		УстановитьКоэффициентВРазделе2Декларации();
	КонецЕсли;

	Расчет("");
КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста

// УстановитьКоэффициентВРазделе2Декларации
//
Процедура УстановитьКоэффициентВРазделе2Декларации(ВыводитьСообщение = Ложь)
	//На 2006 год коэффициент-дефлятор, который теперь называется К1,
	//установлен в 1,132.
	//Так как порядок расчета налога изменен, новая декларция будет 
	//уже за 1 квартал 2006 года.
	Если Год(мДатаНачалаПериодаОтчета) = 2006 Тогда
		мРаздел2.Области.П000020008003.Значение = 1.132;
	ИначеЕсли Год(мДатаНачалаПериодаОтчета) = 2007 Тогда
		мРаздел2.Области.П000020008003.Значение = 1.096;
	ИначеЕсли Год(мДатаНачалаПериодаОтчета) = 2008 Тогда
	// Приказ Минэкономразвития от 19.11.2007 № 401
		мРаздел2.Области.П000020008003.Значение = 1.081;
	ИначеЕсли Год(мДатаНачалаПериодаОтчета) = 2009 Тогда
	//Приказ Минэкономразвития России от 12 ноября 2008 г. N 392
		мРаздел2.Области.П000020008003.Значение = 1.148;
	Иначе
		Если ВыводитьСообщение Тогда
			Сообщить("Коэффициент-дефлятор на " + Формат(Год(мДатаНачалаПериодаОтчета), "ЧГ=") + " год не установлен.");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьКоэффициентВРазделе2Декларации

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	мБезОткрытияФормы = БезОткрытияФормы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		// Получаем списки кодов КБК и КБК 2005
		ЗагрузитьПоказателиИзМакета("КодыКБК");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		ЗагрузитьПоказателиИзМакета("ВидыПД2008");
		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;
	мИсключитьЗапускРасчета = Ложь;
	мК2 = 0;

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1     = ЭлементыФормы.ПолеТабличногоДокументаРаздел1; 
	мРаздел2     = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3     = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел31    = ЭлементыФормы.ПолеТабличногоДокументаРаздел31;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе

			Если НЕ БезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;

			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мТитульный.Области.ВидДок.Значение = "1";

			УстановитьКоэффициентВРазделе2Декларации(Истина);
			мТитульный.Области.НалогПериод.Значение = "3"; // всегда! в этой декларации
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВывода();

			// По умолчанию, коэф. К2 устанавливаем равным 1.
			мРаздел2.Области.П000020009003.Значение = 1;

			// Добавим код КБК в раздел 1.
			Если ОбновитьПеременныеМодуля("КБКРаздел1", "18210502000021000110") Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК", 20, "18210502000021000110");
			КонецЕсли;

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	ОпределениеМесяцевВФормеОтчета();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			Если Лев(РазделВМакете, 6) = "ВидыПД" Тогда
				БазоваяДоходность = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			КонецЕсли;

			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
					НовСтрока.Код= КодПоказателя;
					НовСтрока.Название = Название;
				ИначеЕсли РазделВМакете = "ВидыПД2008" Тогда
					НовСтрока = мВидыПД2008.Добавить();
					НовСтрока.Код= КодПоказателя;
					НовСтрока.Название = Название;
					НовСтрока.БазоваяДоходность = БазоваяДоходность;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчетСучетомМногостраничности()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчетСучетомМногостраничности()
	Перем ТаблицаСтраницРаздела;
	// запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	//
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл

			ВыводНаПечать = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
			Если ВыводНаПечать = 1 Тогда
				ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела) Тогда
					Расчет(ИмяДляРасчета);
				Иначе
					// Обновить
					Для ИндДляОбнавления = 0 По ТаблицаСтраницРаздела.Количество()-1 Цикл
						ПоказатьСтраницуМногостраничногоРаздела(ИндДляОбнавления, ИмяДляРасчета, Истина);
						Расчет(ИмяДляРасчета);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;

	Модифицированность = Истина;
	Расчет(); // Общий расчет итоговый, все разделы и суммы со всех листов.

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчетСучетомМногостраничности (РасчетныйЛист = "")

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПолеТабличногоДокументаРаздел31Выбор
//
Процедура ПолеТабличногоДокументаРаздел31Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Найти(Область.Имя, "ОКАТО31") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение1 = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КодОКАТОРаздел31");

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел31", "ОКАТО31_", СокрЛП(ПервоначальноеЗначение1), 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);

		Если Результат.ЗначениеВведено Тогда
			// Возвратим начальное значение, которое было на листе.
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, ПервоначальноеЗначение1);
			// Вновь введенное значение кода ОКАТО.
			ПервоначальноеЗначение = Результат.Значение;

			НайденДубликат = Ложь;
			Если (НЕ ФлажокОтклАвтоРасчет) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ПервоначальноеЗначение)) Тогда
				Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел31 Цикл

					Если Стр.Данные = Неопределено Тогда
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел31", Ложь);
					КонецЕсли;

					Если Стр.АктивнаяСтраница Тогда
						Продолжить;
					КонецЕсли;

					Если Стр.Данные.КодОКАТОРаздел31 = ПервоначальноеЗначение Тогда
						Сообщить("В разделе 3.1 лист с кодом ОКАТО " + ПервоначальноеЗначение + " уже введен.", СтатусСообщения.Внимание);
						НайденДубликат = Истина;
						Прервать;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			Если НайденДубликат Тогда
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("КодОКАТОРаздел31", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел31", "ОКАТО31_", 11, ПервоначальноеЗначение);
				Расчет("Раздел31");
				Расчет("Раздел1");
				Модифицированность = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел31Выбор

// КнопкаПерейтиНаСтраницуРаздел1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц("Раздел1");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел1Нажатие

// КнопкаПерейтиНаСтраницуРаздел2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц("Раздел2");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел2Нажатие

// КнопкаПерейтиНаСтраницуРаздел31Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел31Нажатие(Элемент)
	ОткрытьФормуСпискаДопСтраниц("Раздел31");
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел31Нажатие

// КнопкаУдалитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
	УдалитьДополнительнуюСтраницу("Раздел1");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1Нажатие

// КнопкаУдалитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)

	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2");
	УдалитьДополнительнуюСтраницу("Раздел2");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел2Нажатие

// КнопкаУдалитьДопСтраницуРаздел31Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел31Нажатие(Элемент)

	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел31");
	УдалитьДополнительнуюСтраницу("Раздел31");

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел31Нажатие

// КнопкаДобавитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)

	ДобавитьРаздел1();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1Нажатие

// КнопкаДобавитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)

	К1 = мРаздел2.Области.П000020008003.Значение;
	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
	ВставитьДополнительнуюСтраницу("Раздел2");
	мРаздел2.Области.П000020008003.Значение = К1;

	// По умолчанию, коэф. К2 устанавливаем равным 1.
	мРаздел2.Области.П000020009003.Значение = 1;

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел2Нажатие

// КнопкаДобавитьДопСтраницуРаздел31Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел31Нажатие(Элемент)

	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел31");
	ВставитьДополнительнуюСтраницу("Раздел31");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел31Нажатие

// КнопкаПредыдущаяСтраницаРаздел1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1Нажатие

// КнопкаПредыдущаяСтраницаРаздел2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2Нажатие

// КнопкаСледующаяСтраницаРаздел1Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1Нажатие

// КнопкаСледующаяСтраницаРаздел2Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел2Нажатие

// КнопкаПредыдущаяСтраницаРаздел31Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел31Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел31");

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел31Нажатие

// КнопкаСледующаяСтраницаРаздел31Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел31Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел31");

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел31Нажатие

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	СохранитьДеревоСтраницОтчета();
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// ИзменитьКБКНаВсехСтраницахРаздела1
// Процедура изменяет структуру многостраничного раздела 1, устанавливая показатель КБК
// равному переданному значению
// Параметры:
//  КБК            - код бюджетной классификации
//
Процедура ИзменитьКБКНаВсехСтраницахРаздела1(Знач КБК)

	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Раздел1 Цикл

		Для Инд = 1 По 20 Цикл
			Стр.Данные.Вставить("КБК" + Строка(Инд), Сред(КБК, Инд, 1));
		КонецЦикла;

		Стр.Данные.Вставить("КБКРаздел1", КБК);

	КонецЦикла;

КонецПроцедуры // ИзменитьКБКНаВсехСтраницахРаздела1

// Процедура - обработчик события "Выбор" поля табличного документа на странице "Раздел 1"
// основной панели формы. Для ячеек, содержащих сумму акциза к уплате (строки по коду 030),
// выдает стандартный диалог для ввода суммы акциза.
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Лев(Область.Имя, 8) = "СумНалог") И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Номер = Сред(Область.Имя, 9, 1);
		ТекЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("СумНалог_" + Номер);
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СумНалог" + Номер + "_", ТекЗначение, 17, 2, Истина, "Введите сумму", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);

		Если Результат.ЗначениеВведено Тогда
			ТекЗначение = Результат.Значение;
			Рез = ОбновитьПеременныеМодуля("СумНалог_" + Номер, ТекЗначение);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Лев(Область.Имя, 3) = "КБК" Тогда
		СтандартнаяОбработка = Ложь;

		НачЗначение = мКБКРаздел1;

		Если Год(ДатаПодписи) >= 2006 Тогда
			ПоисковаяТаблица = мКодыБюджетнойКлассификации2006;
		КонецЕсли;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КБК", НачЗначение, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ПоисковаяТаблица, Неопределено,СтандартнаяОбработка, 20);

		Если Результат.ЗначениеВведено Тогда
			СтандартнаяОбработка = Ложь;
			мКБКРаздел1 = Результат.Значение;
			ИзменитьКБКНаВсехСтраницахРаздела1(мКБКРаздел1);
			Модифицированность = Истина;
		Конецесли;

	ИначеЕсли Лев(Область.Имя, 8) = "КодОКАТО" Тогда

		СтандартнаяОбработка = Ложь;
		Номер = Сред(Область.Имя, 9, 1);
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("КодОКАТОРаздел1_" + Номер);

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КодОКАТО" + Номер + "_", СокрЛП(ПервоначальноеЗначение), 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);

		Если Результат.ЗначениеВведено Тогда

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО" + Номер + "_", 11, ПервоначальноеЗначение);
			// Получим новое значение.
			ПервоначальноеЗначение = Результат.Значение;

			Если (НЕ ФлажокОтклАвтоРасчет) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ПервоначальноеЗначение)) Тогда
				// Проверим, есть ли уже введенный код ОКАТО в разделе 1, чтобы не допустить дубликатов

				Если УказанныйКодОКАТОУжеЕстьВРазделе1(ПервоначальноеЗначение, Номер) Тогда
					Сообщить("В разделе 1 лист с кодом ОКАТО " + ПервоначальноеЗначение + " уже введен.", СтатусСообщения.Информация);
					Возврат;
				КонецЕсли;

			КонецЕсли;

			Если ОбновитьПеременныеМодуля("КодОКАТОРаздел1_" + Номер, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО" + Номер + "_", 11, ПервоначальноеЗначение);

				Если (НЕ ФлажокОтклАвтоРасчет) Тогда
					СуммаИзРаздела31 = ПолучитьСуммуНалогаИзРаздела31(ПервоначальноеЗначение);

					Если СуммаИзРаздела31 <> Неопределено Тогда
						Если ОбновитьПеременныеМодуля("СумНалог_" + Номер, СуммаИзРаздела31) Тогда
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалог" + Номер + "_", 15, СуммаИзРаздела31, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Модифицированность = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчетСучетомМногостраничности();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчетСучетомМногостраничности();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2ПриИзменении(Элемент)

	Расчет("Раздел2");
	Расчет("Раздел3");
	ОбработкаРаздела31ПоСвязиОКАТО(мОКАТОРаздел2);
	Расчет("Раздел31");
	// Расчет("Раздел1", мОКАТОРаздел2);
	// Перерассчитаем все коды ОКАТО
	Расчет("Раздел1", Неопределено);

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриИзменении()

// ПолеТабличногоДокументаРаздел2П000020009003ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел2П000020009003ПриИзменении(Элемент)

	Если НЕ (Элемент.Значение >= 0.005 И Элемент.Значение <= 1) Тогда
		Сообщить("С 1 января 2006 года значения корректирующего коэффициента К2 могут устанавливаться в пределах от 0,005 до 1 включительно.", СтатусСообщения.Важное);
		Элемент.Значение = мК2; // Возвратим назад значение, которое было.
	Иначе

		мК2 = Элемент.Значение;

		Расчет("Раздел2");
		Расчет("Раздел3");
		ОбработкаРаздела31ПоСвязиОКАТО(мОКАТОРаздел2);
		Расчет("Раздел31");
		// Расчет("Раздел1", мОКАТОРаздел2);
		// Перерассчитаем все коды ОКАТО
		Расчет("Раздел1", Неопределено);


	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2П000020009003ПриИзменении

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3ПриИзменении(Элемент)

	Расчет("Раздел3");
	Расчет("Раздел31");
	Расчет("Раздел1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриИзменении()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Лев(Область.Имя, 19) = "КодВидаДеятельности" Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мРаздел2.Области.КодВидаДеятельности1.Значение + мРаздел2.Области.КодВидаДеятельности2.Значение;

		Если мАвтоВыборКодов Тогда

			СтруктураКонтроля = Новый Структура;
			СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
			СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 2);

			Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
											   , "Раздел2"                   // Название раздела.
											   , "КодВидаДеятельности"       // Имя ячейки для записи.
											   , СокрЛП(ПервоначальноеЗначение) // Первоначальное значение.
											   , 2                          // РазмерностьЦ - возможная длинна ИННа.
											   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
											   , Ложь                       // Это сумма?
											   , "Введите код вида деятельности" // Текст ввода.
											   , ""                         // Текст выбора из таблицы значений.
											   , Неопределено               // Таблица выбора значений.
											   , Неопределено               // Строка доп. ввода.
											   , СтандартнаяОбработка       // Стандартная обработка.
											   , 2                          // Кол-во квадратиков, если в квадратах
											   ,                            // Колонка поиска, если ТаблицаЗначений
											   , СтруктураКонтроля          // Структура требований ручного ввода
											   );

			Если Результат.ЗначениеВведено Тогда
				Если ПустаяСтрока(Результат.Значение) Тогда
					мРаздел2.Области.П000020004003.Значение = 0;
					мРаздел2.Области.КодВидаДеятельности1.Значение = "";
					мРаздел2.Области.КодВидаДеятельности2.Значение = "";
				КонецЕсли;
			КонецЕсли;

		Иначе

			Если Год(мДатаНачалаПериодаОтчета) >= 2008 Тогда
				ТаблВыбора = мВидыПД2008;
			КонецЕсли;

			НайденнаяСтрока = ТаблВыбора.Найти(ПервоначальноеЗначение, "Код");

			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = ТаблВыбора.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
			Иначе
				Результат = ТаблВыбора.ВыбратьСтроку("Выбор кода");
			КонецЕсли;

			Если Результат <> Неопределено Тогда
				мРаздел2.Области.КодВидаДеятельности1.Значение = Сред(Результат.Получить(0), 1 , 1);
				мРаздел2.Области.КодВидаДеятельности2.Значение = Сред(Результат.Получить(0), 2 , 1);
				БазоваяДоходность = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Результат.Получить(2)), Число(Результат.Получить(2)), 0);
				мРаздел2.Области.П000020004003.Значение = БазоваяДоходность;
				Модифицированность = Истина;

				Расчет("Раздел2");
				Расчет("Раздел3");
				Если НЕ ПустаяСтрока(мОКАТОРаздел2) Тогда
					ОбработкаРаздела31ПоСвязиОКАТО(мОКАТОРаздел2);
				КонецЕсли;
				Расчет("Раздел31");
				// Пересчитать раздел1 для всех ОКАТО, т.к. цифра сказывается на итоги по всем кодам.
				Расчет("Раздел1", Неопределено);

			КонецЕсли;

		КонецЕсли; // Иначе

	ИначеЕсли (Найти(Область.Имя, "Индекс") > 0)
	   Или (Область.Имя = "Регион")
	   Или (Область.Имя = "Район")
	   Или (Область.Имя = "Город")
	   Или (Область.Имя = "КодРегиона1")
	   Или (Область.Имя = "КодРегиона2")
	   Или (Область.Имя = "НаселенныйПункт")
	   Или (Область.Имя = "Улица")
	   Или (Область.Имя = "Дом")
	   Или (Область.Имя = "Корпус")
	   Или (Область.Имя = "Квартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		Инд1 = мРаздел2.Области.Индекс1.Значение
		   + мРаздел2.Области.Индекс2.Значение
		   + мРаздел2.Области.Индекс3.Значение
		   + мРаздел2.Области.Индекс4.Значение
		   + мРаздел2.Области.Индекс5.Значение
		   + мРаздел2.Области.Индекс6.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", Инд1);

		СтруктураАдресныхДанных.Вставить("Регион", мРаздел2.Области.КодРегиона1.Значение
		   + мРаздел2.Области.КодРегиона2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мРаздел2.Области.Регион.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мРаздел2.Области.Район.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мРаздел2.Области.Город.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мРаздел2.Области.НаселенныйПункт.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мРаздел2.Области.Улица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мРаздел2.Области.Дом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мРаздел2.Области.Корпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мРаздел2.Области.Квартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "Индекс", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "КодРегиона", 2, Регион);

			мРаздел2.Области.Регион.Значение = НазваниеРегиона;
			мРаздел2.Области.Район.Значение = Район;
			мРаздел2.Области.Город.Значение = Город;
			мРаздел2.Области.НаселенныйПункт.Значение = НаселенныйПункт;
			мРаздел2.Области.Улица.Значение = Улица;

			мРаздел2.Области.Дом.Значение = Дом;
			мРаздел2.Области.Корпус.Значение = Корпус;
			мРаздел2.Области.Квартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "КодОКАТОРаздел2") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени("ОКАТОРаздел2");

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел2", "КодОКАТОРаздел2_", СокрЛП(ПервоначальноеЗначение), 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);

		Если Результат.ЗначениеВведено Тогда

			ПервоначальноеЗначение = Результат.Значение;
			Если ОбновитьПеременныеМодуля("ОКАТОРаздел2", ПервоначальноеЗначение) Тогда

				Расчет("Раздел2");
				Расчет("Раздел3");
				Если НЕ ПустаяСтрока(ПервоначальноеЗначение) Тогда
					ОбработкаРаздела31ПоСвязиОКАТО(ПервоначальноеЗначение);
				КонецЕсли;
				Расчет("Раздел31");

				// Расчет("Раздел1", мОКАТОРаздел2);
				// Рассчитаем раздел для всех кодов ОКАТО
				Расчет("Раздел1", Неопределено);

				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаТитульныйВыбор
// обработчик события "Выбор" на Титульном листе декларации
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если (Найти(ОбластьИмя, "КодИМНС") > 0) Или (Найти(ОбластьИмя, "ОргИМНС") > 0) Тогда
		РегламентированнаяОтчетность.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный");
		ПроставитьСведенияОПредставителеОрганизации();
		// Проставим/или очистим дату в разделах, от Представителя
		ЗаполнитьДатуВЯчейках();
	ИначеЕсли Найти(ОбластьИмя, "ОКВЭД") > 0 Тогда
		РегламентированнаяОтчетность.УстановитьКодОКВЭДНаТитульномЛисте(ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета()

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",   ОписаниеТиповСтрока50 );
		

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Если мСохраненныйДок = Неопределено Тогда
		Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргИНН = Орг.ИНН;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг) Тогда
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РабочаяДата >= '20080101' И ПустаяСтрока(ОргУП) И ПустаяСтрока(ОргДиректор) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество руководителя!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	УпПред = ПоказателиТитульный.ОргУп;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20))); 
	ПризнВидаДок = Число(ПоказателиТитульный.ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	НомерПериодОтч = СокрЛП(ПоказателиТитульный.НомКвартал);
	ОКВЭД = СокрЛП(ПоказателиТитульный.ОКВЭД1 + ПоказателиТитульный.ОКВЭД2)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД3 + ПоказателиТитульный.ОКВЭД4)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД5 + ПоказателиТитульный.ОКВЭД6);
	ОКВЭД = СтрЗаменить(СокрЛП(СтрЗаменить(ОКВЭД, ".", " ")), " ", ".");
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ОКВЭД:"  + ?(ОКВЭД = "", "-", СокрЛП(ОКВЭД)));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("УпПред:" + СокрЛП(РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред)));
		//Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ПоказателиТитульный.ДокументПредставителя), "-", СокрЛП(Лев(ВРЕГ(СокрЛП(ПоказателиТитульный.ДокументПредставителя)), 120))));
		//КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ОКВЭД:"  + ?(ОКВЭД = "", "-", СокрЛП(ОКВЭД)));
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("УпПред:" + СокрЛП(РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред)));
		//Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ПоказателиТитульный.ДокументПредставителя), "-", СокрЛП(Лев(ВРЕГ(СокрЛП(ПоказателиТитульный.ДокументПредставителя)), 120))));
		//КонецЕсли;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00005");
	Текст.ДобавитьСтроку("ПериодВерОтч:09.04.2007,05.02.2009");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:3");
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерПериодОтч);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					ном = ном + 1;
				КонецЦикла;
				~ВыходИзДвойногоЦикла_:
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦиклаВ:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_В:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Возврат СтатусПроверки <> 1;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах() И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если Организация = Неопределено Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь);
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	КолСтрок = Текст.КоличествоСтрок();
	КолП000010001000 = 0;
	Для Инд = 0 По КолСтрок - 1 Цикл
		Если Текст.КоличествоСтрок() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекСтрока = Текст.ПолучитьСтроку(Инд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П000010001000" Тогда
			КолП000010001000 = КолП000010001000 + 1;
			Если КолП000010001000 > 1 Тогда
				Текст.УдалитьСтроку(Инд);
				Текст.УдалитьСтроку(Инд);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

// ПроверитьСоотношенияПоказателей
// Функция перенаправляет вызовы от обработки соотношений.
//
Функция ПроверитьСоотношенияПоказателей(НазваниеОбработки, ОбъектКС, СтруктураПараметров) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	Результат = СтруктураРезультата;

	Если НазваниеОбработки = "ПроверкаРаздела1" Тогда
		Результат = ПроверкаРаздела1(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаРаздела31" Тогда
		Результат = ПроверкаРаздела31(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаРаздела2" Тогда
		Результат = ПроверкаРаздела2(ОбъектКС, СтруктураПараметров);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьСоотношенияПоказателей

// ПроверкаРаздела1
//
Функция ПроверкаРаздела1(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	Строка030Текст = "Сумма единого налог, подлежащая уплате в бюджет за налоговый период (Раздел 1, строка 030)";
	// Соберем информацию о разделе 1 в единую таблицу.
	ТаблРаздел1 = Новый ТаблицаЗначений;
	ТаблРаздел1.Колонки.Добавить("ОКАТО1"); // Код ОКАТО 020
	ТаблРаздел1.Колонки.Добавить("Сумма1"); // Сумма уплаты  030
	ТаблРаздел1.Колонки.Добавить("ОКАТО2");
	ТаблРаздел1.Колонки.Добавить("Сумма2");
	ТаблРаздел1.Колонки.Добавить("ОКАТО3");
	ТаблРаздел1.Колонки.Добавить("Сумма3");
	ТаблРаздел1.Колонки.Добавить("ОКАТО4");
	ТаблРаздел1.Колонки.Добавить("Сумма4");
	// Таблица для определения уникальности в разделе 1 кодов ОКАТО.
	ТаблРаздел1Вспомог = Новый ТаблицаЗначений;
	ТаблРаздел1Вспомог.Колонки.Добавить("ОКАТО");
	ТаблРаздел1Вспомог.Колонки.Добавить("Колво");
	ТаблРаздел1Вспомог.Колонки.Добавить("НомерПозицииНаЛисте");
	ТаблРаздел1Вспомог.Колонки.Добавить("НомерЭкземпляраЛиста");

	// Создадим таблицу раздела 3.
	ТаблРаздел31 = Новый ТаблицаЗначений;
	ТаблРаздел31.Колонки.Добавить("КодОКАТОРаздел31");
	ТаблРаздел31.Колонки.Добавить("П000310002003");
	ТаблРаздел31.Колонки.Добавить("П000310003003");
	ТаблРаздел31.Колонки.Добавить("П000310004003");
	ТаблРаздел31.Колонки.Добавить("НомерЭкземпляра");

	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		Док = Стр.СохраненныйДок;
		ОКАТОПусто = Ложь;
		// Собираем данные раздела 1.
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			НовСтр = ТаблРаздел1.Добавить();
			Для Инд = 1 По 4 Цикл
				Счетчик = Строка(Инд);
				ОКАТО020 = Раздел.Данные["КодОКАТОРаздел1_" + Счетчик];
				Сумма030 = Раздел.Данные["СумНалог_" + Счетчик];
				НовСтр["ОКАТО" + Счетчик] = ОКАТО020;
				НовСтр["Сумма" + Счетчик] = Сумма030;
				Если ПустаяСтрока(ОКАТО020) Тогда
					ОКАТОПусто = Истина;
				Иначе
					Доп = ТаблРаздел1Вспомог.Добавить();
					Доп.ОКАТО = ОКАТО020;
					Доп.Колво = 1;
					Доп.НомерПозицииНаЛисте = Счетчик;
					Доп.НомерЭкземпляраЛиста = ТаблРаздел1.Количество();

					// Осуществим проверку, чтобы в разделе не было не заполненны кодов ОКАТО
					Если ОКАТОПусто Тогда
						// Код окато заполнены не попорядку, есть заполненный, потом пустой, потом заполненный. Регистрируем ошибку.
						ТекстСоотношений = "В разделе 1, последовательно должны быть заполнены строки 020 и 030.";
						Расшифровка = "";
						Описание = "Найдены пустые строки 020 раздела 1 между заполненными данными. Раздел 1, лист № " + Формат(ТаблРаздел1.Количество());
						ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);

						// Регистрируем формулу
						ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден пустой код ОКАТО");
						ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТО" + ?(Инд = 1, "4", Строка(Инд - 1)) + "_1"
						                                                   , "Код ОКАТО (строка 020)"
						                                                   , ""
						                                                   , ""
						                                                   , Стр.СсылкаНаРО
						                                                   , "Раздел1"
						                                                   , Неопределено
						                                                   , ?(Инд = 1, ТаблРаздел1.Количество() - 1, ТаблРаздел1.Количество()));

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

		// Анализируем, чтобы в разделе 1 был как минимум 1 заполненный ОКАТО.

		ЭтоОшибка = ?(ТаблРаздел1Вспомог.Количество() = 0, Истина, Ложь);
		ТекстСоотношений = "В разделе 1 должен быть указан хотя бы один код ОКАТО по строке 020";
		Расшифровка = "";
		Описание = "Нет заполненных кодов ОКАТО в разделе 1";
		ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, ЭтоОшибка, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("ОКАТО (Раздел 1, строка 020)");
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТО1_1", "Код ОКАТО (Раздел 1, строка 020)", "", "", Стр.СсылкаНаРО, "Раздел1", Неопределено, 1);

		// Расшифровка в данном случае отсутствует, т.к. нет адреса позиционирования.

		// Анализируем на неуникальность коды ОКАТО в разделе 1.
		ТаблРаздел1Вспомог2 = ТаблРаздел1Вспомог.Скопировать();
		ТаблРаздел1Вспомог.Свернуть("ОКАТО", "Колво");
		ОшибкаНеУникальныеКодыОКАТО = Ложь;
		Для каждого Зап Из ТаблРаздел1Вспомог Цикл
			Если Зап.Колво > 1 Тогда
				ОшибкаНеУникальныеКодыОКАТО = Истина;
				ВсеОдинаковыеКодыОКАТО = ТаблРаздел1Вспомог2.НайтиСтроки(Новый Структура("ОКАТО", Зап.ОКАТО));

				ТекстСоотношений = "Проверка указанных кодов ОКАТО на уникальность в Разделе 1";
				Расшифровка = "";
				Описание = "Найдены " + Строка(Зап.Колво) + " одинаковых кода ОКАТО";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден дубликат кода ОКАТО");

				Для каждого Дубль Из ВсеОдинаковыеКодыОКАТО Цикл
					// Зарегистрируем расшифровку для каждого дубля ОКАТО.
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТО" + Дубль.НомерПозицииНаЛисте + "_1"
					                                                   , "Код ОКАТО (строка 020)"
					                                                   , Дубль.ОКАТО
					                                                   , ""
					                                                   , Стр.СсылкаНаРО
					                                                   , "Раздел1"
					                                                   , Неопределено
					                                                   , Дубль.НомерЭкземпляраЛиста);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ОшибкаНеУникальныеКодыОКАТО Тогда
			// Если ошибка по уникальности кодов ОКАТО отсутствует, выведем сообщение, что ошибки нет.
			ТекстСоотношений = "Проверка указанных кодов ОКАТО на уникальность в Разделе 1";
			Расшифровка = "";
			Описание = "";
			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
		КонецЕсли;

		// Собираем данные по разделу 3.1
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел31 Цикл
			НовСтр = ТаблРаздел31.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Раздел.Данные);
			НовСтр.НомерЭкземпляра = Док.ДанныеМногостраничныхРазделов.Раздел31.Индекс(Раздел);
		КонецЦикла;

		// Сверка данных из таблиц.
		Для каждого Сведения Из ТаблРаздел1 Цикл
			Для Инд = 1 По 4 Цикл
				Счетчик = Строка(Инд);
				ОКАТОРаздел1 = Сведения["ОКАТО" + Счетчик];
				СуммаРаздел1 = ОбработкаКС.ОкруглитьЧислоПоФормату(Сведения["Сумма" + Счетчик]);
				// Найдем в разделе 3.1
				СвязьПоОКАТО = ТаблРаздел31.НайтиСтроки(Новый Структура("КодОКАТОРаздел31", ОКАТОРаздел1));

				Если ПустаяСтрока(ОКАТОРаздел1) Тогда
					Продолжить;
				КонецЕсли;
				ТекстФормулы = "Проверка взаимосвязи между разделом 1 и разделом 3.1, по коду ОКАТО.";
				ЭтоОшибка = Ложь;
				Если СвязьПоОКАТО.Количество() = 0 Тогда
					Описание = "Указанный код ОКАТО в разделе 1 отсутствует в разделе 3.1";
					ЭтоОшибка = Истина;
				ИначеЕсли СвязьПоОКАТО.Количество() > 1 Тогда
					// Случай явной ошибки, когда в разделе 3.1 есть два одинаковых кода ОКАТО, чего быть не должно.
					// Ситуация отлавливается при анализе дубликатов по разделу 3.1.
					Продолжить;
				Иначе
					// Выведем сообщение, что ошибки нет.
					ТекстСоотношений = "Проверка указанных кодов ОКАТО в разделе 1, на присутствие в разделе 3.1";
					Расшифровка = "";
					Описание = "";
					ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
					// Расшифровка
					ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Связь разделов 1 и 3.1 по коду ОКАТО");
					// Зарегистрируем расшифровку для каждого дубля ОКАТО.
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТО" + Счетчик + "_1", "Код ОКАТО (Раздел 1, строка 020)", ОКАТОРаздел1, "", Стр.СсылкаНаРО, "Раздел1", Неопределено, ТаблРаздел1.Индекс(Сведения));
					// Зарегистрируем расшифровку для каждого дубля ОКАТО.
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("ОКАТО31_1" , "Код ОКАТО (Раздел 3.1, строка 010)", ОКАТОРаздел1 , "", Стр.СсылкаНаРО, "Раздел31", Неопределено, СвязьПоОКАТО[0].НомерЭкземпляра + 1);

					П000310004003 = ОбработкаКС.ОкруглитьЧислоПоФормату(СвязьПоОКАТО[0].П000310004003);
					СуммаРаздел1С = Формат(СуммаРаздел1, "ЧРД=.;ЧН=0");
					Строка040 = Формат(П000310004003, "ЧРД=.;ЧН=0");
					Расшифровка = СуммаРаздел1С + " Итог [" + СуммаРаздел1С + "] = " + Строка040 + " Итог [" + Строка040 + "]";
					Если СуммаРаздел1 = П000310004003 Тогда
						ЭтоОшибка = Ложь;
					Иначе
						ЭтоОшибка = Истина;
					КонецЕсли;
					ТекстСоотношений = "Сумма единого налога, подлежащая уплате в бюджет за налоговый период (Раздел 1, строки 030) должна быть равна показателю по строке 040 раздела 3.1 с соответствующим кодом ОКАТО";
					Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.";
					Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 8";
					ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, ЭтоОшибка, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);

					ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Строка 030 раздела 1 и строка 040 раздела 3.1");
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СумНалог" + Счетчик + "_1", Строка030Текст, СуммаРаздел1, "", Стр.СсылкаНаРО, "Раздел1", Неопределено, ТаблРаздел1.Индекс(Сведения));
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000310004003", "Сумма единого налог на вмененный доход, подлежащая уплате за налоговый период (Раздел 3.1, строка 040)", П000310004003, "", Стр.СсылкаНаРО, "Раздел31", Неопределено, СвязьПоОКАТО[0].НомерЭкземпляра + 1);

				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

		// Проверим суммы уплаты с раздела 1 должны совпадать со стр. 050 раздела 3.
		СуммаУплОбщая = 0;

		ТекстСоотношений = "Сумма показателей по строкам 030 раздела 1 должна совпадать с показателем по строке 050 раздела 3";
		Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.";
		Нарушение = Неопределено;
		ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, "", Нарушение, Описание);
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Суммы налога, подлежащего уплате в бюджет");

		П000030005003 = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000030005003);
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000030005003", ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход.П000030005003", "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход"), П000030005003, "", Стр.СсылкаНаРО, "Раздел3");
		ПраваяЧастьРасш = "";
		Для каждого Сведения Из ТаблРаздел1 Цикл
			Для Инд = 1 По 4 Цикл
				Счетчик = Строка(Инд);
				СуммаРаздел1 = ОбработкаКС.ОкруглитьЧислоПоФормату(Сведения["Сумма" + Счетчик]);
				// Расшифровка только для показателей не равных 0.
				Если СуммаРаздел1 <> 0 Тогда
					СумСтр = Формат(СуммаРаздел1, "ЧРД=.;ЧН=0");
					ПраваяЧастьРасш = ПраваяЧастьРасш + СумСтр + " + ";
				КонецЕсли;
				
				//Если СуммаРаздел1 <> 0 Тогда
				СуммаУплОбщая = СуммаУплОбщая + СуммаРаздел1;
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СумНалог" + Счетчик + "_1", Строка030Текст, СуммаРаздел1, "", Стр.СсылкаНаРО, "Раздел1", Неопределено, ТаблРаздел1.Индекс(Сведения));
				//КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Найти(ПраваяЧастьРасш, " + ") > 0 Тогда
			ПраваяЧастьРасш = Сред(ПраваяЧастьРасш, 1, СтрДлина(ПраваяЧастьРасш) - 3);
		КонецЕсли;
		ПраваяЧастьРасш = ПраваяЧастьРасш + " Итог [" + Формат(СуммаУплОбщая, "ЧРД=.;ЧН=0") + "]";
		ЛеваяЧастьРасш = Формат(П000030005003, "ЧРД=.;ЧН=0") + " Итог [" + Формат(П000030005003, "ЧРД=.;ЧН=0") + "]";
		Расшифровка = ЛеваяЧастьРасш + " = " + ПраваяЧастьРасш;
		Счетчик = Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0");
		СтруктураОшибок["Расшифровка" + Счетчик] = Расшифровка;

		Если П000030005003 <> СуммаУплОбщая Тогда
			СтруктураОшибок["ЭтоОшибка" + Счетчик] = Истина;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок - 1;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;

		// Проверим, чтобы суммы, указанные в Разделе 1 не были меньше 0.
		Для каждого Сведения Из ТаблРаздел1 Цикл
			Для Инд = 1 По 4 Цикл
				Счетчик = Строка(Инд);
				СуммаРаздел1 = ОбработкаКС.ОкруглитьЧислоПоФормату(Сведения["Сумма" + Счетчик]);
				Если СуммаРаздел1 < 0 Тогда

					ТекстСоотношений = "Сумма единого налога, подлежащая уплате в бюджет за налоговый период, не должна быть меньше 0";
					Описание = "Отрицательное значение";
					Нарушение = Неопределено;
					СумСтр = Формат(СуммаРаздел1, "ЧРД=.;ЧН=0");
					Расшифровка = СумСтр + " Итог [" + СумСтр + "]";
					ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
					ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Отрицательное значение суммы налога");
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СумНалог" + Счетчик + "_1", Строка030Текст, СуммаРаздел1, "", Стр.СсылкаНаРО, "Раздел1", Неопределено, ТаблРаздел1.Индекс(Сведения));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела1

// ПроверкаРаздела2
//
Функция ПроверкаРаздела2(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	// Создадим таблицу раздела 2.
	ТаблРаздел2 = Новый ТаблицаЗначений;
	ТаблРаздел2.Колонки.Добавить("КодВидаДеятельности1");
	ТаблРаздел2.Колонки.Добавить("КодВидаДеятельности2");
	ТаблРаздел2.Колонки.Добавить("КодВидаДеятельности");
	ТаблРаздел2.Колонки.Добавить("АдресРаздел2");
	ТаблРаздел2.Колонки.Добавить("ОКАТОРаздел2");
	ТаблРаздел2.Колонки.Добавить("П000020004003"); // Базовая доходность
	ТаблРаздел2.Колонки.Добавить("П000020005003"); // Величина физ. показателя за 1 мес.
	ТаблРаздел2.Колонки.Добавить("П000020006003"); // Величина физ. показателя за 2 мес.
	ТаблРаздел2.Колонки.Добавить("П000020007003"); // Величина физ. показателя за 3 мес.
	ТаблРаздел2.Колонки.Добавить("П000020008003"); // Коэффициент К1.
	ТаблРаздел2.Колонки.Добавить("П000020009003"); // Коэффициент К2.
	ТаблРаздел2.Колонки.Добавить("П000020010003"); // Налоговая база (всего).
	ТаблРаздел2.Колонки.Добавить("П000020011003"); //   за 1 мес.
	ТаблРаздел2.Колонки.Добавить("П000020012003"); //   за 2 мес.
	ТаблРаздел2.Колонки.Добавить("П000020013003"); //   за 3 мес.
	ТаблРаздел2.Колонки.Добавить("ЭкземплярЛиста"); // Номер листа.

	// Создадим таблицу раздела 31.
	ТаблРаздел31= Новый ТаблицаЗначений;
	ТаблРаздел31.Колонки.Добавить("КодОКАТОРаздел31");
	ТаблРаздел31.Колонки.Добавить("П000310002003");
	ТаблРаздел31.Колонки.Добавить("П000310003003");
	ТаблРаздел31.Колонки.Добавить("П000310004003");
	ТаблРаздел31.Колонки.Добавить("НомерЭкземпляра");
	ТаблРаздел31.Колонки.Добавить("Колво");

	// Макет = Отчеты.РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход.ПолучитьМакет("Списки2007Кв1");
	Макет = ОбработкаКС.мФормаОтчета.ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");
	ТекОбласть = Макет.Области.Найти("ВидыПД2008");
	ЭталонныеВидыДеятельности = Новый ТаблицаЗначений;
	ЭталонныеВидыДеятельности.Колонки.Добавить("Код");
	ЭталонныеВидыДеятельности.Колонки.Добавить("Название");
	ЭталонныеВидыДеятельности.Колонки.Добавить("БазоваяДоходность");

	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

		Код = СокрП(Макет.Область(Ном, 1).Текст);
		Если ПустаяСтрока(Код) Тогда
			Продолжить;
		КонецЕсли;

		НовСтрока = ЭталонныеВидыДеятельности.Добавить();
		НовСтрока.Код = Код;
		НовСтрока.Название = СокрП(Макет.Область(Ном, 2).Текст);
		НовСтрока.БазоваяДоходность = ?(ПустаяСтрока(СокрП(Макет.Область(Ном, 3).Текст)), 0, Число(СокрП(Макет.Область(Ном, 3).Текст)));
	КонецЦикла;

	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		Док = Стр.СохраненныйДок;
		ТаблРаздел2.Очистить();
		ТаблРаздел31.Очистить();
		// Собираем данные по разделу 2.
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел2 Цикл
			НовСтр = ТаблРаздел2.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Раздел.Данные);
			НовСтр.КодВидаДеятельности = НовСтр.КодВидаДеятельности1 + НовСтр.КодВидаДеятельности2;
			НовСтр.ЭкземплярЛиста = ТаблРаздел2.Количество();
		КонецЦикла;

		// Собираем данные по разделу 3.1.
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел31 Цикл
			// Если код ОКАТО в разделе 3.1. не указан, пропустим такой лист, проверится в процедуре проверки раздела 3.1 и выдаст ошибку.
			Если ПустаяСтрока(Раздел.Данные.КодОКАТОРаздел31) Тогда
				Продолжить;
			КонецЕсли;

			НомерЛиста = Док.ДанныеМногостраничныхРазделов.Раздел31.Индекс(Раздел);
			НовСтр = ТаблРаздел31.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Раздел.Данные);
			НовСтр.НомерЭкземпляра = НомерЛиста + 1;
			НовСтр.Колво = 1;

		КонецЦикла;

		// Проверяем на заполнения обязательные показатели.
		Для каждого Зап Из ТаблРаздел2 Цикл
			НомерЛиста = ТаблРаздел2.Индекс(Зап);
			КодВидаДеятельности = Зап.КодВидаДеятельности;
			Если ПустаяСтрока(КодВидаДеятельности) Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 010 ""Код вида предпринимательской деятельности"" должен быть заполнен";
				Расшифровка = "Показатель не заполнен";
				Описание = "Не указан код вида предпринимательской деятельности (Раздел 2, строка 010, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н (в редакции приказа Минфина РФ от 20.09.2007 г. № 83н )), пункт 12";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден пустой показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодВидаДеятельности1", "Код вида предпринимательской деятельности (Раздел 2, строка 010)", "", "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

			Если (ПустаяСтрока(Зап.АдресРаздел2)) Или (Зап.АдресРаздел2 = "643,,,,,,,,,") Или (Зап.АдресРаздел2 = ",,,,,,,,,") Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 020 ""Адрес места осуществления предпринимательской деятельности"" должен быть заполнен";
				Расшифровка = "Показатель не заполнен";
				Описание = "Не указан адрес места осуществления предпринимательской деятельности (Раздел 2, строка 020, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 13";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден пустой показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("Индекс1", "Адрес места осуществления предпринимательской деятельности (Раздел 2, строка 020)", "", "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

			Если ПустаяСтрока(Зап.ОКАТОРаздел2) Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 030 ""Код по ОКАТО"" должен быть заполнен";
				Расшифровка = "Показатель не заполнен";
				Описание = "Не указан код вида предпринимательской деятельности (Раздел 2, строка 030, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 14";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден пустой показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТОРаздел2_1", "Код по ОКАТО (Раздел 2, строка 030)", "", "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

			Если Зап.П000020004003 = 0 Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 040 ""Базовая доходность на единицу физического показателя в месяц (руб.)"" должен быть заполнен";
				Расшифровка = "0";
				Описание = "Не указан размер базовой доходности на ед. физического показателя в месяц (Раздел 2, строка 040, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н (в редакции приказа Минфина РФ от 20.09.2007 г. № 83н )), пункт 15";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Незаполненный показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000020004003", "Базовая доходность на ед. физического показателя (Раздел 2, строка 040)", 0, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

			Если Зап.П000020008003 = 0 Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 080 ""Корректирующий коэффициент К1"" должен быть заполнен";
				Расшифровка = "0";
				Описание = "Не указан корректирующий коэффициент К1 (Раздел 2, строка 080, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 17";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Незаполненный показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000020008003", "Корректирующий коэффициент К1 (Раздел 2, строка 080)", 0, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

			Если Зап.П000020009003 = 0 Тогда
				ТекстСоотношений = "В разделе 2, показатель по строке 090 ""Корректирующий коэффициент К2"" должен быть заполнен";
				Расшифровка = "0";
				Описание = "Не указан корректирующий коэффициент К2 (Раздел 2, строка 090, лист № " + Формат(НомерЛиста + 1) + ")";
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 18";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Незаполненный показатель");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000020009003", "Корректирующий коэффициент К2 (Раздел 2, строка 090)", 0, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			КонецЕсли;

		КонецЦикла;

		// Проверим связку кода вида предпринимательской деятельности и базовую доходность по строке 040.
		Для каждого Зап Из ТаблРаздел2 Цикл
			НомерЛиста = ТаблРаздел2.Индекс(Зап);
			НайденноеСоответствие = ЭталонныеВидыДеятельности.НайтиСтроки(Новый Структура("Код, БазоваяДоходность", Зап.КодВидаДеятельности, Зап.П000020004003));
			ЭтоОшибка = НайденноеСоответствие.Количество() = 0;

			ТекстСоотношений = "В разделе 2, указанный код вида деятельности (строка 010) и размер базовой доходности (строка 040) должны соответствовать Приложению 2 к Порядку заполнения налоговой декларации по ЕНВД утвержденному Приказом Минфина РФ от 17.01.2006 № 8н (в редакции приказа Минфина РФ от 20.09.2007 г. № 83н)";
			Расшифровка = Зап.КодВидаДеятельности + "/" + Зап.П000020004003;
			Описание = "Код вида предпринимательской деятельности и базовая доходность не соответствуют Приложению № 2 к Порядку заполнения налоговой декларации пр ЕНВД (Раздел 2, строки 010 и 040, лист № " + Формат(НомерЛиста + 1) + ")";
			Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н (в редакции приказа Минфина РФ от 20.09.2007 г. № 83н )), пункт 12";

			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, ЭтоОшибка, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Вид предпринимательской деятельности и базовая доходность");
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодВидаДеятельности1", "Код вида предпринимательской деятельности (Раздел 2, строка 010)", Зап.КодВидаДеятельности, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000020004003", "Базовая доходность на ед. физического показателя (Раздел 2, строка 040)", Зап.П000020004003, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, НомерЛиста + 1);

		КонецЦикла;

		// Связываем раздел 2 и раздел 3.1 по коду ОКАТО. В процедуре проверки раздела 3.1 будем связывать по ОКАТО и сумме.
		// Найдем коды ОКАТО, которых нет в Разделе 3.1
		ТаблРаздел2Вспомог = ТаблРаздел2.Скопировать();
		ТаблРаздел2Вспомог.Свернуть("ОКАТОРаздел2");
		Для каждого Зап из ТаблРаздел2Вспомог Цикл
			// Могут быть пустые ОКАТО, пропустим их
			Если ПустаяСтрока(Зап.ОКАТОРаздел2) Тогда
				Продолжить;
			КонецЕсли;

			НайденныеОКАТО = ТаблРаздел31.НайтиСтроки(Новый Структура("КодОКАТОРаздел31", Зап.ОКАТОРаздел2));
			ТекстСоотношений = "В разделе 2 по строке 030 должны быть указаны коды ОКАТО, отраженные в разделе 3.1 декларации";
			Расшифровка = Зап.ОКАТОРаздел2;
			Если НайденныеОКАТО.Количество() = 0 Тогда
				// в разделе 2 указан код окато не отраженный в разделе 3.1
				Найденые2Раздел = ТаблРаздел2.НайтиСтроки(Новый Структура("ОКАТОРаздел2", Зап.ОКАТОРаздел2));
				Описание = "Нет взаимосвязи разделов 2 и 3.1 по коду ОКТО " + Зап.ОКАТОРаздел2;
				Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 27";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("В разделе 2 присутствуют лист(ы) с кодом ОКАТО, не отраженным в разделе 3.1");
				// В случае, если в разделе 2 несколько кодов на разных страницах, то для расшифровки организуем цикл, чтобы получить номера страниц.
				Для каждого Лист Из Найденые2Раздел Цикл
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("КодОКАТОРаздел2_1", "Код ОКАТО (строка 030)", Зап.ОКАТОРаздел2, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, Лист.ЭкземплярЛиста);
				КонецЦикла;
			Иначе
				// Ошибки нет, если в разделе 3.1 больше 1 записи с таким кодом окато, то при проверки раздела 3.1 это сообщение об ошибки сгенерируется
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, "");
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела2

// ПроверкаРаздела31
//
Функция ПроверкаРаздела31(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	Строка030Текст = "Сумма единого налог, подлежащая уплате в бюджет за налоговый период (Раздел 1, строка 030)";

	// Создадим таблицу раздела 3.
	ТаблРаздел31= Новый ТаблицаЗначений;
	ТаблРаздел31.Колонки.Добавить("КодОКАТОРаздел31");
	ТаблРаздел31.Колонки.Добавить("П000310002003");
	ТаблРаздел31.Колонки.Добавить("П000310003003");
	ТаблРаздел31.Колонки.Добавить("П000310004003");
	ТаблРаздел31.Колонки.Добавить("НомерЭкземпляра");
	ТаблРаздел31.Колонки.Добавить("Колво");

	ТаблРаздел1 = Новый ТаблицаЗначений;
	ТаблРаздел1.Колонки.Добавить("ОКАТО"); // Код ОКАТО 020
	ТаблРаздел1.Колонки.Добавить("Сумма"); // Сумма уплаты  030
	ТаблРаздел1.Колонки.Добавить("Колво");
	ТаблРаздел1.Колонки.Добавить("НомерПозицииНаЛисте");
	ТаблРаздел1.Колонки.Добавить("НомерЭкземпляраЛиста");

	// Создадим таблицу раздела 2.
	ТаблРаздел2 = Новый ТаблицаЗначений;
	ТаблРаздел2.Колонки.Добавить("ОКАТОРаздел2");
	ТаблРаздел2.Колонки.Добавить("П000020010003"); // Налоговая база (всего).
	ТаблРаздел2.Колонки.Добавить("ЭкземплярЛиста"); // Номер листа.

	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		Док = Стр.СохраненныйДок;

		// Собираем данные по разделу 1, без всевозможных условий.
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			Для Инд = 1 По 4 Цикл
				Счетчик = Строка(Инд);
				ОКАТО020 = Раздел.Данные["КодОКАТОРаздел1_" + Счетчик];
				Сумма030 = Раздел.Данные["СумНалог_" + Счетчик];

				Если ПустаяСтрока(ОКАТО020) Тогда
					// Пропустим путсые коды ОКАТО в разделе 1. Контроль в этом случае ведется в процедуре по разделу 1.
					Продолжить;
				КонецЕсли;

				НовСтр = ТаблРаздел1.Добавить();
				НовСтр.ОКАТО = ОКАТО020;
				НовСтр.Сумма = Сумма030;
				НовСтр.Колво = 1;
				НовСтр.НомерПозицииНаЛисте = Счетчик;
				НовСтр.НомерЭкземпляраЛиста = ТаблРаздел1.Количество();

			КонецЦикла;
		КонецЦикла;

		// Собираем данные по разделу 3.1
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел31 Цикл

			НомерЛиста = Док.ДанныеМногостраничныхРазделов.Раздел31.Индекс(Раздел);

			Если ПустаяСтрока(Раздел.Данные.КодОКАТОРаздел31) Тогда

				ТекстСоотношений = "В разделе 3.1, код ОКАТО (строка 010) должен быть заполнен";
				Расшифровка = "";
				Описание = "Найдена пустая строка 010 раздела 3.1, лист № " + Формат(НомерЛиста + 1);
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);

				// Регистрируем формулу
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден пустой код ОКАТО");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("ОКАТО31_1", "Код ОКАТО (строка 010)", "", "", Стр.СсылкаНаРО, "Раздел31", Неопределено, НомерЛиста + 1);

			Иначе

				НовСтр = ТаблРаздел31.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Раздел.Данные);
				НовСтр.НомерЭкземпляра = НомерЛиста + 1;
				НовСтр.Колво = 1;

			КонецЕсли;
		КонецЦикла;

		// Собираем данные по разделу 2.
		Для каждого Раздел Из Док.ДанныеМногостраничныхРазделов.Раздел2 Цикл
			НовСтр = ТаблРаздел2.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Раздел.Данные);
			НовСтр.ЭкземплярЛиста = ТаблРаздел2.Количество();
		КонецЦикла;

		// Анализируем на неуникальность коды ОКАТО в разделе 3.1.
		ТаблРаздел31Вспомог2 = ТаблРаздел31.Скопировать();
		ТаблРаздел31Вспомог2.Свернуть("КодОКАТОРаздел31", "П000310004003, Колво");
		ОшибкаНеУникальныеКодыОКАТО = Ложь;
		Для каждого Зап Из ТаблРаздел31Вспомог2 Цикл
			Если Зап.Колво > 1 Тогда
				ОшибкаНеУникальныеКодыОКАТО = Истина;
				ВсеОдинаковыеКодыОКАТО = ТаблРаздел31.НайтиСтроки(Новый Структура("КодОКАТОРаздел31", Зап.КодОКАТОРаздел31));

				ТекстСоотношений = "Проверка указанных кодов ОКАТО на уникальность в Разделе 3.1";
				Расшифровка = "";
				Описание = "Найдены " + Строка(Зап.Колво) + " одинаковых кода ОКАТО";
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Найден дубликат кода ОКАТО");

				Для каждого Дубль Из ВсеОдинаковыеКодыОКАТО Цикл
					// Зарегистрируем расшифровку для каждого дубля ОКАТО.
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("ОКАТО31_1"
					                                                   , "Код ОКАТО (Раздел 3.1, строка 010)"
					                                                   , Дубль.КодОКАТОРаздел31
					                                                   , ""
					                                                   , Стр.СсылкаНаРО
					                                                   , "Раздел31"
					                                                   , Неопределено
					                                                   , Дубль.НомерЭкземпляра);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ОшибкаНеУникальныеКодыОКАТО Тогда
			// Если ошибка по уникальности кодов ОКАТО отсутствует, выведем сообщение, что ошибки нет.
			ТекстСоотношений = "Проверка указанных кодов ОКАТО на уникальность в Разделе 3.1.";
			Расшифровка = "";
			Описание = "";
			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
		КонецЕсли;

		// Проанализируем связи между ОКАТО раздел 3.1 и раздел 1 и строки 040 и 030 соответственно.
		// ТаблРаздел1Вспомог = ТаблРаздел1.Скопировать();
		// ТаблРаздел1Вспомог.Свернуть("ОКАТО", "Сумма, Колво");
		// В разделе 3.1., также как и в разделе 1 не предпологается наличие двух и более одинаковых кодов ОКАТО.
		Для каждого Зап Из ТаблРаздел31 Цикл

			// Найдем все нужные ОКАТО из Раздела 1
			НайденныеОКАТОВРазделе1 = ТаблРаздел1.НайтиСтроки(Новый Структура("ОКАТО", Зап.КодОКАТОРаздел31));
			Если НайденныеОКАТОВРазделе1.Количество() = 0 Тогда
				// ОШИБКА, В РАЗДЕЛЕ 1 НЕТ СООТВЕТСТВУЮЩЕГО КОДА ОКАТО!!!!!!!
				ТекстСоотношений = "Код ОКАТО (Раздел 3.1, строка 010) должен быть указан в разделе 1 (строка 020)";
				Расшифровка = Зап.КодОКАТОРаздел31;
				Описание = "В разделе 1 отсутствуют данные по коду ОКАТО " + Зап.КодОКАТОРаздел31 + ", экземпляр раздела 3.1 № " + Формат(ТаблРаздел31.Индекс(Зап) + 1);
				ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Истина, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Свзяь разделов 1 и 3.1");
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("ОКАТО31_1", "Код ОКАТО (строка 010)", Зап.КодОКАТОРаздел31, "", Стр.СсылкаНаРО, "Раздел31", Неопределено, ТаблРаздел31.Индекс(Зап) + 1);

				Продолжить;
			КонецЕсли;

			// Зарегистрируем ошибку, с признаком ЭтоОшибка = Ложь и пустой расшифровкой (сформируем позже).
			ТекстСоотношений = "Сумма ЕНВД, подлежащая уплате и отражаемая по коду строки 040 раздел 3.1 должна быть равна сумме по коду строки 030 раздела 1, с соответствующим кодом ОКАТО";
			Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.";
			Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 30";
			Расшифровка = "";
			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание);

			// Зарегистрируем проверяемую формулу.
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Сумма ЕНВД, подлежащая уплате по коду ОКАТО " + Зап.КодОКАТОРаздел31);

			// Получим сумму из раздела 3.1
			СуммУплатыРаздел31 = ОбработкаКС.ОкруглитьЧислоПоФормату(Зап.П000310004003);
			СуммУплатыРаздел31Стр = Формат(СуммУплатыРаздел31, "ЧРД=.;ЧН=0");
			// Сформируем представление показателя
			ПредставлениеПоказателя = ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход.П000310004003", "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
			ЛеваяЧастьРасш = СуммУплатыРаздел31Стр + " Итог [" + СуммУплатыРаздел31Стр + "]";
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000310004003", ПредставлениеПоказателя, СуммУплатыРаздел31, "", Стр.СсылкаНаРО, "Раздел31", Неопределено, Зап.НомерЭкземпляра);

			СуммаУплОбщая = 0;
			ПраваяЧастьРасш = "";
			// ОКАТО должны быть уникальными в разделе 1, но тем не менее если это не так, то переберем их и сделаем расшифровку.
			Для каждого ЗапРаздел1 Из НайденныеОКАТОВРазделе1 Цикл
				УплатаРаздел1 = ОбработкаКС.ОкруглитьЧислоПоФормату(ЗапРаздел1.Сумма);
				УплатаРаздел1Стр = Формат(УплатаРаздел1, "ЧРД=.;ЧН=0");
				СуммаУплОбщая = СуммаУплОбщая + УплатаРаздел1;
				ПраваяЧастьРасш = ПраваяЧастьРасш + УплатаРаздел1Стр + " + ";
				// Регистрируем показатель.
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СумНалог" + ЗапРаздел1.НомерПозицииНаЛисте + "_1", Строка030Текст, УплатаРаздел1, "", Стр.СсылкаНаРО, "Раздел1", Неопределено, ЗапРаздел1.НомерЭкземпляраЛиста);
			КонецЦикла;
			Если Найти(ПраваяЧастьРасш, " + ") > 0 Тогда
				ПраваяЧастьРасш = Сред(ПраваяЧастьРасш, 1, СтрДлина(ПраваяЧастьРасш) - 3);
			КонецЕсли;
			ПраваяЧастьРасш = ПраваяЧастьРасш + " Итог [" + Формат(СуммаУплОбщая, "ЧРД=.;ЧН=0") + "]";
			Расшифровка = ЛеваяЧастьРасш + " = " + ПраваяЧастьРасш;

			// Подкорректируем признак ЭтоОшибка и проставим сформированную расшифровку.
			Счетчик = Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0");
			СтруктураОшибок["Расшифровка" + Счетчик] = Расшифровка;

			Если СуммУплатыРаздел31 <> СуммаУплОбщая Тогда
				СтруктураОшибок["ЭтоОшибка" + Счетчик] = Истина;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок - 1;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;

		КонецЦикла;

		// Проверим строку 030 раздела 3.1, она должна совпадать с суммой по строке 100 раздела 2 с заданным кодом ОКАТО.
		Для каждого Зап Из ТаблРаздел31 Цикл

			// Найдем в разделе 2 листы, с заданным кодом ОКАТО.
			СтрокиСЗаданнымОКАТО = ТаблРаздел2.НайтиСтроки(Новый Структура("ОКАТОРаздел2", Зап.КодОКАТОРаздел31));
			ЭтоОшибка = СтрокиСЗаданнымОКАТО.Количество() = 0;

			ТекстСоотношений = "Код ОКАТО (Раздел 3.1, строка 010) должен быть указан в разделе 2 (строка 030)";
			Расшифровка = Зап.КодОКАТОРаздел31;
			Описание = "В разделе 2 отсутствуют данные по коду ОКАТО " + Зап.КодОКАТОРаздел31 + ", экземпляр раздела 3.1 № " + Формат(ТаблРаздел31.Индекс(Зап) + 1);
			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, ЭтоОшибка, СтруктураОшибок, ТекстСоотношений, Расшифровка, Неопределено, Описание);
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Свзяь разделов 2 и 3.1");
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("ОКАТО31_1", "Код ОКАТО (строка 010)", Зап.КодОКАТОРаздел31, "", Стр.СсылкаНаРО, "Раздел31", Неопределено, ТаблРаздел31.Индекс(Зап) + 1);

			Если ЭтоОшибка Тогда
				// Если нет соответствующих данных по разделу 2, то сумму проверять не имеет смысла.
				Продолжить;
			КонецЕсли;
			// Соберем суммы по разделу 2 из строк 100 с округлением по каждому экземпляру.
			ИтогСумм = 0;
			ПраваяЧастьРасш = "";

			ТекстСоотношений = "Налоговая база, исчисленная по коду " + Зап.КодОКАТОРаздел31 + " (Раздел 3.1, строка 030) должна быть равна налоговой базе (Раздел 2, строка 100) с кодом ОКАТО " + Зап.КодОКАТОРаздел31;
			Описание = "Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.";
			Нарушение = "Порядок заполнения налоговой декларации по ЕНВД (Приложение № 2 к Приказу Минфина РФ от 17.01.2006 № 8н), пункт 29";
			ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Ложь, СтруктураОшибок, ТекстСоотношений, "", Нарушение, Описание);
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки("Налоговая база раздел 2 и раздел 3.1 по коду ОКАТО " + Зап.КодОКАТОРаздел31);

			ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Зап.П000310003003);
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000310003003", "Код ОКАТО (строка 030)", ЛеваяЧасть, "", Стр.СсылкаНаРО, "Раздел31", Неопределено, Зап.НомерЭкземпляра);

			Для каждого Зап2 Из СтрокиСЗаданнымОКАТО Цикл
				Строка100 = ОбработкаКС.ОкруглитьЧислоПоФормату(Зап2.П000020010003);
				ИтогСумм = ИтогСумм + Строка100;

				Если ИтогСумм <> 0 Тогда
					СумСтр = Формат(Строка100, "ЧРД=.;ЧН=0");
					ПраваяЧастьРасш = ПраваяЧастьРасш + СумСтр + " + ";
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П000020010003", "Налоговая база (Раздел 2, строка 100)", Строка100, "", Стр.СсылкаНаРО, "Раздел2", Неопределено, Зап2.ЭкземплярЛиста);
				КонецЕсли;

			КонецЦикла;

			Если Найти(ПраваяЧастьРасш, " + ") > 0 Тогда
				ПраваяЧастьРасш = Сред(ПраваяЧастьРасш, 1, СтрДлина(ПраваяЧастьРасш) - 3);
			КонецЕсли;

			ЛеваяЧастьРасш = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "]";
			Расшифровка = ЛеваяЧастьРасш + " = " + ПраваяЧастьРасш;
			ЭтоОшибка = ИтогСумм <> ЛеваяЧасть;

			Счетчик = Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0");
			СтруктураОшибок["Расшифровка" + Счетчик] = Расшифровка;

			Если ЭтоОшибка Тогда
				СтруктураОшибок["ЭтоОшибка" + Счетчик] = Истина;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок - 1;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверкаРаздела31

// ЗарегистрироватьОШибкуКС
//
Процедура ЗарегистрироватьОШибкуКС(ОбработкаКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, ЭтоОшибка, СтруктураОшибок, ТекстСоотношений, Расшифровка, Нарушение, Описание)

	Если ЭтоОшибка Тогда
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;

	ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
	Счетчик = Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0");
	Если Нарушение <> Неопределено Тогда
		СтруктураОшибок.Вставить("Нарушение" + Счетчик, Нарушение);
	КонецЕсли;
	СтруктураОшибок.Вставить("Описание" + Счетчик, Описание);
	СтруктураОшибок.Вставить("Расшифровка" + Счетчик, Расшифровка);
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Счетчик, ОбработкаКС.мСчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Счетчик, ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ТекстСоотношений);

КонецПроцедуры // ЗарегистрироватьОШибкуКС


////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// КоманднаяПанельФормыПроверкаПоказателей
//
Процедура КоманднаяПанельФормыПроверкаПоказателей(Кнопка)
	РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь, Истина);
КонецПроцедуры // КоманднаяПанельФормыПроверкаПоказателей

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2008Кв1";

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКодыБюджетнойКлассификации2006 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Название",,, 50);

мВидыПД2008 = Новый ТаблицаЗначений;
мВидыПД2008.Колонки.Добавить("Код", , , 3);
мВидыПД2008.Колонки.Добавить("Название",,,40);
мВидыПД2008.Колонки.Добавить("БазоваяДоходность", ,"Базовая доходность", 18);

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 2
ТаблицаСтраницыРаздела1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздела1);

// Элемент структуры - данные дополнительных страниц Раздела 2
ТаблицаСтраницыРаздела2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздела2);

// Элемент структуры - данные дополнительных страниц Раздела 3.1
ТаблицаСтраницыРаздела31 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел31", ТаблицаСтраницыРаздела31);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = 1152016;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");
ОбязРазделов.Добавить("Раздел3");
ОбязРазделов.Добавить("Раздел31");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00005", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1152016";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО ЕДИНОМУ НАЛОГУ НА ВМЕНЕННЫЙ ДОХОД ДЛЯ ОТДЕЛЬНЫХ ВИДОВ ДЕЯТЕЛЬНОСТИ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

МногострочныеИсключения = Новый СписокЗначений;
МногострочныеИсключения.Добавить("П000010003000");
