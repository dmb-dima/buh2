////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел12; //Раздел 1, Раздел 2
Перем мРаздел30; //Раздел 3
Перем мРаздел41; //Раздел 4.1
Перем мРаздел42; //Раздлел 4.2
Перем мРаздел50; //Раздел5

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мДанныеОтчета Экспорт;

Перем ЦветБелый;
Перем ЦветЖелтый;
Перем мОписаниеТиповБулево;

Перем мСоставПоказателей Экспорт;

// Хранят имена многострочных разделов
Перем мИдГруппы1;


Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мДокументВосстановлен;

Перем мАдресвФорматеДляВыгрузки;

Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;

Перем Массив1 Экспорт;
Перем ИДКонфигурации;

Перем мСтруктураДокУпПред;

Перем мНомерВыгрузки; // счетчик выгрузок, используется при формировании имени файла выгрузки

Перем ФлагСохранения; // для изменения свойства модифицированности при изменеии версии формы

Перем НомерГода;
Перем мСкопированаИз2010; // флаг для определения, что форма скопирова из 2010 в любой кроме 2010 (для вывода "0" в строке 100)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел41 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел41.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел30";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел41";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел41;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел42";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел50";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)
	
	мДелитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
    	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)Экспорт
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел41;
	//// ИЛИ ИдГруппы = мИдГруппы2 Тогда

	//	ТекТабличноеПоле = мРаздел1_2;
	//ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
	

	////ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
	////	ТекТабличноеПоле = мРаздел3_2;

	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()Экспорт
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел41" Тогда
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел41.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел3_2.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
        ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
		//	
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета


// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
    	
    НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НЕ (НомерМесяца = "12") Тогда  
		НомерМесяца = РегламентированнаяОтчетность.ДополнитьСтроку(НомерМесяца,2,0);
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период", 2, НомерМесяца);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, НомерГода);
	
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	 //проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "РегНомПФР");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "АдрМЖ");
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
	Сведения.Добавить("", "ФИОИсп"); // ФИО исполнителя
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");


	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		КППЮЛ = ""; // КПП
		НаимЮЛПол = ""; // Полное наименование 
		ОГРН = "";
		ОКАТО = "";
		ОКПО = "";
		ОКВЭД = "";
		ОКОПФ = "";
		ОКФС = "";
		РегистрационныйНомерФСС = "";
		РегНомПФР = "";		
        АдрЮР = "";
		АдрФакт = "";
		АдрМЖ = "";

	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
    ТелСлуж = "";
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("РегНомПФР", РегНомПФР);
		ОргСведения.Свойство("АдрЮР", АдрЮР);
		ОргСведения.Свойство("АдрФакт", АдрФакт);
		ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
    ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		Адрес =  АдрМЖ;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		//ФИОРук = "";
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		мТитульный.Области.ПрПодп.Значение = "1";
		мТитульный.Области.ОргПодписантФамилия.Значение = ФИОРук;
        ЗапретитьВводДокументаПредставителя();
		Возврат;

	КонецЕсли;

	// Производим операции связанные с текущей формой отчетности

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(мТитульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;   	
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(мТитульный.Области.ПрПодп.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ПрПодп.Значение = "1"; 
	КонецЕсли;     	    
		
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(мТитульный.Области.ОргПодписантФамилия.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		мТитульный.Области.ОргПодписантФамилия.Значение = ФИОРук;    	
	КонецЕсли;
	
    Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(мТитульный.Области.ДокУпПред.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводДокументаПредставителя();
	КонецЕсли;    

	  ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ,12,"0",0);
	  КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ,9,"-",1);
	
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИНН", 12, ИННЮЛ);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КПП", 9, КППЮЛ);
	КонецЕсли;
	
	// Работаем с ОГРН
	ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН,15,"0",0);

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОГРН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 15, ОГРН);
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ТелОрганизации", 15, ТелОрганизации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКАТО", 11, ОКАТО);
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКВЭД"))) Тогда
		// особая обработка ОКВЭД 
		Если Сред(ОКВЭД, 2, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
		КонецЕсли;
		Если Сред(ОКВЭД, 5, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
		КонецЕсли;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКВЭД", 8, ОКВЭД);
		//Принудительно расставляем точки в квадратиках
		мТитульный.Области.ОКВЭД3.Значение = ".";
		мТитульный.Области.ОКВЭД6.Значение = ".";
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКПО"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКПО", 10, ОКПО);  
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКОПФ"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКОПФ", 2, ОКОПФ);  
	КонецЕсли;

    Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКФС"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКФС", 2, ОКФС);  
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомРег"))) Тогда
		// спец обработка РегНомПФР
		Если СтрДлина(РегНомПФР) < 14 Тогда
			Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
			КонецЕсли;	
			Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
			КонецЕсли;
		КонецЕсли;	
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, РегНомПФР, "НомРег", , , , Ложь);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомРег", 14, РегНомПФР);
	КонецЕсли;
	
	Если Не ПБОЮЛ Тогда
		Адрес = ?(ЗначениеЗаполнено(СтрЗаменить(АдрФакт, ",", "")), АдрФакт, АдрЮр);
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(Адрес);
					Если Не СтруктураАдреса = Неопределено Тогда
						мТитульный.Области.Адрес1.Значение = СтруктураАдреса.Индекс;
						мТитульный.Области.Адрес2.Значение = СтруктураАдреса.Регион;
						мТитульный.Области.Адрес3.Значение = СтруктураАдреса.Район;
						мТитульный.Области.Адрес4.Значение = СтруктураАдреса.Город;
						мТитульный.Области.Адрес5.Значение = СтруктураАдреса.НаселенныйПункт;
						мТитульный.Области.Адрес6.Значение = СтруктураАдреса.Улица;
						мТитульный.Области.Адрес7.Значение = СтруктураАдреса.Дом;
						мТитульный.Области.Адрес8.Значение = СтруктураАдреса.Корпус;
						мТитульный.Области.Адрес9.Значение = СтруктураАдреса.Квартира;
					КонецЕсли;


	// Работаем с ФИО руководителя организации
	//Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргДиректор.Значение)) Тогда
	//	мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
	//КонецЕсли;

	// Работаем с ФИО исполнителя
	//Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргИсполнитель.Значение)) Тогда
	//	ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
	//	ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
	//	ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
	//	мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
	//КонецЕсли;

	//Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКОПФ.Значение)) Тогда
	//	мТитульный.Области.ОргКодКОПФ.Значение = ОКОПФ;
	//КонецЕсли;

	//Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКФС.Значение)) Тогда
	//	мТитульный.Области.ОргКодКФС.Значение = ОКФС;
	//КонецЕсли;

	//Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОргФССКод_")) Тогда
	//	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, РегистрационныйНомерФСС, "ОргФССКод_", , , , Ложь);
	//	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОргФССКод_", 10, РегистрационныйНомерФСС);
	//КонецЕсли;

	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

//процедура очищает структуру мСтруктураДокУпПред;
//очищает, забеливает, запрещает вводить в область ДокУпПред
Процедура ЗапретитьВводДокументаПредставителя()
	мТитульный.Области.ДокУпПред.Значение = "";
	мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	мТитульный.Области.ДокУпПред.Защита = Истина;
	мТитульный.Области.ДокУпПред.ЦветФона = ЦветБелый;
КонецПроцедуры		

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

		
	Если ТекущаяСтраницаПервая("Раздел12") Тогда
		 //ЗакраситьЖелтым();
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			 //не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			 ИзМакета = Истина; 					
		 Иначе
			 ИзМакета = Ложь;
		 КонецЕсли;
		 РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
		 УстановитьЦветФонаЯчейки(,,"Раздел12");
	 КонецЕсли;

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Если (ИмяТекущейСтраницыПанели = "Раздел12") И (НЕ ТекущаяСтраницаПервая("Раздел12")) Тогда
	    ЗакраситьБелым();
	КонецЕсли;

	
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Истина;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, СтруктураПараметровЛиста);
	КонецЕсли;
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			ИзМакета = Истина; 					
		Иначе
			ИзМакета = Ложь;
		КонецЕсли;
		УстановитьЦветФонаЯчейки(,,"Раздел12");
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
	
	//Расчет(мРаздел12);
КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
	Если ТекущаяСтраницаПервая("Раздел12") Тогда
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			ИзМакета = Истина; 					
		Иначе
			ИзМакета = Ложь;
		КонецЕсли;
		ЗакраситьЖелтым();
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
		УстановитьЦветФонаЯчейки(,,"Раздел12");
	Иначе    	
		ЗакраситьБелым();
	КонецЕсли;


КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		Если мСчетчикСтраниц <> Истина Тогда
			//проставляем номера страниц
			НомерЛиста = 1;
			Для Каждого Эл Из мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить("Не удалось проставить номер страницы для " + Эл.Представление);
					Продолжить;
				КонецЕсли;
			    НомерЛиста = НомерЛиста + 1;			 
            КонецЦикла;
			
			//специальный алгортим постобработки печатных листов для РСВ-1 (удаление раздела 1)
			НомерЛиста = 1; 
			Для Каждого Эл Из мПечатныеФормы Цикл  
				Если НомерЛиста = 2 И Эл.Представление = "Раздел 1, Раздел 2" Тогда
					// Проставим "0" с 100 строке
					Если НомерГода = "2010" Тогда
						Для инд = 3 По 6 Цикл  
							ИмяОбласти = "П00010001000"+инд;
							Эл.Значение.Значение.Области[ИмяОбласти].Формат = СтрЗаменить(Эл.Значение.Значение.Области[ИмяОбласти].Формат, "ЧН=-", "ЧН=");
						КонецЦикла;	
					КонецЕсли; // Проставим "0" с 100 строке
				КонецЕсли;
				
				Если НомерЛиста > 2 И Эл.Представление = "Раздел 1, Раздел 2" Тогда     					
					
					Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
					Табл = Новый ТабличныйДокумент;
					ТаблОбл = Эл.Значение.Значение;							
					ТаблОбл.УдалитьОбласть(ТаблОбл.Область("ОсновнаяЧасть_2"), Смещать);
					
					флОбластьОграничителиУмещаетсяНаСтраницу = Табл.ПроверитьВывод(ТаблОбл);  
					Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл 						
						флОбластьОграничителиУмещаетсяНаСтраницу = Табл.ПроверитьВывод(ТаблОбл); 
						Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
							Эл.Значение.Значение.ВставитьОбласть(ТаблОбл.Область("ПустаяСтрока"), ТаблОбл.Область("ПустаяСтрока"), Смещать);
							ТаблОбл.Области.ПустаяСтрока.ВысотаСтроки = ТаблОбл.Области.ПустаяСтрока.ВысотаСтроки + 3;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла; //специальный алгортим постобработки печатных листов для РСВ-1 (удаление раздела 1)
			
		КонецЕсли;
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()


// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()


// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многостраничных разделов
 	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	// вставляем документ, подтверждающий полномочия представителя
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ФормироватьСтруктуруСтраницОтчета();
	Иначе
		мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();	
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	// восстанавливаем  документ, подтверждающий полномочия представителя;
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;	
	
	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ФлагСохранения = Истина;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	//Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  – <Структура> – данные экземпляра раздела
//                 
//  <Условия>  – <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(ТаблПоле);
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			//нет условий или они все выполняются
			Результат = ДанныеТаблПоле.Показатель;	
		КонецЕсли;
		Возврат ?(Округлять, ОкруглитьЧислоПоФормату(Результат), Результат);
	Иначе
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
				//проверка экземпляра	
				Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
					//нет условий или они все выполняются
					Результат = Результат + ОкруглитьЧислоПоФормату(ДанныеТаблПоле[Показатель]);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СуммаПоказателяПоВсемСтраницамСпец

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
Процедура РасчетВСтруктуре(ИмяЛиста)
	
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Страница.Данные;
		Если ИмяЛиста = "Раздел12" Тогда
			
			//Раздел 2	
			//Сбор данных	
			П000200020103 = ОкруглитьЧислоПоФормату(Данные.П000200020103);
			П000200020203 = ОкруглитьЧислоПоФормату(Данные.П000200020203);
			П000200021103 = ОкруглитьЧислоПоФормату(Данные.П000200021103);
			П000200021203 = ОкруглитьЧислоПоФормату(Данные.П000200021203);
			П000200021403 = ОкруглитьЧислоПоФормату(Данные.П000200021403);
			П000200021503 = ОкруглитьЧислоПоФормату(Данные.П000200021503);
			П000200021703 = ОкруглитьЧислоПоФормату(Данные.П000200021703);
			П000200021803 = ОкруглитьЧислоПоФормату(Данные.П000200021803);
			П000200020104 = ОкруглитьЧислоПоФормату(Данные.П000200020104);
			П000200020204 = ОкруглитьЧислоПоФормату(Данные.П000200020204);
			П000200021104 = ОкруглитьЧислоПоФормату(Данные.П000200021104);
			П000200021204 = ОкруглитьЧислоПоФормату(Данные.П000200021204);
			П000200021404 = ОкруглитьЧислоПоФормату(Данные.П000200021404);
			П000200021504 = ОкруглитьЧислоПоФормату(Данные.П000200021504);
			П000200021704 = ОкруглитьЧислоПоФормату(Данные.П000200021704);
			П000200021804 = ОкруглитьЧислоПоФормату(Данные.П000200021804);
			П000200020105 = ОкруглитьЧислоПоФормату(Данные.П000200020105);
			П000200020205 = ОкруглитьЧислоПоФормату(Данные.П000200020205);
			П000200021105 = ОкруглитьЧислоПоФормату(Данные.П000200021105);
			П000200021205 = ОкруглитьЧислоПоФормату(Данные.П000200021205);
			П000200021405 = ОкруглитьЧислоПоФормату(Данные.П000200021405);
			П000200021505 = ОкруглитьЧислоПоФормату(Данные.П000200021505);
			П000200021705 = ОкруглитьЧислоПоФормату(Данные.П000200021705);
			П000200021805 = ОкруглитьЧислоПоФормату(Данные.П000200021805);
			П000200020106 = ОкруглитьЧислоПоФормату(Данные.П000200020106);
			П000200020206 = ОкруглитьЧислоПоФормату(Данные.П000200020206);
			П000200021106 = ОкруглитьЧислоПоФормату(Данные.П000200021106);
			П000200021206 = ОкруглитьЧислоПоФормату(Данные.П000200021206);
			П000200021406 = ОкруглитьЧислоПоФормату(Данные.П000200021406);
			П000200021506 = ОкруглитьЧислоПоФормату(Данные.П000200021506);
			П000200021706 = ОкруглитьЧислоПоФормату(Данные.П000200021706);
			П000200021806 = ОкруглитьЧислоПоФормату(Данные.П000200021806);
			
			
			//Расчеты  	
			П000200020003 = П000200020103 + П000200020203;
			П000200020004 = П000200020104 + П000200020204;
			П000200020005 = П000200020105 + П000200020205;
			П000200020006 = П000200020106 + П000200020206;
			
			П000200021003 = П000200021103 + П000200021203;
			П000200021004 = П000200021104 + П000200021204;
			П000200021005 = П000200021105 + П000200021205;
			П000200021006 = П000200021106 + П000200021206;
			
			П000200021603 = П000200021703 + П000200021803;
			П000200021604 = П000200021704 + П000200021804;
			П000200021605 = П000200021705 + П000200021805;
			П000200021606 = П000200021706 + П000200021806;
			
			П000200022003 = П000200020103 - П000200021103 - П000200021403 - П000200021703;
			П000200022004 = П000200020104 - П000200021104 - П000200021404 - П000200021704;
			П000200022005 = П000200020105 - П000200021105 - П000200021405 - П000200021705;
			П000200022006 = П000200020106 - П000200021106 - П000200021406 - П000200021706;
			
			П000200022103 = П000200020203 - П000200021203 - П000200021503 - П000200021803;
			П000200022104 = П000200020204 - П000200021204 - П000200021504 - П000200021804;
			П000200022105 = П000200020205 - П000200021205 - П000200021505 - П000200021805;
			П000200022106 = П000200020206 - П000200021206 - П000200021506 - П000200021806;
			
			//Запишем, что посчитали   
			Данные.П000200020003 = П000200020003;
			Данные.П000200021003 = П000200021003;
			Данные.П000200021603 = П000200021603;
			Данные.П000200022003 = П000200022003;
			Данные.П000200022103 = П000200022103;
			Данные.П000200020004 = П000200020004;
			Данные.П000200021004 = П000200021004;
			Данные.П000200021604 = П000200021604;
			Данные.П000200022004 = П000200022004;
			Данные.П000200022104 = П000200022104;
			Данные.П000200020005 = П000200020005;
			Данные.П000200021005 = П000200021005;
			Данные.П000200021605 = П000200021605;
			Данные.П000200022005 = П000200022005;
			Данные.П000200022105 = П000200022105;
			Данные.П000200020006 = П000200020006;
			Данные.П000200021006 = П000200021006;
			Данные.П000200021606 = П000200021606;
			Данные.П000200022006 = П000200022006;
			Данные.П000200022106 = П000200022106;
			
			
			//Раздел 1	
			Если ТаблицаРаздела.Индекс(Страница) = 0 Тогда
				//Сбор данных  		
				П000100011103 = ОкруглитьЧислоПоФормату(Данные.П000100011103);
				П000100011203 = ОкруглитьЧислоПоФормату(Данные.П000100011203);
				П000100011303 = ОкруглитьЧислоПоФормату(Данные.П000100011303);
				П000100011104 = ОкруглитьЧислоПоФормату(Данные.П000100011104);
				П000100011204 = ОкруглитьЧислоПоФормату(Данные.П000100011204);
				П000100011304 = ОкруглитьЧислоПоФормату(Данные.П000100011304);
				П000100011105 = ОкруглитьЧислоПоФормату(Данные.П000100011105);
				П000100011205 = ОкруглитьЧислоПоФормату(Данные.П000100011205);
				П000100011305 = ОкруглитьЧислоПоФормату(Данные.П000100011305);
				П000100011106 = ОкруглитьЧислоПоФормату(Данные.П000100011106);
				П000100011206 = ОкруглитьЧислоПоФормату(Данные.П000100011206);
				П000100011306 = ОкруглитьЧислоПоФормату(Данные.П000100011306);
				
				П000100010003 = ОкруглитьЧислоПоФормату(Данные.П000100010003);
				П000100011003 = ОкруглитьЧислоПоФормату(Данные.П000100011003);
				П000100012003 = ОкруглитьЧислоПоФормату(Данные.П000100012003);
				П000100014003 = ОкруглитьЧислоПоФормату(Данные.П000100014003);
				П000100010004 = ОкруглитьЧислоПоФормату(Данные.П000100010004);
				П000100011004 = ОкруглитьЧислоПоФормату(Данные.П000100011004);
				П000100012004 = ОкруглитьЧислоПоФормату(Данные.П000100012004);
				П000100014004 = ОкруглитьЧислоПоФормату(Данные.П000100014004);
				П000100010005 = ОкруглитьЧислоПоФормату(Данные.П000100010005);
				П000100011005 = ОкруглитьЧислоПоФормату(Данные.П000100011005);
				П000100012005 = ОкруглитьЧислоПоФормату(Данные.П000100012005);
				П000100014005 = ОкруглитьЧислоПоФормату(Данные.П000100014005);
				П000100010006 = ОкруглитьЧислоПоФормату(Данные.П000100010006);
				П000100011006 = ОкруглитьЧислоПоФормату(Данные.П000100011006);
				П000100012006 = ОкруглитьЧислоПоФормату(Данные.П000100012006);
				П000100014006 = ОкруглитьЧислоПоФормату(Данные.П000100014006);
				
				П000100014103 = ОкруглитьЧислоПоФормату(Данные.П000100014103);
				П000100014203 = ОкруглитьЧислоПоФормату(Данные.П000100014203);
				П000100014303 = ОкруглитьЧислоПоФормату(Данные.П000100014303);
				П000100014104 = ОкруглитьЧислоПоФормату(Данные.П000100014104);
				П000100014204 = ОкруглитьЧислоПоФормату(Данные.П000100014204);
				П000100014304 = ОкруглитьЧислоПоФормату(Данные.П000100014304);
				П000100014105 = ОкруглитьЧислоПоФормату(Данные.П000100014105);
				П000100014205 = ОкруглитьЧислоПоФормату(Данные.П000100014205);
				П000100014305 = ОкруглитьЧислоПоФормату(Данные.П000100014305);
				П000100014106 = ОкруглитьЧислоПоФормату(Данные.П000100014106);
				П000100014206 = ОкруглитьЧислоПоФормату(Данные.П000100014206);
				П000100014306 = ОкруглитьЧислоПоФормату(Данные.П000100014306);
				
				
				П000200024103 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024103", Истина);
				П000200024203 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024203", Истина);
				П000200024303 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024303", Истина);
				П000200024403 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024403", Истина);
				П000200024104 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024104", Истина);
				П000200024204 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024204", Истина);
				П000200024304 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024304", Истина);
				П000200024404 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024404", Истина);
				П000200024105 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024105", Истина);
				П000200024205 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024205", Истина);
				П000200024305 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024305", Истина);
				П000200024405 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024405", Истина);
				П000200024106 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024106", Истина);
				П000200024206 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024206", Истина);
				П000200024306 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024306", Истина);
				П000200024406 = СуммаПоказателяПоВсемСтраницам("Раздел12", "П000200024406", Истина);
				
				П000300034103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034103.Значение);
				П000300039103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039103.Значение);
				П000300034104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034104.Значение);
				П000300039104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039104.Значение);
				П000300034105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034105.Значение);
				П000300039105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039105.Значение);
				П000300034106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034106.Значение);
				П000300039106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039106.Значение);
				
				П000300034203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034203.Значение);
				П000300039203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039203.Значение);
				П000300034204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034204.Значение);
				П000300039204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039204.Значение);
				П000300034205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034205.Значение);
				П000300039205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039205.Значение);
				П000300034206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034206.Значение);
				П000300039206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039206.Значение);
				
				П000300034303 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034303.Значение);
				П000300039303 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039303.Значение);
				П000300034304 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034304.Значение);
				П000300039304 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039304.Значение);
				П000300034305 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034305.Значение);
				П000300039305 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039305.Значение);
				П000300034306 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034306.Значение);
				П000300039306 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039306.Значение);
				
				П000300034403 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034403.Значение);
				П000300039403 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039403.Значение);
				П000300034404 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034404.Значение);
				П000300039404 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039404.Значение);
				П000300034405 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034405.Значение);
				П000300039405 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039405.Значение);
				П000300034406 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300034406.Значение);
				П000300039406 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300039406.Значение);
				
				//Расчеты		
				
				П000100011003  = П000200024103 + П000300034103 + П000300039103;
				П000100011103  = П000200024104 + П000300034104 + П000300039104;
				П000100011203  = П000200024105 + П000300034105 + П000300039105;
				П000100011303  = П000200024106 + П000300034106 + П000300039106;
				
				П000100011004  = П000200024203 + П000300034203 + П000300039203;
				П000100011104  = П000200024204 + П000300034204 + П000300039204;
				П000100011204  = П000200024205 + П000300034205 + П000300039205;
				П000100011304  = П000200024206 + П000300034206 + П000300039206;
				
				П000100011005  = П000200024303 + П000300034303 + П000300039303;
				П000100011105  = П000200024304 + П000300034304 + П000300039304;
				П000100011205  = П000200024305 + П000300034305 + П000300039305;
				П000100011305  = П000200024306 + П000300034306 + П000300039306;
				
				П000100011006  = П000200024403 + П000300034403 + П000300039403;
				П000100011106  = П000200024404 + П000300034404 + П000300039404;
				П000100011206  = П000200024405 + П000300034405 + П000300039405;
				П000100011306  = П000200024406 + П000300034406 + П000300039406;
				
				П000100011403  = П000100011103 + П000100011203 + П000100011303;
				П000100011404  = П000100011104 + П000100011204 + П000100011304;
				П000100011405  = П000100011105 + П000100011205 + П000100011305;
				П000100011406  = П000100011106 + П000100011206 + П000100011306;
				
				П000100013003  = П000100010003 + П000100011003 + П000100012003;
				П000100013004  = П000100010004 + П000100011004 + П000100012004;
				П000100013005  = П000100010005 + П000100011005 + П000100012005;
				П000100013006  = П000100010006 + П000100011006 + П000100012006;
				
				П000100014403  = П000100014103 + П000100014203 + П000100014303;
				П000100014404  = П000100014104 + П000100014204 + П000100014304;
				П000100014405  = П000100014105 + П000100014205 + П000100014305;
				П000100014406  = П000100014106 + П000100014206 + П000100014306;
				
				П000100015003  = П000100013003 - П000100014003;
				П000100015004  = П000100013004 - П000100014004;
				П000100015005  = П000100013005 - П000100014005;
				П000100015006  = П000100013006 - П000100014006;
				
			Иначе
				
				П000100011003 = 0;
				П000100011103 = 0;
				П000100011203 = 0;
				П000100011303 = 0;
				П000100011004 = 0;
				П000100011104 = 0;
				П000100011204 = 0;
				П000100011304 = 0;
				П000100011005 = 0;
				П000100011105 = 0;
				П000100011205 = 0;
				П000100011305 = 0;
				П000100011006 = 0;
				П000100011106 = 0;
				П000100011206 = 0;
				П000100011306 = 0;
				П000100011403 = 0;
				П000100011404 = 0;
				П000100011405 = 0;
				П000100011406 = 0;
				П000100013003 = 0;
				П000100013004 = 0;
				П000100013005 = 0;
				П000100013006 = 0;
				П000100014403 = 0;
				П000100014404 = 0;
				П000100014405 = 0;
				П000100014406 = 0;
				П000100015003 = 0;
				П000100015004 = 0;
				П000100015005 = 0;
				П000100015006 = 0;
				
			КонецЕсли;	
			
			//Запишем, что посчитали  		
			Данные.П000100011003 = П000100011003;
			Данные.П000100011103 = П000100011103;
			Данные.П000100011203 = П000100011203;
			Данные.П000100011303 = П000100011303;
			Данные.П000100011004 = П000100011004;
			Данные.П000100011104 = П000100011104;
			Данные.П000100011204 = П000100011204;
			Данные.П000100011304 = П000100011304;
			Данные.П000100011005 = П000100011005;
			Данные.П000100011105 = П000100011105;
			Данные.П000100011205 = П000100011205;
			Данные.П000100011305 = П000100011305;
			Данные.П000100011006 = П000100011006;
			Данные.П000100011106 = П000100011106;
			Данные.П000100011206 = П000100011206;
			Данные.П000100011306 = П000100011306;
			Данные.П000100011403 = П000100011403;
			Данные.П000100011404 = П000100011404;
			Данные.П000100011405 = П000100011405;
			Данные.П000100011406 = П000100011406;
			Данные.П000100013003 = П000100013003;
			Данные.П000100013004 = П000100013004;
			Данные.П000100013005 = П000100013005;
			Данные.П000100013006 = П000100013006;
			Данные.П000100014403 = П000100014403;
			Данные.П000100014404 = П000100014404;
			Данные.П000100014405 = П000100014405;
			Данные.П000100014406 = П000100014406;
			Данные.П000100015003 = П000100015003;
			Данные.П000100015004 = П000100015004;
			Данные.П000100015005 = П000100015005;
			Данные.П000100015006 = П000100015006;
			
		КонецЕсли;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если ТипЗнч(ЭлементДанных.Значение) <> Тип("Число") 
					ИЛИ СтрДлина(ЭлементДанных.Ключ) < 13
					ИЛИ НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;			
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры // РасчетВСтруктуре

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ТаблицаБлока;
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницы, "МногостраничностьВРазделе");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		МногострочностьЕсть = (ИмяГруппы <> Неопределено);
		Если МногостраничностьЕсть Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницы, Ложь);
		ИначеЕсли МногострочностьЕсть Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);	
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел12" Тогда
		
		РасчетВСтруктуре("Раздел12");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел30" Тогда
		// Раздел 3
		//Сбор данных  	
		П000300030103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030103.Значение);
		П000300030203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030203.Значение);
		П000300031103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031103.Значение);
		П000300031203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031203.Значение);
		П000300031403 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031403.Значение);
		П000300031503 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031503.Значение);
		П000300031703 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031703.Значение);
		П000300031803 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031803.Значение);
		П000300035103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035103.Значение);
		П000300035203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035203.Значение);
		П000300036103 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036103.Значение);
		П000300036203 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036203.Значение);
		П000300036403 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036403.Значение);
		П000300036503 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036503.Значение);
		П000300030104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030104.Значение);
		П000300030204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030204.Значение);
		П000300031104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031104.Значение);
		П000300031204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031204.Значение);
		П000300031404 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031404.Значение);
		П000300031504 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031504.Значение);
		П000300031704 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031704.Значение);
		П000300031804 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031804.Значение);
		П000300035104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035104.Значение);
		П000300035204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035204.Значение);
		П000300036104 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036104.Значение);
		П000300036204 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036204.Значение);
		П000300036404 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036404.Значение);
		П000300036504 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036504.Значение);
		П000300030105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030105.Значение);
		П000300030205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030205.Значение);
		П000300031105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031105.Значение);
		П000300031205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031205.Значение);
		П000300031405 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031405.Значение);
		П000300031505 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031505.Значение);
		П000300031705 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031705.Значение);
		П000300031805 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031805.Значение);
		П000300035105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035105.Значение);
		П000300035205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035205.Значение);
		П000300036105 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036105.Значение);
		П000300036205 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036205.Значение);
		П000300036405 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036405.Значение);
		П000300036505 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036505.Значение);
		П000300030106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030106.Значение);
		П000300030206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300030206.Значение);
		П000300031106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031106.Значение);
		П000300031206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031206.Значение);
		П000300031406 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031406.Значение);
		П000300031506 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031506.Значение);
		П000300031706 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031706.Значение);
		П000300031806 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300031806.Значение);
		П000300035106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035106.Значение);
		П000300035206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300035206.Значение);
		П000300036106 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036106.Значение);
		П000300036206 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036206.Значение);
		П000300036406 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036406.Значение);
		П000300036506 = ОкруглитьЧислоПоФормату(мРаздел30.Области.П000300036506.Значение);
		
		//Расчеты
		
		П000300030003 = П000300030103 + П000300030203;
		П000300030004 = П000300030104 + П000300030204;
		П000300030005 = П000300030105 + П000300030205;
		П000300030006 = П000300030106 + П000300030206;
		
		П000300031003 = П000300031103 + П000300031203;
		П000300031004 = П000300031104 + П000300031204;
		П000300031005 = П000300031105 + П000300031205;
		П000300031006 = П000300031106 + П000300031206;
		
		П000300031603 = П000300031703 + П000300031803;
		П000300031604 = П000300031704 + П000300031804;
		П000300031605 = П000300031705 + П000300031805;
		П000300031606 = П000300031706 + П000300031806;
		
		П000300032003 = П000300030103 - П000300031103 - П000300031403 - П000300031703;
		П000300032004 = П000300030104 - П000300031104 - П000300031404 - П000300031704;
		П000300032005 = П000300030105 - П000300031105 - П000300031405 - П000300031705;
		П000300032006 = П000300030106 - П000300031106 - П000300031406 - П000300031706;
		
		П000300032103 = П000300030203 - П000300031203 - П000300031503 - П000300031803;
		П000300032104 = П000300030204 - П000300031204 - П000300031504 - П000300031804;
		П000300032105 = П000300030205 - П000300031205 - П000300031505 - П000300031805;
		П000300032106 = П000300030206 - П000300031206 - П000300031506 - П000300031806;
		
		П000300035003 = П000300035103 + П000300035203;
		П000300035004 = П000300035104 + П000300035204;
		П000300035005 = П000300035105 + П000300035205;
		П000300035006 = П000300035106 + П000300035206;
		
		П000300036003 = П000300036103 + П000300036203;
		П000300036004 = П000300036104 + П000300036204;
		П000300036005 = П000300036105 + П000300036205;
		П000300036006 = П000300036106 + П000300036206;
		
		П000300036303 = П000300036403 + П000300036503;
		П000300036304 = П000300036404 + П000300036504;
		П000300036305 = П000300036405 + П000300036505;
		П000300036306 = П000300036406 + П000300036506;
		
		П000300037003 = П000300035103 - П000300036103 - П000300036403;
		П000300037004 = П000300035104 - П000300036104 - П000300036404;
		П000300037005 = П000300035105 - П000300036105 - П000300036405;
		П000300037006 = П000300035106 - П000300036106 - П000300036406;	  
		
		П000300037103 = П000300035203 - П000300036203 - П000300036503;
		П000300037104 = П000300035204 - П000300036204 - П000300036504;
		П000300037105 = П000300035205 - П000300036205 - П000300036505;
		П000300037106 = П000300035206 - П000300036206 - П000300036506;
		
		П000300038003 = П000300035003 - П000300036003 - П000300036303;
		П000300038004 = П000300035004 - П000300036004 - П000300036304;
		П000300038005 = П000300035005 - П000300036005 - П000300036305;
		П000300038006 = П000300035006 - П000300036006 - П000300036306;
		
		//Запишем, что посчитали
		
		
		мРаздел30.Области.П000300030003.Значение = П000300030003;
		мРаздел30.Области.П000300031003.Значение = П000300031003;
		мРаздел30.Области.П000300031603.Значение = П000300031603;
		мРаздел30.Области.П000300032003.Значение = П000300032003;
		мРаздел30.Области.П000300032103.Значение = П000300032103;
		мРаздел30.Области.П000300035003.Значение = П000300035003;
		мРаздел30.Области.П000300036003.Значение = П000300036003;
		мРаздел30.Области.П000300036303.Значение = П000300036303;
		мРаздел30.Области.П000300037003.Значение = П000300037003;
		мРаздел30.Области.П000300037103.Значение = П000300037103;
		мРаздел30.Области.П000300038003.Значение = П000300038003;
		мРаздел30.Области.П000300030004.Значение = П000300030004;
		мРаздел30.Области.П000300031004.Значение = П000300031004;
		мРаздел30.Области.П000300031604.Значение = П000300031604;
		мРаздел30.Области.П000300032004.Значение = П000300032004;
		мРаздел30.Области.П000300032104.Значение = П000300032104;
		мРаздел30.Области.П000300035004.Значение = П000300035004;
		мРаздел30.Области.П000300036004.Значение = П000300036004;
		мРаздел30.Области.П000300036304.Значение = П000300036304;
		мРаздел30.Области.П000300037004.Значение = П000300037004;
		мРаздел30.Области.П000300037104.Значение = П000300037104;
		мРаздел30.Области.П000300038004.Значение = П000300038004;
		мРаздел30.Области.П000300030005.Значение = П000300030005;
		мРаздел30.Области.П000300031005.Значение = П000300031005;
		мРаздел30.Области.П000300031605.Значение = П000300031605;
		мРаздел30.Области.П000300032005.Значение = П000300032005;
		мРаздел30.Области.П000300032105.Значение = П000300032105;
		мРаздел30.Области.П000300035005.Значение = П000300035005;
		мРаздел30.Области.П000300036005.Значение = П000300036005;
		мРаздел30.Области.П000300036305.Значение = П000300036305;
		мРаздел30.Области.П000300037005.Значение = П000300037005;
		мРаздел30.Области.П000300037105.Значение = П000300037105;
		мРаздел30.Области.П000300038005.Значение = П000300038005;
		мРаздел30.Области.П000300030006.Значение = П000300030006;
		мРаздел30.Области.П000300031006.Значение = П000300031006;
		мРаздел30.Области.П000300031606.Значение = П000300031606;
		мРаздел30.Области.П000300032006.Значение = П000300032006;
		мРаздел30.Области.П000300032106.Значение = П000300032106;
		мРаздел30.Области.П000300035006.Значение = П000300035006;
		мРаздел30.Области.П000300036006.Значение = П000300036006;
		мРаздел30.Области.П000300036306.Значение = П000300036306;
		мРаздел30.Области.П000300037006.Значение = П000300037006;
		мРаздел30.Области.П000300037106.Значение = П000300037106;
		мРаздел30.Области.П000300038006.Значение = П000300038006;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел41" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
		// Раздел 4.1	
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаБлока);
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка5 = Колонка5 + ОкруглитьЧислоПоФормату(Зап.П000410001005);
			Колонка6 = Колонка6 + ОкруглитьЧислоПоФормату(Зап.П000410001006);
			Колонка7 = Колонка7 + ОкруглитьЧислоПоФормату(Зап.П000410001007);
			Колонка8 = Колонка8 + ОкруглитьЧислоПоФормату(Зап.П000410001008);
		КонецЦикла;
		
		мРаздел41.Области.П000410002005.Значение = Колонка5;
		мРаздел41.Области.П000410002006.Значение = Колонка6;
		мРаздел41.Области.П000410002007.Значение = Колонка7;
		мРаздел41.Области.П000410002008.Значение = Колонка8;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел42" Тогда	
		
		//	Раздел 4.2
		
		//Сбор данных
		П000420042103 = мРаздел42.Области.П000420042103.Значение;
		П000420042203 = мРаздел42.Области.П000420042203.Значение;
		П000420042403 = мРаздел42.Области.П000420042403.Значение;
		П000420042503 = мРаздел42.Области.П000420042503.Значение;
		П000420042703 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042703.Значение);
		П000420042803 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042803.Значение);
		П000420042104 = мРаздел42.Области.П000420042104.Значение;
		П000420042204 = мРаздел42.Области.П000420042204.Значение;
		П000420042404 = мРаздел42.Области.П000420042404.Значение;
		П000420042504 = мРаздел42.Области.П000420042504.Значение;
		П000420042704 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042704.Значение);
		П000420042804 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042804.Значение);
		П000420042105 = мРаздел42.Области.П000420042105.Значение;
		П000420042205 = мРаздел42.Области.П000420042205.Значение;
		П000420042405 = мРаздел42.Области.П000420042405.Значение;
		П000420042505 = мРаздел42.Области.П000420042505.Значение;
		П000420042705 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042705.Значение);
		П000420042805 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042805.Значение);
		П000420042106 = мРаздел42.Области.П000420042106.Значение;
		П000420042206 = мРаздел42.Области.П000420042206.Значение;
		П000420042406 = мРаздел42.Области.П000420042406.Значение;
		П000420042506 = мРаздел42.Области.П000420042506.Значение;
		П000420042706 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042706.Значение);
		П000420042806 = ОкруглитьЧислоПоФормату(мРаздел42.Области.П000420042806.Значение);   	
		
		//Расчеты
		П000420042303  = ? (П000420042103 <> 0, (П000420042203 / П000420042103) * 100, 0);
		П000420042304  = ? (П000420042104 <> 0, (П000420042204 / П000420042104) * 100, 0); 
		П000420042305  = ? (П000420042105 <> 0, (П000420042205 / П000420042105) * 100, 0);
		П000420042306  = ? (П000420042106 <> 0, (П000420042206 / П000420042106) * 100, 0);
		
		П000420042603  = ? (П000420042403 <> 0, (П000420042503 / П000420042403) * 100, 0);
		П000420042604  = ? (П000420042404 <> 0, (П000420042504 / П000420042404) * 100, 0);
		П000420042605  = ? (П000420042405 <> 0, (П000420042505 / П000420042405) * 100, 0);
		П000420042606  = ? (П000420042406 <> 0, (П000420042506 / П000420042406) * 100, 0);
		
		П000420042903  = ? (П000420042703 <> 0, (П000420042803 / П000420042703) * 100, 0);
		П000420042904  = ? (П000420042704 <> 0, (П000420042804 / П000420042704) * 100, 0); 
		П000420042905  = ? (П000420042705 <> 0, (П000420042805 / П000420042705) * 100, 0);
		П000420042906  = ? (П000420042706 <> 0, (П000420042806 / П000420042706) * 100, 0);
		
		//Запишем, что посчитали
		мРаздел42.Области.П000420042303.Значение = П000420042303;
		мРаздел42.Области.П000420042603.Значение = П000420042603;
		мРаздел42.Области.П000420042903.Значение = П000420042903;
		мРаздел42.Области.П000420042304.Значение = П000420042304;
		мРаздел42.Области.П000420042604.Значение = П000420042604;
		мРаздел42.Области.П000420042904.Значение = П000420042904;
		мРаздел42.Области.П000420042305.Значение = П000420042305;
		мРаздел42.Области.П000420042605.Значение = П000420042605;
		мРаздел42.Области.П000420042905.Значение = П000420042905;
		мРаздел42.Области.П000420042306.Значение = П000420042306;
		мРаздел42.Области.П000420042606.Значение = П000420042606;
		мРаздел42.Области.П000420042906.Значение = П000420042906;    
		
	ИначеЕсли  ИмяТекущейСтраницыПанели = "Раздел50" Тогда
		
		//Сбор данных
		П000500051003 = ОкруглитьЧислоПоФормату(мРаздел50.Области.П000500051003.Значение);
		П000500052003 = ОкруглитьЧислоПоФормату(мРаздел50.Области.П000500052003.Значение);
		П000500051004 = ОкруглитьЧислоПоФормату(мРаздел50.Области.П000500051004.Значение);
		П000500052004 = ОкруглитьЧислоПоФормату(мРаздел50.Области.П000500052004.Значение);
		
		//Расчет                		
		П000500053003 = П000500051003 - П000500052003;
		П000500053004 = П000500051004 - П000500052004;
				
		//Запишем, что посчитали		
		мРаздел50.Области.П000500053003.Значение = П000500053003;
		мРаздел50.Области.П000500053004.Значение = П000500053004;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ
		
		// Используется, например, в случае изменения точности или единицы измерения
		
		Расчет("Раздел30");
		Расчет("Раздел41");
		Расчет("Раздел42");
		Расчет("Раздел50");
		Расчет("Раздел12");
		
	КонецЕсли;
	
КонецПроцедуры // Расчет()

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомерКорректировки", 3, НомерКорректировкиСтрока);
Конецпроцедуры

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2010Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200001001", 2, , "Выбор тарифа", КоллекцияСписковВыбора["КодыТарифов"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Тариф", 2, , "Выбор тарифа", КоллекцияСписковВыбора["КодыТарифов"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, , "Выбор подписанта", КоллекцияСписковВыбора["Подписант"]);
	
КонецПроцедуры

// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Перебор по страницам.
	Иднтиф = 0;
	Для каждого Раздел Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		// ИмяРаздела = Раздел.Раздел;
		
		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Раздел.Данные[0].СтруктураДанных);
		
		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "ПредставлениеДанных", Ложь);
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногострочностьВРазделе", 0);
		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);
		ПределНеДостигнут = Истина;
		
		Если МногостраничностьВРазделе Тогда
			Если мСтруктураМногостраничныхРазделов[ИмяРаздела].Количество() <> Раздел.Данные.Количество() Тогда
				// Вставим нужные экземпляры.
				Для Инд1 = 1 По Раздел.Данные.Количество() - 1 Цикл
					ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяРаздела);
					ВставитьДополнительнуюСтраницу(ИмяРаздела);  					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Срез Из Раздел.Данные Цикл
			Если МногостраничностьВРазделе Тогда
				ПоказатьСтраницуМногостраничногоРаздела(Иднтиф, ИмяРаздела, Истина);
				Если Раздел.Раздел = "Раздел2" Тогда
					Иднтиф = Иднтиф + 1;
				КонецЕсли;
			КонецЕсли;  			
			
			Для каждого ПоказательОтчета Из Срез.СтруктураДанных Цикл
				
				Показатель = ПоказательОтчета.Ключ;
				Значение = СокрЛП(ПоказательОтчета.Значение);
				
				КоличествоСтрокВБлоке = 0;
				Если МногострочностьВРазделе <> 0 Тогда
					
					// Определим, принмадлежит ли показатель к группе многострочности.
					КоличествоСтрокВБлоке = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, Показатель);
					
					Если КоличествоСтрокВБлоке > 0 Тогда
						Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
							ВставитьДополнительнуюСтроку(Сред(Показатель, 1, 11));
							
							// Если вставка строки по какой-либо причине не состоялась, пропустим показатель.
							Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						ПоказательДляПоискаВТаблицеСоставаПоказателей = Сред(Показатель, 1, 13);
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоСтрокВБлоке = 0 Тогда
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, мПоляПоискаПоказателяВТСП);
				Иначе
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(ПоказательДляПоискаВТаблицеСоставаПоказателей, мПоляПоискаПоказателяВТСП);
				КонецЕсли;
				
				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если ИмяРаздела = "Раздел12" Тогда
						Если (Найти(Показатель, "СуммаМес") = 1) И 
							(Найти(Показатель,"Раздел12") > 0) Тогда
							ТипДанных = "Е";
						ИначеЕсли (Найти(Показатель, "КБКРаздел1_") > 0)
							Или (Показатель = "КБКРаздел1_2")
							Или  (Показатель = "КодПлательщикаРаздел1")
							Или  (Показатель = "ОКАТОРаздел1") Тогда
							ТипДанных = "С";
						ИначеЕсли Найти(Показатель, "Тариф1") = 1 Тогда 
							Показатель = "П000200001001_1";
							ТипДанных = "К";
						ИначеЕсли Найти(Показатель, "Тариф2") = 1 Тогда 
							Показатель = "П000200001001_2";
							ТипДанных = "К";
						ИначеЕсли Найти(Показатель, "П000200001001") = 1 Тогда
							ТипДанных = "К";	
						Иначе
							// Показателя нет в составе показателей и нет в квадратных ячейках.
							Продолжить;
						КонецЕсли;
					Иначе
						// Показатель не обнаружен в составе показателей. Пропускаем.
						Продолжить;
					КонецЕсли;
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;
				
				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;
				
				ДанныеИмпортированы = Истина;
				
				Если КоличествоСтрокВБлоке > 0 Тогда
					Попытка
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области[Показатель].Значение = Значение;
					Исключение
						Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
					КонецПопытки;
					Продолжить;
				КонецЕсли;
				
				Попытка
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
					
				Исключение
					Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(Параметр = Неопределено) Экспорт 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Сообщить("Автозаполнение выполняется только в целых рублях. Необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	Если ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Автозаполнение выполняется только в целых рублях. Необходимо установить точность ""0"".", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	Расчет("Раздел30");
    Расчет("Раздел12");
	
	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, "П0004100010", 34, 0);
	
	СчетчикиЛистовМногостраничныхРазделов = Новый Соответствие;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов Цикл
		СчетчикиЛистовМногостраничныхРазделов.Вставить(Стр.Ключ, 0);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				СчетчикЛистовРаздела = СчетчикиЛистовМногостраничныхРазделов[СтрУровня1.Имя];
				Если СчетчикЛистовРаздела = Неопределено Тогда // раздел не многостраничный
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						СтрУровня2Имя = СтрУровня2.Имя;
						СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
						Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
							Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
								ВставитьДополнительнуюСтроку(СвойстваМнЧ.ИД);
							КонецЕсли;
							СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
							НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
							Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
								УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение, СтрУровня1.Имя);
							КонецЦикла;
							ОбновитьСтруктуруМногострочногоРаздела(СвойстваМнЧ.ИД);
						Иначе // это показатель
							УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение, СтрУровня1.Имя);
						КонецЕсли;
					КонецЦикла;
				Иначе // раздел многостраничный
					СчетчикиЛистовМногостраничныхРазделов.Вставить(СтрУровня1.Имя, СчетчикЛистовРаздела + 1);
					Если СчетчикЛистовРаздела > 0 Тогда // если это не первый лист раздела, то добавим еще один
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, СтрУровня1.Имя, Ложь);
						Расчет(СтрУровня1.Имя);
						ИзменитьТаблицуПараметровАвтозаполнения(1, СтрУровня1.Имя);
						ВставитьДополнительнуюСтраницу("Раздел12");
					КонецЕсли;
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение, СтрУровня1.Имя);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// добавляем показатели в внешнего файла
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);

	// перед расчетом сохраним данные последней страницы Раздела 2
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел12", Истина);
	
	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач Значение,  ИмяРаздела = Неопределено)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	// РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
	// Флаг, что заполнение отчета происходит с учетом данных XML файла.
	// ДанныеXMLПрисутствуют
	ДанныеXMLПрисутствуют = НЕ мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если НЕ ДанныеXMLПрисутствуют Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено Тогда
		// Определим раздел отчета.
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Иначе
		ИмяСтраницыПанели = ИмяРаздела;
	КонецЕсли;
	
	// Есть ли данные по этому разделу в контейнере XML.
	//ДанныеРазделаXML = мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета.Найти(ИмяСтраницыПанели, "Раздел");
	// Просмотрим все разделы в xml документе. Т.к. в одном разделе Раздел2 может содержаться показатели раздела 2.1 и т.д.
	ДанныеРазделаXML = Неопределено;
	Для каждого РазделXML Из мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		Для каждого Экз Из РазделXML.Данные Цикл
			Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) И НЕ ИмяРаздела = "Титульный" Тогда
				ДанныеРазделаXML = РазделXML;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеРазделаXML = Неопределено Тогда
		// В контейнере XML нет данных по заполняемому разделу, и соответвтвенно по показателю.
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	// Получим таблицу раздела.
	ДанныеРазделаXMLДанные = ДанныеРазделаXML.Данные;
	
	Многостраничность = мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели);
	Если Многостраничность Тогда
		ИндАктивнойСтр = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Найти(Истина, "АктивнаяСтраница");
		ИндАктивнойСтраницы = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Индекс(ИндАктивнойСтр);
	КонецЕсли;
	
	Для каждого Экз Из ДанныеРазделаXMLДанные Цикл
		Если Многостраничность Тогда
			Если ИндАктивнойСтраницы <> ДанныеРазделаXMLДанные.Индекс(Экз) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
		Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) Тогда
			// Показатель есть в XML контейнере.
			ЗначениеПоПоказателюИзКонтейнераXML = СокрЛП(Экз.СтруктураДанных[ИмяПоказателя]);
			
			// Если пустая строка, то считаем, что в контейнере xml показателя нет, равносильно или 0, если число или "" если дата.
			Если ПустаяСтрока(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
			ИначеЕсли (СтрДлина(ЗначениеПоПоказателюИзКонтейнераXML) = 10) И (СтрЧислоВхождений(ЗначениеПоПоказателюИзКонтейнераXML, ".") = 2) Тогда
				Год = Прав(ЗначениеПоПоказателюИзКонтейнераXML, 4);
				Мес = Сред(ЗначениеПоПоказателюИзКонтейнераXML, 4, 2);
				День = Лев(ЗначениеПоПоказателюИзКонтейнераXML, 2);
				ЗначениеДата = Год + Мес + День;
				ЗначениеПоПоказателюИзКонтейнераXML = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(ЗначениеДата), Дата(ЗначениеДата), Неопределено);
			ИначеЕсли РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Число(ЗначениеПоПоказателюИзКонтейнераXML);
				Если ЗначениеПоПоказателюИзКонтейнераXML = 0 Тогда
					// В случае, если числовое значение равное 0 в xml, считаем, что показатель отсутствует.
					ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Удаляем ключ, чтобы при окончательном импорте xml данные снова не перетерлись на листе из источника xml.
			// Таким образом остаются только те показатели, которые из ИБ не заполняются или не заполнились.
			
			Экз.СтруктураДанных.Удалить(ИмяПоказателя);
			
		КонецЕсли;
		
		// Если показатель в XML отсутствует (Неопределено) или не заполнен, то всегда записываем в отчет переданное значение (из ИБ).
		Если ЗначениеПоПоказателюИзКонтейнераXML = Неопределено Тогда
			// В контейнере не оказалось необходимого показателя. Заполняем стандартной процедурой.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
			Прервать;
		КонецЕсли;
		
		// Если показатель есть в ИБ и в XML, тогда за основу берем показатель из XML контейнера.
		Если ЗначениеПоПоказателюИзКонтейнераXML <> Неопределено Тогда
			// Значение из XML всегда приоритетнее. Заполняем по данным XML файла.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, ЗначениеПоПоказателюИзКонтейнераXML);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы() Экспорт 

	Перем ИсходноеКоличествоСтрокГруппы;

	мВПрограммеИзмененаОрганизация = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;

	мАдресвФорматеДляВыгрузки = "";

	мАвтоВыборКодов = Ложь;
	
	ФлагСохранения = Ложь;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел12 = ЭлементыФормы.ПолеТабличногоДокументаРаздел12;
	мРаздел30 = ЭлементыФормы.ПолеТабличногоДокументаРаздел30;
	мРаздел41 = ЭлементыФормы.ПолеТабличногоДокументаРаздел41;
	мРаздел42 = ЭлементыФормы.ПолеТабличногоДокументаРаздел42;
	мРаздел50 = ЭлементыФормы.ПолеТабличногоДокументаРаздел50;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// создаём структуру документа, подтверждающего полномочия представителя    		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
            ОтобразитьНомерКорректировки();

			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		
		Если мСкопированаФорма <> Неопределено Тогда
			Если Год(мСохраненныйДок.ДатаОкончания) = 2010 И Год(мДатаКонцаПериодаОтчета) > 2010 Тогда
				мСкопированаИз2010 = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
  	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьМассив();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	НачальнаяПодготовкаФормы();

	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Если мТитульный.Области.ПрПодп.Значение = "1" Тогда 		
		мТитульный.Области.ДокУпПред.Защита = Истина;
		мТитульный.Области.ДокУпПред.ЦветФона = ЦветБелый;
	КонецЕсли;		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
Процедура КнопкаПерейтиНаСтраницуРаздел12Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел12");
	Если ТекущаяСтраницаПервая("Раздел12") Тогда
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			ИзМакета = Истина; 					
		Иначе
			ИзМакета = Ложь;
		КонецЕсли;
		ЗакраситьЖелтым();
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
		УстановитьЦветФонаЯчейки(,,"Раздел12");
	Иначе    	
		ЗакраситьБелым();
	КонецЕсли;
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел12Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел12");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел12");
	Если ТекущаяСтраницаПервая("Раздел12") Тогда
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			ИзМакета = Истина; 					
		Иначе
			ИзМакета = Ложь;
		КонецЕсли;
		ЗакраситьЖелтым();
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета); 
		УстановитьЦветФонаЯчейки(,,"Раздел12");
	Иначе    	
		ЗакраситьБелым();
	КонецЕсли;
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел12Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел12");
	ВставитьДополнительнуюСтраницу("Раздел12");
	//РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел12");
	ЗакраситьБелым();
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел12Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел12");
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел12Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел12");
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел41Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

//КнопкаУдалитьДопСтроки
Процедура КнопкаУдалитьДопСтрокиРаздел41Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
КонецПроцедуры


// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;
	
	Расчет();

КонецПроцедуры // УдалитьДополнительнуюСтроку()



Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	
	Если Найти(ОбластьИмя, "НомСтр") > 0 Тогда
		ИмяРаздела = Сред(Элемент.Имя, 24);
		НомерСтраницы = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, ИмяРаздела, "НомСтр"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , ИмяРаздела                   // Название раздела.
										   , "НомСтр"                 // Имя ячейки для записи.
										   , НомерСтраницы // Первоначальное значение.
										   , 3              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите номер страницы"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 3    // Кол-во квадратиков, если в квадратах
										   );		
		
										   
										   
	ИначеЕсли Найти(ОбластьИмя, "КолЗастрахованных") > 0 Тогда
		
		КолЗастрахованных = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КолЗастрахованных"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "КолЗастрахованных"                 // Имя ячейки для записи.
										   , КолЗастрахованных // Первоначальное значение.
										   , 6              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Истина                       // Это сумма?
										   , "Введите количество"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 6    // Кол-во квадратиков, если в квадратах
										   );
									   
	ИначеЕсли Найти(ОбластьИмя, "СрСписЧисл") > 0 Тогда
		
		СрСписЧисл = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "СрСписЧисл"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "СрСписЧисл"                 // Имя ячейки для записи.
										   , СрСписЧисл // Первоначальное значение.
										   , 5              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Истина                      // Это сумма?
										   , "Введите количество"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 5    // Кол-во квадратиков, если в квадратах
										   );
										   
						   
	ИначеЕсли Найти(ОбластьИмя, "ОКАТО") > 0 Тогда
		
		ОКАТО = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ОКАТО"                 // Имя ячейки для записи.
										   , ОКАТО // Первоначальное значение.
										   , 11              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "ОКАТО"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 11    // Кол-во квадратиков, если в квадратах
										   );
										   
										   
	ИначеЕсли Найти(ОбластьИмя, "НомТФОМС") > 0 Тогда
		
		НомТФОМС = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомТФОМС"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "НомТФОМС"                 // Имя ячейки для записи.
										   , НомТФОМС // Первоначальное значение.
										   , 15              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 15    // Кол-во квадратиков, если в квадратах
										   );
										   
	ИначеЕсли Найти(ОбластьИмя, "ТелОрганизации") > 0 Тогда
		
		ТелОрганизации = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ТелОрганизации"                 // Имя ячейки для записи.
										   , ТелОрганизации // Первоначальное значение.
										   , 15              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 15    // Кол-во квадратиков, если в квадратах
										   );
									   
										   
	ИначеЕсли Найти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;		
				
		ФормаВводаДокументПредставителя = ПолучитьФорму("ФормаВводаДокументПредставителя");
		ФормаВводаДокументПредставителя.СтруктураДокумента = мСтруктураДокУпПред;
		Результат = ФормаВводаДокументПредставителя.ОткрытьМодально();
		
		Если Результат <> Неопределено Тогда
			
			мСтруктураДокУпПред = Результат;    			
			Текст = "";
			
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
			Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
			
			мТитульный.Области.ДокУпПред.Значение = Текст;		
			Модифицированность = Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ОбластьИмя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ПрПодписанта = мТитульный.Области.ПрПодп.Значение;
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		Если Область.Имя = "ПрПодп" Тогда
			ПрПодписантаНов = мТитульный.Области.ПрПодп.Значение;
			СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
			Если СменилсяПрПодписанта Тогда
			Если ПрПодписантаНов = "1" Тогда
				ЗаполнитьСведенияОбОрганизации(, Истина);
			Иначе
				мТитульный.Области.ДокУпПред.Защита = Ложь;
				мТитульный.Области.ДокУпПред.ЦветФона = ЦветЖелтый;
				мТитульный.Области.ОргПодписантФамилия.Значение = "";
			КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
     
     Если ЗначениеЗаполнено(ДобСтрока) Тогда
          Текст = Текст + Префикс + ДобСтрока;
     КонецЕсли;
     
     Возврат Текст;
     
КонецФункции

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

// ПолеТабличногоДокументаРаздел12Выбор
//
Процедура ПолеТабличногоДокументаРаздел12Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел12Выбор

// ПолеТабличногоДокументаРаздел30Выбор
//
Процедура ПолеТабличногоДокументаРаздел30Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел30Выбор


// ПолеТабличногоДокументаРаздел41Выбор
//
Процедура ПолеТабличногоДокументаРаздел41Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел41Выбор

// ПолеТабличногоДокументаРаздел42Выбор
//
Процедура ПолеТабличногоДокументаРаздел42Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел42Выбор

// ПолеТабличногоДокументаРаздел50Выбор
//
Процедура ПолеТабличногоДокументаРаздел50Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел50Выбор


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
	Если ФлагСохранения = Истина Тогда
		Модифицированность = Истина;
	Иначе
		Модифицированность = Ложь;				
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	Если ТекущаяСтраницаПервая("Раздел12") Тогда
		Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
			//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
			ИзМакета = Истина; 					
		Иначе
			ИзМакета = Ложь;
		КонецЕсли;
		ЗакраситьЖелтым();
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
		УстановитьЦветФонаЯчейки(,,"Раздел12");
	Иначе 
		ЗакраситьБелым();
	КонецЕсли;
	Расчет("Раздел30");
	Расчет("Раздел12");
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура расшифровки отчета показателей отчета 
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчетРСВ1_2010", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	ОтобразитьНомерКорректировки()

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;
                 		
	Если (ИмяТекущейСтраницыПанели = "Раздел12") И (НЕ ТекущаяСтраницаПервая("Раздел12")) Тогда
	    ЗакраситьБелым();
	КонецЕсли;
    ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
    ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
	ИзменитьФорматОтображенияНуля();
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел12ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел12ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел30ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел30ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел41ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел12ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел42ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел50ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел50ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел12ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел12ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел30ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел30ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел41ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел42ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел50ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел50ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел12ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел12ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел30ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел30ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел41ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел42ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел42ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел42ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел50ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел50ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел12ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел12ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел30ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел30ПриАктивизацииОбласти()


Процедура ПолеТабличногоДокументаРаздел41ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел41ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел42ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел42ПриАктивизацииОбласти()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1, Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел12";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел30";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел30";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел41";
	СтрокаУровня1.Представление            = "Раздел 4.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел41";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел42";
	СтрокаУровня1.Представление            = "Раздел 4.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел42";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел50";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел50";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ЗаполнитьМассив()
		
	Массив1 = Новый Массив();
	Для каждого Эл Из мТаблицаСоставПоказателей Цикл
		Показатель = Эл.КодПоказателяПоСоставу;
		Если Найти(Показатель, "П0001") > 0 Тогда
			Массив1.Добавить(Показатель);	
		КонецЕсли;  	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗакраситьБелым()   
		
	Для каждого Показатель Из Массив1 Цикл    		
		Область = мРаздел12.Области[Показатель];
		Область.Значение = "";
		Область.Защита = Истина;	
        Область.ЦветФона = ЦветБелый; 
	КонецЦикла; 

КонецПроцедуры

Процедура ЗакраситьЖелтым()   
		
	Для каждого Показатель Из Массив1 Цикл
		Область = мРаздел12.Области[Показатель];
		Область.Защита = Ложь;	
		Область.ЦветФона = ЦветЖелтый; 
	КонецЦикла; 

КонецПроцедуры


Функция ТекущаяСтраницаПервая (ИмяТекущейСтраницыПанели) Экспорт
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭтаФорма.ЭлементыФормы[ИмяТекТабличногоПоля];
	
	Пр = ЭтаФорма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела); 
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы)+1;
	
	Возврат НомерТекущейСтраницы = 1
	
КонецФункции // ()

Процедура ИзменитьФорматОтображенияНуля(ИмяТекущейСтраницыПанели = Неопределено);
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли;
	Если НомерГода = "2010" Тогда
		Если (ИмяТекущейСтраницыПанели = "Раздел12") Тогда
			Если ТекущаяСтраницаПервая("Раздел12") Тогда
				Для инд = 3 По 6 Цикл  
					ИмяОбласти = "П00010001000"+инд;
					мРаздел12.Области[ИмяОбласти].Формат = СтрЗаменить(мРаздел12.Области[ИмяОбласти].Формат, "ЧН=-", "ЧН=");
				КонецЦикла;
			Иначе
				Для инд = 3 По 6 Цикл  
					ИмяОбласти = "П00010001000"+инд;
					мРаздел12.Области[ИмяОбласти].Формат = СтрЗаменить(мРаздел12.Области[ИмяОбласти].Формат, "ЧН=;", "ЧН=-;");
				КонецЦикла;
				
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		// тут код, если форма скопирована из 2010 года.	
		Если мСкопированаИз2010 = Истина Тогда
			Если (ИмяТекущейСтраницыПанели = "Раздел12") И ТекущаяСтраницаПервая("Раздел12") Тогда
				Для инд = 3 По 6 Цикл  
					ИмяОбласти = "П00010001000"+инд;
					мРаздел12.Области[ИмяОбласти].Формат = СтрЗаменить(мРаздел12.Области[ИмяОбласти].Формат, "ЧН=;", "ЧН=-;");
				КонецЦикла; 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	
КонецПроцедуры


// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Если (ИмяТекущейСтраницыПанели = "Раздел12") И (НЕ ТекущаяСтраницаПервая("Раздел12")) Тогда
	    ЗакраситьБелым();
	КонецЕсли;


	Расчет();
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры
// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеПФР(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник, "ПФР");
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	ОтобразитьНомерКорректировки();
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел50ПриАктивизацииОбласти(Элемент)
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(Организация, Число(Параметры.КалендарныйГод), мНомерВыгрузки);
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИмяФайла;
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки700");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			Сообщить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
		
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИмяФайла(Параметры)
	
	мНомерВыгрузки = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(Организация, Число(Параметры.КалендарныйГод));
	мНомерВыгрузки = мНомерВыгрузки + 1;
	
	СтрНомПачки = РегламентированнаяОтчетность.ДополнитьСтроку(Формат(мНомерВыгрузки, "ЧГ="), 5, "0");
	
	Если Параметры.ЭтоГоловнаяОрганизация Тогда
		// имя файла без подразделений.
		ИмяФайла = "PFR-700-Y-" + Параметры.КалендарныйГод + "-ORG-" + Параметры.РегистрационныйНомерПФР +
		"-DCK-" + СтрНомПачки + "-DPT-000000-DCK-00000.XML";
	Иначе
		// Имя файла из подразделения
		КодПодразделения = Прав("100000"+СокрЛП(Организация.Код), 6);
		ИмяФайла = "PFR-700-Y-" + Параметры.КалендарныйГод + "-ORG-" + Параметры.РегистрационныйНомерПФР +
		"-DCK-00000-DPT-" + КодПодразделения + "-DCK-" + СтрНомПачки + ".XML";
	КонецЕсли;
	
	Возврат ИмяФайла;
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// восстанавливаем  документ, подтверждающий полномочия представителя;
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
КонецФункции

Функция ПредставлениеЧисла(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Строка") Тогда
		ЗначЧисло = СокрЛП(ЗначЧисло);	
		ЗначЧисло = ?(ЗначениеЗаполнено(ЗначЧисло) И ОбщегоНазначения.ТолькоЦифрыВСтроке(ЗначЧисло), Число(ЗначЧисло), 0);
	КонецЕсли;
	
	СтрЧисло = Формат(ЗначЧисло, "ЧН=; ЧГ=");	
	
	Возврат СтрЧисло;
	
КонецФункции

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита)
	Если Найти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
КонецПроцедуры // ЗаменитьБуквуЁ()

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	
	// заполнение свойств программы подготовки данных
	ВерсПрог = РегламентированнаяОтчетность.СформироватьВерсПрог();
	
	ПромСтрока = СтрЗаменить(ВерсПрог," ",Символы.ПС);
	ПоследнееВхождениеРазделителя = СтрДлина(ВерсПрог) - СтрДлина(СтрПолучитьСтроку(ПромСтрока,СтрЧислоСтрок(ПромСтрока)));
	
	Параметры.Вставить("НазваниеПрограммы", ВРЕГ(СокрЛП(Лев(ВерсПрог, ПоследнееВхождениеРазделителя - 1))));
	Параметры.Вставить("ВерсияПрограммы", СокрЛП(Сред(ВерсПрог, ПоследнееВхождениеРазделителя + 1)));
	
	// 
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	Параметры.Вставить("ЭтоГоловнаяОрганизация", НЕ ЗначениеЗаполнено(Организация.ГоловнаяОрганизация));
	
	
	Параметры.Вставить("НомерВПачке", 1);
	Параметры.Вставить("РегистрационныйНомерПФР", СокрЛП(Титульный.НомРег));
	Параметры.Вставить("НомерКорректировки", СокрЛП(Титульный.НомерКорректировки));
	Параметры.Вставить("КодОтчетногоПериода", СокрЛП(Титульный.Период));
	Параметры.Вставить("КалендарныйГод", СокрЛП(Титульный.ОтчетГод));
	Если Параметры.ЭтоПБОЮЛ Тогда
		ФИОИП = РазложитьФИО(ВРЕГ(Титульный.ОргНазв));
		
		ЗаменитьБуквуЁ(ФИОИП.Фамилия, 	"Фамилия физического лица");
		ЗаменитьБуквуЁ(ФИОИП.Имя, 		"Имя физического лица");
		ЗаменитьБуквуЁ(ФИОИП.Отчество, 	"Отчество физического лица");
		
		Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
		Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
		Параметры.Вставить("ОтчествоИП", 	ФИОИП.Отчество);
		
		Параметры.Вставить("ОГРНИП", СокрЛП(Титульный.ОГРН));
	Иначе
		НаимОрг = ВРЕГ(СокрЛП(Титульный.ОргНазв));
		ЗаменитьБуквуЁ(НаимОрг, 	"Наименование организации");
		Параметры.Вставить("НаименованиеОрганизации", НаимОрг);
		Параметры.Вставить("КПП", СокрЛП(СтрЗаменить(Титульный.КПП, "-", "")));
		Параметры.Вставить("ОГРН", СокрЛП(Титульный.ОГРН));
	КонецЕсли;
	
	Параметры.Вставить("КодПоОКПО", ПредставлениеЧисла(Титульный.ОКПО));
	Параметры.Вставить("КодПоОКОПФ", СокрЛП(Титульный.ОКОПФ));
	Параметры.Вставить("КодПоОКФС", СокрЛП(Титульный.ОКФС));
	
	Параметры.Вставить("РегистрационныйНомерТФОМС", ПредставлениеЧисла(Титульный.НомТФОМС));
	Параметры.Вставить("ИНН", СокрЛП(Титульный.ИНН));
	
	Параметры.Вставить("КодПоОКАТО", СокрЛП(Титульный.ОКАТО));
	Параметры.Вставить("КодПоОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(СтрЗаменить(Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	Параметры.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	Параметры.Вставить("ЛицоПодтверждающееСведения", ПредставлениеЧисла(Титульный.ПрПодп));
	
	ФИОПодписанта = РазложитьФИО(ВРЕГ(Титульный.ОргПодписантФамилия));
	
	ЗаменитьБуквуЁ(ФИОПодписанта.Фамилия, 	"Фамилия подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Имя, 		"Имя подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Отчество, 	"Отчество подписанта");

	Параметры.Вставить("ФамилияПодписанта",	ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",		ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",ФИОПодписанта.Отчество);	
	
	Параметры.Вставить("КоличествоЗЛ", ПредставлениеЧисла(Титульный.КолЗастрахованных));
	Параметры.Вставить("СреднесписочнаяЧисленность", ПредставлениеЧисла(Титульный.СрСписЧисл));
	Параметры.Вставить("КодУстановленногоТарифа", СокрЛП(Титульный.Тариф));
	
	КоличествоСтраниц = ПредставлениеЧисла(Титульный.СоставленаНа);
	КоличествоСтраниц = ?(КоличествоСтраниц = "0", "1", КоличествоСтраниц);
	Параметры.Вставить("КоличествоСтраниц", КоличествоСтраниц);
	Параметры.Вставить("КоличествоЛистовПриложения", ПредставлениеЧисла(Титульный.Прил));
	
	//
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ");
	
	// заполнение параметров адреса
	Параметры.Вставить("Индекс", СокрЛП(Титульный.Адрес1));
	
	РегионСокращение = "";
	РегионНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес2)), РегионСокращение);
	ЗаменитьБуквуЁ(РегионНазвание, "Регион");
	Параметры.Вставить("РегионНазвание", РегионНазвание);
	Параметры.Вставить("РегионСокращение", РегионСокращение);
	
	РайонСокращение = "";
	РайонНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес3)), РайонСокращение);
	ЗаменитьБуквуЁ(РайонНазвание, "Район");
	Параметры.Вставить("РайонНазвание", РайонНазвание);
	Параметры.Вставить("РайонСокращение", РайонСокращение);
	
	ГородСокращение = "";
	ГородНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес4)), ГородСокращение);
	ЗаменитьБуквуЁ(ГородНазвание, "Город");
	Параметры.Вставить("ГородНазвание", ГородНазвание);
	Параметры.Вставить("ГородСокращение", ГородСокращение);
	
	НаселенныйПунктСокращение = "";
	НаселенныйПунктНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес5)), НаселенныйПунктСокращение);
	ЗаменитьБуквуЁ(НаселенныйПунктНазвание, "Населенный пункт");
	Параметры.Вставить("НаселенныйПунктНазвание", НаселенныйПунктНазвание);
	Параметры.Вставить("НаселенныйПунктСокращение", НаселенныйПунктСокращение);
	
	УлицаСокращение = "";
	УлицаНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес6)), УлицаСокращение);
	ЗаменитьБуквуЁ(УлицаНазвание, "Улица");
	Параметры.Вставить("УлицаНазвание", УлицаНазвание);
	Параметры.Вставить("УлицаСокращение", УлицаСокращение);
	
	ДомНомер = ВРЕГ(СокрЛП(Титульный.Адрес7));
	Если ЗначениеЗаполнено(ДомНомер) Тогда
		Параметры.Вставить("ДомСокращение", "Д");
		Параметры.Вставить("ДомНомер", ДомНомер);
	КонецЕсли;
	
	КорпусНомер = ВРЕГ(СокрЛП(Титульный.Адрес8));
	Если ЗначениеЗаполнено(КорпусНомер) Тогда
		Параметры.Вставить("КорпусСокращение", "КОРП");
		Параметры.Вставить("КорпусНомер", КорпусНомер);
	КонецЕсли;
	
	КвартираНомер = ВРЕГ(СокрЛП(Титульный.Адрес9));
	Если ЗначениеЗаполнено(КвартираНомер) Тогда
		Параметры.Вставить("КвартираСокращение", "КВ");
		Параметры.Вставить("КвартираНомер", КвартираНомер);
	КонецЕсли;
	
	Параметры.Вставить("НаименованиеУдостоверяющего", ВРЕГ(СокрЛП(мСтруктураДокУпПред.НаименованиеУдостоверяющего)));
	Параметры.Вставить("СерияРимскиеЦифры", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРимскиеЦифры)));
	Параметры.Вставить("СерияРусскиеБуквы", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРусскиеБуквы)));
	Параметры.Вставить("НомерУдостоверяющего", ПредставлениеЧисла(мСтруктураДокУпПред.НомерУдостоверяющего));
	Параметры.Вставить("ДатаВыдачи", Формат(мСтруктураДокУпПред.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
	КемВыдан = ВРЕГ(СокрЛП(мСтруктураДокУпПред.КемВыдан));
	ЗаменитьБуквуЁ(КемВыдан, "Кем выдан");
	Параметры.Вставить("КемВыдан", КемВыдан);
	
	Параметры.Вставить("ДатаЗаполнения", Титульный.ДатаПодписи);
	
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция ЛишьОдноИзЗначениеЗаполнено(Значение1, Значение2)
	ЕстьЗначение1 = ЗначениеЗаполнено(Значение1);
	ЕстьЗначение2 = ЗначениеЗаполнено(Значение2);
	
	Возврат ЕстьЗначение1 И НЕ ЕстьЗначение2 ИЛИ ЕстьЗначение2 И НЕ ЕстьЗначение1;
КонецФункции 

Функция РегНомерПФРСоответствуетТребованиям(Знач РегНомерПФР) Экспорт
	
	Для Инд = 0 По 8 Цикл
		РегНомерПФР = СтрЗаменить(РегНомерПФР, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат РегНомерПФР = "999-999-999999";
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.ИНН) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.НаименованиеОрганизации)) ИЛИ (Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.ФамилияИП)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан налогоплательщик!", "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ РегНомерПФРСоответствуетТребованиям(Параметры.РегистрационныйНомерПФР) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Значение рег. номера в ПФР не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра)!", "Титульный", "НомРег");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//Если (НЕ Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.ОГРН)) ИЛИ (Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.ОГРНИП)) Тогда
	//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОГРН!", "Титульный", "ОГРН");
	//	СтатусПроверки = Ложь;
	//КонецЕсли;

	Если ПустаяСтрока(Параметры.КодПоОКАТО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код ОКАТО!", "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрЗаменить(Параметры.КодПоОКВЭД, ".", ""))) ИЛИ НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.КодПоОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Некорректное значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//Если НЕ Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.КодПоОКПО) Тогда
	//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код ОКПО!", "Титульный", "ОКПО");
	//	СтатусПроверки = Ложь;
	//КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КодУстановленногоТарифа) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код тарифа!", "Титульный", "Тариф");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЛицоПодтверждающееСведения = "0" Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан тип подписанта!", "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана фамилия подписанта!", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано имя подписанта!", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЛицоПодтверждающееСведения = "2" Тогда
		Если ПустаяСтрока(Параметры.НаименованиеУдостоверяющего) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано наименование документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Параметры.ДатаВыдачи) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана дата выдачи документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//адрес
	Если ПустаяСтрока(Параметры.Индекс) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан почтовый индекс адреса регистрации!", "Титульный", "Адрес1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.РегионНазвание, Параметры.РегионСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Регион не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес2");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.РайонНазвание, Параметры.РайонСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Район не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес3");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.ГородНазвание, Параметры.ГородСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Город не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес4");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
    Если ЛишьОдноИзЗначениеЗаполнено(Параметры.НаселенныйПунктНазвание, Параметры.НаселенныйПунктСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Населенный пункт не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес5");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	 Если ЛишьОдноИзЗначениеЗаполнено(Параметры.УлицаНазвание, Параметры.УлицаСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Улица не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес6");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//раздел 1.2
	Раздел12 = мДанныеОтчета.Раздел12;
	
	Для Каждого ЛистРаздела12 Из Раздел12 Цикл
		НомерЛиста = Раздел12.Индекс(ЛистРаздела12) + 1;
		ДанныеЛиста = ЛистРаздела12.Данные;
		
		КодТарифа = ДанныеЛиста.П000200001001_1 + ДанныеЛиста.П000200001001_2;
		
		Если ПустаяСтрока(КодТарифа) Тогда
			НомерЛиста = Раздел12.Индекс(ЛистРаздела12) + 1;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 1.2 не задан код тарифа!", "Раздел12", "П000200001001_1", НомерЛиста);			
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//раздел 4.1
	ДанныеРаздела41 = мДанныеОтчета.ПолеТабличногоДокументаРаздел41;
	НомСтроки = 1;
	
	ФИОСотрудника = Неопределено;
	ДатаВыдачи = Неопределено;
	ДатаОкончания = Неопределено;
	СуммаВсего = Неопределено;
	Сумма1Месяц = Неопределено;
	Сумма2Месяц = Неопределено;
	Сумма3Месяц = Неопределено;
	
	Пока ДанныеРаздела41.Свойство("П000410001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела41.Свойство("П000410001003_" + НомерСтроки, ДатаВыдачи);
		ДанныеРаздела41.Свойство("П000410001004_" + НомерСтроки, ДатаОкончания);
		ДанныеРаздела41.Свойство("П000410001005_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела41.Свойство("П000410001006_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела41.Свойство("П000410001007_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела41.Свойство("П000410001008_" + НомерСтроки, Сумма3Месяц);
		
		
		Если ЗначениеЗаполнено(ФИОСотрудника) ИЛИ  ЗначениеЗаполнено(ДатаВыдачи) ИЛИ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(СуммаВсего) 
		ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
					
		Если СтрокаЗаполнена Тогда
			
			ФИО = РазложитьФИО(ФИОСотрудника);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 4.1, в строке " + НомерСтроки + " не указана фамилия сотрудника!", "Раздел41", "П000410001002_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 4.1, в строке " + НомерСтроки + " не указано имя сотрудника!", "Раздел41", "П000410001002_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаВыдачи) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 4.1, строке " + НомерСтроки + " не указана дата выдачи справки!", "Раздел41", "П000410001003_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Возврат СтатусПроверки;
			 
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(Параметры, УзелРодитель)
	
	Титульный			= мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел12			= мДанныеОтчета.Раздел12;
	Раздел30			= мДанныеОтчета.ПолеТабличногоДокументаРаздел30;
	Раздел41			= мДанныеОтчета.ПолеТабличногоДокументаРаздел41;
	Раздел42			= мДанныеОтчета.ПолеТабличногоДокументаРаздел42;
	Раздел50			= мДанныеОтчета.ПолеТабличногоДокументаРаздел50;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "НаименованиеОрганизации"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "КПП"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРН"));
	Иначе
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ФИОфизическогоЛица"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРНИП"));
	КонецЕсли;
	  	
	//Разделы 1 и 2 расположены на одном многостраничном табличном поле
	//Но повторяться может только раздел 2, раздел 1 присутствует лишь на первой странице
	УзелРасчетСтраховыхВзносовПоУстановленномуТарифуШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчетСтраховыхВзносовПоУстановленномуТарифу");
	Для Каждого ЛистРаздела12 Из Раздел12 Цикл
		
		// выгружаем раздел 1
		Если Раздел12.Индекс(ЛистРаздела12) = 0 Тогда
			УзелРасчетПоНачисленнымИуплаченнымСтраховымВзносам = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчетПоНачисленнымИуплаченнымСтраховымВзносам");
			ЗаполнитьДаннымиУзел(ЛистРаздела12.Данные, УзелРасчетПоНачисленнымИуплаченнымСтраховымВзносам);
		КонецЕсли;
		
		// выгружаем раздел 2
		УзелРасчетСтраховыхВзносовПоУстановленномуТарифу = СкопироватьУзел(УзелРодитель, УзелРасчетСтраховыхВзносовПоУстановленномуТарифуШаблон);
		ЗаполнитьДаннымиУзел(ЛистРаздела12.Данные, УзелРасчетСтраховыхВзносовПоУстановленномуТарифу);
		
		КодТарифа = СокрЛП(ЛистРаздела12.Данные.П000200001001_1 + ЛистРаздела12.Данные.П000200001001_2);
		ЗадатьЗначениеЭлемента(УзелРасчетСтраховыхВзносовПоУстановленномуТарифу, "КодТарифа", КодТарифа);
		
	КонецЦикла;
	УдалитьУзел(УзелРасчетСтраховыхВзносовПоУстановленномуТарифуШаблон);
	
	// выгружаем раздел 3
	УзелРасчетСтраховыхВзносовПоПониженномуТарифу = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчетСтраховыхВзносовПоПониженномуТарифу");
	ЗаполнитьДаннымиУзел(Раздел30, УзелРасчетСтраховыхВзносовПоПониженномуТарифу);
	
	// выгружаем раздел 4.1
	УзелОснованияДляПримененияПониженногоТарифа = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОснованияДляПримененияПониженногоТарифа");
	УзелСведенияДляПримененияПониженногоТарифа = ПолучитьПодчиненныйЭлемент(УзелОснованияДляПримененияПониженногоТарифа, "СведенияДляПримененияПониженногоТарифа");
	УзелСведенияОработникеИнвалидеШаблон = ПолучитьПодчиненныйЭлемент(УзелСведенияДляПримененияПониженногоТарифа, "СведенияОработникеИнвалиде");
	УзелИтогоВыплат = ПолучитьПодчиненныйЭлемент(УзелСведенияДляПримененияПониженногоТарифа, "ИтогоВыплат");
	
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел41, "П000410001001_" + Формат(НомСтр, "ЧГ=")) Цикл
		
		// если ФИО заполнено, то выгружаем строку
		Если ЗначениеЗаполнено(Раздел41["П000410001002_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			УзелСведенияОработникеИнвалиде = СкопироватьУзел(УзелСведенияДляПримененияПониженногоТарифа, УзелСведенияОработникеИнвалидеШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел41, УзелСведенияОработникеИнвалиде, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(УзелСведенияОработникеИнвалиде, "ФИО");
			ФИО = РазложитьФИО(ВРЕГ(Раздел41["П000410001002_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗаменитьБуквуЁ(ФИО.Фамилия, 	"Раздел 4.1, строка " + ЧислоВыгруженныхСтрок +" Фамилия");
			ЗаменитьБуквуЁ(ФИО.Имя, 		"Раздел 4.1, строка " + ЧислоВыгруженныхСтрок +" Имя");
			ЗаменитьБуквуЁ(ФИО.Отчество,	"Раздел 4.1, строка " + ЧислоВыгруженныхСтрок +" Отчество");
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия", ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя", ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			ЗадатьЗначениеЭлемента(УзелСведенияОработникеИнвалиде, "НомерПП", ЧислоВыгруженныхСтрок);
			
			УзелСуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(УзелСведенияОработникеИнвалиде, "СуммыВыплатИвознаграждений");
			
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел41, УзелСуммыВыплатИвознаграждений, НомСтр, , Истина);
			
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	ЗадатьЗначениеЭлемента(УзелСведенияДляПримененияПониженногоТарифа, "КоличествоРаботниковИнвалидов", ЧислоВыгруженныхСтрок);
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		ЗаполнитьДаннымиУзел(Раздел41, УзелИтогоВыплат);
	КонецЕсли;
	
	УдалитьУзел(УзелСведенияОработникеИнвалидеШаблон);
	
	// выгружаем раздел 4.2
	УзелРасчетСоответствияУсловийНаПравоПримененияПониженногоТарифа = ПолучитьПодчиненныйЭлемент(УзелОснованияДляПримененияПониженногоТарифа, "РасчетСоответствияУсловийНаПравоПримененияПониженногоТарифа");
	ЗаполнитьДаннымиУзел(Раздел42, УзелРасчетСоответствияУсловийНаПравоПримененияПониженногоТарифа);
	
	// выгружаем раздел 5
	УзелСведенияОзадолженностиПоСтраховымВзносамНаОПСпоСостояниюНаКонецГода = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СведенияОзадолженностиПоСтраховымВзносамНаОПСпоСостояниюНа31.12.2009");;
	ЗаполнитьДаннымиУзел(Раздел50, УзелСведенияОзадолженностиПоСтраховымВзносамНаОПСпоСостояниюНаКонецГода);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки); // !!!
	
КонецПроцедуры

Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ?(Узел.Формат = "N", СокрЛП(Узел.Значение) = "" ИЛИ Число(Узел.Значение) = 0 ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Параметры.ИмяКлючевогоУзлаСодержательнойЧасти = Узел.Код Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy"));
		Иначе
			Узел.Значение = "";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Параметры.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда // !!!
				ЗаполнитьДаннымиУзел(Параметры, Стр);
				ЗаполнитьСодержательнуюЧасть(Параметры, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ФайлПФР");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI, , , Символы.ПС);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2010Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(16, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ОписаниеТиповДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0004100010";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 34;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000410001001", ОписаниеТиповЧисло5);
СтруктураГруппы1.Колонки.Добавить("П000410001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000410001003", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000410001004", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000410001005", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000410001006", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000410001007", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000410001008", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
ЦветБелый = Новый Цвет(255, 255, 255);
ЦветЖелтый = Новый Цвет(255, 255, 192);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРаздел12 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел12.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел12", ТаблицаСтраницыРаздел12);


//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "22/03/2010";

// Код отчета условный
мКодОтчета   = "1169999";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 7.00", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеФормы = Новый СписокЗначений;



