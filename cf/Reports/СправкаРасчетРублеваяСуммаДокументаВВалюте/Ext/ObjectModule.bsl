Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
	
// процедура формирует и выводит отчет по движениям документа
Процедура СформироватьИВывестиОтчет() Экспорт
	
	ДокументДляВывода = Новый ТабличныйДокумент;
	ВозможностьПостроения = СформироватьОтчет(ДокументДляВывода);
	Если ВозможностьПостроения Тогда
		ДокументДляВывода.Показать("Справка-расчет ""Рублевая сумма документа в иностранной валюте""");
	КонецЕсли;	
	
КонецПроцедуры
	
Функция СформироватьОтчет(ДокументРезультат) Экспорт

	Если НЕ Документ.Проведен Тогда
		Сообщить("Справка-расчет формируется только по проведенным документам.");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);
	
	//Определение необходимых параметров документа
	
	Если  СтруктураШапкиДокумента.Свойство("ВидДокумента") Тогда
		ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	Иначе
		ВидДокумента = Документ.Метаданные().Имя;
	КонецЕсли;
	Если  СтруктураШапкиДокумента.Свойство("ВидОперации") Тогда
		ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли;
	ПараметрыДвиженийДокумента = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации);
	НаправлениеДвижения = ПараметрыДвиженийДокумента.Направление;
	Если НЕ (НаправлениеДвижения = "Поступление" ИЛИ НаправлениеДвижения = "Выбытие") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по документам, отражающим операции приобретения или реализации.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не найден реквизит """"Валюта документа""");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не заполнен реквизит """"Валюта документа""");
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по документам в иностранной валюте.");
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
			ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется по операции реализации покупателю.");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
	
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется по операции поступления от поставщика.");
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не найден реквизит """"Счет расчетов с контрагентом""");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не заполнен реквизит """"Счет расчетов с контрагентом""");
		Возврат Ложь;
	КонецЕсли;
	
	// Определяем зачтенные авансы по оборотам
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) * &Знак КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаОборот) * &Знак КАК ВалютнаяСуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВремени, &МоментВремени, Регистратор, Счет = &СчетРасчетов, &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта";
	
	Запрос.УстановитьПараметр("Регистратор", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	
	Запрос.УстановитьПараметр("СчетРасчетов", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	
	Множитель = ?(НаправлениеДвижения = "Выбытие", -1, 1);
	Запрос.УстановитьПараметр("Знак",Множитель);
	
	МоментВремениДокумента = Документ.МоментВремени();
	Запрос.УстановитьПараметр("МоментВремени", МоментВремениДокумента);
	
	Результат = Запрос.Выполнить();
	ДвиженияДокумента = Результат.Выгрузить();
	
	Если Не Документ.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
		СуммаДокументаВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента,
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	Иначе
		
		СуммаДокументаБезНДС = СтруктураШапкиДокумента.СуммаДокумента - УчетНДС.ПолучитьНДСДокумента(Документ);
		
		СуммаДокументаВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокументаБезНДС,
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	КонецЕсли;
	ТаблицаРасчетов = Новый ТаблицаЗначений();
	ТаблицаРасчетов.Колонки.Добавить("Документ");
	ТаблицаРасчетов.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаРасчетов.Колонки.Добавить("Сумма",		  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("СуммаВал",	  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	СтрокиЗачетаАванса = ДвиженияДокумента.НайтиСтроки(Новый Структура("КорСчет", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам));
	Если СтрокиЗачетаАванса.Количество() <> 0 Тогда
		
		СтрокаСубконтоДокументы = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
		Если СтрокаСубконтоДокументы = Неопределено Тогда
			// Субконто документов расчетов на счете авансов не обнаружено.
			// Невозможно определить документ, по которому зачтен аванс и дату, а также курс документа.
		Иначе
			СубконтоДокументаРасчетов = СтрокаСубконтоДокументы.НомерСтроки;
		КонецЕсли;
				
		//Заполнение таблицы значениями зачитываемых авансов.
		Для каждого СтрокаАванса Из СтрокиЗачетаАванса Цикл
			
			Если ЗначениеЗаполнено(СубконтоДокументаРасчетов) Тогда
				ДокументАванса = СтрокаАванса["КорСубконто"+СубконтоДокументаРасчетов];
			Иначе
				ДокументАванса = Неопределено;
			КонецЕсли;
			
			СтрокаРасчетов = ТаблицаРасчетов.Добавить();
			СтрокаРасчетов.Сумма	= СтрокаАванса.СуммаОборот;
			СтрокаРасчетов.СуммаВал = СтрокаАванса.ВалютнаяСуммаОборот;
			
			Если ЗначениеЗаполнено(ДокументАванса) Тогда
				
				СтрокаРасчетов.Документ	= ДокументАванса;
				СтрокаРасчетов.ДатаДокумента = ДокументАванса.Дата;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ОбнаруженАванс = (ТаблицаРасчетов.Количество() > 0);
	Если ОбнаруженАванс Тогда
		ТаблицаРасчетов.Свернуть("ДатаДокумента, Документ", "Сумма, СуммаВал");
		ТаблицаРасчетов.Сортировать("ДатаДокумента возр, Документ возр");
	КонецЕсли;
	
	СуммаПредоплатыВал = ТаблицаРасчетов.Итог("СуммаВал");
	СуммаПредоплатыРуб = ТаблицаРасчетов.Итог("Сумма");
	КурсПредоплаты     = ?(СуммаПредоплатыВал <> 0, Окр(СуммаПредоплатыРуб / СуммаПредоплатыВал, 4), 0);
	
	СуммаНеоплаченоВал = СуммаДокументаВал - СуммаПредоплатыВал;
	КурсДокумента = СтруктураШапкиДокумента.КурсВзаиморасчетов;
	
    // Определим рублевый эквивалент неоплаченной суммы
	
	Если СуммаНеоплаченоВал <> 0 Тогда
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда
		    // Документ выписан в валюте, рублевый остаток определяем по курсу расчетов
			СуммаНеоплаченоРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНеоплаченоВал,
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
				СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
        Иначе
		    // Документ выписан в рублях (расчеты в у.е.), рублевый остаток определяем пропорционально валютному
			СуммаНеоплаченоРуб = Окр(СтруктураШапкиДокумента.СуммаДокумента * СуммаНеоплаченоВал/СуммаДокументаВал, 2);
		КонецЕсли;
	Иначе
		СуммаНеоплаченоРуб = 0;
	КонецЕсли; 
	
	СуммаДокументаРуб = СуммаПредоплатыРуб + СуммаНеоплаченоРуб;
	РасчетныйКурсВал  = ?(СуммаДокументаВал <> 0, Окр(СуммаДокументаРуб / СуммаДокументаВал, 4), 0);
	
	ДокументРезультат.Очистить();
	
	Макет = ПолучитьМакет("РублеваяСуммаДокументаВВалюте");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата), "НаименованиеДляПечатныхФорм,");
	ОбластьШапка.Параметры.ОрганизацияПредставление = ОрганизацияПредставление;
	
	ОбластьШапка.Параметры.Дата = Формат(СтруктураШапкиДокумента.Дата, "ДФ=dd.MM.yyyy");
	
	КонтрагентПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата), "НаименованиеДляПечатныхФорм,");
	ОбластьШапка.Параметры.КонтрагентПредставление	= КонтрагентПредставление;
	ОбластьШапка.Параметры.Контрагент				= СтруктураШапкиДокумента.Контрагент;
	
	ОбластьШапка.Параметры.ДокументПредставление	= Строка(СтруктураШапкиДокумента.Ссылка);
	ОбластьШапка.Параметры.ВалютаПредставление		= Строка(СтруктураШапкиДокумента.ВалютаДокумента);
	ОбластьШапка.Параметры.Документ 				= СтруктураШапкиДокумента.Ссылка;
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	ОбластьПоказатели = Макет.ПолучитьОбласть("Показатели");
	
	ОбластьПоказатели.Параметры.СуммаДокументаВал		= СуммаДокументаВал;
	ОбластьПоказатели.Параметры.СуммаПредоплатыВал		= СуммаПредоплатыВал;
	ОбластьПоказатели.Параметры.СуммаПредоплатыРуб		= СуммаПредоплатыРуб;
	ОбластьПоказатели.Параметры.КурсПредоплаты			= КурсПредоплаты;
	ОбластьПоказатели.Параметры.СуммаНеоплаченоВал		= СуммаНеоплаченоВал;
	ОбластьПоказатели.Параметры.КурсДокумента			= КурсДокумента;
	ОбластьПоказатели.Параметры.СуммаНеоплаченоРуб		= СуммаНеоплаченоРуб;
	ОбластьПоказатели.Параметры.СуммаДокументаРуб		= СуммаДокументаРуб;
	ОбластьПоказатели.Параметры.РасчетныйКурсВал		= РасчетныйКурсВал;
	
	ДокументРезультат.Вывести(ОбластьПоказатели);
	
	Если ОбнаруженАванс Тогда
		
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаПредоплата"));
		
       	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПредоплата");
		
		Для Каждого Аванс из ТаблицаРасчетов Цикл
			ОбластьСтрока.Параметры.ДокументПредоплатыПредставление = Строка(Аванс.Документ);
			ОбластьСтрока.Параметры.СуммаПредоплатыВал = Аванс.СуммаВал;
			ОбластьСтрока.Параметры.СуммаПредоплатыРуб = Аванс.Сумма;
			ДокументРезультат.Вывести(ОбластьСтрока);
		КонецЦикла;
		
	   	ОбластьПодвалПредоплата = Макет.ПолучитьОбласть("ПодвалПредоплата");
		ОбластьПодвалПредоплата.Параметры.СуммаПредоплатыВал = СуммаПредоплатыВал;
		ОбластьПодвалПредоплата.Параметры.СуммаПредоплатыРуб = СуммаПредоплатыРуб;
		ДокументРезультат.Вывести(ОбластьПодвалПредоплата);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку     = Ложь;
	ДокументРезультат.ТолькоПросмотр      = Истина;
	ДокументРезультат.Автомасштаб         = Истина;

	Возврат Истина;
	
КонецФункции

#КонецЕсли 

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

