////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел2_4;

// Признак того, что организация является головной  и имеет обособленные подразделения
Перем мОрганизацияИмеетОбособленныеПодразделения;

// Хранят сведения о должностных лицах
Перем мОргКодИМНС;
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПред;
Перем мОргКодОКАТО;
Перем мИННУпПредставитель;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
//Перем мВерсияФормы;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Хранят суммы налога, отображаемые в квадратах
Перем СуммаНалогаСтрах;
Перем П000010003000_Страх;
Перем П000010004000_Страх;
Перем П000010005000_Страх;

Перем СуммаНалогаНакоп;
Перем П000010003000_Накоп;
Перем П000010004000_Накоп;
Перем П000010005000_Накоп;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем СвойстваЗаполненияОтчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	//СписокПоказателейВнутрСвязи = Новый СписокЗначений;
	//СписокПоказателейВнутрСвязи.Добавить("П000030007003");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = НомерМесяца;
	мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
	мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках()

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиУпП     = "";
	ДатаПодписиФЛ      = "";

	Если Не(мИННДиректор = Неопределено) ИЛИ Не ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если Не(мИННБухгалтер = Неопределено) ИЛИ Не ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если Не ПустаяСтрока(мТитульный.Области.ОргУП.Значение) Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Если Не ПустаяСтрока(мТитульный.Области.ТипОрг4.Значение) Тогда
		ДатаПодписиФЛ  = ДатаПодписи;
	КонецЕсли;


	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУпП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиФЛ"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиФЛ,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мФизЛица.  Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1.  Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Перем ИННДиректор;
	Перем ИННБухгалтер;
	
	Попытка
		
		Если Организация  = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО, ОКАТО, РегНомПФР");
		
		ОргКодИМНС = СведенияОбОрганизации.КодНО;
		Если ПустаяСтрока(мОргКодИМНС) ИЛИ СтрДлина(мОргКодИМНС) <> 4  Тогда
			мТитульный.Области.КодИМНС1.Значение = Сред(ОргКодИМНС, 1, 1);
			мТитульный.Области.КодИМНС2.Значение = Сред(ОргКодИМНС, 2, 1);
			мТитульный.Области.КодИМНС3.Значение = Сред(ОргКодИМНС, 3, 1);
			мТитульный.Области.КодИМНС4.Значение = Сред(ОргКодИМНС, 4, 1);
		КонецЕсли;
		
		ОргКодОКАТО = СведенияОбОрганизации.ОКАТО;
		Если ПустаяСтрока(мОргКодОКАТО) Тогда
			мРаздел1.Области.КодОКАТО1.Значение  = Сред(ОргКодОКАТО, 1, 1);
			мРаздел1.Области.КодОКАТО2.Значение  = Сред(ОргКодОКАТО, 2, 1);
			мРаздел1.Области.КодОКАТО3.Значение  = Сред(ОргКодОКАТО, 3, 1);
			мРаздел1.Области.КодОКАТО4.Значение  = Сред(ОргКодОКАТО, 4, 1);
			мРаздел1.Области.КодОКАТО5.Значение  = Сред(ОргКодОКАТО, 5, 1);
			мРаздел1.Области.КодОКАТО6.Значение  = Сред(ОргКодОКАТО, 6, 1);
			мРаздел1.Области.КодОКАТО7.Значение  = Сред(ОргКодОКАТО, 7, 1);
			мРаздел1.Области.КодОКАТО8.Значение  = Сред(ОргКодОКАТО, 8, 1);
			мРаздел1.Области.КодОКАТО9.Значение  = Сред(ОргКодОКАТО, 9, 1);
			мРаздел1.Области.КодОКАТО10.Значение = Сред(ОргКодОКАТО, 10, 1);
			мРаздел1.Области.КодОКАТО11.Значение = Сред(ОргКодОКАТО, 11, 1);
		КонецЕсли;
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "ФИОРук");
		Сведения.Добавить("", "ИННРук");
		Сведения.Добавить("", "ФИОБух");
		Сведения.Добавить("", "ИННБух");
		
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		ОргДиректор = "";
		ИННДиректор = "";
		
		ОргБухгалтер = "";
		ИННБухгалтер = "";
		
		ОргСведения.Свойство("ФИОРук", ОргДиректор);
		ОргСведения.Свойство("ИННРук", ИННДиректор);
		ОргСведения.Свойство("ФИОБух", ОргБухгалтер);
		ОргСведения.Свойство("ИННБух", ИННБухгалтер);
		
		Если ПБОЮЛ Тогда
			ОргДиректор   = "";
			ОргБухгалтер  = "";
			мИННДиректор  = "            ";
			мИННБухгалтер = "            ";
			ИННДиректор   = "            ";
			ИННБухгалтер  = "            ";
		КонецЕсли;
		
		Если ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
			мТитульный.Области.ОргДиректор.Значение  = ОргДиректор;
		КонецЕсли;
		
		Если ПустаяСтрока(мИННДиректор) ИЛИ СтрДлина(мИННДиректор) <> 12 Тогда
			Для НомЯчейки = 1 По 12 Цикл
				ЦифраИНН = Сред(ИННДиректор, НомЯчейки, 1);
				мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение) Тогда
			мТитульный.Области.ОргБухгалтер.Значение = ОргБухгалтер;
		КонецЕсли;
		
		Если ПустаяСтрока(мИННБухгалтер) Тогда
			Для НомЯчейки = 1 По 12 Цикл
				ЦифраИНН = Сред(ИННБухгалтер, НомЯчейки, 1);
				мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьДатуВЯчейках();
		
		// Заполним ИНН и КПП организации в верхней части листов отчета
		ИНН     = Организация.ИНН;
		
		Если Не ПустаяСтрока(ИНН) Тогда
			Пока СтрДлина(ИНН) < 12 Цикл
				ИНН = "0" + ИНН;
			КонецЦикла;
		КонецЕсли;
		
		КПП         = Организация.КПП;
		
		Если ПБОЮЛ Тогда
			Сведения = Новый СписокЗначений;
			Сведения.Добавить("", "ФИО"); // Полное наименование 
			ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
			ОргНазв = "";
			ОргСведения.Свойство("ФИО", ОргНазв);
		Иначе
			
			ОргНазв     = Организация.НаименованиеПолное;
			Если ПустаяСтрока(ОргНазв) Тогда
				ОргНазв = Организация.Наименование;
			КонецЕсли;
			
		КонецЕсли;
		
		РегНомерПФР = СведенияОбОрганизации.РегНомПФР;
		
		мТитульный.Области.ОргНазв.Значение     = ОргНазв;
		мТитульный.Области.РегНомерПФР.Значение = РегНомерПФР;
		
		Для НомЯчейки = 1 По 12 Цикл
			
			мТитульный.Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мФизЛица.  Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел1.  Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2.  Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_1.Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_2.Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_2.Области["ИНН2_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_2.Области["ИНН3_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_3.Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			мРаздел2_4.Области["ИНН1_" + НомЯчейки].Значение = Сред(ИНН, НомЯчейки, 1);
			
			Если Не НомЯчейки > 9 Тогда
				
				мТитульный.Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мФизЛица.  Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел1.  Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2.  Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_1.Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_2.Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_2.Области["КПП2_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_2.Области["КПП3_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_3.Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				мРаздел2_4.Области["КПП1_" + НомЯчейки].Значение = Сред(КПП, НомЯчейки, 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Установим тарифы страховых взносов на странице "Раздел 2.2"
		// для следующих категорий налогоплательщика:
		//  организации, индивидуальные предприниматели и частные лица.
		
		// Для мужчин  1952 года рождения и старше и женщин 1956 года рождения  и старше
		// на страховую часть трудовой пенсии  
		мРаздел2_2.Области.П000220010006.Значение = 14;   мРаздел2_2.Области.П000220021006.Значение = 14000;
		мРаздел2_2.Области.П000220022006.Значение = 7.9;  мРаздел2_2.Области.П000220031006.Значение = 29800;
		мРаздел2_2.Области.П000220032006.Значение = 3.95; мРаздел2_2.Области.П000220040006.Значение = 41650;
		
		// Для мужчин с 1953 по 1966 год рождения и женщин с 1957 по 1966 год  рождения
		// на страховую часть трудовой пенсии  
		мРаздел2_2.Области.П000220010106.Значение = 12;   мРаздел2_2.Области.П000220021106.Значение = 12000;
		мРаздел2_2.Области.П000220022106.Значение = 6.8;  мРаздел2_2.Области.П000220031106.Значение = 25600;
		мРаздел2_2.Области.П000220032106.Значение = 3.39; мРаздел2_2.Области.П000220040106.Значение = 35770;
		
		// на накопительную часть трудовой пенсии  
		мРаздел2_2.Области.П000220010108.Значение = 2;    мРаздел2_2.Области.П000220021108.Значение = 2000;
		мРаздел2_2.Области.П000220022108.Значение = 1.1;  мРаздел2_2.Области.П000220031108.Значение = 4200;
		мРаздел2_2.Области.П000220032108.Значение = 0.56; мРаздел2_2.Области.П000220040108.Значение = 5880;
		
		// Для лиц 1967 года рождения и моложе 
		// на страховую часть трудовой пенсии  
		мРаздел2_2.Области.П000220010206.Значение = 10;   мРаздел2_2.Области.П000220021206.Значение = 10000;
		мРаздел2_2.Области.П000220022206.Значение = 5.64; мРаздел2_2.Области.П000220031206.Значение = 21280;
		мРаздел2_2.Области.П000220032206.Значение = 2.82; мРаздел2_2.Области.П000220040206.Значение = 29740;
		
		// на накопительную часть трудовой пенсии  
		мРаздел2_2.Области.П000220010208.Значение = 4;    мРаздел2_2.Области.П000220021208.Значение = 4000;
		мРаздел2_2.Области.П000220022208.Значение = 2.26; мРаздел2_2.Области.П000220031208.Значение = 8520;
		мРаздел2_2.Области.П000220032208.Значение = 1.13; мРаздел2_2.Области.П000220040208.Значение = 11910;
		
		ЗаполнитьДатуВЯчейках();
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	//мРаздел1.Области.РазмерностьПрописью.Текст       = РазмерностьПрописьюТекст;
	//мРаздел2.Области.РазмерностьПрописью.Текст       = РазмерностьПрописьюТекст;
	//мПриложенияАБ.Области.РазмерностьПрописью.Текст  = РазмерностьПрописьюТекст;
	//мПриложенияВГ.Области.РазмерностьПрописью.Текст  = РазмерностьПрописьюТекст;
	//мПриложенияВГ.Области.РазмерностьПрописью1.Текст = РазмерностьПрописьюТекст;
	//мПриложениеД.Области.РазмерностьПрописью.Текст   = РазмерностьПрописьюТекст;
	//мПриложениеЕ.Области.РазмерностьПрописью.Текст   = РазмерностьПрописьюТекст;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ФорматируемаяОбласть.Формат = мСтрокаФормата;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя) 

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//  ОчищатьЗащищенныеПоказатели - признак очистки защищенных областей
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						ВывестиНаПечатьЛист(СтруктураПараметров);
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		ВывестиНаПечатьЛист(СтруктураПараметров);
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	СписокСохранения.Вставить("ФлПодсчетСтраниц", ?(мСчетчикСтраниц = Неопределено, Ложь, мСчетчикСтраниц));

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вставляем среднесписочную численность работников организации по месяцам
	СписокСохранения.Вставить("Численность1Месяц", СредняяЧисленность1Месяц);
	СписокСохранения.Вставить("Численность2Месяц", СредняяЧисленность2Месяц);
	СписокСохранения.Вставить("Численность3Месяц", СредняяЧисленность3Месяц);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	Численность1Месяц = 0;
	Численность2Месяц = 0;
	Численность3Месяц = 0;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	мСчетчикСтраниц = ?(мСчетчикСтраниц = Неопределено, Ложь, мСчетчикСтраниц);

	// восстанавливаем среднесписочную численность работников организации по месяцам
	Если СписокСохранения.Свойство("Численность1Месяц", Численность1Месяц) Тогда
		СредняяЧисленность1Месяц = Численность1Месяц;
	КонецЕсли;
	Если СписокСохранения.Свойство("Численность2Месяц", Численность2Месяц) Тогда
		СредняяЧисленность2Месяц = Численность2Месяц;
	КонецЕсли;
	Если СписокСохранения.Свойство("Численность3Месяц", Численность3Месяц) Тогда
		СредняяЧисленность3Месяц = Численность3Месяц;
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура заполняет суммы авановых платежей в ячейках
// поля табличного документа на странице "Раздел 1" формы.
//
Процедура ЗаполнитьСуммы_в_Квадратах()

	// Убираем в квадратах символ '-' в случае нулевой суммы налога.
	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");

	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	СтрСуммаНалогаСтрах    = Формат(СуммаНалогаСтрах,    СтрокаФорматаЯчейки);
	СтрП000010003000_Страх = Формат(П000010003000_Страх, СтрокаФорматаЯчейки);
	СтрП000010004000_Страх = Формат(П000010004000_Страх, СтрокаФорматаЯчейки);
	СтрП000010005000_Страх = Формат(П000010005000_Страх, СтрокаФорматаЯчейки);

	СтрСуммаНалогаНакоп    = Формат(СуммаНалогаНакоп,    СтрокаФорматаЯчейки);
	СтрП000010003000_Накоп = Формат(П000010003000_Накоп, СтрокаФорматаЯчейки);
	СтрП000010004000_Накоп = Формат(П000010004000_Накоп, СтрокаФорматаЯчейки);
	СтрП000010005000_Накоп = Формат(П000010005000_Накоп, СтрокаФорматаЯчейки);

	// Вставляем лидирующие пробелы для отображения чисел в ячейках
	// с выравниванием к правому краю
	СтрСуммаНалогаСтрах    = РегламентированнаяОтчетность.ДополнитьСтроку(СтрСуммаНалогаСтрах,    15, " ");
	СтрП000010003000_Страх = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_Страх, 15, " ");
	СтрП000010004000_Страх = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_Страх, 15, " ");
	СтрП000010005000_Страх = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_Страх, 15, " ");
	
	СтрСуммаНалогаНакоп    = РегламентированнаяОтчетность.ДополнитьСтроку(СтрСуммаНалогаНакоп,    15, " ");
	СтрП000010003000_Накоп = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_Накоп, 15, " ");
	СтрП000010004000_Накоп = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_Накоп, 15, " ");
	СтрП000010005000_Накоп = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_Накоп, 15, " ");


	// Выводим суммы авансовых платежей в квадратах
	Для Ном = 1 По 15 Цикл

		мРаздел1.Области["СумНалогСтрах"   + Ном].Значение = Сред(СтрСуммаНалогаСтрах,    Ном, 1);
		мРаздел1.Области["СумНалогСтрах1М" + Ном].Значение = Сред(СтрП000010003000_Страх, Ном, 1);
		мРаздел1.Области["СумНалогСтрах2М" + Ном].Значение = Сред(СтрП000010004000_Страх, Ном, 1);
		мРаздел1.Области["СумНалогСтрах3М" + Ном].Значение = Сред(СтрП000010005000_Страх, Ном, 1);

		мРаздел1.Области["СумНалогНакоп"   + Ном].Значение = Сред(СтрСуммаНалогаНакоп,    Ном, 1);
		мРаздел1.Области["СумНалогНакоп1М" + Ном].Значение = Сред(СтрП000010003000_Накоп, Ном, 1);
		мРаздел1.Области["СумНалогНакоп2М" + Ном].Значение = Сред(СтрП000010004000_Накоп, Ном, 1);
		мРаздел1.Области["СумНалогНакоп3М" + Ном].Значение = Сред(СтрП000010005000_Накоп, Ном, 1);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСуммы_в_Квадратах()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "")

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Суммы авансовых платежей на страховую часть трудовой пенсии
		СуммаНалогаСтрах    = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020031006.Значение );
		
		П000010003000_Страх = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032006.Значение );
		П000010004000_Страх = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033006.Значение );
		П000010005000_Страх = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034006.Значение );
		
		// Суммы авансовых платежей на накопительную часть трудовой пенсии
		СуммаНалогаНакоп    = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020041006.Значение );
		
		П000010003000_Накоп = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042006.Значение );
		П000010004000_Накоп = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043006.Значение );
		П000010005000_Накоп = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044006.Значение );

		// Заполняем сумму авансовых платежей в квадратах
		ЗаполнитьСуммы_в_Квадратах();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2

		// строка 0100
		мРаздел2.Области.П000020010003.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050004.Значение );
		мРаздел2.Области.П000020010004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050104.Значение );
		мРаздел2.Области.П000020010005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050204.Значение );
		мРаздел2.Области.П000020010007.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050105.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050205.Значение );

		// строка 0300
		мРаздел2.Области.П000020030003.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050007.Значение );
		мРаздел2.Области.П000020030004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050107.Значение );
		мРаздел2.Области.П000020030005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050207.Значение );

		// строка 0400
		мРаздел2.Области.П000020040004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050109.Значение );
		мРаздел2.Области.П000020040005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220050209.Значение );

		// строка 0110
		мРаздел2.Области.П000020011003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014003.Значение );

		мРаздел2.Области.П000020011004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014004.Значение );

		мРаздел2.Области.П000020011005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014005.Значение );

		мРаздел2.Области.П000020011007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014007.Значение );

		// строка 0310
		мРаздел2.Области.П000020031003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034003.Значение );

		мРаздел2.Области.П000020031004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034004.Значение );

		мРаздел2.Области.П000020031005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034005.Значение );

		мРаздел2.Области.П000020031007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034007.Значение );

		// строка 0410
		мРаздел2.Области.П000020041004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044004.Значение );

		мРаздел2.Области.П000020041005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044005.Значение );

		мРаздел2.Области.П000020041007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044007.Значение );

		// строка 0220
		мРаздел2.Области.П000020022003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032003.Значение );
		мРаздел2.Области.П000020022004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042004.Значение );

		мРаздел2.Области.П000020022005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042005.Значение );

		мРаздел2.Области.П000020022007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042007.Значение );

		// строка 0230
		мРаздел2.Области.П000020023003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033003.Значение );
		мРаздел2.Области.П000020023004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043004.Значение );

		мРаздел2.Области.П000020023005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043005.Значение );
		мРаздел2.Области.П000020023007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043007.Значение );

		// строка 0240
		мРаздел2.Области.П000020024003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034003.Значение );
		мРаздел2.Области.П000020024004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044004.Значение );

		мРаздел2.Области.П000020024005.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034005.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044005.Значение );

		мРаздел2.Области.П000020024007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044007.Значение );

		// строка 0210
		мРаздел2.Области.П000020021003.Значение = мРаздел2.Области.П000020022003.Значение
		                                        + мРаздел2.Области.П000020023003.Значение
		                                        + мРаздел2.Области.П000020024003.Значение;

		мРаздел2.Области.П000020021004.Значение = мРаздел2.Области.П000020022004.Значение
		                                        + мРаздел2.Области.П000020023004.Значение
		                                        + мРаздел2.Области.П000020024004.Значение;

		мРаздел2.Области.П000020021005.Значение = мРаздел2.Области.П000020022005.Значение
		                                        + мРаздел2.Области.П000020023005.Значение
		                                        + мРаздел2.Области.П000020024005.Значение;

		мРаздел2.Области.П000020021007.Значение = мРаздел2.Области.П000020022007.Значение
		                                        + мРаздел2.Области.П000020023007.Значение
		                                        + мРаздел2.Области.П000020024007.Значение;

		// строка 0200
		мРаздел2.Области.П000020020003.Значение = мРаздел2.Области.П000020030003.Значение;
		мРаздел2.Области.П000020020004.Значение = мРаздел2.Области.П000020030004.Значение
		                                        + мРаздел2.Области.П000020040004.Значение;

		мРаздел2.Области.П000020020005.Значение = мРаздел2.Области.П000020030005.Значение
		                                        + мРаздел2.Области.П000020040005.Значение;

		мРаздел2.Области.П000020020007.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020030007.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020040007.Значение );

		// графа 6 строк 0100 - 0440
		мРаздел2.Области.П000020010006.Значение = мРаздел2.Области.П000020010003.Значение
		                                        + мРаздел2.Области.П000020010004.Значение
		                                        + мРаздел2.Области.П000020010005.Значение;

		мРаздел2.Области.П000020012006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020012005.Значение );

		мРаздел2.Области.П000020013006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020013005.Значение );

		мРаздел2.Области.П000020014006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020014005.Значение );

		мРаздел2.Области.П000020030006.Значение = мРаздел2.Области.П000020030003.Значение
		                                        + мРаздел2.Области.П000020030004.Значение
		                                        + мРаздел2.Области.П000020030005.Значение;

		мРаздел2.Области.П000020032006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020032005.Значение );

		мРаздел2.Области.П000020033006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020033005.Значение );

		мРаздел2.Области.П000020034006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034003.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020034005.Значение );

		мРаздел2.Области.П000020040006.Значение = мРаздел2.Области.П000020040004.Значение
		                                        + мРаздел2.Области.П000020040005.Значение;

		мРаздел2.Области.П000020042006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020042005.Значение );

		мРаздел2.Области.П000020043006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020043005.Значение );

		мРаздел2.Области.П000020044006.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044004.Значение )
		                                        + ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020044005.Значение );

		мРаздел2.Области.П000020011006.Значение = мРаздел2.Области.П000020011003.Значение
		                                        + мРаздел2.Области.П000020011004.Значение
		                                        + мРаздел2.Области.П000020011005.Значение;

		мРаздел2.Области.П000020020006.Значение = мРаздел2.Области.П000020020003.Значение
		                                        + мРаздел2.Области.П000020020004.Значение
		                                        + мРаздел2.Области.П000020020005.Значение;

		мРаздел2.Области.П000020021006.Значение = мРаздел2.Области.П000020021003.Значение
		                                        + мРаздел2.Области.П000020021004.Значение
		                                        + мРаздел2.Области.П000020021005.Значение;

		мРаздел2.Области.П000020022006.Значение = мРаздел2.Области.П000020022003.Значение
		                                        + мРаздел2.Области.П000020022004.Значение
		                                        + мРаздел2.Области.П000020022005.Значение;

		мРаздел2.Области.П000020023006.Значение = мРаздел2.Области.П000020023003.Значение
		                                        + мРаздел2.Области.П000020023004.Значение
		                                        + мРаздел2.Области.П000020023005.Значение;

		мРаздел2.Области.П000020024006.Значение = мРаздел2.Области.П000020024003.Значение
		                                        + мРаздел2.Области.П000020024004.Значение
		                                        + мРаздел2.Области.П000020024005.Значение;

		мРаздел2.Области.П000020031006.Значение = мРаздел2.Области.П000020031003.Значение
		                                        + мРаздел2.Области.П000020031004.Значение
		                                        + мРаздел2.Области.П000020031005.Значение;

		мРаздел2.Области.П000020041006.Значение = мРаздел2.Области.П000020041004.Значение
		                                        + мРаздел2.Области.П000020041005.Значение;

		// Вычисляем показатели Раздела 1 отчета
		Расчет("Раздел1");
		Расчет("Раздел2_3");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.1

		// строка 010
		мРаздел2_1.Области.П000210001003.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001006.Значение );

		// строки 012 - 014
		мРаздел2_1.Области.П000210001203.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001205.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001206.Значение );

		мРаздел2_1.Области.П000210001303.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001305.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001306.Значение );

		мРаздел2_1.Области.П000210001403.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001405.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001406.Значение );

		// строка 011 
		мРаздел2_1.Области.П000210001103.Значение = мРаздел2_1.Области.П000210001203.Значение
		                                          + мРаздел2_1.Области.П000210001303.Значение
		                                          + мРаздел2_1.Области.П000210001403.Значение;

		мРаздел2_1.Области.П000210001104.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001204.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001304.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001404.Значение );

		мРаздел2_1.Области.П000210001105.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001205.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001305.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001405.Значение );

		мРаздел2_1.Области.П000210001106.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001206.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001306.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001406.Значение );

		// строка 016
		мРаздел2_1.Области.П000210001603.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001703.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001803.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001903.Значение );

		мРаздел2_1.Области.П000210001604.Значение = ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001704.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001804.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_1.Области.П000210001904.Значение );

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.2

		// строка 060
		мРаздел2_2.Области.П000220010304.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010004.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010104.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010204.Значение );

		мРаздел2_2.Области.П000220010305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010205.Значение );

		мРаздел2_2.Области.П000220010307.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010007.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010107.Значение ) 
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010207.Значение );

		мРаздел2_2.Области.П000220010309.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010109.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010209.Значение );

		мРаздел2_2.Области.П000220010310.Значение = мРаздел2_2.Области.П000220010010.Значение
		                                          + мРаздел2_2.Области.П000220010110.Значение
		                                          + мРаздел2_2.Области.П000220010210.Значение;

		// строка 210	
		мРаздел2_2.Области.П000220021004.Значение = ОкруглитьЧислоПоФормату( 100000 * мРаздел2_2.Области.П000220021010.Значение );
		мРаздел2_2.Области.П000220021007.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021004.Значение
		                                                                   * мРаздел2_2.Области.П000220021006.Значение
		                                                                   / 100000 );

		// строка 211
		мРаздел2_2.Области.П000220021104.Значение = ОкруглитьЧислоПоФормату( 100000 * мРаздел2_2.Области.П000220021110.Значение );
		мРаздел2_2.Области.П000220021107.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021104.Значение
		                                                                   * мРаздел2_2.Области.П000220021106.Значение
		                                                                   / 100000 );

		мРаздел2_2.Области.П000220021109.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021104.Значение
		                                                                   * мРаздел2_2.Области.П000220021108.Значение
		                                                                   / 100000 );

		// строка 212
		мРаздел2_2.Области.П000220021204.Значение = ОкруглитьЧислоПоФормату( 100000 * мРаздел2_2.Области.П000220021210.Значение );

		мРаздел2_2.Области.П000220021207.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021204.Значение
		                                                                   * мРаздел2_2.Области.П000220021206.Значение
		                                                                   / 100000 );

		мРаздел2_2.Области.П000220021209.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021204.Значение
		                                                                   * мРаздел2_2.Области.П000220021208.Значение
		                                                                   / 100000 );

		// строка 213
		мРаздел2_2.Области.П000220021304.Значение = мРаздел2_2.Области.П000220021004.Значение
		                                          + мРаздел2_2.Области.П000220021104.Значение
		                                          + мРаздел2_2.Области.П000220021204.Значение;

		мРаздел2_2.Области.П000220021305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021205.Значение );

		мРаздел2_2.Области.П000220021307.Значение = мРаздел2_2.Области.П000220021007.Значение
		                                          + мРаздел2_2.Области.П000220021107.Значение
		                                          + мРаздел2_2.Области.П000220021207.Значение;

		мРаздел2_2.Области.П000220021309.Значение = мРаздел2_2.Области.П000220021109.Значение
		                                          + мРаздел2_2.Области.П000220021209.Значение;

		мРаздел2_2.Области.П000220021310.Значение = мРаздел2_2.Области.П000220021010.Значение
		                                          + мРаздел2_2.Области.П000220021110.Значение
		                                          + мРаздел2_2.Области.П000220021210.Значение;

		// строка 200
		мРаздел2_2.Области.П000220020004.Значение = мРаздел2_2.Области.П000220021004.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022004.Значение );

		мРаздел2_2.Области.П000220020005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022005.Значение );

		мРаздел2_2.Области.П000220020007.Значение = мРаздел2_2.Области.П000220021007.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022007.Значение );

		мРаздел2_2.Области.П000220020010.Значение = мРаздел2_2.Области.П000220021010.Значение;

		// строка 201
		мРаздел2_2.Области.П000220020104.Значение = мРаздел2_2.Области.П000220021104.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022104.Значение );

		мРаздел2_2.Области.П000220020105.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022105.Значение );

		мРаздел2_2.Области.П000220020107.Значение = мРаздел2_2.Области.П000220021107.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022107.Значение );

		мРаздел2_2.Области.П000220020109.Значение = мРаздел2_2.Области.П000220021109.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022109.Значение );

		мРаздел2_2.Области.П000220020110.Значение = мРаздел2_2.Области.П000220021110.Значение;

		// строка 202
		мРаздел2_2.Области.П000220020204.Значение = мРаздел2_2.Области.П000220021204.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022204.Значение );

		мРаздел2_2.Области.П000220020205.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220021205.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022205.Значение );

		мРаздел2_2.Области.П000220020207.Значение = мРаздел2_2.Области.П000220021207.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022207.Значение );

		мРаздел2_2.Области.П000220020209.Значение = мРаздел2_2.Области.П000220021209.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022209.Значение );

		мРаздел2_2.Области.П000220020210.Значение = мРаздел2_2.Области.П000220021210.Значение;

		// строка 203
		мРаздел2_2.Области.П000220020304.Значение = мРаздел2_2.Области.П000220020004.Значение
		                                          + мРаздел2_2.Области.П000220020104.Значение
		                                          + мРаздел2_2.Области.П000220020204.Значение;

		мРаздел2_2.Области.П000220020305.Значение = мРаздел2_2.Области.П000220020005.Значение
		                                          + мРаздел2_2.Области.П000220020105.Значение
		                                          + мРаздел2_2.Области.П000220020205.Значение;

		мРаздел2_2.Области.П000220020307.Значение = мРаздел2_2.Области.П000220020007.Значение
		                                          + мРаздел2_2.Области.П000220020107.Значение
		                                          + мРаздел2_2.Области.П000220020207.Значение;

		мРаздел2_2.Области.П000220020309.Значение = мРаздел2_2.Области.П000220020109.Значение
		                                          + мРаздел2_2.Области.П000220020209.Значение;

		мРаздел2_2.Области.П000220020310.Значение = мРаздел2_2.Области.П000220020010.Значение
		                                          + мРаздел2_2.Области.П000220020110.Значение
		                                          + мРаздел2_2.Области.П000220020210.Значение;

		// строка 223
		мРаздел2_2.Области.П000220022304.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022004.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022104.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022204.Значение );

		мРаздел2_2.Области.П000220022305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022205.Значение );

		мРаздел2_2.Области.П000220022307.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022007.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022107.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022207.Значение );

		мРаздел2_2.Области.П000220022309.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022109.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220022209.Значение );

		// строка 310
		мРаздел2_2.Области.П000220031004.Значение = ОкруглитьЧислоПоФормату( 300000 * мРаздел2_2.Области.П000220031010.Значение );
		мРаздел2_2.Области.П000220031007.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031004.Значение
		                                                                   * мРаздел2_2.Области.П000220031006.Значение
		                                                                   / 300000 );

		// строка 311
		мРаздел2_2.Области.П000220031104.Значение = ОкруглитьЧислоПоФормату( 300000 * мРаздел2_2.Области.П000220031110.Значение );

		мРаздел2_2.Области.П000220031107.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031104.Значение
		                                                                   * мРаздел2_2.Области.П000220031106.Значение
		                                                                   / 300000 );

		мРаздел2_2.Области.П000220031109.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031104.Значение
		                                                                   * мРаздел2_2.Области.П000220031108.Значение
		                                                                   / 300000 );

		// строка 312
		мРаздел2_2.Области.П000220031204.Значение = ОкруглитьЧислоПоФормату( 300000 * мРаздел2_2.Области.П000220031210.Значение );

		мРаздел2_2.Области.П000220031207.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031204.Значение
		                                                                   * мРаздел2_2.Области.П000220031206.Значение
		                                                                   / 300000 );

		мРаздел2_2.Области.П000220031209.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031204.Значение
		                                                                   * мРаздел2_2.Области.П000220031208.Значение
		                                                                   / 300000 );

		// строка 313
		мРаздел2_2.Области.П000220031304.Значение = мРаздел2_2.Области.П000220031004.Значение
		                                          + мРаздел2_2.Области.П000220031104.Значение
		                                          + мРаздел2_2.Области.П000220031204.Значение;

		мРаздел2_2.Области.П000220031305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031205.Значение );

		мРаздел2_2.Области.П000220031307.Значение = мРаздел2_2.Области.П000220031007.Значение
		                                          + мРаздел2_2.Области.П000220031107.Значение
		                                          + мРаздел2_2.Области.П000220031207.Значение;

		мРаздел2_2.Области.П000220031309.Значение = мРаздел2_2.Области.П000220031109.Значение
		                                          + мРаздел2_2.Области.П000220031209.Значение;

		мРаздел2_2.Области.П000220031310.Значение = мРаздел2_2.Области.П000220031010.Значение
		                                          + мРаздел2_2.Области.П000220031110.Значение
		                                          + мРаздел2_2.Области.П000220031210.Значение;

		// строка 323
		мРаздел2_2.Области.П000220032304.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032004.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032104.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032204.Значение );

		мРаздел2_2.Области.П000220032305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032205.Значение );

		мРаздел2_2.Области.П000220032307.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032007.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032107.Значение ) 
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032207.Значение );

		мРаздел2_2.Области.П000220032309.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032109.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032209.Значение );

		// строка 300
		мРаздел2_2.Области.П000220030004.Значение = мРаздел2_2.Области.П000220031004.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032004.Значение );

		мРаздел2_2.Области.П000220030005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032005.Значение );

		мРаздел2_2.Области.П000220030007.Значение = мРаздел2_2.Области.П000220031007.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032007.Значение );

		мРаздел2_2.Области.П000220030010.Значение = мРаздел2_2.Области.П000220031010.Значение;

		// строка 301
		мРаздел2_2.Области.П000220030104.Значение = мРаздел2_2.Области.П000220031104.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032104.Значение );

		мРаздел2_2.Области.П000220030105.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032105.Значение );

		мРаздел2_2.Области.П000220030107.Значение = мРаздел2_2.Области.П000220031107.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032107.Значение );

		мРаздел2_2.Области.П000220030109.Значение = мРаздел2_2.Области.П000220031109.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032109.Значение );

		мРаздел2_2.Области.П000220030110.Значение = мРаздел2_2.Области.П000220031110.Значение;

		// строка 302
		мРаздел2_2.Области.П000220030204.Значение = мРаздел2_2.Области.П000220031204.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032204.Значение );

		мРаздел2_2.Области.П000220030205.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220031205.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032205.Значение );

		мРаздел2_2.Области.П000220030207.Значение = мРаздел2_2.Области.П000220031207.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032207.Значение );

		мРаздел2_2.Области.П000220030209.Значение = мРаздел2_2.Области.П000220031209.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220032209.Значение );

		мРаздел2_2.Области.П000220030210.Значение = мРаздел2_2.Области.П000220031210.Значение;

		// строка 303
		мРаздел2_2.Области.П000220030304.Значение = мРаздел2_2.Области.П000220030004.Значение
		                                          + мРаздел2_2.Области.П000220030104.Значение
		                                          + мРаздел2_2.Области.П000220030204.Значение;

		мРаздел2_2.Области.П000220030305.Значение = мРаздел2_2.Области.П000220030005.Значение
		                                          + мРаздел2_2.Области.П000220030105.Значение
		                                          + мРаздел2_2.Области.П000220030205.Значение;

		мРаздел2_2.Области.П000220030307.Значение = мРаздел2_2.Области.П000220030007.Значение
		                                          + мРаздел2_2.Области.П000220030107.Значение
		                                          + мРаздел2_2.Области.П000220030207.Значение;

		мРаздел2_2.Области.П000220030309.Значение = мРаздел2_2.Области.П000220030109.Значение
		                                          + мРаздел2_2.Области.П000220030209.Значение;

		мРаздел2_2.Области.П000220030310.Значение = мРаздел2_2.Области.П000220030010.Значение
		                                          + мРаздел2_2.Области.П000220030110.Значение
		                                          + мРаздел2_2.Области.П000220030210.Значение;

		// строка 403
		мРаздел2_2.Области.П000220040304.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040004.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040104.Значение ) 
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040204.Значение );

		мРаздел2_2.Области.П000220040305.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040005.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040105.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040205.Значение );

		мРаздел2_2.Области.П000220040307.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040007.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040107.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040207.Значение );

		мРаздел2_2.Области.П000220040309.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040109.Значение )
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040209.Значение );

		мРаздел2_2.Области.П000220040310.Значение = мРаздел2_2.Области.П000220040010.Значение
		                                          + мРаздел2_2.Области.П000220040110.Значение
		                                          + мРаздел2_2.Области.П000220040210.Значение;

		// строка 500
		мРаздел2_2.Области.П000220050004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010004.Значение )
		                                          + мРаздел2_2.Области.П000220020004.Значение
		                                          + мРаздел2_2.Области.П000220030004.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040004.Значение );

		мРаздел2_2.Области.П000220050005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010005.Значение )
		                                          + мРаздел2_2.Области.П000220020005.Значение
		                                          + мРаздел2_2.Области.П000220030005.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040005.Значение );

		мРаздел2_2.Области.П000220050007.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010007.Значение )
		                                          + мРаздел2_2.Области.П000220020007.Значение
		                                          + мРаздел2_2.Области.П000220030007.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040007.Значение );

		мРаздел2_2.Области.П000220050010.Значение = мРаздел2_2.Области.П000220010010.Значение
		                                          + мРаздел2_2.Области.П000220020010.Значение
		                                          + мРаздел2_2.Области.П000220030010.Значение
		                                          + мРаздел2_2.Области.П000220040010.Значение;

		// строка 501
		мРаздел2_2.Области.П000220050104.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010104.Значение )
		                                          + мРаздел2_2.Области.П000220020104.Значение
		                                          + мРаздел2_2.Области.П000220030104.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040104.Значение );

		мРаздел2_2.Области.П000220050105.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010105.Значение )
		                                          + мРаздел2_2.Области.П000220020105.Значение
		                                          + мРаздел2_2.Области.П000220030105.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040105.Значение );

		мРаздел2_2.Области.П000220050107.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010107.Значение )
		                                          + мРаздел2_2.Области.П000220020107.Значение
		                                          + мРаздел2_2.Области.П000220030107.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040107.Значение );

		мРаздел2_2.Области.П000220050109.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010109.Значение )
		                                          + мРаздел2_2.Области.П000220020109.Значение
		                                          + мРаздел2_2.Области.П000220030109.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040109.Значение);

		мРаздел2_2.Области.П000220050110.Значение = мРаздел2_2.Области.П000220010110.Значение
		                                          + мРаздел2_2.Области.П000220020110.Значение
		                                          + мРаздел2_2.Области.П000220030110.Значение
		                                          + мРаздел2_2.Области.П000220040110.Значение;

		// строка 502
		мРаздел2_2.Области.П000220050204.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010204.Значение )
		                                          + мРаздел2_2.Области.П000220020204.Значение
		                                          + мРаздел2_2.Области.П000220030204.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040204.Значение );

		мРаздел2_2.Области.П000220050205.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010205.Значение )
		                                          + мРаздел2_2.Области.П000220020205.Значение
		                                          + мРаздел2_2.Области.П000220030205.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040205.Значение );

		мРаздел2_2.Области.П000220050207.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010207.Значение )
		                                          + мРаздел2_2.Области.П000220020207.Значение
		                                          + мРаздел2_2.Области.П000220030207.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040207.Значение );

		мРаздел2_2.Области.П000220050209.Значение = ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220010209.Значение )
		                                          + мРаздел2_2.Области.П000220020209.Значение
		                                          + мРаздел2_2.Области.П000220030209.Значение
		                                          + ОкруглитьЧислоПоФормату( мРаздел2_2.Области.П000220040209.Значение );

		мРаздел2_2.Области.П000220050210.Значение = мРаздел2_2.Области.П000220010210.Значение
		                                          + мРаздел2_2.Области.П000220020210.Значение
		                                          + мРаздел2_2.Области.П000220030210.Значение
		                                          + мРаздел2_2.Области.П000220040210.Значение;

		// строка 503
		мРаздел2_2.Области.П000220050304.Значение = мРаздел2_2.Области.П000220010304.Значение
		                                          + мРаздел2_2.Области.П000220020304.Значение
		                                          + мРаздел2_2.Области.П000220030304.Значение
		                                          + мРаздел2_2.Области.П000220040304.Значение;

		мРаздел2_2.Области.П000220050305.Значение = мРаздел2_2.Области.П000220010305.Значение
		                                          + мРаздел2_2.Области.П000220020305.Значение
		                                          + мРаздел2_2.Области.П000220030305.Значение
		                                          + мРаздел2_2.Области.П000220040305.Значение;

		мРаздел2_2.Области.П000220050307.Значение = мРаздел2_2.Области.П000220010307.Значение
		                                          + мРаздел2_2.Области.П000220020307.Значение
		                                          + мРаздел2_2.Области.П000220030307.Значение
		                                          + мРаздел2_2.Области.П000220040307.Значение;

		мРаздел2_2.Области.П000220050309.Значение = мРаздел2_2.Области.П000220010309.Значение
		                                          + мРаздел2_2.Области.П000220020309.Значение
		                                          + мРаздел2_2.Области.П000220030309.Значение
		                                          + мРаздел2_2.Области.П000220040309.Значение;

		мРаздел2_2.Области.П000220050310.Значение = мРаздел2_2.Области.П000220010310.Значение
		                                          + мРаздел2_2.Области.П000220020310.Значение
		                                          + мРаздел2_2.Области.П000220030310.Значение
		                                          + мРаздел2_2.Области.П000220040310.Значение;

		// Вычисляем показатели Раздела 2 отчета
		Расчет("Раздел2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.3 (Заполняется для головной организации, имеющей обособленные подразделения)

		Если мОрганизацияИмеетОбособленныеПодразделения Тогда
			
			// строка 010
			мРаздел2_3.Области.П000230001003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020010006.Значение) 
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230001103.Значение);
			мРаздел2_3.Области.П000230001004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020010007.Значение) 
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230001104.Значение);
			
			// строка 030
			мРаздел2_3.Области.П000230003003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020030006.Значение) 
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003103.Значение);
			мРаздел2_3.Области.П000230003004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020030007.Значение) 
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003104.Значение);
			// строка 040
			мРаздел2_3.Области.П000230004003.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020040006.Значение)
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004103.Значение);
			мРаздел2_3.Области.П000230004004.Значение = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020040007.Значение) 
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004104.Значение);
			
			// строка 020
			мРаздел2_3.Области.П000230002003.Значение = ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003003.Значение )
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004003.Значение );
			
			мРаздел2_3.Области.П000230002004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003004.Значение )
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004004.Значение );
			
			// строка 021
			мРаздел2_3.Области.П000230002103.Значение = ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003103.Значение )
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004103.Значение );
			
			мРаздел2_3.Области.П000230002104.Значение = ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230003104.Значение )
			+ ОкруглитьЧислоПоФормату( мРаздел2_3.Области.П000230004104.Значение );

		Иначе
			// очищаем все показатели раздела
			// строка 010
			мРаздел2_3.Области.П000230001003.Значение = 0;
			мРаздел2_3.Области.П000230001004.Значение = 0;
			// строка 030
			мРаздел2_3.Области.П000230003003.Значение = 0;
			мРаздел2_3.Области.П000230003004.Значение = 0;
			// строка 040
			мРаздел2_3.Области.П000230004003.Значение = 0;
			мРаздел2_3.Области.П000230004004.Значение = 0;
			// строка 020
			мРаздел2_3.Области.П000230002003.Значение = 0;
			мРаздел2_3.Области.П000230002004.Значение = 0;
			// строка 021
			мРаздел2_3.Области.П000230002103.Значение = 0;
			мРаздел2_3.Области.П000230002104.Значение = 0;
		КонецЕсли; 

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.4 (Обособленными подразделениями раздел не заполняется)
		
		Если НЕ ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
			
			// Строка 010
			// Среднюю численность работников организации по месяцам заполняем
			// по значениям соответствующих полей ввода из диалога формы отчета.
			мРаздел2_4.Области.П000240001004.Значение = СредняяЧисленность1Месяц;
			мРаздел2_4.Области.П000240001005.Значение = СредняяЧисленность2Месяц;
			мРаздел2_4.Области.П000240001006.Значение = СредняяЧисленность3Месяц;
			
			// Устанавливаем кол-во месяцев, истекших с начала отчетного периода в строке 070
			// табличного документа на странице "Раздел 2.4" основной панели формы
			мРаздел2_4.Области.П000240007004.Значение = Месяц(мДатаКонцаПериодаОтчета) - 2;
			мРаздел2_4.Области.П000240007005.Значение = Месяц(мДатаКонцаПериодаОтчета) - 1;
			мРаздел2_4.Области.П000240007006.Значение = Месяц(мДатаКонцаПериодаОтчета);
			
			// строка 030
			мРаздел2_4.Области.П000240003004.Значение = Окр( ?( мРаздел2_4.Области.П000240001004.Значение > 30,
			мРаздел2_4.Области.П000240001004.Значение * 10/100,
			мРаздел2_4.Области.П000240001004.Значение * 30/100 ),
			0, 1);
			
			мРаздел2_4.Области.П000240003005.Значение = Окр( ?( мРаздел2_4.Области.П000240001005.Значение > 30,
			мРаздел2_4.Области.П000240001005.Значение * 10/100,
			мРаздел2_4.Области.П000240001005.Значение * 30/100 ),
			0, 1);
			
			мРаздел2_4.Области.П000240003006.Значение = Окр( ?( мРаздел2_4.Области.П000240001006.Значение > 30,
			мРаздел2_4.Области.П000240001006.Значение * 10/100,
			мРаздел2_4.Области.П000240001006.Значение * 30/100 ),
			0, 1);
			
			// строка 050
			мРаздел2_4.Области.П000240005004.Значение = ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240002004.Значение )
			- ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240004004.Значение );
			
			мРаздел2_4.Области.П000240005005.Значение = ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240002005.Значение )
			- ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240004005.Значение );
			
			мРаздел2_4.Области.П000240005006.Значение = ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240002006.Значение )
			- ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240004006.Значение );
			
			// строка 060
			мРаздел2_4.Области.П000240006004.Значение = ? ( ( мРаздел2_4.Области.П000240001004.Значение
			- мРаздел2_4.Области.П000240003004.Значение ) <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240005004.Значение
			/ (мРаздел2_4.Области.П000240001004.Значение
			-мРаздел2_4.Области.П000240003004.Значение) ), 0 );
			
			мРаздел2_4.Области.П000240006005.Значение = ? ( ( мРаздел2_4.Области.П000240001005.Значение
			- мРаздел2_4.Области.П000240003005.Значение) <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240005005.Значение
			/ (мРаздел2_4.Области.П000240001005.Значение
			-мРаздел2_4.Области.П000240003005.Значение) ), 0 );
			
			мРаздел2_4.Области.П000240006006.Значение = ? ( ( мРаздел2_4.Области.П000240001006.Значение
			- мРаздел2_4.Области.П000240003006.Значение) <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240005006.Значение
			/ (мРаздел2_4.Области.П000240001006.Значение
			-мРаздел2_4.Области.П000240003006.Значение) ), 0 );
			
			// строка 080
			мРаздел2_4.Области.П000240008004.Значение = ? ( мРаздел2_4.Области.П000240007004.Значение <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240006004.Значение
			/ мРаздел2_4.Области.П000240007004.Значение ), 0 );
			
			мРаздел2_4.Области.П000240008005.Значение = ? ( мРаздел2_4.Области.П000240007005.Значение <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240006005.Значение
			/ мРаздел2_4.Области.П000240007005.Значение ), 0 );
			
			мРаздел2_4.Области.П000240008006.Значение = ? ( мРаздел2_4.Области.П000240007006.Значение <> 0,
			ОкруглитьЧислоПоФормату( мРаздел2_4.Области.П000240006006.Значение
			/ мРаздел2_4.Области.П000240007006.Значение ), 0 );

		Иначе
			// очищаем все показатели раздела

			// Строка 010
			мРаздел2_4.Области.П000240001004.Значение = 0;
			мРаздел2_4.Области.П000240001005.Значение = 0;
			мРаздел2_4.Области.П000240001006.Значение = 0;
			
			// строка 030
			мРаздел2_4.Области.П000240003004.Значение = 0;
			мРаздел2_4.Области.П000240003005.Значение = 0;
			мРаздел2_4.Области.П000240003006.Значение = 0;
			
			// строка 050
			мРаздел2_4.Области.П000240005004.Значение = 0;
			мРаздел2_4.Области.П000240005005.Значение = 0;
			мРаздел2_4.Области.П000240005006.Значение = 0;
			
			// строка 060
			мРаздел2_4.Области.П000240006004.Значение = 0;
			мРаздел2_4.Области.П000240006005.Значение = 0;
			мРаздел2_4.Области.П000240006006.Значение = 0;
			
			// Строка 070
			мРаздел2_4.Области.П000240007004.Значение = 0;
			мРаздел2_4.Области.П000240007005.Значение = 0;
			мРаздел2_4.Области.П000240007006.Значение = 0;
			
			// строка 080
			мРаздел2_4.Области.П000240008004.Значение = 0;
			мРаздел2_4.Области.П000240008005.Значение = 0;
			мРаздел2_4.Области.П000240008006.Значение = 0;
			
		КонецЕсли;

	Иначе
		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы

		// Расчет показателей разделов 1, 2 и 2.3 вызывается из процедуры Расчет("Раздел2_2").
		//
		Расчет("Раздел2_4");
		Расчет("Раздел2_2");
		Расчет("Раздел2_1");

	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// ----------------------------------------------------------------------------------------------------------
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса) 
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	//Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод", Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодДоходаДоговораАвторские", Справочники.ДоходыЕСН.ДоговораАвторские);
	
	// Определим: является ли организация плательщиком ЕНВД (для этого поищем доходы с признаком Облагается ЕНВД)
	
	ТекстПроверкиЕНВД = "ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ИСТИНА КАК ДоходыИмеются
	                    |ИЗ
	                    |	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	                    |
	                    |ГДЕ
	                    |	(ЕСНСведенияОДоходах.ОблагаетсяЕНВД) И
	                    |	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	                    |	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)";
	
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	Запрос.Текст = ТекстПроверкиЕНВД;
	ЕстьВидыДеятельностиНаЕНВД = Запрос.Выполнить().Выбрать().Количество() >0;
	Запрос.УстановитьПараметр("ПлательщикЕНВД", ЕстьВидыДеятельностиНаЕНВД);
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	СписокОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехОбособленныхПодразделенийОрганизации = Новый СписокЗначений;
	СписокВсехОбособленныхПодразделенийОрганизации.ЗагрузитьЗначения(СписокОбособленныхПодразделенийОрганизации.ВыгрузитьЗначения());
	СписокВсехОбособленныхПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);

	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// Сформируем текст запроса выборки месяцев налогового периода
	// первый месяц
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По 12 Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
		ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	// ДанныеОПравеНаПенсию
	// Таблица Данные о праве на пенсию: - список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем из списка периодов (Периоды)
	//	Внутреннее соединение с "псевдо" ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
	//
	ДанныеОПравеНаПенсиюТекст = "
	|ВЫБРАТЬ
	|	Месяц(Периоды.Период) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		("+ПериодыТекст+") КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Период >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.Период = Периоды.ПериодРегистра И ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо И ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|";
	
	// ДоходыПоСпискуСтруктурныхПодразделенийТекст
	// Описание: собирает все зарегистрированные доходы ЕСН за вычетом скидки в разрезе: физлиц, месяцев и признака ОблагаетсяЕНВД
	// Состав облагаемых кодов доходов для взносов в ПФР совпадает с базой ФБ, поэтому выбираем только доходы с признаком ВходитВБазуФедеральныйБюджет
	
	ДоходыПоСпискуСтруктурныхПодразделенийТекст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	|	ЕСНСведенияОДоходах.КодДоходаЕСН,
	|	ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК Доход,
	|	ВЫБОР КОГДА ЕСНСведенияОДоходах.ОблагаетсяЕНВД ТОГДА 0 ИНАЧЕ ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КОНЕЦ КАК ДоходНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	|	(ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет) И
	|	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)";
	
	// ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст
	// учтем, что некоторые физлица не имеют права на пенсионное обеспечение
	// оставим только те данные из выборки ДоходыФизлицПоМесяцам
	// которые относятся к физлицам, отсутствующим в выборке Иностранцы
	
	ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст = 
		"ВЫБРАТЬ
		|	ДоходыФизлицПоМесяцам.ФизЛицо КАК ФизЛицо,
		|	ДоходыФизлицПоМесяцам.Месяц,
		|	ДоходыФизлицПоМесяцам.КодДоходаЕСН,
		|	ДоходыФизлицПоМесяцам.Доход,
		|	ДоходыФизлицПоМесяцам.ДоходНеЕНВД
		|ИЗ
		|	(" + ДоходыПоСпискуСтруктурныхПодразделенийТекст + ") КАК ДоходыФизлицПоМесяцам
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеОПравеНаПенсиюТекст + ") КАК Иностранцы
		|		ПО ДоходыФизлицПоМесяцам.ФизЛицо = Иностранцы.Физлицо И ДоходыФизлицПоМесяцам.Месяц = Иностранцы.Месяц
		|
		|ГДЕ
		|	((Иностранцы.Физлицо) ЕСТЬ NULL )";
	
	// поделим всех физлиц по полу и возрасту на группы
	ПолоВозрастнаяГруппа = "ВЫБОР КОГДА ГОД(<Источник>.ФизЛицо.ДатаРождения) < 1967 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ";
													 
													 
	// НалоговаяБазаПоФизлицамПоМесяцам
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//	База - налоговая база
	//	БазаНеЕНВД - налоговая база в части доходов не облагаемых ЕНВД
	//  НомерВозрастнойГруппы - номер возрастной группы: 
	//		1 - лица по 1966 г.р.
	//		2 - лица моложе 1966 г.р.
	// Описание:
	//  Выбирает базу взновов ПФР 
	
	НалоговаяБазаПоФизлицамПоМесяцам = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо КАК ФизЛицо,
	|	Доходы.Месяц КАК Месяц,
	|   " + СтрЗаменить(ПолоВозрастнаяГруппа, "<Источник>", "Доходы") +" КАК НомерВозрастнойГруппы,
	|	СУММА(Доход) КАК База,
	|	СУММА(ДоходНеЕНВД) КАК БазаНеЕНВД
	|ИЗ
	|	(" + ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст + " ) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.Месяц
	|";
													 

	// ИсчисленныйНалогПоФизЛицамПоМесяцам
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- физическое лицо 
	//  НомерВозрастнойГруппы - номер возрастной группы физлица
	//	Накопительная - начислено на накопительную часть
	//	Страховая - начислено на страховую часть
	//	НакопительнаяНеЕНВД - начислено на накопительную часть с доходов не облагаемых ЕНВД
	//	СтраховаяНеЕНВД - начислено на страховую часть с доходов не облагаемых ЕНВД
	
	ИсчисленныйНалогПоФизЛицамПоМесяцам = "
	|ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	МЕСЯЦ(ЕСНИсчисленный.Период) КАК Месяц,
	|   " + СтрЗаменить(ПолоВозрастнаяГруппа, "<Источник>", "ЕСНИсчисленный") +" КАК НомерВозрастнойГруппы,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная) КАК Накопительная,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая) КАК Страховая,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная - ЕСНИсчисленный.ПФРНакопительнаяЕНВД) КАК НакопительнаяНеЕНВД,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРСтраховаяЕНВД) КАК СтраховаяНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|
	|ГДЕ
	|	ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений) И
	|	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНИсчисленный.ФизЛицо,
	|	МЕСЯЦ(ЕСНИсчисленный.Период)
	|";
	
										  
										  
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.0										  
											  
	//НалоговаяБазаПоМесяцамОтчетногоПериода
	// Описание:
	//  Выполняет расчет налоговой базы по месяцам отчетного периода для раздела 2.0 
	
	НалоговаяБазаПоМесяцамКвартала = "
	|ВЫБРАТЬ 
	|	// строка 0120 - первый месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020012003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020012005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 				КАК П000020012007,
	|	// строка 0130 - второй месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020013003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020013005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 				КАК П000020013007,
	|	// строка 0140 -  третий месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020014003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020014005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 				КАК П000020014007
	|	ИЗ (" + НалоговаяБазаПоФизлицамПоМесяцам + ") КАК БазаПФР 
	|";
	
	
	//ИсчисленныеНалогиРаздела2_0
	// Описание:
	//  Выполняет расчет показателей раздела 2.0, содержащих информацию об исчисленных налогах 
	
	ИсчисленныеНалогиРаздела2_0 = "
	|ВЫБРАТЬ 
	|
	|	// Страховая часть 
	|
	|	// строка 0300 - исчисленный налог с начала года
	|	СУММА(ВЫБОР КОГДА &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) КАК П000020030007,
	|
	|	// строка 0320 - исчисленный налог за первый месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020032003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020032005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 						КАК П000020032007,
	|	// строка 0330 - исчисленный налог за второй месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020033003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020033005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 						КАК П000020033007,
	|	// строка 0340 - исчисленный налог за третий месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020034003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020034004,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 						КАК П000020034007,
	|
	|	// Накопительная часть 
	|
	|	// строка 0400 - исчисленный налог с начала года
	|	СУММА(ВЫБОР КОГДА &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) КАК П000020040007,
	|
	|	// строка 0420 - исчисленный налог за первый месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020042005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 						КАК П000020042007,
	|	// строка 0430 - исчисленный налог за второй месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020043005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 						КАК П000020043007,
	|	// строка 0440 - исчисленный налог за третий месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020044005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И &ПлательщикЕНВД ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 						КАК П000020044007
	|
	|	ИЗ (" + ИсчисленныйНалогПоФизЛицамПоМесяцам + ") КАК ИсчисленныйЕСН 
	|";
	
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.2										  
	
	
	// ИсчисленныйНалогПоФизЛицамСНачалаГода
	//	ФизЛицо	- физическое лицо 
	//	ВзносыВПФР - начисленные взносы на страховую и накопительную части с начала года
	
	ИсчисленныйНалогПоФизЛицамСНачалаГода = "ВЫБРАТЬ
	                                        |	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	                                        |	СУММА(ЕСНИсчисленный.Накопительная) КАК Накопительная,
	                                        |	СУММА(ЕСНИсчисленный.Страховая) КАК Страховая
	                                        |ИЗ
	                                        |	(" + ИсчисленныйНалогПоФизЛицамПоМесяцам + ") КАК ЕСНИсчисленный
	                                        |
	                                        |СГРУППИРОВАТЬ ПО
	                                        |	ЕСНИсчисленный.ФизЛицо";
	
													 
	// НалоговаяБазаПоФизлицамСНачалаГода 
	// Описание:
	//  Выбирает базу взновов ПФР с начала года в разрезе физлиц 
	//	Данные нужны для раздела 2.2
	
	НалоговаяБазаПоФизлицамСНачалаГода = "
	|ВЫБРАТЬ
	|	БазаПФР.ФизЛицо КАК ФизЛицо,
	|	БазаПФР.НомерВозрастнойГруппы КАК НомерВозрастнойГруппы,
	|	СУММА(БазаПФР.База) КАК База
	|ИЗ
	|	(" + НалоговаяБазаПоФизлицамПоМесяцам + " ) КАК БазаПФР
	|
	|СГРУППИРОВАТЬ ПО
	|	БазаПФР.ФизЛицо,
	|	БазаПФР.НомерВозрастнойГруппы
	|";
											
												
	// НалоговаяБазаПоФизлицамПределам
	// Описание:
	//  Выполняет расчет показателей раздела 2.2
	
	НалоговаяБазаПоФизлицамПределам = "
	|ВЫБРАТЬ
	|
	|	// До 280 000 
	|
	|	// строка 110 - первая возрастная группа
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База) 					КАК П000220010004, 
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая) 	КАК П000220010007,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220010010, 
	|	// строка 130 - вторая возрастная группа
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База) 					КАК П000220010204, 
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая) 	КАК П000220010207,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Накопительная) КАК П000220010209,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)  							 	КАК П000220010210, 
	//|
	//|	// От 280 000 до 600 000: 
	//|
	//|	// строка 210 - первая возрастная группа (рассчитываем только численность)
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220021010, 
	//|	// строка 212 - вторая возрастная группа (рассчитываем только численность)
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220021210, 
	//|
	//|	// строка 220 - первая возрастная группа 
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220022004, // база за минусом 100000
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая1вРублях)) 		КАК П000220022007, // начислено налога на сумму, превышающую 100000
	//|	// строка 222 - вторая возрастная группа 
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220022204, // база за минусом 100000
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая2вРублях)) 		КАК П000220022207, // начислено налога на сумму, превышающую 100000
	//|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Накопительная - Ставки.ПФРНакопительная2вРублях)) КАК П000220022209, // начислено налога на сумму, превышающую 100000
	//|
	|	// От 280 000 до 600 000: 
	|
	|	// строка 310 - первая возрастная группа (рассчитываем только численность)
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220031010, 
	|	// строка 312 - вторая возрастная группа (рассчитываем только численность)
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220031210, 
	|
	|	// строка 320 - первая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220032004, // база за минусом 300000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая1вРублях)) 		КАК П000220032007, // начислено налога на сумму, превышающую 300000
	|	// строка 322 - вторая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220032204, // база за минусом 300000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая2вРублях)) 		КАК П000220032207, // начислено налога на сумму, превышающую 300000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Накопительная - Ставки.ПФРНакопительная2вРублях)) КАК П000220032209, // начислено налога на сумму, превышающую 300000
	|
	|	// Свыше 600 000: 
	|
	|	// строка 400 - первая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База )					КАК П000220040004, // вся база
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая )	КАК П000220040007, // всего начислено на страховую часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)								КАК П000220040010, // численность
	|	// строка 402 - вторая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База )					КАК П000220040204, // вся база
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая )	КАК П000220040207, // всего начислено на страховую часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Накопительная )КАК П000220040209, // всего начислено на накопительную часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)								КАК П000220040210  // численность
	|
	|	ИЗ (" + НалоговаяБазаПоФизлицамСНачалаГода + ") КАК Доходы 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК Ставки
	|		ПО Ставки.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И Ставки.Год = &парамГод И Доходы.База > Ставки.СуммаДоходаС И Доходы.База <= Ставки.СуммаДоходаПо
	|  		ЛЕВОЕ СОЕДИНЕНИЕ (" + ИсчисленныйНалогПоФизЛицамСНачалаГода +") КАК ПФРИсчисленный
	|		ПО ПФРИсчисленный.ФизЛицо = Доходы.ФизЛицо
	|";
	
	
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.3										  

	// НалоговаяБазаПоСпискуОбособленныхПодразделений
	//	База - налоговая база
	//	БазаНеЕНВД - налоговая база в части доходов не облагаемых ЕНВД
	// Описание:
	//  Выбирает базу взновов ПФР 
	
	НалоговаяБазаПоСпискуОбособленныхПодразделений = "
	|ВЫБРАТЬ
	|	СУММА(Доход) КАК База,
	|	СУММА(ДоходНеЕНВД) КАК БазаНеЕНВД
	|ИЗ
	|	(" + ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст + " ) КАК Доходы
	|";
	
	// ИсчисленныйНалогПоСпискуОбособленныхПодразделений
	//	Накопительная - начислено на накопительную часть
	//	Страховая - начислено на страховую часть
	//	НакопительнаяНеЕНВД - начислено на накопительную часть с доходов не облагаемых ЕНВД
	//	СтраховаяНеЕНВД - начислено на страховую часть с доходов не облагаемых ЕНВД
	
	ИсчисленныйНалогПоСпискуОбособленныхПодразделений = "
	|ВЫБРАТЬ
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная) КАК Накопительная,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая) КАК Страховая,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная - ЕСНИсчисленный.ПФРНакопительнаяЕНВД) КАК НакопительнаяНеЕНВД,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРСтраховаяЕНВД) КАК СтраховаяНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|
	|ГДЕ
	|	ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений) И
	|	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|";

	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.4
	
	// СуммыВыплатРаздела2_4Текст
	// Выбираются доходы за минусом скидки нарастающим итогом для каждого месяца отчетного периода.
	// Учитываются только доходы с	кодами, входящих в базу федерального бюджета, за исключением 
	// авторских договоров.
	
	СуммыВыплатРаздела2_4Текст = "
	|ВЫБРАТЬ
	|  МесяцыОтчетногоПериода.Месяц КАК Месяц,
	|  Доходы.ФизЛицо КАК ФизЛицо,
	|  Сумма(Доходы.Доход) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ 
	|		&Месяц1 КАК Месяц
	|
	|	ОБЪЕДИНИТЬ  
	|
	|	ВЫБРАТЬ 
	|		&Месяц2 КАК Месяц
	|
	|	ОБЪЕДИНИТЬ  
	|
	|	ВЫБРАТЬ 
	|		&Месяц3 КАК Месяц) КАК МесяцыОтчетногоПериода
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст + ") КАК Доходы
	|	ПО Доходы.Месяц <= МесяцыОтчетногоПериода.Месяц
	|
	|ГДЕ 
	|	Доходы.КодДоходаЕСН <> &КодДоходаДоговораАвторские
	|
	|СГРУППИРОВАТЬ ПО МесяцыОтчетногоПериода.Месяц, Доходы.ФизЛицо
	|УПОРЯДОЧИТЬ ПО Месяц ВОЗР, Сумма УБЫВ
	|                                         
	|ИТОГИ ПО Месяц";
	
	
	// -------------------------------------------------------------------------------
	// ВЫВОД ДАННЫХ В ОТЧЕТ
	
	// Раздел 2.0
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	
	Запрос.Текст = НалоговаяБазаПоМесяцамКвартала;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = ИсчисленныеНалогиРаздела2_0;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел 2.2
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());

	// Раздел 2.3
	
	// Заполняется только для головной организации, имеющей обособленные подразделения.
	
	Если Организация = ГоловнаяОрганизация И СписокОбособленныхПодразделенийОрганизации.Количество() <> 0 Тогда
		
		// База ПФР по обособленным подразделениям организации 
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокОбособленныхПодразделенийОрганизации);
		Запрос.Текст = НалоговаяБазаПоСпискуОбособленныхПодразделений;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УстановитьЗначениеПоказателя("П000230001103",Выборка.База);
			Если ЕстьВидыДеятельностиНаЕНВД Тогда
				УстановитьЗначениеПоказателя("П000230001104",Выборка.БазаНеЕНВД);
			КонецЕсли; 
		КонецЕсли; 
		
		// Исчисленные налони по обособленным подразделениям организации
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокОбособленныхПодразделенийОрганизации);
		Запрос.Текст = ИсчисленныйНалогПоСпискуОбособленныхПодразделений;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УстановитьЗначениеПоказателя("П000230003103", Выборка.Страховая);
			УстановитьЗначениеПоказателя("П000230004103", Выборка.Накопительная);
			Если ЕстьВидыДеятельностиНаЕНВД Тогда
				УстановитьЗначениеПоказателя("П000230003104", Выборка.СтраховаяНеЕНВД);
				УстановитьЗначениеПоказателя("П000230004104", Выборка.НакопительнаяНеЕНВД);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;	
	
	// Раздел 2.4
	// Заполняется только для головной организации
	// Все данные берутся по организации в целом
	// Раздел не заполняется до конца года начиная с месяца, следующего за месяцем утраты права применения регрессивной шкалы
	
    // с 2005 года заполнение раздела смысла не имеет
	
	// Расчет автовычисляемых полей
	Расчет();

	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний()  Экспорт

Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура НачальнаяПодготовкаФормы() Экспорт 

	// Вычислим: имеет ли организация обособленные подразделения 
	мОрганизацияИмеетОбособленныеПодразделения = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0;
	
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица   = ЭлементыФормы.ПолеТабличногоДокументаФизЛица; 
	мРаздел1   = ЭлементыФормы.ПолеТабличногоДокументаРаздел1; 
	мРаздел2   = ЭлементыФормы.ПолеТабличногоДокументаРаздел2; 
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1; 
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2; 
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3; 
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4; 

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мВПрограммеИзмененаОрганизация = Ложь;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			мТитульный     .Области["ВидДок"].Значение = "1";

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" ) Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	// Заполняем коды бюджетной классификации на странице "Раздел 1".
	КБК_СтраховаяЧасть     = "1010610";
	КБК_НакопительнаяЧасть = "1010620";

	Для НомПоз = 1 По 7 Цикл
		мРаздел1.Области["КБКвСтрах_" + НомПоз].Значение = Сред(КБК_СтраховаяЧасть,     НомПоз, 1);
		мРаздел1.Области["КБКвНакоп_" + НомПоз].Значение = Сред(КБК_НакопительнаяЧасть, НомПоз, 1);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "<" и ">" листания страниц
// многостраничных разделов формы
//
// Параметры:
//  НомерТекущейСтраницы - число, порядковый номер текущей страницы;
//  КоличествоСтраниц    - число, количество страниц многостраничного раздела;
//  ИмяТекСтраницы       - строка, имя текущей страницы основной панели формы.
//
// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	
	Если (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников организации за 1 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ1ПриИзменении(Элемент)

	Расчет("Раздел2_4");

КонецПроцедуры // ПолеВводаЧисленностьМ1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников организации за 2 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ2ПриИзменении(Элемент)

	Расчет("Раздел2_4");

КонецПроцедуры // ПолеВводаЧисленностьМ2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников организации за 3 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ3ПриИзменении(Элемент)

	Расчет("Раздел2_4");

КонецПроцедуры // ПолеВводаЧисленностьМ2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.1" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.3" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.3" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.4" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_4ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.1" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.3" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_3ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.4" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_4ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_4ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.3"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.4"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_4ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа, не участвующих в расчете других показателей отчета..
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ТабличныйДокументПолеВводаБезРасчетаПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаБезРасчетаПриИзменении()

// Процедура - обработчик события при изменении значения полей ввода
// ИНН и ФИО должностных лиц организации на титульном листе.
//
Процедура ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении()

// Процедура - обработчик события при изменении значения полей для отметки
// типа налогоплательщика.
//
Процедура ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении(Элемент)

	// Заполняем дату подписи в соответствующих ячейках
	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2ПриИзменении(Элемент)

	Расчет("Раздел2");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.1" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриИзменении(Элемент)

	Расчет("Раздел2_1");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриИзменении(Элемент)

	Расчет("Раздел2_2");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.3" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриИзменении(Элемент)

	Расчет("Раздел2_3");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 3.2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_4ПриИзменении(Элемент)

	Расчет("Раздел2_4");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4ПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел 2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Раздел 2.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()


////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.1"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.2"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_2.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_2.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_2.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.3"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.4"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_4.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_4.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_4.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);


//// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "27/01/2004";

// Код отчета, равен КНД
мКодОтчета   = 1151050;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
