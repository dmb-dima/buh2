// При построении отчета используется несколько запросов:
//  - Общий, который собирает данные по всем счетам,
//  - Детальные, которые собирают данные по счетам, для которых определен
//    особый порядок расчета развернутого сальдо.

#Если Клиент Тогда
	
Перем ИмяРегистраБухгалтерии Экспорт;

Перем МассивШиринКолонок;
Перем ШиринаТаблицы;

Перем МетаданныеПланСчетов;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = СтандартныеОтчеты.СформироватьСтрокуОграниченийПоДатамДляФормы(ДатаНач, ДатаКон);

	Макет = ПолучитьМакет("Макет");

	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");

	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл

		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;

	КонецЦикла;

	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";

	ТекстПроИтоги = "";

	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	Возврат "Главная книга";
КонецФункции // ЗаголовокОтчета()


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Функция формирует текст общего запроса по всем счетам и корсчетам без детализации 
// по количеству, валюте, субконто.
//
// Параметры
//	 Нет
//
// Возвращаемое значение:
//   Текст   – Текст запроса
//
Функция ПолучитьТекстОбщегоЗапроса()

	ПоПериодам = ЗначениеЗаполнено(Период);
	ИмяПланаСчетов = МетаданныеПланСчетов.Имя;
	
	СтрокаОграниченийПоРеквизитам = "";
	СтандартныеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счета.Ссылка КАК Счет,
	|	Счета.Наименование КАК СчетНаименование,
	|	Счета.Родитель КАК СчетРодитель,
	|	Счета.Валютный КАК СчетВалютный,
	|	ПРЕДСТАВЛЕНИЕ(Счета.Ссылка) КАК СчетПредставление,"
	+?(ПоПериодам,"Обороты.Период КАК Период,","")+"
	|	КорСчета.Ссылка КАК КорСчет,
	|	ПРЕДСТАВЛЕНИЕ(КорСчета.Ссылка) КАК КорСчетПредставление,
	|	Обороты.СуммаОборотДт КАК СуммаОборотДт,
	|	Обороты.СуммаОборотКт КАК СуммаОборотКт,
	|	КорСчета.Порядок КАК КорСчетПорядок,
	|	Счета.Порядок КАК СчетПорядок,
	|	NULL КАК СуммаНачДт,
	|	NULL КАК СуммаНачКт
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Период+", , , " + СтрокаОграниченийПоРеквизитам + ", , ) КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК Счета
	|			ПО Обороты.Счет = Счета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК КорСчета
	|			ПО Обороты.КорСчет = КорСчета.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Счета.Ссылка,
	|	Счета.Наименование,
	|	Счета.Родитель,
	|	Счета.Валютный,
	|	ПРЕДСТАВЛЕНИЕ(Счета.Ссылка),"
	+?(ПоПериодам,"NULL КАК Период,","")+"
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Счета.Порядок,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Остатки(&ДатаНач, , , " + СтрокаОграниченийПоРеквизитам + ") КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК Счета
	|			ПО Остатки.Счет = Счета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетПорядок,"
	+?(ПоПериодам,"Период,","")+"
	|	КорСчетПорядок
	|ИТОГИ
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаНачДт),
	|	СУММА(СуммаНачКт)
	|ПО
	|	Счет " + ?(ПоСубсчетам, "", "ИЕРАРХИЯ") + ","
	+ ?(ПоПериодам,"Период"+?(ВсеПериоды, " ПЕРИОДАМИ("+Период+",&ДатаНач,&ДатаКон)", "") + ",","")+"
	|	КорСчет ИЕРАРХИЯ";
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОбщегоЗапроса()

// Функция формирует текст запроса по счету с требуемой детализацией
// по количеству, валюте, субконто.
//
// Параметры
//   РазворотПоСубконто - ТаблицаЗначений   - Список субконто для расчета итогов
//
// Возвращаемое значение:
//   Текст   – Текст запроса
//
// Подготовка и выполнение общего запроса
//
// Параметры
//   Нет
//
// Возвращаемое значение:
//   РезультатЗапроса   – Результат выполнения общего запроса
//
Функция ВыполнитьОбщийЗапрос()

	Запрос = Новый Запрос;
	
	// установим параметры
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;
	
	// сформируем текст запроса
	Запрос.Текст = ПолучитьТекстОбщегоЗапроса();
	
	Состояние("Выполнение запроса");
	Возврат Запрос.Выполнить();

КонецФункции // ВыполнитьОбщийЗапрос()

// Функция заполняет структуру параметров
Функция СформироватьСтруктуруПараметров(ДокументРезультат, Макет, ФорматПериода)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("Макет",Макет);
	
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
	
	// по субконто
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
	
	// по валютам
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
	
	Возврат СтруктураПараметров;
	
КонецФункции // СформироватьСтруктуруПараметров()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	ОграничениеПоДатамКорректно = СтандартныеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	Если Период = "НЕДЕЛЯ" Тогда
		ДатаНач = НачалоНедели(ДатаНач);
		ДатаКон = ?(ДатаКон <> '00010101000000', КонецДня(КонецНедели(ДатаКон)), ДатаКон);
	ИначеЕсли Период = "МЕСЯЦ" Тогда
		ДатаНач = НачалоМесяца(ДатаНач);
		ДатаКон = ?(ДатаКон <> '00010101000000', КонецДня(КонецМесяца(ДатаКон)), ДатаКон);
	ИначеЕсли Период = "КВАРТАЛ" Тогда
		ДатаНач = НачалоКвартала(ДатаНач);
		ДатаКон = ?(ДатаКон <> '00010101000000', КонецДня(КонецКвартала(ДатаКон)), ДатаКон);
	ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
		СерединаГода = ДобавитьМесяц(НачалоГода(ДатаНач), 7);
		Если ДатаНач<= СерединаГода Тогда
			ДатаНач = НачалоГода(ДатаНач);
		Иначе
			ДатаНач = СерединаГода;
		КонецЕсли;
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаКон), 6));
		Если ДатаКон<= СерединаГода Тогда
			ДатаКон = ?(ДатаКон <> '00010101000000', СерединаГода, ДатаКон);
		Иначе
			ДатаКон = ?(ДатаКон <> '00010101000000', КонецДня(КонецГода(ДатаКон)), ДатаКон);
		КонецЕсли;
	ИначеЕсли Период = "ГОД" Тогда
		ДатаНач = НачалоГода(ДатаНач);
		ДатаКон = ?(ДатаКон <> '00010101000000', КонецДня(КонецГода(ДатаКон)), ДатаКон);
	КонецЕсли; 
	
	ДокументРезультат.Очистить();
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// выполним общий запрос
	Результат = ВыполнитьОбщийЗапрос();
	
	Макет     = ПолучитьМакет("Макет");

	// Вывод заголовка отчета
	СтандартныеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	// получим форматную строку для формирования наименований периодов
	ФорматПериода = ПолучитьСтрокуФорматаПериода(Период);

	СтруктураПараметров = СформироватьСтруктуруПараметров(ДокументРезультат, Макет, ФорматПериода);

	//
	// Вывод отчета
	//
	ВыборкаПоСчетам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
	Пока ВыборкаПоСчетам.Следующий() Цикл
		
		// если разбиваем по листам, то каждый счет печатается в своем документе
		Если РазбитьПоЛистам Тогда
		
			ДокументОтдельногоСчета = Новый ТабличныйДокумент;
			СтруктураПараметров.Вставить("ДокументРезультат", ДокументОтдельногоСчета);
		
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Счет",              ВыборкаПоСчетам.Счет);
		СтруктураПараметров.Вставить("СчетПредставление", ВыборкаПоСчетам.СчетПредставление);
		
		Если ВыводитьРазвернутоеСальдо Тогда
			СтрокаРазвернутогоСальдо = ПравилаРазвернутогоСальдо.Найти(ВыборкаПоСчетам.Счет,"Счет");
			СтруктураПараметров.Вставить("РазвернутоеСальдо", СтрокаРазвернутогоСальдо<>Неопределено);
			СтруктураПараметров.Вставить("СтрокаРазвернутогоСальдо", СтрокаРазвернутогоСальдо);
		Иначе
			СтруктураПараметров.Вставить("РазвернутоеСальдо", Ложь);
			СтруктураПараметров.Вставить("СтрокаРазвернутогоСальдо", Неопределено);
		КонецЕсли;
		
		ВывестиСчет(ВыборкаПоСчетам, СтруктураПараметров, ПоказыватьЗаголовок);
		
		// разобьем на страницы, если это необходимо
		Если РазбитьПоЛистам Тогда
			
			Если ДокументОтдельногоСчета.ВысотаТаблицы <> 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;

			Начало = ДокументОтдельногоСчета.ПолучитьОбласть(,1,,1);
			Хвост  = ДокументОтдельногоСчета.ПолучитьОбласть(,2,,ДокументОтдельногоСчета.ШиринаТаблицы);
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Хвост);
			
			ТабДок.Вывести(Начало);
			
			// считаем что по высоте таблица счета всегда умещается на странице
			Если ТабДок.ПроверитьПрисоединение(МассивТаблиц) Тогда
				// если табличка по одному счету помещается на один лист, то сразу выводим ее
				МассивШиринКолонок = Новый Массив;
				
				Ширина1 = ДокументРезультат.ШиринаТаблицы;
				Ширина2 = ДокументОтдельногоСчета.ШиринаТаблицы;
				Для к=Ширина1+1 По Ширина2 Цикл
					МассивШиринКолонок.Добавить(ДокументОтдельногоСчета.Область(,к,,к).ШиринаКолонки);
				КонецЦикла;
				
				ДокументРезультат.Вывести(ДокументОтдельногоСчета);
				
				Для к=0 По МассивШиринКолонок.Количество()-1 Цикл
					ДокументРезультат.Область(,Ширина1+1+к,,Ширина1+1+к).ШиринаКолонки = МассивШиринКолонок[к];
				КонецЦикла;
				
			Иначе
				// а если табличка по одному счету не помещается на один лист, то...
				
				НачальноеСмещение = Начало.ШиринаТаблицы + 1;
				н = НачальноеСмещение;
				
				ШиринаТаблицы = ДокументОтдельногоСчета.ШиринаТаблицы;
				Пока н <= ШиринаТаблицы Цикл
					
					МассивКолонок = Новый Массив;
					
					Для н = НачальноеСмещение По ШиринаТаблицы+1 Цикл
						
						Если н=ШиринаТаблицы+1 Тогда
							Прервать;
						КонецЕсли;
						
						МассивКолонок.Добавить(ДокументОтдельногоСчета.ПолучитьОбласть(,н,,н));
						
						Если Не ТабДок.ПроверитьПрисоединение(МассивКолонок) Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					ПоследнийЭлемент = МассивКолонок.Количество() - ?(н <= ШиринаТаблицы,2,1);
					
					Для к=0 По ПоследнийЭлемент Цикл
						ТабДок.Присоединить(МассивКолонок[0]);
						МассивКолонок.Удалить(0);
					КонецЦикла;
					
					МассивШиринКолонок = Новый Массив;
					
					Ширина1 = ДокументРезультат.ШиринаТаблицы;
					Ширина2 = ТабДок.ШиринаТаблицы;
					Для к=Ширина1+1 По Ширина2 Цикл
						МассивШиринКолонок.Добавить(ТабДок.Область(,к,,к).ШиринаКолонки);
					КонецЦикла;
					
					ДокументРезультат.Вывести(ТабДок);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					Для к=0 По МассивШиринКолонок.Количество()-1 Цикл
						ДокументРезультат.Область(,Ширина1+1+к,,Ширина1+1+к).ШиринаКолонки = МассивШиринКолонок[к];
					КонецЦикла;
					
					ТабДок.Очистить();
					ТабДок.Вывести(Начало);
					// добавим надписи периодов
					ТабДок.Присоединить(ДокументОтдельногоСчета.ПолучитьОбласть(,2,,2));
					
					НачальноеСмещение = н;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	//	
	//	Отчет выведен
	//	
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы+1,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ГлавнаяКнига "+ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

// Функция проверяет необходимость вывода данных по указанному счету
//
// Параметры
//  Сч  – Счет – Счет, для которого необходимо провести проверку
//
// Возвращаемое значение:
//   Булево   – Истина - данные по счету не надо выводить в отчет
//              Ложь   - данные по счету надо выводить в отчет
//
Функция ПропуститьСчет(Сч)

	Результат = Ложь;
	
	Если Сч = NULL Тогда
		Результат = Истина;
	Иначе
		Если Не Сч.Пустая() Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПропуститьСчет()

// вывести шапку таблицы данных конкретного счета
Процедура ВывестиШапкуТаблицы(СтруктураПараметров, Выборка, ШиринаВыводимогоРаздела)
	
	ИмяСтроки = "ЗаголовокТаблицы";
	
	НачалоЗаголовка = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|Период");
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + НачалоЗаголовка.ШиринаТаблицы;
	
	Выборка.Следующий();
	
	НачалоЗаголовка.Параметры.ОписаниеСчета = "Главная книга. Счет "+Выборка.СчетПредставление+" """+Выборка.СчетНаименование+"""";
	Если ЗначениеЗаполнено(Период) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	Выборка.Сбросить();
	
	СтруктураПараметров.ДокументРезультат.Вывести(НачалоЗаголовка,0);
	
	МакетСальдоНачДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоНачДт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоНачДт.ШиринаТаблицы;
	
	МакетСальдоНачКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоНачКт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоНачКт.ШиринаТаблицы;
	
	ВерхнийУровень = 1000;
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
	Пока Выборка.Следующий() Цикл
		
		// Это итог по строке остатка
		Если Выборка.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень
			Если ВерхнийУровень < Выборка.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = Выборка.Уровень();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			ВыборкаПериод = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			
			Пока ВыборкаПериод.Следующий() Цикл
				Если СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПериод.СуммаОборотДт)<>0 Тогда
					СтруктураПараметров.СписокДт.Добавить(Выборка.КорСчет);
					
					Обл.Параметры.Заполнить(Выборка);
					СтруктураПараметров.ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
					ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + Обл.ШиринаТаблицы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
		
			Если СтандартныеОтчеты.ПривестиКЧислу(Выборка.СуммаОборотДт)<>0 Тогда
				СтруктураПараметров.СписокДт.Добавить(Выборка.КорСчет);
				
				Обл.Параметры.Заполнить(Выборка);
				СтруктураПараметров.ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
				ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + Обл.ШиринаТаблицы;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	МакетОборотДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетОборотДт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетОборотДт.ШиринаТаблицы;
	
	МакетОборотКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетОборотКт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетОборотКт.ШиринаТаблицы;
	
	МакетСальдоКонДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоКонДт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоКонДт.ШиринаТаблицы;
	
	МакетСальдоКонКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоКонКт,0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоКонКт.ШиринаТаблицы;
	
КонецПроцедуры

// вывести подвал с итогами таблицы данных конкретного счета
Процедура ВывестиПодвалТаблицы(ОбщийИтог, СтруктураПараметров, Выборка)

	// Итого по отчету
	ИмяСтроки = "Итог";
	
	ОблНачало = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|Период");
	
	Расшифровка = ПолучитьСоответствиеРасшифровки(ОбщийИтог, Новый Соответствие);
	Расшифровка.Вставить("Счет",СтруктураПараметров.Счет);
	Расшифровка.Вставить("СчетПредставление",СтруктураПараметров.СчетПредставление);
	ОблНачало.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка, Ложь);
	
	СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало,0);
	
	Если ЗначениеЗаполнено(Период) Тогда
		ВыборкаИтогПоСчету = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		ВыборкаИтогПоСчету.Следующий();
	Иначе
		ВыборкаИтогПоСчету = ОбщийИтог;
	КонецЕсли;
	
	Если СтруктураПараметров.РазвернутоеСальдо Тогда
		ДеревоОстатков = СтруктураПараметров["ДеревоОстатков"];
		КолвоСтрок = ДеревоОстатков.Строки.Количество();
		
		Если КолвоСтрок<>0 Тогда 
			СтрокаОстатков = ДеревоОстатков.Строки[0];
			СуммаНачДт = СтрокаОстатков.СуммаРазвернутоНачДт;
			СуммаНачКт = СтрокаОстатков.СуммаРазвернутоНачКт;
		Иначе
			СуммаНачДт = 0;
			СуммаНачКт = 0;
		КонецЕсли;
	КонецЕсли;

	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда
		
		СуммаНачДт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаИтогПоСчету.СуммаНачДт);
		СуммаНачКт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаИтогПоСчету.СуммаНачКт);
		
		// если это были начальные остатки, то надо двинуть выборку дальше
		Если ЗначениеЗаполнено(Период) Тогда
			Если ВыборкаИтогПоСчету.Период = NULL Тогда
				ВыборкаИтогПоСчету.Следующий();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
	Обл.Параметры.СуммаНачДт=?(СтруктураПараметров.РазвернутоеСальдо, СуммаНачДт, ?(СуммаНачДт > СуммаНачКт, СуммаНачДт - СуммаНачКт, 0));
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
	Обл.Параметры.СуммаНачКт=?(СтруктураПараметров.РазвернутоеСальдо, СуммаНачКт, ?(СуммаНачКт > СуммаНачДт, СуммаНачКт - СуммаНачДт, 0));
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	// Вывод кор счетов с дебетовыми оборотами
	Выборка.Сбросить();
	
	ВерхнийУровень = 1000;
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
	Пока Выборка.Следующий() Цикл
		
		// Это итог по строке остатка
		Если Выборка.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень
			Если ВерхнийУровень < Выборка.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = Выборка.Уровень();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			ВыборкаПериод = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			
			Пока ВыборкаПериод.Следующий() Цикл
				Если СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПериод.СуммаОборотДт)<>0 Тогда
					Обл.Параметры.Заполнить(Выборка);
					СтруктураПараметров.ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если СтандартныеОтчеты.ПривестиКЧислу(Выборка.СуммаОборотДт)<>0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				СтруктураПараметров.ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
	Обл.Параметры.Заполнить(ОбщийИтог);
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
	Обл.Параметры.Заполнить(ОбщийИтог);
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	// Получим конечное сальдо:
	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда
		
		СуммаКонДт = СуммаНачДт + СтандартныеОтчеты.ПривестиКЧислу(ОбщийИтог.СуммаОборотДт) - СтандартныеОтчеты.ПривестиКЧислу(ОбщийИтог.СуммаОборотКт);
		СуммаКонКт = СуммаНачКт;
		
	Иначе
		
		КолвоСтрок = ДеревоОстатков.Строки.Количество();
		
		Если КолвоСтрок<>0 Тогда
			
			СтрокаОстатков = ДеревоОстатков.Строки[0];
			
			СуммаКонДт = СтрокаОстатков.СуммаРазвернутоКонДт;
			СуммаКонКт = СтрокаОстатков.СуммаРазвернутоКонКт;
			
		Иначе
			СуммаКонДт = 0;
			СуммаКонКт = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда
		
		Если СуммаКонДт>СуммаКонКт Тогда
			СуммаКонДт=СуммаКонДт-СуммаКонКт;
			СуммаКонКт=0;
		Иначе
			СуммаКонКт=СуммаКонКт-СуммаКонДт;
			СуммаКонДт=0;
		КонецЕсли;
		
	КонецЕсли;
		
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
	Обл.Параметры.СуммаКонДт=СуммаКонДт;
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
	Обл.Параметры.СуммаКонКт=СуммаКонКт;
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);

КонецПроцедуры

Процедура ЗаполнитьТаблицуРазвернутыхОстатков(СтруктураПараметров)

	Если СтруктураПараметров.РазвернутоеСальдо Тогда
		
		ТекстПолей = "";
		ТекстИтогов = "";
		Если СтруктураПараметров.СтрокаРазвернутогоСальдо.Субсчета Тогда
			
			ТекстПолей = ТекстПолей+", ОстаткиИОбороты.Счет";
			
			ТекстИтогов = ТекстИтогов+", Счет ИЕРАРХИЯ";
			
		Иначе
			
			Для каждого стр Из СтруктураПараметров.СтрокаРазвернутогоСальдо.РазворотПоСубконто Цикл
			
				ТекстПолей = ТекстПолей+", ОстаткиИОбороты."+стр.Имя;
				
				ТекстИтогов = ТекстИтогов+", "+стр.Имя;
			
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаОграниченийПоРеквизитам = "";
		СтандартныеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	" + ?(Не ЗначениеЗаполнено(Период), "", "ОстаткиИОбороты.Период КАК Период,") + "
		|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаРазвернутоКонДт,
		|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаРазвернутоКонКт,
		|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаРазвернутоНачДт,
		|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаРазвернутоНачКт"
		+ТекстПолей+"
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, "+Период+", , Счет В ИЕРАРХИИ (&Счет), , " + СтрокаОграниченийПоРеквизитам + ") КАК ОстаткиИОбороты
		|
		|" + ?(Не ЗначениеЗаполнено(Период), "", "УПОРЯДОЧИТЬ ПО
		|	Период") + "
		|ИТОГИ
		|	СУММА(СуммаРазвернутоКонДт),
		|	СУММА(СуммаРазвернутоКонКт),
		|	СУММА(СуммаРазвернутоНачДт),
		|	СУММА(СуммаРазвернутоНачКт)
		|ПО
		|	ОБЩИЕ" + ?(Не ЗначениеЗаполнено(Период), "", ", Период ПЕРИОДАМИ("+Период+", , )")
		+ ТекстИтогов;
				
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		
		Если ДатаКон <> '00010101000000' Тогда
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
		Иначе
			Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		КонецЕсли;
		
		//Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет", СтруктураПараметров.Счет);
		
		ДеревоОстатков = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураПараметров.Вставить("ДеревоОстатков", ДеревоОстатков);
		
	КонецЕсли;

КонецПроцедуры

// Вывод таблички для отдельного счета
Процедура ВывестиСчет(ОбщийИтог, СтруктураПараметров, ПоказыватьЗаголовок)
	
	Если ПоСубсчетам Тогда
		Если Не ЗначениеЗаполнено(ОбщийИтог.Счет) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ПропуститьСчет(ОбщийИтог.СчетРодитель) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Сбор оборотов по счету "+ОбщийИтог.СчетПредставление);
	
	ВысотаУжеВыведеннойТаблицы = СтруктураПараметров.ДокументРезультат.ВысотаТаблицы;
	ШиринаВыводимогоРаздела = 0;
	
	БазовыйУровеньВыборки = ОбщийИтог.Уровень()+1;
	
	// Вывод кор счетов с дебетовыми оборотами
	Выборка = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
	
	СписокДт = Новый СписокЗначений;
	СтруктураПараметров.Вставить("СписокДт", СписокДт);
	
	СписокКт = Новый Соответствие;
	СтруктураПараметров.Вставить("СписокКт", СписокКт);
	
	СтруктураПараметров.ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ВывестиШапкуТаблицы(СтруктураПараметров, Выборка, ШиринаВыводимогоРаздела);
	
	// Списки значений хранят счета, по которым были обороты
	ЗаполнитьТаблицуРазвернутыхОстатков(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Период) Тогда
		ВывестиПериоды(ОбщийИтог, СтруктураПараметров, Новый Соответствие, БазовыйУровеньВыборки);
	КонецЕсли;
	
	// Итого
	ВывестиПодвалТаблицы(ОбщийИтог, СтруктураПараметров, Выборка);
	
	СтруктураПараметров.ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Обведение таблицы отчета линией, как в области границы
	ОбластьИтогПериод = СтруктураПараметров.Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	СтруктураПараметров.ДокументРезультат.Область(ВысотаУжеВыведеннойТаблицы+3, 2, СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, ШиринаВыводимогоРаздела).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = СтруктураПараметров.ДокументРезультат.ШиринаТаблицы;
	
	// Восстановление ширин колонок
	Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
		Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из МассивШиринКолонок Цикл
				СтруктураПараметров.ДокументРезультат.Область(,1+Инд, , 1+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	
	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	СтруктураПараметров.ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;
	
КонецПроцедуры

// Получение строки остатков из дерева развернутого сальдо
Функция ПолучитьСтрокуИзДереваОстатков(СтруктураПараметров, ДатаПоиска)
	
	ДеревоОстатков = СтруктураПараметров["ДеревоОстатков"];
	
	ДатаОстатков = ?(ДатаПоиска=NULL, ДатаНач, ДатаПоиска);
	
	СтрокаОстатков = ДеревоОстатков.Строки.Найти(ДатаОстатков, "Период", Ложь);
	
	// строки на данную дату не нашли. Будем искать строки с более ранними датами
	Если СтрокаОстатков = Неопределено Тогда
		
		Для каждого стр Из ДеревоОстатков.Строки Цикл
			
			Если стр.Период = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если стр.Период <= ДатаОстатков Тогда
				СтрокаОстатков = стр;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаОстатков;
	
КонецФункции // ПолучитьСтрокуИзДереваОстатков()

// Вывод периодов
Процедура ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, БазовыйУровеньВыборки=0)
	
	Если ВсеПериоды Тогда
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Иначе
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Счет");
	КонецЕсли;
	
	СуммаНачДт = 0;
	СуммаНачКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	
	ОблНачало          = СтруктураПараметров.ОбластьСтрокаПериод;
	ОблОборотДт        = СтруктураПараметров.ОбластьСтрокаОборотДт;
	ОблОборотКт        = СтруктураПараметров.ОбластьСтрокаОборотКт;
	ОблОборотДтКорСчет = СтруктураПараметров.ОбластьСтрокаОборотДтКорСчет;
	ОблСальдоКонДт     = СтруктураПараметров.ОбластьСтрокаСальдоКонДт;
	ОблСальдоКонКт     = СтруктураПараметров.ОбластьСтрокаСальдоКонКт;
	ОблСальдоНачДт     = СтруктураПараметров.ОбластьСтрокаСальдоНачДт;
	ОблСальдоНачКт     = СтруктураПараметров.ОбластьСтрокаСальдоНачКт;
	
	// Идем по остаткам, т.к. там есть начпериоды без оборотов
	Пока ВыборкаПоПериодам.Следующий() Цикл
		
		// сначала получим остатки
		Если ВыборкаПоПериодам.Период = NULL Тогда
			
			СуммаНачДт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаНачДт);
			СуммаНачКт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаНачКт);
			
			Если СуммаНачДт>СуммаНачКт Тогда
				СуммаНачДт=СуммаНачДт-СуммаНачКт;
				СуммаНачКт=0;
			Иначе
				СуммаНачКт=СуммаНачКт-СуммаНачДт;
				СуммаНачДт=0;
			КонецЕсли;
			
			// остатки получили, пойдем за оборотами
			Продолжить;
			
		КонецЕсли;
		
		Уровень = ВыборкаПоПериодам.Уровень();
		
		// Вывод начального сальдо
		
		// Выводим начало строки:
		ОблНачало.Параметры.Заполнить(ВыборкаПоПериодам);
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень-БазовыйУровеньВыборки;
		
		// Расшифровка
		Расшифровка = ПолучитьСоответствиеРасшифровки(ВыборкаПоПериодам, ОтборДляРасшифровки);
		Расшифровка.Вставить("Счет",СтруктураПараметров.Счет);
		Расшифровка.Вставить("СчетПредставление",СтруктураПараметров.СчетПредставление);
		ОблНачало.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка, Ложь);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень-БазовыйУровеньВыборки+1);
		
		// Вывод начального сальдо
		ОблСальдоНачДт.Параметры.СуммаНачДт=СуммаНачДт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт);
		
		ОблСальдоНачКт.Параметры.СуммаНачКт=СуммаНачКт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт);
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		ВыборкаОборотыПоКорСчетам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		
		// Вывод вложенных итогов по кор счетам
		ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма", ОблОборотДтКорСчет,Расшифровка);
		
		// Оборот Дт
		ОблОборотДт.Параметры.Заполнить(ВыборкаПоПериодам);
		//РасшифровкаДт = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(Расшифровка);
		//РасшифровкаДт.Вставить("СчетДт",СтруктураПараметров.Счет);
		//РасшифровкаДт.Удалить("СчетКт");
		//ОблОборотДт.Параметры.Расшифровка = ПолучитьСписокРасшифровок(РасшифровкаДт);
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт);
		
		// Оборот Кт
		ОблОборотКт.Параметры.Заполнить(ВыборкаПоПериодам);
		РасшифровкаКт = СтандартныеОтчеты.СоздатьКопиюСоответствияСтруктуры(Расшифровка);
		РасшифровкаКт.Вставить("СчетКт",СтруктураПараметров.Счет);
		РасшифровкаКт.Удалить("СчетДт");
		ОблОборотКт.Параметры.Расшифровка = ПолучитьСписокРасшифровок(РасшифровкаКт);
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт);
		
		СуммаОборотДт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаОборотДт);
		СуммаОборотКт = СтандартныеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаОборотКт);
		
		Если СтруктураПараметров.РазвернутоеСальдо Тогда
			
			СтрокаОстатков = ПолучитьСтрокуИзДереваОстатков(СтруктураПараметров, ВыборкаПоПериодам.Период);
			
			Если СтрокаОстатков = Неопределено Тогда
				// не нашли остатков вообще
				СуммаКонДт = 0;
				СуммаКонКт = 0;
			Иначе
				Если ВыборкаПоПериодам.Период=NULL Тогда
					СуммаКонДт = СтандартныеОтчеты.ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоНачДт);
					СуммаКонКт = СтандартныеОтчеты.ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоНачКт);
				Иначе
					СуммаКонДт = СтандартныеОтчеты.ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоКонДт);
					СуммаКонКт = СтандартныеОтчеты.ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоКонКт);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Вывод оборота и кон сальдо
			Если СуммаОборотДт <> 0
				или СуммаОборотКт <> 0 Тогда
				
				СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
				СуммаКонКт = СуммаНачКт;
			Иначе
				СуммаКонДт = СуммаНачДт;
				СуммаКонКт = СуммаНачКт;
			КонецЕсли;
			
			Если СуммаКонДт>СуммаКонКт Тогда
				СуммаКонДт=СуммаКонДт-СуммаКонКт;
				СуммаКонКт=0;
			Иначе
				СуммаКонКт=СуммаКонКт-СуммаКонДт;
				СуммаКонДт=0;
			КонецЕсли;
		КонецЕсли;
		
		// Вывод конечного сальдо
		ОблСальдоКонДт.Параметры.СуммаКонДт=СуммаКонДт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт);
		
		ОблСальдоКонКт.Параметры.СуммаКонКт=СуммаКонКт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт);

		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;

	КонецЦикла;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, РодительскаяРасшифровка=0)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда
		
		ТипПоля = "ОборотДт";
		
		СписокСчетов = СтруктураПараметров.СписокДт;
		
	Иначе
		Возврат;
	КонецЕсли;
	
		// Создадим структуру соответствия кор счетов структуре ресурсов
	Соотв = Новый Соответствие;
	Для каждого Элемент Из СписокСчетов Цикл
		Соотв[Элемент.Значение] = Новый Структура(Ресурсы);
	КонецЦикла;

	ВерхнийУровень = 1000;
	_Счет = СтруктураПараметров.Счет;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ СтандартныеОтчеты.ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля])=0 и ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]<>NULL Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	// Вывод ресурсов
	Для каждого ЭлементСчет Из СписокСчетов Цикл
		
		Для каждого Элемент Из Соотв[ЭлементСчет.Значение] Цикл
			ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
		КонецЦикла;
		
		Если ТипЗнч(РодительскаяРасшифровка) = Тип("Соответствие") Тогда
			Расшифровка = СтандартныеОтчеты.СоздатьКопиюСоответствияСтруктуры(РодительскаяРасшифровка);
			
			Расшифровка.Вставить("КорСчет", ЭлементСчет.Значение);
			
			Если ВидОборота = "ДТ" Тогда
				Расшифровка.Вставить("СчетДт", _Счет);
				Расшифровка.Вставить("СчетКт", ЭлементСчет.Значение);
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка);
		КонецЕсли;
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
	КонецЦикла;

КонецПроцедуры

// Формирование структуры данных для заполнения расшифровки
//
// Параметры
//  Выборка  – Выборка из результата запроса
//  ОтборСубконто  – Структура – Отбор по субконто
//
// Возвращаемое значение:
//   Соответствие   – сформированная структура данных для расшифровки
//
Функция ПолучитьСоответствиеРасшифровки(Выборка, ОтборСубконто = Неопределено)

	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("Счет", Выборка.Счет);
	ПараметрыРасшифровки.Вставить("СчетПредставление", Выборка.СчетПредставление);

	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;
		
	ИначеЕсли Выборка.Группировка() = "Валюта" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;
	Иначе
		
		ОтборРасшифровка = Новый Соответствие;
		ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
		
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции // ПолучитьСоответствиеРасшифровки()

// Формирование списка возможных расшифровок
//
// Параметры
//  ПараметрыРасшифровки  – Соответствие – данные необходимые для построения расшифровочного отчета
//
// Возвращаемое значение:
//   СписокЗначений   – Список возможных расшифровок
//
Функция ПолучитьСписокРасшифровок(ПараметрыРасшифровки, ОтчетПоПроводкам = Истина)
	
	Если ПараметрыРасшифровки<>Неопределено Тогда
		
		СписокРасшифровки = Новый СписокЗначений;
		
		СтрокаСчета = ПараметрыРасшифровки.Получить("СчетПредставление");
		Если Не ЗначениеЗаполнено(СтрокаСчета) Тогда
			СтрокаСчета = Строка(ПараметрыРасшифровки.Получить("Счет"));
		КонецЕсли;
		
		КопияРасшифровки = СтандартныеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		КопияРасшифровки.Вставить("ИмяОбъекта","ОборотыСчета");
		СписокРасшифровки.Добавить(КопияРасшифровки, "Обороты счета " + СтрокаСчета);
		
		Если ОтчетПоПроводкам Тогда
			КопияРасшифровки = СтандартныеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
			КопияРасшифровки.Вставить("ИмяОбъекта","ОтчетПоПроводкам");
			СписокРасшифровки.Добавить(КопияРасшифровки, "Отчет по проводкам " + СтрокаСчета);
		КонецЕсли;
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;
	
	Возврат СписокРасшифровки;
	
КонецФункции // ПолучитьСписокРасшифровок()


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Установка "заводских" настроек развернутого сальдо.
// Настройки развернутого сальдо считываются из отдельного макета.
//
// Параметры
//  Нет
//
Процедура ЗаполнитьПоУмолчаниюНастройкуРазвернутыхСальдо() Экспорт

	ПравилаРазвернутогоСальдо.Очистить();
	
	Макет = ПолучитьМакет("РазвернутоеСальдо");
	ОблДанных = Макет.ПолучитьОбласть("Данные");
	
	ПланСчетовМенеджер = ПланыСчетов[МетаданныеПланСчетов.Имя];
	ВидыСубконто       = ПланыВидовХарактеристик[МетаданныеПланСчетов.ВидыСубконто.Имя];

	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	Для н=1 По ОблДанных.ВысотаТаблицы Цикл
	
		стр = ПравилаРазвернутогоСальдо.Добавить();
		
		Счет     = ПланСчетовМенеджер.НайтиПоКоду(ОблДанных.Область(н,1,н,1).Текст);
		Субсчета = ?(ОблДанных.Область(н,2,н,2).Текст="1", Истина, Ложь);
		Субконто = ОблДанных.Область(н,3,н,3).Текст;
		
		стр.Счет     = Счет;
		стр.Субсчета = Субсчета;
		
		стр.РазворотПоСубконто.Колонки.Очистить();
		стр.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
		стр.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);
		
		Если Не ПустаяСтрока(Субконто) Тогда
			
			ИсходныйТекст = СтрЗаменить(Субконто, ",", Символы.ПС);
			Для Счетчик = 1 По СтрЧислоСтрок(ИсходныйТекст) Цикл
				ТекСтрока = СокрЛП(СтрПолучитьСтроку(ИсходныйТекст, Счетчик));
				
				ВидСубконто = ВидыСубконто[ТекСтрока];
				СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто");
				Если СтрокаВидаСубконто<>Неопределено Тогда
					
					СтрокаСубконто = стр.РазворотПоСубконто.Добавить();
					СтрокаСубконто.Имя = "Субконто" + (Счет.ВидыСубконто.Индекс(СтрокаВидаСубконто)+1);
					СтрокаСубконто.Представление = ВидСубконто.Наименование;
					
					стр.ПредставлениеРазворотПоСубконто = стр.ПредставлениеРазворотПоСубконто + ", " + СтрокаСубконто.Представление;
					
				КонецЕсли;
				
			КонецЦикла;
			стр.ПредставлениеРазворотПоСубконто = Сред(стр.ПредставлениеРазворотПоСубконто, 3);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоУмолчаниюНастройкуРазвернутыхСальдо()

// Заполнение начальных настроек значениями по умолчанию
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ДатаНач = НачалоГода(РабочаяДата);
	ДатаКон = КонецДня(КонецГода(РабочаяДата));
	
	Период = "МЕСЯЦ";
	ВсеПериоды = Истина;
	
	ВыводитьРазвернутоеСальдо = Истина;
	
	РазбитьПоЛистам = Истина;
	
	// заполним таблицу развернутого сальдо
	ЗаполнитьПоУмолчаниюНастройкуРазвернутыхСальдо();
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = СтандартныеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров); 

	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		
	Иначе
		
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы списка журнала проводок в качестве расшифровки отчета
Процедура ОбработкаРасшифровкиРегистрСписок(Расшифровка)

	ФормаЖурнала = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПолучитьФормуСписка(,, Новый УникальныйИдентификатор());
	
	Для Каждого Элемент Из Расшифровка.Отбор Цикл
	
		Если Элемент.Ключ="Период" Тогда
			
			ПериодС = Элемент.Значение;
			
			Если Период = "ДЕНЬ" Тогда
				ПериодПо = ПериодС + 24 * 60 * 60 - 1;
			ИначеЕсли Период = "НЕДЕЛЯ" Тогда
				ПериодПо = ПериодС + 7 * 24 * 60 * 60 - 1;
			ИначеЕсли Период = "ДЕКАДА" Тогда
				ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
			ИначеЕсли Период = "МЕСЯЦ" Тогда
				ПериодПо = КонецДня(КонецМесяца(ПериодС));
			ИначеЕсли Период = "КВАРТАЛ" Тогда
				ПериодПо = КонецДня(КонецКвартала(ПериодС));
			ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
				СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
				Если ПериодС<= СерединаГода Тогда
					ПериодПо = СерединаГода;
				Иначе
					ПериодПо = КонецДня(КонецГода(ПериодС));
				КонецЕсли;
				
			ИначеЕсли Период = "ГОД" Тогда
				ПериодПо = КонецДня(КонецГода(ПериодС));
			КонецЕсли;
			
			Если ДатаКон<>'00010101' Тогда
				ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
			КонецЕсли;
			
			ФормаЖурнала.Отбор.Период.ЗначениеС = ПериодС;
			ФормаЖурнала.Отбор.Период.ЗначениеПо = ПериодПо;
			ФормаЖурнала.Отбор.Период.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			ФормаЖурнала.Отбор.Период.Использование = Истина;
			
		ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
			
			Если Не ЗначениеЗаполнено(ФормаЖурнала.Отбор.Субконто1.Значение) Тогда
				ФормаЖурнала.Отбор.Субконто1.Установить(Элемент.Значение, Истина);
			Иначе
				
				ПрежнееЗначение = ФормаЖурнала.Отбор.Субконто1.Значение;
				Если ТипЗнч(ПрежнееЗначение)<>Тип("СписокЗначений") Тогда
					СписокСубконто = Новый СписокЗначений;
					СписокСубконто.Добавить(ПрежнееЗначение);
				Иначе
					СписокСубконто = ПрежнееЗначение;
				КонецЕсли;
				
				СписокСубконто.Добавить(Элемент.Значение);
				
				ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.ВСписке;
				ФормаЖурнала.Отбор.Субконто1.Значение = СписокСубконто;
				ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
				
			КонецЕсли;
		ИначеЕсли Элемент.Ключ = "Валюта" Тогда
			
			ФормаЖурнала.Отбор.Валюта.Установить(Элемент.Значение, ЗначениеЗаполнено(Элемент.Значение));
			
		КонецЕсли;
			
	КонецЦикла;

	ФормаЖурнала.Отбор.Организация.Установить(Расшифровка.Организация, ЗначениеЗаполнено(Организация));

	// если есть информация о сторонах оборота, то используем отбор по дебету или кредиту
	// иначе устанавливаем отбор по счету и по корсчету
	Если Расшифровка.Свойство("СчетДт") или Расшифровка.Свойство("СчетКт") Тогда
		Если Расшифровка.Свойство("СчетДт") Тогда
			ФормаЖурнала.Отбор.СчетДт.Значение = Расшифровка.СчетДт;
			ФормаЖурнала.Отбор.СчетДт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетДт.Использование = Истина;
		КонецЕсли;
		
		Если Расшифровка.Свойство("СчетКт") Тогда
			ФормаЖурнала.Отбор.СчетКт.Значение = Расшифровка.СчетКт;
			ФормаЖурнала.Отбор.СчетКт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетКт.Использование = Истина;
		КонецЕсли;
	Иначе
		Если Расшифровка.Свойство("Счет") Тогда
			ФормаЖурнала.Отбор.Счет.Значение = Расшифровка.Счет;
			ФормаЖурнала.Отбор.Счет.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.Счет.Использование = Истина;
		КонецЕсли;
		
		Если Расшифровка.Свойство("КорСчет") Тогда
			ФормаЖурнала.Отбор.КорСчет.Значение = Расшифровка.КорСчет;
			ФормаЖурнала.Отбор.КорСчет.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.КорСчет.Использование = Истина;
		КонецЕсли;
	КонецЕсли;

	ФормаЖурнала.Открыть();
	

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, ПоказыватьЗаголовок=Истина) Экспорт
	
	ИмяОтчетаРасшифровки = НРег(Расшифровка.ИмяОбъекта);
	
	Если ИмяОтчетаРасшифровки = "хозрасчетный" Тогда
		
		ОбработкаРасшифровкиРегистрСписок(Расшифровка);
		
	Иначе
		
		ФормаРасшифровка = Отчеты[Расшифровка.ИмяОбъекта].ПолучитьФорму(,, Новый УникальныйИдентификатор);
		ФормаРасшифровка.РежимРасшифровки = Истина;
		Если Расшифровка.ИмяОбъекта = "ОборотыСчета" Тогда
			ФормаРасшифровка.Счет        = Расшифровка.Счет;
			Если Расшифровка.Свойство("КорСчет") Тогда
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСчет", Расшифровка.КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "СчетДт", Расшифровка.СчетДт, ВидСравненияКомпоновкиДанных.ВИерархии);
			ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "СчетКт", Расшифровка.СчетКт, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
		ФормаРасшифровка.Организация = Организация;
		ФормаРасшифровка.НачалоПериода = ДатаНач;
		ФормаРасшифровка.КонецПериода  = ДатаКон;
		Для Каждого Элемент Из Расшифровка.Отбор Цикл
			
			Если Элемент.Ключ="Период" Тогда
				
				ПериодС = Элемент.Значение;
				
				Если ПериодС<>NULL Тогда
					
					Если Период = "ДЕНЬ" Тогда
						ПериодПо = ПериодС + 24 * 60 * 60 - 1;
					ИначеЕсли Период = "НЕДЕЛЯ" Тогда
						ПериодПо = ПериодС + 7 * 24 * 60 * 60 - 1;
					ИначеЕсли Период = "ДЕКАДА" Тогда
						ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
					ИначеЕсли Период = "МЕСЯЦ" Тогда
						ПериодПо = КонецДня(КонецМесяца(ПериодС));
					ИначеЕсли Период = "КВАРТАЛ" Тогда
						ПериодПо = КонецДня(КонецКвартала(ПериодС));
					ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
						СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
						Если ПериодС<= СерединаГода Тогда
							ПериодПо = СерединаГода;
						Иначе
							ПериодПо = КонецДня(КонецГода(ПериодС));
						КонецЕсли;
						
					ИначеЕсли Период = "ГОД" Тогда
						ПериодПо = КонецДня(КонецГода(ПериодС));
					КонецЕсли;
					
					Если ДатаКон<>'00010101' Тогда
						ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
					КонецЕсли;
					
				Иначе
					
					ПериодС = '00010101';
					ПериодПо = ДатаНач;
					
				КонецЕсли;
				
				ФормаРасшифровка.НачалоПериода = ПериодС;
				ФормаРасшифровка.КонецПериода  = ПериодПо;
				
			ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
				
				Расшифровка.Вставить("Подстрока", Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		ФормаРасшифровка.Настроить();
		ФормаРасшифровка.Открыть();
		ФормаРасшифровка.ОбновитьОтчет();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()

// процедура создает колонки у таблиц правила вывода итогов и правила развернутого сальдо
Процедура СоздатьКолонкиУПравилВыводаИтоговИПравилаРазвернутогоСальдо(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо, 
	Знач ИмяРегистраБухгалтерии) Экспорт
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200);

	МассивБулево        = Новый Массив;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
    
	МассивТаблицаЗначений        = Новый Массив;
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");

	МассивСчет = Новый Массив;
	МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));
	ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);

	// Создание структуры реквизитов - таблиц
	Если ПравилаВыводаИтогов <> Неопределено Тогда

		ПравилаВыводаИтогов.Колонки.Очистить();
		ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;

	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда 
		
		ПравилаРазвернутогоСальдо.Колонки.Очистить();
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;
    	
КонецПроцедуры

//Функция возвращает строку формата периода
Функция ПолучитьСтрокуФорматаПериода(Знач Период) Экспорт
	
	ФорматПериода = "";
	Если ЗначениеЗаполнено(Период) Тогда
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ПОЛУГОДИЕ" Тогда
			ФорматПериода = "ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ДЕКАДА" Тогда
			ФорматПериода = "ДФ = """"""Декада с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		ИначеЕсли Врег(Период) = "РЕГИСТРАТОР" Тогда
			ФорматПериода = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматПериода;
	
КонецФункции

// процедура заполняет таблицу настроек свойств
Процедура ЗаполнитьТаблицуНастроекСвойств(ЭтотОбъект, Знач ИмяРеквизита, Структура) Экспорт
	
	Источник = Неопределено;
	Если Структура.Свойство(ИмяРеквизита, Источник) <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Приемник = ЭтотОбъект[ИмяРеквизита];
	Исключение
    	Возврат;
	КонецПопытки;
	
	Приемник.Очистить();
		
	// Загрузим совпадающие колонки.
	Для Каждого СтрокаТаблицыИсточника Из Источник Цикл
			
		СтрокаТаблицыПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника); 
			
	КонецЦикла;
		
КонецПроцедуры

// процедура устанавливает связывание данных и визуальных объектов отображения
// настроек Бух отчетов
Процедура УстановитьСвязываниеДанныхФормыНастроек(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо) Экспорт
	
	// Связывание с данными колонок "Счет": тип определяется типом колонки у таблицы
	Если ПравилаВыводаИтогов <> Неопределено Тогда
		ПравилаВыводаИтогов.Колонки.Счет.Данные = "Счет";
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаВыводаИтогов.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
	
	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда
		ПравилаРазвернутогоСальдо.Колонки.Счет.Данные = "Счет";
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаРазвернутогоСальдо.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
		
КонецПроцедуры
//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Хозрасчетный";

МетаданныеПланСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов; 

СоздатьКолонкиУПравилВыводаИтоговИПравилаРазвернутогоСальдо(Неопределено, ПравилаРазвернутогоСальдо, ИмяРегистраБухгалтерии);

Период="МЕСЯЦ";

ШиринаТаблицы = 0;

#КонецЕсли