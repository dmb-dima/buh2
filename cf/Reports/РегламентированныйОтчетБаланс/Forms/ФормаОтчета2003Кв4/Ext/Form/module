////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мБаланс;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранят имена многострочных разделов
Перем мИдГруппы1;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем РежимОтладки;
Перем ОбязРазделов;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

Перем мСохранятьРасшифровку Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мОтключитьАвтоматическоеУправлениеВариантами Экспорт;

Перем мБезКонсолидации Экспорт;

// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

// Хранит тип выбранного адреса при перевыборе адреса на форме отчета. По умолчанию, при открытии всегда равняется "ПолныйАдрПочт"
Перем мТипАдреса;

// Хранит адрес в формате "9запятых".
Перем мАдресДляВыгрузки;

Перем ЭтоБалансДляАУ;
Перем ИмяМакетаССоставомПоказателей;

Перем мДанныеОтчета Экспорт;
Перем ПоказателиВыгружаемыеСоЗнакомПлюс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДР()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНКР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаССоставомПоказателей);

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаССоставомПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	
	// Период в заголовке баланса
	мБаланс.Области.ДатаБаланса.Значение = "на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";

	// Период в списке кодов в форме баланса
	мБаланс.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.)";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		// Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "КодОКОНХ");

		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", мТипАдреса);
		Сведения.Добавить("", "ПолныйАдрЮР");
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	//Сведения.Добавить("", "ИННРук"); // ИНН руководителя

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	//Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера


	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		//КППЮЛ = ""; // КПП

		НаимЮЛПол = ""; // Полное наименование 

		ОКПО = "";
		ОКВЭД = "";

		ПолныйАдрЮР = "";

		ОснВидДеят = "";

		ФормСобств = "";

		ОКОПФ = "";

		ОКФС = "";

		КодОКОНХ = "";

		ОргПравФорм1 = "";

		ПолныйАдрПочт = "";
	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		// ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(мТипАдреса, ПолныйАдрПочт);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
		мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;

		Возврат;

	КонецЕсли;

	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	мБаланс.Области.ОргИНН.Значение = мИННЮЛ;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мБаланс.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКПО.Значение)) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мБаланс.Области.ОргКодОКПО.Значение  = "";
		Иначе
			мБаланс.Области.ОргКодОКПО.Значение  = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКВЭД.Значение)) Тогда
		мБаланс.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФорма.Значение)) Тогда
		мБаланс.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргОтрасль.Значение)) Тогда
		мБаланс.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;

	//Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргЮрАдрес.Значение)) Тогда
	//	мБаланс.Области.ОргЮрАдрес.Значение = АдрЮР;
	//КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКОПФ.Значение)) Тогда
		мБаланс.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКФС.Значение)) Тогда
		мБаланс.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФормаСобств.Значение)) Тогда
		мБаланс.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргПочтАдрес.Значение)) Тогда

		Если НЕ ЗначениеЗаполнено(ПолныйАдрПочт) Тогда
			мБаланс.Области.ОргПочтАдрес.Значение = "";
			ЮридическийАдрес = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ПолныйАдрЮР").ПолныйАдрЮР;
			Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
				мБаланс.Области.ОргПочтАдрес.Значение = ЮридическийАдрес;
				мТипАдреса = "ПолныйАдрЮР";
				мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
			КонецЕсли;
		Иначе
			мБаланс.Области.ОргПочтАдрес.Значение = ПолныйАдрПочт;
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;
		
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргДиректор.Значение)) Тогда
		мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргБухгалтер.Значение)) Тогда
		мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Баланс: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "Баланс";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;

	ТекТабличноеПоле = мБаланс;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана добавляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
	// область именованной секции
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";

		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// Установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Если Лев(ИмяСекции, 1) = "П" Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли; 

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = мИдГруппы1;
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = мБаланс;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧЦ = 3") + ".";
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = мБаланс;

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура ОсновнаяПанельПриСменеСтраницы(а, б) Экспорт
КонецПроцедуры

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Баланс";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = мБаланс;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
				КонецЕсли;

			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" Тогда
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; 

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "Баланс";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Баланс";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Баланс";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Баланс";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Баланс");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мБаланс.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура удаляет все дополнительные строки, вставленные в табличный документ.
// Удаляет данные этих строк из структуры многострочных разделов.
// 
Процедура УдалитьДопСтрокиМногострочныхРазделов()
	Перем ИсходноеКоличествоСтрокГруппы;

	// Выясним, имеются ли дополнительные строки, добавленные в многострочный раздел.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мБаланс;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Добавлена очистка первой строки многострочной части, чтобы таблица в многострочной структуре была очищена.
	мБаланс.Области.П000010099501_1.Значение = "";
	мБаланс.Области.П000010099502_1.Значение = "";
	мБаланс.Области.П000010099503_1.Значение = 0;
	мБаланс.Области.П000010099504_1.Значение = 0;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

КонецПроцедуры // УдалитьДопСтрокиМногострочныхРазделов()
 
// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУтвержденияБаланса");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаВысылкиОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мБаланс;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Удаляем дополнительные строки многострочных разделов
	УдалитьДопСтрокиМногострочныхРазделов();

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	СпП.Очистить();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Процедура выводит на печать заполненные строки секции (именованных строк)
// табличного документа с заданным именем.
//
// Параметры
//  ПечатнаяФорма  – табличный документ – печатная форма;
//  ИмяСекции      – строка – имя выводимой на печать секции;
//  НоваяСтраница  – булево – признак начала новой строки.
//
Процедура ВывестиНепустыеСтроки(ПечатнаяФорма, ИмяСекции, НоваяСтраница = Ложь)

	ОбластьСекции = мБаланс.ПолучитьОбласть(ИмяСекции);

	КолвоВложенныхСекций   = 0;
	ВыведенЗаголовокСекции = Ложь;

	Для каждого Строка Из ОбластьСекции.Области Цикл

		Если Строка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.Имя = ИмяСекции Тогда
			Продолжить;
		КонецЕсли;

		КолвоВложенныхСекций = КолвоВложенныхСекций + 1;

		ОбластьСтроки = мБаланс.ПолучитьОбласть(Строка.Имя);

		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСтроки.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			// Выводим заголовок секции
			Если Не ВыведенЗаголовокСекции Тогда

				// Сначала проверим, передан ли признак начала новой строки
				Если НоваяСтраница Тогда
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				Если мБаланс.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
					ОбластьЗаголовокСекции = мБаланс.ПолучитьОбласть("Заголовок" + ИмяСекции);
					ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
				КонецЕсли;

				ВыведенЗаголовокСекции = Истина;
			КонецЕсли;

			ПечатнаяФорма.Вывести(ОбластьСтроки);
		КонецЕсли;

	КонецЦикла;

	// Выводим подвал секции
	Если ВыведенЗаголовокСекции Тогда
		Если мБаланс.Области.Найти("Подвал" + ИмяСекции) <> Неопределено Тогда
			ОбластьЗаголовокСекции = мБаланс.ПолучитьОбласть("Подвал" + ИмяСекции);
			ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
		КонецЕсли;
	КонецЕсли;

	Если КолвоВложенныхСекций = 0 Тогда
		// Это тот случай, когда секция состоит из единственной строки.
		// Проверяем эту строку на предмет заполненных ячеек.
		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСекции.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			ПечатнаяФорма.Вывести(ОбластьСекции);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВывестиНепустыеСтроки()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Баланс";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0).КоличествоСтраниц() > 1 Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаБаланс", "Баланс", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мБаланс.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("Раздел1");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа1");

	ОбластьПечати = мБаланс.ПолучитьОбласть("ИтогоПоРазделу1");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("Раздел2");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "П0100210");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа2");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа3");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа4");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "П0100240");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа5");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа6");

	ОбластьПечати = мБаланс.ПолучитьОбласть("ИтогоПоРазделу2");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("АктивБаланс");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьПечати = мБаланс.ПолучитьОбласть("Раздел3");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа7");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа8");
	
	Если ЭтоБалансДляАУ Тогда
		ВывестиНепустыеСтроки(ПечатнаяФорма, "П0100440");
	Иначе
		ВывестиНепустыеСтроки(ПечатнаяФорма, "П0100470");
	КонецЕсли;

	ОбластьПечати = мБаланс.ПолучитьОбласть("ИтогоПоРазделу3");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("Раздел4");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа9");

	ОбластьПечати = мБаланс.ПолучитьОбласть("ИтогоПоРазделу4");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("Раздел5");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа10");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа11");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа12");

	ОбластьПечати = мБаланс.ПолучитьОбласть("ИтогоПоРазделу5");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мБаланс.ПолучитьОбласть("ПассивБаланс");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа13");

	ОбластьПечати = мБаланс.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	РазбитьПечатнуюФорму(ПечатнаяФорма);

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = КомментарийОбщий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мСохраненныйДок.КодИМНС = Организация.КодИМНС;
	КонецЕсли;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаБаланс";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мБаланс;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Вставить("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	// Сохраним тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", мАдресДляВыгрузки);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий 		 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	СписокСохранения.Свойство("ТипАдреса", мТипАдреса);
	Если мТипАдреса = Неопределено Тогда
		мТипАдреса = "ПолныйАдрПочт";
	ИначеЕсли Найти(мТипАдреса, "Полный") = 0 Тогда
		мТипАдреса = "Полный" + мТипАдреса;	
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", мАдресДляВыгрузки);
	Если мАдресДляВыгрузки = Неопределено Тогда
		Если мТипАдреса = "ПолныйАдрЮР" Тогда
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		Иначе
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;	
		КонецЕсли;
	КонецЕсли;

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
			мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();


КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	// Актив

	// Строка 190
	мБаланс.Области.П000010019003.Значение = мБаланс.Области.П000010011003.Значение
	                                       + мБаланс.Области.П000010012003.Значение
	                                       + мБаланс.Области.П000010013003.Значение
	                                       + мБаланс.Области.П000010013503.Значение
	                                       + мБаланс.Области.П000010014003.Значение
	                                       + мБаланс.Области.П000010014503.Значение
	                                       + мБаланс.Области.П000010015003.Значение;

	мБаланс.Области.П000010019004.Значение = мБаланс.Области.П000010011004.Значение
	                                       + мБаланс.Области.П000010012004.Значение
	                                       + мБаланс.Области.П000010013004.Значение
	                                       + мБаланс.Области.П000010013504.Значение
	                                       + мБаланс.Области.П000010014004.Значение
	                                       + мБаланс.Области.П000010014504.Значение
	                                       + мБаланс.Области.П000010015004.Значение;


	// Строка 210
	мБаланс.Области.П000010021003.Значение = мБаланс.Области.П000010021103.Значение
	                                       + мБаланс.Области.П000010021203.Значение
	                                       + мБаланс.Области.П000010021303.Значение
	                                       + мБаланс.Области.П000010021403.Значение
	                                       + мБаланс.Области.П000010021503.Значение
	                                       + мБаланс.Области.П000010021603.Значение
	                                       + мБаланс.Области.П000010021703.Значение;

	мБаланс.Области.П000010021004.Значение = мБаланс.Области.П000010021104.Значение
	                                       + мБаланс.Области.П000010021204.Значение
	                                       + мБаланс.Области.П000010021304.Значение
	                                       + мБаланс.Области.П000010021404.Значение
	                                       + мБаланс.Области.П000010021504.Значение
	                                       + мБаланс.Области.П000010021604.Значение
	                                       + мБаланс.Области.П000010021704.Значение;

	// Строка 290
	мБаланс.Области.П000010029003.Значение = мБаланс.Области.П000010021003.Значение
	                                       + мБаланс.Области.П000010022003.Значение
	                                       + мБаланс.Области.П000010023003.Значение
	                                       + мБаланс.Области.П000010024003.Значение
	                                       + мБаланс.Области.П000010025003.Значение
	                                       + мБаланс.Области.П000010026003.Значение
	                                       + мБаланс.Области.П000010027003.Значение;

	мБаланс.Области.П000010029004.Значение = мБаланс.Области.П000010021004.Значение
	                                       + мБаланс.Области.П000010022004.Значение
	                                       + мБаланс.Области.П000010023004.Значение
	                                       + мБаланс.Области.П000010024004.Значение
	                                       + мБаланс.Области.П000010025004.Значение
	                                       + мБаланс.Области.П000010026004.Значение
	                                       + мБаланс.Области.П000010027004.Значение;

	// Строка 300
	мБаланс.Области.П000010030003.Значение = мБаланс.Области.П000010019003.Значение
	                                       + мБаланс.Области.П000010029003.Значение;

	мБаланс.Области.П000010030004.Значение = мБаланс.Области.П000010019004.Значение
	                                       + мБаланс.Области.П000010029004.Значение;

	// ПАССИВ
	
	Если ЭтоБалансДляАУ Тогда
		
		// Cтрока 490
		мБаланс.Области.П000010049003.Значение = мБаланс.Области.П000010042003.Значение
		                                       + мБаланс.Области.П000010044003.Значение;

		мБаланс.Области.П000010049004.Значение = мБаланс.Области.П000010042004.Значение
		                                       + мБаланс.Области.П000010044004.Значение;
		
	Иначе
	
		// Cтрока 430
		мБаланс.Области.П000010043003.Значение = мБаланс.Области.П000010043103.Значение
		                                       + мБаланс.Области.П000010043203.Значение;

		мБаланс.Области.П000010043004.Значение = мБаланс.Области.П000010043104.Значение
		                                       + мБаланс.Области.П000010043204.Значение;

		// Cтрока 490
		мБаланс.Области.П000010049003.Значение = мБаланс.Области.П000010041003.Значение
		                                       + мБаланс.Области.П000010041103.Значение
		                                       + мБаланс.Области.П000010042003.Значение
		                                       + мБаланс.Области.П000010043003.Значение
		                                       + мБаланс.Области.П000010047003.Значение;

		мБаланс.Области.П000010049004.Значение = мБаланс.Области.П000010041004.Значение
		                                       + мБаланс.Области.П000010041104.Значение
		                                       + мБаланс.Области.П000010042004.Значение
		                                       + мБаланс.Области.П000010043004.Значение
		                                       + мБаланс.Области.П000010047004.Значение;
		
	КонецЕсли;

	// Cтрока 590
	мБаланс.Области.П000010059003.Значение = мБаланс.Области.П000010051003.Значение
	                                       + мБаланс.Области.П000010051503.Значение
	                                       + мБаланс.Области.П000010052003.Значение;

	мБаланс.Области.П000010059004.Значение = мБаланс.Области.П000010051004.Значение
	                                       + мБаланс.Области.П000010051504.Значение
	                                       + мБаланс.Области.П000010052004.Значение;

	// Строка 620
	мБаланс.Области.П000010062003.Значение = мБаланс.Области.П000010062103.Значение
	                                       + мБаланс.Области.П000010062203.Значение
	                                       + мБаланс.Области.П000010062303.Значение
	                                       + мБаланс.Области.П000010062403.Значение
	                                       + мБаланс.Области.П000010062503.Значение;

	мБаланс.Области.П000010062004.Значение = мБаланс.Области.П000010062104.Значение
	                                       + мБаланс.Области.П000010062204.Значение
	                                       + мБаланс.Области.П000010062304.Значение
	                                       + мБаланс.Области.П000010062404.Значение
	                                       + мБаланс.Области.П000010062504.Значение;

	// Строка 690
	мБаланс.Области.П000010069003.Значение = мБаланс.Области.П000010061003.Значение
	                                       + мБаланс.Области.П000010062003.Значение
	                                       + мБаланс.Области.П000010063003.Значение
	                                       + мБаланс.Области.П000010064003.Значение
	                                       + мБаланс.Области.П000010065003.Значение
	                                       + мБаланс.Области.П000010066003.Значение;

	мБаланс.Области.П000010069004.Значение = мБаланс.Области.П000010061004.Значение
	                                       + мБаланс.Области.П000010062004.Значение
	                                       + мБаланс.Области.П000010063004.Значение
	                                       + мБаланс.Области.П000010064004.Значение
	                                       + мБаланс.Области.П000010065004.Значение
	                                       + мБаланс.Области.П000010066004.Значение;

	// строка 700
	мБаланс.Области.П000010070003.Значение = мБаланс.Области.П000010049003.Значение
	                                       + мБаланс.Области.П000010059003.Значение
	                                       + мБаланс.Области.П000010069003.Значение;

	мБаланс.Области.П000010070004.Значение = мБаланс.Области.П000010049004.Значение
	                                       + мБаланс.Области.П000010059004.Значение
	                                       + мБаланс.Области.П000010069004.Значение;
	

КонецПроцедуры // Расчет()

// Создает и заполняет дополнительные строки многострочного
// раздела формы. Вызывается при автозаполнении отчета по
// данным учета.
// 
// Параметры
//  ДанныеДопСтрок  – таблица значений – содержит данные 
//                 для заполнения дополнительных строк.
//  ИмяГруппы       - строка - идентификаторы многострочной
//                 группы, дополнительные строки которой создаются
//
Процедура АвтозаполнениеДопСтрок(ДанныеДопСтрок, ИмяГруппы)
	Перем СтруктураГруппы;

	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Обновляем структуру данных многострочного раздела
	Для каждого СтрокаТаблицы Из ДанныеДопСтрок Цикл

		Наименование = СтрокаТаблицы.Наименование;
		НачОстаток   = СтрокаТаблицы.НачОстаток;
		КонОстаток   = СтрокаТаблицы.КонОстаток;

		ЗаполнилиПустуюСтроку = 0;
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Если ПустаяСтрока(СтрокаТаблицы[0]) И (СтрокаТаблицы[2] = 0) И (СтрокаТаблицы[3] = 0) Тогда
				// Это первая незаполненная строка многострочного раздела
				СтрокаТаблицы[0] = Наименование;
				СтрокаТаблицы[1] = "991";
				СтрокаТаблицы[2] = НачОстаток;
				СтрокаТаблицы[3] = КонОстаток;

				ЗаполнилиПустуюСтроку = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполнилиПустуюСтроку = 0 Тогда
			// Определяем порядковый номер последней строки перед вставкой
			СтрИсхНомер    = СтруктураГруппы[СтруктураГруппы.Количество() - 1][1];
			ИсходныйНомер  = ? (НЕ ПустаяСтрока(СтрИсхНомер), Число(СтрИсхНомер), 0);

			НоваяСтрока    = СтруктураГруппы.Добавить();
			НоваяСтрока[0] = Наименование;
			НоваяСтрока[2] = НачОстаток;
			НоваяСтрока[3] = КонОстаток;
			
			Если ИсходныйНомер = 0 Тогда
				НовыйПорядковыйНомер = 0;
			Иначе
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
			КонецЕсли;
			
			НовыйНомер     = Формат(НовыйПорядковыйНомер, "ЧЦ = 3; ЧН=-; ЧВН=");
			НоваяСтрока[1] = НовыйНомер;
			
		КонецЕсли;

	КонецЦикла;
	
	// Выводим дополнительные строки в таблицу
	ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

КонецПроцедуры // АвтозаполнениеДопСтрок()

// ОбработчикИзменения
//
Процедура ОбработчикИзменения()
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ОбработчикИзменения

// Процедуры предназначеня для заполнения баланса условными цифрами - 
// в демонстрационных целях.
//  Вызывается из обработчика КоманднаяПанельФормыЗаполнить() вместо 
// "нормальной" процедуры ЗаполнитьАвто().
//
//Процедура ЗаполнитьДемо()
//	УстановитьЗначениеПоказателя("П000010012004", 5000000);
//	УстановитьЗначениеПоказателя("П000010021104", 1500000);
//	УстановитьЗначениеПоказателя("П000010022004", 2023500);
//	УстановитьЗначениеПоказателя("П000010024004", 6150000);
//	УстановитьЗначениеПоказателя("П000010024104", 6150000);
//	УстановитьЗначениеПоказателя("П000010024104", 6150000);
//	УстановитьЗначениеПоказателя("П000010026004", 12300000);
//	УстановитьЗначениеПоказателя("П000010041004", 300000);
//	УстановитьЗначениеПоказателя("П000010047004", 11507500);
//	УстановитьЗначениеПоказателя("П000010062104", 12141000);
//	УстановитьЗначениеПоказателя("П000010062404", 3025000);

//	Расчет();
//	Модифицированность = Истина;

//КонецПроцедуры // ЗаполнитьДемо()

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	Перем ТаблДанныхДопСтрокОбщ;

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	// Для дополнения справки по забалансовым счетам дополнительными строками
	// следует предварительно заполнить таблицу значений ТаблДанныхДопСтрок,
	// далее вызвать процедуру АвтозаполнениеДопСтрок(), передав в качестве
	// параметра таблицу значений ТаблДанныхДопСтрок.
	//
	////////
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	СпП.Очистить();
	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");
	ТаблДанныхДопСтрок.Колонки.Добавить("НачОстаток");
	ТаблДанныхДопСтрок.Колонки.Добавить("КонОстаток");

	// Предварительно удаляем дополнительные строки многострочных разделов
	УдалитьДопСтрокиМногострочныхРазделов();

	// Инициализация
	ПС = ПланыСчетов["Хозрасчетный"];
	
	// Проверим есть ли счет 76.НА в ПС
	Ссылка = ПС.НайтиПоКоду("76.НА");
	Если Ссылка.Код <> "" Тогда
		Есть76НА = Истина
	Иначе 
		Есть76НА = Ложь
	КонецЕсли;
	
	// Проверим есть ли счет 68.32 в ПС
	Ссылка = ПС.НайтиПоКоду("68.32");
	Если Ссылка.Код <> "" Тогда
		Есть68_32 = Истина
	Иначе 
		Есть68_32 = Ложь
	КонецЕсли;

		
	Счет01      = ПС.ОсновныеСредства;
	Счет02_01   = ПС.АмортизацияОС_01;
	Счет02_02   = ПС.АмортизацияОС_03;
	Счет03      = ПС.ДоходныеВложенияВ_МЦ;
	Счет04_01   = ПС.НематериальныеАктивыОрганизации;
	Счет04_02   = ПС.РасходыНаНИОКР;
	Счет05      = ПС.АмортизацияНематериальныхАктивов;
	Счет07      = ПС.ОборудованиеКУстановке;
	Счет08_01   = ПС.ПриобретениеЗемельныхУчастков;
	Счет08_02   = ПС.ПриобретениеОбъектовПриродопользования;
	Счет08_03   = ПС.СтроительствоОбъектовОсновныхСредств;
	Счет08_04   = ПС.ПриобретениеОбъектовОсновныхСредств;
	Счет08_05   = ПС.ПриобретениеНематериальныхАктивов;
	Счет08_06   = ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо;
	Счет08_07   = ПС.ПриобретениеВзрослыхЖивотных;
	Счет08_08   = ПС.ВыполнениеНИОКР;
	Счет09      = ПС.ОтложенныеНалоговыеАктивы;
	Счет10      = ПС.Материалы;
	Счет11      = ПС.ЖивотныеНаВыращиванииИОткорме;
	Счет14_01   = ПС.РезервыПодСнижениеСтоимостиМатериалов;
	Счет14_02   = ПС.РезервыПодСнижениеСтоимостиТоваров;
	Счет14_03   = ПС.РезервыПодСнижениеСтоимостиГотовойПродукции;
	Счет14_04   = ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства;
	Счет15_01   = ПС.ЗаготовлениеИПриобретениеМатериалов;
	Счет15_02   = ПС.ПриобретениеТоваров;
	Счет16_01   = ПС.ОтклонениеВСтоимостиМатериалов;
	Счет16_02   = ПС.ОтклонениеВСтоимостиТоваров;
	Счет19      = ПС.НДСпоПриобретеннымЦенностям;
	Счет20      = ПС.ОсновноеПроизводство_;
	Счет21      = ПС.Полуфабрикаты;
	Счет23      = ПС.ВспомогательныеПроизводства;
	Счет28      = ПС.БракВПроизводстве;
	Счет29      = ПС.ОбслуживающиеПроизводства;
	Счет41      = ПС.Товары;
	Счет42      = ПС.ТорговаяНаценка;
	Счет43      = ПС.ГотоваяПродукция;
	Счет44      = ПС.РасходыНаПродажу;
	Счет45      = ПС.ТоварыОтгруженные;
	Счет46      = ПС.ВыполненныеЭтапыПоНезавершеннымРаботам;
	Счет50      = ПС.Касса;
	Счет51      = ПС.РасчетныеСчета;
	Счет52      = ПС.ВалютныеСчета;
	Счет55_01   = ПС.Аккредитивы;
	Счет55_02   = ПС.ЧековыеКнижки;
	Счет55_03   = ПС.ДепозитныеСчета;
	Счет55_04   = ПС.ПрочиеСпециальныеСчета;
	Счет55_21   = ПС.АккредитивыВал;
	Счет55_23   = ПС.ДепозитныеСчетаВал;
	Счет55_24   = ПС.ПрочиеСпециальныеСчетаВал;
	Счет57      = ПС.ПереводыВПути_;
	Счет58_01_1 = ПС.Паи;
	Счет58_01_2 = ПС.Акции;
	Счет58_02   = ПС.ДолговыеЦенныеБумаги;
	Счет58_03   = ПС.ПредоставленныеЗаймы;
	Счет58_04   = ПС.ВкладыПоДоговоруПростогоТоварищества;
	Счет58_05   = ПС.ПриобретенныеПрава;
	Счет59      = ПС.РезервыПодОбесценениеФинансовыхВложений;
	Счет60_01   = ПС.РасчетыСПоставщиками;
	Счет60_02   = ПС.РасчетыПоАвансамВыданным;
	Счет60_03   = ПС.ВекселяВыданные;
	Счет60_21   = ПС.РасчетыСПоставщикамиВал;
	Счет60_22   = ПС.РасчетыПоАвансамВыданнымВал;
	Счет60_31   = ПС.РасчетыСПоставщикамиУЕ;
	Счет60_32   = ПС.РасчетыПоАвансамВыданнымУЕ;

	Счет62_01   = ПС.РасчетыСПокупателями;
	Счет62_02   = ПС.РасчетыПоАвансамПолученным;
	Счет62_03   = ПС.ВекселяПолученные;
	Счет62_21   = ПС.РасчетыСПокупателямиВал;
	Счет62_22   = ПС.РасчетыПоАвансамПолученнымВал;
	Счет62_31   = ПС.РасчетыСПокупателямиУЕ;
	Счет62_32   = ПС.РасчетыПоАвансамПолученнымУЕ;

	Счет63      = ПС.РезервыПоСомнительнымДолгам;
	Счет66      = ПС.РасчетыПоКраткосрочнымКредитамИЗаймам;
	Счет67      = ПС.РасчетыПоДолгосрочнымКредитамИЗаймам;

	Счет68_01   = ПС.НДФЛ;
	Счет68_02   = ПС.НДС;
	Счет68_03   = ПС.Акцизы;
	Счет68_04_1 = ПС.РасчетыСБюджетом;
	Счет68_04_2 = ПС.РасчетНалогаНаПрибыль;
	Счет68_07   = ПС.ТранспортныйНалог;
	Счет68_08   = ПС.НалогНаИмущество;
	Счет68_09   = ПС.НалогНаРекламу;
	Счет68_10   = ПС.ПрочиеНалогиИСборы;
	Счет68_11   = ПС.ЕНВД;
	Счет68_12   = ПС.ЕНприУСН;
	Счет68_22   = ПС.НДСпоЭкспортуКВозмещению;
	
	Если Есть68_32 = Истина Тогда
		Счет68_32   = ПС.НДСНалоговогоАгента;
	КонецЕсли;

	Счет69      = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет70      = ПС.РасчетыСПерсоналомПоОплатеТруда;
	Счет71      = ПС.РасчетыСПодотчетнымиЛицами_;
	Счет73      = ПС.РасчетыСПерсоналомПоПрочимОперациям;
	Счет75_01   = ПС.РасчетыПоВкладамВУставныйКапитал;
	Счет75_02   = ПС.РасчетыПоВыплатеДоходов;

	Счет76_01   = ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию;
	Счет76_02   = ПС.РасчетыПоПретензиям;
	Счет76_03   = ПС.РасчетыПоПричитающимсяДивидендам;
	Счет76_04   = ПС.РасчетыПоДепонированнымСуммам;
	Счет76_05   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Счет76_06   = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет76_09   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Счет76_21   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
	Счет76_22   = ПС.РасчетыПоПретензиямВал;
	Счет76_25   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Счет76_26   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Счет76_29   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Счет76_32   = ПС.РасчетыПоПретензиямУЕ;
	Счет76_35   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Счет76_36   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Счет76_39   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Счет76_41   = ПС.РасчетыПоИсполнительнымДокументамРаботников;
	Счет76_ВА   = ПС.НДСпоАвансамИПредоплатамВыданным;
	Счет76_АВ   = ПС.НДСпоАвансамИПредоплатам;
	Счет76_Н    = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	
	Если Есть76НА = Истина Тогда
		Счет76_НА   = ПС.РасчетыНДСНалоговогоАгента;
	КонецЕсли;
	
	Счет76_ОТ   = ПС.НДСНачисленныйПоОтгрузке;

	Счет77      = ПС.ОтложенныеНалоговыеОбязательства;
	Счет79      = ПС.ВнутрихозяйственныеРасчеты;
	
	Если ЭтоБалансДляАУ Тогда
		Счет08_14   = ПС.ПриобретениеОСВРамкахЦелевогоФинансирования;
		Счет76_51   = ПС.РасчетыПоЦелевомуФинансированию;
		Счет76_52   = ПС.РасчетыПоЦелевомуФинансированиюВал;
		Счет83_10   = ПС.НедвижимоеИОсобоЦенноеДвижимоеИмущество;
	Иначе
		Счет80      = ПС.УставныйКапитал;
		Счет81      = ПС.СобственныеАкции;
		Счет82_01   = ПС.РезервыОбразованныеВСоответствииСЗаконодательством;
		Счет82_02   = ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами;
	КонецЕсли;
	
	Счет83      = ПС.ДобавочныйКапитал;

	Счет84      = ПС.НераспределеннаяПрибыль;
	Счет84_01   = ПС.ПрибыльПодлежащаяРаспределению;
	Счет84_02   = ПС.УбытокПодлежащийПокрытию;

	Счет86      = ПС.ЦелевоеФинансирование;
	Счет94      = ПС.НедостачиИПотериОтПорчиЦенностей;
	Счет96      = ПС.РезервыПредстоящихРасходов;
	Счет97      = ПС.РасходыБудущихПериодов;
	Счет98      = ПС.ДоходыБудущихПериодов;
	Счет99      = ПС.ПрибылиИУбытки;
	Счет001     = ПС.АрендованныеОсновныеСредства;
	Счет002     = ПС.ТМЦпринятыеНаОтветственноеХранение;
	Счет003     = ПС.МатериалыПринятыеВПереработку;
	Счет004     = ПС.ТоварыПринятыеНаКомиссию;
	Счет005     = ПС.ОборудованиеПринятоеДляМонтажа;
	Счет006     = ПС.БланкиСтрогойОтчетности;
	Счет007     = ПС.СписаннаяВУбытокЗадолженностьДебиторов;
	Счет008     = ПС.ОбеспеченияОбязательствПолученные;
	Счет009     = ПС.ОбеспеченияОбязательствВыданные;
	Счет010     = ПС.ИзносОсновныхСредств;
	Счет011     = ПС.ОсновныеСредстваСданныеВАренду;

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблДанныхДопСтрок);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
		
		// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
		СчетаУчетаРасчетов = Новый Массив;
		СчетаУчетаРасчетов.Добавить(Счет60_01);
		СчетаУчетаРасчетов.Добавить(Счет60_21);
		СчетаУчетаРасчетов.Добавить(Счет60_31);
		СчетаУчетаРасчетов.Добавить(Счет62_01);
		СчетаУчетаРасчетов.Добавить(Счет62_21);
		СчетаУчетаРасчетов.Добавить(Счет62_31);

		// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
		ВидыСубконтоДляРасчета = Новый Массив;
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		// строка 110 "Нематериальные активы"
		П010011003_04 = СНД(Счет04_01);
		П010011003_05 = СНК(Счет05);

		П010011003 = П010011003_04 - П010011003_05;
		УстановитьЗначениеПоказателя("П000010011003", П010011003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011003","Строка 110 ""Нематериальные активы"", графа ""На начало отчетного года""","+","!СНД", П010011003_04, Счет04_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011003","","-","!СНК", -П010011003_05, Счет05);
		
		П010011004_04 = СКД(Счет04_01);
		П010011004_05 = СКК(Счет05);

		П010011004 = П010011004_04 - П010011004_05;
		УстановитьЗначениеПоказателя("П000010011004", П010011004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011004","Строка 110 ""Нематериальные активы"", графа ""На конец отчетного периода""","+","!СКД", П010011004_04, Счет04_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010011004","","-","!СКК", -П010011004_05, Счет05);

		// строка 120 "Основные средства"
		П010012003_01    = СНД(Счет01);
		П010012003_02_01 = СНК(Счет02_01);

		П010012003 = П010012003_01 - П010012003_02_01;
		УстановитьЗначениеПоказателя("П000010012003", П010012003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "Строка 120 ""Основные средства (01, 02)"", графа ""На начало отчетного года""", "+", "!СНД", П010012003_01, Счет01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "-", "!СНК", -П010012003_02_01, Счет02_01);

		П010012004_01    = СКД(Счет01);
		П010012004_02_01 = СКК(Счет02_01);
		
		П010012004 = П010012004_01 - П010012004_02_01;
		УстановитьЗначениеПоказателя("П000010012004", П010012004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "Строка 120 ""Основные средства (01, 02)"", графа ""На конец отчетного периода""", "+", "!СКД", П010012004_01, Счет01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "-", "!СКК", -П010012004_02_01, Счет02_01);

		// строка 130 "Незавершенное строительство"
		П010013003_07    = СНД(Счет07);
		П010013003_08_01 = СНД(Счет08_01);
		П010013003_08_02 = СНД(Счет08_02);
		П010013003_08_03 = СНД(Счет08_03);
		П010013003_08_04 = СНД(Счет08_04);
		П010013003_08_06 = СНД(Счет08_06);
		П010013003_08_07 = СНД(Счет08_07);

		П010013003 = П010013003_07 + П010013003_08_01 + П010013003_08_02 + П010013003_08_03 + П010013003_08_04 + П010013003_08_06 + П010013003_08_07;
		
		Если ЭтоБалансДляАУ Тогда
			П010013003_08_14 = СНД(Счет08_14);
			П010013003 = П010013003 + П010013003_08_14;
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010013003", П010013003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "Строка 130 ""Незавершенное строительство"", графа ""На начало отчетного года""", "+", "!СНД", П010013003_07, Счет07, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_01, Счет08_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_02, Счет08_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_03, Счет08_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_04, Счет08_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_06, Счет08_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_07, Счет08_07);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "!СНД", П010013003_08_14, Счет08_14);
		КонецЕсли;

		П010013004_07    = СКД(Счет07);
		П010013004_08_01 = СКД(Счет08_01);
		П010013004_08_02 = СКД(Счет08_02);
		П010013004_08_03 = СКД(Счет08_03);
		П010013004_08_04 = СКД(Счет08_04);
		П010013004_08_06 = СКД(Счет08_06);
		П010013004_08_07 = СКД(Счет08_07);
		
		П010013004 = П010013004_07 + П010013004_08_01 + П010013004_08_02 + П010013004_08_03 + П010013004_08_04 + П010013004_08_06 + П010013004_08_07;
		
		Если ЭтоБалансДляАУ Тогда
			П010013004_08_14 = СКД(Счет08_14);
			П010013004 = П010013004 + П010013004_08_14;
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010013004", П010013004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "Строка 130 ""Незавершенное строительство"", графа ""На конец отчетного периода""", "+", "!СКД", П010013004_07, Счет07, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_01, Счет08_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_02, Счет08_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_03, Счет08_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_04, Счет08_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_06, Счет08_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_07, Счет08_07);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "!СКД", П010013004_08_14, Счет08_14);
		КонецЕсли;

		// строка 135 "Доходные вложения в материальные ценности"
		П010013503_03    = СНД(Счет03);
		П010013503_02_02 = СНК(Счет02_02);

		П010013503 = П010013503_03 - П010013503_02_02;
		УстановитьЗначениеПоказателя("П000010013503", П010013503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013503", "Строка 135 ""Доходные вложения в материальные ценности"", графа ""На начало отчетного года""", "+", "!СНД", П010013503_03, Счет03, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013503", "", "-", "!СНК", -П010013503_02_02, Счет02_02);

		П010013504_03    = СКД(Счет03);
		П010013504_02_02 = СКК(Счет02_02);

		П010013504 = П010013504_03 - П010013504_02_02;
		УстановитьЗначениеПоказателя("П000010013504", П010013504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013504", "Строка 135 ""Доходные вложения в материальные ценности"", графа ""На конец отчетного периода""", "+", "!СКД", П010013504_03, Счет03, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013504", "", "-", "!СКК", -П010013504_02_02, Счет02_02);

		// строка 140 "Долгосрочные финансовые вложения"
		П010014003 = СНД(Счет58_01_1);
		УстановитьЗначениеПоказателя("П000010014003", П010014003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014003", "Строка 140 ""Долгосрочные финансовые вложения"", графа ""На начало отчетного года""", "+", "!СНД", П010014003, Счет58_01_1, , , , "Баланс");

		П010014004 = СКД(Счет58_01_1);
		УстановитьЗначениеПоказателя("П000010014004", П010014004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014004", "Строка 140 ""Долгосрочные финансовые вложения"", графа ""На конец отчетного периода""", "+", "!СКД", П010014004, Счет58_01_1, , , , "Баланс");

		// строка 145 "Отложенные налоговые активы"
		// В балансе за отчетный год необходимо учесть возможную переоценку
		// отложенных налоговых активов и отложенных налоговых обязательств,
		// проведенную в связи с изменением ставки налога на прибыль. Результаты
		// переоценки должны показываться в балансе за год, следующий за отчетным,
		// но отражаются проводками в отчетном году. Для учета результатов
		// переоценки корректируем остатки счета 09 на конец периода на обороты 
		// в корреспонденции со счетами 84.01 и 84.02.

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "09", , , , "Организация", мОргРасшифровка);

		ОБ_09__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет09, Счет84_01);
		ОБ_84_02__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет09, Счет84_02);

		П010014503 = СНД(Счет09);
		УстановитьЗначениеПоказателя("П000010014503", П010014503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014503", "Строка 145 ""Отложенные налоговые активы"", графа ""На начало отчетного года""", "+", "!СНД", П010014503, Счет09, , , , "Баланс");

		П010014504_09 = СКД(Счет09);
		П010014504 = П010014504_09 - ОБ_09__84_01 + ОБ_84_02__09;
		УстановитьЗначениеПоказателя("П000010014504", П010014504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014504", "Строка 145 ""Отложенные налоговые активы"", графа ""На конец отчетного периода""", "+", "!СКД", П010014504_09, Счет09, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014504", "", "-", "!ОБ", -ОБ_09__84_01, Счет09, Счет84_01, , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014504", "", "+", "!ОБ",  ОБ_84_02__09, Счет84_02, Счет09, , , "Баланс");

		// строка 150 "Прочие внеоборотные активы"

		// Так как расходы на НИОКР, учитываемые на счете 04.02, не амортизируются, 
		// а списываются на расходы по обычным видам деятельности, остаток 
		// на счете 04.02 равен остатку не списанных расходов на НИОКР
		
		П010015003_04_02 = СНД(Счет04_02);
		П010015003_08_05 = СНД(Счет08_05);
		П010015003_08_08 = СНД(Счет08_08);
		
		П010015003 = П010015003_04_02 + П010015003_08_05 + П010015003_08_08;
		УстановитьЗначениеПоказателя("П000010015003", П010015003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "Строка 150 ""Прочие внеоборотные активы"", графа ""На начало отчетного года""", "+", "!СНД", П010015003_04_02, Счет04_02, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "", "+", "!СНД", П010015003_08_05, Счет08_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "", "+", "!СНД", П010015003_08_08, Счет08_08);

		П010015004_04_02 = СКД(Счет04_02);
		П010015004_08_05 = СКД(Счет08_05);
		П010015004_08_08 = СКД(Счет08_08);
		
		П010015004 = П010015004_04_02 + П010015004_08_05 + П010015004_08_08;
		УстановитьЗначениеПоказателя("П000010015004", П010015004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "Строка 150 ""Прочие внеоборотные активы"", графа ""На конец отчетного периода""", "+", "!СКД", П010015004_04_02, Счет04_02, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "", "+", "!СКД", П010015004_08_05, Счет08_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "", "+", "!СКД", П010015004_08_08, Счет08_08);

		// строка 211 "сырье, материалы и другие аналогичные ценности"
		П010021103_10      = СНД(Счет10);
		П010021103_14_01   = СНК(Счет14_01);
		П010021103_15_01   = СНД(Счет15_01);
		П010021103_16_01_Д = СНД(Счет16_01);
		П010021103_16_01_К = СНК(Счет16_01);

		П010021103 = П010021103_10 - П010021103_14_01 + П010021103_15_01 + П010021103_16_01_Д - П010021103_16_01_К;
		УстановитьЗначениеПоказателя("П000010021103", П010021103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021103", "Строка 211 ""сырье, материалы и другие аналогичные ценности"", графа ""На начало отчетного года""", "+", "!СНД", П010021103_10, Счет10, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021103", "", "-", "!СНД", -П010021103_14_01, Счет14_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021103", "", "+", "!СНД", П010021103_15_01, Счет15_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021103", "", "+", "!СНД", П010021103_16_01_Д, Счет16_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021103", "", "-", "!СНК", -П010021103_16_01_К, Счет16_01);

		П010021104_10      = СКД(Счет10);
		П010021104_14_01   = СКК(Счет14_01);
		П010021104_15_01   = СКД(Счет15_01);
		П010021104_16_01_Д = СКД(Счет16_01);
		П010021104_16_01_К = СКК(Счет16_01);

		П010021104 = П010021104_10 - П010021104_14_01 + П010021104_15_01 + П010021104_16_01_Д - П010021104_16_01_К;
		УстановитьЗначениеПоказателя("П000010021104", П010021104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021104", "Строка 211 ""сырье, материалы и другие аналогичные ценности"", графа ""На конец отчетного периода""", "+", "!СКД", П010021104_10, Счет10, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021104", "", "-", "!СКД", -П010021104_14_01, Счет14_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021104", "", "+", "!СКД", П010021104_15_01, Счет15_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021104", "", "+", "!СКД", П010021104_16_01_Д, Счет16_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021104", "", "-", "!СКК", -П010021104_16_01_К, Счет16_01);

		// строка 212 "животные на выращивании и откорме"
		П010021203 = СНД(Счет11);
		УстановитьЗначениеПоказателя("П000010021203", П010021203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021203", "Строка 212 ""животные на выращивании и откорме"", графа ""На начало отчетного года""", "+", "!СНД", П010021203, Счет11, , , , "Баланс");

		П010021204 = СКД(Счет11);
		УстановитьЗначениеПоказателя("П000010021204", П010021204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021204", "Строка 212 ""животные на выращивании и откорме"", графа ""На конец отчетного периода""", "+", "!СКД", П010021204, Счет11, , , , "Баланс");

		// строка 213 "затраты в незавершенном производстве (издержках обращения)"
		П010021303_20    = СНД(Счет20);
		П010021303_21    = СНД(Счет21);
		П010021303_23    = СНД(Счет23);
		П010021303_29    = СНД(Счет29);
		П010021303_44    = СНД(Счет44);
		П010021303_46    = СНД(Счет46);
		П010021303_14_04 = СНК(Счет14_04);

		П010021303 = П010021303_20 + П010021303_21 + П010021303_23 + П010021303_29 + П010021303_44 + П010021303_46 - П010021303_14_04;
		УстановитьЗначениеПоказателя("П000010021303", П010021303);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "Строка 213 ""затраты в незавершенном производстве (издержках обращения)"", графа ""На начало отчетного года""", "+", "!СНД", П010021303_20, Счет20, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "+", "!СНД", П010021303_21, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "+", "!СНД", П010021303_23, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "+", "!СНД", П010021303_29, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "+", "!СНД", П010021303_44, Счет44);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "+", "!СНД", П010021303_46, Счет46);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021303", "", "-", "!СНК", -П010021303_14_04, Счет14_04);

		П010021304_20    = СКД(Счет20);
		П010021304_21    = СКД(Счет21);
		П010021304_23    = СКД(Счет23);
		П010021304_29    = СКД(Счет29);
		П010021304_44    = СКД(Счет44);
		П010021304_46    = СКД(Счет46);
		П010021304_14_04 = СКК(Счет14_04);

		П010021304 = П010021304_20 + П010021304_21 + П010021304_23 + П010021304_29 + П010021304_44 + П010021304_46 - П010021304_14_04;
		УстановитьЗначениеПоказателя("П000010021304", П010021304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "Строка 213 ""затраты в незавершенном производстве (издержках обращения)"", графа ""На конец отчетного периода""", "+", "!СКД", П010021304_20, Счет20, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "+", "!СКД", П010021304_21, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "+", "!СКД", П010021304_23, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "+", "!СКД", П010021304_29, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "+", "!СКД", П010021304_44, Счет44);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "+", "!СКД", П010021304_46, Счет46);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021304", "", "-", "!СКК", -П010021304_14_04, Счет14_04);

		// строка 214 "готовая продукция и товары для перепродажи"
		П010021403_43      = СНД(Счет43);
		П010021403_14_03   = СНК(Счет14_03);
		П010021403_41      = СНД(Счет41);
		П010021403_14_02   = СНК(Счет14_02);
		П010021403_15_02   = СНД(Счет15_02);
		П010021403_16_02_Д = СНД(Счет16_02);
		П010021403_16_02_К = СНК(Счет16_02);
		П010021403_42      = СНК(Счет42);
		
		П010021403 = П010021403_43 - П010021403_14_03 + П010021403_41 - П010021403_14_02 + П010021403_15_02 + П010021403_16_02_Д - П010021403_16_02_К - П010021403_42;
		УстановитьЗначениеПоказателя("П000010021403", П010021403);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "Строка 214 ""готовая продукция и товары для перепродажи"", графа ""На начало отчетного года""", "+", "!СНД", П010021403_43, Счет43, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "-", "!СНК", -П010021403_14_03, Счет14_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "+", "!СНД", П010021403_41, Счет41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "-", "!СНК", -П010021403_14_02, Счет14_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "+", "!СНД", П010021403_15_02, Счет15_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "+", "!СНД", П010021403_16_02_Д, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "-", "!СНК", -П010021403_16_02_К, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021403", "", "-", "!СНК", -П010021403_42, Счет42);

		П010021404_43      = СКД(Счет43);
		П010021404_14_03   = СКК(Счет14_03);
		П010021404_41      = СКД(Счет41);
		П010021404_14_02   = СКК(Счет14_02);
		П010021404_15_02   = СКД(Счет15_02);
		П010021404_16_02_Д = СКД(Счет16_02);
		П010021404_16_02_К = СКК(Счет16_02);
		П010021404_42      = СКК(Счет42);
		
		П010021404 = П010021404_43 - П010021404_14_03 + П010021404_41 - П010021404_14_02 + П010021404_15_02 + П010021404_16_02_Д - П010021404_16_02_К - П010021404_42;
		УстановитьЗначениеПоказателя("П000010021404", П010021404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "Строка 214 ""готовая продукция и товары для перепродажи"", графа ""На конец отчетного периода""", "+", "!СКД", П010021404_43, Счет43, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "-", "!СКК", -П010021404_14_03, Счет14_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "+", "!СКД", П010021404_41, Счет41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "-", "!СКК", -П010021404_14_02, Счет14_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "+", "!СКД", П010021404_15_02, Счет15_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "+", "!СКД", П010021404_16_02_Д, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "-", "!СКК", -П010021404_16_02_К, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021404", "", "-", "!СКК", -П010021404_42, Счет42);

		// строка 215 "товары отгруженные"
		П010021503 = СНД(Счет45);
		УстановитьЗначениеПоказателя("П000010021503", П010021503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021503", "Строка 215 ""товары отгруженные"", графа ""На начало отчетного года""", "+", "!СНД", П010021503, Счет45, , , , "Баланс");

		П010021504 = СКД(Счет45);
		УстановитьЗначениеПоказателя("П000010021504", П010021504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021504", "Строка 215 ""товары отгруженные"", графа ""На конец отчетного периода""", "+", "!СКД", П010021504, Счет45, , , , "Баланс");

		// строка 216 "расходы будущих периодов"
		П010021603 = СНД(Счет97);
		УстановитьЗначениеПоказателя("П000010021603", П010021603);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021603", "Строка 216 ""расходы будущих периодов"", графа ""На начало отчетного года""", "+", "!СНД", П010021603, Счет97, , , , "Баланс");

		П010021604 = СКД(Счет97);
		УстановитьЗначениеПоказателя("П000010021604", П010021604);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021604", "Строка 216 ""расходы будущих периодов"", графа ""На конец отчетного периода""", "+", "!СКД", П010021604, Счет97, , , , "Баланс");

		// строка 217 "прочие запасы и затраты"
		П010021703 = СНД(Счет28);
		УстановитьЗначениеПоказателя("П000010021703", П010021703);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021703", "Строка 217 ""прочие запасы и затраты"", графа ""На начало отчетного года""", "+", "!СНД", П010021703, Счет28, , , , "Баланс");

		П010021704 = СКД(Счет28);
		УстановитьЗначениеПоказателя("П000010021704", П010021704);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021704", "Строка 217 ""прочие запасы и затраты"", графа ""На конец отчетного периода""", "+", "!СКД", П010021704, Счет28, , , , "Баланс");

		// строка 220 "Налог на добавленную стоимость по приобретенным ценностям"
		П010022003 = СНД(Счет19);
		УстановитьЗначениеПоказателя("П000010022003", П010022003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022003", "Строка 220 ""Налог на добавленную стоимость по приобретенным ценностям"", графа ""На начало отчетного года""", "+", "!СНД", П010022003, Счет19, , , , "Баланс");

		П010022004 = СКД(Счет19);
		УстановитьЗначениеПоказателя("П000010022004", П010022004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022004", "Строка 220 ""Налог на добавленную стоимость по приобретенным ценностям"", графа ""На конец отчетного периода""", "+", "!СКД", П010022004, Счет19, , , , "Баланс");

		// Из-за отсутствия необходимой аналитики для анализа срока погашения задолженности, 
		// всю задолженность считаем краткосрочной.

		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "76", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация", мОргРасшифровка);

		П010024003_76_01 = 0;
		П010024004_76_01 = 0;
		
		П010062503_76_01 = 0;
		П010062504_76_01 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_01);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_21 = 0;
		П010024004_76_21 = 0;

		П010062503_76_21 = 0;
		П010062504_76_21 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_21);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_05 = 0;
		П010024004_76_05 = 0;

		П010062103_76_05 = 0;
		П010062104_76_05 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_05);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_25 = 0;
		П010024004_76_25 = 0;

		П010062103_76_25 = 0;
		П010062104_76_25 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_25);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_35 = 0;
		П010024004_76_35 = 0;

		П010062103_76_35 = 0;
		П010062104_76_35 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_35);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_06 = 0;
		П010024104_76_06 = 0;

		П010062103_76_06 = 0;
		П010062104_76_06 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_06);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_26 = 0;
		П010024104_76_26 = 0;

		П010062103_76_26 = 0;
		П010062104_76_26 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_26);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_36 = 0;
		П010024104_76_36 = 0;

		П010062103_76_36 = 0;
		П010062104_76_36 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_36);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_09 = 0;
		П010024004_76_09 = 0;
		
		П010062503_76_09 = 0;
		П010062504_76_09 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_09);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_29 = 0;
		П010024004_76_29 = 0;
		
		П010062503_76_29 = 0;
		П010062504_76_29 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_29);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_39 = 0;
		П010024004_76_39 = 0;
		
		П010062503_76_39 = 0;
		П010062504_76_39 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_39);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		Если Есть76НА = Истина Тогда
			
			П010024003_76_НА = 0;
			П010024004_76_НА = 0;
			
			П010062503_76_НА = 0;
			П010062504_76_НА = 0;
			                         			
			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_НА);
			
			Если НЕ ВыборкаПоСчету = Неопределено Тогда
				
				П010024003_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010024004_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
				
				П010062503_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010062504_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоБалансДляАУ Тогда
			
			П010024003_76_51 = 0;
			П010024004_76_51 = 0;
			
			П010062503_76_51 = 0;
			П010062504_76_51 = 0;

			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_51);

			Если НЕ ВыборкаПоСчету = Неопределено Тогда

				П010024003_76_51 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010024004_76_51 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

				П010062503_76_51 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010062504_76_51 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

			КонецЕсли;
			
			П010024003_76_52 = 0;
			П010024004_76_52 = 0;
			
			П010062503_76_52 = 0;
			П010062504_76_52 = 0;

			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_52);

			Если НЕ ВыборкаПоСчету = Неопределено Тогда

				П010024003_76_52 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010024004_76_52 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

				П010062503_76_52 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010062504_76_52 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

			КонецЕсли;
			
		КонецЕсли;
		
		// На активных счетах учета расчетов с покупателями и заказчиками, на которых
		// допускается учет авансов, может возникать ситуация, когда полученный аванс
		// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
		// остаток надо извлечь и затем прибавить к кредитоской  задолженности, которая
		// образовалась на счетах учета полученных авансов.
		
		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация", мОргРасшифровка);

		// В дебиторской задолженнотси учитываем только дебетовое развернутое сальдо
		П010024103_62_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_01);
		П010024104_62_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_01);

		П010024103_62_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_21);
		П010024104_62_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_21);

		П010024103_62_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_31);
		П010024104_62_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_31);

		// Кредитовое сальдо учитываем в кредиторской задолженности
		П010062503_62_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_01);
		П010062504_62_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_01);
		
		П010062503_62_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_21);
		П010062504_62_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_21);

		П010062503_62_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_31);
		П010062504_62_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_31);

		// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
		// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
		// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
		// надо извлечь и затем прибавить к дебиторской задолженности, которая 
		// образовалась на счетах учета выплаченных авансов.
		
		// В кредиторской задолженности учитываем только кредитовое слаьдо
		П010062103_60_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_01);
		П010062104_60_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_01);

		П010062103_60_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_21);
		П010062104_60_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_21);

		П010062103_60_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_31);
		П010062104_60_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_31);

		// Дебетовое сальдо учитываем в дебиторской задолженности.
		П010024003_60_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_01);
		П010024004_60_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_01);

		П010024003_60_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_21);
		П010024004_60_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_21);

		П010024003_60_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_31);
		П010024004_60_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_31);

		П010024103_62_03 = СНД(Счет62_03);
		П010024103_63    = СНК(Счет63);

		// строка 241 "покупатели и заказчики"
		П010024103 = П010024103_62_01_СНД
		           + П010024103_62_21_СНД
		           + П010024103_62_31_СНД
		           + П010024103_62_03
		           - П010024103_63
		           + П010024103_76_06
		           + П010024103_76_26
		           + П010024103_76_36;

		УстановитьЗначениеПоказателя("П000010024103", П010024103);

		П010024104_62_03 = СКД(Счет62_03);
		П010024104_63    = СКК(Счет63);

		П010024104 = П010024104_62_01_СКД
		           + П010024104_62_21_СКД
		           + П010024104_62_31_СКД
		           + П010024104_62_03 
		           - П010024104_63
		           + П010024104_76_06
		           + П010024104_76_26
		           + П010024104_76_36;

		УстановитьЗначениеПоказателя("П000010024104", П010024104);


		// строка 240 "Дебиторская задолженность"
		П010024003_60_02 = СНД(Счет60_02);
		П010024003_60_22 = СНД(Счет60_22);
		П010024003_60_32 = СНД(Счет60_32);

		// Данные для строки 240 собираются последовательно. Это - часть 1.
		
		// в строку 240 входят данные по строке 241
		П010024003 = П010024103
		           + П010024003_60_02
		           + П010024003_60_01_СНД
		           + П010024003_60_22
		           + П010024003_60_21_СНД
		           + П010024003_60_32
		           + П010024003_60_31_СНД;

		П010024004_60_02 = СКД(Счет60_02);
		П010024004_60_22 = СКД(Счет60_22);
		П010024004_60_32 = СКД(Счет60_32);

		// в строку 240 входят данные по строке 241
		П010024004 = П010024104
		           + П010024004_60_02
		           + П010024004_60_01_СКД
		           + П010024004_60_22
		           + П010024004_60_21_СКД
		           + П010024004_60_32
		           + П010024004_60_31_СКД;

		// Если задолженность не анализируется, все задолженности считаем краткосрочными

		// Данные для строки 250 собираются последовательно. Это - часть 1.
		
		// строка 250 "Краткосрочные финансовые вложения"
		
		П010025003_58_01_2 = СНД(Счет58_01_2);
		П010025003_58_02   = СНД(Счет58_02);
		П010025003_58_03   = СНД(Счет58_03);
		П010025003_58_04   = СНД(Счет58_04);
		П010025003_58_05   = СНД(Счет58_05);
		П010025003_59      = СНК(Счет59);
		
		П010025003 = П010025003_58_01_2 + П010025003_58_02 - П010025003_59 + П010025003_58_03 + П010025003_58_04 + П010025003_58_05;

		П010025004_58_01_2 = СКД(Счет58_01_2);
		П010025004_58_02   = СКД(Счет58_02);
		П010025004_58_03   = СКД(Счет58_03);
		П010025004_58_04   = СКД(Счет58_04);
		П010025004_58_05   = СКД(Счет58_05);
		П010025004_59      = СКК(Счет59);

		П010025004 = П010025004_58_01_2 + П010025004_58_02 - П010025004_59 + П010025004_58_03 + П010025004_58_04 + П010025004_58_05;

		// Собираем данные по субсчетам счета 68

		// Развернутые итоги по субсчету 68.04.1 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_04_1);

		П010024003_68_04_1 = 0;
		П010024004_68_04_1 = 0;

		П010062403_68_04_1 = 0;
		П010062404_68_04_1 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062403_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062404_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		// Развернутые итоги по субсчету 68.10 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.10", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_10);

		П010024003_68_10 = 0;
		П010024004_68_10 = 0;

		П010062403_68_10 = 0;
		П010062404_68_10 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда
			П010024003_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062403_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062404_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		КонецЕсли;

		П010024003_68_01   = СНД(Счет68_01);
		П010024003_68_02   = СНД(Счет68_02);
		П010024003_68_03   = СНД(Счет68_03);

		П010024003_68_04_2 = СНД(Счет68_04_2);
		П010024003_68_07   = СНД(Счет68_07);
		П010024003_68_08   = СНД(Счет68_08);
		П010024003_68_09   = СНД(Счет68_09);

		П010024003_68_11   = СНД(Счет68_11);
		П010024003_68_12   = СНД(Счет68_12);
		П010024003_68_22   = СНД(Счет68_22);

		П010024003_68 = 0;

		П010024003_68 = П010024003_68_01
		              + П010024003_68_02
		              + П010024003_68_03
		              + П010024003_68_04_1
		              + П010024003_68_04_2
		              + П010024003_68_07
		              + П010024003_68_08
		              + П010024003_68_09
		              + П010024003_68_10
		              + П010024003_68_11
		              + П010024003_68_12
		              + П010024003_68_22;

		П010024004_68_01   = СКД(Счет68_01);
		П010024004_68_02   = СКД(Счет68_02);
		П010024004_68_03   = СКД(Счет68_03);

		П010024004_68_04_2 = СКД(Счет68_04_2);
		П010024004_68_07   = СКД(Счет68_07);
		П010024004_68_08   = СКД(Счет68_08);
		П010024004_68_09   = СКД(Счет68_09);

		П010024004_68_11   = СКД(Счет68_11);
		П010024004_68_12   = СКД(Счет68_12);
		П010024004_68_22   = СКД(Счет68_22);

		П010024004_68 = 0;
		
		П010024004_68 = П010024004_68_01
		              + П010024004_68_02
		              + П010024004_68_03
		              + П010024004_68_04_1
		              + П010024004_68_04_2
		              + П010024004_68_07
		              + П010024004_68_08
		              + П010024004_68_09
		              + П010024004_68_10
		              + П010024004_68_11
		              + П010024004_68_12
		              + П010024004_68_22;

		П010062403_68_01   = СНК(Счет68_01);
		П010062403_68_02   = СНК(Счет68_02);
		П010062403_68_03   = СНК(Счет68_03);

		П010062403_68_04_2 = СНК(Счет68_04_2);
		П010062403_68_07   = СНК(Счет68_07);
		П010062403_68_08   = СНК(Счет68_08);
		П010062403_68_09   = СНК(Счет68_09);

		П010062403_68_11   = СНК(Счет68_11);
		П010062403_68_12   = СНК(Счет68_12);
		П010062403_68_22   = СНК(Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			П010062403_68_32   = СНК(Счет68_32);
		КонецЕсли;
		
		П010062403_68 = 0;
		
		П010062403_68 = П010062403_68_01
		              + П010062403_68_02
		              + П010062403_68_03
		              + П010062403_68_04_1
		              + П010062403_68_04_2
		              + П010062403_68_07
		              + П010062403_68_08
		              + П010062403_68_09
		              + П010062403_68_10
		              + П010062403_68_11
		              + П010062403_68_12
		              + П010062403_68_22;
					  
		Если Есть68_32 = Истина Тогда			  
		    П010062403_68 = П010062403_68 + П010062403_68_32;
	    КонецЕсли;
	  
		П010062404_68_01   = СКК(Счет68_01);
		П010062404_68_02   = СКК(Счет68_02);
		П010062404_68_03   = СКК(Счет68_03);

		П010062404_68_04_2 = СКК(Счет68_04_2);
		П010062404_68_07   = СКК(Счет68_07);
		П010062404_68_08   = СКК(Счет68_08);
		П010062404_68_09   = СКК(Счет68_09);

		П010062404_68_11   = СКК(Счет68_11);
		П010062404_68_12   = СКК(Счет68_12);
		П010062404_68_22   = СКК(Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			П010062404_68_32   = СКК(Счет68_32);
		КонецЕсли;
	
		П010062404_68 = 0;
		
		П010062404_68 = П010062404_68_01
		              + П010062404_68_02
		              + П010062404_68_03
		              + П010062404_68_04_1
		              + П010062404_68_04_2
		              + П010062404_68_07
		              + П010062404_68_08
		              + П010062404_68_09
		              + П010062404_68_10
		              + П010062404_68_11
		              + П010062404_68_12
		              + П010062404_68_22;
					  
		Если Есть68_32 = Истина Тогда			  
		    П010062404_68 = П010062404_68 + П010062404_68_32;
        КонецЕсли;

		// Собираем данные по субсчетам счета 69
		П010024003_69 = СНДР(Счет69);
		П010024004_69 = СКДР(Счет69);

		П010062303_69 = СНКР(Счет69);
		П010062304_69 = СККР(Счет69);

		// Развернутые итоги по счету 71
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации, , , "Организация", мОргРасшифровка);
		ИначеЕсли ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, , , "Организация", мОргРасшифровка);
		КонецЕсли;
		
		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет71);
		
		П010024003_71 = 0;
		П010024004_71 = 0;

		П010062503_71 = 0;
		П010062504_71 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		// Здесь продолжается сборка данных для строки 240
		
		П010024003_73    = СНД(Счет73);
		П010024003_75_01 = СНД(Счет75_01);
		П010024003_76_02 = СНД(Счет76_02);
		П010024003_76_22 = СНД(Счет76_22);
		П010024003_76_32 = СНД(Счет76_32);
		П010024003_76_03 = СНД(Счет76_03);
		П010024003_76_41 = СНД(Счет76_41);
		П010024003_76_АВ = СНД(Счет76_АВ);
		П010024003_76_ОТ = СНД(Счет76_ОТ);
		П010024003_79    = СНД(Счет79);

		П010024003 = П010024003
		           + П010024003_68
		           + П010024003_69
		           + П010024003_71
		           + П010024003_73
		           + П010024003_75_01
		           + П010024003_76_01
		           + П010024003_76_21
		           + П010024003_76_02
		           + П010024003_76_22
		           + П010024003_76_32
		           + П010024003_76_05
		           + П010024003_76_25
		           + П010024003_76_35
		           + П010024003_76_03
		           + П010024003_76_09
		           + П010024003_76_29
		           + П010024003_76_39
		           + П010024003_76_41
		           + П010024003_76_АВ
		           + П010024003_76_ОТ
		           + П010024003_79;

		Если Есть76НА = Истина Тогда	
		   П010024003 = П010024003 + П010024003_76_НА;   
		КонецЕсли;	   
				   
		Если ЭтоБалансДляАУ Тогда
			П010024003 = П010024003
			           + П010024003_76_51
			           + П010024003_76_52;
		КонецЕсли;

		УстановитьЗначениеПоказателя("П000010024003", П010024003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "Строка 240 ""Дебиторская задолженность"", графа ""На начало отчетного года""", "+", "Данные по строке 241 ""покупатели и заказчики"", графа ""На начало отчетного года""", П010024103, , , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_01_СНД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_21_СНД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_31_СНД, Счет60_31);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010024003_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010024003_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_68_22, Счет68_22);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНДР", П010024003_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010024003_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_75_01, Счет75_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010024003_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010024003_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010024003_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010024003_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010024003_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010024003_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010024003_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010024003_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_41, Счет76_41);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", П010024003_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", П010024003_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_АВ, Счет76_АВ);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Сальдо на начало периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010024003_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_76_ОТ, Счет76_ОТ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "!СНД", П010024003_79, Счет79);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "Строка 241 ""покупатели и заказчики"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_01_СНД, Счет62_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "Сальдо на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_21_СНД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "Сальдо на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_31_СНД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "!СНД", П010024103_62_03, Счет62_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "-", "!СНК", -П010024103_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "Сальдо на начало периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010024103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "Сальдо на начало периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010024103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024103", "", "+", "Сальдо на начало периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010024103_76_36, Счет76_36);

		П010024004_73    = СКД(Счет73);
		П010024004_75_01 = СКД(Счет75_01);
		П010024004_76_02 = СКД(Счет76_02);
		П010024004_76_22 = СКД(Счет76_22);
		П010024004_76_32 = СКД(Счет76_32);
		П010024004_76_03 = СКД(Счет76_03);
		П010024004_76_41 = СКД(Счет76_41);
		П010024004_76_АВ = СКД(Счет76_АВ);
		П010024004_76_ОТ = СКД(Счет76_ОТ);
		П010024004_79    = СКД(Счет79);

		П010024004 = П010024004
		           + П010024004_68
		           + П010024004_69
		           + П010024004_71
		           + П010024004_73
		           + П010024004_75_01
		           + П010024004_76_01
		           + П010024004_76_21
		           + П010024004_76_02
		           + П010024004_76_22
		           + П010024004_76_32
		           + П010024004_76_05
		           + П010024004_76_25
		           + П010024004_76_03
		           + П010024004_76_35
		           + П010024004_76_09
		           + П010024004_76_29
		           + П010024004_76_39
		           + П010024004_76_41
		           + П010024004_76_АВ
				   + П010024004_76_ОТ
		           + П010024004_79;

		Если ЭтоБалансДляАУ Тогда
			П010024004 = П010024004
			           + П010024004_76_51
			           + П010024004_76_52;
		КонецЕсли;

		Если Есть76НА = Истина Тогда
			П010024004 = П010024004 + П010024004_76_НА;
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010024004", П010024004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "Строка 240 ""Дебиторская задолженность"", графа ""На конец отчетного периода""", "+", "Данные по строке 241 ""покупатели и заказчики"", графа ""На конец отчетного периода""", П010024104, , , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_01_СКД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_21_СКД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_31_СКД, Счет60_31);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010024004_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010024004_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_68_22, Счет68_22);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКДР", П010024004_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010024004_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_75_01, Счет75_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010024004_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010024004_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010024004_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010024004_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010024004_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010024004_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010024004_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010024004_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_41, Счет76_41);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", П010024004_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", П010024004_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_АВ, Счет76_АВ);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Сальдо на конец периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010024004_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_76_ОТ, Счет76_ОТ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "!СКД", П010024004_79, Счет79);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "Строка 241 ""покупатели и заказчики"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_01_СКД, Счет62_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_21_СКД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_31_СКД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "!СКД", П010024104_62_03, Счет62_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "-", "!СКК", -П010024104_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010024104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010024104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024104", "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010024104_76_36, Счет76_36);
		
		// строка 250 "Краткосрочные финансовые вложения"
		П010025003_55_03 = СНД(Счет55_03);
		П010025003_55_23 = СНД(Счет55_23);
		
		П010025003 = П010025003 + П010025003_55_03 + П010025003_55_23;
		УстановитьЗначениеПоказателя("П000010025003", П010025003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "Строка 250 ""Краткосрочные финансовые вложения"", графа ""На начало отчетного года""", "+", "!СНД", П010025003_58_01_2, Счет58_01_2, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "-", "!СНК", -П010025003_59, Счет59);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_58_03, Счет58_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_58_05, Счет58_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025003", "", "+", "!СНД", П010025003_55_23, Счет55_23);

		П010025004_55_03 = СКД(Счет55_03);
		П010025004_55_23 = СКД(Счет55_23);
		
		П010025004 = П010025004 + П010025004_55_03 + П010025004_55_23;
		УстановитьЗначениеПоказателя("П000010025004", П010025004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "Строка 250 ""Краткосрочные финансовые вложения"", графа ""На конец отчетного периода""", "+", "!СКД", П010025004_58_01_2, Счет58_01_2, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "-", "!СКК", -П010025004_59, Счет59);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_58_03, Счет58_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_58_05, Счет58_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "", "+", "!СКД", П010025004_55_23, Счет55_23);

		// строка 260 "Денежные средства"
		П010026003_50    = СНД(Счет50);
		П010026003_51    = СНД(Счет51);
		П010026003_52    = СНД(Счет52);
		П010026003_55_01 = СНД(Счет55_01);
		П010026003_55_02 = СНД(Счет55_02);
		П010026003_55_04 = СНД(Счет55_04);
		П010026003_55_21 = СНД(Счет55_21);
		П010026003_55_24 = СНД(Счет55_24);
		П010026003_57    = СНД(Счет57);

		П010026003 = П010026003_50
		           + П010026003_51
		           + П010026003_52
		           + П010026003_55_01
		           + П010026003_55_02
		           + П010026003_55_04
		           + П010026003_55_21
		           + П010026003_55_24
		           + П010026003_57;

		УстановитьЗначениеПоказателя("П000010026003", П010026003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "Строка 260 ""Денежные средства"", графа ""На начало отчетного года""", "+", "!СНД", П010026003_50, Счет50, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_51, Счет51);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_52, Счет52);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_55_01, Счет55_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_55_02, Счет55_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_55_04, Счет55_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_55_21, Счет55_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_55_24, Счет55_24);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "", "+", "!СНД", П010026003_57, Счет57);

		П010026004_50    = СКД(Счет50);
		П010026004_51    = СКД(Счет51);
		П010026004_52    = СКД(Счет52);
		П010026004_55_01 = СКД(Счет55_01);
		П010026004_55_02 = СКД(Счет55_02);
		П010026004_55_04 = СКД(Счет55_04);
		П010026004_55_21 = СКД(Счет55_21);
		П010026004_55_24 = СКД(Счет55_24);
		П010026004_57    = СКД(Счет57);

		П010026004 = П010026004_50
		           + П010026004_51
		           + П010026004_52
		           + П010026004_55_01
		           + П010026004_55_02
		           + П010026004_55_04
		           + П010026004_55_21
		           + П010026004_55_24
		           + П010026004_57;

		УстановитьЗначениеПоказателя("П000010026004", П010026004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "Строка 260 ""Денежные средства"", графа ""На конец отчетного периода""", "+", "!СКД", П010026004_50, Счет50, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_51, Счет51);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_52, Счет52);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_55_01, Счет55_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_55_02, Счет55_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_55_04, Счет55_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_55_21, Счет55_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_55_24, Счет55_24);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "!СКД", П010026004_57, Счет57);

		// строка 270 "Прочие оборотные активы"
		П010027003 = СНД(Счет94);
		УстановитьЗначениеПоказателя("П000010027003", П010027003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010027003", "Строка 270 ""Прочие оборотные активы"", графа ""На начало отчетного года""", "+", "!СНД", П010027003, Счет94, , , , "Баланс");

		П010027004 = СКД(Счет94);
		УстановитьЗначениеПоказателя("П000010027004", П010027004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010027004", "Строка 270 ""Прочие оборотные активы"", графа ""На конец отчетного периода""", "+", "!СКД", П010027004, Счет94, , , , "Баланс");

		Если НЕ ЭтоБалансДляАУ Тогда
		
			// строка 410 "Уставный капитал"
			П010041003 = СНК(Счет80);
			УстановитьЗначениеПоказателя("П000010041003", П010041003);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010041003", "Строка 410 ""Уставный капитал"", графа ""На начало отчетного года""", "+", "!СНК", П010041003, Счет80, , , , "Баланс");

			П010041004 = СКК(Счет80);
			УстановитьЗначениеПоказателя("П000010041004", П010041004);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010041004", "Строка 410 ""Уставный капитал"", графа ""На конец отчетного периода""", "+", "!СКК", П010041004, Счет80, , , , "Баланс");

			// строка 411 "Собственные акции, выкупленные у акционеров"
			П010041103 = -СНД(Счет81);
			УстановитьЗначениеПоказателя("П000010041103", П010041103);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010041103", "Строка 411 ""Собственные акции, выкупленные у акционеров"", графа ""На начало отчетного года""", "-", "!СНК", П010041103, Счет81, , , , "Баланс");

			П010041104 = -СКД(Счет81);
			УстановитьЗначениеПоказателя("П000010041104", П010041104);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010041104", "Строка 411 ""Собственные акции, выкупленные у акционеров"", графа ""На конец отчетного периода""", "-", "!СКК", П010041104, Счет81, , , , "Баланс");
		
		КонецЕсли;

		// строка 420 "Добавочный капитал"
		П010042003 = СНК(Счет83);
		УстановитьЗначениеПоказателя("П000010042003", П010042003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010042003", "Строка 420 ""Добавочный капитал"", графа ""На начало отчетного года""", "+", "!СНК", П010042003, Счет83, , , , "Баланс");

		П010042004 = СКК(Счет83);
		УстановитьЗначениеПоказателя("П000010042004", П010042004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010042004", "Строка 420 ""Добавочный капитал"", графа ""На конец отчетного периода""", "+", "!СКК", П010042004, Счет83, , , , "Баланс");

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "77", , , , "Организация", мОргРасшифровка);

		ОБ_77__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет77, Счет84_01);
		ОБ_84_02__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет77, Счет84_02);

		Если ЭтоБалансДляАУ Тогда

			П010042103 = СНК(Счет83_10);
			УстановитьЗначениеПоказателя("П000010042103", П010042103);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010042103", "Строка 421 ""Фонд недвижимого и особо ценного движимого имущества"", графа ""На начало отчетного года""", "+", "!СНК", П010042103, Счет83_10, , , , "Баланс");

			П010042104 = СКК(Счет83_10);
			УстановитьЗначениеПоказателя("П000010042104", П010042104);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010042104", "Строка 421 ""Фонд недвижимого и особо ценного движимого имущества"", графа ""На конец отчетного периода""", "+", "!СКК", П010042104, Счет83_10, , , , "Баланс");

			// строка 440 "Целевое финансирование"
			П010044003_86_К	= СНК(Счет86);
			П010044003_86_Д	= СНД(Счет86);
			П010044003_84_К = СНК(Счет84);
			П010044003_84_Д = СНД(Счет84);

			П010044003 = П010044003_86_К - П010044003_86_Д + П010044003_84_К - П010044003_84_Д;
			УстановитьЗначениеПоказателя("П000010044003", П010044003);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044003", "Строка 440 ""Целевое финансирование"", графа ""На начало отчетного года""", "+", "!СНК", П010044003_86_К, Счет86, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044003", "", "-", "!СНД", -П010044003_86_Д, Счет86);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044003", "", "+", "!СНК", П010044003_84_К, Счет84);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044003", "", "-", "!СНД", -П010044003_84_Д, Счет84);

			П010044004_86_К = СКК(Счет86);
			П010044004_86_Д = СКД(Счет86);
			П010044004_84_К = СКК(Счет84);
			П010044004_84_Д = СКД(Счет84);
			П010044004_99_К = СКК(Счет99);
			П010044004_99_Д = СКД(Счет99);

			П010044004 = П010044004_86_К - П010044004_86_Д + П010044004_84_К - П010044004_84_Д + П010044004_99_К - П010044004_99_Д;
			УстановитьЗначениеПоказателя("П000010044004", П010044004);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "Строка 440 ""Целевое финансирование"", графа ""На конец отчетного периода""", "+", "!СКК", П010044004_86_К, Счет86, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "", "-", "!СКД", -П010044004_86_Д, Счет86);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "", "+", "!СКК", П010044004_84_К, Счет84);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "", "-", "!СКД", -П010044004_84_Д, Счет84);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "", "+", "!СКК", П010044004_99_К, Счет99);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010044004", "", "-", "!СКД", -П010044004_99_Д, Счет99);
			
		Иначе
		
			// строка 431 "резервные фонды, образованные в соответствии с законодательством"
			П010043103 = СНК(Счет82_01);
			УстановитьЗначениеПоказателя("П000010043103", П010043103);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010043103", "Строка 431 ""резервные фонды, образованные в соответствии с законодательством"", графа ""На начало отчетного года""", "+", "!СНК", П010043103, Счет82_01, , , , "Баланс");

			П010043104 = СКК(Счет82_01);
			УстановитьЗначениеПоказателя("П000010043104", П010043104);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010043104", "Строка 431 ""резервные фонды, образованные в соответствии с законодательством"", графа ""На конец отчетного периода""", "+", "!СКК", П010043104, Счет82_01, , , , "Баланс");

			// строка 432 "резервы, образованные в соответствии с учредительными документами"
			П010043203 = СНК(Счет82_02);
			УстановитьЗначениеПоказателя("П000010043203", П010043203);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010043203", "Строка 432 ""резервы, образованные в соответствии с учредительными документами"", графа ""На начало отчетного года""", "+", "!СНК", П010043203, Счет82_02, , , , "Баланс");

			П010043204 = СКК(Счет82_02);
			УстановитьЗначениеПоказателя("П000010043204", П010043204);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010043204", "Строка 432 ""резервы, образованные в соответствии с учредительными документами"", графа ""На конец отчетного периода""", "+", "!СКК", П010043204, Счет82_02, , , , "Баланс");
			
			// строка 470 "Нераспределенная прибыль (непокрытый убыток)"
			П010047003_84_К = СНК(Счет84);
			П010047003_84_Д = СНД(Счет84);

			П010047003 = П010047003_84_К - П010047003_84_Д;
			УстановитьЗначениеПоказателя("П000010047003", П010047003);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047003", "Строка 470 ""Нераспределенная прибыль (непокрытый убыток)"", графа ""На начало отчетного года""", "+", "!СНК", П010047003_84_К, Счет84, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047003", "", "-", "!СНД", -П010047003_84_Д, Счет84);

			// Графа "На конец отчетного периода" учитывает  возможную переоценку
			// отложенных налоговых активов и отложенных налоговых обязательств.
			П010047004_84_К = СКК(Счет84);
			П010047004_84_Д = СКД(Счет84);
			П010047004_99_К = СКК(Счет99);
			П010047004_99_Д = СКД(Счет99);

			П010047004 = П010047004_84_К - П010047004_84_Д + П010047004_99_К - П010047004_99_Д - ОБ_09__84_01 + ОБ_84_02__09 + ОБ_84_02__77 - ОБ_77__84_01;
			УстановитьЗначениеПоказателя("П000010047004", П010047004);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "Строка 470 ""Нераспределенная прибыль (непокрытый убыток)"", графа ""На конец отчетного периода""", "+", "!СКК", П010047004_84_К, Счет84, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "-", "!СКД", -П010047004_84_Д, Счет84);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "+", "!СКК",  П010047004_99_К, Счет99);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "-", "!СКД", -П010047004_99_Д, Счет99);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "-",  "!ОБ",    -ОБ_09__84_01, Счет09,    Счет84_01);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "+",  "!ОБ",     ОБ_84_02__09, Счет84_02, Счет09);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "+",  "!ОБ",     ОБ_84_02__77, Счет84_02, Счет77);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010047004", "", "-",  "!ОБ",    -ОБ_77__84_01, Счет77,    Счет84_01);

		КонецЕсли;

		// строка 510 "Долгосрочные займы и кредиты" 
		П010051003 = СНК(Счет67);
		УстановитьЗначениеПоказателя("П000010051003", П010051003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051003", "Строка 510 ""Долгосрочные займы и кредиты"", графа ""На начало отчетного года""", "+", "!СНК", П010051003, Счет67, , , , "Баланс");

		П010051004 = СКК(Счет67);
		УстановитьЗначениеПоказателя("П000010051004", П010051004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051004", "Строка 510 ""Долгосрочные займы и кредиты"", графа ""На конец отчетного периода""", "+", "!СКК", П010051004, Счет67, , , , "Баланс");

		// строка 515 "Отложенные налоговые обзательства"
		// В балансе за отчетный год необходимо учесть возможную переоценку
		// отложенных налоговых активов и отложенных налоговых обязательств,
		// проведенную в связи с изменением ставки налога на прибыль. Результаты
		// переоценки должны показываться в балансе за год, следующий за отчетным,
		// но отражаются проводками в отчетном году. Для учета результатов
		// переоценки корректируем остатки счета 77 на конец периода на обороты 
		// в корреспонденции со счетами 84.01 и 84.02.

		П010051503 = СНК(Счет77);
		УстановитьЗначениеПоказателя("П000010051503", П010051503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051503", "Строка 515 ""Отложенные налоговые обзательства"", графа ""На начало отчетного года""", "+", "!СНК", П010051503, Счет77, , , , "Баланс");

		П010051504_77 = СКК(Счет77);
		П010051504 = П010051504_77 - ОБ_84_02__77 + ОБ_77__84_01;
		УстановитьЗначениеПоказателя("П000010051504", П010051504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051504", "Строка 515 ""Отложенные налоговые обзательства"", графа ""На конец отчетного периода""", "+", "!СКК", П010051504_77, Счет77, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051504", "", "-", "!ОБ", -ОБ_84_02__77, Счет84_02, Счет77, , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010051504", "", "+", "!ОБ",  ОБ_77__84_01, Счет77, Счет84_01, , , "Баланс");

		// строка 610 "Займы и кредиты"
		П010061003 = СНК(Счет66);
		УстановитьЗначениеПоказателя("П000010061003", П010061003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061003", "Строка 610 ""Займы и кредиты"", графа ""На начало отчетного года""", "+", "!СНК", П010061003, Счет66, , , , "Баланс");

		П010061004 = СКК(Счет66);
		УстановитьЗначениеПоказателя("П000010061004", П010061004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010061004", "Строка 610 ""Займы и кредиты"", графа ""На конец отчетного периода""", "+", "!СКК", П010061004, Счет66, , , , "Баланс");

		// строка 621 "поставщики и подрядчики"
		
		П010062103_60_03 = СНК(Счет60_03);
		
		П010062103 = П010062103_60_01_СНК
		           + П010062103_60_21_СНК
		           + П010062103_60_31_СНК
		           + П010062103_60_03
		           + П010062103_76_05
		           + П010062103_76_25
		           + П010062103_76_35
		           + П010062103_76_06
		           + П010062103_76_26
		           + П010062103_76_36;

		УстановитьЗначениеПоказателя("П000010062103", П010062103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "Строка 621 ""поставщики и подрядчики"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_01_СНК, Счет60_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_21_СНК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_31_СНК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "!СНК", П010062103_60_03, Счет60_03, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010062103_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010062103_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010062103_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010062103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010062103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062103", "", "+", "Сальдо на начало периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010062103_76_36, Счет76_36);

		П010062104_60_03 = СКК(Счет60_03);

		П010062104 = П010062104_60_01_СКК
		           + П010062104_60_21_СКК
		           + П010062104_60_31_СКК
		           + П010062104_60_03
		           + П010062104_76_05
		           + П010062104_76_25
		           + П010062104_76_35
		           + П010062104_76_06
		           + П010062104_76_26
		           + П010062104_76_36;

		УстановитьЗначениеПоказателя("П000010062104", П010062104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "Строка 621 ""поставщики и подрядчики"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_01_СКК, Счет60_01, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_21_СКК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_31_СКК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "!СКК", П010062104_60_03, Счет60_03, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010062104_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010062104_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010062104_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010062104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010062104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062104", "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010062104_76_36, Счет76_36);

		// строка 622 "задолженность перед персоналом организации"
		П010062203 = СНК(Счет70);
		УстановитьЗначениеПоказателя("П000010062203", П010062203);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062203", "Строка 622 ""задолженность перед персоналом организации"", графа ""На начало отчетного года""", "+", "!СНК", П010062203, Счет70, , , , "Баланс");

		П010062204 = СКК(Счет70);
		УстановитьЗначениеПоказателя("П000010062204", П010062204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062204", "Строка 622 ""задолженность перед персоналом организации"", графа ""На конец отчетного периода""", "+", "!СКК", П010062204, Счет70, , , , "Баланс");

		// строка 623 "задолженность перед государственными внебюджетными фондами"
		УстановитьЗначениеПоказателя("П000010062303", П010062303_69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062303", "Строка 623 ""задолженность перед государственными внебюджетными фондами"", графа ""На начало отчетного года""", "+", "!СНКР", П010062303_69, Счет69, , , , "Баланс");
		
		УстановитьЗначениеПоказателя("П000010062304", П010062304_69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062304", "Строка 623 ""задолженность перед государственными внебюджетными фондами"", графа ""На конец отчетного периода""", "+", "!СККР", П010062304_69, Счет69, , , , "Баланс");

		// строка 624 "задолженность по налогам и сборам"
		УстановитьЗначениеПоказателя("П000010062403", П010062403_68);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "Строка 624 ""задолженность по налогам и сборам"", графа ""На начало отчетного года""", "+", "!СНК", П010062403_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "Сальдо на начало периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010062403_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "Сальдо на начало периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010062403_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_22, Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062403", "", "+", "!СНК", П010062403_68_32, Счет68_32);
		КонецЕсли;
	
		УстановитьЗначениеПоказателя("П000010062404", П010062404_68);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "Строка 624 ""задолженность по налогам и сборам"", графа ""На конец отчетного периода""", "+", "!СКК", П010062404_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "Сальдо на конец периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010062404_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "Сальдо на конец периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010062404_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_22, Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062404", "", "+", "!СКК", П010062404_68_32, Счет68_32);
		КонецЕсли;
		// строка 625 "прочие кредиторы"

		П010062503_62_02 = СНК(Счет62_02);
		П010062503_62_22 = СНК(Счет62_22);
		П010062503_62_32 = СНК(Счет62_32);
		
		П010062503_76_03 = СНК(Счет76_03);
		П010062503_76_04 = СНК(Счет76_04);
		П010062503_76_41 = СНК(Счет76_41);
		П010062503_76_ВА = СНК(Счет76_ВА);
		П010062503_76_Н  = СНК(Счет76_Н);
		П010062503_79    = СНК(Счет79);
		
		П010062503 = П010062503_62_02
		           + П010062503_62_01_СНК
		           + П010062503_62_22
		           + П010062503_62_21_СНК
		           + П010062503_62_32
		           + П010062503_62_31_СНК
		           + П010062503_71
		           + П010062503_76_01
		           + П010062503_76_21
		           + П010062503_76_03
		           + П010062503_76_04
		           + П010062503_76_09
		           + П010062503_76_29
		           + П010062503_76_39
		           + П010062503_76_41
		           + П010062503_76_ВА
		           + П010062503_76_Н
		           + П010062503_79;

		Если ЭтоБалансДляАУ Тогда
			П010062503 = П010062503
			           + П010062503_76_51
			           + П010062503_76_52;
		КонецЕсли;

		Если Есть76НА = Истина Тогда
			П010062503 = П010062503 + П010062503_76_НА;	
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010062503", П010062503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "Строка 625 ""прочие кредиторы"", графа ""На начало отчетного года""", "+", "!СНК", П010062503_62_02, Счет62_02, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_01_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_21_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_31_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010062503_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010062503_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010062503_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010062503_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010062503_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010062503_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_76_41, Счет76_41);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", П010062503_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", П010062503_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_76_ВА, Счет76_ВА);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "Сальдо на начало периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010062503_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_76_Н, Счет76_Н);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062503", "", "+", "!СНК", П010062503_79, Счет79);

		П010062504_62_02 = СКК(Счет62_02);
		П010062504_62_22 = СКК(Счет62_22);
		П010062504_62_32 = СКК(Счет62_32);

		П010062504_76_03 = СКК(Счет76_03);
		П010062504_76_04 = СКК(Счет76_04);
		П010062504_76_41 = СКК(Счет76_41);
		П010062504_76_ВА = СКК(Счет76_ВА);
		П010062504_76_Н  = СКК(Счет76_Н);
		П010062504_79    = СКК(Счет79);
		
		П010062504 = П010062504_62_02
		           + П010062504_62_01_СКК
		           + П010062504_62_22
		           + П010062504_62_21_СКК
		           + П010062504_62_32
		           + П010062504_62_31_СКК
		           + П010062504_71
		           + П010062504_76_01
		           + П010062504_76_21
		           + П010062504_76_03
		           + П010062504_76_04
		           + П010062504_76_09
		           + П010062504_76_29
		           + П010062504_76_39
		           + П010062504_76_41
		           + П010062504_76_ВА
				   + П010062504_76_Н
		           + П010062504_79;

		Если ЭтоБалансДляАУ Тогда
			П010062504 = П010062504
			           + П010062504_76_51
			           + П010062504_76_52;
		КонецЕсли;

		Если Есть76НА = Истина Тогда  			
			П010062504 = П010062504 + П010062504_76_НА;
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П000010062504", П010062504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "Строка 625 ""прочие кредиторы"", графа ""На конец отчетного периода""", "+", "!СКК", П010062504_62_02, Счет62_02, , , , "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_01_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_21_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_31_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010062504_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010062504_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010062504_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010062504_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010062504_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010062504_76_39, Счет76_39);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_76_41, Счет76_41);
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", П010062504_76_51, Счет76_51);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", П010062504_76_52, Счет76_52);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_76_ВА, Счет76_ВА);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "Сальдо на конец периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010062504_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_76_Н, Счет76_Н);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010062504", "", "+", "!СКК", П010062504_79, Счет79);

		// строка 630 "Задолженность участникам (учредителям) по выплате доходов"
		П010063003 = СНК(Счет75_02);
		УстановитьЗначениеПоказателя("П000010063003", П010063003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010063003", "Строка 630 ""Задолженность участникам (учредителям) по выплате доходов"", графа ""На начало отчетного года""", "+", "!СНК", П010063003, Счет75_02, , , , "Баланс");

		П010063004 = СКК(Счет75_02);
		УстановитьЗначениеПоказателя("П000010063004", П010063004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010063004", "Строка 630 ""Задолженность участникам (учредителям) по выплате доходов"", графа ""На конец отчетного периода", "+", "!СКК", П010063004, Счет75_02, , , , "Баланс");

		Если ЭтоБалансДляАУ Тогда

			П010064003 = СНК(Счет98);

			УстановитьЗначениеПоказателя("П000010064003", П010064003);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064003", "Строка 640 ""Доходы будущих периодов"", графа ""На начало отчетного года""", "+", "!СНК", П010064003, Счет98, , , , "Баланс");

			П010064004 = СКК(Счет98);

			УстановитьЗначениеПоказателя("П000010064004", П010064004);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064004", "Строка 640 ""Доходы будущих периодов"", графа ""На конец отчетного периода""", "+", "!СКК", П010064004, Счет98, , , , "Баланс");

		Иначе

			// строка 640 "Доходы будущих периодов"
			П010064003_86 = СНК(Счет86);
			П010064003_98 = СНК(Счет98);

			П010064003 = П010064003_86 + П010064003_98;
			УстановитьЗначениеПоказателя("П000010064003", П010064003);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064003", "Строка 640 ""Доходы будущих периодов"", графа ""На начало отчетного года""", "+", "!СНК", П010064003_86, Счет86, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064003", "", "+", "!СНК", П010064003_98, Счет98);

			П010064004_86 = СКК(Счет86);
			П010064004_98 = СКК(Счет98);

			П010064004 = П010064004_86 + П010064004_98;
			УстановитьЗначениеПоказателя("П000010064004", П010064004);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064004", "Строка 640 ""Доходы будущих периодов"", графа ""На конец отчетного периода""", "+", "!СКК", П010064004_86, Счет86, , , , "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010064004", "", "+", "!СКК", П010064004_98, Счет98);

		КонецЕсли;

		// строка 650 "Резервы предстоящих расходов"
		П010065003 = СНК(Счет96);
		УстановитьЗначениеПоказателя("П000010065003", П010065003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065003", "Строка 650 ""Резервы предстоящих расходов"", графа ""На начало отчетного года""", "+", "!СНК", П010065003, Счет96, , , , "Баланс");

		П010065004 = СКК(Счет96);
		УстановитьЗначениеПоказателя("П000010065004", П010065004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010065004", "Строка 650 ""Резервы предстоящих расходов"", графа ""На конец отчетного периода""", "+", "!СКК", П010065004, Счет96, , , , "Баланс");

		// строка 910 - арендованные основные средства
		П010091003 = СНД(Счет001);
		УстановитьЗначениеПоказателя("П000010091003", П010091003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010091003", "Строка 910 ""арендованные основные средства"", графа ""На начало отчетного года""", "+", "!СНД", П010091003, Счет001, , , , "Баланс");

		П010091004 = СКД(Счет001);
		УстановитьЗначениеПоказателя("П000010091004", П010091004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010091004", "Строка 910 ""арендованные основные средства"", графа ""На конец отчетного периода""", "+", "!СКД", П010091004, Счет001, , , , "Баланс");

		// строка 920 - товарно-материальные ценности, принятые на ответственное хранение
		П010092003 = СНД(Счет002);
		УстановитьЗначениеПоказателя("П000010092003", П010092003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010092003", "Строка 920 ""товарно-материальные ценности, принятые на ответственное хранение"", графа ""На начало отчетного года""", "+", "!СНД", П010092003, Счет002, , , , "Баланс");
		
		П010092004 = СКД(Счет002);
		УстановитьЗначениеПоказателя("П000010092004", П010092004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010092004", "Строка 920 ""товарно-материальные ценности, принятые на ответственное хранение"", графа ""На конец отчетного периода""", "+", "!СКД", П010092004, Счет002, , , , "Баланс");

		// строка 930 - товары, принятые на комиссию
		П010093003 = СНД(Счет004);
		УстановитьЗначениеПоказателя("П000010093003", П010093003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010093003", "Строка 930 ""товары, принятые на комиссию"", графа ""На начало отчетного года""", "+", "!СНД", П010093003, Счет004, , , , "Баланс");

		П010093004 = СКД(Счет004);
		УстановитьЗначениеПоказателя("П000010093004", П010093004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010093004", "Строка 930 ""товары, принятые на комиссию"", графа ""На конец отчетного периода""", "+", "!СКД", П010093004, Счет004, , , , "Баланс");

		// строка 940 - списанная в убыток задолженность неплатежеспособных дебиторов
		П010094003 = СНД(Счет007);
		УстановитьЗначениеПоказателя("П000010094003", П010094003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010094003", "Строка 940 ""списанная в убыток задолженность неплатежеспособных дебиторов"", графа ""На начало отчетного года""", "+", "!СНД", П010094003, Счет007, , , , "Баланс");

		П010094004 = СКД(Счет007);
		УстановитьЗначениеПоказателя("П000010094004", П010094004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010094004", "Строка 940 ""списанная в убыток задолженность неплатежеспособных дебиторов"", графа ""На конец отчетного периода""", "+", "!СКД", П010094004, Счет007, , , , "Баланс");

		// строка 950 - обеспечения обязательств и платежей полученные
		П010095003 = СНД(Счет008);
		УстановитьЗначениеПоказателя("П000010095003", П010095003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010095003", "Строка 950 ""обеспечения обязательств и платежей полученные"", графа ""На начало отчетного года""", "+", "!СНД", П010095003, Счет008, , , , "Баланс");
		
		П010095004 = СКД(Счет008);
		УстановитьЗначениеПоказателя("П000010095004", П010095004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010095004", "Строка 950 ""обеспечения обязательств и платежей полученные"", графа ""На конец отчетного периода""", "+", "!СКД", П010095004, Счет008, , , , "Баланс");

		// строка 960 - обеспечения обязательств и платежей выданные
		П010096003 = СНД(Счет009);
		УстановитьЗначениеПоказателя("П000010096003", П010096003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010096003", "Строка 960 ""обеспечения обязательств и платежей выданные"", графа ""На начало отчетного года""", "+", "!СНД", П010096003, Счет009, , , , "Баланс");

		П010096004 = СКД(Счет009);
		УстановитьЗначениеПоказателя("П000010096004", П010096004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010096004", "Строка 960 ""обеспечения обязательств и платежей выданные"", графа ""На конец отчетного периода""", "+", "!СКД", П010096004, Счет009, , , , "Баланс");

		Итоги = "НачальныйОстатокДт, КонечныйОстатокДт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "010", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, , , "Организация", мОргРасшифровка);

		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();
		
		// Сумма износа объектов жилищного фонда
		П010097003 = 0;
		П010097004 = 0;
		
		// Сумма износа объектов внешнего благоустройства
		П010098003 = 0;
		П010098004 = 0;
		
		// Сумма износа прочих объектов ОС
		П010099503_010 = 0;
		П010099504_010 = 0;
		
		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			Если НЕ ВыбранноеСубконто.ЭтоГруппа Тогда

				Если ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.Здания Тогда

					П010097003 = П010097003 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт; 
					П010097004 = П010097004 + ВыборкаПоСубконто.СуммаКонечныйОстатокДт; 
					
				ИначеЕсли ВыбранноеСубконто.ГруппаОС = Перечисления.ГруппыОС.МноголетниеНасаждения Тогда

					П010098003 = П010098003 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
					П010098004 = П010098004 + ВыборкаПоСубконто.СуммаКонечныйОстатокДт;

				Иначе

					П010099503_010 = П010099503_010 + ВыборкаПоСубконто.СуммаНачальныйОстатокДт;
					П010099504_010 = П010099504_010 + ВыборкаПоСубконто.СуммаКонечныйОстатокДт;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		УстановитьЗначениеПоказателя("П000010097003", П010097003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010097003", "Строка 970 ""Износ жилищного фонда"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по дебету счета 010 по объектам ОС, включенным в группу (Вид (группа) ОС) ""Здания""", П010097003, Счет010, , , , "Баланс");
		
		УстановитьЗначениеПоказателя("П000010097004", П010097004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010097004", "Строка 970 ""Износ жилищного фонда"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по дебету счета 010 по объектам ОС, включенным в группу (Вид (группа) ОС) ""Здания""", П010097004, Счет010, , , , "Баланс");

		УстановитьЗначениеПоказателя("П000010098003", П010098003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010098003", "Строка 980 ""Износ объектов внешнего благоустройства и других аналогичных объектов"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по дебету счета 010 по объектам ОС, включенным в группу (Вид (группа) ОС) ""Многолетние насаждения""", П010098003, Счет010, , , , "Баланс");
		
		УстановитьЗначениеПоказателя("П000010098004", П010098004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010098004", "Строка 980 ""Износ объектов внешнего благоустройства и других аналогичных объектов"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по дебету счета 010 по объектам ОС, включенным в группу (Вид (группа) ОС) ""Многолетние насаждения""", П010098004, Счет010, , , , "Баланс");

		// Заполняем строки многострочного раздела после строки по коду 990.

		// Материалы, принятые в переработку
		П010099503_003 = СНД(Счет003);
		П010099504_003 = СКД(Счет003);

		Если (П010099503_003 <> 0) ИЛИ (П010099504_003 <> 0) Тогда
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Наименование = "Материалы, принятые в переработку";
			НоваяСтрока.НачОстаток   = П010099503_003;
			НоваяСтрока.КонОстаток   = П010099504_003;
		КонецЕсли;

		// Оборудование, принятое для монтажа
		П010099503_005 = СНД(Счет005);
		П010099504_005 = СКД(Счет005);

		Если (П010099503_005 <> 0) ИЛИ (П010099504_005 <> 0) Тогда
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Наименование = "Оборудование, принятое для монтажа";
			НоваяСтрока.НачОстаток   = П010099503_005;
			НоваяСтрока.КонОстаток   = П010099504_005;
		КонецЕсли;

		// Бланки строгой отчетности
		П010099503_006 = СНД(Счет006);
		П010099504_006 = СКД(Счет006);

		Если (П010099503_006 <> 0) ИЛИ (П010099504_006 <> 0) Тогда
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Наименование = "Бланки строгой отчетности";
			НоваяСтрока.НачОстаток   = П010099503_006;
			НоваяСтрока.КонОстаток   = П010099504_006;
		КонецЕсли;

		// Основные средства, сданные в аренду
		П010099503_011 = СНД(Счет011);
		П010099504_011 = СКД(Счет011);
		
		Если (П010099503_011 <> 0) ИЛИ (П010099504_011 <> 0) Тогда
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Наименование = "Основные средства, сданные в аренду";
			НоваяСтрока.НачОстаток   = П010099503_011;
			НоваяСтрока.КонОстаток   = П010099504_011;
		КонецЕсли;

		// Износ основных средств
		Если (П010099503_010 <> 0) ИЛИ (П010099504_010 <> 0) Тогда
			НоваяСтрока = ТаблДанныхДопСтрок.Добавить();
			НоваяСтрока.Наименование = "Износ основных средств";
			НоваяСтрока.НачОстаток   = П010099503_010;
			НоваяСтрока.КонОстаток   = П010099504_010;
		КонецЕсли;

		Если ТаблДанныхДопСтрок.Количество() > 0 Тогда
			Если мБезКонсолидации Тогда
				// Создаем и заполняем дополнительные строки.
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрок, мИдГруппы1);
			Иначе
				// Сохраним в накопительной таблице
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблДанныхДопСтрок, ТаблДанныхДопСтрокОбщ);
				ТаблДанныхДопСтрок.Очистить();
			КонецЕсли;
		КонецЕсли;

		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("Наименование", "НачОстаток, КонОстаток");
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрокОбщ, мИдГруппы1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

    ///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Баланс";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаБаланс";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ФормироватьСтруктуруСтраницОтчета();

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаССоставомПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
Процедура ПоказатьКодЕИ()

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мБаланс.Области.КодЕИ.Значение = "383";
		мБаланс.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мБаланс.Области.КодЕИ.Значение = "384";
		мБаланс.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мБаланс.Области.КодЕИ.Значение = "385";
		мБаланс.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;

КонецПроцедуры // ПоказатьКодЕИ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ИмяТекущейСтраницыПанели = "Баланс";

	Если Не ТекущаяОбласть = Неопределено Тогда
		
		КнопкаУдалить  = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки"  + ИмяТекущейСтраницыПанели);
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если (КнопкаДобавить <> Неопределено) И (КнопкаУдалить <> Неопределено) Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
				КнопкаУдалить.Доступность  = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
				КнопкаУдалить.Доступность  = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "Баланс";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

Процедура ПрименитьНастройкиОтчетаДляАУ()
	
	// применяем макет
	мБаланс.Очистить();
	мБаланс.Вывести(ПолучитьМакет("БалансАУ"));
	
	// изменяем заголовок
	Заголовок = "Баланс (для автономных учреждений)";
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБаланс = ЭлементыФормы.ПолеТабличногоДокументаБаланс;

	// подменяем макет, если это БАУ
	Если ЭтоБалансДляАУ Тогда
		ПрименитьНастройкиОтчетаДляАУ();
	КонецЕсли;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = мБаланс;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			
			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();

			// При создании нового всегда по умолчанию подставляем почтовый адрес организации.
			// Перевыбрать адрес можно на форме отчета.
			мТипАдреса = "ПолныйАдрПочт";

		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мБаланс.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"Баланс");

	ДоступностьКнопокДобавитьУдалить();

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		ПрорисоватьПодменюПечать();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПрорисоватьПодменюПечать()
	
	Если Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	Иначе
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), , Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ДатаУтвержденияБаланса") Или (ОбластьИмя = "ДатаВысылкиОтчета")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")
	 Или (Найти(ОбластьИмя, "П00001009950") > 0)) Тогда
		ОбработчикИзменения();
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.УправлениеВариантами = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = (Год(мДатаНачалаПериодаОтчета) >= 2009 И Месяц(мДатаКонцаПериодаОтчета) % 3 = 0);
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		ПрорисоватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик нажатия кнопки <Добавить>
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиНажатие()

// Процедура - обработчик нажатия кнопки <Удалить>
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мБаланс.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаБалансПриИзменении(Элемент)

	ОбработчикИзменения();

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияБалансПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиБалансПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийБалансПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 или 
		мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=3; ЧГ=0";
		
	ИначеЕсли мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=6; ЧГ=0";
		
	КонецЕсли;
		 
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						Если ТекПок.Свойство(ИмяЯчейки) Тогда
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Иначе
							ЗначениеЯчейки = "";
						КонецЕсли;
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					Если ТекПок.Свойство(ИмяЯчейки) Тогда
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Иначе
						ЗначениеЯчейки = "";
					КонецЕсли;
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
				СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
				СтатусПроверки = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						Если ТекПок.Свойство(ИмяЯчейки) Тогда
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Иначе
							ЗначениеЯчейки = "";
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат ПроверитьПоказателиXML();
	Иначе
		Возврат ПроверитьПоказатели201();
	КонецЕсли;
	
КонецФункции

Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2009 Тогда
		Возврат УниверсальнаяВыгрузкаXML(Текст);
	Иначе
		Возврат УниверсальнаяВыгрузка201(Текст);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПоказатели201() Экспорт
	
	Орг = мСохраненныйДок.Организация;
	ДатаПодписи = мСохраненныйДок.ДатаПодписи;
	ТаблицаСообщений.Очистить();
	РезПроверки1 = ПроверитьШапку(Ложь);
	РезПроверки2 = ПроверитьПредписанныеПоказатели(Ложь);
	Возврат (РезПроверки1 И РезПроверки2);
	
КонецФункции

Функция ПроверитьШапку(БратьИзФормы = Истина)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	
	Орг = мСохраненныйДок.Организация;
	
	ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	
	ПоказателиБаланс = Данные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	
	ОКПО = ПоказателиБаланс.ОргКодОКПО;
	ОснВидДеят = ПоказателиБаланс.ОргОтрасль;
	ОКВЭД = ПоказателиБаланс.ОргКодОКВЭД;
	ОргПравФорм = ПоказателиБаланс.ОргФорма;
	ОКОПФ = ПоказателиБаланс.ОргКодОКОПФ;
	ФормСобств = ПоказателиБаланс.ОргФормаСобств;
	ОКФС = ПоказателиБаланс.ОргКодОКФС;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКПО) Тогда
		СообщитьВТС("Не задано значение кода по ОКПО", "Баланс", "ОргКодОКПО");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОснВидДеят) Тогда
		СообщитьВТС("Не задано наименование основного вида деятельности по ОКВЭД", "Баланс", "ОргОтрасль");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКВЭД) Тогда
		СообщитьВТС("Не задан код основного вида деятельности по ОКВЭД", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОргПравФорм) Тогда
		СообщитьВТС("Не задано наименование организационно-правовой формы по ОКОПФ", "Баланс", "ОргФорма");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКОПФ) Тогда
		СообщитьВТС("Не задан код организационно-правовой формы по ОКОПФ", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ФормСобств) Тогда
		СообщитьВТС("Не задано наименование формы собственности по ОКФС", "Баланс", "ОргФормаСобств");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКФС) Тогда
		СообщитьВТС("Не задан код собственности по ОКФС", "Баланс", "ОргКодОКФС");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Возврат НЕ Булево(СтатусПроверки);
	
КонецФункции

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ПроставитьКонцыБлока(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	КонцыБлоков.Добавить("П000010015004");
	КонцыБлоков.Добавить("П000010043304");
	КонцыБлоков.Добавить("П000020021704");
	КонцыБлоков.Добавить("П000020027004");
	КонцыБлоков.Добавить("П000030043204");
	КонцыБлоков.Добавить("П000040052004");
	КонцыБлоков.Добавить("П000050066004");
	КонцыБлоков.Добавить("П000060099004");
	
	Строки254 = Новый Массив;
	Строки254.Добавить("П000010015101");
	Строки254.Добавить("П000010021801");
	Строки254.Добавить("П000010027101");
	Строки254.Добавить("П000010043301");
	Строки254.Добавить("П000010052101");
	Строки254.Добавить("П000010066101");
	Строки254.Добавить("П000060100001");
	
	ИзменятьЗнакПоказателей = (РабочаяДата >= '20070701000000');
	Если ИзменятьЗнакПоказателей Тогда
		ПоложительныеПоказатели = Новый Соответствие;
		ПоложительныеПоказатели.Вставить("П000030041503", Истина);
		ПоложительныеПоказатели.Вставить("П000030041504", Истина);
	КонецЕсли;
	
	// для БАУ - дополнительная постобработка
	Если ЭтоБалансДляАУ Тогда
		
		СоответствиеДляПерекодировки = Новый Соответствие;
		СоответствиеДляПерекодировки.Вставить("П000030042101", "П000010043301");
		СоответствиеДляПерекодировки.Вставить("П000030042103", "П000010043303");
		СоответствиеДляПерекодировки.Вставить("П000030042104", "П000010043304");
		СоответствиеДляПерекодировки.Вставить("П000030044001", "П000010043301");
		СоответствиеДляПерекодировки.Вставить("П000030044003", "П000010043303");
		СоответствиеДляПерекодировки.Вставить("П000030044004", "П000010043304");
		
		КолСтрок = Текст.КоличествоСтрок();
		Для Сч = 1 По КолСтрок Цикл
			
			ТекИнд = КолСтрок - Сч + 1;
			ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
			Тек13Симв = Лев(ТекСтрока, 13);
			
			НовыйКодПоказателя = СоответствиеДляПерекодировки[Тек13Симв];
			Если НовыйКодПоказателя <> Неопределено Тогда
				Если НовыйКодПоказателя = "П000010043304" И СтрДлина(ТекСтрока) = 14 И СтрДлина(Текст.ПолучитьСтроку(ТекИнд - 1)) = 14 Тогда
					Текст.УдалитьСтроку(ТекИнд - 2);
					Текст.УдалитьСтроку(ТекИнд - 2);
					Текст.УдалитьСтроку(ТекИнд - 2);
					Продолжить;
				Иначе
					Текст.ЗаменитьСтроку(ТекИнд, НовыйКодПоказателя + ":" + Сред(ТекСтрока, 15));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Строки254.Найти(Тек13Симв) <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СокрЛП(Сред(ТекСтрока, 15, 254)));
		КонецЕсли;
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");			
		КонецЕсли;
		Если ИзменятьЗнакПоказателей И ПоложительныеПоказатели.Получить(Тек13Симв) = Истина И Сред(ТекСтрока, 15, 1) = "-" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + Сред(ТекСтрока, 16));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьШапку(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиБаланс = Данные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	Данные.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	Вид = мСохраненныйДок.Вид;
	
	Дата2Число = ПоказателиБаланс.ДатаКонцаПериодаОтчетаЧисло;
	Дата2Месяц = ПоказателиБаланс.ДатаКонцаПериодаОтчетаМесяц;
	Дата2Год   = ПоказателиБаланс.ДатаКонцаПериодаОтчетаГод;
	Дата2 = Дата(Дата2Год, Дата2Месяц, Дата2Число);
	
	ПризПериодОтч = 2;
	Если КонецДня(Дата2) = КонецГода(Дата2) Тогда
		ПризПериодОтч = 3;
	КонецЕсли;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ОКЕИ = 385;
	Иначе
		ОКЕИ = 384;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:2");		
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + НаименованиеОтчетаДляВыгрузки);
	Текст.ДобавитьСтроку("ВерФОтч:2.01002");
	Текст.ДобавитьСтроку("ПериодВерОтч:16.01.2004,");  
	Текст.ДобавитьСтроку("ПризПериодОтч:"	+ ПризПериодОтч); 
	Текст.ДобавитьСтроку("НачПериодОтч:"	+ Формат(НачалоГода(Дата2),"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("КонПериодОтч:"	+ Формат(Дата2,"ДФ=dd.MM.yyyy; ДП=00.00.0000"));    
	Текст.ДобавитьСтроку("ОКЕИ:" + ОКЕИ); 
	ВарФОтч = ?(Вид = 999 ИЛИ мОтключитьАвтоматическоеУправлениеВариантами = Истина, 999, Вид + 1);
	Текст.ДобавитьСтроку("ВарФОтч:" + Формат(ВарФОтч, "ЧЦ=3; ЧН=; ЧВН="));//Текст.ДобавитьСтроку("ВарФОтч:999");
	Текст.ДобавитьСтроку("КолПокФОтч:");
	Текст.ДобавитьСтроку("###");

	ОКПО = ПоказателиБаланс.ОргКодОКПО;
	ОснВидДеят = ПоказателиБаланс.ОргОтрасль;
	ОКВЭД = ПоказателиБаланс.ОргКодОКВЭД;
	ОргПравФорм = ПоказателиБаланс.ОргФорма;
	ОКОПФ = ПоказателиБаланс.ОргКодОКОПФ;
	ФормСобств = ПоказателиБаланс.ОргФормаСобств;
	ОКФС = ПоказателиБаланс.ОргКодОКФС;
	
	Текст.ДобавитьСтроку("ОКПО:" + ВРЕГ(СокрЛП(Лев(ОКПО, 8))));
	Текст.ДобавитьСтроку("ОснВидДеят:" + ВРЕГ(СокрЛП(Лев(ОснВидДеят, 254))));
	Текст.ДобавитьСтроку("ОКВЭД:" + ВРЕГ(СокрЛП(Лев(ОКВЭД, 8))));
	Текст.ДобавитьСтроку("ОргПравФорм:" + ВРЕГ(СокрЛП(Лев(ОргПравФорм, 254))));
	Текст.ДобавитьСтроку("ОКОПФ:" + ВРЕГ(СокрЛП(Лев(ОКОПФ, 2))));
	Текст.ДобавитьСтроку("ФормСобств:" + ВРЕГ(СокрЛП(Лев(ФормСобств, 254))));
	Текст.ДобавитьСтроку("ОКФС:" + ВРЕГ(СокрЛП(Лев(ОКФС, 2))));
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка201(Текст = Неопределено) Экспорт
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	ВыгрузитьШапку(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ПроставитьКонцыБлока(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);

	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакетаССоставомПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаБаланс.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	//РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РасшифровкаЗначенияПоказателя").Показать(ЭтаФорма, ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки502");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой()
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010041103");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000010041104");
	
	ПоказателиОсновногоРаздела = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Если ПоказателиОсновногоРаздела.Свойство(Пок + "_1") Тогда
			НомерСтроки = 1;
			Пока ПоказателиОсновногоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ЗначениеПоказателя < 0 Тогда
					ПоказателиОсновногоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		ИначеЕсли ПоказателиОсновногоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
			ПоказателиОсновногоРаздела.Вставить(Пок, -ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрПочт) Тогда
			АдресДляВыгрузки = АдрПочт;
		Иначе
			АдресДляВыгрузки = АдрЮР;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,		"21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,		"31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,		"33");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12,	"34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",					РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",						"0710001");
	Параметры.Вставить("ДатаДок",					Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",					СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)]);
	Параметры.Вставить("ОтчетГод",					Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Если Параметры.Период = "34" Тогда
		Параметры.Вставить("ВидДок",					Строка(мСохраненныйДок.Вид));
	Иначе
		Параметры.Вставить("ВидДок",					""); //показатель необязательный, перед выгрузкой будет удален
	КонецЕсли;
	Параметры.Вставить("НаимОрг",					СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",					СокрЛП(Титульный.ОргИНН));
	Параметры.Вставить("КППОрг", 					СокрЛП(Организация.КПП));
	Параметры.Вставить("КодИФНС",					СокрЛП(Организация.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",			СокрЛП(Организация.КодИФНСПолучателя));
	
	// различные коды
	Параметры.Вставить("ОКПО",						СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД",						СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОКОПФ",						СокрЛП(Титульный.ОргКодОКОПФ));
	Параметры.Вставить("ОКФС",						СокрЛП(Титульный.ОргКодОКФС));
	Параметры.Вставить("ОКЕИ",						СокрЛП(Титульный.КодЕИ));
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	Параметры.Вставить("ФорматВывода",				"ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",				СокрЛП(ФИОРук.Фамилия));
	Параметры.Вставить("ИмяРук",					СокрЛП(ФИОРук.Имя));
	Параметры.Вставить("ОтчествоРук",				СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РазложитьФИО(Титульный.ОргБухгалтер);
	Параметры.Вставить("ФамилияБух",				СокрЛП(ФИОБух.Фамилия));
	Параметры.Вставить("ИмяБух",					СокрЛП(ФИОБух.Имя));
	Параметры.Вставить("ОтчествоБух",				СокрЛП(ФИОБух.Отчество));
	
	// телефон
	Параметры.Вставить("ТелОрг",					РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(мСохраненныйДок.Организация, мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	// адрес
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	Параметры.Вставить("АдрИндекс",					СокрЛП(СтруктураАдреса.Индекс));
	Параметры.Вставить("АдрКодРегион",				РегламентированнаяОтчетность.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	Параметры.Вставить("АдрРегион",					СокрЛП(СтруктураАдреса.Регион));
	Параметры.Вставить("АдрРайон",					СокрЛП(СтруктураАдреса.Район));
	Параметры.Вставить("АдрГород",					СокрЛП(СтруктураАдреса.Город));
	Параметры.Вставить("АдрНаселПункт",				СокрЛП(СтруктураАдреса.НаселенныйПункт));
	Параметры.Вставить("АдрУлица",					СокрЛП(СтруктураАдреса.Улица));
	Параметры.Вставить("АдрДом",					СокрЛП(СтруктураАдреса.Дом));
	Параметры.Вставить("АдрКорпус",					СокрЛП(СтруктураАдреса.Корпус));
	Параметры.Вставить("АдрКварт",					СокрЛП(СтруктураАдреса.Квартира));
	
	Параметры.Вставить("ВерсФорм",					"5.02");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_BUH1");
	
	// формируем ИдФайл на основании значений других параметров
	Параметры.Вставить("ИдФайл",					СформироватьИдФайл(Параметры));

	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формат выгрузки допускает выгрузку отчетов только за I квартал, полугодие, 9 месяцев или год!", "Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННОрг, Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.ОКПО) И (СтрДлина(Параметры.ОКПО) < 8 ИЛИ СтрДлина(Параметры.ОКПО) > 10 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКПО)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКОПФ) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКФС) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКЕИ) <> 3 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на заполнение наименования статьи в непустых строках табличных частей
	Данные = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	ДопСтроки = Новый Структура;
	ДопСтроки.Вставить("П000010099501", Новый Структура("П000010099503, П000010099504"));
	
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		ИндСтр = 1;
		Пока Данные.Свойство(ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")) Цикл
			Если ПустаяСтрока(Данные[ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ=")]) Тогда
				Для Каждого СуммаДопСтроки Из ДопСтрока.Значение Цикл
					Если ЗначениеЗаполнено(ЗначениеПериведенноеКЕдиницеИзмерения(Данные[СуммаДопСтроки.Ключ + "_" + Формат(ИндСтр, "ЧГ=")], Параметры)) Тогда
						РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана статья!", "Баланс", ДопСтрока.Ключ + "_" + Формат(ИндСтр, "ЧГ="));
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ИндСтр = ИндСтр + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);//!!!
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// находим ключевые узлы выгрузки многострочных частей
	ГоловнойУзелТЧ = ДеревоВыгрузки.Строки.Найти("ПрочЦен", "Код", Истина);
	Если ГоловнойУзелТЧ <> Неопределено Тогда
		
		СуммыПоАтрибутам = Новый Структура;
		УзлыВтчНаим = ГоловнойУзелТЧ.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаим"));
		Для Каждого УзелВтчНаим Из УзлыВтчНаим Цикл
			Для Каждого СтрАтрибут Из УзелВТчНаим.Строки Цикл
				Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
					ЗначениеАтрибутаЧисло = ЧисловоеЗначение(СтрАтрибут.Значение);
					СуммаПоАтрибуту = ?(СуммыПоАтрибутам.Свойство(СтрАтрибут.Код), СуммыПоАтрибутам[СтрАтрибут.Код], 0);
					СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммаПоАтрибуту + ЗначениеАтрибутаЧисло);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СуммыПоАтрибутам Цикл
			АтрибутГоловногоУзлаТЧ = ГоловнойУзелТЧ.Строки.Найти(КлючИЗначение.Ключ, "Код");
			Если АтрибутГоловногоУзлаТЧ <> Неопределено Тогда
				АтрибутГоловногоУзлаТЧ.Значение = Формат(КлючИЗначение.Значение, "ЧН=; ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЧисловоеЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				УдалитьУзел(Узел);
			ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
				УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, Параметры)
	
	Возврат Число(Формат(Значение, Параметры.ФорматВывода));
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда // !!!
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если Параметры.Свойство(ИмяСвойства) Тогда // !!!
						ЗначениеСвойства = Параметры[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, Параметры));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Баланс", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Баланс", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_BUH1_1_023_00_05_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

Процедура ПолеТабличногоДокументаБалансВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "ОргПочтАдрес" Тогда
		// Запросим адреса.
		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ПолныйАдрЮР, ПолныйАдрПочт");
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрЮР, ",", "")) Тогда
				Адреса.ПолныйАдрЮР = "";
			Иначе
				Адреса.ПолныйАдрЮР = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрЮР);
			КонецЕсли;
			
			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрПочт, ",", "")) Тогда
				Адреса.ПолныйАдрПочт = "";
			Иначе
				Адреса.ПолныйАдрПочт = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрПочт);
			КонецЕсли;
		КонецЕсли;

		ТаблицаАдресов = Новый ТаблицаЗначений;
		ТаблицаАдресов.Колонки.Добавить("НазваниеАдреса",,"Тип адреса",18);
		ТаблицаАдресов.Колонки.Добавить("Адрес",,,100);

		НовСтр = ТаблицаАдресов.Добавить();
		НовСтр.НазваниеАдреса = "Пустое значение";
		НовСтр.Адрес = "Адрес не указывается";

		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрПочт) Тогда
			НовСтр = ТаблицаАдресов.Добавить();
			НовСтр.НазваниеАдреса = "Почтовый адрес";
			НовСтр.Адрес = Адреса.ПолныйАдрПочт;
		КонецЕсли;

		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрЮР) Тогда
			НовСтр = ТаблицаАдресов.Добавить();
			НовСтр.НазваниеАдреса = "Юридический адрес";
			НовСтр.Адрес = Адреса.ПолныйАдрЮР;
		КонецЕсли;

		Если ТаблицаАдресов.Количество() = 1 Тогда
			Предупреждение("В контактной информации юридический и почтовый адрес не указаны.");
			Возврат;
		КонецЕсли;

		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		НайденнаяСтрока = ТаблицаАдресов.Найти(ПоискЗначение, "Адрес");
		Если НайденнаяСтрока = Неопределено Тогда
			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите");
		Иначе
			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите адрес", НайденнаяСтрока);
		КонецЕсли;

		Если УказанныйАдрес = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Модифицированность = Истина;

		Область.Значение = ?(УказанныйАдрес.Получить(1) = "Адрес не указывается", "", УказанныйАдрес.Получить(1));

		Если УказанныйАдрес.Получить(1) = "Адрес не указывается" Тогда
			// По умолчанию для следующих обновлений поставим, что тип адреса должен быть почтовым.
			мТипАдреса = "ПолныйАдрПочт";
			мАдресДляВыгрузки = "";
		КонецЕсли;

		Если УказанныйАдрес.НазваниеАдреса = "Юридический адрес" Тогда
			мТипАдреса = "ПолныйАдрЮР";
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		КонецЕсли;

		Если УказанныйАдрес.НазваниеАдреса = "Почтовый адрес" Тогда
			мТипАдреса = "ПолныйАдрПочт";
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0000100995";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;

// Структура строк многострочного раздела
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010099501", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("П000010099502", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("П000010099503", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010099504", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

//универсальная выгрузка и попутные
РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;

ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
ЭтоБалансДляАУ = (ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ");

Если ЭтоБалансДляАУ Тогда
	ИмяМакетаССоставомПоказателей = "СоставПоказателейАУ";
Иначе
	ИмяМакетаССоставомПоказателей = "СоставПоказателей";
КонецЕсли;

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(ИмяМакетаССоставомПоказателей, "Формат 2.01002", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

НаименованиеОтчетаДляВыгрузки = "БУХГАЛТЕРСКИЙ БАЛАНС";
КНД = "0710001";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
