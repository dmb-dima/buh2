#Если Клиент Тогда

Перем НП Экспорт;
Перем ИмяРегистраБухгалтерии Экспорт;


//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Диаграмма";
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	соотВид = Новый Структура("НачальныйОстаток, КонечныйОстаток, Оборот", "начальный остаток", "конечный остаток", "оборот");
	соотСторона = Новый Структура("Дт, Кт", "дебетовый", "кредитовый");
	соотРесурс = Новый Структура("Сумма, Количество, ВалютнаяСумма", "сумма", "количество", "валютная сумма");
	
	ЗаголовокОтчета = Строка(ТипДиаг) + " по счету " + Строка(Счет);
	
	СтрокаРесурса = соотРесурс[Ресурс] + " " + ?(ЗначениеЗаполнено(СторонаРесурса), соотСторона[СторонаРесурса]+" ", "") + соотВид[ВидРесурса];
	
	ЗаголовокОтчета = ЗаголовокОтчета + " : " + СтрокаРесурса;
	
	СтрокаОтборов = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	Если Не ПустаяСтрока(СтрокаОтборов) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + Символы.ПС + "Отбор : " + СтрокаОтборов;
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()


//////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ПАРАМЕТРОВ ОТЧЕТА
//

// Формирование структуры для сохранения настроек отчета.
// В структуру заносятся значимые реквизиты отчета
//
// Возвращаемое значение:
//    Структура
Функция СформироватьСтруктуруДляСохраненияНастроек() Экспорт

	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Организация", Организация);
	
	СтруктураНастроек.Вставить("ДатаНач"    , ДатаНач);
	СтруктураНастроек.Вставить("ДатаКон"    , Макс(ДатаНач, ДатаКон));
	
	СтруктураНастроек.Вставить("ВидРесурса"    , ВидРесурса);
	СтруктураНастроек.Вставить("СторонаРесурса", СторонаРесурса);
	СтруктураНастроек.Вставить("Ресурс"        , Ресурс);
	
	СтруктураНастроек.Вставить("Период"        , Период);
	
	СтруктураНастроек.Вставить("ВидПодписей"  , ВидПодписей);
	
	СтруктураНастроек.Вставить("МаксимумСерий",    МаксСерий);
	СтруктураНастроек.Вставить("МаксКолвоСерий",   МаксКолвоСерий);
	СтруктураНастроек.Вставить("МаксПроцентСерий", МаксПроцентСерий);
	
	СтруктураНастроек.Вставить("Окантовка",           Окантовка);
	СтруктураНастроек.Вставить("ОтображатьЗаголовок", ОтображатьЗаголовок);
	СтруктураНастроек.Вставить("ОтображатьЛегенду",   ОтображатьЛегенду);
	СтруктураНастроек.Вставить("Свет",                Свет);
	СтруктураНастроек.Вставить("Градиент",            Градиент);
	СтруктураНастроек.Вставить("РаздвижениеСерий",    РаздвижениеСерий);
	
	СтруктураНастроек.Вставить("ТипДиаграммы", ТипДиаг);
	
	СтруктураНастроек.Вставить("Счет"        , Счет);
	
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	
	Возврат СтруктураНастроек;

КонецФункции // СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок)

// Восстановление значимых реквизитов отчета из структуры
//
// Параметры:
//    Структура   - структура, которая содержит значения реквизитов отчета
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт

	Перем НастройкиПостроителя;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("Организация", Организация);
	
	СтруктураСНастройками.Свойство("ДатаНач"    , ДатаНач);
	СтруктураСНастройками.Свойство("ДатаКон"    , ДатаКон);
	
	СтруктураСНастройками.Свойство("Счет"   , Счет);
	
	Если СтруктураСНастройками.Свойство("ВидРесурса") Тогда
		СтруктураСНастройками.Свойство("ВидРесурса", ВидРесурса);
	Иначе
		ВидРесурса = "НачальныйОстаток";
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("СторонаРесурса") Тогда
		СтруктураСНастройками.Свойство("СторонаРесурса", СторонаРесурса);
	Иначе
		СторонаРесурса = "Дт";
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("Ресурс") Тогда
		СтруктураСНастройками.Свойство("Ресурс", Ресурс);
	Иначе
		Ресурс = "Сумма";
	КонецЕсли;
	
	Если СтруктураСНастройками.Свойство("Период") Тогда
		СтруктураСНастройками.Свойство("Период", Период);
	Иначе
		Период = "";
	КонецЕсли;
	
	Если СтруктураСНастройками.Свойство("ВидПодписей") Тогда
		СтруктураСНастройками.Свойство("ВидПодписей", ВидПодписей);
	Иначе
		ВидПодписей = ВидПодписейКДиаграмме.Нет;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("МаксимумСерий") Тогда
		СтруктураСНастройками.Свойство("МаксимумСерий", МаксСерий);
	Иначе
		МаксСерий = МаксимумСерий.НеЗадано;
	КонецЕсли;
	
	Если СтруктураСНастройками.Свойство("ТипДиаграммы") Тогда
		СтруктураСНастройками.Свойство("ТипДиаграммы", ТипДиаг);
	Иначе
		ТипДиаг = ТипДиаграммы.ГистограммаОбъемная;
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("МаксКолвоСерий", МаксКолвоСерий);
	СтруктураСНастройками.Свойство("МаксПроцентСерий", МаксПроцентСерий);
	
	Если СтруктураСНастройками.Свойство("Окантовка") Тогда
		СтруктураСНастройками.Свойство("Окантовка", Окантовка);
	Иначе
		Окантовка = Истина;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("ОтображатьЗаголовок") Тогда
		СтруктураСНастройками.Свойство("ОтображатьЗаголовок", ОтображатьЗаголовок);
	Иначе
		ОтображатьЗаголовок = Истина;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("ОтображатьЛегенду") Тогда
		СтруктураСНастройками.Свойство("ОтображатьЛегенду", ОтображатьЛегенду);
	Иначе
		ОтображатьЛегенду = Истина;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("Свет") Тогда
		СтруктураСНастройками.Свойство("Свет", Свет);
	Иначе
		Свет = Истина;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("Градиент") Тогда
		СтруктураСНастройками.Свойство("Градиент", Градиент);
	Иначе
		Градиент = Истина;
	КонецЕсли;
	Если СтруктураСНастройками.Свойство("РаздвижениеСерий") Тогда
		СтруктураСНастройками.Свойство("РаздвижениеСерий", РаздвижениеСерий);
	Иначе
		РаздвижениеСерий = АвтоРаздвижениеСерий.Нет;
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	
	СтруктураСНастройками.Свойство("НастройкиПостроителя", НастройкиПостроителя);
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Истина, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Настройка параметров диаграммы
Процедура НастроитьПараметрыДиаграммы(Диаграмма)

	Диаграмма.ОбластьЗаголовка.Текст = СформироватьЗаголовок();
	
	Диаграмма.ТипДиаграммы = ТипДиаг;
	
	Диаграмма.ВидПодписей = ВидПодписей;
	
	Диаграмма.МаксимумСерий = МаксСерий;
	Диаграмма.МаксимумСерийКоличество = МаксКолвоСерий;
	Диаграмма.МаксимумСерийПроцент = МаксПроцентСерий;

	Диаграмма.Окантовка = Окантовка;
	Диаграмма.ОтображатьЗаголовок = ОтображатьЗаголовок;
	Диаграмма.ОтображатьЛегенду = ОтображатьЛегенду;
	Диаграмма.Свет = Свет;
	Диаграмма.АвтоРаздвижениеСерий = РаздвижениеСерий;
	Диаграмма.Градиент = Градиент;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ФорматПериода = "";
		Если ЗначениеЗаполнено(Период) Тогда
			Если Врег(Период) = "ГОД" Тогда
				ФорматПериода = "ДФ = ""гггг """"г.""""""";
			ИначеЕсли Врег(Период) = "ПОЛУГОДИЕ" Тогда
				ФорматПериода = "ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""";
			ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
				ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
			ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
				ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
			ИначеЕсли Врег(Период) = "ДЕКАДА" Тогда
				ФорматПериода = "ДФ = """"""Декада с"""" дд.ММ.гггг """"""";
			ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
				ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
			ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
				ФорматПериода = "ДЛФ = D";
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Точка Из Диаграмма.Точки Цикл
			Если ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Тогда
				ЗначениеТочки = Точка.Расшифровка[ПостроительОтчета.ИзмеренияКолонки[0].Имя];
				Если ТипЗнч(ЗначениеТочки) = Тип("Дата") Тогда
					Точка.Текст = Формат(ЗначениеТочки, ФорматПериода);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Серия Из Диаграмма.Серии Цикл
			Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
				ЗначениеСерии = Серия.Расшифровка[ПостроительОтчета.ИзмеренияСтроки[0].Имя];
				Если ТипЗнч(ЗначениеСерии) = Тип("Дата") Тогда
					Серия.Текст = Формат(ЗначениеСерии, ФорматПериода);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура устанавливает параметры отчету
Процедура УстановитьПараметрыОграниченийПостроителю()
	
	ПостроительОтчета.Параметры.Вставить("Организация", Организация);
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	
КонецПроцедуры

// Формирование отчета
Процедура СформироватьОтчет(Диаграмма) Экспорт

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Предупреждение("Не задано ни одной серии. Диаграмма не может быть построена.", 60);
		Возврат;
	КонецЕсли;
	
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	
	УстановитьПараметрыОграниченийПостроителю();
		
	ПостроительОтчета.Выполнить();
	
	Диаграмма.Обновление = Ложь;
	
	ПостроительОтчета.Вывести(Диаграмма, ПолучитьИмяРесурса());

	НастроитьПараметрыДиаграммы(Диаграмма);
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Удаление из списка значений элемента с заданным значением
//
// Параметры:
//    Список     - Список значений, из которого необходимо удалить элемент с заданным значением
//    Значение   - Искомое значение, элемент с которым, будет удален из списка
Процедура УдалитьИзСпискаПоЗначению(Список, Значение)
	
	Элемент = Список.НайтиПоЗначению(Значение);
	Если Элемент <> Неопределено Тогда
		Список.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт

	// получим список доступных измерений
	СписокДоступныхПолей = Новый СписокЗначений;
	
	Для каждого Поле Из ПостроительОтчета.ДоступныеПоля Цикл
		
		Если Поле.Измерение Тогда
			СписокДоступныхПолей.Добавить(Поле.ПутьКДанным, Поле.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	// вычтем из списка доступных измерений используемую серию
	Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
		
		УдалитьИзСпискаПоЗначению(СписокДоступныхПолей, ПостроительОтчета.ИзмеренияСтроки[0].ПутьКДанным);
		
	КонецЕсли;
	
	// вычтем из списка доступных измерений используемые отборы
	Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
	
		Если ЭлементОтбора.Использование Тогда
			
			Если ЭлементОтбора.ВидСравнения <> ВидСравнения.ВИерархии и
				 ЭлементОтбора.ВидСравнения <> ВидСравнения.ВСписке и 
				 ЭлементОтбора.ВидСравнения <> ВидСравнения.ВСпискеПоИерархии Тогда
			
				УдалитьИзСпискаПоЗначению(СписокДоступныхПолей, ЭлементОтбора.ПутьКДанным);
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
	// пусть пользователь укажет требуемую расшифровку
	Если СписокДоступныхПолей.Количество()>0 Тогда
		
		Выбор = СписокДоступныхПолей.ВыбратьЭлемент("Выберите способ расшифровки", СписокДоступныхПолей[СписокДоступныхПолей.Количество()-1]);
		
	Иначе
		
		Выбор = Неопределено;
		
	КонецЕсли; 
	
	// ничего не выбрано, значит просто выходим
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// настроим новую диаграмму
	Параметры = Новый Соответствие;
	
	Для каждого ЭлементРасш Из Расшифровка Цикл
		Параметры.Вставить(ЭлементРасш.Ключ, ЭлементРасш.Значение);
	КонецЦикла;
	
	Отчет = Отчеты[ЭтотОбъект.Метаданные().Имя].Создать();
	
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("ДатаНач"    , ДатаНач);
	Параметры.Вставить("ДатаКон"    , ДатаКон);
	
	Параметры.Вставить("ВидРесурса"    , ВидРесурса);
	Параметры.Вставить("СторонаРесурса", СторонаРесурса);
	Параметры.Вставить("Ресурс"        , Ресурс);
	
	Параметры.Вставить("Период"        , Период);
	
	Параметры.Вставить("ВидПодписей"  , ВидПодписей);
	
	Параметры.Вставить("МаксимумСерий",    МаксСерий);
	Параметры.Вставить("МаксКолвоСерий",   МаксКолвоСерий);
	Параметры.Вставить("МаксПроцентСерий", МаксПроцентСерий);
	
	Параметры.Вставить("Окантовка",           Окантовка);
	Параметры.Вставить("ОтображатьЗаголовок", ОтображатьЗаголовок);
	Параметры.Вставить("ОтображатьЛегенду",   ОтображатьЛегенду);
	Параметры.Вставить("Свет",                Свет);
	Параметры.Вставить("Градиент",            Градиент);
	Параметры.Вставить("РаздвижениеСерий",    РаздвижениеСерий);
	
	Параметры.Вставить("ТипДиаграммы", ТипДиаг);
	
	Параметры.Вставить("Счет"        , Счет);
	
	Отчет.Настроить(Параметры);
	
	ПостроительОтчета.НастроитьРасшифровку(Отчет.ПостроительОтчета, Расшифровка);

	// зададим отборы для новой диаграммы
	Для каждого ПолеОтбора Из ПостроительОтчета.Отбор Цикл
	
		Если ПолеОтбора.Использование Тогда
		
			НовоеПоле = Отчет.ПостроительОтчета.Отбор.Найти(ПолеОтбора.Имя);
			Если НовоеПоле = Неопределено Тогда
				НовоеПоле = Отчет.ПостроительОтчета.Отбор.Добавить(ПолеОтбора.ПутьКДанным, ПолеОтбора.Имя);
			КонецЕсли;
			
			НовоеПоле.ВидСравнения  = ПолеОтбора.ВидСравнения;
			НовоеПоле.Значение      = ПолеОтбора.Значение;
			НовоеПоле.ЗначениеС     = ПолеОтбора.ЗначениеС;
			НовоеПоле.ЗначениеПо    = ПолеОтбора.ЗначениеПо;
			НовоеПоле.Представление = ПолеОтбора.Представление;
			НовоеПоле.Использование = Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
	// выведем отчет
	Форма = Отчет.ПолучитьФорму();
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Тогда
		ИзмерениеТочек = ПостроительОтчета.ИзмеренияКолонки[0];
		Если ИзмерениеТочек.Имя <> Выбор.Значение Тогда
			Отчет.ПостроительОтчета.ИзмеренияКолонки.Добавить(ИзмерениеТочек.ПутьКДанным, ИзмерениеТочек.Имя, ИзмерениеТочек.ТипИзмерения);
		КонецЕсли;
	КонецЕсли;
	
	// перед добавлением серий проверим, а нет ли таких точек. Если есть, то удалим их
	ИзмерениеТочек = Отчет.ПостроительОтчета.ИзмеренияКолонки.Найти(Выбор.Значение);
	Если ИзмерениеТочек<>Неопределено Тогда
		Отчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ИзмерениеТочек);
	КонецЕсли;
	
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Добавить(Выбор.Значение, Выбор.Значение);
	
	Форма.ОбновитьОтчет();
	
	Форма.Открыть();

КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ВидРесурса     = Параметры["ВидРесурса"];
	СторонаРесурса = Параметры["СторонаРесурса"];
	Ресурс         = Параметры["Ресурс"];
	
	Период = Параметры["Период"];
	
	ВидПодписей = Параметры["ВидПодписей"];
	
	МаксСерий        = Параметры["МаксимумСерий"];
	МаксКолвоСерий   = Параметры["МаксКолвоСерий"];
	МаксПроцентСерий = Параметры["МаксПроцентСерий"];
	
	Окантовка           = Параметры["Окантовка"];
	ОтображатьЗаголовок = Параметры["ОтображатьЗаголовок"];
	ОтображатьЛегенду   = Параметры["ОтображатьЛегенду"];
	Свет                = Параметры["Свет"];
	Градиент            = Параметры["Градиент"];
	РаздвижениеСерий    = Параметры["РаздвижениеСерий"];
	
	ТипДиаг = Параметры["ТипДиаграммы"];
	
	Счет = Параметры["Счет"];
	
	ЗаполнитьНачальныеНастройки();
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
	
		Для каждого ЭлементОтбора Из СтрокиОтбора Цикл
			
			Если ЭлементОтбора.Ключ = "Валюта" Тогда
				
				Валюта = ЭлементОтбора.Значение;
				ПоВалюте = ЗначениеЗаполнено(Валюта);
				
			ИначеЕсли Лев(ЭлементОтбора.Ключ, 8) = "Субконто" Тогда
				
				ПолеОтбора = ПостроительОтчета.Отбор.Добавить(ЭлементОтбора.Ключ);
				ПолеОтбора.Использование = Истина;
				ПолеОтбора.Значение = ЭлементОтбора.Значение;
				ПолеОтбора.ВидСравнения = ВидСравнения.Равно;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ТекстПоля = "";
	ТекстИтоги = "";
	ТекстОтбор = "";
	
	Если Не Счет.Пустая() Тогда
		Валютный = Счет.Валютный;
	Иначе
		Валютный = Ложь;
	КонецЕсли;
	
	Сч = 0;
	Для каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		Сч = Сч + 1;
		ТекстПоля = ТекстПоля + ", " + "ОстаткиИОбороты.Субконто" + Сч + ".*";
		ТекстИтоги = ТекстИтоги + ", " + "Субконто" + Сч + ".*";
		ТекстОтбор = ТекстОтбор + ", " + "Субконто" + Сч + ".*";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Период) Тогда
	
		ТекстПоля = ТекстПоля + ", " + "Период";
		ТекстИтоги = ТекстИтоги + ", " + "Период";
	
	КонецЕсли;
	
	ТекстОтбор = ТекстОтбор + ?(Валютный, ", Валюта", "");
	ТекстОтбор = Сред(ТекстОтбор, 3);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты." + ПолучитьИмяРесурса() + "
	|{ВЫБРАТЬ
	|	ОстаткиИОбороты.Счет.*" + ТекстПоля + ?(Валютный, ",
	|	ОстаткиИОбороты.Валюта.*","") + "}
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, " + Период + ", , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация " + ?(Не ПустаяСтрока(ТекстОтбор), "{"+ ТекстОтбор + "}", "") + ") КАК ОстаткиИОбороты
	|ИТОГИ СУММА(" + ПолучитьИмяРесурса() + ") ПО ОБЩИЕ
	|{ИТОГИ ПО
	|	ОстаткиИОбороты.Счет.*" + ТекстИтоги + ?(Валютный,",
	|	ОстаткиИОбороты.Валюта.*", "") + "}
	|АВТОУПОРЯДОЧИВАНИЕ";

	УстановитьПараметрыОграниченийПостроителю();
		
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	Сч = 0;
	Для каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = ВидСубконто.ВидСубконто.ТипЗначения;
		Поле.Представление = ВидСубконто.ВидСубконто.Наименование;
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
	
КонецПроцедуры

// Формирование имени ресурса
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Строка   – Сформированное имя ресурса
//
Функция ПолучитьИмяРесурса() Экспорт
	Возврат Ресурс + ВидРесурса + СторонаРесурса;
КонецФункции // ПолучитьИмяРесурса()

// Возвращает список доступных для выбора типов диаграмм
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокДоступныхТиповДиаграмм() Экспорт

	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить(ТипДиаграммы.Гистограмма);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаОбъемная);
	
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаГоризонтальная);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная);
	
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаНормированная);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальная);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная);
	
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаСНакоплением);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная);
	СписокТипов.Добавить(ТипДиаграммы.ГистограммаСНакоплениемОбъемная);
	
	СписокТипов.Добавить(ТипДиаграммы.График);
	СписокТипов.Добавить(ТипДиаграммы.ГрафикПоШагам);
	СписокТипов.Добавить(ТипДиаграммы.ГрафикСНакоплением);
	
	СписокТипов.Добавить(ТипДиаграммы.ГрафикСОбластями);
	СписокТипов.Добавить(ТипДиаграммы.ГрафикСОбластямиИНакоплением);
	СписокТипов.Добавить(ТипДиаграммы.ГрафикСОбластямиНормированный);
	
	СписокТипов.Добавить(ТипДиаграммы.Изометрическая);
	СписокТипов.Добавить(ТипДиаграммы.ИзометрическаяЛента);
	СписокТипов.Добавить(ТипДиаграммы.ИзометрическаяНепрерывная);
	СписокТипов.Добавить(ТипДиаграммы.ИзометрическаяПирамида);
	
	СписокТипов.Добавить(ТипДиаграммы.Круговая);
	СписокТипов.Добавить(ТипДиаграммы.КруговаяОбъемная);
	
	Возврат СписокТипов;

КонецФункции // ПолучитьСписокДоступныхТиповДиаграмм()

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Неопределено);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

#КонецЕсли