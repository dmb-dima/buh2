////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел3;
Перем мРаздел3_1;
Перем мРаздел3_2;
Перем мРаздел3_3;

// Хранят сведения об организации и должностных лицах организации
Перем мОргКодИМНС;
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПред;
Перем мОргКодОКАТО;
Перем мОргОГРН;
Перем мИННУпПредставитель;

// Хранят имена многострочных разделов
Перем мИдГруппы1;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Хранят суммы налога, отображаемые в квадратах
Перем П000010003000_ФБ;
Перем П000010004000_ФБ;
Перем П000010005000_ФБ;

Перем П000010003000_ФСС;
Перем П000010004000_ФСС;
Перем П000010005000_ФСС;

Перем П000010003000_ФФОМС;
Перем П000010004000_ФФОМС;
Перем П000010005000_ФФОМС;

Перем П000010003000_ТФОМС;
Перем П000010004000_ТФОМС;
Перем П000010005000_ТФОМС;

Перем мВПрограммеИзмененаОрганизация;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем СвойстваЗаполненияОтчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел3_3;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел3_3" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция суммирует значения показателя по всему набору страниц многостраничного раздела.
//
// Параметры:
//   ИмяПоказателя        - строка, имя показателя;
//   ИмяПоказателяУсловие - строка, имя показателя, по которому строится условие суммирования;
//   Условие              - булево, накладываемое условие
//   ПарамЗначение        - значение параметра при выполнении условия.
//
// Возвращаемое значение:
//   число, сумма значений искомого показателя по всем страницам многостраничного раздела.
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;
	
	ВозвращаемоеЗнач = 0;
	
	// сначала определим имя табличного документа, содержащего показатель
	ИмяСтраницыОсновнойПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Если ИмяСтраницыОсновнойПанели = Неопределено Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыОсновнойПанели, ТаблицаСтраницРаздела) Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;

	// сначала определяем значение показателя по активной странице
	ЗначениеПоказателя = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателя].Значение;

	Если Не ИмяПоказателяУсловие = Неопределено Тогда
		ЗначПоказателяУсл = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателяУсловие].Значение;

		Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
			ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
		// Многостраничный раздел состоит из нескольких страниц.
		// Значение искомого реквизита суммируем по всем страницам.

		Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
			Если СтраницаРаздела.АктивнаяСтраница Тогда
				// по активной странице мы вычислили ранее
				Продолжить;
			КонецЕсли;

			СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

			Если СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Если ИмяПоказателяУсловие = Неопределено Тогда
					ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
				ИначеЕсли СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателяУсловие, ЗначПоказателяУсл) Тогда
					Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
						ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат ВозвращаемоеЗнач;
	
КонецФункции // СуммаПоказателяПоВсемСтраницам

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	//СписокПоказателейВнутрСвязи = Новый СписокЗначений;
	//СписокПоказателейВнутрСвязи.Добавить("П000030007003");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели)
	Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если СтрТаблицаСтраницы <> Неопределено Тогда
		НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
	КонецЕсли;

	СтатикСтраницРаздела = Строка(НомерТекущейСтраницы) + " из " + КоличествоСтраниц;
	ЭлементыФормы["НадписьСтатикСтраниц" + ИмяТекущейСтраницыПанели].Заголовок = СтатикСтраницРаздела;

	ДоступностьКнопокЛистания(НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели);

	УстановитьЦветФонаЯчейки(,, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтатикСтраницРаздела()

// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаВариантыЗаполнения;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

		Если Не ПоказатьПоИндексу Тогда
			НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
		Иначе
			НомерСледующейСтраницы = Шаг;
		КонецЕсли;
		
		Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
			Возврат;
		КонецЕсли;

		// Сначала сохраним данные текущей страницы.
		СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление)
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда

			// формируем представление дополнительной страницы
			// в виде ФИО работника - инвалида
			ЗагТекущейСтраницыПанели = ТекТабличноеПоле.Области.П000030001003.Значение;
			Если ПустаяСтрока(ЗагТекущейСтраницыПанели) Тогда
				ЗагТекущейСтраницыПанели = "Новая страница";
			КонецЕсли;

			СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
		КонецЕсли;

		СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		// отображаем данные следующей страницы
		СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;

		Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
			ИмяПоказателя      = Элемент.Ключ;
			ЗначениеПоказателя = Элемент.Значение;

			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

			Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
				// обновляем примечания к ячейкам табличного документа
				НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
					НовыйКомментарий   = НайденнаяСтрока.Комментарий;

					// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
					Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
						ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Расчет(ИмяТекущейСтраницыПанели);

		//ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов()

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		АктивнаяСтраницаРаздела = ТаблицаТекущейСтраницы.Найти(Истина, "АктивнаяСтраница");
		Если АктивнаяСтраницаРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИндексАктивнойСтраницы  = ТаблицаТекущейСтраницы.Индекс(АктивнаяСтраницаРаздела);
		Если ИндексАктивнойСтраницы = 0 Тогда
			// На момент сохранения отображена первая страница
			// из набора дополнительных страниц. Пропускаем.
			Продолжить;
		КонецЕсли;

		// Выводим данные первой страницы многостраничного раздела.
		ПоказатьСтраницуМногостраничногоРаздела((-1)*ИндексАктивнойСтраницы, ИмяТекущейСтраницыПанели);
	КонецЦикла;

	// обновляем цвет фона автоматически заполняемых ячеек
	УстановитьЦветФонаЯчейки(,, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);

	// !!! Данный фрагмент используется только в тех отчетах,где
	// имеется возможность присваивать дополнительным страницам
	// уникальные имена (представления).
	ОпределитьПредставлениеДопСтраниц();

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Процедура присваивает дополнительным листам многостраничных разделов
// уникальные имена (представление).
//
//
Процедура ОпределитьПредставлениеДопСтраниц()
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	// для Раздела 3 в качестве представления дополнительных листов принимаем
	// ФИО работника - инвалида (показатель по коду строки 010)

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Страница.Значение;

		Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				Если ПустаяСтрока(СохрПредставлениеСтраницы) 
					ИЛИ СокрП(СохрПредставлениеСтраницы) = "Новая страница" Тогда

					// определяем представление дополнительной страницы
					СтруктураДанныхСтраницы = СтрокаТаблицы.Данные;

					Если ИмяТекСтраницы = "Раздел3" Тогда
						СтруктураДанныхСтраницы.Свойство("П000030001003", ТекущееПредставлениеСтраницы);
					КонецЕсли;

					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "ФИО работника - инвалида не указано";
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОпределитьПредставлениеДопСтраниц()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = НомерМесяца;
	мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
	мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках()

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиУпП     = "";
	ДатаПодписиФЛ      = "";

	Если Не(мИННДиректор = Неопределено) ИЛИ Не ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если Не(мИННБухгалтер = Неопределено) ИЛИ Не ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если Не ПустаяСтрока(мТитульный.Области.ОргУП.Значение) Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Если Не ПустаяСтрока(мТитульный.Области.ТипОрг4.Значение) Тогда
		ДатаПодписиФЛ  = ДатаПодписи;
	КонецЕсли;


	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУпП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиФЛ"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиФЛ,  "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мФизЛица.  Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1.  Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1.  Области["ДатаПодписи2_"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		
		Сведения.Добавить("", ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "ФИО", "НаимЮЛПол")); // Полное наименование 
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ИННРук"); // ИНН руководителя
		
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
		
		Сведения.Добавить("", "ОГРН"); // ОГРН
		Сведения.Добавить("", "ОКАТО"); // ОКАТО
		
		Сведения.Добавить("", "КодНО");  // Код Налогового Органа
		Сведения.Добавить("", "НаимНО"); // Наименование НО
		
		Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя
		Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя
		
		Сведения.Добавить("", "ТипНП");  // Тип НП
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		// Инициализируем переменные
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		ФИОРук = "";
		ИННРук = "";
		ФИОБух = "";
		ИННБух = "";
		ОГРН = "";
		ОКАТО = "";
		КодНО = "";
		НаимНО = "";
		ФИОУпПред = "";
		ИННУпПред = "";
		ТипНП = 0;
		
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "ФИО", "НаимЮЛПол"), НаимЮЛПол);
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ИННРук", ИННРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ИННБух", ИННБух);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("КодНО", КодНО);
		ОргСведения.Свойство("НаимНО", НаимНО);
		ОргСведения.Свойство("ФИОУпПред", ФИОУпПред);
		ОргСведения.Свойство("ИННУпПред", ИННУпПред);
		ОргСведения.Свойство("ТипНП", ТипНП);
		
		// Производим операции связанные с текущей формой отчетности
		
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
		Иначе
			ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		мКППЮЛ = КППЮЛ;
		
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННЮЛ, НомЯчейки, 1);
			мТитульный.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мФизЛица.  Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел1.  Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел1.  Области["ИНН2_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2.  Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2.  Области["ИНН2_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2.  Области["ИНН3_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2_1.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2_2.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2_2.Области["ИНН2_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел2_3.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел3.  Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел3_1.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел3_2.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
			мРаздел3_3.Области["ИНН1_" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		
		
		Для НомЯчейки = 1 По 9 Цикл
			ЦифраКПП = Сред(КППЮЛ, НомЯчейки, 1);
			
			мТитульный.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мФизЛица.  Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел1.  Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел1.  Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2.  Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2.  Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2.  Области["КПП3_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2_1.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2_2.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2_2.Области["КПП2_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел2_3.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел3.  Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел3_1.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел3_2.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			мРаздел3_3.Области["КПП1_" + НомЯчейки].Значение = ЦифраКПП;
			
		КонецЦикла;
		
		УправлениеЛистами(ТипНП);
		
		Признаки = мТитульный.Области.ТипОрг1.Значение
		+ мТитульный.Области.ТипОрг2.Значение
		+ мТитульный.Области.ТипОрг3.Значение
		+ мТитульный.Области.ТипОрг4.Значение
		+ мТитульный.Области.ТипОрг5.Значение
		+ мТитульный.Области.ТипОрг6.Значение
		+ мТитульный.Области.ТипОрг7.Значение;
		
		Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(Признаки)) Тогда
			
			Если ТипНП = 1 Тогда
				// Необходимо анализировать здесь, является ли ЮР лицом или является ПБОЮЛом
				мТитульный     .Области["ТипОрг1"].Значение = "V";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг3"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 2 Тогда
				
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "V";
				мТитульный     .Области["ТипОрг3"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 3 Тогда
				
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "V";
				мТитульный     .Области["ТипОрг3"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 5 Тогда
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг3"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "V";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		Если ТипНП = 3 Тогда
			ФИОРук = "";
			ФИОБух = "";
			мИННДиректор  = "            ";
			мИННБухгалтер = "            ";
			ИННРук        = "            ";
			ИННБух        = "            ";
		КонецЕсли;
		
		// Работаем с ФИО руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Тогда
			мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННДиректор)) Тогда
			Для НомЯчейки = 1 По 12 Цикл
				ЦифраИНН = Сред(ИННРук, НомЯчейки, 1);
				мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
			КонецЦикла;
			мИННДиректор = ИННРук;
		КонецЕсли;
		
		// Работаем с ФИО бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение)) Тогда
			мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ИНН бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННБухгалтер)) Тогда
			Для НомЯчейки = 1 По 12 Цикл
				ЦифраИНН = Сред(ИННБух, НомЯчейки, 1);
				мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
			КонецЦикла;
			мИННБухгалтер = ИННБух;
		КонецЕсли;
		
		// Работаем с ОГРН
		Если (ТипНП <> 3) И ((мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргОГРН))) Тогда
			ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, 13, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 13, ОГРН);
			мОргОГРН = ОГРН;
		КонецЕсли;
		
		// Работаем с ОКАТО, значение мКодОКАТО предварительно считали из квадратиков
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодОКАТО)) Тогда
			ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(ОКАТО, 11, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО", 11, ОКАТО);
			мОргКодОКАТО = ОКАТО;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодИМНС)) Тогда
			КодНО = РегламентированнаяОтчетность.ДополнитьСтроку(КодНО, 4, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодИМНС", 4, КодНО);
			мОргКодИМНС = КодНО;
		КонецЕсли;
		
		// Работаем с наименованием инспекции
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргИМНС.Значение)) Тогда
			мТитульный.Области.ОргИМНС.Значение = НаимНО;
		КонецЕсли;
		
		// Работаем с ФИО уполномоченного представителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргУП.Значение)) Тогда
			мТитульный.Области.ОргУП.Значение = ФИОУпПред;
		КонецЕсли;
		
		// Работаем с ИНН уполномоченного представителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННУпПред)) Тогда
			ИННУпПред = РегламентированнаяОтчетность.ДополнитьСтроку(ИННУпПред, 12, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП", 12, ИННУпПред);
			мИННУпПред = ИННУпПред;
		КонецЕсли;
		
		// Заполним даты формирования декларации (подписи)
		ЗаполнитьДатуВЯчейках();
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЦветом
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено)

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	Если ТипНП = 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВПрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП <> 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЧП", мВПрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЦветом

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено)

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

			Если Операция = "Очистить" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЧП"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;
	//НазванияЯчеекОтносящихсяКЮЛ.Добавить("ОГРН1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Составная");

	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг2" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг5" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг6" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");

	НазванияЯчеекОтносящихсяКЧП = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг3" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг4" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг7" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);


	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЧП;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЧП" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЧП;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда
				СвойстваГрупповыхЗначений(ПоказательСтр, Комманда       ,                   , Страница);
				СвойстваГрупповыхЗначений(ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);

				Если Очищать Тогда
					СвойстваГрупповыхЗначений(ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Авансы по ЕСН: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	//мРаздел1.Области.РазмерностьПрописью.Текст       = РазмерностьПрописьюТекст;
	//мРаздел2.Области.РазмерностьПрописью.Текст       = РазмерностьПрописьюТекст;
	//мПриложенияАБ.Области.РазмерностьПрописью.Текст  = РазмерностьПрописьюТекст;
	//мПриложенияВГ.Области.РазмерностьПрописью.Текст  = РазмерностьПрописьюТекст;
	//мПриложенияВГ.Области.РазмерностьПрописью1.Текст = РазмерностьПрописьюТекст;
	//мПриложениеД.Области.РазмерностьПрописью.Текст   = РазмерностьПрописьюТекст;
	//мПриложениеЕ.Области.РазмерностьПрописью.Текст   = РазмерностьПрописьюТекст;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	НомераСтрокиНоваяОбласть.Текст = Строка(НовыйПорядковыйНомер) + ".";
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				
				НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				НовыйПорядковыйНомер     = "";
				
				Если Не ПустаяСтрока(ПоследнийНомер) Тогда
					НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				Иначе
					Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
						ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
						НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
					КонецЕсли;
				КонецЕсли;

				НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Создает дополнительную страницу многостраничного раздела формы.
//
Процедура ВставитьДополнительнуюСтраницу()
	Перем ТаблицаСтраницРаздела;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			// формируем представление дополнительной страницы
			ФИОинвалида = мРаздел3.Области.П000030001003.Значение;

			Если Не ПустаяСтрока(ФИОинвалида) Тогда
				ЗагТекущейСтраницыПанели = ФИОинвалида;
			Иначе
				ЗагТекущейСтраницыПанели = "Новая страница";
			КонецЕсли;

			СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
		КонецЕсли;

		СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		// очищаем редактируемые ячейки нового табличного поля
		ОчиститьТабличноеПоле(ТекТабличноеПоле);

		// Выполняем расчет показателей добавленной страницы
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;
	КонецЕсли;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// Удаляет текущую страницу многостраничного раздела формы.
//
Процедура УдалитьДополнительнуюСтраницу()
	Перем ТаблицаСтраницРаздела;
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(ТекТабличноеПоле);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(ИмяТекущейСтраницыПанели);
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;
	КонецЕсли;

	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если Не ТаблицаСтраницРаздела.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	//
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	ФИО_работника_инвалида =       ТекТабличноеПоле.Области.П000030001003.Значение;

	СтрТаблицаСтраницы =            ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		СтрТаблицаСтраницы.Данные = СтруктураДанныхТекущейТаблицы;

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда

			// формимруем представление дополнительной страницы 
			Если Не ПустаяСтрока(ФИО_работника_инвалида) Тогда
				ЗагТекущейСтраницыПанели = ФИО_работника_инвалида;
			Иначе
				ЗагТекущейСтраницыПанели = "Новая страница";
			КонецЕсли;
			
			СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
		КонецЕсли;
	КонецЕсли;
	//
	// Данные текущей страницы сохранены.

	ФормаВыбораДопСтраницы = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаСпискаДопСтраниц", ЭтаФорма, "дляПереходаНаСтраницу");

	Если ФормаВыбораДопСтраницы.Открыта() Тогда
		ФормаВыбораДопСтраницы.Активизировать();
		Если Вопрос("Предыдущая операция показа списка страниц не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаВыбораДопСтраницы.Закрыть();
		КонецЕсли;
	КонецЕсли;

	ФормаВыбораДопСтраницы.НачальноеЗначениеВыбора = ТаблицаСтраницРаздела;

	ВыбранноеЗначение = ФормаВыбораДопСтраницы.ОткрытьМодально();
	Если ВыбранноеЗначение <> Неопределено Тогда

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;

		ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
		ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		ИндексВыбСтраницы     = ИндексТекСтраницы;
		
		ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();

		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		// отображаем данные следующей страницы
		СтруктураДанныхВыбСтраницы = ВыбСтраницаРаздела.Данные;

		Для Каждого Элемент Из СтруктураДанныхВыбСтраницы Цикл
			ИмяПоказателя      = Элемент.Ключ;
			ЗначениеПоказателя = Элемент.Значение;

			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;

		Расчет(ИмяТекущейСтраницыПанели);

		ТекущийЭлемент = ТекТабличноеПоле;

		мСтруктураМногостраничныхРазделов.Вставить(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела);
		ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели, Истина);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя) 

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;


	// Далее выясним, есть ли добавленные в многостраничный раздел дополнительные страницы.
	// При наличии таких страниц удаляем их.
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Для каждого СтрокаТаблицы Из ТаблицаТекущейСтраницы Цикл

			Если СтрокаТаблицы.АктивнаяСтраница Тогда
				// данные активной страницы былы очищены ранее
				Продолжить;
			КонецЕсли;

			// удаляем дополнительную страницу
			ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);

		КонецЦикла;
	КонецЦикла;

	// Обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();


	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.КПП                        = КПП;

	мВариант = Вариант;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ?(мСчетчикСтраниц = Неопределено, Ложь, мСчетчикСтраниц));

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вставляем среднесписочную численность работников по месяцам
	СписокСохранения.Вставить("Численность1Месяц", СредняяЧисленность1Месяц);
	СписокСохранения.Вставить("Численность2Месяц", СредняяЧисленность2Месяц);
	СписокСохранения.Вставить("Численность3Месяц", СредняяЧисленность3Месяц);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	мСчетчикСтраниц = ?(мСчетчикСтраниц = Неопределено, Ложь, мСчетчикСтраниц);
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	Численность1Месяц = 0;
	Численность2Месяц = 0;
	Численность3Месяц = 0;

	// восстанавливаем среднесписочную численность работников по месяцам
	Если СписокСохранения.Свойство("Численность1Месяц", Численность1Месяц) Тогда
		СредняяЧисленность1Месяц = Численность1Месяц;
	КонецЕсли;
	Если СписокСохранения.Свойство("Численность2Месяц", Численность2Месяц) Тогда
		СредняяЧисленность2Месяц = Численность2Месяц;
	КонецЕсли;
	Если СписокСохранения.Свойство("Численность3Месяц", Численность3Месяц) Тогда
		СредняяЧисленность3Месяц = Численность3Месяц;
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура заполняет суммы авановых платежей в ячейках
// поля табличного документа на странице "Раздел 1" формы.
//
Процедура ЗаполнитьСуммы_в_Квадратах()

	// Убираем в квадратах символ '-' в случае нулевой суммы налога.
	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");

	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	СтрП000010003000_ФБ    = Формат(П000010003000_ФБ,    СтрокаФорматаЯчейки);
	СтрП000010004000_ФБ    = Формат(П000010004000_ФБ,    СтрокаФорматаЯчейки);
	СтрП000010005000_ФБ    = Формат(П000010005000_ФБ,    СтрокаФорматаЯчейки);
	   
	СтрП000010003000_ФСС   = Формат(П000010003000_ФСС,   СтрокаФорматаЯчейки);
	СтрП000010004000_ФСС   = Формат(П000010004000_ФСС,   СтрокаФорматаЯчейки);
	СтрП000010005000_ФСС   = Формат(П000010005000_ФСС,   СтрокаФорматаЯчейки);

	СтрП000010003000_ФФОМС = Формат(П000010003000_ФФОМС, СтрокаФорматаЯчейки);
	СтрП000010004000_ФФОМС = Формат(П000010004000_ФФОМС, СтрокаФорматаЯчейки);
	СтрП000010005000_ФФОМС = Формат(П000010005000_ФФОМС, СтрокаФорматаЯчейки);

	СтрП000010003000_ТФОМС = Формат(П000010003000_ТФОМС, СтрокаФорматаЯчейки);
	СтрП000010004000_ТФОМС = Формат(П000010004000_ТФОМС, СтрокаФорматаЯчейки);
	СтрП000010005000_ТФОМС = Формат(П000010005000_ТФОМС, СтрокаФорматаЯчейки);

	// Вставляем лидирующие пробелы для отображения чисел в ячейках
	// с выравниванием к правому краю
	СтрП000010003000_ФБ    = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_ФБ,    15, " ");
	СтрП000010004000_ФБ    = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_ФБ,    15, " ");
	СтрП000010005000_ФБ    = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_ФБ,    15, " ");
	   
	СтрП000010003000_ФСС   = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_ФСС,   15, " ");
	СтрП000010004000_ФСС   = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_ФСС,   15, " ");
	СтрП000010005000_ФСС   = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_ФСС,   15, " ");

	СтрП000010003000_ФФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_ФФОМС, 15, " ");
	СтрП000010004000_ФФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_ФФОМС, 15, " ");
	СтрП000010005000_ФФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_ФФОМС, 15, " ");

	СтрП000010003000_ТФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010003000_ТФОМС, 15, " ");
	СтрП000010004000_ТФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010004000_ТФОМС, 15, " ");
	СтрП000010005000_ТФОМС = РегламентированнаяОтчетность.ДополнитьСтроку(СтрП000010005000_ТФОМС, 15, " ");


	// Выводим суммы авансовых платежей в квадратах
	Для Ном = 1 По 15 Цикл

		мРаздел1.Области["СумНалогМ1ФБ"    + Ном].Значение = Сред(СтрП000010003000_ФБ,    Ном, 1);
		мРаздел1.Области["СумНалогМ2ФБ"    + Ном].Значение = Сред(СтрП000010004000_ФБ,    Ном, 1);
		мРаздел1.Области["СумНалогМ3ФБ"    + Ном].Значение = Сред(СтрП000010005000_ФБ,    Ном, 1);

		мРаздел1.Области["СумНалогМ1ФСС"   + Ном].Значение = Сред(СтрП000010003000_ФСС,   Ном, 1);
		мРаздел1.Области["СумНалогМ2ФСС"   + Ном].Значение = Сред(СтрП000010004000_ФСС,   Ном, 1);
		мРаздел1.Области["СумНалогМ3ФСС"   + Ном].Значение = Сред(СтрП000010005000_ФСС,   Ном, 1);

		мРаздел1.Области["СумНалогМ1ФФОМС" + Ном].Значение = Сред(СтрП000010003000_ФФОМС, Ном, 1);
		мРаздел1.Области["СумНалогМ2ФФОМС" + Ном].Значение = Сред(СтрП000010004000_ФФОМС, Ном, 1);
		мРаздел1.Области["СумНалогМ3ФФОМС" + Ном].Значение = Сред(СтрП000010005000_ФФОМС, Ном, 1);

		мРаздел1.Области["СумНалогМ1ТФОМС" + Ном].Значение = Сред(СтрП000010003000_ТФОМС, Ном, 1);
		мРаздел1.Области["СумНалогМ2ТФОМС" + Ном].Значение = Сред(СтрП000010004000_ТФОМС, Ном, 1);
		мРаздел1.Области["СумНалогМ3ТФОМС" + Ном].Значение = Сред(СтрП000010005000_ТФОМС, Ном, 1);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСуммы_в_Квадратах()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "")

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Суммы авансовых платежей, подлежащие уплате в ФБ
		П000010003000_ФБ    = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020062003.Значение);
		П000010004000_ФБ    = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020063003.Значение);
		П000010005000_ФБ    = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020064003.Значение);

		// Суммы авансовых платежей, подлежащие уплате в ФСС РФ
		П000010003000_ФСС   = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020092004.Значение);
		П000010004000_ФСС   = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020093004.Значение);
		П000010005000_ФСС   = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020094004.Значение);

		// Суммы авансовых платежей, подлежащие уплате в ФФОМС
		П000010003000_ФФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020062005.Значение);
		П000010004000_ФФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020063005.Значение);
		П000010005000_ФФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020064005.Значение);

		// Суммы авансовых платежей, подлежащие уплате в ТФОМС
		П000010003000_ТФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020062006.Значение);
		П000010004000_ТФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020063006.Значение);
		П000010005000_ТФОМС = ОкруглитьЧислоПоФормату( мРаздел2.Области.П000020064006.Значение);

		// Заполняем сумму авансовых платежей в квадратах
		ЗаполнитьСуммы_в_Квадратах();

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2

		// строка 0110
		мРаздел2.Области.П000020011003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);

		мРаздел2.Области.П000020011004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014004.Значение);

		мРаздел2.Области.П000020011005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014005.Значение);

		мРаздел2.Области.П000020011006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014006.Значение);

		// строка 0210
		мРаздел2.Области.П000020021003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024003.Значение);

		мРаздел2.Области.П000020021004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024004.Значение);

		мРаздел2.Области.П000020021005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024005.Значение);

		мРаздел2.Области.П000020021006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024006.Значение);

		// строка 0310
		мРаздел2.Области.П000020031003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение);

		// строка 0410
		мРаздел2.Области.П000020041003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044003.Значение);

		мРаздел2.Области.П000020041004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044004.Значение);

		мРаздел2.Области.П000020041005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044005.Значение);

		мРаздел2.Области.П000020041006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044006.Значение);

		// строка 0510
		мРаздел2.Области.П000020051003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054003.Значение);

		мРаздел2.Области.П000020051004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054004.Значение);

		мРаздел2.Области.П000020051005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054005.Значение);

		мРаздел2.Области.П000020051006.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020052006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020053006.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020054006.Значение);

		// строки 0600 - 0640
		Для Н =0 По 4 Цикл

			мРаздел2.Области["П00002006"+ Н +"003"].Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002002" + Н + "003"].Значение)
			                                                 -       ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002003" + Н + "003"].Значение)
			                                                 -       ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002005" + Н + "003"].Значение),
			                                                         0 );

			мРаздел2.Области["П00002006"+ Н +"004"].Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002002" + Н + "004"].Значение)
			                                                 -       ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002005" + Н + "004"].Значение),
			                                                         0 );

			мРаздел2.Области["П00002006"+ Н +"005"].Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002002" + Н + "005"].Значение)
			                                                 -       ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002005" + Н + "005"].Значение),
			                                                         0 );

			мРаздел2.Области["П00002006"+ Н +"006"].Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002002" + Н + "006"].Значение)
			                                                 -       ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002005" + Н + "006"].Значение),
			                                                         0 );

		КонецЦикла;

		// строка 0710
		мРаздел2.Области.П000020071004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020072004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020073004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020074004.Значение);

		// строка 0810
		мРаздел2.Области.П000020081004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020082004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020083004.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020084004.Значение);

		// строки 0900 - 0940
		Для Н = 0 По 4 Цикл
			мРаздел2.Области["П00002009"+ Н +"004"].Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002006" + Н + "004"].Значение)
			                                                 - ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002007" + Н + "004"].Значение)
			                                                 + ОкруглитьЧислоПоФормату(мРаздел2.Области["П00002008" + Н + "004"].Значение);
		КонецЦикла;

		// Вычисляем показатели Раздела 1 отчета
		Расчет("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.1

		// Строка 020
		мРаздел2_1.Области.П000210002003.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002103.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002203.Значение);
		мРаздел2_1.Области.П000210002004.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002104.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002204.Значение);
		мРаздел2_1.Области.П000210002005.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002105.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002205.Значение);
		мРаздел2_1.Области.П000210002006.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002106.Значение);
		мРаздел2_1.Области.П000210002007.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002107.Значение);
		мРаздел2_1.Области.П000210002008.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002108.Значение);

		// Строка 030
		мРаздел2_1.Области.П000210003003.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003103.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003203.Значение);
		мРаздел2_1.Области.П000210003004.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003104.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003204.Значение);
		мРаздел2_1.Области.П000210003005.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003105.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003205.Значение);
		мРаздел2_1.Области.П000210003006.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003106.Значение);
		мРаздел2_1.Области.П000210003007.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003107.Значение);
		мРаздел2_1.Области.П000210003008.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003108.Значение);

		// Строка 040
		мРаздел2_1.Области.П000210004003.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004103.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004203.Значение);
		мРаздел2_1.Области.П000210004004.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004104.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004204.Значение);
		мРаздел2_1.Области.П000210004005.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004105.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004205.Значение);
		мРаздел2_1.Области.П000210004006.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004106.Значение);
		мРаздел2_1.Области.П000210004007.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004107.Значение);
		мРаздел2_1.Области.П000210004008.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004108.Значение);

		// Строка 050
		мРаздел2_1.Области.П000210005003.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001003.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002003.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003003.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004003.Значение);
		мРаздел2_1.Области.П000210005004.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001004.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002004.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003004.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004004.Значение);
		мРаздел2_1.Области.П000210005005.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001005.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002005.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003005.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004005.Значение);
		мРаздел2_1.Области.П000210005006.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001006.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002006.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003006.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004006.Значение);
		мРаздел2_1.Области.П000210005007.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001007.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002007.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003007.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004007.Значение);
		мРаздел2_1.Области.П000210005008.Значение = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210001008.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210002008.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210003008.Значение)
		                                          + ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000210004008.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.2

		// строка 060
		мРаздел2_2.Области.П000220006003.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002003.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220003003.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005003.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006004.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002004.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005004.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006005.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002005.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005005.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006006.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002006.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005006.Значение),
		                                                  0 );

		// строка 061
		мРаздел2_2.Области.П000220006103.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002103.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220003103.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005103.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006104.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002104.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005104.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006105.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002105.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005105.Значение),
		                                                  0 );

		мРаздел2_2.Области.П000220006106.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220002106.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220005106.Значение),
		                                                  0 );

		// строка 090
		мРаздел2_2.Области.П000220009004.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220008004.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220007004.Значение)
		                                          +       мРаздел2_2.Области.П000220006004.Значение,
		                                                  0 );

		// строка 091
		мРаздел2_2.Области.П000220009104.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220008104.Значение)
		                                          -       ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000220007104.Значение)
		                                          +       мРаздел2_2.Области.П000220006104.Значение,
		                                                  0 );

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 2.3

		// Строка 010
		// Среднюю численность работников по месяцам заполняем
		// по значениям соответствующих полей ввода из диалога формы отчета.
		мРаздел2_3.Области.П000230001003.Значение = СредняяЧисленность1Месяц;
		мРаздел2_3.Области.П000230001004.Значение = СредняяЧисленность2Месяц;
		мРаздел2_3.Области.П000230001005.Значение = СредняяЧисленность3Месяц;

		// Строка 030
		мРаздел2_3.Области.П000230003003.Значение = Окр( ? (мРаздел2_3.Области.П000230001003.Значение > 30, 
		                                                    мРаздел2_3.Области.П000230001003.Значение * 10/100,
		                                                    мРаздел2_3.Области.П000230001003.Значение * 30/100),
		                                                 0, 1 );

		мРаздел2_3.Области.П000230003004.Значение = Окр( ? (мРаздел2_3.Области.П000230001004.Значение > 30,
		                                                    мРаздел2_3.Области.П000230001004.Значение * 10/100,
		                                                    мРаздел2_3.Области.П000230001004.Значение * 30/100),
		                                                 0, 1 );

		мРаздел2_3.Области.П000230003005.Значение = Окр( ? (мРаздел2_3.Области.П000230001005.Значение > 30,
		                                                    мРаздел2_3.Области.П000230001005.Значение * 10/100,
		                                                    мРаздел2_3.Области.П000230001005.Значение * 30/100),
		                                                 0, 1 );

		// Строка 050 - Налоговая база без учета выплат работникам, имеющим наибольшие по размеру доходы 
		мРаздел2_3.Области.П000230005003.Значение = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230002003.Значение)
		                                          - ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230004003.Значение);
		мРаздел2_3.Области.П000230005004.Значение = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230002004.Значение)
		                                          - ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230004004.Значение);
		мРаздел2_3.Области.П000230005005.Значение = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230002005.Значение)
		                                          - ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000230004005.Значение);

		// Строка 060 - Налоговая база в среднем на одного работника
		ЧисленностьКРасчету = мРаздел2_3.Области.П000230001003.Значение - мРаздел2_3.Области.П000230003003.Значение;
		мРаздел2_3.Области.П000230006003.Значение = ОкруглитьЧислоПоФормату(?(ЧисленностьКРасчету = 0 ,0 ,мРаздел2_3.Области.П000230005003.Значение / ЧисленностьКРасчету ));

		ЧисленностьКРасчету = мРаздел2_3.Области.П000230001004.Значение - мРаздел2_3.Области.П000230003004.Значение;
		мРаздел2_3.Области.П000230006004.Значение = ОкруглитьЧислоПоФормату(?(ЧисленностьКРасчету = 0 ,0 ,мРаздел2_3.Области.П000230005004.Значение / ЧисленностьКРасчету ));

		ЧисленностьКРасчету = мРаздел2_3.Области.П000230001005.Значение - мРаздел2_3.Области.П000230003005.Значение;
		мРаздел2_3.Области.П000230006005.Значение = ОкруглитьЧислоПоФормату(?(ЧисленностьКРасчету = 0 ,0 ,мРаздел2_3.Области.П000230005005.Значение / ЧисленностьКРасчету ));

		// Строка 080 - Налоговая база в среднем на одного работника, приходящаяся на один месяц
		КолИстекшихМесяцев = мРаздел2_3.Области.П000230007003.Значение;
		мРаздел2_3.Области.П000230008003.Значение = ОкруглитьЧислоПоФормату(?(КолИстекшихМесяцев = 0 ,0 ,мРаздел2_3.Области.П000230006003.Значение / КолИстекшихМесяцев ));

		КолИстекшихМесяцев = мРаздел2_3.Области.П000230007004.Значение;
		мРаздел2_3.Области.П000230008004.Значение = ОкруглитьЧислоПоФормату(?(КолИстекшихМесяцев = 0 ,0 ,мРаздел2_3.Области.П000230006004.Значение / КолИстекшихМесяцев ));

		КолИстекшихМесяцев = мРаздел2_3.Области.П000230007005.Значение;
		мРаздел2_3.Области.П000230008005.Значение = ОкруглитьЧислоПоФормату(?(КолИстекшихМесяцев = 0 ,0 ,мРаздел2_3.Области.П000230006005.Значение / КолИстекшихМесяцев ));

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 3

		// Строка 070
		мРаздел3.Области.П000030007003.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030008003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009003.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010003.Значение);

		// Вычисляем показатели Раздела 3.1 отчета
		Расчет("Раздел3_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 3.1

		// стоимость всех показетелей раздела 3.1 собирается из аналогичных показателей страниц раздела 3
		мРаздел3_1.Области.П000310011003.Значение = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П000030006003"));
		мРаздел3_1.Области.П000310012003.Значение = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П000030007003"));
		мРаздел3_1.Области.П000310013003.Значение = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П000030008003"));
		мРаздел3_1.Области.П000310014003.Значение = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П000030009003"));
		мРаздел3_1.Области.П000310015003.Значение = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П000030010003"));

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда

		// ЗАПОЛНЯЕМ РАЗДЕЛ 3.2

		мРаздел3_2.Области.П000320013003.Значение = ? ( мРаздел3_2.Области.П000320011003.Значение <> 0, 
		     (мРаздел3_2.Области.П000320012003.Значение / мРаздел3_2.Области.П000320011003.Значение) * 100, 0 );

		мРаздел3_2.Области.П000320013004.Значение = ? ( мРаздел3_2.Области.П000320011004.Значение <> 0,
		     (мРаздел3_2.Области.П000320012004.Значение / мРаздел3_2.Области.П000320011004.Значение) * 100, 0 );

		мРаздел3_2.Области.П000320013005.Значение = ? ( мРаздел3_2.Области.П000320011005.Значение <> 0,
		     (мРаздел3_2.Области.П000320012005.Значение / мРаздел3_2.Области.П000320011005.Значение) * 100, 0 );

		// строка 160
		мРаздел3_2.Области.П000320016003.Значение = ? (мРаздел3_2.Области.П000320014003.Значение <> 0,
		     (мРаздел3_2.Области.П000320015003.Значение / мРаздел3_2.Области.П000320014003.Значение) * 100, 0 );

		мРаздел3_2.Области.П000320016004.Значение = ? (мРаздел3_2.Области.П000320014004.Значение <> 0,
		     (мРаздел3_2.Области.П000320015004.Значение / мРаздел3_2.Области.П000320014004.Значение) * 100, 0 );

		мРаздел3_2.Области.П000320016005.Значение = ? (мРаздел3_2.Области.П000320014005.Значение <> 0,
		     (мРаздел3_2.Области.П000320015005.Значение / мРаздел3_2.Области.П000320014005.Значение) * 100, 0 );
		
		// строка 190
		мРаздел3_2.Области.П000320019003.Значение = ? (ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017003.Значение) <> 0,
		                      ( ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320018003.Значение)
		                      / ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017003.Значение) ) * 100, 0 );

		мРаздел3_2.Области.П000320019004.Значение = ? (ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017004.Значение) <> 0,
		                      ( ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320018004.Значение)
		                      / ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017004.Значение) ) * 100, 0 );

		мРаздел3_2.Области.П000320019005.Значение = ? (ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017005.Значение) <> 0,
		                      ( ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320018005.Значение)
		                      / ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000320017005.Значение) ) * 100, 0 );

	Иначе
		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы

		Расчет("Раздел3_2");
		Расчет("Раздел3");    // Расчет показателей раздела 3.1 вызывается в конце данного расчета.
		Расчет("Раздел2_3");
		Расчет("Раздел2_2");
		Расчет("Раздел2_1");
		Расчет("Раздел2");    // Расчет показателей раздела 1   вызывается в конце данного расчета.

	КонецЕсли;

КонецПроцедуры // Расчет()


// ----------------------------------------------------------------------------------------------------------
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ


Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	
КонецПроцедуры

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// На основе имени показетяля раздела 2 находит функционально соответствующее имя показателя в разделе 2_2 
Функция КонвертироватьИмяПоказетеляРаздела2ВИмяПоказетеляРаздела2_2(ИмяПоказателяРаздела2, ПоОрганизацииВЦелом)
	
	// выделим код строки раздела 2
	КодСтрокиРаздела2 = Сред(ИмяПоказателяРаздела2, 8,4);			
	
	// выделим номер колонки отчета - 2 последних цифры имени показателя
	КодКолонкиОтчета = Прав(ИмяПоказателяРаздела2, 2);			
	
	// Если код строки не итоговый за год (т.е. 0100, 0200, 0300 ...), то данный показатель отражать не будем
	Если Сред(КодСтрокиРаздела2,3,1) <> "0" Тогда
		Возврат "";
	КонецЕсли; 
	
	// преобразуем код строки раздела 2 в код строки раздела 2.2 (он состоит из 3 цифр, соответствующих первым 2 цифрам кода раздела 2 + "0" или "1", в зависимости от параметра "ПоВсейОрганизации")
	Если ПоОрганизацииВЦелом Тогда
		КодСтрокиРаздела2_2 = Лев(КодСтрокиРаздела2,2) +"0";// строки в целом по организации: 010, 020, 030
	Иначе
		КодСтрокиРаздела2_2 = Лев(КодСтрокиРаздела2,2) + "1";// строки по подразделениям: 011, 021, 031
	КонецЕсли; 
	
	Возврат "П0002200" + КодСтрокиРаздела2_2 + КодКолонкиОтчета;

КонецФункции 

// Выводит данные выборки, имена полей которой соответствуют разделу 2, в табличное поле раздела 2_2
Функция ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, ПоОрганизацииВЦелом)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из РезультатЗапроса.Колонки  Цикл
			ИмяПоказателяРаздела2 = Колонка.Имя;
			ИмяПоказателяРазела2_2 = КонвертироватьИмяПоказетеляРаздела2ВИмяПоказетеляРаздела2_2(ИмяПоказателяРаздела2, ПоОрганизацииВЦелом);
			Если НЕ ПустаяСтрока(ИмяПоказателяРазела2_2) Тогда
				УстановитьЗначениеПоказателя(ИмяПоказателяРазела2_2, Выборка[ИмяПоказателяРаздела2]);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
		
КонецФункции 
 
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР",         Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод", Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодДоходаПособияЗаСчетФСС", Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
	Запрос.УстановитьПараметр("КодДоходаВыплатыЗаСчетПрибыли", Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли);
	Запрос.УстановитьПараметр("КодДоходаНеОблагаетсяЦеликом", Справочники.ДоходыЕСН.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("КодДоходаДоговораГПХ", Справочники.ДоходыЕСН.ДоговораГПХ);
	Запрос.УстановитьПараметр("КодДоходаДоговораАвторские", Справочники.ДоходыЕСН.ДоговораАвторские);
	Запрос.УстановитьПараметр("Счет69_01", ПланыСчетов.Хозрасчетный.ФСС);
	
	ГоловнаяОрганизация	= Организация.ГоловнаяОрганизация;
	Если НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = Организация;
	КонецЕсли; 
	
	СписокВсехОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехОбособленныхПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
	
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	// ДоходыЕСНПоСпискуСтруктурныхПодразделенийТекст
	// Описание: собирает все зарегистрированные доходы ЕСН по физлицам, месяцам и кодам дохода.
	
	ДоходыЕСНПоСпискуСтруктурныхПодразделенийТекст = "ВЫБРАТЬ
	                                                 |	ЕСНСведенияОДоходах.ФизЛицо,
	                                                 |	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	                                                 |	ЕСНСведенияОДоходах.КодДоходаЕСН,
	                                                 |	ЕСНСведенияОДоходах.Результат,
	                                                 |	ЕСНСведенияОДоходах.Скидка
	                                                 |ИЗ
	                                                 |	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	                                                 |
	                                                 |ГДЕ
	                                                 |	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	                                                 |	(ЕСНСведенияОДоходах.ОблагаетсяЕНВД = ЛОЖЬ) И
	                                                 |	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)";
	
	
	
    // ДоходыПоМесяцамКодамТекст
	// Таблица доходов ЕСН по Месяцам налогового периода и кодам дохода
    // Поля:
	//		Месяц
	//		КодДоходаЕСН
	//		Результат
	//		Скидка
	// Описание:
	// 	Выбираем зарегистрированные доходы из ЕСНОсновныеНачисления ,ЕСНДополнительныеНачисления и ЕСНСведенияОДоходах 	
	//  Запрос выполняется для списка обособленных подразделений.
	
	ДоходыПоМесяцамКодамТекст = "ВЫБРАТЬ
	                           |	ЕСННачисления.Месяц,
	                           |	ЕСННачисления.КодДоходаЕСН КАК КодДоходаЕСН,
	                           |	СУММА(ЕСННачисления.Результат) КАК Результат,
	                           |	СУММА(ЕСННачисления.Скидка) КАК Скидка
	                           |ИЗ
	                           |	( " + ДоходыЕСНПоСпискуСтруктурныхПодразделенийТекст + " ) КАК ЕСННачисления
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	ЕСННачисления.Месяц,
	                           |	ЕСННачисления.КодДоходаЕСН";
							   
							   
    //НалоговыеБазыРаздела2Текст
	// Описание:
	//  Выбираются данные из регистров доходов ЕСН , необходимые для заполнения показетелей разделов 2 и 2.2.
	//	Запрос выполняется для списка обособленных подразделений.
							   
   НалоговыеБазыРаздела2Текст = "
	|ВЫБРАТЬ 
	// Выборка данных для строки 0100   
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020010003,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН.ВходитВБазуФСС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020010004,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020010005,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020010006,
	// Строка 0120 - налоговая база за 1 месяц
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц1 И Доходы.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020012003,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц1 И Доходы.КодДоходаЕСН.ВходитВБазуФСС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020012004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц1 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020012005,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц1 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020012006,
	// Строка 0130 - налоговая база за 2 месяц
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц2 И Доходы.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020013003,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц2 И Доходы.КодДоходаЕСН.ВходитВБазуФСС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020013004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц2 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020013005,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц2 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020013006,
	// Строка 0140 - налоговая база за 3 месяц
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц3 И Доходы.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020014003,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц3 И Доходы.КодДоходаЕСН.ВходитВБазуФСС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020014004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц3 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020014005,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц3 И Доходы.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА Доходы.Результат - Доходы.Скидка ИНАЧЕ 0 КОНЕЦ) КАК П000020014006,
	// Строки 0700, 0720, 0730, 0740 - расходы на цели социального страхования за год и по месяцам отчетного периода 
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020070004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц1 И Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020072004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц2 И Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020073004,
	|	СУММА(ВЫБОР КОГДА Доходы.Месяц = &Месяц3 И Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020074004,
	// Строка 1000 - справочно выплаты за счет прибыли за год
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаВыплатыЗаСчетПрибыли ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020100003,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаВыплатыЗаСчетПрибыли ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020100004,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаВыплатыЗаСчетПрибыли ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020100005,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаВыплатыЗаСчетПрибыли ТОГДА Доходы.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000020100006,
	// Строка 1100 - справочно суммы не подлежащие налогообложению по ст. 238 НК РФ
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ИЛИ Доходы.КодДоходаЕСН = &КодДоходаНеОблагаетсяЦеликом ТОГДА Доходы.Результат ИНАЧЕ Доходы.Скидка КОНЕЦ) КАК П000020110003,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ИЛИ Доходы.КодДоходаЕСН = &КодДоходаНеОблагаетсяЦеликом ИЛИ Доходы.КодДоходаЕСН = &КодДоходаДоговораГПХ ИЛИ Доходы.КодДоходаЕСН = &КодДоходаДоговораАвторские ТОГДА Доходы.Результат ИНАЧЕ Доходы.Скидка КОНЕЦ) КАК П000020110004,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ИЛИ Доходы.КодДоходаЕСН = &КодДоходаНеОблагаетсяЦеликом ТОГДА Доходы.Результат ИНАЧЕ Доходы.Скидка КОНЕЦ) КАК П000020110005,
	|	СУММА(ВЫБОР КОГДА Доходы.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС ИЛИ Доходы.КодДоходаЕСН = &КодДоходаНеОблагаетсяЦеликом ТОГДА Доходы.Результат ИНАЧЕ Доходы.Скидка КОНЕЦ) КАК П000020110006
	
	|	ИЗ ( " + ДоходыПоМесяцамКодамТекст + " ) КАК Доходы
	|";							   
							   
	
	// ИсчисленныйНалогПоМесяцам
	// Описание:
	//	Ссуммирует исчисленные налоги по месяцам налогового периода 
	
	ИсчисленныйНалогПоМесяцам = "ВЫБРАТЬ
	                            |	МЕСЯЦ(ЕСНИсчисленный.Период) КАК Месяц,
	                            |	СУММА(ЕСНИсчисленный.ФедеральныйБюджет) КАК ФБ,
	                            |	СУММА(ЕСНИсчисленный.ФСС) КАК ФСС,
	                            |	СУММА(ЕСНИсчисленный.ФФОМС) КАК ФФОМС,
	                            |	СУММА(ЕСНИсчисленный.ТФОМС) КАК ТФОМС,
	                            |	СУММА(ЕСНИсчисленный.ПФРНакопительная + ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРНакопительнаяЕНВД - ЕСНИсчисленный.ПФРСтраховаяЕНВД) КАК ЛьготаПоВзносамВПФР,
	                            |	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) КАК ПримененнаяЛьготаФБ,
	                            |	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) КАК ПримененнаяЛьготаФСС,
	                            |	СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФОМС) КАК ПримененнаяЛьготаФОМС
	                            |ИЗ
	                            |	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	                            |
	                            |ГДЕ
	                            |	ЕСНИсчисленный.ОбособленноеПодразделение в (&СписокОбособленныхПодразделений) И
	                            |	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	МЕСЯЦ(ЕСНИсчисленный.Период)";
	
								
	//ИсчисленныеНалогиРаздела2Текст								
	// Описание:
	//  Выбираются данные из регистра ЕСНИсчисленный, необходимые для заполнения показетелей разделов 2 и 2.2.
	//	Запрос выполняется для списка обособленных подразделений.
	
	ИсчисленныеНалогиРаздела2Текст = "ВЫБРАТЬ
	//  Исчесленные налоги за год - строка 0200
	|	СУММА(Налоги.ФБ) КАК П000020020003,
	|	СУММА(Налоги.ФСС) КАК П000020020004,
	|	СУММА(Налоги.ФФОМС) КАК П000020020005,
	|	СУММА(Налоги.ТФОМС) КАК П000020020006,
	//  Исчесленные налоги за 1 месяц отчетного периода - строка 0230
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ФБ ИНАЧЕ 0 КОНЕЦ) КАК П000020022003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ФСС ИНАЧЕ 0 КОНЕЦ) КАК П000020022004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ФФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020022005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ТФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020022006,
	//  Исчесленные налоги за 2 месяц отчетного периода - строка 0230
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ФБ ИНАЧЕ 0 КОНЕЦ) КАК П000020023003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ФСС ИНАЧЕ 0 КОНЕЦ) КАК П000020023004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ФФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020023005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ТФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020023006,
	//  Исчесленные налоги за 3 месяц отчетного периода - строка 0240
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ФБ ИНАЧЕ 0 КОНЕЦ) КАК П000020024003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ФСС ИНАЧЕ 0 КОНЕЦ) КАК П000020024004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ФФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020024005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ТФОМС ИНАЧЕ 0 КОНЕЦ) КАК П000020024006,
	
	//  Налоговый вычет за год и по месяцам - строки 0300, 0320, 0330, 0340
	|	СУММА(Налоги.ЛьготаПоВзносамВПФР) КАК П000020030003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ЛьготаПоВзносамВПФР ИНАЧЕ 0 КОНЕЦ) КАК П000020032003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ЛьготаПоВзносамВПФР ИНАЧЕ 0 КОНЕЦ) КАК П000020033003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ЛьготаПоВзносамВПФР ИНАЧЕ 0 КОНЕЦ) КАК П000020034003,
	
	//  Налоговая льгота инвалидам за год  - строка 0400
	|	СУММА(Налоги.ПримененнаяЛьготаФБ) КАК П000020040003,
	|	СУММА(Налоги.ПримененнаяЛьготаФСС) КАК П000020040004,
	|	СУММА(Налоги.ПримененнаяЛьготаФОМС) КАК П000020040005,
	|	СУММА(Налоги.ПримененнаяЛьготаФОМС) КАК П000020040006,
	//  Налоговая льгота инвалидам за 1 месяц отчетного периода  - строка 0420
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) 	КАК П000020042003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФСС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020042004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020042005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020042006,
	//  Налоговая льгота инвалидам за 2 месяц отчетного периода  - строка 0430
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) 	КАК П000020043003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФСС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020043004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020043005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020043006,
	//  Налоговая льгота инвалидам за 3 месяц отчетного периода  - строка 0440
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) 	КАК П000020044003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФСС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020044004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020044005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФОМС ИНАЧЕ 0 КОНЕЦ) 	КАК П000020044006,
	
	//  Сумма налога с налоговой льготы инвалидам за год  - строка 0500
	|	СУММА(Налоги.ПримененнаяЛьготаФБ * (МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах - МаксСтавкиЕСН.ПФРСтраховая1вПроцентах - МаксСтавкиЕСН.ПФРНакопительная1вПроцентах) /100) КАК П000020050003,
	|	СУММА(Налоги.ПримененнаяЛьготаФСС * МаксСтавкиЕСН.ФССвПроцентах /100) КАК П000020050004,
	|	СУММА(Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ФФОМСвПроцентах /100) КАК П000020050005,
	|	СУММА(Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ТФОМСвПроцентах /100) КАК П000020050006,
	//  Сумма налога с налоговой льготы инвалидам за 1 месяц отчетного периода  - строка 0520
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФБ * (МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах - МаксСтавкиЕСН.ПФРСтраховая1вПроцентах - МаксСтавкиЕСН.ПФРНакопительная1вПроцентах) /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020052003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФСС * МаксСтавкиЕСН.ФССвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020052004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ФФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020052005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц1 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ТФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020052006,
	//  Сумма налога с налоговой льготы инвалидам за 2 месяц отчетного периода  - строка 0530
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФБ * (МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах - МаксСтавкиЕСН.ПФРСтраховая1вПроцентах - МаксСтавкиЕСН.ПФРНакопительная1вПроцентах) /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020053003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФСС * МаксСтавкиЕСН.ФССвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020053004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ФФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020053005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц2 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ТФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020053006,
	//  Сумма налога с налоговой льготы инвалидам за 3 месяц отчетного периода  - строка 0540
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФБ * (МаксСтавкиЕСН.ФедеральныйБюджетВПроцентах - МаксСтавкиЕСН.ПФРСтраховая1вПроцентах - МаксСтавкиЕСН.ПФРНакопительная1вПроцентах) /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020054003,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФСС * МаксСтавкиЕСН.ФССвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020054004,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ФФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020054005,
	|	СУММА(ВЫБОР КОГДА Месяц =&Месяц3 ТОГДА Налоги.ПримененнаяЛьготаФОМС * МаксСтавкиЕСН.ТФОМСвПроцентах /100 ИНАЧЕ 0 КОНЕЦ) КАК П000020054006
	
	|ИЗ
	|	(" + ИсчисленныйНалогПоМесяцам + ") КАК Налоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК МаксСтавкиЕСН
	|		ПО МаксСтавкиЕСН.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И МаксСтавкиЕСН.Год = &парамГод И МаксСтавкиЕСН.НомерСтрокиСтавок = 1
	| ";

	
	// НалоговыеБазыПоФизлицам 
	//	ФизЛицо 	 	- физическое лицо 
	//	БазаФедеральныйБюджет - налоговая база по ФБ
	//	БазаФСС - налоговая база по ФСС
	//	БазаФОМС - налоговая база по ФОМС
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН за вычетом скидок строго по заданной организации. 
	//	Данные нужны для раздела 2.1.
	
	НалоговыеБазыПоФизлицам = "ВЫБРАТЬ
	                          |	ЕСННачисления.ФизЛицо КАК ФизЛицо,
	                          |	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК БазаФедеральныйБюджет,
	                          |	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК БазаФСС,
	                          |	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФОМС ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК БазаФОМС
	                          |ИЗ
	                          |	(" + ДоходыЕСНПоСпискуСтруктурныхПодразделенийТекст + " ) КАК ЕСННачисления
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ЕСННачисления.ФизЛицо";
	
								 
	// НалоговаяБазаПоФизлицамПределам
	
	НалоговаяБазаПоФизлицамПределам = "
	|Выбрать 
	//	Строка 010 - Налоговые базы первого предела (до 100000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФедеральныйБюджет < 0 ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет		ИНАЧЕ 0 КОНЕЦ) КАК П000210001003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФСС < 0 							ТОГДА ДоходыПоФЛ.БазаФСС 					ИНАЧЕ 0 КОНЕЦ) КАК П000210001004, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФОМС < 0 							ТОГДА ДоходыПоФЛ.БазаФОМС					ИНАЧЕ 0 КОНЕЦ) КАК П000210001005,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФедеральныйБюджет < 0 ТОГДА 1	ИНАЧЕ 0 КОНЕЦ) КАК П000210001006, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФСС < 0 							ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210001007, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 1 или ДоходыПоФЛ.БазаФОМС < 0 							ТОГДА 1	ИНАЧЕ 0 КОНЕЦ) КАК П000210001008,
	//	Строки 021 и 022 - Налоговые базы второго предела (до 300000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2 ТОГДА СтавкиФедеральныйБюджет.СуммаДоходаС 	ИНАЧЕ 0 КОНЕЦ) КАК П000210002103, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 				ТОГДА СтавкиФСС.СуммаДоходаС 				ИНАЧЕ 0 КОНЕЦ) КАК П000210002104, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2 				ТОГДА СтавкиФОМС.СуммаДоходаС				ИНАЧЕ 0 КОНЕЦ) КАК П000210002105,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210002106, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 				ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210002107, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2 				ТОГДА 1	ИНАЧЕ 0 КОНЕЦ) КАК П000210002108,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 2 ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС	ИНАЧЕ 0 КОНЕЦ) КАК П000210002203, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 				ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210002204, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 2 				ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210002205,
	//	Строки 031 и 032 - Налоговые базы третьего предела (до 600000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3 ТОГДА СтавкиФедеральныйБюджет.СуммаДоходаС 	ИНАЧЕ 0 КОНЕЦ) КАК П000210003103, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 				ТОГДА СтавкиФСС.СуммаДоходаС 				ИНАЧЕ 0 КОНЕЦ) КАК П000210003104, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3 				ТОГДА СтавкиФОМС.СуммаДоходаС				ИНАЧЕ 0 КОНЕЦ) КАК П000210003105,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210003106, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 				ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210003107, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3 				ТОГДА 1	ИНАЧЕ 0 КОНЕЦ) КАК П000210003108,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 3 ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС	ИНАЧЕ 0 КОНЕЦ) КАК П000210003203, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 				ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210003204, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 3 				ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210003205,
	//	Строки 041 и 042 - Налоговые базы четвертого предела (свыше 600000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 4 ТОГДА СтавкиФедеральныйБюджет.СуммаДоходаС 	ИНАЧЕ 0 КОНЕЦ) КАК П000210004103, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 				ТОГДА СтавкиФСС.СуммаДоходаС 				ИНАЧЕ 0 КОНЕЦ) КАК П000210004104, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 4 				ТОГДА СтавкиФОМС.СуммаДоходаС				ИНАЧЕ 0 КОНЕЦ) КАК П000210004105,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 4 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210004106, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 				ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000210004107, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 4 				ТОГДА 1	ИНАЧЕ 0 КОНЕЦ) КАК П000210004108,
	|	Сумма(Выбор КОГДА СтавкиФедеральныйБюджет.НомерСтрокиСтавок = 4 ТОГДА ДоходыПоФЛ.БазаФедеральныйБюджет - СтавкиФедеральныйБюджет.СуммаДоходаС	ИНАЧЕ 0 КОНЕЦ) КАК П000210004203, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 				ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210004204, 
	|	Сумма(Выбор КОГДА СтавкиФОМС.НомерСтрокиСтавок = 4 				ТОГДА ДоходыПоФЛ.БазаФОМС - СтавкиФОМС.СуммаДоходаС								ИНАЧЕ 0 КОНЕЦ) КАК П000210004205
	|ИЗ 
	|	(" + НалоговыеБазыПоФизлицам + ") КАК ДоходыПоФЛ 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФедеральныйБюджет
	|		ПО СтавкиФедеральныйБюджет.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И СтавкиФедеральныйБюджет.Год = &парамГод И ДоходыПоФЛ.БазаФедеральныйБюджет > СтавкиФедеральныйБюджет.СуммаДоходаС И ДоходыПоФЛ.БазаФедеральныйБюджет <= СтавкиФедеральныйБюджет.СуммаДоходаПо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФСС
	|		ПО СтавкиФСС.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И СтавкиФСС.Год = &парамГод И ДоходыПоФЛ.БазаФСС > СтавкиФСС.СуммаДоходаС И ДоходыПоФЛ.БазаФСС <= СтавкиФСС.СуммаДоходаПо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФОМС
	|		ПО СтавкиФОМС.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И СтавкиФОМС.Год = &парамГод И ДоходыПоФЛ.БазаФОМС > СтавкиФОМС.СуммаДоходаС И ДоходыПоФЛ.БазаФОМС <= СтавкиФОМС.СуммаДоходаПо
	|";
	
    // СуммыВыплатРаздела2_3Текст
	// Выбираются доходы за минусом скидки нарастающим итогом для каждого месяца отчетного периода.
	// Учитываются только доходы с	кодами, входящих в базу федерального бюджета, за исключением 
	// авторских договоров.
	
	СуммыВыплатРаздела2_3Текст = "
	|ВЫБРАТЬ
	|  МесяцыОтчетногоПериода.Месяц КАК Месяц,
	|  Доходы.ФизЛицо КАК ФизЛицо,
	|  Сумма(Доходы.Результат - Доходы.Скидка) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ 
	|		&Месяц1 КАК Месяц
	|
	|	ОБЪЕДИНИТЬ  
	|
	|	ВЫБРАТЬ 
	|		&Месяц2 КАК Месяц
	|
	|	ОБЪЕДИНИТЬ  
	|
	|	ВЫБРАТЬ 
	|		&Месяц3 КАК Месяц) КАК МесяцыОтчетногоПериода
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЕСНПоСпискуСтруктурныхПодразделенийТекст + ") КАК Доходы
	|	ПО Доходы.Месяц <= МесяцыОтчетногоПериода.Месяц
	|
	|ГДЕ 
	|	Доходы.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет И Доходы.КодДоходаЕСН <>&КодДоходаДоговораАвторские
	|
	|СГРУППИРОВАТЬ ПО МесяцыОтчетногоПериода.Месяц, Доходы.ФизЛицо
	|УПОРЯДОЧИТЬ ПО Месяц ВОЗР, Сумма УБЫВ
	|
	|ИТОГИ ПО Месяц";
	
	
	// СуммыЛьготИнвалидов_Раздела3Текст
	// В качестве льготы покажем суммы предоставленные льготы по федеральному бюджету
	СуммыЛьготИнвалидов_Раздела3Текст = "ВЫБРАТЬ
	|	Льготы.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР КОГДА (ФИОФизЛиц.ФизЛицо) ЕСТЬ NULL  ТОГДА Льготы.ФизЛицо.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК ФИО,
	|	Льготы.ЛьготаЗаГод,
	|	Льготы.ЛьготаЗа1Месяц,
	|	Льготы.ЛьготаЗа2Месяц,
	|	Льготы.ЛьготаЗа3Месяц,
	|	"""" + СведенияОбИнвалидности.СерияСправки + "" "" + СведенияОбИнвалидности.НомерСправки КАК СерияНомерСправки,
	|	СведенияОбИнвалидности.ДатаВыдачи,
	|	СведенияОбИнвалидности.ГруппаИнвалидности,
	|	СведенияОбИнвалидности.СрокДействияСправки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|		СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФБ) КАК ЛьготаЗаГод,
	|		СУММА(ВЫБОР КОГДА МЕСЯЦ(ЕСНИсчисленный.Период) = &Месяц1 ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) КАК ЛьготаЗа1Месяц,
	|		СУММА(ВЫБОР КОГДА МЕСЯЦ(ЕСНИсчисленный.Период) = &Месяц2 ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) КАК ЛьготаЗа2Месяц,
	|		СУММА(ВЫБОР КОГДА МЕСЯЦ(ЕСНИсчисленный.Период) = &Месяц3 ТОГДА ЕСНИсчисленный.ПримененнаяЛьготаФБ ИНАЧЕ 0 КОНЕЦ) КАК ЛьготаЗа3Месяц
	|	ИЗ
	|		РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|	
	|	ГДЕ
	|		ЕСНИсчисленный.ОбособленноеПодразделение = &парамОрганизация И
	|		ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	|		(ЕСНИсчисленный.ПримененнаяЛьготаФБ <> 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСНИсчисленный.ФизЛицо) КАК Льготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамКонецОтчетногоПериода, ) КАК ФИОФизЛиц
	|		ПО Льготы.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонецОтчетногоПериода, ) КАК СведенияОбИнвалидности
	|		ПО Льготы.ФизЛицо = СведенияОбИнвалидности.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";

	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	
	// Раздел 2
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	
	Запрос.Текст = НалоговыеБазыРаздела2Текст;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = ИсчисленныеНалогиРаздела2Текст;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Если Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидПлатежейВФондыПолучено", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		// ВозмещеноФССТекст 
		// Описание:
		//  Выбираются отраженные в бухгалтерском учете суммы денежных средств, полученных из фонда социального страхования.
		//	Запрос выполняется для списка обособленных подразделений. Данные нужны для разделов 2 и 2.2. 
		
		// Строки 0800, 0820, 0830 и 0840 - Возмещено ФСС за год и по месяцам отчетного периода
		ВозмещеноФССТекст = 
		"ВЫБРАТЬ
		|	СУММА(БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт) КАК П000020080004,
		|	СУММА(ВЫБОР
		|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц1
		|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020082004,
		|	СУММА(ВЫБОР
		|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц2
		|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020083004,
		|	СУММА(ВЫБОР
		|			КОГДА МЕСЯЦ(БухОбороты.Период) = &Месяц3
		|				ТОГДА БухОбороты.СуммаОборотКт - БухОбороты.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020084004
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&парамНачалоГода,
		|		&парамКонецОтчетногоПериода,
		|		Месяц,
		|		Счет = &Счет69_01,
		|		,
		|		Организация В (&СписокОбособленныхПодразделений)
		|		    И Субконто1 = &ВидПлатежейВФондыПолучено,
		|		,
		|		) КАК БухОбороты";
		
		Запрос.Текст = ВозмещеноФССТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	КонецЕсли;
	
	// Раздел 2.1
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел 2.2
	
	// Заполняется только для головной организации, имеющей обособленные подразделения.
	// Данные берутся по оргниазации в целом.
	// Данные для заполнения раздела 2.2 берутся из выборок, применяемых при заполнении раздела 2.
	// Поэтому необходимо делать конвертацию имен показетелей раздела 2 в показатели раздела 2.2 
	
	Если Организация = ГоловнаяОрганизация И СписокВсехОбособленныхПодразделенийОрганизации.Количество()>1 Тогда
		
		// получим все данные по организации в целом
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокВсехОбособленныхПодразделенийОрганизации);
		
		// получим о отобразим данные о налоговых базах
		Запрос.Текст = НалоговыеБазыРаздела2Текст;
		РезультатЗапроса = Запрос.Выполнить();
		ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Истина);
		
		// получим о отобразим данные о налогах
		Запрос.Текст = ИсчисленныеНалогиРаздела2Текст;
		РезультатЗапроса = Запрос.Выполнить();
		ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Истина);
		
		// получим о отобразим данные о возмещении налогов ФСС
		Если ЗначениеЗаполнено(ВозмещеноФССТекст) Тогда
			Запрос.Текст = ВозмещеноФССТекст;
			РезультатЗапроса = Запрос.Выполнить();
			ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Истина);
		КонецЕсли;
		
		// Отразим все данные только по обособленным подразделениям, не включая головную
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация));
		
		// получим о отобразим данные о налоговых базах
		Запрос.Текст = НалоговыеБазыРаздела2Текст;
		РезультатЗапроса = Запрос.Выполнить();
		ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Ложь);
		
		// получим о отобразим данные о налогах
		Запрос.Текст = ИсчисленныеНалогиРаздела2Текст;
		РезультатЗапроса = Запрос.Выполнить();
		ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Ложь);
		
		// получим о отобразим данные о возмещении налогов ФСС
		Если ЗначениеЗаполнено(ВозмещеноФССТекст) Тогда
			Запрос.Текст = ВозмещеноФССТекст;
			РезультатЗапроса = Запрос.Выполнить();
			ВывестиРезультатЗапросаРаздела2ВРаздел2_2(РезультатЗапроса, Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
	// Раздел 2.3
	// Заполняется только для головной организации
	// Все данные берутся по организации в целом
	// Раздел не заполняется до конца года начиная с месяца, следующего за месяцем утраты права применения регрессивной шкалы
	
    // с 2005 года заполнение раздела смысла не имеет
	
	// Раздел 3 
	
	// Удаляем все страницы раздела 3
	ТаблицаСтраницРаздела3 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел3", ТаблицаСтраницРаздела3);
	ТаблицаСтраницРаздела3.Очистить();
	
	// Запрашиваем необходимые данные и формируем для каждого физлица отдельную страницу
	Запрос.Текст = СуммыЛьготИнвалидов_Раздела3Текст;
	ВыборкаЛьготПоФизлицам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЛьготПоФизлицам.Следующий() Цикл

		// Модифицируем структуру параметров автозаполнения ячеек
		ИзменитьТаблицуПараметровАвтозаполнения(1);

		СтруктураДанныхСтраницы = Новый Структура;
		// суммы начислений
		СтруктураДанныхСтраницы.Вставить("П000030001003", ВыборкаЛьготПоФизлицам.ФИО);
		СтруктураДанныхСтраницы.Вставить("П000030006003", ВыборкаЛьготПоФизлицам.ЛьготаЗаГод);
		СтруктураДанныхСтраницы.Вставить("П000030008003", ВыборкаЛьготПоФизлицам.ЛьготаЗа1Месяц);
		СтруктураДанныхСтраницы.Вставить("П000030009003", ВыборкаЛьготПоФизлицам.ЛьготаЗа2Месяц);
		СтруктураДанныхСтраницы.Вставить("П000030010003", ВыборкаЛьготПоФизлицам.ЛьготаЗа3Месяц);
		// данные справки
		СтруктураДанныхСтраницы.Вставить("П000030002003", ВыборкаЛьготПоФизлицам.СерияНомерСправки);
		СтруктураДанныхСтраницы.Вставить("П000030003003", ВыборкаЛьготПоФизлицам.ДатаВыдачи);
		СтруктураДанныхСтраницы.Вставить("П000030004003", ВыборкаЛьготПоФизлицам.ГруппаИнвалидности);
		СтруктураДанныхСтраницы.Вставить("П000030005003", ВыборкаЛьготПоФизлицам.СрокДействияСправки);
		
		// Добавим в таблицу страниц раздела 3 новую страницу с данными
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела3.Добавить();
		СтрТаблицаСтраницы.Представление = "Страница " + ТаблицаСтраницРаздела3.Количество();
		СтрТаблицаСтраницы.Данные =  СтруктураДанныхСтраницы;
		
	КонецЦикла; 
	
	// Если нет ни одного инвалида, то добавим одну пустую страницу
	Если ТаблицаСтраницРаздела3.Количество() =0 Тогда
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела3.Добавить();
		СтрТаблицаСтраницы.Представление = "Новая страница";
		СтрТаблицаСтраницы.Данные = Новый Структура("П000030001003, П000030002003, П000030003003, П000030004003, П000030005003,
		|П000030006003, П000030008003, П000030009003, П000030010003");
	КонецЕсли; 

	// Добавляем в массив таблицу значений, содержащей варианты заполнения
	// для добавленной страницы.
	мСтруктураВариантыЗаполнения.Свойство("Раздел3", МассивВариантовЗаполненияСтраниц);
	НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Раздел3", Истина);
	МассивВариантовЗаполненияСтраниц.Добавить(НоваяТаблицаВариантыЗаполнения);

	// Сделаем активной первую страницу
	ТаблицаСтраницРаздела3[0].АктивнаяСтраница = Истина;	 
	
	// Покажем данные первой страницы раздела 3
	Для Каждого Элемент Из ТаблицаСтраницРаздела3[0].Данные Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;
		мРаздел3.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	КонецЦикла;
	ПоказатьСтатикСтраницРаздела("Раздел3");

	// -------------------------------------------------------------------------------
	// Расчет автовычисляемых полей
	
	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний()

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма, "Раздел3");
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, "П0003300010", 11, 0);
	
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					СтрУровня2Имя = СтрУровня2.Имя;
					СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
					Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
						Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
							ВставитьДополнительнуюСтроку();
						КонецЕсли;
						СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
						НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
						Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
							УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение);
						КонецЦикла;
						ОбновитьСтруктуруМногострочныхРазделов();
					Иначе // это показатель
						УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);


КонецПроцедуры


Процедура НачальнаяПодготовкаФормы() Экспорт 
	
	Перем ИсходноеКоличествоСтрокГруппы;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица   = ЭлементыФормы.ПолеТабличногоДокументаФизЛица; 
	мРаздел1   = ЭлементыФормы.ПолеТабличногоДокументаРаздел1; 
	мРаздел2   = ЭлементыФормы.ПолеТабличногоДокументаРаздел2; 
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1; 
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2; 
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3; 
	мРаздел3   = ЭлементыФормы.ПолеТабличногоДокументаРаздел3; 
	мРаздел3_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1; 
	мРаздел3_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2; 
	мРаздел3_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_3; 

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мВПрограммеИзмененаОрганизация = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			мТитульный     .Области["ВидДок"].Значение = "1";

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();
	СохрЗначВКвадратиках();
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	НачальнаяПодготовкаФормы();
	
	ДоступностьКнопокДобавитьУдалить();

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью кнопок "<" и ">" листания страниц
// многостраничных разделов формы
//
// Параметры:
//  НомерТекущейСтраницы - число, порядковый номер текущей страницы;
//  КоличествоСтраниц    - число, количество страниц многостраничного раздела;
//  ИмяТекСтраницы       - строка, имя текущей страницы основной панели формы.
//
Процедура ДоступностьКнопокЛистания(НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели)

	ДоступностьКнопкаПредыдущаяСтраница = Ложь;
	ДоступностьКнопкаСледующаяСтраница  = Ложь;

	Если НомерТекущейСтраницы > 1 Тогда
		ДоступностьКнопкаПредыдущаяСтраница = Истина;
	КонецЕсли;

	Если НомерТекущейСтраницы < КоличествоСтраниц Тогда
		ДоступностьКнопкаСледующаяСтраница = Истина;
	КонецЕсли;

	ЭлементыФормы["КнопкаПредыдущаяСтраница" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаПредыдущаяСтраница;
	ЭлементыФормы["КнопкаСледующаяСтраница"  + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаСледующаяСтраница;
	
КонецПроцедуры // ДоступностьКнопокЛистания()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если Область.Защита Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура "собирает" значения показателей по отдельным
// полям табличного документа на странице "Титульный" формы.
//
Процедура СохрЗначВКвадратиках()

	мОргТип = мТитульный.Области.ТипОрг1.Значение;
	
	мОргКодИМНС = мТитульный.Области.КодИМНС1.Значение
	            + мТитульный.Области.КодИМНС2.Значение
	            + мТитульный.Области.КодИМНС3.Значение
	            + мТитульный.Области.КодИМНС4.Значение;

	мИННДиректор = мТитульный.Области.ИННРук1.Значение
	             + мТитульный.Области.ИННРук2.Значение
	             + мТитульный.Области.ИННРук3.Значение
	             + мТитульный.Области.ИННРук4.Значение
	             + мТитульный.Области.ИННРук5.Значение
	             + мТитульный.Области.ИННРук6.Значение
	             + мТитульный.Области.ИННРук7.Значение
	             + мТитульный.Области.ИННРук8.Значение
	             + мТитульный.Области.ИННРук9.Значение
	             + мТитульный.Области.ИННРук10.Значение
	             + мТитульный.Области.ИННРук11.Значение
	             + мТитульный.Области.ИННРук12.Значение;
	
	мИННБухгалтер = мТитульный.Области.ИННГБ1.Значение
	              + мТитульный.Области.ИННГБ2.Значение
	              + мТитульный.Области.ИННГБ3.Значение
	              + мТитульный.Области.ИННГБ4.Значение
	              + мТитульный.Области.ИННГБ5.Значение
	              + мТитульный.Области.ИННГБ6.Значение
	              + мТитульный.Области.ИННГБ7.Значение
	              + мТитульный.Области.ИННГБ8.Значение
	              + мТитульный.Области.ИННГБ9.Значение
	              + мТитульный.Области.ИННГБ10.Значение
	              + мТитульный.Области.ИННГБ11.Значение
	              + мТитульный.Области.ИННГБ12.Значение;

	мИННУпПред = мТитульный.Области.ИННУП1.Значение
	           + мТитульный.Области.ИННУП2.Значение
	           + мТитульный.Области.ИННУП3.Значение
	           + мТитульный.Области.ИННУП4.Значение
	           + мТитульный.Области.ИННУП5.Значение
	           + мТитульный.Области.ИННУП6.Значение
	           + мТитульный.Области.ИННУП7.Значение
	           + мТитульный.Области.ИННУП8.Значение
	           + мТитульный.Области.ИННУП9.Значение
	           + мТитульный.Области.ИННУП10.Значение
	           + мТитульный.Области.ИННУП11.Значение
	           + мТитульный.Области.ИННУП12.Значение;

	мОргОГРН = мТитульный.Области.ОГРН1.Значение
	         + мТитульный.Области.ОГРН2.Значение
	         + мТитульный.Области.ОГРН3.Значение
	         + мТитульный.Области.ОГРН4.Значение
	         + мТитульный.Области.ОГРН5.Значение
	         + мТитульный.Области.ОГРН6.Значение
	         + мТитульный.Области.ОГРН7.Значение
	         + мТитульный.Области.ОГРН8.Значение
	         + мТитульный.Области.ОГРН9.Значение
	         + мТитульный.Области.ОГРН10.Значение
	         + мТитульный.Области.ОГРН11.Значение
	         + мТитульный.Области.ОГРН12.Значение
	         + мТитульный.Области.ОГРН13.Значение;

	мОргКодОКАТО = мРаздел1.Области.КодОКАТО1.Значение
	             + мРаздел1.Области.КодОКАТО2.Значение
	             + мРаздел1.Области.КодОКАТО3.Значение
	             + мРаздел1.Области.КодОКАТО4.Значение
	             + мРаздел1.Области.КодОКАТО5.Значение
	             + мРаздел1.Области.КодОКАТО6.Значение
	             + мРаздел1.Области.КодОКАТО7.Значение
	             + мРаздел1.Области.КодОКАТО8.Значение
	             + мРаздел1.Области.КодОКАТО9.Значение
	             + мРаздел1.Области.КодОКАТО10.Значение
	             + мРаздел1.Области.КодОКАТО11.Значение;
;

КонецПроцедуры // СохрЗначВКвадратиках()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	СохрЗначВКвадратиках();
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем показом статика, отображающего номер текущей страницы
	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	
	Если (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// Процедура - обработчик нажатия кнопки "<" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаРаздела3Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки ">" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаРаздела3Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуРаздела3Нажатие(Элемент)
	
	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1);

	ВставитьДополнительнуюСтраницу();

	УстановитьЦветФонаЯчейки(,, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 3"
// основной панели формы.
// 
Процедура КнопкаУдалитьДопСтраницуРаздела3Нажатие(Элемент)

	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1);

	УдалитьДополнительнуюСтраницу();

	УстановитьЦветФонаЯчейки(,, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Перейти" на странице "Раздел 3"
// основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуРаздела3Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Добавить" на странице "Раздел 3.3"
// основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел3_3Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице "Раздел 3.3"
// основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел3_3Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел3_3Нажатие()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.1" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 2.3" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел 3" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.3" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 3" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.1" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.3" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_3ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 3" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников за 1 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ1ПриИзменении(Элемент)

	Расчет("Раздел2_3");

КонецПроцедуры // ПолеВводаЧисленностьМ1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников за 2 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ2ПриИзменении(Элемент)

	Расчет("Раздел2_3");

КонецПроцедуры // ПолеВводаЧисленностьМ2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода средней
// численности работников за 3 месяц в диалоге формы отчета.
//
Процедура ПолеВводаЧисленностьМ3ПриИзменении(Элемент)

	Расчет("Раздел2_3");

КонецПроцедуры // ПолеВводаЧисленностьМ3ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.3"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 3"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел 3.3" основной панели формы.
// Определяет текущую область табличного документа и вызывает процедуру управления
// доступностью кнопок "Добавить" и "Удалить" формы.
//
Процедура ПолеТабличногоДокументаРаздел3_3ПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_3ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа, не участвующих в расчете других показателей отчета..
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ТабличныйДокументПолеВводаБезРасчетаПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаБезРасчетаПриИзменении()

// Процедура - обработчик события при изменении значения полей ввода
// ИНН и ФИО должностных лиц организации на титульном листе.
//
Процедура ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаДолжностныеЛицаПриИзменении()

// Процедура - обработчик события при изменении значения полей для отметки
// типа налогоплательщика.
//
Процедура ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении(Элемент)

	// Заполняем дату подписи в соответствующих ячейках
	ЗаполнитьДатуВЯчейках();
	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаТипаНалогоплательщикаПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2ПриИзменении(Элемент)

	Расчет("Раздел2");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.1" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриИзменении(Элемент)

	Расчет("Раздел2_1");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриИзменении(Элемент)

	Расчет("Раздел2_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 2.3" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриИзменении(Элемент)

	Расчет("Раздел2_3");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 3" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3ПриИзменении(Элемент)

	Расчет("Раздел3");

	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел 3.2" основной панели формы.
// Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_2ПриИзменении(Элемент)

	Расчет("Раздел3_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек многострочного раздела табличного документа на странице "Раздел 3.3"
// основной панели формы. Обновляет структуру многострочного раздела и 
// устанавлвает признак модифицированности формы.
//
Процедура ТабличныйДокументПолеМнСтрРаздел3_3ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеМнСтрРаздел3_3ПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел 2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_2";
	СтрокаУровня1.Представление            = "Раздел 3.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_3";
	СтрокаУровня1.Представление            = "Раздел 3.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.1"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_1.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 2.3"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел2_3.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список выбора поля выбора "ВариантЗаполнения" на странице "Раздел 3"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0003300010";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 11;

// структура строк многострочного раздела на странице "Приложения В,Г"
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000330001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000330001003", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000330001004", ОписаниеТиповСтрока254);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",              ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница",           ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

// Структура содержит данные дополнительных страниц раздела 3
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 3
ТаблицаСтраницыРаздела3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел3", ТаблицаСтраницыРаздела3);


//// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "29/12/2003";

// Код отчета, равен КНД
мКодОтчета   = 1151050;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
