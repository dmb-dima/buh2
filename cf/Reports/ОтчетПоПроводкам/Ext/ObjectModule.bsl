Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;

Перем мТекущийНаборПоказателей;

#Если Клиент Тогда
	
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИсходныйТекстЗапроса         = МакетКомпоновки.НаборыДанных.Проводки.Запрос;
	ШаблонЗаменыЧтоЗаменить      = "Активность = ИСТИНА";
	ШаблонЗаменыНаЧтоЗаменить    = "";
	ШаблонЗаменыНаЧтоЗаменитьБУ  = "Сумма <> 0";
	ШаблонЗаменыНаЧтоЗаменитьНУ  = "СуммаНУ <> 0 ИЛИ СуммаНУДт <> 0 ИЛИ СуммаНУКор <> 0 ИЛИ СуммаНУКт <> 0";
	ШаблонЗаменыНаЧтоЗаменитьКол = "КоличествоДт <> 0 ИЛИ КоличествоКт <> 0";
	КоличествоПоказателей        = 0;
	ВключитьСкобки               = Ложь;
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
			ВключитьСкобки        = ВключитьСкобки ИЛИ (КоличествоПоказателей > 0);
		КонецЕсли;
		
		Если Показатель.Значение.Значение И Показатель.Значение.Использование Тогда
			Если Показатель.Ключ = "БУ" Тогда
				ШаблонЗамены = ШаблонЗаменыНаЧтоЗаменитьБУ;
			ИначеЕсли Показатель.Ключ = "НУ" Тогда
				ВключитьСкобки        = Истина;
				ШаблонЗамены = ШаблонЗаменыНаЧтоЗаменитьНУ;
			ИначеЕсли Показатель.Ключ = "ВР" Тогда
				ВключитьСкобки        = Истина;
				ШаблонЗамены = СтрЗаменить(ШаблонЗаменыНаЧтоЗаменитьНУ, "СуммаНУ", "СуммаВР");
			ИначеЕсли Показатель.Ключ = "ПР" Тогда
				ВключитьСкобки        = Истина;
				ШаблонЗамены = СтрЗаменить(ШаблонЗаменыНаЧтоЗаменитьНУ, "СуммаНУ", "СуммаПР");
			ИначеЕсли Показатель.Ключ = "ВалютнаяСумма" Тогда
				ШаблонЗамены = СтрЗаменить(ШаблонЗаменыНаЧтоЗаменитьНУ, "СуммаНУ", "ВалютнаяСумма");
				ВключитьСкобки        = Истина;
			ИначеЕсли Показатель.Ключ = "Количество" Тогда
				ШаблонЗамены = ШаблонЗаменыНаЧтоЗаменитьКол;
				ВключитьСкобки        = Истина;
			КонецЕсли;
			
			ШаблонЗаменыНаЧтоЗаменить = ШаблонЗаменыНаЧтоЗаменить + ?(КоличествоПоказателей = 1, " " + ШаблонЗамены, " ИЛИ " + ШаблонЗамены)
		КонецЕсли;
	КонецЦикла;
	
	Если СокрЛП(ШаблонЗаменыНаЧтоЗаменить) <> "" Тогда
		ШаблонЗаменыНаЧтоЗаменить = ?(ВключитьСкобки, " И (" + ШаблонЗаменыНаЧтоЗаменить + ")", " И " + ШаблонЗаменыНаЧтоЗаменить);
	КонецЕсли;
	
	КонечныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, ШаблонЗаменыЧтоЗаменить, ШаблонЗаменыЧтоЗаменить + ШаблонЗаменыНаЧтоЗаменить);
	МакетКомпоновки.НаборыДанных.Проводки.Запрос = КонечныйТекстЗапроса;
	
	// Если показатель один, то удалим столбик "Показатель"
	Если КоличествоПоказателей = 1 Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Для Каждого СтрокаМакета Из Макет.Макет Цикл
				СтрокаМакета.Ячейки.Удалить(СтрокаМакета.Ячейки[4]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МакетПроводки = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Проводки", Истина);
	
	Если МакетПроводки.Количество() = 1 Тогда
		МакетПроводки = МакетПроводки[0];
		ДанныеОтчета.Вставить("МакетПроводок", МакетПроводки.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);

	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	МассивПоказателей.Добавить("Количество");
	
	ТекущийНаборПоказателей = "" + ПоказателиОтчета.БУ.Значение + ПоказателиОтчета.НУ.Значение + ПоказателиОтчета.ПР.Значение + ПоказателиОтчета.ВР.Значение + ПоказателиОтчета.ВалютнаяСумма.Значение + ПоказателиОтчета.Количество.Значение;
	Если ТекущийНаборПоказателей <> мТекущийНаборПоказателей Тогда
		
		МассивМакетов = Новый Массив;
		МассивМакетов.Добавить("ЗаголовокПодвал");
		МассивМакетов.Добавить("ПроводкиЗаголовок");	
		
		Для Каждого ЭлементМассива Из МассивМакетов Цикл
			СхемаКомпоновкиДанных.Макеты[ЭлементМассива].Макет = СтандартныеОтчеты.ПолучитьКопиюОписанияМакета(СхемаКомпоновкиДанных.Макеты[ЭлементМассива + "Образец"].Макет);
			ОписаниеМакета = СхемаКомпоновкиДанных.Макеты[ЭлементМассива].Макет;
			МассивСтрокДляУдаления = Новый Массив;
			Индекс = 0;
			Для Каждого ЭлементПоказатель Из МассивПоказателей Цикл
				Если Не ПоказателиОтчета[ЭлементПоказатель].Значение Тогда 
					МассивСтрокДляУдаления.Добавить(ОписаниеМакета[Индекс]);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;		
			
			Для Каждого Строка Из МассивСтрокДляУдаления Цикл
				ОписаниеМакета.Удалить(Строка);
			КонецЦикла;
			
			КоличествоСтрок = ОписаниеМакета.Количество();
			
			// Обвести область
			Если КоличествоСтрок > 0 Тогда
				Для Индекс = 0 По 10 Цикл
					ПоследняяСтрока = ?(ЭлементМассива = "ЗаголовокПодвал" И Индекс < 4, 0, КоличествоСтрок - 1);
					ПараметрГраницы = ТиповыеОтчеты.ПолучитьПараметр(ОписаниеМакета[0].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
					ТиповыеОтчеты.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Сверху", ЛинияСплошная);
					ПараметрГраницы = ТиповыеОтчеты.ПолучитьПараметр(ОписаниеМакета[ПоследняяСтрока].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
					ТиповыеОтчеты.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Снизу", ЛинияСплошная);	
				КонецЦикла;
			КонецЕсли;
			
			Для Индекс = 1 По КоличествоСтрок - 1 Цикл
				ОписаниеМакета[Индекс].Ячейки[0].Элементы.Очистить();	
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				ОписаниеМакета[Индекс].Ячейки[1].Элементы.Очистить();
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				ОписаниеМакета[Индекс].Ячейки[2].Элементы.Очистить();
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				ОписаниеМакета[Индекс].Ячейки[3].Элементы.Очистить();
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				Если ЭлементМассива = "ПроводкиЗаголовок" Тогда
					ОписаниеМакета[Индекс].Ячейки[5].Элементы.Очистить();
					ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
					ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
					ОписаниеМакета[Индекс].Ячейки[8].Элементы.Очистить();
					ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
					ТиповыеОтчеты.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		мТекущийНаборПоказателей = ТекущийНаборПоказателей;
	КонецЕсли;
	Если Не ПоказателиОтчета.БУ.Значение Тогда
		ГруппаОтборов = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Если ПоказателиОтчета.НУ.Значение Тогда
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "НУДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "НУКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПоказателиОтчета.ПР.Значение Тогда
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ПРДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ПРКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПоказателиОтчета.ВР.Значение Тогда
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ВРДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ВРКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ВалютнаяСуммаДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "ВалютнаяСуммаКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПоказателиОтчета.Количество.Значение Тогда
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "КоличествоДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборов, "КоличествоКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);	
		КонецЕсли;	
	КонецЕсли;
	
	МассивОтборов = Новый Массив;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
			Если ЭлементОтбора.Использование И Найти(ЭлементОтбора.ЛевоеЗначение, "(доп. реквизит)") > 0 Тогда
				МассивОтборов.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		ГруппаИЛИ = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, "Субконто", "СубконтоДт"), ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения); 
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, "Субконто", "СубконтоКт"), ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения); 
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);	
	КонецЦикла;
	
	СтандартныеОтчеты.ДобавитьОтборПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Отчет по проводкам" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета(,,,, Ложь, Истина, Истина, Ложь);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);

КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	Если СохранятьНастройкуОтчета Тогда	
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

#КонецЕсли