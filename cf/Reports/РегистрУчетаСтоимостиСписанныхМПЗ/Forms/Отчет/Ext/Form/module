Перем ВысотаЗаголовка;
Перем ПоказыватьЗаголовок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда
		ВнешняяОбработкаОбъект.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ВыводЗаголовка()

Процедура УправлениеПометкамиКнопокКоманднойПанели()

	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка                = ПоказыватьЗаголовок;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

Процедура ЗаполнитьСписокВидовРасходов()

		// Заполним список видов расходов если он пуст.
	Если ВидыРасходов.Количество() = 0 Тогда 

			// Внеоборотные активы
		ВидыРасходов.Добавить("На приобретение ОС");
		ВидыРасходов.Добавить("На приобретение оборудования, требующего монтажа");
		ВидыРасходов.Добавить("На НИОКР");
		ВидыРасходов.Добавить("На освоение природных ресурсов");
		ВидыРасходов.Добавить("Транспортные расходы");
		ВидыРасходов.Добавить("На приобретение НМА");

		// ТМЦ
		ВидыРасходов.Добавить("На приобретение материалов");
		ВидыРасходов.Добавить("На приобретение товаров");
		ВидыРасходов.Добавить("На приобретение паев");
		ВидыРасходов.Добавить("На приобретение ценных бумаг");
		ВидыРасходов.Добавить("На приобретение прав требования");

		//Нормируемые
		ВидыРасходов.Добавить("Представительские расходы");
		ВидыРасходов.Добавить("Расходы на рекламу (нормируемые)");

		// Текущие расходы
		ВидыРасходов.Добавить("Косвенные расходы");
		ВидыРасходов.Добавить("Прямые расходы");
		ВидыРасходов.Добавить("Расходы на реализацию ОС");
		ВидыРасходов.Добавить("Расходы на реализацию НМА");
		ВидыРасходов.Добавить("Расходы на реализацию прочего имущества");
		ВидыРасходов.Добавить("Внереализационные расходы");

		// РБП 
		ВидыРасходов.Добавить("На долгосрочное страхование жизни");
		ВидыРасходов.Добавить("Страхование на оплату медицинских расходов");
		ВидыРасходов.Добавить("Страхование на случай смерти и утраты трудоспособности");
		ВидыРасходов.Добавить("Расходы, связанные с реализацией имущественных прав");
		ВидыРасходов.Добавить("Расходы, связанные с реализацией ЦБ");
		ВидыРасходов.Добавить("Прочие РБП");
		
		//Реализация и списание
		ВидыРасходов.Добавить("Реализация");
		ВидыРасходов.Добавить("Отгрузка без перехода права собственности");
		ВидыРасходов.Добавить("Реализация ранее отгруженных");
		ВидыРасходов.Добавить("Недостачи и потери от порчи ценностей");
		ВидыРасходов.Добавить("Прочее внутренне перемещение");

		ВидыРасходов.Добавить("Расходы, не учитываемые в целях налогообложения");
		ВидыРасходов.Добавить("Без расходов");

	КонецЕсли;

	Если УправлениеОтчетами.ВСпискеНеУстановленыПометки(ВидыРасходов) Тогда
		ВидыРасходов.ЗаполнитьПометки(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСписокПараметров()

		// Заполним список видов расходов если он пуст.
	Если Показатели.Количество() = 0 Тогда 

		СтрокаПоказателей = Показатели.Добавить();
		СтрокаПоказателей.Имя = "Склад";
		СтрокаПоказателей.Представление = "Склад или документ оприходования";
		
		СтрокаПоказателей = Показатели.Добавить();
		СтрокаПоказателей.Имя = "ХарактерЗатрат";
		СтрокаПоказателей.Представление = "Направление использования";
		
		СтрокаПоказателей = Показатели.Добавить();
		СтрокаПоказателей.Имя = "ОбъектУчета";
		СтрокаПоказателей.Представление = "Объект учета";
		
		СтрокаПоказателей = Показатели.Добавить();
		СтрокаПоказателей.Имя = "Товар";
		СтрокаПоказателей.Представление = "Товар";
		
	КонецЕсли;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

Процедура КоманднаяПанельФормыНастройка(Кнопка)

	ФормаНастройка = ПолучитьФорму("ФормаНастройка", ЭтаФорма);

	ФормаНастройка.ОткрытьМодально();

КонецПроцедуры // КоманднаяПанельФормыНастройка()

Процедура КоманднаяПанельФормыСформировать(Элемент)

	ВнешняяОбработкаОбъект.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

КонецПроцедуры

Процедура КоманднаяПанельЗаголовок(Кнопка)

	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием()

	ПоказыватьЗаголовок = ИСТИНА;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ВыводЗаголовка();

	ЗаполнитьСписокВидовРасходов();
	ЗаполнитьСписокПараметров();
	
	// Проверка ведения однофирменности
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = глЗначениеПеременной("ОсновнаяОрганизация");
	КонецЕсли;

КонецПроцедуры

Процедура ПолеВыбора1ПриИзменении(Элемент)
	ВыводЗаголовка();
КонецПроцедуры

Процедура ДатаНачПриИзменении(Элемент)
		НП.УстановитьПериод(ДатаНач, ДатаКон);

КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
		НП.УстановитьПериод(ДатаНач, ДатаКон);
		
КонецПроцедуры



