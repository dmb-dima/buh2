#Если Клиент Тогда
	
//Объявление переменных
Перем НП Экспорт;

Перем Счет07;
Перем Счет08;
Перем Счет08_01;
Перем Счет08_02;
Перем Счет08_03;
Перем Счет08_04;
Перем Счет08_05;
Перем Счет08_08;
Перем Счет10;
Перем Счет20;
Перем Счет21;
Перем Счет23;
Перем Счет25;
Перем Счет26;
Перем Счет28;
Перем Счет29;
Перем Счет41,Счет42;
Перем Счет43;
Перем Счет44;
Перем Счет45;
Перем Счет45_21;
Перем Счет45_41;
Перем Счет45_43;
Перем Счет44_01;
Перем Счет58_01_1;
Перем Счет58_01_2;
Перем Счет58_02;
Перем Счет58_05;
Перем Счет90_02;
Перем Счет91_02;
Перем Счет94;
Перем Счет97;

Функция СчетПринадлежит(СчетВладелец, Счет)
	Если Счет.ПринадлежитЭлементу(СчетВладелец) ИЛИ Счет = СчетВладелец Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВидРасходаПоОперации(Счет, Субконто1, Субконто2, Субконто3, КодОперации)

	ВидРасхода  = "";
	ОбъектУчета = "";
	
	Попытка
		ВидЗатратНалоговогоУчета = Субконто1.ВидРасходовНУ;
	Исключение
		Попытка
			ВидЗатратНалоговогоУчета = Субконто2.ВидРасходовНУ;
        Исключение
			Попытка
				ВидЗатратНалоговогоУчета = Субконто3.ВидРасходовНУ;
			Исключение
				ВидЗатратНалоговогоУчета = "";
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;

	Если ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование ИЛИ
		 ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности ИЛИ
		 ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников ИЛИ
		 НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Новый Структура("ВидРасхода, ОбъектУчета");

	КонецЕсли;

	Если СчетПринадлежит(Счет07, Счет) Тогда
		ВидРасхода  = "На приобретение оборудования, требующего монтажа";
		ОбъектУчета = Субконто1;

	ИначеЕсли СчетПринадлежит(Счет08, Счет) Тогда
		ВидРасхода = "На приобретение ОС";
		ОбъектУчета = Субконто1;

		Если СчетПринадлежит(Счет08_01, Счет) ИЛИ
			 СчетПринадлежит(Счет08_02, Счет) ИЛИ
			 СчетПринадлежит(Счет08_03, Счет) ИЛИ
			 СчетПринадлежит(Счет08_04, Счет) Тогда
			ВидРасхода = "На приобретение ОС";

		ИначеЕсли СчетПринадлежит(Счет08_05, Счет) Тогда
			ВидРасхода = "На приобретение НМА";

		ИначеЕсли СчетПринадлежит(Счет08_08, Счет) Тогда
			ВидРасхода = "На НИОКР";

		КонецЕсли;

	ИначеЕсли СчетПринадлежит(Счет10, Счет) Тогда
		ВидРасхода  = ?(ВидТМЦ = 1, "Прочее внутреннее перемещение", "На приобретение материалов");
		ОбъектУчета = Субконто1;

	ИначеЕсли СчетПринадлежит(Счет21, Счет) Тогда
		ВидРасхода = "Прочее внутреннее перемещение";
		ОбъектУчета = Субконто1;
		
	ИначеЕсли СчетПринадлежит(Счет41, Счет) Тогда
		ВидРасхода = ?(ВидТМЦ = 0, "Прочее внутреннее перемещение", "На приобретение товаров");
		ОбъектУчета = Субконто1;
		
	ИначеЕсли СчетПринадлежит(Счет43, Счет) Тогда
		ВидРасхода = "Прочее внутреннее перемещение";
		ОбъектУчета = Субконто1;
		
	ИначеЕсли СчетПринадлежит(Счет45, Счет) Тогда
		ВидРасхода = "Отгрузка без перехода права собственности";
		ОбъектУчета = Субконто1;

	ИначеЕсли СчетПринадлежит(Счет58_01_1, Счет) Тогда
		ВидРасхода  = "На приобретение паев";
		ОбъектУчета = Субконто1;

	ИначеЕсли СчетПринадлежит(Счет58_01_2, Счет) ИЛИ
		      СчетПринадлежит(Счет58_02, Счет) Тогда
		ВидРасхода  = "На приобретение ценных бумаг";
		ОбъектУчета = Строка(Субконто1) + " (" + Строка(Субконто2) + ")";

	ИначеЕсли СчетПринадлежит(Счет58_05, Счет) Тогда
		ВидРасхода  = "На приобретение прав требования";
		ОбъектУчета = Строка(Субконто1) + " (" + Строка(Субконто2) + ")";

	ИначеЕсли СчетПринадлежит(Счет44_01, Счет) Тогда
		ВидРасхода  = "Транспортные расходы";
		Если ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
			ВидРасхода = "Транспортные расходы";
		КонецЕсли;

	ИначеЕсли (ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы)
			  И
			  (СчетПринадлежит(Счет44, Счет)    ИЛИ СчетПринадлежит(Счет20, Счет) ИЛИ
			   СчетПринадлежит(Счет23, Счет) ИЛИ СчетПринадлежит(Счет25, Счет)    ИЛИ
			   СчетПринадлежит(Счет26, Счет) ИЛИ СчетПринадлежит(Счет28, Счет)    ИЛИ
			   СчетПринадлежит(Счет29, Счет)) Тогда
			ВидРасхода = "Представительские расходы";

	ИначеЕсли (ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые)
			  И
			  (СчетПринадлежит(Счет44, Счет)    ИЛИ СчетПринадлежит(Счет20, Счет) ИЛИ
			   СчетПринадлежит(Счет23, Счет) ИЛИ СчетПринадлежит(Счет25, Счет)    ИЛИ
			   СчетПринадлежит(Счет26, Счет) ИЛИ СчетПринадлежит(Счет28, Счет)    ИЛИ
			   СчетПринадлежит(Счет29, Счет)) Тогда
			ВидРасхода = "Расходы на рекламу (нормируемые)";

	ИначеЕсли (СчетПринадлежит(Счет44, Счет)    ИЛИ СчетПринадлежит(Счет20, Счет) ИЛИ
			   СчетПринадлежит(Счет23, Счет) ИЛИ СчетПринадлежит(Счет25, Счет)    ИЛИ
			   СчетПринадлежит(Счет26, Счет) ИЛИ СчетПринадлежит(Счет28, Счет)    ИЛИ
			   СчетПринадлежит(Счет29, Счет)
			   )
			   И
			   (ВидЗатратНалоговогоУчета <> Перечисления.ВидыРасходовНУ.ТранспортныеРасходы ИЛИ
			    ВидЗатратНалоговогоУчета <> Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы ИЛИ
			    ВидЗатратНалоговогоУчета <> Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые ИЛИ
			    ВидЗатратНалоговогоУчета <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения) Тогда
			ВидРасхода  = "Косвенные расходы";
			ОбъектУчета = ВидЗатратНалоговогоУчета;

	ИначеЕсли (СчетПринадлежит(Счет20, Счет) ИЛИ 
			   СчетПринадлежит(Счет23, Счет)    ИЛИ СчетПринадлежит(Счет25, Счет) ИЛИ 
			   СчетПринадлежит(Счет29, Счет)    ИЛИ СчетПринадлежит(Счет28, Счет)) Тогда
			ВидРасхода  = "Прямые расходы";
			ОбъектУчета = ВидЗатратНалоговогоУчета;

	ИначеЕсли СчетПринадлежит(Счет90_02, Счет) Тогда
			ВидРасхода  = "Реализация";
			ОбъектУчета = Субконто1;
	

	ИначеЕсли СчетПринадлежит(Счет91_02, Счет) Тогда
		Если ВидЗатратНалоговогоУчета <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидРасхода  = "Внереализационные расходы";
			ОбъектУчета = ВидЗатратНалоговогоУчета;
		КонецЕсли;

	ИначеЕсли (СчетПринадлежит(Счет44, Счет) ИЛИ СчетПринадлежит(Счет20, Счет) ИЛИ 
			   СчетПринадлежит(Счет23, Счет) ИЛИ СчетПринадлежит(Счет25, Счет) ИЛИ 
			   СчетПринадлежит(Счет26, Счет) ИЛИ СчетПринадлежит(Счет28, Счет) ИЛИ 
			   СчетПринадлежит(Счет29, Счет) ИЛИ СчетПринадлежит(Счет91_02, Счет))
			   И 
			   (ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения) Тогда
			ВидРасхода = "Расходы, не учитываемые в целях налогообложения";

	ИначеЕсли СчетПринадлежит(Счет94, Счет) Тогда
		ВидРасхода = "Недостачи и потери от порчи ценностей";
		
	ИначеЕсли СчетПринадлежит(Счет97, Счет) Тогда
		ВидРасхода = "Прочие РБП";
		//На долгосрочное страхование жизни
		//На освоение природных ресурсов
		//Страхование на оплату медицинских расходов
		//Страхование на случай смерти и утраты трудоспособности

	Иначе
		ВидРасхода = "Без расходов";

	КонецЕсли;

	Возврат Новый Структура("ВидРасхода, ОбъектУчета", ВидРасхода, ОбъектУчета);

КонецФункции // ВидРасходаПоОперации()

// Преобразует таблицу значений в дерево значений, группируя значения по первым КолГрупп колонкам
Функция ВДеревоСГруппировкой(ТаблицаРезультатов, КолГрупп = 1)
	
	ДеревоРезультатов = Новый ДеревоЗначений;
	Для Каждого Колонка ИЗ ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультатов Цикл
		КоллекцияСтрокДерева = ДеревоРезультатов.Строки;
		Для Группа = 0 По КолГрупп - 1 Цикл
			Если ТаблицаРезультатов.Колонки[Группа].Имя  = "ДатаОперации" Тогда
				Продолжить;
			КонецЕсли;
			
			Ключ = СтрокаТаблицы[Группа];
			СтрокаПоГруппе = КоллекцияСтрокДерева.Найти(Ключ, ТаблицаРезультатов.Колонки[Группа].Имя, Ложь); 
			Если СтрокаПоГруппе = Неопределено Тогда
				СтрокаПоГруппе = КоллекцияСтрокДерева.Добавить();
				СтрокаПоГруппе[Группа] = Ключ;
				СтрокаПоГруппе.Количество = 0;
				СтрокаПоГруппе.Стоимость = 0;
			КонецЕсли;
			СтрокаПоГруппе.Количество = СтрокаПоГруппе.Количество + СтрокаТаблицы.Количество;
			СтрокаПоГруппе.Стоимость = СтрокаПоГруппе.Стоимость + СтрокаТаблицы.Стоимость;
			КоллекцияСтрокДерева = СтрокаПоГруппе.Строки;
		КонецЦикла;
		ДетальнаяЗапись = КоллекцияСтрокДерева.Добавить();
		Для Колонка = КолГрупп - 1 По ТаблицаРезультатов.Колонки.Количество()-1 Цикл
			ДетальнаяЗапись[Колонка] = СтрокаТаблицы[Колонка];
		КонецЦикла;
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

//Рекурсивно выводит структуру дерева значений результата
Процедура ВывестиСтрокиДерева(ДеревоРезультатов, Уровень = 0, ДокументРезультат, Макет, УчетнаяПолитика)
	ОбластьГруппа   	 = Макет.ПолучитьОбласть("Группа");
	ОбластьСтрока        = Макет.ПолучитьОбласть("Строка");
	Для Каждого Строка из ДеревоРезультатов.Строки Цикл
		Отступ = "";
		Для  н = 1 по Уровень Цикл
			Отступ = Отступ + "    ";
		КонецЦикла;
		
		Если Строка.Количество = 0 И Строка.Стоимость = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Строки.Количество() = 0 Тогда //детальные строки
			ОбластьСтрока.Параметры.ДатаОперации = Строка.ДатаОперации;
			ОбластьСтрока.Параметры.ОснованиеВыбытия = Строка.Регистратор;
			ОбластьСтрока.Параметры.Количество = Строка.Количество;
			ОбластьСтрока.Параметры.Цена = ?(Строка.Количество = 0, 0, Строка.Стоимость/Строка.Количество);
			ОбластьСтрока.Параметры.Стоимость = Строка.Стоимость;
			ОбластьСтрока.Параметры.Расшифровка = Строка.Регистратор;
			ДокументРезультат.Вывести(ОбластьСтрока);
		Иначе //группировка, содержащая подчиненные строки
			СтрокаГруппы = "";
			Для Н = 0 по Уровень Цикл
				СтрокаГруппы = СтрокаГруппы + Строка(Строка[Н]);
			КонецЦикла;
			ОбластьГруппа.Параметры.Группа = Отступ + СтрокаГруппы;
			ОбластьГруппа.Параметры.ГрКоличество = Строка.Количество;
			ОбластьГруппа.Параметры.ГрСтоимость = Строка.Стоимость;
			Если ЗначениеЗаполнено(СтрокаГруппы) Тогда
				ДокументРезультат.Вывести(ОбластьГруппа);
			КонецЕсли;
		КонецЕсли;
		ВывестиСтрокиДерева(Строка, Уровень+1, ДокументРезультат, Макет, УчетнаяПолитика);
	КонецЦикла;
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ДокументРезультат.Очистить();

	Макет = ПолучитьМакет("Отчет");

	ОбластьЗаголовок  = Макет.ПолучитьОбласть("Заголовок");
	
    СрезСведений = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаКон, Ложь, Организация);
	УчетнаяПолитика = ?(СрезСведений.Количество() = 0, Перечисления.СпособыОценки.ПустаяСсылка(), СрезСведений.СпособОценкиМПЗ);
	Заголовок = "Регистр учета стоимости";
	Если ВидТМЦ = 1 Тогда
		Заголовок = Заголовок + " материалов, списанных";
	ИначеЕсли ВидТМЦ = 2 Тогда
		Заголовок = Заголовок + " продукции, списанной";
	ИначеЕсли ВидТМЦ = 3 Тогда
		Заголовок = Заголовок + " полуфабрикатов, списанных";
	Иначе
		Заголовок = Заголовок + " товаров, списанных";
	КонецЕсли;
	Если УчетнаяПолитика = Перечисления.СпособыОценки.ФИФО Тогда
		Заголовок = Заголовок + " в отчетном периоде по методу ФИФО";
	ИначеЕсли УчетнаяПолитика = Перечисления.СпособыОценки.ЛИФО Тогда
		Заголовок = Заголовок + " в отчетном периоде по методу ЛИФО";
	Иначе
		Заголовок = Заголовок + " в отчетном периоде";
	КонецЕсли;

	ОбластьЗаголовок.Параметры.НачалоПериода       = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.КонецПериода        = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.ИННОрганизации      = "" + Организация.ИНН + " / " + Организация.КПП;
	ОбластьЗаголовок.Параметры.Заголовок		   = заголовок;
	ДокументРезультат.Вывести(ОбластьЗаголовок);

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;

	// Проверим заполнение обязательных реквизитов
	Если НалоговыйУчет.ПроверитьЗаполнениеОбязательныхРеквизитов(ДатаНач,ДатаКон,Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаНачала",      Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКонца",      Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Организация);
	УчетнаяПолитика = ?(СрезСведений.Количество() = 0, Перечисления.СпособыОценки.ПустаяСсылка(), СрезСведений.СпособОценкиМПЗ);

	УчетПоСредней = ?(УчетнаяПолитика = Перечисления.СпособыОценки.ПоСредней, Истина, Ложь);
		
	Если ВидТМЦ = 1 Тогда
		Запрос.УстановитьПараметр("СчетУчета",    Счет10);
		Запрос.УстановитьПараметр("СчетУчетаОтг",    Счет45_41);
	ИначеЕсли ВидТМЦ = 2 Тогда
		Запрос.УстановитьПараметр("СчетУчета",    Счет43);
		Запрос.УстановитьПараметр("СчетУчетаОтг",    Счет45_43);
	ИначеЕсли ВидТМЦ = 3 Тогда
		Запрос.УстановитьПараметр("СчетУчета",    Счет21);
        Запрос.УстановитьПараметр("СчетУчетаОтг",    Счет45_21);
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Счет41);
		Массив.Добавить(Счет42);
		Запрос.УстановитьПараметр("СчетУчета",    Массив);
		Запрос.УстановитьПараметр("СчетУчетаОтг",    Счет45_41);
	КонецЕсли;
		Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
		Запрос.УстановитьПараметр("Счет107",    ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК ДокументОприходования,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК КодОперации,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК КорСчет,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК КорСубконто1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК КорСубконто2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК КорСубконто3,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт, 0)) КАК КоличествоРасход,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаНУКт, 0)) КАК СтоимостьРасход
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|		&ДатаНачала,
	|		&ДатаКонца,
	|		Организация = &Организация
	|		    И СчетКт "+?(ВидТМЦ < 2,"В ИЕРАРХИИ (&СчетУчета) И Не СчетКт В ИЕРАРХИИ (&Счет107)"," В ИЕРАРХИИ (&СчетУчета)")+" И СчетДт <> &СчетУчетаОтг
	|		   ) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3";
	
	Если ВидТМЦ <> 1 Тогда
		Запрос.Текст = Запрос.Текст + " 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Регистратор,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.КоличествоКт = NULL
		|				ТОГДА 0
		|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.КоличествоКт
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт = NULL
		|				ТОГДА 0
		|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУКт
		|		КОНЕЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНачала,
		|		&ДатаКонца,
		|		Организация = &Организация
		|		    И СчетКт = &СчетУчетаОтг) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.Регистратор,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + " 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Номенклатура,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК ДокументОприходования,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК КодОперации,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК КорСчет,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК КорСубконто1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК КорСубконто2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК КорСубконто3,
		|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт, 0)) КАК КоличествоРасход,
		|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаНУКт, 0)) КАК СтоимостьРасход
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНачала,
		|		&ДатаКонца,
		|		Организация = &Организация
		|		    И СчетКт В ИЕРАРХИИ (&Счет107)) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.Регистратор,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3";
	
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
    ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
    
	СписокВидов = Новый СписокЗначений();
	Для каждого ЭлементСписка из ВидыРасходов Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокВидов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	
	КолГрупп = 0;
	Для Каждого Группировка ИЗ Показатели Цикл
		Если Группировка.Использование Тогда
			ТаблицаРезультатов.Колонки.Добавить(Группировка.Имя);
			КолГрупп = КолГрупп + 1;
		КонецЕсли;
	КонецЦикла;
	КолГрупп = КолГрупп + 1;
	ТаблицаРезультатов.Колонки.Добавить("ДатаОперации");
	ТаблицаРезультатов.Колонки.Добавить("Регистратор");
	ТаблицаРезультатов.Колонки.Добавить("Количество");
	ТаблицаРезультатов.Колонки.Добавить("Стоимость");
	Если ТаблицаРезультатов.Колонки.Найти("Товар") = Неопределено И УчетПоСредней Тогда
			ТаблицаРезультатов.Колонки.Добавить("Товар");
	КонецЕсли;
	
	ТаблицаЦен = Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Количество");
	ТаблицаЦен.Колонки.Добавить("Стоимость");
	ТаблицаЦен.Колонки.Добавить("Товар");
	ТаблицаЦен.Индексы.Добавить("Товар");

	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Регистратор) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВида = ВидРасходаПоОперации(Выборка.КорСчет, Выборка.КорСубконто1, Выборка.КорСубконто2, Выборка.КорСубконто3, Выборка.КодОперации);
		Если СписокВидов.НайтиПоЗначению(СтруктураВида.ВидРасхода) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыРезультатов = ТаблицаРезультатов.Добавить();
		СтрокаТаблицыРезультатов.ДатаОперации = Выборка.Регистратор.Дата;
		СтрокаТаблицыРезультатов.Регистратор = Выборка.Регистратор;
		СтрокаТаблицыРезультатов.Количество = Выборка.КоличествоРасход;
		СтрокаТаблицыРезультатов.Стоимость = Выборка.СтоимостьРасход;

		Если НЕ ТаблицаРезультатов.Колонки.Найти("ХарактерЗатрат") = Неопределено Тогда
			СтрокаТаблицыРезультатов.ХарактерЗатрат = СтруктураВида.ВидРасхода;
		КонецЕсли;
		Если НЕ ТаблицаРезультатов.Колонки.Найти("ОбъектУчета") = Неопределено Тогда
			СтрокаТаблицыРезультатов.ОбъектУчета = СтруктураВида.ОбъектУчета;
		КонецЕсли;
		Если НЕ ТаблицаРезультатов.Колонки.Найти("Товар") = Неопределено Тогда
			СтрокаТаблицыРезультатов.Товар = Выборка.Номенклатура;
		КонецЕсли;
		Если НЕ ТаблицаРезультатов.Колонки.Найти("Склад") = Неопределено Тогда
			СтрокаТаблицыРезультатов.Склад = Выборка.ДокументОприходования;
		КонецЕсли;
		Если УчетПоСредней Тогда
			СтрокаТаблицаЦен = ТаблицаЦен.Добавить();
			СтрокаТаблицаЦен.Товар = Выборка.Номенклатура;
			СтрокаТаблицаЦен.Количество = Выборка.КоличествоРасход;
			СтрокаТаблицаЦен.Стоимость = Выборка.СтоимостьРасход;
		КонецЕсли;
	КонецЦикла;
	
	Если УчетПоСредней Тогда
		ТаблицаЦен.Свернуть("Товар", "Количество, Стоимость");
		Для Каждого СтрокаТаблицыРезультатов Из ТаблицаРезультатов Цикл
			СтрокаТаблицыЦен = ТаблицаЦен.Найти(СтрокаТаблицыРезультатов.Товар, "Товар");
			Если СтрокаТаблицыЦен = Неопределено Тогда
				Цена = СтрокаТаблицыЦен.Стоимость;
			ИначеЕсли СтрокаТаблицыЦен.Количество = 0 Тогда
				Цена = СтрокаТаблицыЦен.Стоимость;
			Иначе
				Цена = СтрокаТаблицыЦен.Стоимость / СтрокаТаблицыЦен.Количество;
		КонецЕсли;
			    СтрокаТаблицыРезультатов.Стоимость = СтрокаТаблицыЦен.Стоимость;
		КонецЦикла;
		Если ТаблицаРезультатов.Колонки.Найти("Товар") = Неопределено Тогда  
			ТаблицаРезультатов.Свернуть("Регистратор" + ?(ТаблицаРезультатов.Колонки.Найти("Склад") = Неопределено,"",", ДокументОприходования"), "Количество, Стоимость");
			
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРезультатов = ВДеревоСГруппировкой(ТаблицаРезультатов, КолГрупп);
	СтрокаСортировки = "";
	Для Колонка = 0 по КолГрупп - 1 Цикл
		СтрокаСортировки = СтрокаСортировки + ДеревоРезультатов.Колонки[Колонка].Имя + " ,"; 
	КонецЦикла;
	ДеревоРезультатов.Строки.Сортировать(СтрокаСортировки, Истина);
	
	//Вывести строки
	ВывестиСтрокиДерева(ДеревоРезультатов, 0, ДокументРезультат, Макет, УчетнаяПолитика);
	
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.ИтогоСтоимость = ДеревоРезультатов.Строки.Итог("Стоимость");
	
	СтруктураЛиц = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаКон);
	ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = СтруктураЛиц.ОтветственныйЗаРегистры;
	ДокументРезультат.Вывести(ОбластьПодвал);

КонецПроцедуры // СформироватьОтчет

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП           = Новый НастройкаПериода;

Счет07       = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
Счет08       = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы;
Счет08_01    = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;
Счет08_02    = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования;
Счет08_03    = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
Счет08_04    = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
Счет08_05    = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
Счет08_08    = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
Счет10       = ПланыСчетов.Хозрасчетный.Материалы;

Счет20       = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_;
Счет21       = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
Счет23       = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
Счет25       = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
Счет26       = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
Счет28       = ПланыСчетов.Хозрасчетный.БракВПроизводстве;
Счет29       = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства;

Счет41       = ПланыСчетов.Хозрасчетный.Товары;
Счет42       = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
Счет43       = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
Счет44       = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
Счет44_01    = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;

Счет45       = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
Счет45_21    = ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные;
Счет45_41    = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
Счет45_43    = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная;

Счет58_01_1  = ПланыСчетов.Хозрасчетный.Паи;
Счет58_01_2  = ПланыСчетов.Хозрасчетный.Акции;
Счет58_02    = ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги;
Счет58_05    = ПланыСчетов.Хозрасчетный.ПриобретенныеПрава;

Счет90_02    = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
Счет91_02    = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
Счет94    	 = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
Счет97       = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов;

#КонецЕсли