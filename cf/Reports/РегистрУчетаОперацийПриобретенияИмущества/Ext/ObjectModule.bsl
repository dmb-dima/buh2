#Если Клиент Тогда
	
	Перем НП Экспорт;
	
	Перем Счет07;
	Перем Счет08;
	Перем Счет08_01;
	Перем Счет08_02;
	Перем Счет08_03;
	Перем Счет08_04;
	Перем Счет08_05;
	Перем Счет08_08;
	Перем Счет10;
	Перем Счет20;
	Перем Счет23;
	Перем Счет25;
	Перем Счет26;
	Перем Счет28;
	Перем Счет29;
	Перем Счет41;
	Перем Счет44;
	Перем Счет44_01;
	Перем Счет58_01_1;
	Перем Счет58_01_2;
	Перем Счет58_02;
	Перем Счет58_05;
	Перем Счет91_01;
	Перем Счет91_02;
	Перем Счет91_02_1;
	Перем Счет91_02_2;
	Перем Счет91_02_3;
	Перем Счет91_02_4;
	Перем Счет91_02_5;
	Перем Счет91_02_7;
	Перем Счет91_02_9;
	Перем Счет97;
	
	Перем СчетаРасчетов,СчетаРасчетовИсключений;
	Перем СчетаВозврата;
	Перем СчетаЦелевогоФинансирования;
	Перем СчетаДенежныхСредств;
	
	
	// Формирует массив в который помещает только отмеченные
	// в списке значения.
	//
	// Параметры:
	// СписокЗначений - список значений из которого выбираются элементы
	Функция МассивИзПомеченныхЭлементов(СписокЗначений)
		
		Массив = Новый СписокЗначений;
		
		Для каждого ЭлементСписка из СписокЗначений Цикл
			
			Если ЭлементСписка.Пометка Тогда
				Массив.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Массив;
		
	КонецФункции
	
	Функция ВидРасходаПоОперации(Счет, Субконто1, Субконто2, Субконто3, Выборка)
		
		ВидРасхода       = "";
		ОбъектУчета      = "";
		ДатаПринятия     = "";
		ДокументПринятия = "";
		
		СубконтоКт1 = Выборка.СубконтоКт1;
		
		Попытка
			СтатьяЗатрат = Субконто1;
			ВидЗатратНалоговогоУчета = Субконто1.ВидРасходовНУ;
		Исключение
			Попытка
				СтатьяЗатрат = Субконто2;
				ВидЗатратНалоговогоУчета = Субконто2.ВидРасходовНУ;
			Исключение
				
				Попытка
					СтатьяЗатрат = Субконто3;
					ВидЗатратНалоговогоУчета = Субконто3.ВидПрочихДоходовИРасходов;
				Исключение
					СтатьяЗатрат = Субконто1;
					ВидЗатратНалоговогоУчета = "";
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;  
		
		ОбъектУчета = Строка(СтатьяЗатрат);
		
		Если Выборка.КорСчет.ПринадлежитЭлементу(Счет91_01) ИЛИ Выборка.КорСчет = Счет91_01 Тогда
			ВидРасхода = "Без расходов";
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураНаименованиеПолное) Тогда
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			КонецЕсли;
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет07) ИЛИ Счет = Счет07 Тогда
			ВидРасхода  = "На приобретение оборудования, требующего монтажа";
			ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			Если  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
				ОбъектУчета = СокрЛП(Выборка.СубконтоДт2);
			ИначеЕсли  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
				ОбъектУчета = СокрЛП(Выборка.СубконтоДт3);	 
			ИначеЕсли  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
				ОбъектУчета = Строка(Субконто1);
			КонецЕсли;
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет08) ИЛИ Счет = Счет08 Тогда
			ВидРасхода  = "На приобретение ОС";
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураНаименованиеПолное) Тогда
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			КонецЕсли;
			
			ДокументПринятия = "";
			ДатаПринятия     = "";
			ДокументыПринятия = Новый СписокЗначений;
			
			// Попробуем найти операции принятия к учету внеоборотных активов.			 
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Счет",        Счет);
			Запрос.УстановитьПараметр("Субконто1",   Субконто1);
			Запрос.УстановитьПараметр("Субконто2",   Субконто2);
			Запрос.УстановитьПараметр("Субконто3",   Субконто3);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("НачПериода",  Выборка.ДатаОперации);
			Запрос.УстановитьПараметр("КонПериода",  КонецДня(ДатаКон));
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХозрасчетныйДвиженияССубконто.Регистратор КАК ДокументПринятия,
			|	ХозрасчетныйДвиженияССубконто.Период      КАК ДатаПринятия
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
			|		&НачПериода,
			|		&КонПериода,
			|		Организация = &Организация
			|		    И Активность = Истина
			|			И СчетКт = &Счет
			|			" + ?(?(ЗначениеЗаполнено(Субконто1), НЕ (Счет.ВидыСубконто[0].ТолькоОбороты = Истина), Ложь), "И СубконтоКт1 = &Субконто1", "") + "
			|			" + ?(?(ЗначениеЗаполнено(Субконто2), НЕ (Счет.ВидыСубконто[1].ТолькоОбороты = Истина), Ложь), "И СубконтоКт2 = &Субконто2", "") + "
			|			" + ?(?(ЗначениеЗаполнено(Субконто3), НЕ (Счет.ВидыСубконто[2].ТолькоОбороты = Истина), Ложь), "И СубконтоКт3 = &Субконто3", "") + "
			|			) КАК ХозрасчетныйДвиженияССубконто
			|";
			ВыборкаОбъектовУчета = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаОбъектовУчета.Следующий() Цикл
				ДокументПринятия = ДокументПринятия + ?(НЕ ЗначениеЗаполнено(ДокументПринятия), "", ", ") + ВыборкаОбъектовУчета.ДокументПринятия;
				ДатаПринятия     = ДатаПринятия + ?(НЕ ЗначениеЗаполнено(ДатаПринятия), "", ", ") + Формат(ВыборкаОбъектовУчета.ДатаПринятия, "ДФ=dd.MM.yyyy");
				ДокументыПринятия.Добавить(ВыборкаОбъектовУчета.ДокументПринятия);
				
			КонецЦикла;
			
			Если Счет.ПринадлежитЭлементу(Счет08_01) ИЛИ Счет = Счет08_01 ИЛИ
				Счет.ПринадлежитЭлементу(Счет08_02) ИЛИ Счет = Счет08_02 ИЛИ
				Счет.ПринадлежитЭлементу(Счет08_03) ИЛИ Счет = Счет08_03 ИЛИ
				Счет.ПринадлежитЭлементу(Счет08_04) ИЛИ Счет = Счет08_04 Тогда
				
			ИначеЕсли Счет.ПринадлежитЭлементу(Счет08_05) ИЛИ Счет = Счет08_05 Тогда
				ВидРасхода = "На приобретение НМА";
				
			ИначеЕсли Счет.ПринадлежитЭлементу(Счет08_08) ИЛИ Счет = Счет08_08 Тогда
				ВидРасхода = "На НИОКР";
				
			КонецЕсли;
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет10) ИЛИ Счет = Счет10 Тогда
			ВидРасхода  = "На приобретение материалов";
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураНаименованиеПолное) Тогда
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет41) ИЛИ Счет = Счет41 Тогда
			ВидРасхода = "На приобретение товаров";
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураНаименованиеПолное) Тогда
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет58_01_1) ИЛИ Счет = Счет58_01_1 Тогда
			ВидРасхода  = "На приобретение паев";
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураНаименованиеПолное) Тогда
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ОбъектУчета = СокрЛП(Выборка.НоменклатураНаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет58_01_2) ИЛИ Счет = Счет58_01_2
			ИЛИ Счет.ПринадлежитЭлементу(Счет58_02)   ИЛИ Счет = Счет58_02 Тогда
			ВидРасхода  = "На приобретение ценных бумаг";
			ОбъектУчета = Строка(Субконто1) + " (" + Строка(Субконто2) + ")";
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет58_05) ИЛИ Счет = Счет58_05 Тогда
			ВидРасхода  = "На приобретение прав требования";
			ОбъектУчета = Строка(Субконто1) + " (" + Строка(Субконто2) + ")";
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет44_01) ИЛИ Счет = Счет44_01 Тогда
			Если ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
				ВидРасхода = "Транспортные расходы";
			КонецЕсли;
			
		ИначеЕсли  (Счет.ПринадлежитЭлементу(Счет44) ИЛИ Счет = Счет44 Или
			Счет.ПринадлежитЭлементу(Счет20) ИЛИ  Счет = Счет20 Или
			Счет.ПринадлежитЭлементу(Счет23) ИЛИ  Счет = Счет23 Или
			Счет.ПринадлежитЭлементу(Счет25) ИЛИ  Счет = Счет25 Или
			Счет.ПринадлежитЭлементу(Счет26) ИЛИ  Счет = Счет26 Или
			Счет.ПринадлежитЭлементу(Счет28) ИЛИ  Счет = Счет28 Или
			Счет.ПринадлежитЭлементу(Счет29)) Или Счет = Счет29 Тогда
			
			Если ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда	   
				
				ВидРасхода = "Представительские расходы";
				
			ИначеЕсли ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
				ВидРасхода = "Расходы на рекламу (нормируемые)";
				
			ИначеЕсли ВидЗатратНалоговогоУчета = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				ВидРасхода = "Расходы, не учитываемые в целях налогообложения";
				
			Иначе
				
				ВидРасхода = "Другие существенные условия";
			КонецЕсли;

			
		ИначеЕсли Счет = Счет91_02 Или Счет.ПринадлежитЭлементу(Счет91_02) Тогда
			Если  Субконто1.ВидПрочихДоходовИРасходов = Счет91_02_1 Тогда
				ВидРасхода = "Расходы на реализацию ОС";
				ОбъектУчета = Строка(Субконто2);
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов =  Счет91_02_2 Тогда
				ВидРасхода = "Расходы на реализацию НМА";
				ОбъектУчета = Строка(Субконто2);
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов =  Счет91_02_3 Тогда
				Если ТипЗнч(Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если НЕ Субконто2.Услуга Тогда
						ВидРасхода = "Расходы на реализацию прочего имущества";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов =  Счет91_02_4 Тогда
				ВидРасхода = "Расходы, связанные с реализацией имущественных прав";
				ОбъектУчета = Строка(Субконто2) + " (" + Строка(Субконто3) + ")";
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов =  Счет91_02_5 Тогда
				ВидРасхода = "Расходы, связанные с реализацией ЦБ";
				ОбъектУчета = Строка(Субконто2);
				
			ИначеЕсли выборка.УсловиеПоступления = 91 Тогда
				ВидРасхода  = "Прочие доходы";
				ОбъектУчета = Строка(Субконто1);
				
			ИначеЕсли Не Субконто1.ПринятиеКналоговомуУчету Тогда
				ВидРасхода = "Расходы, не учитываемые в целях налогообложения";
				
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
				ВидРасхода = "Внереализационные расходы";
				ОбъектУчета = Строка(Субконто1);
				
			ИначеЕсли Субконто1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы Тогда
				ВидРасхода = "Прочие косвенные расходы";
				ОбъектУчета = Строка(Субконто1);
			Иначе
				ВидРасхода = "Другие существенные условия";
				ОбъектУчета = Строка(Субконто1);
			КонецЕсли;
			
			
		ИначеЕсли Счет.ПринадлежитЭлементу(Счет97) ИЛИ Счет = Счет97 Тогда
			ВидРасхода = "Прочие РБП";
			//На долгосрочное страхование жизни
			//На освоение природных ресурсов
			//Страхование на оплату медицинских расходов
			//Страхование на случай смерти и утраты трудоспособности
			
		Иначе
			ВидРасхода = "Без расходов";
			
		КонецЕсли;
		
		Если  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
			ОбъектУчета = СокрЛП(Выборка.СубконтоДт2);
		ИначеЕсли  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
			ОбъектУчета = СокрЛП(Выборка.СубконтоДт3);	 
		ИначеЕсли  НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
			ОбъектУчета = Строка(Субконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументПринятия) Тогда
			ДокументПринятия = Выборка.Регистратор;	
			ДатаПринятия = Формат(Выборка.Регистратор.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Возврат Новый Структура("ВидРасхода, ОбъектУчета, ДатаПринятия, ДокументПринятия, ДокументыПринятия", ВидРасхода, ОбъектУчета, ДатаПринятия, ДокументПринятия, ДокументыПринятия);
		
	КонецФункции
	
	Функция ВидРасходаСоответствуетКритериюОтбора(ВидРасхода)
		
		Соответствие        = ЛОЖЬ;
		НайденныйВидРасхода = ВидыРасходов.НайтиПоЗначению(ВидРасхода);
		
		Если НайденныйВидРасхода <> Неопределено Тогда
			
			Если НайденныйВидРасхода.Пометка Тогда
				Соответствие = ИСТИНА;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Соответствие;
		
	КонецФункции
	
	Функция УсловиеПоступленияСоответствуетКритериюОтбора(УсловиеПоступления)
		
		Соответствие = ЛОЖЬ;
		НайденноеУсловиеПоступления = УсловияПолучения.НайтиПоЗначению(УсловиеПоступления);
		
		Если НайденноеУсловиеПоступления <> Неопределено Тогда
			
			Если НайденноеУсловиеПоступления.Пометка Тогда
				Соответствие = ИСТИНА;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Соответствие;
		
	КонецФункции
	
	Функция ПолучитьНаименованиеУсловияПоступления(УсловиеПоступления)
		
		НайденныйЭлемент = УсловияПолучения.НайтиПоЗначению(УсловиеПоступления);
		Если НайденныйЭлемент<>Неопределено Тогда
			Возврат НайденныйЭлемент.Представление;
		КонецЕсли;
		
		Возврат "";
		
	КонецФункции // ПолучитьУсловиеВыбытия()
	
	// Выполняет запрос и формирует табличный документ-результат отчета
	// в соответствии с настройками, заданными значениями реквизитов отчета.
	//
	// Параметры:
	//	ДокументРезультат - табличный документ, формируемый отчетом
	//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
	//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
	//
	Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
		
		ДокументРезультат.Очистить();
		
		Макет = ПолучитьМакет("Отчет");
		
		ОбластьЗаголовок  = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьЗаголовок.Параметры.НачалоПериода       = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры.КонецПериода        = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
		НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		ОбластьЗаголовок.Параметры.ИННОрганизации      = "" + Организация.ИНН + "/" + Организация.КПП;
		
		// Подсчитаем количество отмеченных условий получения.
		КоличествоОтмеченных = 0;
		Для Каждого УсловиеПолучения Из УсловияПолучения Цикл
			Если УсловиеПолучения.Пометка Тогда
				КоличествоОтмеченных = КоличествоОтмеченных + 1;
			КонецЕсли;
		КонецЦикла;
		ОбластьЗаголовок.Параметры.УсловияПолучения = ?(КоличествоОтмеченных > 0, 
		?(КоличествоОтмеченных = УсловияПолучения.Количество(), "По всем", "Выборочно"),					  
		"");
		
		// Подсчитаем количество отмеченных видов расходов.
		КоличествоОтмеченных = 0;
		Для Каждого ВидРасхода Из ВидыРасходов Цикл
			Если ВидРасхода.Пометка Тогда
				КоличествоОтмеченных = КоличествоОтмеченных + 1;
			КонецЕсли;
		КонецЦикла;
		ОбластьЗаголовок.Параметры.ВидыРасхода = ?(КоличествоОтмеченных > 0, 
		?(КоличествоОтмеченных = ВидыРасходов.Количество(), "По всем", "Выборочно"),
		"");
		
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		
		// Параметр для показа заголовка
		ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;
		
		// Когда нужен только заголовок:
		Если ТолькоЗаголовок Тогда
			Возврат;
		КонецЕсли;
		
		// Проверим заполнение обязательных реквизитов
		Если НалоговыйУчет.ПроверитьЗаполнениеОбязательныхРеквизитов(ДатаНач,ДатаКон,Организация) Тогда
			Возврат;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
			ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
		КонецЕсли;
		
		МассивУсловийПолучений = МассивИзПомеченныхЭлементов(УсловияПолучения);
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьПодвалТаблицы   = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",				Организация);
		Запрос.УстановитьПараметр("ДатаНач",					НачалоДня(ДатаНач));
		Запрос.УстановитьПараметр("ДатаКон",					КонецДня(ДатаКон));
		Запрос.УстановитьПараметр("СчетаРасчетов",				СчетаРасчетов);
		Запрос.УстановитьПараметр("СчетаРасчетовИсключений",    СчетаРасчетовИсключений);

		Запрос.УстановитьПараметр("СчетаВозврата",				СчетаВозврата);
		Запрос.УстановитьПараметр("СчетаЦелевогоФинансирования",СчетаЦелевогоФинансирования);
		Запрос.УстановитьПараметр("СчетаДенежныхСредств",		СчетаДенежныхСредств);
		Запрос.УстановитьПараметр("Счет91",						ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ВнереализационныеДоходы",	Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
		Запрос.УстановитьПараметр("СчетаЗатрат",	Массив);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
		|	""ЗаПлату"" КАК УсловиеПоступления,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1.НаименованиеПолное КАК СТРОКА(200)) КАК НоменклатураНаименованиеПолное,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2.НаименованиеПолное КАК СТРОКА(200)) КАК КонтрагентНаименованиеПолное,
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт КАК Сумма,
		|	ХозрасчетныйОборотыДтКт.КоличествоДт КАК Количество,
		|	ХозрасчетныйОборотыДтКт.Период КАК ДатаОперации,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|	ХозрасчетныйОборотыДтКт.Содержание КАК НаименованиеОперации,
		|	ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК Подразделение,
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК КорСчет,
		|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование + "", "" + ХозрасчетныйОборотыДтКт.СубконтоКт2.Наименование КАК Основание
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			(СчетКт В ИЕРАРХИИ (&СчетаРасчетов)
		|				ИЛИ СчетКт В ИЕРАРХИИ (&СчетаДенежныхСредств))
		|				И Организация = &Организация
		|				И Активность = ИСТИНА
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаРасчетовИсключений))
		|				И ((НЕ СчетКт В ИЕРАРХИИ (&СчетаЦелевогоФинансирования))
		|					И (НЕ СчетДт В ИЕРАРХИИ (&СчетаРасчетов))
		|					И (НЕ СчетДт В ИЕРАРХИИ (&СчетаДенежныхСредств)))) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
		|	""ЗаПлату"",
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт2.НаименованиеПолное КАК СТРОКА(200)),
		|	-ХозрасчетныйОборотыДтКт.СуммаНУДт,
		|	-ХозрасчетныйОборотыДтКт.КоличествоКт,
		|	ХозрасчетныйОборотыДтКт.Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.Содержание,
		|	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.Организация,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование + "", "" + ХозрасчетныйОборотыДтКт.СубконтоКт2.Наименование
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			СчетДт В ИЕРАРХИИ (&СчетаРасчетов)
		|				И СчетКт В ИЕРАРХИИ (&СчетаВозврата)
		|				И Организация = &Организация
		|				И Активность = ИСТИНА
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаРасчетов))) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
		|	91,
		|	91,
		|	91,
		|	""ИныеУсловия"",
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1.НаименованиеПолное КАК СТРОКА(200)),
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
		|	ХозрасчетныйОборотыДтКт.Сумма,
		|	ХозрасчетныйОборотыДтКт.КоличествоДт,
		|	ХозрасчетныйОборотыДтКт.Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.Содержание,
		|	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.Организация,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование + "", "" + ХозрасчетныйОборотыДтКт.СубконтоКт2.Наименование
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			СчетКт В ИЕРАРХИИ (&Счет91)
		|				И Организация = &Организация
		|				И Активность = ИСТИНА
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаРасчетов))
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаДенежныхСредств))) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3,
		|	""ЦелевоеФинансирование"",
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1.НаименованиеПолное КАК СТРОКА(200)),
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2.НаименованиеПолное КАК СТРОКА(200)),
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт,
		|	ХозрасчетныйОборотыДтКт.КоличествоДт,
		|	ХозрасчетныйОборотыДтКт.Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.Содержание,
		|	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.Организация,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование + "", "" + ХозрасчетныйОборотыДтКт.СубконтоКт2.Наименование
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			СчетКт В ИЕРАРХИИ (&СчетаЦелевогоФинансирования)
		|				И Организация = &Организация
		|				И Активность = ИСТИНА
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаЦелевогоФинансирования))
		|				И (НЕ СчетДт В ИЕРАРХИИ (&СчетаДенежныхСредств))) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СуммаНУДт > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОперации
		|ИТОГИ ПО
		|	ДатаОперации,
		|	СчетДт ТОЛЬКО ИЕРАРХИЯ";
		Результат = Запрос.Выполнить();
		
		ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
		ИтогоСумма = 0;
		ИтогоКоличество = 0;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если (Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке) ИЛИ
				(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидРасхода			= ВидРасходаПоОперации(Выборка.СчетДт, Выборка.СубконтоДт1, Выборка.СубконтоДт2, Выборка.СубконтоДт3, Выборка);
			УсловиеПоступления	= ?(Выборка.УсловиеПоступления=91,"ЗаПлату",Выборка.УсловиеПоступления);
			
			Если ВидРасходаСоответствуетКритериюОтбора(ВидРасхода.ВидРасхода)
				И УсловиеПоступленияСоответствуетКритериюОтбора(УсловиеПоступления)
				Тогда
				
				ОбластьСтрока.Параметры.Дата					= Формат(Выборка.ДатаОперации, "ДФ=dd.MM.yyyy");
				ОбластьСтрока.Параметры.НаименованиеОперации	= ?(НЕ ЗначениеЗаполнено(Выборка.НаименованиеОперации),Выборка.Регистратор.Метаданные().Синоним,Выборка.НаименованиеОперации);
				ОбластьСтрока.Параметры.УсловиеПоступления		= ПолучитьНаименованиеУсловияПоступления(УсловиеПоступления);
				ОбластьСтрока.Параметры.Основание				= Выборка.Основание;
				ОбластьСтрока.Параметры.ВидРасхода				= ВидРасхода.ВидРасхода;
				ОбластьСтрока.Параметры.Количество				= Выборка.Количество;
				ОбластьСтрока.Параметры.Сумма					= Выборка.Сумма;
				ОбластьСтрока.Параметры.Расшифровка				= Выборка.Регистратор;
				ОбластьСтрока.Параметры.РасшифровкаПринятия		= ВидРасхода.ДокументыПринятия;
				ОбластьСтрока.Параметры.ОбъектУчета				= ВидРасхода.ОбъектУчета;
				ОбластьСтрока.Параметры.ДатаВвода				= ВидРасхода.ДатаПринятия;
				ОбластьСтрока.Параметры.ОснованиеОбъектаУчета	= ВидРасхода.ДокументПринятия;
				
				ДокументРезультат.Вывести(ОбластьСтрока);
				
				ИтогоСумма      = ИтогоСумма      + ?(Выборка.Сумма =      Null, 0, Выборка.Сумма);
				ИтогоКоличество = ИтогоКоличество + ?(Выборка.Количество = Null, 0, Выборка.Количество);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураЛиц = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаКон);
		ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтруктураЛиц.ОтветственныйЗаРегистры);
		ОбластьПодвалТаблицы.Параметры.ИтогоСумма = ИтогоСумма;
		ОбластьПодвалТаблицы.Параметры.ИтогоКоличество = ИтогоКоличество;
		ДокументРезультат.Вывести(ОбластьПодвалТаблицы);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
	// 
	
	НП = Новый НастройкаПериода;
	
	Счет07       = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	Счет08       = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы;
	Счет08_01    = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;
	Счет08_02    = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования;
	Счет08_03    = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	Счет08_04    = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	Счет08_05    = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
	Счет08_08    = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
	Счет10       = ПланыСчетов.Хозрасчетный.Материалы;
	
	Счет20       = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	Счет23       = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
	Счет25       = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
	Счет26       = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	Счет28       = ПланыСчетов.Хозрасчетный.БракВПроизводстве;
	Счет29       = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства;
	
	Счет41       = ПланыСчетов.Хозрасчетный.Товары;
	Счет44       = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
	Счет44_01    = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	
	Счет58_01_1  = ПланыСчетов.Хозрасчетный.Паи;
	Счет58_01_2  = ПланыСчетов.Хозрасчетный.Акции;
	Счет58_02    = ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги;
	Счет58_05    = ПланыСчетов.Хозрасчетный.ПриобретенныеПрава;
	
	Счет91_01    = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_02    = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Счет91_02_1  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
	Счет91_02_2  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
	Счет91_02_3  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
	Счет91_02_4  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
	Счет91_02_44  =Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
	Счет91_02_5  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;
	Счет91_02_9  = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
	
	Счет97       = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов;
	
	СчетаРасчетов      = Новый Массив;
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	
	СчетаРасчетовИсключений = Новый СписокЗначений();
	СчетаРасчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	СчетаВозврата = Новый СписокЗначений();
	СчетаВозврата.Добавить(Счет10);
	СчетаВозврата.Добавить(Счет41);
	
	СчетаЦелевогоФинансирования = Новый СписокЗначений();
	СчетаЦелевогоФинансирования.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);
	
	СчетаДенежныхСредств = Новый СписокЗначений();
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	
#КонецЕсли