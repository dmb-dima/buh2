////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Возводится в Истина, при печати, по окончании печати, возвращается в Ложь.
Перем мРежимПечати Экспорт;

// Признак "горячей" смены организации в декларации
Перем мВПрограммеИзмененаОрганизация;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Входят в многострочную часть
Перем мКБК1;
Перем мКодОКАТО1;
Перем мСуммаНалогДоплата1;
Перем мКБК2;
Перем мКодОКАТО2;
Перем мСуммаНалогУменьш1;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;
Перем мОписаниеТиповБулево;

Перем мДокументВосстановлен;

// Переменная для определения режима работы с отчетом. Без открытия или открыт.
Перем мБезОткрытияФормы Экспорт;

// Поля поиска показателей в таблице состава показателей.
// Должна быть не во всех отчетах, используется в функции роОпределитьСтраницуПанели
Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мВсегоЧисленность;
Перем мПоСостояниюНаДату;

Перем мДанныеОтчета Экспорт;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки Экспорт;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		// Очистим значения.
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПериод", 8, "        ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Численность", 6, "        ");
		мВсегоЧисленность = 0;
		мПоСостояниюНаДату = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

		СтруктураДанныхПоля.Вставить("ВсегоЧисленность", мВсегоЧисленность);
		СтруктураДанныхПоля.Вставить("ПоСостояниюНаДату", мПоСостояниюНаДату);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ПоСостояниюНаДату" Тогда
		мПоСостояниюНаДату = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ВсегоЧисленность" Тогда
		мВсегоЧисленность = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Для совместимости
	Возврат;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	мПериодичность = Перечисления.Периодичность.Год;
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	ДатаПодписиРук     = "";
	ДатаПодписиУпП     = "";
	ДатаПодписиЧП      = "";

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если НЕ ПустаяСтрока(мТитульный.Области.ОргУп.Значение) Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Если ЧП Тогда
		ДатаПодписиЧП = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл
		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(Формат(ДатаПодписиЧП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Ложь);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Сведения = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ";
		КонецЕсли;
		
		Сведения = Сведения + "ФИОРук, ФИО";
		Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
	// Процедура "заглушка" для функционирования общих механизмов.
	Возврат;
КонецПроцедуры // УправлениеЛистами

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// восстанавливаем реквизиты отчета
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();

		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение

			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(ИмяСтраницы = Неопределено) Экспорт
	// Процедура "заглушка", для совместимости с общими механизмами.
	Возврат;
КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	// Процедура "заглушка" для совместимости с общими механизмами.
	Возврат;
КонецПроцедуры // Расчет()

//// Процедура очищает содержимое редактируемых и вычисляемых ячеек
//// поля табличного документа, переданного параметром ВыбТабличноеПоле.
////
//// Параметры:
////  ВыбТабличноеПоле - поле табличного документа.
////
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;

	// При печати, расчет выполнятся не должен при любых обстоятельствах.
	мРежимПечати = Ложь;

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;
	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.

			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

			мПоСостояниюНаДату = НачалоГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1));
			стрУказаннаяДата = Формат(мПоСостояниюНаДату, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПериод", 8, стрУказаннаяДата);

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Процедура выполняет заполнение отчета по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мПоСостояниюНаДату) Тогда
		Предупреждение("Укажите дату, на которую формируется отчет!");
		Возврат;
	КонецЕсли;
	
	Если мПоСостояниюНаДату = НачалоГода(мПоСостояниюНаДату) Тогда
		НачалоПериода = НачалоГода(мПоСостояниюНаДату - 1);
	Иначе 
		НачалоПериода = НачалоГода(мПоСостояниюНаДату)
	КонецЕсли;
	КонецПериода = НачалоДня(мПоСостояниюНаДату) - 1;
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); 
	мВсегоЧисленность = 0;
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		НачМесяца = НачалоПериода;
		ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК МесяцОтчета";
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ПОМЕСТИТЬ ВТМесяцыОтчета";
		Пока НачМесяца < НачалоМесяца(КонецПериода) Цикл
			НачМесяца = КонецМесяца(НачМесяца) + 1;
			ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		КонецЦикла;
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ИНДЕКСИРОВАТЬ ПО МесяцОтчета";
		Запрос.Текст = ДатыПоМесяцамТекст;
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СРЕДНЕЕ(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.СредняяЧисленность КАК ЧИСЛО(15, 0))) КАК СредняяЧисленность,
		|	СРЕДНЕЕ(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.СреднеСписочнаяЧисленность КАК ЧИСЛО(15, 0))) КАК СреднеСписочнаяЧисленность
		|ИЗ
		|	(ВЫБРАТЬ
		|		МесяцыОтчета.МесяцОтчета КАК МесяцОтчета,
		|		СУММА(ЕСТЬNULL(РАЗНОСТЬДАТ(ПериодыРаботыПоМесяцам.ДатаС, ЕСТЬNULL(ПериодыРаботыПоМесяцам.ДатаПо, НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ), ДЕНЬ)), ДЕНЬ) + 1, 0)) / РАЗНОСТЬДАТ(МесяцыОтчета.МесяцОтчета, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ) КАК СредняяЧисленность,
		|		СУММА(ВЫБОР
		|				КОГДА ПериодыРаботыПоМесяцам.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|					ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(ПериодыРаботыПоМесяцам.ДатаС, ЕСТЬNULL(ПериодыРаботыПоМесяцам.ДатаПо, НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ), ДЕНЬ)), ДЕНЬ) + 1, 0)
		|				ИНАЧЕ 0
		|			КОНЕЦ) / РАЗНОСТЬДАТ(МесяцыОтчета.МесяцОтчета, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ) КАК СреднеСписочнаяЧисленность
		|	ИЗ
		|		ВТМесяцыОтчета КАК МесяцыОтчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МесяцыОтчета.МесяцОтчета КАК МесяцОтчета,
		|				ПериодыРаботы.ВидЗанятости КАК ВидЗанятости,
		|				ПериодыРаботы.Физлицо КАК Физлицо,
		|				ВЫБОР
		|					КОГДА ПериодыРаботы.ДатаНачала > МесяцыОтчета.МесяцОтчета
		|						ТОГДА ПериодыРаботы.ДатаНачала
		|					ИНАЧЕ МесяцыОтчета.МесяцОтчета
		|				КОНЕЦ КАК ДатаС,
		|				ВЫБОР
		|					КОГДА ПериодыРаботы.ДатаОкончания > КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ)
		|						ТОГДА КОНЕЦПЕРИОДА(МесяцыОтчета.МесяцОтчета, МЕСЯЦ)
		|					ИНАЧЕ ПериодыРаботы.ДатаОкончания
		|				КОНЕЦ КАК ДатаПо
		|			ИЗ
		|				ВТМесяцыОтчета КАК МесяцыОтчета
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ДатаНачала.Физлицо КАК Физлицо,
		|						ДатаНачала.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|						ДатаНачала.Период КАК ДатаНачала,
		|						МИНИМУМ(ЕСТЬNULL(ДатыОкончания.Период, &КонецПериода)) КАК ДатаОкончания,
		|						ДатаНачала.ВидЗанятости КАК ВидЗанятости
		|					ИЗ
		|						(ВЫБРАТЬ
		|							РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|							РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|							РаботникиОрганизаций.Период КАК Период,
		|							РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
		|						ИЗ
		|							РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|						ГДЕ
		|							РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|							И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|							И РаботникиОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|							И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|						
		|						ОБЪЕДИНИТЬ ВСЕ
		|						
		|						ВЫБРАТЬ
		|							РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
		|							РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение,
		|							РаботникиОрганизацийСрезПоследних.Период,
		|							РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости
		|						ИЗ
		|							РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацийСрезПоследних
		|						ГДЕ
		|							РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = &Организация
		|							И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|							И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК ДатаНачала
		|							ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|								РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|								РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|								ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1) КАК Период
		|							ИЗ
		|								РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|							ГДЕ
		|								РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|								И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|								И ВЫБОР
		|										КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|											ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
		|										ИНАЧЕ РаботникиОрганизаций.Период
		|									КОНЕЦ <= ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
		|								И РаботникиОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода) КАК ДатыОкончания
		|							ПО ДатаНачала.Физлицо = ДатыОкончания.Физлицо
		|								И ДатаНачала.ОбособленноеПодразделение = ДатыОкончания.ОбособленноеПодразделение
		|								И ДатаНачала.Период < ДатыОкончания.Период
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ДатаНачала.Физлицо,
		|						ДатаНачала.ОбособленноеПодразделение,
		|						ДатаНачала.Период,
		|						ДатаНачала.ВидЗанятости) КАК ПериодыРаботы
		|					ПО (МесяцыОтчета.МесяцОтчета >= НАЧАЛОПЕРИОДА(ПериодыРаботы.ДатаНачала, МЕСЯЦ))
		|						И (МесяцыОтчета.МесяцОтчета <= КОНЕЦПЕРИОДА(ПериодыРаботы.ДатаОкончания, МЕСЯЦ))) КАК ПериодыРаботыПоМесяцам
		|			ПО МесяцыОтчета.МесяцОтчета = ПериодыРаботыПоМесяцам.МесяцОтчета
		|	
		|	СГРУППИРОВАТЬ ПО
		|		МесяцыОтчета.МесяцОтчета) КАК СредняяЧисленностьПоМесяцам";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса <> Неопределено и Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если ЗначениеЗаполнено(Выборка.СреднеСписочнаяЧисленность) Тогда
					мВсегоЧисленность = Окр(Выборка.СреднеСписочнаяЧисленность);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// расчет среднесписочной численности
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ТаблицаЧисленостей = Отчет.ПолучитьТаблицуЧисленностей(Организация, НачалоПериода, КонецПериода, ложь);
		мВсегоЧисленность = ТаблицаЧисленостей.Итог("СреднеСписочнаяЧисленность");
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Численность", 6, мВсегоЧисленность, Истина);
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	ИмяРаздела1 = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если ИмяРаздела1 = "Титульный" Тогда
		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

		мВсегоЧисленность = 0;
		мПоСостояниюНаДату = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "ДатаПериод") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиДату(мПоСостояниюНаДату, "Введите дату", ЧастиДаты.Дата) Тогда
			стрУказаннаяДата = Формат(мПоСостояниюНаДату, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДатаПериод", 8, стрУказаннаяДата);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли Найти(ОбластьИмя, "Численность") > 0 Тогда
		ВсегоЧисленность = Формат(мВсегоЧисленность, "ЧГ=0");
		Если ВсегоЧисленность = "" И мТитульный.Области.Численность6.Значение = "0" Тогда
			ВсегоЧисленность = "0";
		КонецЕсли;
		Если ВсегоЧисленность = "" И мТитульный.Области.Численность6.Значение = "" Тогда
			ВсегоЧисленность = "";
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Если ВвестиСтроку(ВсегоЧисленность, "Среднесписочная численность", 6) Тогда
			Модифицированность = Истина;

			Если ПустаяСтрока(ВсегоЧисленность) Тогда
				мВсегоЧисленность = 0;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Численность", 6, "");
			КонецЕсли;

			Если НЕ ПустаяСтрока(ВсегоЧисленность) Тогда
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(ВсегоЧисленность) Тогда
					мВсегоЧисленность = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(ВсегоЧисленность), Число(ВсегоЧисленность), 0);
					ВсегоЧисленность = РегламентированнаяОтчетность.ДополнитьСтроку(ВсегоЧисленность, 6, " ");
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Численность", 6, ВсегоЧисленность);
				Иначе
					Сообщить("Введено неверное значение. Должны быть указаны только цифры.", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если ПолучитьСвойствоРаздела(ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML2007");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Если РабочаяДата >= '20081001' Тогда
		Возврат "NO_SRCHIS"
				+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	Иначе
		Возврат "NO_SRCHIS"
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Перем флЭтоПБОЮЛ;
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",		РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ИдДок",			Строка(Новый УникальныйИдентификатор));
	Параметры.Вставить("НаимОрг",		СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",		СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	Параметры.Вставить("КНД",			"1110018");
	Параметры.Вставить("ВидДок",		Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ГодПериодОтч",	Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ДатаДок",		Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",	СокрЛП(Организация.КодИФНСПолучателя));
	
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",	ФИОРук.Фамилия);
	Параметры.Вставить("ИмяРук",		ФИОРук.Имя);
	Параметры.Вставить("ОтчествоРук",	ФИОРук.Отчество);
	
	ФИОПред = РазложитьФИО(Титульный.ОргУп);
	Параметры.Вставить("НаимОргПред",	СокрЛП(Титульный.ОргУП));
	Параметры.Вставить("ФамилияПред",	ФИОПред.Фамилия);
	Параметры.Вставить("ИмяПред",		ФИОПред.Имя);
	Параметры.Вставить("ОтчествоПред",	ФИОПред.Отчество);
	Параметры.Вставить("ДокПред",		СокрЛП(Титульный.ДокУпПред));
	Параметры.Вставить("ПредставительФизЛицо", Титульный.ПредставительФизЛицо);
	
	ФИОИП = РазложитьФИО(Титульный.ОргНазв);
	Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
	Параметры.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	Параметры.Вставить("ЭтоПБОЮЛ",		РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух, ТелБух");
	Если Параметры.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		Параметры.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		Параметры.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОИП.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		Параметры.Вставить("ТелОтв",        ?(Параметры.Свойство("ТелОрг"), Параметры.ТелОрг, ""));
	Иначе
		ФИОБух = РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		Параметры.Вставить("ДолжОтв",		"Главный бухгалтер");
		Параметры.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		Параметры.Вставить("ИмяОтв",		ФИОБух.Имя);
		Параметры.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		Параметры.Вставить("ТелОтв",        СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));

	// параметры, специфичные для текущего отчета
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ФамилияИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИмяИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Титульный.ОргНазв) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.КодИМНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяОтв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя ответственного сотрудника (главного бухгалтера)!", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОргПред) Тогда
		Если НЕ Параметры.ЭтоПБОЮЛ Тогда
			Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия руководителя!", "Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(Параметры.ИмяРук) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя руководителя!", "Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Параметры.ПредставительФизЛицо = Истина Тогда
			Если ПустаяСтрока(Параметры.ФамилияПред) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия представителя!", "Титульный", "ОргУп");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(Параметры.ИмяПред) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя представителя!", "Титульный", "ОргУп");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ДокПред) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.ДатаПериод1) И ПустаяСтрока(Титульный.ДатаПериод2)
		И ПустаяСтрока(Титульный.ДатаПериод3) И ПустаяСтрока(Титульный.ДатаПериод4)
		И ПустаяСтрока(Титульный.ДатаПериод5) И ПустаяСтрока(Титульный.ДатаПериод6)
		И ПустаяСтрока(Титульный.ДатаПериод7) И ПустаяСтрока(Титульный.ДатаПериод8) Тогда
		
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана дата, по состоянию на которую указывается среднесписочная численность!", "Титульный", "ДатаПериод1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	МассивСоставляющихДаты = Новый Массив;
	Для Инд = 1 По 8 Цикл
		МассивСоставляющихДаты.Добавить(мДанныеОтчета.ПолеТабличногоДокументаТитульный["ДатаПериод" + Инд]);
	КонецЦикла;
	
	ДатаСредСпЧислСтрока 	= ?(ПустаяСтрока(МассивСоставляющихДаты[0]), "0", МассивСоставляющихДаты[0])
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[1]), "0", МассивСоставляющихДаты[1])
							+ "."
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[2]), "0", МассивСоставляющихДаты[2])
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[3]), "0", МассивСоставляющихДаты[3])
							+ "."
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[4]), "0", МассивСоставляющихДаты[4])
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[5]), "0", МассивСоставляющихДаты[5])
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[6]), "0", МассивСоставляющихДаты[6])
							+ ?(ПустаяСтрока(МассивСоставляющихДаты[7]), "0", МассивСоставляющихДаты[7]);
	Если ДатаСредСпЧислСтрока = "00.00.0000" Тогда
		ДатаСредСпЧислСтрока = мСохраненныйДок.ДатаНачала;
	КонецЕсли;						
	ЗадатьЗначениеЭлемента(УзелРодитель, "ДатаСредСпЧисл", ДатаСредСпЧислСтрока);
	
	КоличествоЧеловекСтрока = мДанныеОтчета.ПолеТабличногоДокументаТитульный.Численность;
	КоличествоЧеловекЧисло = ?(ПустаяСтрока(КоличествоЧеловекСтрока), 0, Число(КоличествоЧеловекСтрока));
	ЗадатьЗначениеЭлемента(УзелРодитель, "КолЧел", КоличествоЧеловекЧисло);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если (Найти(Стр.Обязательность, "Н") <> 0 ИЛИ Найти(Стр.Обязательность, "H") <> 0) И УзелПуст(Стр) Тогда // учтем оба варианта: кириллицу и латиницу
			Узел.Строки.Удалить(Стр);
		Иначе
			ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = "СодПерСвед" Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = "СодПерСвед" Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_SRCHIS_1_082_00_04_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока9 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;


//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007";

// Код отчета, равен КНД
мКодОтчета   = 1152017;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СтруктураXML2007", "Формат 4.01", Истина);
