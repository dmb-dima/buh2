#Если Клиент Тогда

Перем ТипыЗначенийСубконто Экспорт;
Перем МассивСубконто Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Анализ расходов на оплату труда";
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = СтандартныеОтчеты.СформироватьСтрокуОграниченийПоДатамДляФормы(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	НазваниеПодразделения = Подразделение.Наименование;
	Если НЕ ПустаяСтрока(НазваниеПодразделения) Тогда
		НазваниеОрганизации = НазваниеОрганизации + ", подразделение: " + НазваниеПодразделения;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроИтоги = "";
	ДобавитьСловоСубконто = Истина;

	Для а = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[а];
		
		Если ТекстПроИтоги <> "" Тогда
			ТекстПроИтоги = ТекстПроИтоги + ", ";
		КонецЕсли;
		
		Если Измерение.ПутьКДанным <> "КорСчет" Тогда
			Если ДобавитьСловоСубконто Тогда
				ТекстПроИтоги = ТекстПроИтоги + "по субконто: ";
				ДобавитьСловоСубконто = Ложь;
			КонецЕсли;
			
			ТекстПроИтоги = ТекстПроИтоги + Измерение.Представление;
			
		Иначе
			ТекстПроИтоги = ТекстПроИтоги + "по счетам учета затрат";
			ДобавитьСловоСубконто = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

Функция СформироватьЗапрос() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	СписокСчетов = Новый Массив;
	Если ОплатаТруда Тогда
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	КонецЕсли;
	
	Если Налоги Тогда
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Счет.Наименование КАК СчетНаименование,
	|	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчетСсылка,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Расходы,
	|	ЕстьNULL(ХозрасчетныйОбороты.ПодразделениеКор.Наименование, Неопределено) КАК Подразделение,
	|	ЕстьNULL(ХозрасчетныйОбороты.ПодразделениеКор,Неопределено) КАК ПодразделениеСсылка";
		
    ТекстПоля = "";
	ТекстИтоги = ", КорСчетСсылка, ПодразделениеСсылка";
	ТекстПорядок = "Счет.Код";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если (Измерение.ПутьКДанным <> "КорСчет")
			И (Измерение.ПутьКДанным <> "Подразделение") Тогда
			ТипКорСубконто = ТипыЗначенийСубконто[ПостроительОтчета.ДоступныеПоля[Измерение.ПутьКДанным].ТипЗначения.Типы()[0]];
			Если Найти(ТипКорСубконто, "Справочник.") > 0 Тогда
				ТекстПоля = ТекстПоля + ",
				|	ВЫБОР
				|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА " + ТипКорСубконто + "
				|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.Наименование
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА " + ТипКорСубконто + "
				|					ТОГДА ХозрасчетныйОбороты.КорСубконто2.Наименование
				|				ИНАЧЕ ВЫБОР
				|						КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА " + ТипКорСубконто + "
				|							ТОГДА ХозрасчетныйОбороты.КорСубконто3.Наименование
				|						ИНАЧЕ NULL
				|					КОНЕЦ
				|			КОНЕЦ
				|	КОНЕЦ КАК " + Измерение.Имя;
				
			Иначе // это перечисление
				ТекстПоля = ТекстПоля + ",
				|	ВЫБОР
				|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА " + ТипКорСубконто + "
				|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА " + ТипКорСубконто + "
				|					ТОГДА ХозрасчетныйОбороты.КорСубконто2
				|				ИНАЧЕ ВЫБОР
				|						КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА " + ТипКорСубконто + "
				|							ТОГДА ХозрасчетныйОбороты.КорСубконто3
				|						ИНАЧЕ NULL
				|					КОНЕЦ
				|			КОНЕЦ
				|	КОНЕЦ КАК " + Измерение.Имя;
			КонецЕсли;
			
			ПолеСсылки = "
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА " + ТипКорСубконто + "
			|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА " + ТипКорСубконто + "
			|					ТОГДА ХозрасчетныйОбороты.КорСубконто2
			|				ИНАЧЕ ВЫБОР
			|						КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА " + ТипКорСубконто + "
			|							ТОГДА ХозрасчетныйОбороты.КорСубконто3
			|						ИНАЧЕ NULL
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ ";
			
			ТекстПоля = ТекстПоля + "," + ПолеСсылки + Измерение.Имя + "Ссылка";
		КонецЕсли;		
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + "Ссылка" + ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
		ТекстПорядок = ТекстПорядок + ", " + Измерение.Имя;
		
		Если Измерение.Имя = "КорСчет" Тогда
			ТекстПорядок = ТекстПорядок + ".Код";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = Текст + ТекстПоля;
	Текст = Текст + " 
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокСчетов), , " + СтрокаОграниченийПоРеквизитам + ",, ) КАК ХозрасчетныйОбороты
	|";
	
	// Добавление ограничений по построителю отчета
	ТекстФильтры = "";
	Индекс = 0;
	
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		
		Если Не СтрокаОтбора.Использование ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		СтандартныеОтчеты.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		Если (СтрокаОтбора.ПутьКДанным <> "КорСчет")
			И (СтрокаОтбора.ПутьКДанным <> "Подразделение") Тогда
			ПозицияТочки = Найти(СтрокаОтбора.ПутьКДанным, ".");
			Если ПозицияТочки > 0 Тогда
				ИмяДоступногоПоля = Лев(СтрокаОтбора.ПутьКДанным, ПозицияТочки - 1);
					
			Иначе
				ИмяДоступногоПоля = СтрокаОтбора.ПутьКДанным;
			КонецЕсли;
					
			ТипКорСубконто = ТипыЗначенийСубконто[ПостроительОтчета.ДоступныеПоля[ИмяДоступногоПоля].ТипЗначения.Типы()[0]];
				
			ТекстСтрокиПоля = "
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА " + ТипКорСубконто + "
			|			ТОГДА " + СтрЗаменить(СтрокаОтбора.ПутьКДанным, ИмяДоступногоПоля, "ХозрасчетныйОбороты.КорСубконто1") + "
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА " + ТипКорСубконто + "
			|					ТОГДА " + СтрЗаменить(СтрокаОтбора.ПутьКДанным, ИмяДоступногоПоля, "ХозрасчетныйОбороты.КорСубконто2") + "
			|				ИНАЧЕ ВЫБОР
			|						КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА " + ТипКорСубконто + "
			|							ТОГДА " + СтрЗаменить(СтрокаОтбора.ПутьКДанным, ИмяДоступногоПоля, "ХозрасчетныйОбороты.КорСубконто3") + "
			|						ИНАЧЕ NULL
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ ";
				
		Иначе
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
		ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
		СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
	КонецЦикла;
	
	ТекстФильтры = Сред(ТекстФильтры, 3);
	
	Если Не ПустаяСтрока(ТекстФильтры) Тогда
		Текст = Текст + " 
		|ГДЕ " + ТекстФильтры;
	КонецЕсли;
	
	// Добавление упорядочивания
	Текст = Текст + " 
	|УПОРЯДОЧИТЬ ПО " + ТекстПорядок;

	Текст = Текст + " 
	|
	|ИТОГИ
	|	СУММА(Расходы)
	|ПО
	|	ОБЩИЕ,
	|	Счет ИЕРАРХИЯ КАК Счет";
	
	Текст = Текст + ТекстИтоги;
	Запрос.Текст = Текст;
	
	Возврат Запрос;
	
КонецФункции

Процедура ФормированиеСтрокиПоСчетам(Выборка, Знач ИндексТекущейГруппировки, ДокументРезультат, ВыводимаяОбласть, ИмяПараметра, ЖирныйШрифт)
	
	Если ИмяПараметра = "Сумма" Тогда
		ВыводимаяОбласть.Параметры.Сумма = Выборка.Расходы;
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка);
					
	Иначе
		ВыводимаяОбласть.Параметры.Счет = Выборка.СчетНаименование + "
		|Кт " + Строка(Выборка.Счет);
	КонецЕсли;
				
	ПрисоединеннаяОбласть = ДокументРезультат.Присоединить(ВыводимаяОбласть, ИндексТекущейГруппировки);
	Если ЖирныйШрифт <> Неопределено Тогда
		ПрисоединеннаяОбласть.Шрифт = ЖирныйШрифт;
	КонецЕсли;
	
	ВывестиГруппировкуПоСчетам(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет", "Все"), ИндексТекущейГруппировки + 1, ДокументРезультат, ВыводимаяОбласть, ИмяПараметра, ЖирныйШрифт);
			
КонецПроцедуры

Функция КорреспонденцияДляРасшифровки(Выборка)
	
	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкамХозрасчетный");
	ПараметрыРасшифровки.Вставить("СпособРасшифровки", "Отчет");
	ПараметрыРасшифровки.Вставить("Организация", Организация);
	ПараметрыРасшифровки.Вставить("ДатаНач", ДатаНач);
	ПараметрыРасшифровки.Вставить("ДатаКон", ДатаКон);
	
	ПараметрыРасшифровки.Вставить("СчетКт", Выборка.Счет);
	ПараметрыРасшифровки.Вставить("СчетДт", Выборка.КорСчетСсылка);
	
	НомерСубконто = 1;
	ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
	Для каждого Измерение из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если Измерение.Имя <> "КорСчет" Тогда
			Если Выборка[Измерение.Имя+"Ссылка"] <> Null Тогда
				Если Измерение.Имя <> "Подразделение" Тогда
					ПараметрыРасшифровки["Отбор"].Вставить("СубконтоДт"+НомерСубконто, Выборка[Измерение.Имя+"Ссылка"]);
					НомерСубконто = НомерСубконто + 1;
				Иначе
					Если Выборка.КорСчетСсылка.УчетПоПодразделениям Тогда
						ПараметрыРасшифровки["Отбор"].Вставить("ПодразделениеДт", Выборка[Измерение.Имя+"Ссылка"]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка)
	
	Если ЗначениеЗаполнено(Выборка.Расходы) Тогда
		СписокРасшифровки = Новый Массив;
		Если Выборка.КорСчетСсылка <> Null Тогда
			СписокРасшифровки.Добавить(КорреспонденцияДляРасшифровки(Выборка));
			
		Иначе
			ВыборкаПоКорСчетам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчетСсылка", "Счет");
			Пока ВыборкаПоКорСчетам.Следующий() Цикл
				Если ВыборкаПоКорСчетам.Расходы <> 0 Тогда
					СписокРасшифровки.Добавить(КорреспонденцияДляРасшифровки(ВыборкаПоКорСчетам));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;
	
	ВыводимаяОбласть.Параметры.Расшифровка = СписокРасшифровки;
	
КонецПроцедуры
	
// Выводит группировку по субсчетам
Процедура ВывестиГруппировкуПоСчетам(Выборка, Знач ИндексТекущейГруппировки, ДокументРезультат, ВыводимаяОбласть, ИмяПараметра, ЖирныйШрифт = Неопределено)
	
	Если Выборка.НайтиСледующий(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда) Тогда
		ФормированиеСтрокиПоСчетам(Выборка, ИндексТекущейГруппировки, ДокументРезультат, ВыводимаяОбласть, ИмяПараметра, ЖирныйШрифт);
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет <> ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
			ФормированиеСтрокиПоСчетам(Выборка, ИндексТекущейГруппировки, ДокументРезультат, ВыводимаяОбласть, ИмяПараметра, ЖирныйШрифт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит группировку
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если (ИндексТекущейГруппировки = 0) и (ПостроительОтчета.ИзмеренияСтроки.Количество() > 1) Тогда
		ЖирныйШрифт = Новый Шрифт(СтруктураПараметров.ОбластьСтрокаСубконто.ТекущаяОбласть.Шрифт,,,Истина);
				
	Иначе
		ЖирныйШрифт = Неопределено;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки = Выборка.Группировка();
		НачалиГруппировкуСтрок = Ложь;
		
		Если ИмяГруппировки <> "Счет" Тогда
			ЗначениеСубконто = Выборка[ИмяГруппировки];
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			
			Если (ЗначениеСубконто <> Null) или (Выборка.КорСчетСсылка = Null) Тогда
				ВыводимаяОбласть.Параметры.Субконто = ЗначениеСубконто;
				
				// При выводе субсчетов не делаем отступы
				Отступ = ОбщегоНазначения.ВернутьИндексВМассиве(СтруктураПараметров.МассивГруппировок, СтрЗаменить(ИмяГруппировки, "Ссылка", ""));
				ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
				
				Если ИмяГруппировки <> "КорСчетСсылка" Тогда
					ТипЗаписиВыборки = Выборка.ТипЗаписи();
					
				Иначе
					ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог;
				КонецЕсли;
				
				ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
				ДокументРезультат.НачатьГруппуСтрок(ИмяГруппировки);
				НачалиГруппировкуСтрок = Истина;
				
				Если ЖирныйШрифт <> Неопределено Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = ЖирныйШрифт;
				КонецЕсли;
				
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчета;
				ВыборкаСчетов = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет", "Все");
				ВывестиГруппировкуПоСчетам(ВыборкаСчетов, 1, ДокументРезультат, ВыводимаяОбласть, "Сумма", ЖирныйШрифт);
				
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаИтог;
				ВыводимаяОбласть.Параметры.Сумма = Выборка.Расходы;
				ДокументРезультат.Присоединить(ВыводимаяОбласть, ИндексТекущейГруппировки);
				Если ЖирныйШрифт <> Неопределено Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Шрифт = ЖирныйШрифт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если есть следующая группировка, то выбираем ее
		Если СтруктураПараметров.МассивГруппировок.ВГраница() > ИндексТекущейГруппировки Тогда
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировок[ИндексТекущейГруппировки+1] + "Ссылка"), ИндексТекущейГруппировки+1, СтруктураПараметров);
		КонецЕсли;
		
		Если НачалиГруппировкуСтрок Тогда
			ДокументРезультат.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	// Формат показателей
	МассивГруппировок = СформироватьМассивГруппировок();
	
	ОбластьСтрокаСубконто       = Макет.ПолучитьОбласть("Строка|Субконто");
	ОбластьСтрокаСчета      = Макет.ПолучитьОбласть("Строка|Счета");
	ОбластьСтрокаИтог      = Макет.ПолучитьОбласть("Строка|ИтогиПоСубконто");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконто", ОбластьСтрокаСубконто);
	СтруктураПараметров.Вставить("ОбластьСтрокаСчета", ОбластьСтрокаСчета);
	СтруктураПараметров.Вставить("ОбластьСтрокаИтог", ОбластьСтрокаИтог);

	//Формирование запроса
	Запрос = СформироватьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	// Выведем список счетов по которым есть итоги
	ВыводимаяОбласть  = Макет.ПолучитьОбласть("ЗаголовокОтчета|Субконто");
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
	ВыборкаОБЩИЕ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	ВыборкаОБЩИЕ.Следующий();
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	ВыводимаяОбласть = Макет.ПолучитьОбласть("ЗаголовокОтчета|Счета");
	Выборка = ВыборкаОБЩИЕ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	ВывестиГруппировкуПоСчетам(Выборка, 1, ДокументРезультат, ВыводимаяОбласть, "Счет");
	
	ВыводимаяОбласть = Макет.ПолучитьОбласть("ЗаголовокОтчета|ИтогиПоСубконто");
	ДокументРезультат.Присоединить(ВыводимаяОбласть, 1);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();

	Если МассивГруппировок.Количество() > 0 Тогда
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, МассивГруппировок[0] + "Ссылка"), 0, СтруктураПараметров);
	КонецЕсли;

	ВыводимаяОбласть  = Макет.ПолучитьОбласть("Итоги|Субконто");
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);

	// Выведем общие итоги
	ВыборкаОБЩИЕ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	ВыборкаОБЩИЕ.Следующий();
	
	ВыводимаяОбласть = Макет.ПолучитьОбласть("Итоги|Счета");
	Выборка = ВыборкаОБЩИЕ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	ВывестиГруппировкуПоСчетам(Выборка, 1, ДокументРезультат, ВыводимаяОбласть, "Сумма");
	
	ВыводимаяОбласть = Макет.ПолучитьОбласть("Итоги|ИтогиПоСубконто");
	ВыводимаяОбласть.Параметры.Сумма = ВыборкаОБЩИЕ.Расходы;
	ДокументРезультат.Присоединить(ВыводимаяОбласть, 1);
	
	// Установка свойства ПоВыделеннымКолонкам
	Для НомСтроки = 2 По ВысотаЗаголовка Цикл
		Для НомСтолбца = 2 По ДокументРезультат.ШиринаТаблицы Цикл
			ДокументРезультат.Область(НомСтроки, НомСтолбца, НомСтроки, НомСтолбца).ПоВыделеннымКолонкам = Истина;
		КонецЦикла;
	КонецЦикла;
				
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "АнализРасходовНаОплатуТруда";

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
	ДокументРезультат.ПоказатьУровеньГруппировокКолонок(1);
	
КонецПроцедуры // СформироватьОтчет()

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	
	//НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	//СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	ФормаОтчета
//  ПоказыватьЗаголовок - булево. Отображать пометку или нет
Процедура УправлениеПометкамиКнопокЗаголовковКоманднойПанели(ФормаОтчета, Знач ПоказыватьЗаголовок) Экспорт
	
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
    	
КонецПроцедуры

// процедура обрабатывает вывод заголовка
Процедура ОбработатьВыводЗаголовка(Форма, ОтчетОбъект, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если Форма.ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		Форма.ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;

    Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		Форма.ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокЗаголовковКоманднойПанели(Форма, ПоказыватьЗаголовок);
	
КонецПроцедуры

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры	

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//Функция возвращает часть запроса для иерархического вывода результатов отчета
Функция ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Знач ТипИзмерения) Экспорт
	
	Если ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
		Возврат " ИЕРАРХИЯ";
	ИначеЕсли ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда	
		Возврат " ТОЛЬКО ИЕРАРХИЯ";
	Иначе	
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту, ВИерархии = ложь,ОтборВключен = истина, Отбор = Ложь) Экспорт
	
	Если Отбор Тогда
		Если Не ОтборВключен Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + ?(ВИерархии," В Иерархии (&"," = &") + ИмяОграниченияПоРеквизиту + ?(ВИерархии,") "," ");
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СформироватьСписокТиповЗначенийСубконто();
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Расходы,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК Подразделение";
	
	ТекстПоля = "";
	ТекстИтоги = "КорСчет, Подразделение";
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Выбрать();
	НомерКорСубконто = 1;
	
	Для каждого ВидСубконто из МассивСубконто Цикл
		
		ТипСубконто = ВидСубконто.ТипЗначения.Типы()[0];
		ТипСубконтоСтр = ТипыЗначенийСубконто[ТипСубконто];
		
		ИмяИзмерения = "ИмяИзмерения" + НомерКорСубконто;
		НомерКорСубконто = НомерКорСубконто + 1;
		
		ТекстПоля = ТекстПоля + ",
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА " + ТипСубконтоСтр + "
		|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА " + ТипСубконтоСтр + "
		|					ТОГДА ХозрасчетныйОбороты.КорСубконто2
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА " + ТипСубконтоСтр + "
		|							ТОГДА ХозрасчетныйОбороты.КорСубконто3
		|						ИНАЧЕ NULL
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК " + ИмяИзмерения;
		
		ТекстИтоги = ТекстИтоги + ", " + ИмяИзмерения;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст + "
		|" + ТекстПоля;
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = Текст + "
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокСчетов), , " + СтрокаОграниченийПоРеквизитам + ", {КорСчет}, ) КАК ХозрасчетныйОбороты
	|";
	
	Текст = Текст + "
	|ИТОГИ
	|	СУММА(Расходы)
	|ПО
	|	ОБЩИЕ,
	|	Счет ИЕРАРХИЯ КАК Счет
	|";
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + ТекстИтоги + "}";
	КонецЕсли;
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("ИмяИзмерения"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
		Поле.Отбор = Истина;
	КонецЦикла;
	
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("Подразделение");
	Поле.Отбор = Истина;
	
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("КорСчет");
	Поле.Представление = "Счет учета затрат";
		
КонецПроцедуры

Процедура СформироватьПервоначальныйОтборПостроителя() Экспорт
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	// По подразделениям
	ИмяСубконто = "Подразделение";
		
	ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяСубконто);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИмяСубконто);
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
					
	ПостроительОтчета.ИзмеренияСтроки.Добавить(ИмяСубконто);
	
	// По кор. счетам
	ИмяСубконто = "КорСчет";
		
	ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяСубконто);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИмяСубконто);
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
					
	ПостроительОтчета.ИзмеренияСтроки.Добавить(ИмяСубконто);
	
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура НастроитьПоУмолчанию() Экспорт

	ОплатаТруда = Истина;
	Налоги = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьПервоначальныйОтборПостроителя();
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = СтандартныеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров);

	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		НастроитьПоУмолчанию();
		
	Иначе
		
		ОплатаТруда	= Параметры["ОплатаТруда"];
		Налоги		= Параметры["Налоги"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	СтандартныеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);
			
КонецПроцедуры

Процедура СформироватьСписокТиповЗначенийСубконто()
	
	ТипыЗначенийСубконто = Новый Соответствие;

	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		Имя              = ОбъектМД.Имя;
		ТипСсылки        = Тип("СправочникСсылка." + Имя);
		ТаблицаОбъектов	 = "Справочник." + Имя;
		ТипыЗначенийСубконто.Вставить(ТипСсылки, ТаблицаОбъектов);
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.Перечисления Цикл
		Имя              = ОбъектМД.Имя;
		ТипСсылки        = Тип("ПеречислениеСсылка." + Имя);
		ТаблицаОбъектов	 = "Перечисление." + Имя;
		ТипыЗначенийСубконто.Вставить(ТипСсылки, ТаблицаОбъектов);
	КонецЦикла;
	
	// Сформируем массив субконто счетов, с которыми счета 69 и 70 корреспондируют по кредиту.
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НаправленияИспользованияПрибыли);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделения);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	
КонецПроцедуры

#КонецЕсли