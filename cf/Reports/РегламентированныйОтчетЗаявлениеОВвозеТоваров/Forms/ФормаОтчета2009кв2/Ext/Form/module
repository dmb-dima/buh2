////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мЗаявление, мСведения;

Перем мСтрукТЗДокументы; //структура, хранящая таблицы значений с данными по товаро-транспортным документам

Перем мИдГруппы1, мИдГруппы2;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;
// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;
// Список льгот, строка 220
// данные в мекете Списки

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мРежимПечати Экспорт;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мБезОткрытияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

Перем мСоставПоказателей Экспорт;

// Переменная для хранения координато масок и сами маски.
Перем мМаскиЯчейки;

Перем мДокументВосстановлен;

Перем мОбновитьКомментарий;

Перем СвойстваПоказателей Экспорт;

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраницаПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
			УстановитьЦветФонаЯчейки(,, ТекущаяСтраницаПанели);
		КонецЕсли;

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Окончание блока стандартных процедур/функций

// Блок обязательных функций

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел_1 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел_1.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	МнгРаздел_2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел_2.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Заявление";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел_1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ПродавецНаимОрг";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва листа сведений
	СтрокаУровня1.ИмяСтраницы                          = "Сведения";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел_2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;


КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
	// Процедура заглушка
	Пусто = Неопределено;
	Возврат;
КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Окончание блока обязательных функций

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

 	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

								ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	// Процедура "заглушка", для других механизмов.
	ИзмененияПроизошли = Ложь;
	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	//НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	//Если НомерМесяца = "12" Тогда
	//	НомерМесяца = "0";
	//КонецЕсли;

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	Если мВПрограммеИзмененаОрганизация Тогда
		Возврат;
	КонецЕсли;

	мЗаявление.Области.ДатаПодписиРук.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	мЗаявление.Области.ДатаПодписиБух.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтранице
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт

	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Заявление" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Сведения" Тогда
		ИмяГруппы = мИдГруппы2;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", ?(ЧП, "АдрМЖ", "АдрЮР"));

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО"); // ФИО ПБОЮЛа

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	// Инициализируем переменные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		Адр       = "";
	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";

	// Получаем данные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",      ИННЮЛ    );
		ОргСведения.Свойство("КППЮЛ",      КППЮЛ    );
		ОргСведения.Свойство("НаимЮЛПол",  НаимЮЛПол);
		ОргСведения.Свойство(?(ЧП, "АдрМЖ", "АдрЮР"), Адр);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук",     ФИОРук   );
	ОргСведения.Свойство("ФИОБух",     ФИОБух   );
	ОргСведения.Свойство("ФИО",     ФИО   );
	Если ЧП Тогда
		НаимЮЛПол = ФИО;
		ФИОРук = ФИО;
		ФИОБух = "";
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мЗаявление.Области.ФИОРук.Значение  = ФИОРук;

		мЗаявление.Области.ФИОБух.Значение = ФИОБух;

		Если ЧП Тогда
			мЗаявление.Области.ПокупательНаимОрг.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	// Заполняем ИНН на всех листах декларации
	//Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
	//	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	//Иначе
	//	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "");
	//КонецЕсли;

	мИННЮЛ = ИННЮЛ;
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мКППЮЛ = КППЮЛ;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мЗаявление.Области.ПокупательМестоНахожд.Значение)) Тогда
		Адр = СтрЗаменить(Адр, ",,,,,,,,,", "");
		мЗаявление.Области.ПокупательМестоНахожд.Значение = Адр;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(Адр, ",","")) Тогда
			ОбработанныйАдр = "";
			мЗаявление.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		Иначе
			ОбработанныйАдр = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адр);
			мЗаявление.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мЗаявление.Области.ПокупательИНН_КПП.Значение)) Тогда
		мЗаявление.Области.ПокупательИНН_КПП.Значение = мИННЮЛ + ?(НЕ РегламентированнаяОтчетность.ПустоеЗначение(мКППЮЛ), "/","") + мКППЮЛ;
	КонецЕсли;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мЗаявление.Области.ПокупательНаимОрг.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мЗаявление.Области.ПокупательНаимОрг.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мЗаявление.Области.ФИОБух.Значение)) Тогда
		мЗаявление.Области.ФИОБух.Значение  = ФИОБух;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мЗаявление.Области.ФИОРук.Значение)) Тогда
		мЗаявление.Области.ФИОРук.Значение = ФИОРук;
	КонецЕсли;

	// Даты проставятся всегда при открытии документа или при изменении организации
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
	// Заполним даты формирования декларации (подписи)
		Модифицированность = Истина;
		ЗаполнитьДатуВЯчейках();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Группа1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	Для Инд = 0 По Группа1.Количество() - 1 Цикл

		Строка = "_" + Формат(Инд + 1, "ЧГ=0");

		ФорматируемаяОбласть = мЗаявление.Области["П000010000106" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

		ФорматируемаяОбласть = мЗаявление.Области["П000010000107" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

		ФорматируемаяОбласть = мЗаявление.Области["П000010000111" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мЗаявление.Области["П000010000112" + Строка];
		//ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мЗаявление.Области["П000010000113" + Строка];
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мЗаявление.Области["П000010000114" + Строка];
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		ФорматируемаяОбласть = мЗаявление.Области["П000010000115" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

		ФорматируемаяОбласть = мЗаявление.Области["П000010000116" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

	КонецЦикла;

	мЗаявление.Области.П000010000206.Формат = мСтрокаФормата;

	мЗаявление.Области.П000010000207.Формат = мСтрокаФормата;

	мЗаявление.Области.П000010000211.Формат = мСтрокаФормата;

	мЗаявление.Области.П000010000215.Формат = мСтрокаФормата;

	мЗаявление.Области.П000010000216.Формат = мСтрокаФормата;
	
	Группа2 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, Группа2);

	Для Инд = 0 По Группа2.Количество() - 1 Цикл

		Строка = "_" + Формат(Инд + 1, "ЧГ=0");

		ФорматируемаяОбласть = мСведения.Области["П000020000102" + Строка];
		ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		ФорматируемаяОбласть.Формат = мСтрокаФормата;

	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), , Истина);
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
		Возврат;
	ИначеЕсли Парам1.ИмяТабличногоПоля = "ПолеТабличногоДокументаСведения" Тогда
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
		Возврат;
	КонецЕсли;
	
	// для раздела "Заявление" - особая печать
	
	ИсходныйТаблДок = ЭлементыФормы.ПолеТабличногоДокументаЗаявление;
	
	Для НомерЭкземпляра = 1 По 3 Цикл
		
		ПредставлениеЭкземпляра = "Заявление. Экземпляр N" + НомерЭкземпляра;
		
		Если НомерЭкземпляра = 1 Тогда
		
			// находим предпоследнюю строку табличной части, определяем ее нижнюю координату
			НомСтр = 0;
			Пока ИсходныйТаблДок.Области.Найти("П000010000101_" + Формат(НомСтр + 1, "ЧГ=")) <> Неопределено Цикл
				НомСтр = НомСтр + 1;
			КонецЦикла;
			ВысотаОсновнойЧасти = ИсходныйТаблДок.Области.Найти("П000010000101_" + Формат(НомСтр - 1, "ЧГ=")).Низ;
			
			//ВысотаОсновнойЧасти = ИсходныйТаблДок.Области.ОсновнаяЧасть.Низ;
			
			// "нарезаем" табличный документ от верха и до предпоследней строки ТЧ включительно на А4
			НижняяГраница = 1;
			Для Сч = 1 По ВысотаОсновнойЧасти Цикл
				
				ТекСтрока = ИсходныйТаблДок.ПолучитьОбласть(Сч, 0, Сч, 0);
				ТекСтрока.ОтображатьЗаголовки = Ложь;
				ТекСтрока.ОтображатьСетку     = Ложь;
				ТекСтрока.ЧерноБелыйПросмотр  = Истина;
				ТекСтрока.ЧерноБелаяПечать    = Истина;
				ТекСтрока.Автомасштаб         = Истина;
				ТекСтрока.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
				
				ПередТекСтрокой = ИсходныйТаблДок.ПолучитьОбласть(НижняяГраница, 0, Сч - 1, 0);
				ПередТекСтрокой.ОтображатьЗаголовки = Ложь;
				ПередТекСтрокой.ОтображатьСетку     = Ложь;
				ПередТекСтрокой.ЧерноБелыйПросмотр  = Истина;
				ПередТекСтрокой.ЧерноБелаяПечать    = Истина;
				ПередТекСтрокой.Автомасштаб         = Истина;
				ПередТекСтрокой.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
				
				Если НЕ ПередТекСтрокой.ПроверитьВывод(ТекСтрока) Тогда
					ПроставитьНомерЭкземпляра(ПередТекСтрокой, НомерЭкземпляра);
					мПечатныеФормы.Добавить(ПередТекСтрокой, ПредставлениеЭкземпляра);
					НижняяГраница = Сч;
				КонецЕсли;
				
			КонецЦикла;
			
			// получаем подвал как единую область
			ПодвалТаблДок = ИсходныйТаблДок.ПолучитьОбласть(ВысотаОсновнойЧасти + 1, 0, ИсходныйТаблДок.ВысотаТаблицы, 0);
			ПодвалТаблДок.ОтображатьЗаголовки = Ложь;
			ПодвалТаблДок.ОтображатьСетку     = Ложь;
			ПодвалТаблДок.ЧерноБелыйПросмотр  = Истина;
			ПодвалТаблДок.ЧерноБелаяПечать    = Истина;
			ПодвалТаблДок.Автомасштаб         = Истина;
			ПодвалТаблДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
			
			// выводим подвал или на последний сформированный (если помещается), или на новый лист
			Если НижняяГраница <= ВысотаОсновнойЧасти Тогда
				
				ПередТекСтрокой = ИсходныйТаблДок.ПолучитьОбласть(НижняяГраница, 0, ВысотаОсновнойЧасти , 0);
				ПередТекСтрокой.ОтображатьЗаголовки = Ложь;
				ПередТекСтрокой.ОтображатьСетку     = Ложь;
				ПередТекСтрокой.ЧерноБелыйПросмотр  = Истина;
				ПередТекСтрокой.ЧерноБелаяПечать    = Истина;
				ПередТекСтрокой.Автомасштаб         = Истина;
				ПередТекСтрокой.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
				
				Если ПередТекСтрокой.ПроверитьВывод(ПодвалТаблДок) Тогда
					
					ПередТекСтрокой.Вывести(ПодвалТаблДок);
					ПроставитьНомерЭкземпляра(ПередТекСтрокой, НомерЭкземпляра);
					мПечатныеФормы.Добавить(ПередТекСтрокой, ПредставлениеЭкземпляра);
					
				Иначе
					
					ПроставитьНомерЭкземпляра(ПередТекСтрокой, НомерЭкземпляра);
					мПечатныеФормы.Добавить(ПередТекСтрокой, ПредставлениеЭкземпляра);
					
					ПроставитьНомерЭкземпляра(ПодвалТаблДок, НомерЭкземпляра);
					мПечатныеФормы.Добавить(ПодвалТаблДок, ПредставлениеЭкземпляра);
					
				КонецЕсли;
				
			Иначе
				ПроставитьНомерЭкземпляра(ПодвалТаблДок, НомерЭкземпляра);
				мПечатныеФормы.Добавить(ПодвалТаблДок, ПредставлениеЭкземпляра);
			КонецЕсли;
			
		Иначе
			
			ЧислоПечатныхЛистов = мПечатныеФормы.Количество();
			Для ИндЛиста = 0 По (ЧислоПечатныхЛистов / (НомерЭкземпляра - 1)) - 1 Цикл
				ЭлЛист = мПечатныеФормы.Получить(ИндЛиста);
				ТаблДок = ЭлЛист.Значение.ПолучитьОбласть();
				ЗаполнитьЗначенияСвойств(ТаблДок, ЭлЛист.Значение, "ОтображатьЗаголовки, ОтображатьСетку, ЧерноБелыйПросмотр, ЧерноБелаяПечать, Автомасштаб, ОриентацияСтраницы");
				ПроставитьНомерЭкземпляра(ТаблДок, НомерЭкземпляра);
				мПечатныеФормы.Добавить(ТаблДок, ПредставлениеЭкземпляра);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьНомерЭкземпляра(ТаблДок, НомерЭкземпляра)
	
	ОбластьЭкземпляр = ТаблДок.Области.Найти("Экземпляр");
	Если ОбластьЭкземпляр <> Неопределено Тогда
		ОбластьЭкземпляр.Значение = НомерЭкземпляра;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательИНН_КПП");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательНаимОрг");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательМестоНахожд");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели);
	
	// Поле табличного документа содержит многострочный раздел.

	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.

		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

			ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			// Определим область удаляемой строки
			УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

			НСтр = НСтр - 1;

		КонецЦикла;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

				// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если ПолучитьСвойствоРаздела(ВыбТабличноеПоле.Имя, "ПредставлениеДанных") Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ВыбТабличноеПоле.Имя);
	КонецЕсли;

	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);

	Расчет(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

	мРежимПечати = Ложь;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// ПолучитьКодИМНС
// Возвращает код ИМНС из справочника организации
//
Функция ПолучитьКодИМНС()

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат "";
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "КодНО");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	КодНО = "";

	ОргСведения.Свойство("КодНО", КодНО);

	Если КодНО = Неопределено Или РегламентированнаяОтчетность.ПустоеЗначение(КодНО) Тогда
		Результат = "";
	Иначе
		Результат = КодНО;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКодИМНС

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	//изменение комментария
	Если мОбновитьКомментарий ИЛИ НЕ ЗначениеЗаполнено(Комментарий) Тогда
		//Формат комментария:
		//<номер контракта> от <дата контракта>[, спец. <номер спецификации> от <дата спецификации>], <полное наименование организации (Ф.И.О. индивидуального предпринимателя)>
		
		НомерКонтракта = мЗаявление.Области["НомерКонтракта"].Значение;
		ДатаКонтракта = мЗаявление.Области["ДатаКонтракта"].Значение;
		НомерСпецификации = мЗаявление.Области["НомерСпецификации"].Значение;
		ДатаСпецификации = мЗаявление.Области["ДатаСпецификации"].Значение;
		НаименованиеОрганизации = мЗаявление.Области["ПокупательНаимОрг"].Значение;
		
		Текст = ДобавитьРеквизит("", НомерКонтракта, "");
		Текст = ДобавитьРеквизит(Текст, Формат(ДатаКонтракта,"ДФ=dd.MM.yyyy"), " от ");
		Текст = ДобавитьРеквизит(Текст, НомерСпецификации, ?(ЗначениеЗаполнено(Текст), ", ", "") + "спец. ");
		Текст = ДобавитьРеквизит(Текст, Формат(ДатаСпецификации,"ДФ=dd.MM.yyyy"), " от ");
		Текст = ДобавитьРеквизит(Текст, НаименованиеОрганизации, ?(ЗначениеЗаполнено(Текст), ", ", ""));
		
		Комментарий = Текст;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = ПолучитьКодИМНС();

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вставляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вставляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	// вставляем струткуру, хранящую таблицы значений с данными по товаро-транспортным документам
	СписокСохранения.Вставить("мСтрукТЗДокументы", мСтрукТЗДокументы);
	
	СписокСохранения.Вставить("мОбновитьКомментарий", мОбновитьКомментарий);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	

	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	//восстанавливаем структуру, хранящую таблицы значений с данными по товаро-транспортным документам
	СписокСохранения.Свойство("мСтрукТЗДокументы", мСтрукТЗДокументы);
	Если мСтрукТЗДокументы = Неопределено Тогда
		мСтрукТЗДокументы = Новый Структура;
	КонецЕсли;
	
	СписокСохранения.Свойство("мОбновитьКомментарий", мОбновитьКомментарий);
	Если мОбновитьКомментарий = Неопределено Тогда
		мОбновитьКомментарий = Истина;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	СнятьЗащитуСЯчеек(НЕ ФлажокОтклАвтоРасчет);

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
	//Перем ИсходноеКоличествоСтрокГруппы;

	//// определим исходное колво строк многострочного раздела,
	//// соответствующее бумажной форме отчета
	//мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	//// реальное кол-во строк (колво заполненных строк)
	//ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	//ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	//// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	//// отображаемых в форме строк многострочного раздела с реальным количеством
	//// созданных строк в сохраненном отчете.
	//Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

	//	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	//	// автоматически добавляем необходимое колво строк.
	//	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

	//		НомИсходнойСтроки = НомНовойСтроки - 1;

	//		// определяем имя первой ячейки последней из исходных строк
	//		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

	//		// область первой ячейки последней из исходных строк
	//		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	//		// номера строк исходной области
	//		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	//		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	//		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	//		// номера строк вставляемой области
	//		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	//		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	//		// определяем вставляемую область
	//		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	//		// добавляем в таблицу новую строку
	//		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	//		// переопределяем имена вставленной области
	//		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

	//			ИмяКолонки          = Колонка.Имя;

	//			ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
	//			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

	//			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
	//			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

	//			// определяем границы ячейки исходной области
	//			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
	//			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
	//			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
	//			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

	//			// Назначаем имя ячейки исходной области,
	//			// (т.к. в результате вставки новой области оно было очищено)
	//			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
	//			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

	//			// очищаем значения ячеек вставленной области
	//			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
	//				ОбластьЯчейки.Очистить();
	//			Иначе
	//				// порядковый номер последней строки перед вставкой
	//				ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
	//				НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//				ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
	//			КонецЕсли;

	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;

	//// выводим значения строк
	//Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
	//	Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

	//		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
	//		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
	//		ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
	//		ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
	//		ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

	//		Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
	//			// задаем значение ячейки
	//			ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

	//		Иначе
	//			// устанавливаем порядковый номер строки
	//			ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
	//		КонецЕсли;

	//	КонецЦикла;
	//КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мЗаявление;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мСведения;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Группа1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	СуммаПоКолонке6 = 0;
	СуммаПоКолонке7 = 0;
	СуммаПоКолонке11 = 0;
	СуммаПоКолонке12 = 0;
	СуммаПоКолонке15 = 0;
	СуммаПоКолонке16 = 0;

	Для Инд = 0 По Группа1.Количество() - 1 Цикл
		Строка = "_" + Формат(Инд + 1, "ЧГ=0");

		П000010000106 = ОкруглитьЧислоПоФормату(мЗаявление.Области["П000010000106" + Строка].Значение);

		СуммаПоКолонке6 = СуммаПоКолонке6 + П000010000106;

		П000010000107 = ОкруглитьЧислоПоФормату(мЗаявление.Области["П000010000107" + Строка].Значение);
		СуммаПоКолонке7 = СуммаПоКолонке7 + П000010000107;

		П000010000113 = мЗаявление.Области["П000010000113" + Строка].Значение;
		П000010000114 = мЗаявление.Области["П000010000114" + Строка].Значение;
		П000010000103 = мЗаявление.Области["П000010000103" + Строка].Значение;
		П000010000104 = мЗаявление.Области["П000010000104" + Строка].Значение;
		П000010000119 = мЗаявление.Области["П000010000119" + Строка].Значение;

		Если НЕ ЗначениеЗаполнено(П000010000113) Тогда
			П000010000111 = 0;
		Иначе
			П000010000111 = П000010000106 + П000010000107;
		КонецЕсли;

		мЗаявление.Области["П000010000111" + Строка].Значение = П000010000111;
		СуммаПоКолонке11 = СуммаПоКолонке11 + П000010000111;
		
		Если НЕ ЗначениеЗаполнено(П000010000114) Тогда
			П000010000112 = 0;
		Иначе
			Если НЕ ЗначениеЗаполнено(П000010000103) Тогда
				П000010000112 = П000010000106 + П000010000107;
			Иначе
				КодЕИ_3 	= П000010000103;
				КодЕИ_12 	= П000010000119;
				Если КодЕИ_3 = "796" И КодЕИ_12 = "798" 
				 ИЛИ КодЕИ_3 = "166" И КодЕИ_12 = "168" Тогда
					П000010000112 = Окр(П000010000104 / 1000, 2); 
				ИначеЕсли КодЕИ_3 = "798" И КодЕИ_12 = "796" 
				 ИЛИ КодЕИ_3 = "168" И КодЕИ_12 = "166" Тогда
					П000010000112 = Окр(П000010000104 * 1000, 2);
				Иначе
					П000010000112 = Окр(П000010000104, 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мЗаявление.Области["П000010000112" + Строка].Значение = П000010000112;
		СуммаПоКолонке12 = СуммаПоКолонке12 + П000010000112;

		П000010000115 = ОкруглитьЧислоПоФормату(П000010000111) * П000010000113 / 100;
		мЗаявление.Области["П000010000115" + Строка].Значение = П000010000115;
		СуммаПоКолонке15 = СуммаПоКолонке15 + ОкруглитьЧислоПоФормату(П000010000115);

		Если ЗначениеЗаполнено(мЗаявление.Области["П000010000118" + Строка].Значение) Тогда
		    П000010000116 = П000010000112 * П000010000114;
		Иначе	
			П000010000116 = П000010000112 * П000010000114 / 100;
		КонецЕсли;
		
		мЗаявление.Области["П000010000116" + Строка].Значение = П000010000116;
		СуммаПоКолонке16 = СуммаПоКолонке16 + ОкруглитьЧислоПоФормату(П000010000116);
		
	КонецЦикла;

	мЗаявление.Области.П000010000206.Значение = СуммаПоКолонке6;
	мЗаявление.Области.П000010000207.Значение = СуммаПоКолонке7;
	мЗаявление.Области.П000010000211.Значение = СуммаПоКолонке11;
	мЗаявление.Области.П000010000212.Значение = СуммаПоКолонке12;
	мЗаявление.Области.П000010000215.Значение = СуммаПоКолонке15;
	мЗаявление.Области.П000010000216.Значение = СуммаПоКолонке16;

КонецПроцедуры // Расчет()

// НачальныеОперацииСМногострочнымиБлоками
//
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			НомерСтроки = Формат(НСтр, "ЧГ=0");
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + НомерСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;

					МаскаДляКолонки = ВернутьМаскуДляКолонки(ИмяКолонки);
					Если МаскаДляКолонки <> Неопределено Тогда
						ОбластьЯчейки.ЭлементУправления.Маска = МаскаДляКолонки;
					КонецЕсли;

				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками

// ВернутьМаскуДляКолонки
//
Функция ВернутьМаскуДляКолонки(ИмяКолонки) // ВернутьМаскуДляКолонки
	Возврат мМаскиЯчейки.Получить(ИмяКолонки);
КонецФункции // ВернутьМаскуДляКолонки

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
// Процедура используется только в механизме Контрольных соотношений. В данном отчете
// процедура не используется.
// По сравнению с аналогами в других отчетах, эта процедура только формирует таблицу
// состава показателей. мТаблицаСоставПоказателей.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мЗаявление    = ЭлементыФормы.ПолеТабличногоДокументаЗаявление;
	мСведения    = ЭлементыФормы.ПолеТабличногоДокументаСведения;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;
	мРежимПечати = Ложь;
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
			
			мОбновитьКомментарий = Истина;

		КонецЕсли;

	Иначе
		Если НЕ БезОткрытияФормы Тогда
			// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Заявление");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), , Истина);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаЗаявлениеВыбор
//
Процедура ПолеТабличногоДокументаЗаявлениеВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Найти(Область.Имя, "П000010000121") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаСписка");
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор единицы измерения";
		
		НомерСтроки = Сред(Область.Имя, 15);
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
		
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			КодЗначения = мЗаявление.Области["П000010000103_" + НомерСтроки].Значение;
			НайденнаяСтрока = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодЗначения);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;

		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
			
			Если мЗаявление.Области["П000010000103_" + НомерСтроки].Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				//перевыбор текущего элемента справочника очищает ячейку
				Область.Значение = "";
				КодЕдИзм = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Наименование;
				КодЕдИзм  = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				КодВалюты = "643";
				ПредставлениеВалюты = Справочники.Валюты.НайтиПоКоду(КодВалюты);
			Иначе
				КодВалюты = "";
				ПредставлениеВалюты = "";
			КонецЕсли;
			
			СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000120 = КодВалюты;
			мЗаявление.Области["П000010000120_" + НомерСтроки].Значение = ПредставлениеВалюты;
			
			СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000118 = КодВалюты;
			мЗаявление.Области["П000010000118_" + НомерСтроки].Значение = ПредставлениеВалюты;

			СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000103 = КодЕдИзм;
			мЗаявление.Области["П000010000103_" + НомерСтроки].Значение = КодЕдИзм;
			                                                                                  			
			Модифицированность = Истина;
			Расчет();
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "П000010000105") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.Валюты.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода валюты";

		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.Валюты.НайтиПоКоду(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;

		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда

			Если Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;

			Модифицированность = Истина;
			
		КонецЕсли;
	ИначеЕсли Найти(Область.Имя, "П000010000108") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		//необходимо вызывать отдельную форму, содержащую табличную часть из 3-х колонок
		//обращение к структуре за таблицей значений
		//опредилим номер строки 
		НомерСтроки = Сред(Область.Имя, 14);
		КлючСтруктуры = "К" + НомерСтроки;
		
		ТЗДокументы = Неопределено;
		мСтрукТЗДокументы.Свойство(КлючСтруктуры, ТЗДокументы);
		Если  ТЗДокументы = Неопределено Тогда
			//создание таблицы
			ТЗДокументы = Новый ТаблицаЗначений;
			ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
			ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
			
			ТЗДокументы.Колонки.Добавить("Серия", ОписаниеТиповСтрока, "Серия");
			ТЗДокументы.Колонки.Добавить("Номер", ОписаниеТиповСтрока, "Номер");
			ТЗДокументы.Колонки.Добавить("Дата", ОписаниеТиповДата, "Дата");
		КонецЕсли;
				
		//открытие формы заполнения
		ФормаЗаполнения = ПолучитьФорму("ФормаЗаполнения");
		ФормаЗаполнения.Документы = ТЗДокументы.Скопировать();
		Результат = ФормаЗаполнения.ОткрытьМодально();
		
		//обработка результата
		Если Результат <> Неопределено Тогда
			ТЗДокументы = Результат;
			мСтрукТЗДокументы.Вставить(КлючСтруктуры, ТЗДокументы);
			
			Текст = "";
			Для каждого стрТЗ Из ТЗДокументы Цикл
				Серия = СокрЛП(стрТЗ.Серия);                   
				Номер = СокрЛП(стрТЗ.Номер);
				Дата = Формат(стрТЗ.Дата,"ДФ=""дд.ММ.гггг 'г.'""");
				
				Если Текст <> "" Тогда
					Текст = Текст + Символы.ПС;
				КонецЕсли;
				
				Текст = Текст + Серия + ", " + Номер + ", " + Дата; 
			КонецЦикла; 
			
			Область.Значение = Текст;
		КонецЕсли; 		
	
	//ИначеЕсли Найти(Область.Имя, "П000010000117") > 0 Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ФормаВыбора = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаСписка");
	//	ФормаВыбора.РежимВыбора = Истина;
	//	ФормаВыбора.Заголовок = "Выбор единицы измерения";

	//	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
	//		НайденнаяСтрока = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Область.Значение);
	//		Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
	//			ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
	//		КонецЕсли;
	//	КонецЕсли;

	//	Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
	//		РезультатВыбора = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Наименование;
	//		Если Область.Значение = РезультатВыбора Тогда
	//			Область.Значение = "";
	//			РезультатВыбораКод = "";
	//		Иначе
	//			РезультатВыбораКод = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
	//			Область.Значение = РезультатВыбора;
	//		КонецЕсли;

	//		НомерСтроки = Сред(Область.Имя, 15);
	//		СтруктураГруппы1 = Неопределено;
	//		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	//		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000119 = РезультатВыбораКод;
	//		мЗаявление.Области["П000010000119_" + НомерСтроки].Значение = РезультатВыбораКод;

	//		Модифицированность = Истина;
	//	КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "П000010000118") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.Валюты.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода валюты";

		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.Валюты.НайтиПоНаименованию(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;

		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда

			РезультатВыбора = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Наименование;
			Если Область.Значение = РезультатВыбора Тогда
				Область.Значение = "";
				РезультатВыбораКод = "";
			Иначе
				РезультатВыбораКод = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
				Область.Значение = РезультатВыбора;
			КонецЕсли;

			НомерСтроки = Сред(Область.Имя, 15);
			СтруктураГруппы1 = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
			СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000120 = РезультатВыбораКод;
			мЗаявление.Области["П000010000120_" + НомерСтроки].Значение = РезультатВыбораКод;

			Модифицированность = Истина;
			Расчет();
		КонецЕсли;

	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЗаявлениеВыбор

// ПолеТабличногоДокументаЗаявлениеПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЗаявлениеПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Заявление");
КонецПроцедуры // ПолеТабличногоДокументаЗаявлениеПриАктивизацииОбласти


Процедура ПолеТабличногоДокументаСведенияПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Сведения");
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
 			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = мЗаявление;
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// КнопкаПредыдущаяСтраницаНажатие
// единая процедура во всех разделах
//
Процедура КнопкаПредыдущаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Сведения");

КонецПроцедуры // КнопкаПредыдущаяСтраницаНажатие

// КнопкаСледующаяСтраницаНажатие
// единая процедура для всех кнопок на разных разделах
//
Процедура КнопкаСледующаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Сведения");

КонецПроцедуры // КнопкаСледующаяСтраницаНажатие

// КнопкаДобавитьДопСтраницуНажатие
// единая процедура добавить страницу в раздел 
//
Процедура КнопкаДобавитьДопСтраницуНажатие(Элемент)

	ВставитьДополнительнуюСтраницу("Сведения");

КонецПроцедуры // КнопкаДобавитьДопСтраницуНажатие

// Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)
// единая кнопка на всех разделах УдалитьДопСтраницуНажатие
//
Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)

	УдалитьДополнительнуюСтраницу("Сведения");

КонецПроцедуры // КнопкаУдалитьДопСтраницуНажатие

// Процедура КнопкаПерейтиНаСтраницу(Элемент)
// единая процедура перехода на страницы
//
Процедура КнопкаПерейтиНаСтраницуНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Сведения");

КонецПроцедуры //  Процедура КнопкаПерейтиНаСтраницу(Элемент)

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет("Заявление");
	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет("Заявление");

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов

	ЗаполнитьДатуВЯчейках();

	// Заполнить ТОЛЬКО параметры по текущей организации зависящие от даты подписания документа
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Заявление";
	СтрокаУровня1.Представление            = "Заявление";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЗаявление";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Сведения";
	СтрокаУровня1.Представление            = "Сведения о выписках банка";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаСведения";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если Страница = "Заявление" Тогда
		
		Расчет(Страница);

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// КнопкаДобавитьДопСтрокиЗаявлениеНажатие
//
Процедура КнопкаДобавитьДопСтрокиЗаявлениеНажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма, , Истина);

КонецПроцедуры

// КнопкаУдалитьДопСтрокиЗаявлениеНажатие
//
Процедура КнопкаУдалитьДопСтрокиЗаявлениеНажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма, , Истина);
	Расчет();

КонецПроцедуры // КнопкаУдалитьДопСтрокиЗаявлениеНажатие

Процедура КнопкаДобавитьДопСтрокиСведенияНажатие(Элемент)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма, , Истина);
	//ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
	Если ВставляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		ВосстановитьИмяОбласти = Истина;
		ВставляемаяОбласть.Имя = "";
	Иначе
		ВосстановитьИмяОбласти = Ложь;
	КонецЕсли;
	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Если ВосстановитьИмяОбласти Тогда
		ВставляемаяОбласть.Имя = "МногострочнаяЧасть";
	КонецЕсли;
КонецПроцедуры

Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	Если УдаляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		ВосстановитьИмяОбласти = Истина;
	Иначе
		ВосстановитьИмяОбласти = Ложь;
	КонецЕсли;
	
	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
	
	Если ВосстановитьИмяОбласти Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = "МногострочнаяЧасть";
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиСведенияНажатие(Элемент)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма, Истина);
	
КонецПроцедуры

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	СнятьЗащитуСЯчеек(НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// СнятьЗащитуСЯчеек
// Снимает защиту с защищаемых ячеек
// Параметры:
// ПоставитьЗащиту - Истина - ставит защиту, Ложь - убрать
//
Процедура СнятьЗащитуСЯчеек(ПоставитьЗащиту)

	Группа1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_4", ЦветФонаБлокировки);

	Цвет          = ?(ПоставитьЗащиту, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

	Для Инд = 0 По Группа1.Количество() - 1 Цикл
		Строка = "_" + Формат((Инд + 1), "ЧГ=0");
		Область = мЗаявление.Области["П000010000111" + Строка];
		Область.Защита = ПоставитьЗащиту;
		Область.ЦветФона = Цвет;

		Область = мЗаявление.Области["П000010000112" + Строка];
		Область.Защита = ПоставитьЗащиту;
		Область.ЦветФона = Цвет;

		Область = мЗаявление.Области["П000010000115" + Строка];
		Область.Защита = ПоставитьЗащиту;
		Область.ЦветФона = Цвет;
		
		Область = мЗаявление.Области["П000010000116" + Строка];
		Область.Защита = ПоставитьЗащиту;
		Область.ЦветФона = Цвет;
	КонецЦикла;

	мЗаявление.Области.П000010000206.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000206.ЦветФона = Цвет;

	мЗаявление.Области.П000010000207.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000207.ЦветФона = Цвет;

	мЗаявление.Области.П000010000211.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000211.ЦветФона = Цвет;

	мЗаявление.Области.П000010000212.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000212.ЦветФона = Цвет;

	мЗаявление.Области.П000010000215.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000215.ЦветФона = Цвет;

	мЗаявление.Области.П000010000216.Защита = ПоставитьЗащиту;
	мЗаявление.Области.П000010000216.ЦветФона = Цвет;

КонецПроцедуры // СнятьЗащитуСЯчеек

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

Функция Проверить()
	
	СтатусОшибки = Ложь;
	
	//Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
	//	Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях""!", СтатусСообщения.Важное);
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	//
	//Если ТочностьЕдиницыИзмерения <> 0 Тогда
	//	Сообщить("Перед выгрузкой необходимо установить точность единицы измерения - 0!", СтатусСообщения.Важное);
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	
	Если ПустаяСтрока(Организация.ИНН) ИЛИ НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(Организация.ИНН) Тогда
		Сообщить("Неверно задан ИНН организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "КодНО, ФИОБух");
	Если СтрДлина(СокрЛП(ОргСведения.КодНО)) <> 4 Тогда
		Сообщить("Неверно задан код ИФНС для организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ОргСведения.ФИОБух) И НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		Сообщить("Невозможно определить ФИО главного бухгалтера организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	// проверка сведений о заявлении
	Заявление = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаЗаявление);
	
	ИННКПП = Заявление.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	ИННКПП = Заявление.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	Если НЕ ЗначениеЗаполнено(Заявление.ПродавецНаимОрг) Тогда
		Сообщить("Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
		Сообщить("Не задан ИНН/УНП продавца.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявление.ПокупательНаимОрг) Тогда
		Сообщить("Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННПокупателя) Тогда
		Сообщить("Не задан ИНН/УНП покупателя.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявление.ДатаКонтракта) Тогда
		Сообщить("Не задана дата контракта.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявление.НомерКонтракта) Тогда
		Сообщить("Не задан номер контракта.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Заявление.П000010000207) Тогда
	//	Сообщить("Не заполнено значение суммарных расходов при определении налоговой базы.", СтатусСообщения.Важное);
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	
	// проверка сведений о товаре и уплаченных налогах
	ЧислоВыгружаемыхТоваров = 0;
	НомерСтроки = 0;
	МнЧЗаявление = мСтруктураМногострочныхРазделов["П0000100001"];
	Для Каждого Стр Из МнЧЗаявление Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ЕстьНепустойПоказатель = Ложь;
		Для Инд = 1 По 16 Цикл
			Если ЗначениеЗаполнено(Стр["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				ЕстьНепустойПоказатель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьНепустойПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000101"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнено наименование товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000105"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана валюта товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000106"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена стоимость товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000110"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена дата принятия товара на учет.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		// анализируем состав ТТД текущей строки
		ТТДокументы = Неопределено;
		Если НЕ мСтрукТЗДокументы.Свойство("К_" + Формат(НомерСтроки, "ЧГ="), ТТДокументы) ИЛИ НЕ ЗначениеЗаполнено(ТТДокументы) ИЛИ ТТДокументы.Количество() = 0 Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заданы сведения о товарно-транспортных документах.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		НомерТТД = 0;
		Для Каждого СтрТТДокумент Из ТТДокументы Цикл
			
			НомерТТД = НомерТТД + 1;
			
			ТТДСерия = ВРЕГ(СокрЛП(СтрТТДокумент.Серия));
			ТТДНомер = ВРЕГ(СокрЛП(СтрТТДокумент.Номер));
			ТТДДата = СтрТТДокумент.Дата;
			
			Если НЕ ЗначениеЗаполнено(ТТДСерия) И НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТТДСерия) Тогда
				Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана серия товарно-транспортного документа №" + НомерТТД + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТТДНомер) Тогда
				Сообщить("В строке " + НомерСтроки + " таблицы товаров не указан номер товарно-транспортного документа №" + НомерТТД + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана дата товарно-транспортного документа №" + НомерТТД + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщить("В таблице товаров не заполнена ни одна строка.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	// проверка сведений о банках и выписках
	ЧислоВыгружаемыхВыписок = 0;
	НомерБанкаПП = 0;
	Для Каждого СтраницаБанк Из мСтруктураМногостраничныхРазделов.Сведения Цикл
		
		НомерБанкаПП = НомерБанкаПП + 1;
		
		БИКБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.БИК));
		НаименованиеБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.НаименованиеБанка));
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнен БИК банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнено наименование банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		// проверяем сведения о выписках банка
		ЧислоВыгружаемыхВыписокТекущегоБанка = 0;
		НомСтрВыписка = 1;
		Пока СтраницаБанк.Данные.Свойство("П000020000101_" + Формат(НомСтрВыписка, "ЧГ=")) Цикл
			
			НомСтрВыпискаСтр = Формат(НомСтрВыписка, "ЧГ=");
			
			П000020000101 = СтраницаБанк.Данные["П000020000101_" + НомСтрВыпискаСтр];
			П000020000102 = СтраницаБанк.Данные["П000020000102_" + НомСтрВыпискаСтр];
			П000020000103 = СтраницаБанк.Данные["П000020000103_" + НомСтрВыпискаСтр];
			
			НомСтрВыписка = НомСтрВыписка + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана дата выписки №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000102) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана сумма уплаченного налога по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указан номер счета по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			ЧислоВыгружаемыхВыписокТекущегоБанка = ЧислоВыгружаемыхВыписокТекущегоБанка + 1;
			
		КонецЦикла;
		
		ЧислоВыгружаемыхВыписок = ЧислоВыгружаемыхВыписок + ЧислоВыгружаемыхВыписокТекущегоБанка;
		
		Если ЧислоВыгружаемыхВыписокТекущегоБанка = 0 Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не определена ни одна выписка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧислоВыгружаемыхВыписок = 0 И (ЗначениеЗаполнено(Заявление.П000010000215) ИЛИ ЗначениеЗаполнено(Заявление.П000010000216)) Тогда
		Сообщить("Сведения о выписках банка не могут быть незаполнены при заполненной итоговой сумме налога.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Возврат НЕ СтатусОшибки;
	
КонецФункции

Процедура Выгрузить()
	
	// общие сведения служебной части
	ДатаДок = ТекущаяДата();
	ДатаДокС = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");
	ОргИНН = СокрЛП(Организация.ИНН);
	ОргКПП = СокрЛП(Организация.КПП);
	КодИНСП = СокрЛП(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), 2, 1);
	
	// даем пользователю выбрать файл
	ДиалогВводаИмениФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВводаИмениФайла.Заголовок = "Укажите имя файла для сохранения";
	ДиалогВводаИмениФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВводаИмениФайла.Расширение = "txt";
	ДиалогВводаИмениФайла.Фильтр = "Текстовый документ(*.txt)|*.txt";
	СчФ = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация);
	ДиалогВводаИмениФайла.ПолноеИмяФайла = "PWW" + Сред(Организация.ИНН, ?(КатегорияНП = 1, 5, 6), 5) + Формат(СчФ, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=") + ".txt";
	Если НЕ ДиалогВводаИмениФайла.Выбрать() Тогда
		Сообщить("Сохранение прервано!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	// инициализируем запись текста в файл
	ВремФайл = ПолучитьИмяВременногоФайла();
	Текст = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.OEM);
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		Если КатегорияНП = 1 Тогда 
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		Если КатегорияНП = 1 Тогда 
			ИДОтпр = ОргИНН + "***********";
		Иначе
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = ИДОтпр + Прав(ДатаДокС, 4) + Сред(ДатаДокС, 4, 2) + Лев(ДатаДокС, 2) + Формат(Час(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Минута(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=");
	
	// выгружаем общие сведения информационной части
	Текст.ЗаписатьСтроку("ИдФайл:" + ИдФайл);
	Текст.ЗаписатьСтроку("ИдПол:"  + КодИнсп);
	Текст.ЗаписатьСтроку("ТипИнф:ЭСНДСРБНП");
	Текст.ЗаписатьСтроку("КолДок:1");
	Текст.ЗаписатьСтроку("ВерсПрог:" + РегламентированнаяОтчетность.СформироватьВерсПрог());
	
	// выгружаем сведения об отправителе
	Если КатегорияНП = 1 Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ТелОрганизации, ФИОБух");
		Отправитель = РегламентированнаяОтчетность.СтрЗаменитьПробелы(СокрЛП(СведенияОбОрганизации.ФИОБух));
		ОргТелефон = ВРЕГ(СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	Иначе
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ТелОрганизации, ФИО");
		Отправитель = РегламентированнаяОтчетность.СтрЗаменитьПробелы(СокрЛП(СведенияОбОрганизации.ФИО));
		ОргТелефон = ВРЕГ(СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	КонецЕсли;
	Текст.ЗаписатьСтроку("ТелОтпр:" + ВРЕГ(Лев(ОргТелефон, 20)));
	Текст.ЗаписатьСтроку("ФИООтпр:" + Отправитель);
	Текст.ЗаписатьСтроку("@@@");
	
	// информационная часть
	Заявление = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаЗаявление);
	
	// выгружаем сведения о заявлении
	ИННКПП = Заявление.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	ИННКПП = Заявление.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, мСохраненныйДок.ДатаНачала) + 1;
	Текст.ЗаписатьСтроку("ИдДок:"		+ ИДОтпр + Прав(ДатаДокС, 4) + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ="));
	Текст.ЗаписатьСтроку("ДатаДок:"		+ ДатаДокС);
	Текст.ЗаписатьСтроку("НаимПрод:"	+ СокрЛП(ВРЕГ(Заявление.ПродавецНаимОрг)));
	Текст.ЗаписатьСтроку("ИННУНППрод:"	+ СокрЛП(ВРЕГ(ИННПродавца)));
	Текст.ЗаписатьСтроку("КППРПрод:"	+ СокрЛП(ВРЕГ(КПППродавца)));
	Текст.ЗаписатьСтроку("НаимПок:"		+ СокрЛП(ВРЕГ(Заявление.ПокупательНаимОрг)));
	Текст.ЗаписатьСтроку("ИННУНППок:"	+ СокрЛП(ВРЕГ(ИННПокупателя)));
	Текст.ЗаписатьСтроку("КППРПок:"		+ СокрЛП(ВРЕГ(КПППокупателя)));
	Текст.ЗаписатьСтроку("ДатаКонтр:"	+ СокрЛП(ВРЕГ(Формат(Заявление.ДатаКонтракта,"ДФ=dd.MM.yyyy"))));
	Текст.ЗаписатьСтроку("НомКонтр:"	+ СокрЛП(ВРЕГ(Заявление.НомерКонтракта)));
	Текст.ЗаписатьСтроку("ДатаСпец:"	+ СокрЛП(ВРЕГ(Формат(Заявление.ДатаСпецификации,"ДФ=dd.MM.yyyy"))));
	Текст.ЗаписатьСтроку("НомСпец:"		+ СокрЛП(ВРЕГ(Заявление.НомерСпецификации)));
	Текст.ЗаписатьСтроку("РасходСум:"	+ СокрЛП(ВРЕГ(Формат(Заявление.П000010000207, "ЧРД=.; ЧН=0.00; ЧГ=0"))));
	Текст.ЗаписатьСтроку("УплНДС:"		+ СокрЛП(ВРЕГ(Формат(Заявление.П000010000215, "ЧРД=.; ЧГ=0"))));
	Текст.ЗаписатьСтроку("УплАкциз:"	+ СокрЛП(ВРЕГ(Формат(Заявление.П000010000216, "ЧРД=.; ЧГ=0"))));
	Текст.ЗаписатьСтроку("###");
	
	// выгружаем сведения о банках и выписках
	НомерБанкаПП = 0;
	Для Каждого СтраницаБанк Из мСтруктураМногостраничныхРазделов.Сведения Цикл
		
		БИКБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.БИК));
		НаименованиеБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.НаименованиеБанка));
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерБанкаПП = НомерБанкаПП + 1;
		
		// выгружаем сведения о банках
		Текст.ЗаписатьСтроку("НомБПП:"	+ Формат(НомерБанкаПП, "ЧГ="));
		Текст.ЗаписатьСтроку("БИКБ:"	+ БИКБанка);
		Текст.ЗаписатьСтроку("НаимБ:"	+ НаименованиеБанка);
		Текст.ЗаписатьСтроку("###");
		
		// выгружаем сведения о выписках
		НомерВыпискиПП = 1; // для нумерования в файле выгрузки
		НомСтрВыписка = 1; // для обращения к ячейкам
		Пока СтраницаБанк.Данные.Свойство("П000020000101_" + Формат(НомСтрВыписка, "ЧГ=")) Цикл
			
			НомСтрВыпискаСтр = Формат(НомСтрВыписка, "ЧГ=");
			П000020000101 = СтраницаБанк.Данные["П000020000101_" + НомСтрВыпискаСтр];
			П000020000102 = СтраницаБанк.Данные["П000020000102_" + НомСтрВыпискаСтр];
			П000020000103 = СтраницаБанк.Данные["П000020000103_" + НомСтрВыпискаСтр];
			
			НомСтрВыписка = НомСтрВыписка + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			КонецЕсли;
			
			Текст.ЗаписатьСтроку("НомВыпПП:"	+ Формат(НомерВыпискиПП, "ЧГ="));
			Текст.ЗаписатьСтроку("ДатаВып:"		+ Формат(П000020000101, "ДФ=dd.MM.yyyy"));
			Текст.ЗаписатьСтроку("СумВып:"		+ Формат(П000020000102, "ЧРД=.; ЧГ=0"));
			Текст.ЗаписатьСтроку("Счет:"		+ ВРЕГ(СокрЛП(П000020000103)));
			Текст.ЗаписатьСтроку("###");
			
			НомерВыпискиПП = НомерВыпискиПП + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// выгружаем таблицу товаров
	НомерСтроки = 1;
	НомТов = 0;
	МнЧЗаявление = мСтруктураМногострочныхРазделов["П0000100001"];
	Для Каждого Стр Из МнЧЗаявление Цикл
	//Пока Страница.Данные.Свойство("П000010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЕстьНепустойПоказатель = Ложь;
		Для Инд = 1 По 16 Цикл
			Если ЗначениеЗаполнено(Стр["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				ЕстьНепустойПоказатель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьНепустойПоказатель Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
		НовТов = НомТов + 1;
		Текст.ЗаписатьСтроку("НомТовПП:"	+ НомерСтрокиСтр);
		Текст.ЗаписатьСтроку("НаимТов:"		+ СокрЛП(ВРЕГ(Стр["П000010000101"])));
		Текст.ЗаписатьСтроку("ТНВЭД:"		+ СокрЛП(ВРЕГ(Стр["П000010000102"])));
		Текст.ЗаписатьСтроку("ЕдИзмТов:"	+ СокрЛП(ВРЕГ(Стр["П000010000103"])));
		Текст.ЗаписатьСтроку("КоличТов:"	+ СокрЛП(ВРЕГ(Формат(Стр["П000010000104"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("СтоимТов:"	+ СокрЛП(ВРЕГ(Формат(Стр["П000010000106"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("ВалТов:"		+ СокрЛП(ВРЕГ(Стр["П000010000105"])));
		Текст.ЗаписатьСтроку("Расход:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000107"], "ЧРД=.; ЧН=0.00; ЧГ=0"))));
		Текст.ЗаписатьСтроку("ДатаПрин:"	+ СокрЛП(ВРЕГ(Формат(Стр["П000010000110"], "ДФ=dd.MM.yyyy"))));
		Текст.ЗаписатьСтроку("НБНДС:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000111"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("ЕдИзмНБА:"	+ СокрЛП(ВРЕГ(Стр["П000010000119"])));
		Текст.ЗаписатьСтроку("НБАкциз:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000112"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("СтНДС:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000113"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("СтАкциз:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000114"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("ВалСтАкциз:"	+ СокрЛП(ВРЕГ(Стр["П000010000120"])));
		Текст.ЗаписатьСтроку("СумНДС:"		+ СокрЛП(ВРЕГ(Формат(Стр["П000010000115"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("СумАкциз:"	+ СокрЛП(ВРЕГ(Формат(Стр["П000010000116"], "ЧРД=.; ЧГ=0"))));
		Текст.ЗаписатьСтроку("###");
		
		// выгружаем сведения о товарно-транспортных документах
		ТТДокументы = Неопределено;
		Если НЕ мСтрукТЗДокументы.Свойство("К_" + Формат(НомерСтроки, "ЧГ="), ТТДокументы) ИЛИ НЕ ЗначениеЗаполнено(ТТДокументы) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТТД = 0;
		Для Каждого СтрТТДокумент Из ТТДокументы Цикл
			
			ТТДСерия = ВРЕГ(СокрЛП(СтрТТДокумент.Серия));
			ТТДНомер = ВРЕГ(СокрЛП(СтрТТДокумент.Номер));
			ТТДДата = СтрТТДокумент.Дата;
			
			Если НЕ ЗначениеЗаполнено(ТТДСерия) И НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерТТД = НомерТТД + 1;
			
			Текст.ЗаписатьСтроку("НомТСДПП:"	+ Формат(НомерТТД, "ЧГ="));
			Текст.ЗаписатьСтроку("СерияТСД:"	+ ТТДСерия);
			Текст.ЗаписатьСтроку("НомерТСД:"	+ ТТДНомер);
			Текст.ЗаписатьСтроку("ДатаТСД:"		+ Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			Текст.ЗаписатьСтроку("###");
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("@@@");
	Текст.ЗаписатьСтроку("===");
	Текст.Закрыть();
	
	Попытка
		ПереместитьФайл(ВремФайл, ДиалогВводаИмениФайла.ПолноеИмяФайла);
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок, мСохраненныйДок.ДатаНачала);
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчФ);
		Сообщить("Данные сохранены в файл """ + ДиалогВводаИмениФайла.ПолноеИмяФайла + """.", СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось записать файл " + ДиалогВводаИмениФайла.ПолноеИмяФайла + "! Возможно, недостаточно места на диске или диск защищен от записи.", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Если Модифицированность И Вопрос("Перед выгрузкой необходимо сохранить отчет. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Проверить() Тогда
		Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если СокрЛП(Текст) <> СокрЛП(Комментарий) Тогда
		мОбновитьКомментарий = Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		мОбновитьКомментарий = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫБОРА ИЗ СПИСКА
//

Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2009Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название", , "Наименование", МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("ПолноеНаименование", ,"Полное наименование", МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.ПолноеНаименование = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000117", 1, , "Выбор единицы измерения подакцизного товара", КоллекцияСписковВыбора["ЕдИзмПодАкцТоваров"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	//Изменение связанных данных
	Если КодПоказателя = "П000010000117" Тогда
		
		НомерСтроки = Сред(Область.Имя, 15);
		
		Область.Значение = РезультатВыбора.Название;
		Элемент.Области["П000010000119_" + НомерСтроки].Значение = РезультатВыбора.Код;
		
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000117 = РезультатВыбора.Название;
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000119 = РезультатВыбора.Код;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мИдГруппы1  = "П0000100001";
мИдГруппы2  = "П0000200001";

мМаскиЯчейки = Новый Соответствие;
мМаскиЯчейки.Вставить("П000010000102", "9999999999");

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 2;
КолИсхСтрокИдГруппы2 = 1;

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
МассивБулево = Новый Массив;

МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010000101", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010000102",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
СтруктураГруппы1.Колонки.Добавить("П000010000103", ОписаниеТиповСтрока254); // Ед.изм. код
СтруктураГруппы1.Колонки.Добавить("П000010000104", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(16, 6));
СтруктураГруппы1.Колонки.Добавить("П000010000105", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010000106", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000107", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000108", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010000109", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010000110", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000010000111", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000112", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(16, 2));
СтруктураГруппы1.Колонки.Добавить("П000010000113", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000114", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000115", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010000116", мОписаниеТиповЧислоЕ);

СтруктураГруппы1.Колонки.Добавить("П000010000117",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100)); // Ед. изм. текст
СтруктураГруппы1.Колонки.Добавить("П000010000118",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100)); // Валюта текст

СтруктураГруппы1.Колонки.Добавить("П000010000119",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)); // Ед.изм. код
СтруктураГруппы1.Колонки.Добавить("П000010000120",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)); // Валюта код

СтруктураГруппы1.Колонки.Добавить("П000010000121", ОписаниеТиповСтрока254); // Ед. изм. текст



СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000020000101", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000020000102", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000020000103", ОписаниеТиповСтрока254);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);


// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

ТаблицаСтраницыСведения = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыСведения.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

мСтруктураМногостраничныхРазделов.Вставить("Сведения", ТаблицаСтраницыСведения);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "11/08/2009";

мКодОтчета = "1151099";

мПечатныеформы = Новый СписокЗначений;
мСтрукТЗДокументы = Новый Структура;
