////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мРаздел1, мРаздел2, мРаздел3, мПриложение, мСведения;
Перем ТаблицаСообщений Экспорт;

Перем мИдГруппы1, мИдГруппы2;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;
// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;
// Список льгот, строка 220
// данные в мекете Списки

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мРежимПечати Экспорт;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мБезОткрытияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

Перем мСоставПоказателей Экспорт;

// Переменная для хранения координато масок и сами маски.
Перем мМаскиЯчейки;

Перем мДокументВосстановлен;

Перем СвойстваПоказателей Экспорт;

Перем мТЗСпецификацийРаздел1;
Перем мТЗСпецификацийРаздел1_07;
Перем мТЗСпецификацийРаздел3;
Перем мМассивТЗСпецификацийПрил;

Перем мДанныеОтчета Экспорт;

Функция ПолучитьТекстыИзТЗСпецификаций(ТЗСпецификаций)
	Тексты = Новый Структура;
	ТекстНомер 	= "";
	ТекстДата 	= "";
	
	Для Сч = 1 По ТЗСпецификаций.Количество() Цикл
		Строка = ТЗСпецификаций[Сч - 1];
		
		ТекстНомер = ДобавитьРеквизит(ТекстНомер, Строка.Номер, ?(ТекстНомер = "", "", "; "));
		ТекстДата  = ДобавитьРеквизит(ТекстДата,  Формат(Строка.Дата, "ДФ=dd.MM.yyyy"),  ?(ТекстДата  = "", "", "; "));
		
	КонецЦикла; 
	
	Тексты.Вставить("Номер", ТекстНомер);
	Тексты.Вставить("Дата", ТекстДата);
	
	Возврат Тексты;
	
КонецФункции


Процедура ОбновитьТЗСпецификаций()
	// ТЗ спецификаций Раздел1
	мТЗСпецификацийРаздел1 = СоздатьТЗСпецификаций();
	
	// ТЗ спецификаций Раздел1_07
	мТЗСпецификацийРаздел1_07 = СоздатьТЗСпецификаций();
	
	// ТЗ спецификаций Раздел3
	мТЗСпецификацийРаздел3 = СоздатьТЗСпецификаций();
	
	// массив ТЗ спецификаций Приложение
	мМассивТЗСпецификацийПрил = Новый Массив;
	Элемент = СоздатьТЗСпецификаций(); 
	мМассивТЗСпецификацийПрил.Добавить(Элемент);
КонецПроцедуры
 

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраницаПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
			УстановитьЦветФонаЯчейки(,, ТекущаяСтраницаПанели);
		КонецЕсли;

		ОбновитьТЗСпецификаций();
		
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;
	
	// получаем номер текущей доп страницы
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы = Неопределено Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Приложение");
		Возврат;
	КонецЕсли;	
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);  
	
	// удаляем допстраницу
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

	// удаляем сообветствующий элемент в массиве структур Спецификаций
	
	Если ИмяТекущейСтраницыПанели = "Приложение" Тогда
		Если мМассивТЗСпецификацийПрил.Количество() > 1 Тогда 
			мМассивТЗСпецификацийПрил.Удалить(НомерТекущейСтраницы);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Окончание блока стандартных процедур/функций

// Блок обязательных функций

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел_1 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел_1.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	МнгРаздел_2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел_2.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел_1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ПродавецНаимОрг";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложения
	СтрокаУровня1.ИмяСтраницы                          = "Приложение";
	СтрокаУровня1.МногострочностьВРазделе              = Ложь;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва листа сведений
	СтрокаУровня1.ИмяСтраницы                          = "Сведения";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел_2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;


КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
	// Процедура заглушка
	Пусто = Неопределено;
	Возврат;
КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Окончание блока обязательных функций

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

 	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

								ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	// Процедура "заглушка", для других механизмов.
	ИзмененияПроизошли = Ложь;
	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	//НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	//Если НомерМесяца = "12" Тогда
	//	НомерМесяца = "0";
	//КонецЕсли;

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
    Перем ТаблицаСтраниц;
	
	Если мВПрограммеИзмененаОрганизация Тогда
		Возврат;
	КонецЕсли;

	мРаздел1.Области.ДатаПодписиРук.Защита = Ложь;
	мРаздел1.Области.ДатаПодписиБух.Защита = Ложь;
	мРаздел3.Области.ДатаПодписиРук.Защита = Ложь;
	мРаздел3.Области.ДатаПодписиБух.Защита = Ложь;

	мРаздел1.Области.ДатаПодписиРук.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	мРаздел1.Области.ДатаПодписиБух.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	мРаздел3.Области.ДатаПодписиРук.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	мРаздел3.Области.ДатаПодписиБух.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	
	мРаздел1.Области.ДатаПодписиРук.Защита = Истина;
	мРаздел1.Области.ДатаПодписиБух.Защита = Истина;
	мРаздел3.Области.ДатаПодписиРук.Защита = Истина;
	мРаздел3.Области.ДатаПодписиБух.Защита = Истина;
			
	число = День(ДатаПодписи);
	месяц = Месяц(ДатаПодписи);
	год   = Год(ДатаПодписи);
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			
			ТекТабличноеПоле.Области.Число.Защита = Ложь;
			ТекТабличноеПоле.Области.Месяц.Защита = Ложь;
			ТекТабличноеПоле.Области.Год.Защита   = Ложь;
			
			ТекТабличноеПоле.Области.Число.Значение = Число;
			ТекТабличноеПоле.Области.Месяц.Значение = Месяц;
			ТекТабличноеПоле.Области.Год.Значение   = Год;
			
			ТекТабличноеПоле.Области.Число.Защита = Истина;
			ТекТабличноеПоле.Области.Месяц.Защита = Истина;
			ТекТабличноеПоле.Области.Год.Защита   = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Приложение");
	
	Для Каждого ДопСтр Из мСтруктураМногостраничныхРазделов.Приложение Цикл
		ДопСтр.Данные.Число = Число;
		ДопСтр.Данные.Месяц = Месяц;
		ДопСтр.Данные.Год   = Год;
	КонецЦикла;
	
	мПриложение.Области.Число.Защита = Ложь;
	мПриложение.Области.Месяц.Защита = Ложь;
	мПриложение.Области.Год.Защита   = Ложь;
	
	мПриложение.Области.Число.Значение = Число;
	мПриложение.Области.Месяц.Значение = Месяц;
	мПриложение.Области.Год.Значение   = Год;
	
	мПриложение.Области.Число.Защита = Истина;
	мПриложение.Области.Месяц.Защита = Истина;
	мПриложение.Области.Год.Защита   = Истина;                                               


КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтранице
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт

	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Сведения" Тогда
		ИмяГруппы = мИдГруппы2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "КодНО"); // код ИФНС
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", ?(ЧП, "АдрМЖ", "АдрЮР"));

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО"); // ФИО ПБОЮЛа

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	// Инициализируем переменные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		Адр       = "";
	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";

	// Получаем данные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",      ИННЮЛ    );
		ОргСведения.Свойство("КППЮЛ",      КППЮЛ    );
		ОргСведения.Свойство("НаимЮЛПол",  НаимЮЛПол);
		ОргСведения.Свойство(?(ЧП, "АдрМЖ", "АдрЮР"), Адр);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук",     ФИОРук   );
	ОргСведения.Свойство("ФИОБух",     ФИОБух   );
	ОргСведения.Свойство("ФИО",     ФИО   );
	Если ЧП Тогда
		НаимЮЛПол = ФИО;
		ФИОРук = ФИО;
		ФИОБух = "";
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мРаздел1.Области.ФИОРук.Значение  = ФИОРук;
        мРаздел3.Области.ФИОРук.Значение  = ФИОРук;

		мРаздел1.Области.ФИОБух.Значение = ФИОБух;
        мРаздел3.Области.ФИОБух.Значение = ФИОБух;

		Если ЧП Тогда
			мРаздел1.Области.ПокупательНаимОрг.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	// Заполняем ИНН на всех листах декларации
	//Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
	//	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	//Иначе
	//	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "");
	//КонецЕсли;

	мИННЮЛ = ИННЮЛ;
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мКППЮЛ = КППЮЛ;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел1.Области.ПокупательМестоНахожд.Значение)) Тогда
		Адр = СтрЗаменить(Адр, ",,,,,,,,,", "");
		мРаздел1.Области.ПокупательМестоНахожд.Значение = Адр;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(Адр, ",","")) Тогда
			ОбработанныйАдр = "";
			мРаздел1.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		Иначе
			ОбработанныйАдр = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адр);
			мРаздел1.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел1.Области.ПокупательИНН_КПП.Значение)) Тогда
		мРаздел1.Области.ПокупательИНН_КПП.Значение = мИННЮЛ + ?(НЕ РегламентированнаяОтчетность.ПустоеЗначение(мКППЮЛ), "/","") + мКППЮЛ;
	КонецЕсли;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел1.Области.ПокупательНаимОрг.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мРаздел1.Области.ПокупательНаимОрг.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел1.Области.ФИОБух.Значение)) Тогда
		мРаздел1.Области.ФИОБух.Значение  = ФИОБух;
	КонецЕсли;

	// Работаем с ФИО руководителя	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел1.Области.ФИОРук.Значение)) Тогда
		мРаздел1.Области.ФИОРук.Значение = ПолучитьСведенияОПредставителе(ОргСведения.КодНО).ФИОПодписанта;;
	КонецЕсли;

	// Даты проставятся всегда при открытии документа или при изменении организации
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
	// Заполним даты формирования декларации (подписи)
		Модифицированность = Истина;
		ЗаполнитьДатуВЯчейках();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	//Группа1 = Неопределено;
	//мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	//Для Инд = 0 По Группа1.Количество() - 1 Цикл

	//	Строка = "_" + Формат(Инд + 1, "ЧГ=0");

		//ФорматируемаяОбласть = мРаздел1.Области["П000010000106" + Строка];
		//ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мРаздел1.Области["П000010000115" + Строка];
		//ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мРаздел1.Области["П000010000119" + Строка];
		//ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

		//ФорматируемаяОбласть = мРаздел1.Области["П000010000120" + Строка];
		//ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
		//ФорматируемаяОбласть.Формат = мСтрокаФормата;

	// КонецЦикла;

	//мРаздел1.Области.П000010000115.Формат = мСтрокаФормата;

	//мРаздел1.Области.П000010000119.Формат = мСтрокаФормата;

	//мРаздел1.Области.П000010000120.Формат = мСтрокаФормата;
	
	//Группа2 = Неопределено;
	//мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, Группа2);

	//Для Инд = 0 По Группа2.Количество() - 1 Цикл

	//	Строка = "_" + Формат(Инд + 1, "ЧГ=0");

	//	ФорматируемаяОбласть = мСведения.Области["П000020000103" + Строка];
	//	ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
	//	ФорматируемаяОбласть.Формат = мСтрокаФормата;

	//КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Истина;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), , Истина);
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);

КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательИНН_КПП");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательНаимОрг");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательМестоНахожд");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели);
	
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.
		
		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				
				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				
				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

				// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено И ИмяСтраницыПанели = "Раздел1" Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если ПолучитьСвойствоРаздела(ВыбТабличноеПоле.Имя, "ПредставлениеДанных") Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ВыбТабличноеПоле.Имя);
	КонецЕсли;

	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);

	Расчет(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;



КонецПроцедуры // Печать()

// ПолучитьКодИМНС
// Возвращает код ИМНС из справочника организации
//
Функция ПолучитьКодИМНС()

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат "";
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "КодНО");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	КодНО = "";

	ОргСведения.Свойство("КодНО", КодНО);

	Если КодНО = Неопределено Или РегламентированнаяОтчетность.ПустоеЗначение(КодНО) Тогда
		Результат = "";
	Иначе
		Результат = КодНО;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКодИМНС

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = ПолучитьКодИМНС();

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вставляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вставляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	// вставляем спецификации раздел1
	СписокСохранения.Вставить("мТЗСпецификацийРаздел1", мТЗСпецификацийРаздел1); 
	
	// вставляем спецификации раздел1
	СписокСохранения.Вставить("мТЗСпецификацийРаздел1_07", мТЗСпецификацийРаздел1_07); 

	// вставляем спецификации раздел3
	СписокСохранения.Вставить("мТЗСпецификацийРаздел3", мТЗСпецификацийРаздел3); 
	
	// вставляем массив спецификации Приложения
	СписокСохранения.Вставить("мМассивТЗСпецификацийПрил", мМассивТЗСпецификацийПрил);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	

	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

//вспомогательная процедура при восстановлении
Процедура ПеренестиДанныеСтруктураТЗ(СтруктураСпецификаций, ТЗСпецификаций)
	Для Сч = 1 По 5 Цикл
		НоваяСтрока = ТЗСпецификаций.Добавить();
        НоваяСтрока.Номер 	= СтруктураСпецификаций["НомерСП" + Сч];
		НоваяСтрока.Дата 	= СтруктураСпецификаций["ДатаСП" + Сч];
	КонецЦикла;
КонецПроцедуры


// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	НомерСтроки = 1;
	Пока мРаздел1.Области.Найти("П000010000116_" + НомерСтроки) <> Неопределено Цикл
		Если мРаздел1.Области.Найти("П000010000116_" + НомерСтроки).Значение = "-" Тогда
			мРаздел1.Области["П000010000114_" + НомерСтроки].Формат = "ЧН=-";	
		Иначе
			мРаздел1.Области["П000010000114_" + НомерСтроки].Формат = "ЧДЦ=6; ЧН=";
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	// восстанавливаем  ТЗ спецификаций Раздел1;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел1", мТЗСпецификацийРаздел1);
	Если мТЗСпецификацийРаздел1 = Неопределено Тогда  		
		мТЗСпецификацийРаздел1 = СоздатьТЗСпецификаций();    	
	КонецЕсли;
	
	// восстанавливаем ТЗ спецификаций Раздел1 стр 07;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел1_07", мТЗСпецификацийРаздел1_07);
	Если мТЗСпецификацийРаздел1_07 = Неопределено Тогда    		
		мТЗСпецификацийРаздел1_07 = СоздатьТЗСпецификаций();		
	КонецЕсли;
	
	// восстанавливаем ТЗ спецификаций Раздел3;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел3", мТЗСпецификацийРаздел3);
	Если мТЗСпецификацийРаздел3 = Неопределено Тогда    		
		мТЗСпецификацийРаздел3 = СоздатьТЗСпецификаций();   		
	КонецЕсли;

	// восстанавливаем  массив ТЗ спецификаций Приложения;
	СписокСохранения.Свойство("мМассивТЗСпецификацийПрил", мМассивТЗСпецификацийПрил);
	Если мМассивТЗСпецификацийПрил = Неопределено Тогда    		
		мМассивТЗСпецификацийПрил = Новый Массив;
		Элемент = СоздатьТЗСпецификаций(); 
		мМассивТЗСпецификацийПрил.Добавить(Элемент);
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	СнятьЗащитуСЯчеек(НЕ ФлажокОтклАвтоРасчет);

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если ВерсияФормы = "16/08/2010" Тогда
		//восстанавливаем структуры спецификаций, достаем данные и укладываем в таблицы значений спецификаций
		СтруктураСпецификаций = Неопределено;
		СписокСохранения.Свойство("мСтруктураСпецификацийРаздел1", СтруктураСпецификаций);
	    ПеренестиДанныеСтруктураТЗ(СтруктураСпецификаций, мТЗСпецификацийРаздел1);
		
		СписокСохранения.Свойство("мСтруктураСпецификацийРаздел1_07", СтруктураСпецификаций);
	    ПеренестиДанныеСтруктураТЗ(СтруктураСпецификаций, мТЗСпецификацийРаздел1_07);
		
		СписокСохранения.Свойство("мСтруктураСпецификацийРаздел3", СтруктураСпецификаций);
	    ПеренестиДанныеСтруктураТЗ(СтруктураСпецификаций, мТЗСпецификацийРаздел3);
		
		МассивСтруктурСпецификаций = Неопределено;
		СписокСохранения.Свойство("мСтруктураСпецификацийПрил", МассивСтруктурСпецификаций);
		мМассивТЗСпецификацийПрил = Новый Массив;
		Для Сч = 1 По МассивСтруктурСпецификаций.Количество() Цикл
			ТЗСпецификаций = СоздатьТЗСпецификаций(); 
			ПеренестиДанныеСтруктураТЗ(МассивСтруктурСпецификаций[Сч - 1], ТЗСпецификаций);
			мМассивТЗСпецификацийПрил.Добавить(ТЗСпецификаций);
		КонецЦикла; 
		
		//добавляем именованные поля к каждой строке мнострочной части раздела 1
		Если мРаздел1.Области.Найти("П000010000121_1") <> Неопределено Тогда
			мРаздел1.Области.Найти("П000010000121_1").Имя = "";
		КонецЕсли;
		
		НомерСтроки = 1;
		Пока мРаздел1.Области.Найти("П000010000120_" + Формат(НомерСтроки, "ЧГ=0")) <> Неопределено Цикл
			НомСтрокиТабличногоДокумента = мРаздел1.Области.Найти("П000010000120_" + Формат(НомерСтроки, "ЧГ=0")).Низ;
			мРаздел1.Область("R" + НомСтрокиТабличногоДокумента + "C81").Имя = "П000010000121_" + НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		//преобразуем таблицу значений многострочного раздела 1 (изменились типы колонок 2, 14, 18, добавилась колонка 21)
		ОбновленнаяТЗ = мСтруктураМногострочныхРазделов[мИдГруппы1].Скопировать();
		ОбновленнаяТЗ.Очистить();
		
		ОбновленнаяТЗ.Колонки.Удалить("П000010000102");
		ОбновленнаяТЗ.Колонки.Удалить("П000010000108");
		ОбновленнаяТЗ.Колонки.Удалить("П000010000114");
		
		ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
		ОписаниеТиповЧисло9_4  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(9, 4);
		ОписаниеТиповЧисло20_6 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20, 6);
		ОписаниеТиповСтрока500 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
		
		ОбновленнаяТЗ.Колонки.Добавить("П000010000102", ОписаниеТиповСтрока500);
		ОбновленнаяТЗ.Колонки.Добавить("П000010000108", ОписаниеТиповЧисло9_4);
		ОбновленнаяТЗ.Колонки.Добавить("П000010000114", ОписаниеТиповЧисло20_6);
		ОбновленнаяТЗ.Колонки.Добавить("П000010000121", ОписаниеТиповСтрока1);
		
		Для каждого СтрокаТЗ Из мСтруктураМногострочныхРазделов[мИдГруппы1] Цикл 
			ЗаполнитьЗначенияСвойств(ОбновленнаяТЗ.Добавить(), СтрокаТЗ) 
		КонецЦикла; 
		
		мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, ОбновленнаяТЗ);
		
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
	//Перем ИсходноеКоличествоСтрокГруппы;

	//// определим исходное колво строк многострочного раздела,
	//// соответствующее бумажной форме отчета
	//мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	//// реальное кол-во строк (колво заполненных строк)
	//ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	//ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	//// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	//// отображаемых в форме строк многострочного раздела с реальным количеством
	//// созданных строк в сохраненном отчете.
	//Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

	//	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	//	// автоматически добавляем необходимое колво строк.
	//	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

	//		НомИсходнойСтроки = НомНовойСтроки - 1;

	//		// определяем имя первой ячейки последней из исходных строк
	//		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

	//		// область первой ячейки последней из исходных строк
	//		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	//		// номера строк исходной области
	//		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	//		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	//		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	//		// номера строк вставляемой области
	//		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	//		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	//		// определяем вставляемую область
	//		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	//		// добавляем в таблицу новую строку
	//		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	//		// переопределяем имена вставленной области
	//		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

	//			ИмяКолонки          = Колонка.Имя;

	//			ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
	//			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

	//			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
	//			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

	//			// определяем границы ячейки исходной области
	//			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
	//			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
	//			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
	//			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

	//			// Назначаем имя ячейки исходной области,
	//			// (т.к. в результате вставки новой области оно было очищено)
	//			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
	//			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

	//			// очищаем значения ячеек вставленной области
	//			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
	//				ОбластьЯчейки.Очистить();
	//			Иначе
	//				// порядковый номер последней строки перед вставкой
	//				ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
	//				НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//				ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
	//			КонецЕсли;

	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;

	//// выводим значения строк
	//Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
	//	Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

	//		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
	//		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
	//		ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
	//		ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
	//		ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

	//		Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
	//			// задаем значение ячейки
	//			ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

	//		Иначе
	//			// устанавливаем порядковый номер строки
	//			ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
	//		КонецЕсли;

	//	КонецЦикла;
	//КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел1;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мСведения;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Группа1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	СуммаПоКолонке14 = 0;
	СуммаПоКолонке15 = 0;
	СуммаПоКолонке19 = 0;
	СуммаПоКолонке20 = 0;

	Для Инд = 0 По Группа1.Количество() - 1 Цикл
		Строка = "_" + Формат(Инд + 1, "ЧГ=0");

		П000010000114 = мРаздел1.Области["П000010000114" + Строка].Значение; 
		СуммаПоКолонке14 = СуммаПоКолонке14 + П000010000114;

		П000010000115 = мРаздел1.Области["П000010000115" + Строка].Значение;
		СуммаПоКолонке15 = СуммаПоКолонке15 + П000010000115;

		П000010000119 = мРаздел1.Области["П000010000119" + Строка].Значение; 
		СуммаПоКолонке19 = СуммаПоКолонке19 + П000010000119;

		П000010000120 = мРаздел1.Области["П000010000120" + Строка].Значение;
		СуммаПоКолонке20 = СуммаПоКолонке20 + П000010000120;

	КонецЦикла;

	мРаздел1.Области.П000010000114.Значение = Окр(СуммаПоКолонке14, 2);
	мРаздел1.Области.П000010000115.Значение = СуммаПоКолонке15;
	мРаздел1.Области.П000010000119.Значение = Окр(СуммаПоКолонке19);
	мРаздел1.Области.П000010000120.Значение = Окр(СуммаПоКолонке20);

КонецПроцедуры // Расчет()

// НачальныеОперацииСМногострочнымиБлоками
//
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			НомерСтроки = Формат(НСтр, "ЧГ=0");
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + НомерСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;

					МаскаДляКолонки = ВернутьМаскуДляКолонки(ИмяКолонки);
					Если МаскаДляКолонки <> Неопределено Тогда
						ОбластьЯчейки.ЭлементУправления.Маска = МаскаДляКолонки;
					КонецЕсли;

				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками

// ВернутьМаскуДляКолонки
//
Функция ВернутьМаскуДляКолонки(ИмяКолонки) // ВернутьМаскуДляКолонки
	Возврат мМаскиЯчейки.Получить(ИмяКолонки);
КонецФункции // ВернутьМаскуДляКолонки

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
// Процедура используется только в механизме Контрольных соотношений. В данном отчете
// процедура не используется.
// По сравнению с аналогами в других отчетах, эта процедура только формирует таблицу
// состава показателей. мТаблицаСоставПоказателей.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мРаздел1    = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2    = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3    = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мПриложение = ЭлементыФормы.ПолеТабличногоДокументаПриложение;
	мСведения   = ЭлементыФормы.ПолеТабличногоДокументаСведения;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;
	мРежимПечати = Ложь;
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
			ОбновитьТЗСпецификаций();

			УстановитьФорматВывода();
			
			мОбновитьКомментарий = Истина;

		КонецЕсли;

	Иначе
		Если НЕ БезОткрытияФормы Тогда
			// Установим маски, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел1");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), , Истина);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	ИмяОбласти = Область.Имя;
	
	Если Найти(ИмяОбласти, "КодСтраныПродавец") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода страны";
		
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.КлассификаторСтранМира.НайтиПоКоду(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
			
			Если Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;   
			
	ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаСпецификаций = ПолучитьФорму("ФормаВводаСпецификаций");
		ФормаВводаСпецификаций.ТЗСпецификаций = мТЗСпецификацийРаздел1;
		Результат = ФормаВводаСпецификаций.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			мТЗСпецификацийРаздел1 = Результат;
			Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел1);
			мРаздел1.Области.НомерСпецификации.Значение = Тексты.Номер;
			мРаздел1.Области.ДатаСпецификации.Значение = Тексты.Дата;
			Модифицированность = Истина;
		КонецЕсли
		
	ИначеЕсли ИмяОбласти = "НомерСпецификации_07" ИЛИ ИмяОбласти = "ДатаСпецификации_07" Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаСпецификаций = ПолучитьФорму("ФормаВводаСпецификаций");
		ФормаВводаСпецификаций.ТЗСпецификаций = мТЗСпецификацийРаздел1_07;
		Результат = ФормаВводаСпецификаций.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			мТЗСпецификацийРаздел1_07 = Результат;
			Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел1_07);
			мРаздел1.Области.НомерСпецификации_07.Значение = Тексты.Номер;
			мРаздел1.Области.ДатаСпецификации_07.Значение = Тексты.Дата;
			Модифицированность = Истина;
		КонецЕсли
		
	ИначеЕсли Найти(Область.Имя, "ПрЛизинг") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		мРаздел1.Области.ПрЛизинг.Значение = ?(СокрЛП(мРаздел1.Области.ПрЛизинг.Значение) = "", "Х", "");
		
	ИначеЕсли Найти(Область.Имя, "ПрДавСырья") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		мРаздел1.Области.ПрДавСырья.Значение = ?(СокрЛП(мРаздел1.Области.ПрДавСырья.Значение) = "", "Х", "");
		
	ИначеЕсли Найти(Область.Имя, "П000010000107") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.Валюты.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода валюты";
		
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.Валюты.НайтиПоКоду(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
			
			Если Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	ИначеЕсли Найти(Область.Имя, "П000010000116") > 0  
		  ИЛИ Найти(Область.Имя, "П000010000117") > 0
		  Или Найти(Область.Имя, "П000010000118") > 0 Тогда
		 СтандартнаяОбработка = Ложь;
		 
		 НомерДопСтр = Сред(Область.Имя,15);
		 
		 СтруктураСтавокТабл = Новый Структура;
		 СтруктураСтавокТабл.Вставить("Ст16", мРаздел1.Области["П000010000116_" + НомерДопСтр].Значение);
		 СтруктураСтавокТабл.Вставить("Ст17", мРаздел1.Области["П000010000117_" + НомерДопСтр].Значение);
		 СтруктураСтавокТабл.Вставить("Ст18", мРаздел1.Области["П000010000118_" + НомерДопСтр].Значение);
		 СтруктураСтавокТабл.Вставить("Ст21", мРаздел1.Области["П000010000121_" + НомерДопСтр].Значение);
		 
		 ФормаВводаСтавкиНалога = ПолучитьФорму("ФормаВводаСтавкиНалога");
		 СтруктураСтавокФорма = АнализироватьПоляСтавки(СтруктураСтавокТабл);
		 ФормаВводаСтавкиНалога.СтруктураСтавок = СтруктураСтавокФорма;
		 Результат = ФормаВводаСтавкиНалога.ОткрытьМодально();
		 
		 Если Результат <> Неопределено Тогда
			 НовСтруктура = Результат;
			 Если НовСтруктура.ПредставлениеПрочерк Тогда
				 мРаздел1.Области["П000010000114_" + НомерДопСтр].Значение = 0; 
				 мРаздел1.Области["П000010000114_" + НомерДопСтр].Формат = "ЧН=-";
			 Иначе
				 мРаздел1.Области["П000010000114_" + НомерДопСтр].Формат = "ЧДЦ=6; ЧН=";
			 КонецЕсли;
			 
			 мРаздел1.Области["П000010000116_" + НомерДопСтр].Значение = НовСтруктура.Ст16;
			 мРаздел1.Области["П000010000117_" + НомерДопСтр].Значение = НовСтруктура.Ст17;
			 мРаздел1.Области["П000010000118_" + НомерДопСтр].Значение = НовСтруктура.Ст18;
			 мРаздел1.Области["П000010000121_" + НомерДопСтр].Значение = НовСтруктура.Ст21;
		 КонецЕсли;
			  
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");
КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти


Процедура ПолеТабличногоДокументаСведенияПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Сведения");
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
 			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	МеханизмыОчисткиРегламентированныхОтчетов(Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

Процедура МеханизмыОчисткиРегламентированныхОтчетов(Кнопка) Экспорт
    Перем ТаблицаСтраницРаздела;
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КнопкаИмя = Кнопка.Имя;
	Если КнопкаИмя = "ОчиститьВесьОтчет" Тогда
		Очистить();
		Возврат;
	КонецЕсли;

	ОчисткаПроизошла = Ложь;
	ИмяСтраницы = СтрЗаменить(КнопкаИмя, "ОчиститьТекущийЭкземплярМногостраничногоРаздела", "");
	ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "ОчиститьТекущийРаздел", "");
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Ложь);
	Многостраничность = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	УдалятьсяВсеДопЭкземпляры = Ложь;
	ПредставлениеРазделаОтчета = НРег(ПолучитьПредставлениеРазделаРегОтчета(ИмяСтраницы));
	СведенияОФЛ = (Найти(НРег(ПредставлениеРазделаОтчета), "физ") > 0) И (Найти(НРег(ПредставлениеРазделаОтчета), "лиц") > 0);

	ОчищенИлиОчищено = "очищено"; // Очищено заявление ...

	Если Найти(КнопкаИмя, "ОчиститьТекущийРаздел") > 0 Тогда
		// Очистить текущий раздел. Может быть многостраничный.
		Если Многостраничность Тогда
			КолВоСтраницВРазделе = мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество();
			Если КолВоСтраницВРазделе > 1 Тогда
				ТекстВопроса = "Внимание! Будут удалены все доп. листы текущего раздела (листа)." + Символы.ПС
				  + "Продолжить операцию?";
			Иначе
				Если СведенияОФЛ Тогда 
					// Очищаем лист со сведениями о физических лицах.
					ТекстВопроса = "Внимание! Будут очищены сведения о физическом лице." + Символы.ПС
					  + "Продолжить операцию?";
				Иначе
					ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
					  + "Продолжить операцию?";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
			  + "Продолжить операцию?";
		КонецЕсли;

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчисткаПроизошла = Истина;
			Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
				РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
				УдалятьсяВсеДопЭкземпляры = Истина;  				
			Иначе
				ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы]);
			КонецЕсли;
			Элемент = СоздатьТЗСпецификаций();
			Если ИмяСтраницы = "Раздел1" Тогда
	            мТЗСпецификацийРаздел1.Очистить();  		
				мТЗСпецификацийРаздел1 = СоздатьТЗСпецификаций();
				мТЗСпецификацийРаздел1_07.Очистить();
				мТЗСпецификацийРаздел1_07 = СоздатьТЗСпецификаций();
			ИначеЕсли ИмяСтраницы = "Раздел3" Тогда   	
				мТЗСпецификацийРаздел3.Очистить();
				мТЗСпецификацийРаздел3 = СоздатьТЗСпецификаций();
			ИначеЕсли ИмяСтраницы = "Приложение" Тогда
				мМассивТЗСпецификацийПрил.Очистить();  		
				мМассивТЗСпецификацийПрил.Добавить(Элемент);				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Найти(КнопкаИмя, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		Ответ = Вопрос("Внимание! Будет очищен текущий лист." + Символы.ПС
		      + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			  
			  Если Ответ = КодВозвратаДиалога.Да Тогда
				  ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы]);
				  
				  Если ИмяСтраницы = "Приложение" Тогда
					  // получаем номер текущей доп страницы
					  Если Не мСтруктураМногостраничныхРазделов.Свойство(Имястраницы, ТаблицаСтраницРаздела) Тогда
						  Возврат;
					  КонецЕсли;
					  
					  СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
					  
					  Если СтрТаблицаСтраницы = Неопределено Тогда
						  РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяСтраницы);
						  Возврат;
					  КонецЕсли;	
					  НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);  
					  
					  мМассивТЗСпецификацийПрил.Удалить(НомерТекущейСтраницы);
					  
					  Элемент = СоздатьТЗСпецификаций();
					  
					  мМассивТЗСпецификацийПрил.Вставить(НомерТекущейСтраницы, Элемент);
				  КонецЕсли;
				  ОчисткаПроизошла = Истина;
			  КонецЕсли;

	КонецЕсли;

	Если ОчисткаПроизошла Тогда
		Модифицированность = Истина;
		Расчет("");

		Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым") Тогда
			УстановитьЦветФонаЯчейки(,, ИмяСтраницы);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // МеханизмыОчисткиРегламентированныхОтчетов

// ПолучитьПредставлениеРазделаРегОтчета
// Функция получает из мДеревоСтраницОтчета представление раздела отчета
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяСтраницы    - название страницы отчета
// Возвращаемое значение:
//  Представление раздела, строка.
//
Функция ПолучитьПредставлениеРазделаРегОтчета(ИмяСтраницы)
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Попытка
				Результат = СтрокаУровня1.Представление;
			Исключение
				Результат = ИмяСтраницы;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьПредставлениеРазделаРегОтчета


// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = мРаздел1;
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// КнопкаПредыдущаяСтраницаНажатие
// единая процедура во всех разделах
//
Процедура КнопкаПредыдущаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Сведения");

КонецПроцедуры // КнопкаПредыдущаяСтраницаНажатие

// КнопкаСледующаяСтраницаНажатие
// единая процедура для всех кнопок на разных разделах
//
Процедура КнопкаСледующаяСтраницаНажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Сведения");

КонецПроцедуры // КнопкаСледующаяСтраницаНажатие

// КнопкаДобавитьДопСтраницуНажатие
// единая процедура добавить страницу в раздел 
//
Процедура КнопкаДобавитьДопСтраницуНажатие(Элемент)

	ВставитьДополнительнуюСтраницу("Сведения");

КонецПроцедуры // КнопкаДобавитьДопСтраницуНажатие

// Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)
// единая кнопка на всех разделах УдалитьДопСтраницуНажатие
//
Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)

	УдалитьДополнительнуюСтраницу("Сведения");

КонецПроцедуры // КнопкаУдалитьДопСтраницуНажатие

// Процедура КнопкаПерейтиНаСтраницу(Элемент)
// единая процедура перехода на страницы
//
Процедура КнопкаПерейтиНаСтраницуНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Сведения");

КонецПроцедуры //  Процедура КнопкаПерейтиНаСтраницу(Элемент)

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет("Раздел1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет("Раздел1");

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов

	ЗаполнитьДатуВЯчейках();

	// Заполнить ТОЛЬКО параметры по текущей организации зависящие от даты подписания документа
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

    СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = "Приложение";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Сведения";
	СтрокаУровня1.Представление            = "Сведения о выписках банка";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаСведения";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	
	ИмяОбласти = Область.Имя;
	
	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если Страница = "Раздел1" Тогда
		
		Расчет(Страница);

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// КнопкаДобавитьДопСтрокиРаздел1Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел1Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма, , Истина);

КонецПроцедуры

// КнопкаУдалитьДопСтрокиРаздел1Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел1Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма, , Истина);
	Расчет();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел1Нажатие

Процедура КнопкаДобавитьДопСтрокиСведенияНажатие(Элемент)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма, , Истина);
	//ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
	Если ВставляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		ВосстановитьИмяОбласти = Истина;
		ВставляемаяОбласть.Имя = "";
	Иначе
		ВосстановитьИмяОбласти = Ложь;
	КонецЕсли;
	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Если ВосстановитьИмяОбласти Тогда
		ВставляемаяОбласть.Имя = "МногострочнаяЧасть";
	КонецЕсли;
КонецПроцедуры

Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	Если УдаляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		ВосстановитьИмяОбласти = Истина;
	Иначе
		ВосстановитьИмяОбласти = Ложь;
	КонецЕсли;
	
	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
	
	Если ВосстановитьИмяОбласти Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = "МногострочнаяЧасть";
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиСведенияНажатие(Элемент)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма, Истина);
	
КонецПроцедуры

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	СнятьЗащитуСЯчеек(НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// СнятьЗащитуСЯчеек
// Снимает защиту с защищаемых ячеек
// Параметры:
// ПоставитьЗащиту - Истина - ставит защиту, Ложь - убрать
//
Процедура СнятьЗащитуСЯчеек(ПоставитьЗащиту)

	Группа1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, Группа1);

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_4", ЦветФонаБлокировки);

	Цвет          = ?(ПоставитьЗащиту, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

	мРаздел1.Области.П000010000114.Защита = ПоставитьЗащиту;
	мРаздел1.Области.П000010000114.ЦветФона = Цвет;

	мРаздел1.Области.П000010000115.Защита = ПоставитьЗащиту;
	мРаздел1.Области.П000010000115.ЦветФона = Цвет;

	мРаздел1.Области.П000010000119.Защита = ПоставитьЗащиту;
	мРаздел1.Области.П000010000119.ЦветФона = Цвет;

	мРаздел1.Области.П000010000120.Защита = ПоставитьЗащиту;
	мРаздел1.Области.П000010000120.ЦветФона = Цвет;

КонецПроцедуры // СнятьЗащитуСЯчеек

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

Функция ЭтоЧисло(ИсходнаяСтрока)
	
	Для Позиция = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		Символ = Сред(ИсходнаяСтрока, Позиция, 1);
		Если Найти(",.0123456789", Символ) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция ПроверитьТекст()
	
	СтатусОшибки = Ложь;
	
	////Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
	////	Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях""!", СтатусСообщения.Важное);
	////	СтатусОшибки = Истина;
	////КонецЕсли;
	////
	////Если ТочностьЕдиницыИзмерения <> 0 Тогда
	////	Сообщить("Перед выгрузкой необходимо установить точность единицы измерения - 0!", СтатусСообщения.Важное);
	////	СтатусОшибки = Истина;
	////КонецЕсли;
	
	Если ПустаяСтрока(Организация.ИНН) ИЛИ НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(Организация.ИНН) Тогда
		Сообщить("Неверно задан ИНН организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "КодНО, ФИОБух");
	Если СтрДлина(СокрЛП(ОргСведения.КодНО)) <> 4 Тогда
		Сообщить("Неверно задан код ИФНС для организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ОргСведения.ФИОБух) И НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		Сообщить("Невозможно определить ФИО главного бухгалтера организации.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	// проверка сведений о заявлении
	Раздел1 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел1);
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));

	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		Сообщить("В разделе 1 не задан код страны организации-продавца.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	ИначеЕсли Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Сообщить("В разделе 1 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщить("В разделе 1 не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщить("В разделе 1 не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННПокупателя) Тогда
		Сообщить("В разделе 1 не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецМестоНахожд) Тогда
		Сообщить("В разделе 1 не задано место нахождения(жительства) продавца.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщить("В разделе 1 не задано место нахождения(жительства) покупателя.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщить("В разделе 1 не задан номер договора(контракта) строки 05.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщить("В разделе 1 не задана дата договора(контракта) строки 05.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Раздел1.НаимОрг_1) Тогда
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщить("В разделе 1 не задан номер договора(контракта) строки 07.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщить("В разделе 1 не задана дата договора(контракта) строки 07.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//проверка раздела 3
	Раздел3 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел3);
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	ИННПродавца_Раздел3 = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	ИННПокупателя_Раздел3 = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
		Если НЕ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) Тогда
			Сообщить("В разделе 3 не задан код страны организации-продавца.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		ИначеЕсли Раздел3.КодСтраныПродавец = "112" ИЛИ Раздел3.КодСтраныПродавец = "398" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПродавца_Раздел3) Тогда
				Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
		Иначе
			Сообщить("В разделе 3 код страны ограничен значениями 112 и 398 (т.к. отсутствует УНП|ИНН|РНН(БИН|ИИН) продавца раздела 1)", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщить("В разделе 3 не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
	Иначе
		Если Раздел3.КодСтраныПродавец = "112" ИЛИ Раздел3.КодСтраныПродавец = "398" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПродавца_Раздел3) Тогда
				Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398" ИЛИ Раздел3.КодСтраныПокупатель = "643" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПокупателя_Раздел3) Тогда
			Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//проверка приложений
	
	Для каждого Приложение Из мСтруктураМногостраничныхРазделов["Приложение"] Цикл
		
		Индекс = мСтруктураМногостраничныхРазделов["Приложение"].Индекс(Приложение);
		
		ДанныеПриложения = Приложение.Данные;
		
		ИННКПП = ДанныеПриложения.ПродавецИНН_КПП;
		ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
		
		ИННКПП = ДанныеПриложения.ПокупательИНН_КПП;
		ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));

		Если ДанныеПриложения.КодСтраныПродавец = "112" ИЛИ ДанныеПриложения.КодСтраныПродавец = "398" ИЛИ ДанныеПриложения.КодСтраныПродавец = "643" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
				Сообщить("На странице " + (Индекс + 1) + " приложения не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если ДанныеПриложения.КодСтраныПокупатель = "112" ИЛИ ДанныеПриложения.КодСтраныПокупатель = "398" ИЛИ ДанныеПриложения.КодСтраныПокупатель = "643" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПокупателя) Тогда
				Сообщить("На странице " + (Индекс + 1) + " приложения не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// проверка сведений о товаре и уплаченных налогах
	ЧислоВыгружаемыхТоваров = 0;
	НомерСтроки = 0;
	МнЧРаздел1 = мСтруктураМногострочныхРазделов["П0000100001"];
	Для Каждого Стр Из МнЧРаздел1 Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ЕстьНепустойПоказатель = Ложь;
		Для Инд = 1 По 16 Цикл
			Если ЗначениеЗаполнено(Стр["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				ЕстьНепустойПоказатель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьНепустойПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000102"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнено наименование товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000106"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена стоимость товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;

		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000107"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана валюта товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000108"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указан курс валюты товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000109"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указаны серия, номер транспортного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000110"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана дата транспортного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Стр["П000010000113"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена дата принятия товара на учет.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщить("В таблице товаров не заполнена ни одна строка.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	// проверка сведений о банках и выписках
	ЧислоВыгружаемыхВыписок = 0;
	НомерБанкаПП = 0;
	Для Каждого СтраницаБанк Из мСтруктураМногостраничныхРазделов.Сведения Цикл
		
		НомерБанкаПП = НомерБанкаПП + 1;
		ТипПлат = ВРЕГ(СокрЛП(СтраницаБанк.Данные.ТипПлат));
		БИКБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.БИК));
		НаименованиеБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.НаименованиеБанка));
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) И НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнен БИК банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнено наименование банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнен тип платежного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		// проверяем сведения о выписках банка
		ЧислоВыгружаемыхВыписокТекущегоБанка = 0;
		НомСтрВыписка = 1;
		Пока СтраницаБанк.Данные.Свойство("П000020000102_" + Формат(НомСтрВыписка, "ЧГ=")) Цикл
			
			НомСтрВыпискаСтр = Формат(НомСтрВыписка, "ЧГ=");
			
			П000020000101 = СтраницаБанк.Данные["П000020000101_" + НомСтрВыпискаСтр];
			П000020000102 = СтраницаБанк.Данные["П000020000102_" + НомСтрВыпискаСтр];
			П000020000103 = СтраницаБанк.Данные["П000020000103_" + НомСтрВыпискаСтр];
			
			НомСтрВыписка = НомСтрВыписка + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана дата выписки №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000102) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана сумма уплаченного налога по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указан номер счета по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			ЧислоВыгружаемыхВыписокТекущегоБанка = ЧислоВыгружаемыхВыписокТекущегоБанка + 1;
			
		КонецЦикла;
		
		ЧислоВыгружаемыхВыписок = ЧислоВыгружаемыхВыписок + ЧислоВыгружаемыхВыписокТекущегоБанка;
		
		Если ЧислоВыгружаемыхВыписокТекущегоБанка = 0 Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не определена ни одна выписка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧислоВыгружаемыхВыписок = 0 И (ЗначениеЗаполнено(Раздел1.П000010000119) ИЛИ ЗначениеЗаполнено(Раздел1.П000010000120)) Тогда
		Сообщить("Сведения о выписках банка не могут быть незаполнены при заполненной итоговой сумме налога.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Возврат НЕ СтатусОшибки;
	
КонецФункции

Процедура ВыгрузитьТекст()
	
	
	// общие сведения служебной части
	ДатаДок = ТекущаяДата();
	ДатаДокС = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");
	ОргИНН = СокрЛП(Организация.ИНН);
	ОргКПП = СокрЛП(Организация.КПП);
	КодИНСП = СокрЛП(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), 2, 1);
	
	// даем пользователю выбрать файл
	ДиалогВводаИмениФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВводаИмениФайла.Заголовок = "Укажите имя файла для сохранения";
	ДиалогВводаИмениФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВводаИмениФайла.Расширение = "txt";
	ДиалогВводаИмениФайла.Фильтр = "Текстовый документ(*.txt)|*.txt";
	СчФ = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация);
	ДиалогВводаИмениФайла.ПолноеИмяФайла = "P" + Сред(Организация.ИНН, ?(КатегорияНП = 1, 5, 6), 5) + Формат(СчФ, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=") + ".txt";
	Если НЕ ДиалогВводаИмениФайла.Выбрать() Тогда
		Сообщить("Сохранение прервано!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	// инициализируем запись текста в файл
	ВремФайл = ПолучитьИмяВременногоФайла();
	Текст = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.OEM);
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		Если КатегорияНП = 1 Тогда 
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		Если КатегорияНП = 1 Тогда 
			ИДОтпр = ОргИНН + "***********";
		Иначе
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = ИДОтпр + Прав(ДатаДокС, 4) + Сред(ДатаДокС, 4, 2) + Лев(ДатаДокС, 2) + Формат(Час(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Минута(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ДатаДок), "ЧЦ=2; ЧН=; ЧВН=");
	
	ВерсПрог = РегламентированнаяОтчетность.СформироватьВерсПрог();
	
	// выгружаем общие сведения информационной части
	Текст.ЗаписатьСтроку("ИдФайл:" + ИдФайл);
	Текст.ЗаписатьСтроку("ТипИнф:ЭСНДСТСНП");
	Текст.ЗаписатьСтроку("ВерсФайл:1.3.0");
	Текст.ЗаписатьСтроку("ВерсПрог:" + ВерсПрог);
	Текст.ЗаписатьСтроку("КолДок:1");
	
		
	// выгружаем сведения об отправителе
	Если КатегорияНП = 1 Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ТелОрганизации, ФИОБух");
		Отправитель = СокрЛП(СведенияОбОрганизации.ФИОБух);
		ОргТелефон = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата,"ТелОрганизации, ФИО");
		Отправитель = СокрЛП(СведенияОбОрганизации.ФИО);
		ОргТелефон = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
	КонецЕсли;
	
	ФИООтпр = РазложитьФИО(ВРЕГ(Отправитель));
	
	Текст.ЗаписатьСтроку("ФамОтпр:" + Лев(ФИООтпр.Фамилия, 20));
	Текст.ЗаписатьСтроку("ИмяОтпр:" + Лев(ФИООтпр.Имя, 20));
	Если СокрЛП(ФИООтпр.Отчество) <> "" Тогда
		Текст.ЗаписатьСтроку("ОтчОтпр:" + Лев(ФИООтпр.Отчество, 20));
	КонецЕсли;
	
	Текст.ЗаписатьСтроку("ТелОтпр:" + Лев(ОргТелефон, 20));
	
	Текст.ЗаписатьСтроку("@@@");
	
	// информационная часть
	// раздел 1
	ДанныеРаздела1 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел1);

	// выгружаем сведения о заявлении
	ИННКПП = ДанныеРаздела1.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	ИННКПП = ДанныеРаздела1.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, мСохраненныйДок.ДатаНачала) + 1;
	Текст.ЗаписатьСтроку("ИдДок:"			+ ИДОтпр + Прав(ДатаДокС, 4) + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ="));
	Текст.ЗаписатьСтроку("ДатаДок:"			+ ДатаДокС);
	
	Текст.ЗаписатьСтроку("ИдНомПрод:"		+ СокрЛП(ИННПродавца));
	Текст.ЗаписатьСтроку("КПППрод:"			+ СокрЛП(КПППродавца));
	Текст.ЗаписатьСтроку("НаимПрод:"		+ СокрЛП(ДанныеРаздела1.ПродавецНаимОрг));
	Текст.ЗаписатьСтроку("КодСтранПрод:" 	+ СокрЛП(ДанныеРаздела1.КодСтраныПродавец));
	Текст.ЗаписатьСтроку("АдресПрод:" 		+ СокрЛП(ДанныеРаздела1.ПродавецМестоНахожд));
	
	Текст.ЗаписатьСтроку("ИдНомПок:"		+ СокрЛП(ИННПокупателя));
	Текст.ЗаписатьСтроку("КПППок:"			+ СокрЛП(КПППокупателя));
	Текст.ЗаписатьСтроку("НаимПок:"			+ СокрЛП(ДанныеРаздела1.ПокупательНаимОрг));
	Текст.ЗаписатьСтроку("КодСтранПок:" 	+ СокрЛП(ДанныеРаздела1.КодСтраныПокупатель));
	Текст.ЗаписатьСтроку("АдресПок:" 		+ СокрЛП(ДанныеРаздела1.ПокупательМестоНахожд));
	
	Текст.ЗаписатьСтроку("НомКонтр_1:" 		+ СокрЛП(ДанныеРаздела1.НомерДог));
	Текст.ЗаписатьСтроку("ДатаКонтр_1:" 	+ Формат(ДанныеРаздела1.ДатаДог, "ДФ=dd.MM.yyyy"));
	
	Для Сч = 1 По мТЗСпецификацийРаздел1.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1[Сч - 1];
		Текст.ЗаписатьСтроку("НомСпециф_" + Формат(Сч, "ЧГ=0") + "_05:" + СокрЛП(Строка.Номер));
	КонецЦикла;
		
	Для Сч = 1 По мТЗСпецификацийРаздел1.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1[Сч - 1];
		Текст.ЗаписатьСтроку("ДатаСпециф_" + Формат(Сч, "ЧГ=0") + "_05:" + Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("НаимОрг_1:" 		+ СокрЛП(ДанныеРаздела1.НаимОрг_1));
	
	Текст.ЗаписатьСтроку("НомКонтр_2:" 		+ СокрЛП(ДанныеРаздела1.НомКонтр_2));
	Текст.ЗаписатьСтроку("ДатаКонтр_2:" 	+ Формат(ДанныеРаздела1.ДатаКонтр_2, "ДФ=dd.MM.yyyy"));
	
	Для Сч = 1 По мТЗСпецификацийРаздел1_07.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1_07[Сч - 1];
		Текст.ЗаписатьСтроку("НомСпециф_" + Формат(Сч, "ЧГ=0") + "_07:" + СокрЛП(Строка.Номер));
	КонецЦикла;
		
	Для Сч = 1 По мТЗСпецификацийРаздел1_07.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1_07[Сч - 1];
		Текст.ЗаписатьСтроку("ДатаСпециф_" + Формат(Сч, "ЧГ=0") + "_07:" + Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("ПрЛизинг:" 		+ ?(ЗначениеЗаполнено(ДанныеРаздела1.ПрЛизинг), 1, 0));
	Текст.ЗаписатьСтроку("ПрДавСырья:" 		+ ?(ЗначениеЗаполнено(ДанныеРаздела1.ПрДавСырья), 1, 0));
	
	Текст.ЗаписатьСтроку("БазаАкциз:"		+ СокрЛП(Формат(ДанныеРаздела1.П000010000114, "ЧДЦ=2; ЧРД=.; ЧГ=0")));
	Текст.ЗаписатьСтроку("БазаНДС:"			+ СокрЛП(Формат(ДанныеРаздела1.П000010000115, "ЧДЦ=2; ЧРД=.; ЧГ=0")));
	Текст.ЗаписатьСтроку("УплАкциз:"		+ СокрЛП(Формат(ДанныеРаздела1.П000010000119, "ЧГ=0")));
	Текст.ЗаписатьСтроку("УплНДС:"			+ СокрЛП(Формат(ДанныеРаздела1.П000010000120, "ЧГ=0")));
	
	// раздел 3
	ДанныеРаздела3 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел3);
	
	ИННКПП = ДанныеРаздела3.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	ИННКПП = ДанныеРаздела3.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПППокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
	
	//продавец
	стрТипПрод = ДанныеРаздела3.ТипПрод_3;
	Если стрТипПрод = "(комитент)" Тогда
		ТипПрод_3 = 0;
	ИначеЕсли стрТипПрод = "(доверитель)" Тогда
		ТипПрод_3 = 1;
	ИначеЕсли стрТипПрод = "(принципал)" Тогда
		ТипПрод_3 = 2;
	ИначеЕсли стрТипПрод = "(продавец)" Тогда
		ТипПрод_3 = 6;
	Иначе
		ТипПрод_3 = "";
	КонецЕсли;
	Текст.ЗаписатьСтроку("ТипПрод_3:" + ТипПрод_3);	
	
	Текст.ЗаписатьСтроку("ИдНомПрод_3:"		+ СокрЛП(ИННПродавца));
	Текст.ЗаписатьСтроку("КПППрод_3:"		+ СокрЛП(КПППродавца));
	Текст.ЗаписатьСтроку("НаимПрод_3:"		+ СокрЛП(ДанныеРаздела3.ПродавецНаимОрг));
	Текст.ЗаписатьСтроку("КодСтранПрод_3:" 	+ СокрЛП(ДанныеРаздела3.КодСтраныПродавец));
	Текст.ЗаписатьСтроку("АдресПрод_3:" 	+ СокрЛП(ДанныеРаздела3.ПродавецМестоНахожд));
	
	//покупатель
	стрТипПок = ДанныеРаздела3.ТипПок_3;
	Если стрТипПок = "(комиссионер)" Тогда
		ТипПок_3 = 3;
	ИначеЕсли стрТипПок = "(поверенный)" Тогда
		ТипПок_3 = 4;
	ИначеЕсли стрТипПок = "(агент)" Тогда
		ТипПок_3 = 5;
	ИначеЕсли стрТипПок = "(покупатель)" Тогда
		ТипПок_3 = 7;
	Иначе
		ТипПок_3 = "";                     
	КонецЕсли;
	Текст.ЗаписатьСтроку("ТипПок_3:" + ТипПок_3);
	
	Текст.ЗаписатьСтроку("ИдНомПок_3:"		+ СокрЛП(ИННПокупателя));
	Текст.ЗаписатьСтроку("КПППок_3:"		+ СокрЛП(КПППокупателя));
	Текст.ЗаписатьСтроку("НаимПок_3:"		+ СокрЛП(ДанныеРаздела3.ПокупательНаимОрг));
	Текст.ЗаписатьСтроку("КодСтранПок_3:" 	+ СокрЛП(ДанныеРаздела3.КодСтраныПокупатель));
	Текст.ЗаписатьСтроку("АдресПок_3:" 		+ СокрЛП(ДанныеРаздела3.ПокупательМестоНахожд));
	
	Текст.ЗаписатьСтроку("НомКонтр_3:" 		+ СокрЛП(ДанныеРаздела3.НомерДог));
	Текст.ЗаписатьСтроку("ДатаКонтр_3:" 	+ Формат(ДанныеРаздела3.ДатаДог, "ДФ=dd.MM.yyyy"));	
	
	Для Сч = 1 По мТЗСпецификацийРаздел3.Количество() Цикл
		Строка = мТЗСпецификацийРаздел3[Сч - 1];
		Текст.ЗаписатьСтроку("НомСпециф_3_" + Формат(Сч, "ЧГ=0") + ":" + СокрЛП(Строка.Номер));
	КонецЦикла;
		
	Для Сч = 1 По мТЗСпецификацийРаздел3.Количество() Цикл
		Строка = мТЗСпецификацийРаздел3[Сч - 1];
		Текст.ЗаписатьСтроку("ДатаСпециф_3_" + Формат(Сч, "ЧГ=0") + ":" + Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("###");
	
	// выгружаем сведения о банках и выписках раздела "Сведения"
	НомерБанкаПП = 0;
	Для Каждого СтраницаБанк Из мСтруктураМногостраничныхРазделов.Сведения Цикл
		
		ТипПлат = СокрЛП(СтраницаБанк.Данные.ТипПлат);
		БИКБанка = СокрЛП(СтраницаБанк.Данные.БИК);
		НаименованиеБанка = СокрЛП(СтраницаБанк.Данные.НаименованиеБанка);
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерБанкаПП = НомерБанкаПП + 1;
		
		// выгружаем сведения о банках
		Текст.ЗаписатьСтроку("НомБПП:"	+ Формат(НомерБанкаПП, "ЧГ="));
		Текст.ЗаписатьСтроку("ТипПлат:"	+ ТипПлат);
		Текст.ЗаписатьСтроку("БИКБ:"	+ БИКБанка);
		Текст.ЗаписатьСтроку("НаимБ:"	+ НаименованиеБанка);
		Текст.ЗаписатьСтроку("###");
		
		// выгружаем сведения о выписках
		НомерВыпискиПП = 1; // для нумерования в файле выгрузки
		НомСтрВыписка = 1; // для обращения к ячейкам
		Пока СтраницаБанк.Данные.Свойство("П000020000101_" + Формат(НомСтрВыписка, "ЧГ=")) Цикл
			
			НомСтрВыпискаСтр = Формат(НомСтрВыписка, "ЧГ=");
			П000020000101 = СтраницаБанк.Данные["П000020000101_" + НомСтрВыпискаСтр];
			П000020000102 = СтраницаБанк.Данные["П000020000102_" + НомСтрВыпискаСтр];
			П000020000103 = СтраницаБанк.Данные["П000020000103_" + НомСтрВыпискаСтр];
			
			НомСтрВыписка = НомСтрВыписка + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			КонецЕсли;
			
			Текст.ЗаписатьСтроку("НомВыпПП:"	+ Формат(НомерВыпискиПП, "ЧГ="));
			Текст.ЗаписатьСтроку("ДатаВып:"		+ Формат(П000020000101, "ДФ=dd.MM.yyyy"));
			Текст.ЗаписатьСтроку("СумВып:"		+ Формат(П000020000102, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0"));
			Текст.ЗаписатьСтроку("Счет:"		+ ВРЕГ(СокрЛП(П000020000103)));
			Текст.ЗаписатьСтроку("###");
			
			НомерВыпискиПП = НомерВыпискиПП + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// выгружаем таблицу товаров раздела 1
	НомерСтроки = 1;
	МнЧЗаявление = мСтруктураМногострочныхРазделов["П0000100001"];
	Для Каждого Стр Из МнЧЗаявление Цикл
		
		ЕстьНепустойПоказатель = Ложь;
		Для Инд = 1 По 20 Цикл
			Если ЗначениеЗаполнено(Стр["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				ЕстьНепустойПоказатель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьНепустойПоказатель Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
		Текст.ЗаписатьСтроку("НомТовПП:"	+ НомерСтрокиСтр);
		Текст.ЗаписатьСтроку("НаимТов:"		+ СокрЛП(Стр["П000010000102"]));
		Текст.ЗаписатьСтроку("ТНВЭД:"		+ СокрЛП(Стр["П000010000103"]));
		Текст.ЗаписатьСтроку("ЕдИзмТов:"	+ СокрЛП(Стр["П000010000104"]));
		Текст.ЗаписатьСтроку("КоличТов:"	+ СокрЛП(Формат(Стр["П000010000105"], "ЧДЦ=6; ЧРД=.; ЧГ=")));
		Текст.ЗаписатьСтроку("СтоимТов:"	+ СокрЛП(Формат(Стр["П000010000106"], "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0")));
		Текст.ЗаписатьСтроку("ВалТов:"		+ СокрЛП(Стр["П000010000107"]));
		Текст.ЗаписатьСтроку("КурсВал:"		+ СокрЛП(Формат(Стр["П000010000108"], "ЧДЦ=4; ЧРД=.; ЧН=; ЧГ=0")));
		Текст.ЗаписатьСтроку("СерНомТСД:"	+ СокрЛП(Стр["П000010000109"]));
		Текст.ЗаписатьСтроку("ДатаТСД:"		+ СокрЛП(Формат(Стр["П000010000110"], "ДФ=dd.MM.yyyy")));
		Текст.ЗаписатьСтроку("НомСчФ:"		+ СокрЛП(Стр["П000010000111"]));
		Текст.ЗаписатьСтроку("ДатаСчФ:"		+ СокрЛП(Формат(Стр["П000010000112"], "ДФ=dd.MM.yyyy")));
		Текст.ЗаписатьСтроку("ДатаПрин:"	+ СокрЛП(Формат(Стр["П000010000113"], "ДФ=dd.MM.yyyy")));
		Текст.ЗаписатьСтроку("НБАкциз:"		+ СокрЛП(Формат(Стр["П000010000114"], "ЧДЦ=6; ЧРД=.; ЧГ=0")));
		Текст.ЗаписатьСтроку("НБНДС:"		+ СокрЛП(Формат(Стр["П000010000115"], "ЧДЦ=2; ЧРД=.; ЧГ=0")));
		
		Текст.ЗаписатьСтроку("СтАкцизТверд:"+ ?(ЭтоЧисло(Стр["П000010000116"]), Формат(?(ЗначениеЗаполнено(Стр["П000010000116"]), Число(Стр["П000010000116"]), 0), "ЧДЦ=2; ЧРД=.; ЧГ=0"), ""));
		Текст.ЗаписатьСтроку("СтАкцизАдвал:"+ ?(ЭтоЧисло(Стр["П000010000117"]), Формат(?(ЗначениеЗаполнено(Стр["П000010000117"]), Число(Стр["П000010000117"]), 0), "ЧДЦ=2; ЧРД=.; ЧГ=0"), ""));
		Текст.ЗаписатьСтроку("СтНДС:"		+ ?(ЭтоЧисло(Стр["П000010000118"]), Формат(?(ЗначениеЗаполнено(Стр["П000010000118"]), Число(Стр["П000010000118"]), 0), "ЧДЦ=2; ЧРД=.; ЧГ=0"), ""));
		
		Текст.ЗаписатьСтроку("СумАкциз:"	+ СокрЛП(Формат(Стр["П000010000119"], "ЧДЦ=2; ЧРД=.; ЧГ=0")));
		Текст.ЗаписатьСтроку("СумНДС:"		+ СокрЛП(Формат(Стр["П000010000120"], "ЧДЦ=2; ЧРД=.; ЧГ=0")));
		
		СтруктураСтавок = Новый Структура;
		СтруктураСтавок.Вставить("Ст16", Стр["П000010000116"]);
		СтруктураСтавок.Вставить("Ст17", Стр["П000010000117"]);
		СтруктураСтавок.Вставить("Ст18", Стр["П000010000118"]);
		СтруктураСтавок.Вставить("Ст21", Стр["П000010000121"]);
				
		СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
		Текст.ЗаписатьСтроку("ПрОсвАкциз:"	+ СтруктураСтавокМодиф.Переключатель3);
		Текст.ЗаписатьСтроку("ПрОсвНДС:"	+ СтруктураСтавокМодиф.Переключатель1);
		
		Текст.ЗаписатьСтроку("###");
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// выгружаем приложения
	масивРеквПроверка = Новый Массив;
	масивРеквПроверка.Добавить("ПродавецИНН_КПП");
	масивРеквПроверка.Добавить("ПокупательИНН_КПП");
	масивРеквПроверка.Добавить("ТипПрод_Пр");
	масивРеквПроверка.Добавить("ТипПок_Пр");
	масивРеквПроверка.Добавить("ПродавецНаимОрг");
	масивРеквПроверка.Добавить("КодСтраныПродавец");
	масивРеквПроверка.Добавить("ПродавецМестоНахожд");
	масивРеквПроверка.Добавить("ПокупательНаимОрг");
	масивРеквПроверка.Добавить("КодСтраныПокупатель");
	масивРеквПроверка.Добавить("ПокупательМестоНахожд");
	масивРеквПроверка.Добавить("НомерДог");
	масивРеквПроверка.Добавить("ДатаДог");
	масивРеквПроверка.Добавить("НомерСпецификации");
	масивРеквПроверка.Добавить("ДатаСпецификации");
	
	НомерПриложения = 1;
	Для каждого Приложение Из мСтруктураМногостраничныхРазделов["Приложение"] Цикл
		
		Индекс = мСтруктураМногостраничныхРазделов["Приложение"].Индекс(Приложение);
		
		ДанныеПриложения = Приложение.Данные;
		
		//определим заполнено ли приложение
		ПриложениеЗаполнено = Ложь;
		Для каждого ИмяРеквизита Из масивРеквПроверка Цикл
			Если ЗначениеЗаполнено(ДанныеПриложения[ИмяРеквизита]) Тогда
				ПриложениеЗаполнено = Истина;
			КонецЕсли; 	
		КонецЦикла; 
		
		Если НЕ ПриложениеЗаполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Текст.ЗаписатьСтроку("НомКонтрПП:" + НомерПриложения);	
		
		ИННКПП = ДанныеПриложения.ПродавецИНН_КПП;
		ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
		КПППродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
		
		ИННКПП = ДанныеПриложения.ПокупательИНН_КПП;
		ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
		КПППокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));
		
		//продавец
		стрТипПрод = ДанныеПриложения.ТипПрод_Пр;
		Если стрТипПрод = "(комитент)" Тогда
			ТипПрод_Пр = 0;
		ИначеЕсли стрТипПрод = "(доверитель)" Тогда
			ТипПрод_Пр = 1;
		ИначеЕсли стрТипПрод = "(принципал)" Тогда
			ТипПрод_Пр = 2;
		ИначеЕсли стрТипПрод = "(комиссионер)" Тогда
			ТипПрод_Пр = 3;
		ИначеЕсли стрТипПрод = "(поверенный)" Тогда
			ТипПрод_Пр = 4;
		ИначеЕсли стрТипПрод = "(агент)" Тогда
			ТипПрод_Пр = 5;
		ИначеЕсли стрТипПрод = "(продавец)" Тогда
			ТипПрод_Пр = 6;
		Иначе
			ТипПрод_Пр = "";
		КонецЕсли;
		Текст.ЗаписатьСтроку("ТипПрод_Пр:" 		+ ТипПрод_Пр);	
		
		Текст.ЗаписатьСтроку("ИдНомПрод_Пр:"	+ СокрЛП(ИННПродавца));
		Текст.ЗаписатьСтроку("КПППрод_Пр:"		+ СокрЛП(КПППродавца));
		Текст.ЗаписатьСтроку("НаимПрод_Пр:"		+ СокрЛП(ДанныеПриложения.ПродавецНаимОрг));
		Текст.ЗаписатьСтроку("КодСтранПрод_Пр:" + СокрЛП(ДанныеПриложения.КодСтраныПродавец));
		Текст.ЗаписатьСтроку("АдресПрод_Пр:" 	+ СокрЛП(ДанныеПриложения.ПродавецМестоНахожд));
		
		//покупатель
		стрТипПок = ДанныеПриложения.ТипПок_Пр;
		Если стрТипПок = "(комитент)" Тогда
			ТипПок_Пр = 0;
		ИначеЕсли стрТипПок = "(доверитель)" Тогда
			ТипПок_Пр = 1;
		ИначеЕсли стрТипПок = "(принципал)" Тогда
			ТипПок_Пр = 2;
		ИначеЕсли стрТипПок = "(комиссионер)" Тогда
			ТипПок_Пр = 3;
		ИначеЕсли стрТипПок = "(поверенный)" Тогда
			ТипПок_Пр = 4;
		ИначеЕсли стрТипПок = "(агент)" Тогда
			ТипПок_Пр = 5;
		ИначеЕсли стрТипПок = "(покупатель)" Тогда
			ТипПок_Пр = 7;
		Иначе
			ТипПок_Пр = "";
		КонецЕсли;
		Текст.ЗаписатьСтроку("ТипПок_Пр:" 		+ ТипПок_Пр);
		
		Текст.ЗаписатьСтроку("ИдНомПок_Пр:"		+ СокрЛП(ИННПокупателя));
		Текст.ЗаписатьСтроку("КПППок_Пр:"		+ СокрЛП(КПППокупателя));
		Текст.ЗаписатьСтроку("НаимПок_Пр:"		+ СокрЛП(ДанныеПриложения.ПокупательНаимОрг));
		Текст.ЗаписатьСтроку("КодСтранПок_Пр:" 	+ СокрЛП(ДанныеПриложения.КодСтраныПокупатель));
		Текст.ЗаписатьСтроку("АдресПок_Пр:" 	+ СокрЛП(ДанныеПриложения.ПокупательМестоНахожд));
		
		Текст.ЗаписатьСтроку("НомКонтр_Пр:" 	+ СокрЛП(ДанныеПриложения.НомерДог));
		Текст.ЗаписатьСтроку("ДатаКонтр_Пр:" 	+ Формат(ДанныеПриложения.ДатаДог, "ДФ=dd.MM.yyyy"));	
		
		Для Сч = 1 По мМассивТЗСпецификацийПрил[Индекс].Количество() Цикл
			Строка = мМассивТЗСпецификацийПрил[Индекс][Сч - 1];
			Текст.ЗаписатьСтроку("НомСпециф_" + Формат(Сч, "ЧГ=0") + "_Пр:" + СокрЛП(Строка.Номер));
		КонецЦикла;
		
		Для Сч = 1 По мМассивТЗСпецификацийПрил[Индекс].Количество() Цикл
			Строка = мМассивТЗСпецификацийПрил[Индекс][Сч - 1];
			Текст.ЗаписатьСтроку("ДатаСпециф_" + Формат(Сч, "ЧГ=0") + "_Пр:" + Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		КонецЦикла;
		
		Текст.ЗаписатьСтроку("###");
		
		НомерПриложения = НомерПриложения + 1;	
	КонецЦикла; 
	
	Текст.ЗаписатьСтроку("@@@");
	Текст.ЗаписатьСтроку("===");
	Текст.Закрыть();
	
	Попытка
		ПереместитьФайл(ВремФайл, ДиалогВводаИмениФайла.ПолноеИмяФайла);
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок, мСохраненныйДок.ДатаНачала);
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчФ);
		Сообщить("Данные сохранены в файл """ + ДиалогВводаИмениФайла.ПолноеИмяФайла + """.", СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось записать файл " + ДиалогВводаИмениФайла.ПолноеИмяФайла + "! Возможно, недостаточно места на диске или диск защищен от записи.", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьXML()
	УниверсальнаяВыгрузка(, Ложь);
	//НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	//СпДокОсн = Новый СписокЗначений;
	//СпДокОсн.Добавить(мСохраненныйДок);
	// НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн);
КонецПроцедуры

//Процедура ПроверитьXML()
//	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
//	СпДокОсн = Новый СписокЗначений;
//	СпДокОсн.Добавить(мСохраненныйДок);
// 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
//КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Если Модифицированность И Вопрос("Перед выгрузкой необходимо сохранить отчет. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Год(мДатаКонцаПериодаОтчета) >= 2011 Тогда
		ВыгрузитьXML();	
	Иначе
		Если ПроверитьТекст() Тогда
			ВыгрузитьТекст();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

//Функция ПроверитьПоказатели() Экспорт
//	
//	СформироватьСтруктуруПоказателей();
//	Параметры = СформироватьСтруктуруПараметров();
//	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
//	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
//	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	Возврат Истина;
//	
//КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
	            + "_" + Параметры.КодИФНСПолучателя
				+ "_" + Параметры.КодИФНС
				+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННФЛ), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
				+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьИдДок(Параметры)
	
	стрГод = Формат(РабочаяДата, "ДФ=гггг");
	стрНомер = Формат(Число(?(Параметры.НомерЗаявления = "", 0, Параметры.НомерЗаявления)), "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Если ЭтоПБОЮЛ Тогда
		стрИНН = Параметры.ИННФЛ;
		стрИдДок = стрИНН + "*********" 	+ стрГод + стрНомер; 
	Иначе
		стрИНН = Параметры.ИННОрг;
		стрКПП = Параметры.КППОрг;
		стрИдДок = стрИНН + "**" + стрКПП 	+ стрГод + стрНомер; 
	КонецЕсли;
	
	Возврат стрИдДок;
	
КонецФункции

Функция ПолучитьСведенияОПредставителе(КодИФНС)
	
	УполномоченноеЛицоПредставителя = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	ТипПодписанта = "1";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацияВИФНС.Код,
	|	РегистрацияВИФНС.КПП,
	|	РегистрацияВИФНС.Представитель,
	|	РегистрацияВИФНС.ДокументПредставителя,
	|	РегистрацияВИФНС.УполномоченноеЛицоПредставителя
	|ИЗ
	|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	|ГДЕ
	|	РегистрацияВИФНС.Код = &Код
	|	И РегистрацияВИФНС.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПредставителя = ТипЗнч(Выборка.Представитель);
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			УполномоченноеЛицоПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
			НаименованиеОрганизацииПредставителя = СокрЛП(Выборка.Представитель);
		Иначе
			УполномоченноеЛицоПредставителя = СокрЛП(Выборка.Представитель);
		КонецЕсли;
		ДокументПредставителя = СокрЛП(Выборка.ДокументПредставителя);
		ТипПодписанта = "2";
	КонецЕсли;
	
	Если ТипПодписанта = "1" тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
		УполномоченноеЛицоПредставителя = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, ФИОПодписанта, НаименованиеОрганизацииПредставителя, ДокументПредставителя", ТипПодписанта, УполномоченноеЛицоПредставителя, НаименованиеОрганизацииПредставителя, ДокументПредставителя);
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции


Функция СформироватьСтруктуруПараметров()
	
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Приложение = мДанныеОтчета.Приложение;
	Сведения = мДанныеОтчета.Сведения;
	
	//Сведения об организации
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	СтрокаСведений = "ИННЮЛ, ИННФЛ, КППЮЛ, НаимЮЛПол, КодНО, ТипНП, ФИО, ОГРН, " + ?(ЭтоПБОЮЛ, "АдрМЖ", "АдрЮР");
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
    	
	Параметры = Новый Структура;
	Параметры.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Параметры.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ДатаДок", Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("НомерЗаявления", Формат(Раздел1.НомерЗаяв,"ЧГ=0"));
	
	Параметры.Вставить("КодИФНС",		СведенияОбОрганизации.КодНО);
	Параметры.Вставить("КодИФНСПолучателя",	?(ЗначениеЗаполнено(Организация.КодИФНСПолучателя), Организация.КодИФНСПолучателя, СведенияОбОрганизации.КодНО));
	
	
	ДанныеПредставителя = ПолучитьСведенияОПредставителе(СведенияОбОрганизации.КодНО);
	Параметры.Вставить("ТипПодписанта",	ДанныеПредставителя.ТипПодписанта);
	
	ФИОПодписанта = РазложитьФИО(ДанныеПредставителя.ФИОПодписанта);
	Параметры.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	Если ДанныеПредставителя.ТипПодписанта = "2" Тогда
		Параметры.Вставить("НаимДокПредставителя",	ДанныеПредставителя.ДокументПредставителя);
		Параметры.Вставить("НаимОргПредставителя",	ДанныеПредставителя.НаименованиеОрганизацииПредставителя);
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Параметры.Вставить("ИННФЛ",	СведенияОбОрганизации.ИННФЛ);
		Параметры.Вставить("СвГосРегИП", СведенияОбОрганизации.ОГРН);
		
		ФИОИП = РазложитьФИО(СведенияОбОрганизации.ФИО);
		Параметры.Вставить("ФамилияИП",		ФИОИП.Фамилия);
		Параметры.Вставить("ИмяИП",			ФИОИП.Имя);
		Параметры.Вставить("ОтчествоИП", 	ФИОИП.Отчество);
	Иначе
		Параметры.Вставить("НаимОрг",	СведенияОбОрганизации.НаимЮЛПол);	
		Параметры.Вставить("ИННОрг",	СведенияОбОрганизации.ИННЮЛ);	
		Параметры.Вставить("КППОрг",	СведенияОбОрганизации.КППЮЛ);	
	КонецЕсли;
	
	Параметры.Вставить("ИмяФайлаСхемы",				"ON_ZVLRPOK_2_430_14_05_01_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"ON_ZVLRPOK");
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");
	Параметры.Вставить("ИдДок",			СформироватьИдДок(Параметры));
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусОшибки = Ложь;
	
	Если ПустаяСтрока(Организация.ИНН) ИЛИ НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(Организация.ИНН) Тогда
		Сообщить("Неверно задан ИНН организации в справочнике.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	СтрокаСведений = "ИННЮЛ, ИННФЛ, КППЮЛ, НаимЮЛПол, КодНО, ТипНП, ФИО, ОГРН, " + ?(ЭтоПБОЮЛ, "АдрМЖ", "АдрЮР");
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);

	Если СтрДлина(СокрЛП(СведенияОбОрганизации.КодНО)) <> 4 Тогда
		Сообщить("Неверно задан код ИФНС для организации в справочнике.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
		
	// проверка сведений о заявлении
	Раздел1 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел1);
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщить("В разделе 1 не задан номер заявления.", СтатусСообщения.Важное);	
		СтатусОшибки = Истина;
	КонецЕсли;
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));

	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		Сообщить("В разделе 1 не задан код страны организации-продавца.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	ИначеЕсли Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Сообщить("В разделе 1 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщить("В разделе 1 не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщить("В разделе 1 не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщить("В разделе 1 не задан номер договора(контракта) строки 05.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщить("В разделе 1 не задана дата договора(контракта) строки 05.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Раздел1.НаимОрг_1) Тогда
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщить("В разделе 1 не задан номер договора(контракта) строки 07.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщить("В разделе 1 не задана дата договора(контракта) строки 07.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//проверка раздела 3
	Раздел3 = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы.ПолеТабличногоДокументаРаздел3);
	
	
	
	//Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
	//	Сообщить("В разделе 1 не задан номер заявления.", СтатусСообщения.Важное);	
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
	//	Сообщить("В разделе 1 не задан номер заявления.", СтатусСообщения.Важное);	
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	ИННПродавца_Раздел3 = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	ИННПокупателя_Раздел3 = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) 
		ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг) 
		ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) 
		ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог) 
		ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации) 
		ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
		//раздел не пуст
		
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Если НЕ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) Тогда
				Сообщить("В разделе 3 не задан код страны организации-продавца.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			ИначеЕсли Раздел3.КодСтраныПродавец = "112" ИЛИ Раздел3.КодСтраныПродавец = "398" Тогда
				Если НЕ ЗначениеЗаполнено(ИННПродавца_Раздел3) Тогда
					Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
					СтатусОшибки = Истина;
				КонецЕсли;
			Иначе
				Сообщить("В разделе 3 код страны ограничен значениями 112 и 398 (т.к. отсутствует УНП|ИНН|РНН(БИН|ИИН) продавца раздела 1)", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
				Сообщить("В разделе 3 не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
		Иначе
			Если Раздел3.КодСтраныПродавец = "112" ИЛИ Раздел3.КодСтраныПродавец = "398" Тогда
				Если НЕ ЗначениеЗаполнено(ИННПродавца_Раздел3) Тогда
					Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
					СтатусОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398" ИЛИ Раздел3.КодСтраныПокупатель = "643" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПокупателя_Раздел3) Тогда
				Сообщить("В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли;
	
	//проверка приложений
	
	Для каждого Приложение Из мСтруктураМногостраничныхРазделов["Приложение"] Цикл
		
		Индекс = мСтруктураМногостраничныхРазделов["Приложение"].Индекс(Приложение);
		
		ДанныеПриложения = Приложение.Данные;
		
		ИННКПП = ДанныеПриложения.ПродавецИНН_КПП;
		ИННПродавца = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
		
		ИННКПП = ДанныеПриложения.ПокупательИНН_КПП;
		ИННПокупателя = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));

		Если ДанныеПриложения.КодСтраныПродавец = "112" ИЛИ ДанныеПриложения.КодСтраныПродавец = "398" ИЛИ ДанныеПриложения.КодСтраныПродавец = "643" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
				Сообщить("На странице " + (Индекс + 1) + " приложения не задан УНП|ИНН|РНН(БИН|ИИН) продавца.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если ДанныеПриложения.КодСтраныПокупатель = "112" ИЛИ ДанныеПриложения.КодСтраныПокупатель = "398" ИЛИ ДанныеПриложения.КодСтраныПокупатель = "643" Тогда
			Если НЕ ЗначениеЗаполнено(ИННПокупателя) Тогда
				Сообщить("На странице " + (Индекс + 1) + " приложения не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// проверка сведений о товаре и уплаченных налогах
	ЧислоВыгружаемыхТоваров = 0;
	НомерСтроки = 0;
	МнЧРаздел1 = мСтруктураМногострочныхРазделов["П0000100001"];
	Для Каждого Стр Из МнЧРаздел1 Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ЕстьНепустойПоказатель = Ложь;
		Для Инд = 1 По 16 Цикл
			Если ЗначениеЗаполнено(Стр["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				ЕстьНепустойПоказатель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьНепустойПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000102"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнено наименование товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000106"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена стоимость товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;

		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000107"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана валюта товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000108"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указан курс валюты товара.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000109"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указаны серия, номер транспортного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр["П000010000110"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не указана дата транспортного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Стр["П000010000113"]) Тогда
			Сообщить("В строке " + НомерСтроки + " таблицы товаров не заполнена дата принятия товара на учет.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщить("В таблице товаров не заполнена ни одна строка.", СтатусСообщения.Важное);
		СтатусОшибки = Истина;
	КонецЕсли;
	
	// проверка сведений о банках и выписках
	ЧислоВыгружаемыхВыписок = 0;
	НомерБанкаПП = 0;
	Для Каждого СтраницаБанк Из мСтруктураМногостраничныхРазделов.Сведения Цикл
		
		НомерБанкаПП = НомерБанкаПП + 1;
		ТипПлат = СтраницаБанк.Данные.ТипПлат;
		БИКБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.БИК));
		НаименованиеБанка = ВРЕГ(СокрЛП(СтраницаБанк.Данные.НаименованиеБанка));
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) И НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(БИКБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнен БИК банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнено наименование банка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не заполнен тип платежного документа.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
		// проверяем сведения о выписках банка
		ЧислоВыгружаемыхВыписокТекущегоБанка = 0;
		НомСтрВыписка = 1;
		Пока СтраницаБанк.Данные.Свойство("П000020000102_" + Формат(НомСтрВыписка, "ЧГ=")) Цикл
			
			НомСтрВыпискаСтр = Формат(НомСтрВыписка, "ЧГ=");
			
			П000020000101 = СтраницаБанк.Данные["П000020000101_" + НомСтрВыпискаСтр];
			П000020000102 = СтраницаБанк.Данные["П000020000102_" + НомСтрВыпискаСтр];
			П000020000103 = СтраницаБанк.Данные["П000020000103_" + НомСтрВыпискаСтр];
			
			НомСтрВыписка = НомСтрВыписка + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана дата выписки №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000102) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указана сумма уплаченного налога по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не указан номер счета по выписке №" + НомСтрВыпискаСтр + ".", СтатусСообщения.Важное);
				СтатусОшибки = Истина;
			КонецЕсли;
			
			ЧислоВыгружаемыхВыписокТекущегоБанка = ЧислоВыгружаемыхВыписокТекущегоБанка + 1;
			
		КонецЦикла;
		
		ЧислоВыгружаемыхВыписок = ЧислоВыгружаемыхВыписок + ЧислоВыгружаемыхВыписокТекущегоБанка;
		
		Если ЧислоВыгружаемыхВыписокТекущегоБанка = 0 Тогда
			Сообщить("На странице " + НомерБанкаПП + " раздела ""Сведения о выписках банка"" не определена ни одна выписка.", СтатусСообщения.Важное);
			СтатусОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ЧислоВыгружаемыхВыписок = 0 И (ЗначениеЗаполнено(Раздел1.П000010000119) ИЛИ ЗначениеЗаполнено(Раздел1.П000010000120)) Тогда
	//	Сообщить("Сведения о выписках банка не могут быть незаполнены при заполненной итоговой сумме налога.", СтатусСообщения.Важное);
	//	СтатусОшибки = Истина;
	//КонецЕсли;
	
	Возврат НЕ СтатусОшибки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция РазделитьИННКПП(ИННКПП)
	ИНН = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПП = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));	
	Возврат Новый Структура("ИНН, КПП", ИНН, КПП);
КонецФункции


Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 	= мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел3 	= мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Приложение 	= мДанныеОтчета.Приложение;
	Сведения 	= мДанныеОтчета.Сведения;
	
	
	УзелСвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, УзелСвЗвл);
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ДатаДокНП", Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ПрЛизинг", ?(СокрЛП(Раздел1.ПрЛизинг) = "", "0", "1"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ПрДавСырья", ?(СокрЛП(Раздел1.ПрДавСырья) = "", "0", "1"));
	
	УзелСвКонтракт1 = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтракт1");
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ИдНомПрод1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "КПППрод1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).КПП);
	
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ИдНомПок1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "КПППок1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).КПП);
	
	УзелСвКонтр1 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт1, "СвКонтр1");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтр1, "СвСпециф");
	
	Для Сч = 1 По мТЗСпецификацийРаздел1.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтр1, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	УзелСвКонтрКомисс = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтрКомисс");
	УзелСвКонтракт2 = ПолучитьПодчиненныйЭлемент(УзелСвКонтрКомисс, "СвКонтракт2");
	
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По мТЗСпецификацийРаздел1_07.Количество() Цикл
		Строка = мТЗСпецификацийРаздел1_07[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтракт2, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	ШаблонУзелСвТовар = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	НомерСтроки = 1;
	Пока СвойствоОпределено(Раздел1, "П000010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		Если ЗначениеЗаполнено(Раздел1["П000010000102_" + Формат(НомерСтроки, "ЧГ=")]) Тогда
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;					
			УзелСвТовар = СкопироватьУзел(УзелСвЗвл, ШаблонУзелСвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел1, УзелСвТовар, НомерСтроки);
			
			ЗадатьЗначениеЭлемента(УзелСвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			ЗадатьЗначениеЭлемента(УзелСвТовар, "БазаВал", "1");
			
			СтАкцизТверд 	= СтрЗаменить(Раздел1["П000010000116_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			СтАкцизАдвал 	= СтрЗаменить(Раздел1["П000010000117_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			СтНДС 			= СтрЗаменить(Раздел1["П000010000118_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", Раздел1["П000010000121_" + Формат(НомерСтроки, "ЧГ=")]);
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ЗадатьЗначениеЭлемента(УзелСвТовар, "ПрОсвАкциз", СтруктураСтавокМодиф.Переключатель3);
			ЗадатьЗначениеЭлемента(УзелСвТовар, "ПрОсвНДС", СтруктураСтавокМодиф.Переключатель1);
			
			//поскольку на форме эти показатели строковые - при выгрузке приводим к числовому виду
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);

			ЗадатьЗначениеЭлемента(УзелСвТовар, "СтАкцизТверд", СтАкцизТверд);
			ЗадатьЗначениеЭлемента(УзелСвТовар, "СтАкцизАдвал", СтАкцизАдвал);
			ЗадатьЗначениеЭлемента(УзелСвТовар, "СтНДС", 		СтНДС);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	//выгрузка раздела 3
	УзелСвКонтракт3 = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, УзелСвКонтракт3);
	
	//тип продавца
	стрТипПрод = Раздел3.ТипПрод_3;
	Если стрТипПрод = "(комитент)" Тогда
		ТипПрод_3 = 0;
	ИначеЕсли стрТипПрод = "(доверитель)" Тогда
		ТипПрод_3 = 1;
	ИначеЕсли стрТипПрод = "(принципал)" Тогда
		ТипПрод_3 = 2;
	ИначеЕсли стрТипПрод = "(продавец)" Тогда
		ТипПрод_3 = 6;
	Иначе
		ТипПрод_3 = "";
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ТипПродР3", ТипПрод_3);
	
	//тип покупателя
	стрТипПок = Раздел3.ТипПок_3;
	Если стрТипПок = "(комиссионер)" Тогда
		ТипПок_3 = 3;
	ИначеЕсли стрТипПок = "(поверенный)" Тогда
		ТипПок_3 = 4;
	ИначеЕсли стрТипПок = "(агент)" Тогда
		ТипПок_3 = 5;
	ИначеЕсли стрТипПок = "(покупатель)" Тогда
		ТипПок_3 = 7;
	Иначе
		ТипПок_3 = "";                     
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ТипПокР3", ТипПок_3);
	
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "КПППродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).КПП);
	
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "КПППокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).КПП);
	
	УзелСвКонтрР3 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт3, "СвКонтрР3");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По мТЗСпецификацийРаздел3.Количество() Цикл
		Строка = мТЗСпецификацийРаздел3[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтрР3, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	// выгружаем сведения о банках и выписках раздела "Сведения"
	НомерБанкаПП = 0;
	ШаблонУзелСвБанк = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвБанк");
	Для Каждого ЛистСведений Из Сведения Цикл
		ДанныеЛиста = ЛистСведений.Данные;
		
		УзелСвБанк = СкопироватьУзел(УзелРодитель, ШаблонУзелСвБанк);
		ЗаполнитьДаннымиУзел(ДанныеЛиста,УзелСвБанк);
		
		ШаблонУзелСвВыпБанк = ПолучитьПодчиненныйЭлемент(УзелСвБанк, "СвВыпБанк");
		
		ЧислоВыгруженныхСтрок = 0;
		НомерСтроки = 1;
		Пока СвойствоОпределено(ДанныеЛиста, "П000020000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			Если ЗначениеЗаполнено(ДанныеЛиста["П000020000102_" + Формат(НомерСтроки, "ЧГ=")]) Тогда
				
				ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;					
				УзелСвВыпБанк = СкопироватьУзел(УзелСвБанк, ШаблонУзелСвВыпБанк);
				ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвВыпБанк, НомерСтроки);
				ЗадатьЗначениеЭлемента(УзелСвВыпБанк, "НомВыпПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвБанк) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			ЗадатьЗначениеЭлемента(УзелСвБанк, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
	КонецЦикла;
	
	// выгружаем приложения
	НомерПриложения = 0;
	ШаблонУзелСвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		Индекс = Приложение.Индекс(ЛистПриложения);
		
		ДанныеЛиста = ЛистПриложения.Данные;
		
		УзелСвКонтрПр = СкопироватьУзел(УзелРодитель, ШаблонУзелСвКонтрПр);
		ЗаполнитьДаннымиУзел(ДанныеЛиста,УзелСвКонтрПр);
		
		//тип продавеца
		стрТипПрод = ДанныеЛиста.ТипПрод_Пр;
		Если стрТипПрод = "(комитент)" Тогда
			ТипПрод_Пр = 0;
		ИначеЕсли стрТипПрод = "(доверитель)" Тогда
			ТипПрод_Пр = 1;
		ИначеЕсли стрТипПрод = "(принципал)" Тогда
			ТипПрод_Пр = 2;
		ИначеЕсли стрТипПрод = "(комиссионер)" Тогда
			ТипПрод_Пр = 3;
		ИначеЕсли стрТипПрод = "(поверенный)" Тогда
			ТипПрод_Пр = 4;
		ИначеЕсли стрТипПрод = "(агент)" Тогда
			ТипПрод_Пр = 5;
		ИначеЕсли стрТипПрод = "(продавец)" Тогда
			ТипПрод_Пр = 6;
		Иначе
			ТипПрод_Пр = "";
		КонецЕсли;
		
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ТипПродП", ТипПрод_Пр);
		
		//тип покупателя
		стрТипПок = ДанныеЛиста.ТипПок_Пр;
		Если стрТипПок = "(комитент)" Тогда
			ТипПок_Пр = 0;
		ИначеЕсли стрТипПок = "(доверитель)" Тогда
			ТипПок_Пр = 1;
		ИначеЕсли стрТипПок = "(принципал)" Тогда
			ТипПок_Пр = 2;
		ИначеЕсли стрТипПок = "(комиссионер)" Тогда
			ТипПок_Пр = 3;
		ИначеЕсли стрТипПок = "(поверенный)" Тогда
			ТипПок_Пр = 4;
		ИначеЕсли стрТипПок = "(агент)" Тогда
			ТипПок_Пр = 5;
		ИначеЕсли стрТипПок = "(покупатель)" Тогда
			ТипПок_Пр = 7;
		Иначе
			ТипПок_Пр = "";
		КонецЕсли;
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ТипПокП", ТипПок_Пр);
		
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПродП", РазделитьИННКПП(ДанныеЛиста.ПродавецИНН_КПП).ИНН);
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "КПППродП", 	РазделитьИННКПП(ДанныеЛиста.ПродавецИНН_КПП).КПП);
		
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПокП", 	РазделитьИННКПП(ДанныеЛиста.ПокупательИНН_КПП).ИНН);
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "КПППокП", 	РазделитьИННКПП(ДанныеЛиста.ПокупательИНН_КПП).КПП);
		
		УзелСвКонтрП = ПолучитьПодчиненныйЭлемент(УзелСвКонтрПр, "СвКонтрП");
		ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрП, "СвСпециф");
		
		Для Сч = 1 По мМассивТЗСпецификацийПрил[Индекс].Количество() Цикл
			Строка = мМассивТЗСпецификацийПрил[Индекс][Сч - 1];
			
			УзелСвСпециф = СкопироватьУзел(УзелСвКонтрП, ШаблонУзелСвСпециф);
			ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
			ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Параметры.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда // !!!
				ЗаполнитьДаннымиУзел(Параметры, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			//РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			//РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			//Сообщить("Значение """ + Узел.Значение + """ показателя выгрузки """ + Узел.Код + """ не соответствует шаблону!"); //!!!
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если СокрЛП(Текст) <> СокрЛП(Комментарий) Тогда
		мОбновитьКомментарий = Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		мОбновитьКомментарий = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫБОРА ИЗ СПИСКА
//

Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2010Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			//ТаблСписка.Колонки.Добавить("Название", , "Наименование", МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("ПолноеНаименование", ,"Полное наименование", МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					//НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.ПолноеНаименование = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000104", 1, , "Выбор единицы измерения подакцизного товара", КоллекцияСписковВыбора["ЕдИзмПодАкцТоваров"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПлат", 1, , "Выбор типа платежного документа", КоллекцияСписковВыбора["ТипПлатДок"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПрод_3", 1, , "Выбор типа продавца", КоллекцияСписковВыбора["ТипПродавцаРаздел3"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПок_3", 1, , "Выбор типа покупателя", КоллекцияСписковВыбора["ТипПокупателяРаздел3"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПрод_Пр", 1, , "Выбор типа продавца", КоллекцияСписковВыбора["ТипПродавцаПрил"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПок_Пр", 1, , "Выбор типа покупателя", КоллекцияСписковВыбора["ТипПокупателяПрил"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	//Изменение связанных данных
	Если КодПоказателя = "П000010000117" Тогда
		
		НомерСтроки = Сред(Область.Имя, 15);
		
		Область.Значение = РезультатВыбора.Название;
		Элемент.Области["П000010000119_" + НомерСтроки].Значение = РезультатВыбора.Код;
		
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000117 = РезультатВыбора.Название;
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000119 = РезультатВыбора.Код;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

// Создаёт структуру спецификаций
// Возвращаемое значение: структура
//
Функция СоздатьТЗСпецификаций()

	ТЗСпецификаций = Новый ТаблицаЗначений;		
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
    ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	                                                                                                	
	ТЗСпецификаций.Колонки.Добавить("Дата", ОписаниеТиповДата, "Дата спец.", 20);
	ТЗСпецификаций.Колонки.Добавить("Номер", ОписаниеТиповСтрока50, "Номер спец.", 20); 
	
	Возврат ТЗСпецификаций;	

КонецФункции // СоздатьТЗСпецификаций()


// Анализирует значения текущей строки в столбцах 16, 17, 18, 21(вспомогательный)
//
// Параметры
//  <СтруктураСтавок>  - структура содержащая значения в столбцах 16, 17, 18, 21 в текущей строке
//
Функция АнализироватьПоляСтавки(СтруктураСтавок)

	СтруктураСтавокМодиф = Новый Структура;
	
	Если СтруктураСтавок.Ст18 = "Льгота" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель1", 2);
	Иначе 	
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", ?(СтруктураСтавок.Ст18 = "", 0, Число(СтруктураСтавок.Ст18)));
		СтруктураСтавокМодиф.Вставить("Переключатель1", 1);
	КонецЕсли;
	
	Если СтруктураСтавок.Ст16 = "" И СтруктураСтавок.Ст17 = "" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза",0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);  		
	ИначеЕсли СтруктураСтавок.Ст16 = "Льгота" И Число(СтруктураСтавок.Ст17) = 0 Тогда		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);		
	ИначеЕсли СтруктураСтавок.Ст16 = "-" И СтруктураСтавок.Ст17 = "-" Тогда		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		
		Если СтруктураСтавок.Ст21 = " " Тогда
			СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
		Иначе
			СтруктураСтавокМодиф.Вставить("Переключатель3", 3);
		КонецЕсли;
		
	ИначеЕсли СтруктураСтавок.Ст17 = "Льгота" И Число(СтруктураСтавок.Ст16) = 0 Тогда		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли ?(СтруктураСтавок.Ст17 = "", 0, Число(СтруктураСтавок.Ст17)) = 0  Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст16 = "", 0, Число(СтруктураСтавок.Ст16)));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	Иначе 
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст17 = "", 0, Число(СтруктураСтавок.Ст17)));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	КонецЕсли;
	
Возврат СтруктураСтавокМодиф

КонецФункции // АнализироватьПоляСтавки()

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если Найти(ИмяОбласти, "КодСтраны") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода страны";
		
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.КлассификаторСтранМира.НайтиПоКоду(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
			
			Если Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаСпецификаций = ПолучитьФорму("ФормаВводаСпецификаций");
		ФормаВводаСпецификаций.ТЗСпецификаций = мТЗСпецификацийРаздел3;
		Результат = ФормаВводаСпецификаций.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			мТЗСпецификацийРаздел3 = Результат;
			Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел3);
			мРаздел3.Области.НомерСпецификации.Значение = Тексты.Номер;
			мРаздел3.Области.ДатаСпецификации.Значение = Тексты.Дата;
			Модифицированность = Истина;
		КонецЕсли
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаПриложениеНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаПриложениеНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение");

КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуПриложениеНажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Приложение");
	
	Элемент = СоздатьТЗСпецификаций(); 
    мМассивТЗСпецификацийПрил.Добавить(Элемент);

КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуПриложениеНажатие(Элемент)
	
	
	УдалитьДополнительнуюСтраницу("Приложение");
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуПриложениеНажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение");
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложениеПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение");

КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложениеВыбор(Элемент, Область, СтандартнаяОбработка)
	Перем ТаблицаСтраницРаздела;
	
	ИмяОбласти = Область.Имя;
	
	Если Найти(Область.Имя, "КодСтраны") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Заголовок = "Выбор кода страны";
		
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
			НайденнаяСтрока = Справочники.КлассификаторСтранМира.НайтиПоКоду(Область.Значение);
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
			
			Если Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
		// получаем номер текущей доп страницы
		Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		
		Если СтрТаблицаСтраницы = Неопределено Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Приложение");
			Возврат;
		КонецЕсли;
		
		НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		
		СтандартнаяОбработка = Ложь;
		
		ТЗСтраницы = мМассивТЗСпецификацийПрил[НомерТекущейСтраницы];
		
		ФормаВводаСпецификаций = ПолучитьФорму("ФормаВводаСпецификаций");
		ФормаВводаСпецификаций.ТЗСпецификаций = ТЗСтраницы;
		Результат = ФормаВводаСпецификаций.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			ТЗСтраницы = Результат;
			Тексты = ПолучитьТекстыИзТЗСпецификаций(ТЗСтраницы);
			мПриложение.Области.НомерСпецификации.Значение = Тексты.Номер;
			мПриложение.Области.ДатаСпецификации.Значение = Тексты.Дата;
			Модифицированность = Истина;
		КонецЕсли
	КонецЕсли;

	ПараметрВводаПоля = НайтиСвойстваПоказателя(Область.Имя);

    //создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаСведенияВыбор(Элемент, Область, СтандартнаяОбработка)
	ПараметрВводаПоля = НайтиСвойстваПоказателя(Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1R10C52ПриИзменении(Элемент)
	Перем ТаблицаСтраниц;
		
	Номер = Элемент.Значение;
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			Если СтраницаПанели.Имя = "Раздел1" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			
			ТекТабличноеПоле.Области.НомерЗаяв.Защита = Ложь;
			ТекТабличноеПоле.Области.НомерЗаяв.Значение = Номер;
			ТекТабличноеПоле.Области.НомерЗаяв.Защита = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, "Приложение");
	
	Для Каждого ДопСтр Из мСтруктураМногостраничныхРазделов.Приложение Цикл
		 ДопСтр.Данные.НомерЗаяв = Номер;
	 КонецЦикла;	
	 мПриложение.Области.НомерЗаяв.Защита = Ложь;
	 мПриложение.Области.НомерЗаяв.Значение = Номер;
	 мПриложение.Области.НомерЗаяв.Защита = Истина;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мИдГруппы1  = "П0000100001";
мИдГруппы2  = "П0000200001";

мМаскиЯчейки = Новый Соответствие;
мМаскиЯчейки.Вставить("П000010000103", "9999999999");

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;

мОписаниеТиповЧисло4    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4, 0);
мОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1, 0);
мОписаниеТиповСтрока500 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
мОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
мОписаниеТиповСтрока16  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16);
мОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
мОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
мОписаниеТиповЧисло16_6 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(16, 6);
мОписаниеТиповЧисло9_4  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(9, 4);
мОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
мОписаниеТиповЧисло20_6 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20, 6);
мОписаниеТиповЧисло15_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
мОписаниеТиповЧисло5_2  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 2);
мОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
мОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010000101", мОписаниеТиповЧисло4);
СтруктураГруппы1.Колонки.Добавить("П000010000102", мОписаниеТиповСтрока500);
СтруктураГруппы1.Колонки.Добавить("П000010000103", мОписаниеТиповСтрока10); 
СтруктураГруппы1.Колонки.Добавить("П000010000104", мОписаниеТиповСтрока50);
СтруктураГруппы1.Колонки.Добавить("П000010000105", мОписаниеТиповЧисло16_6);
СтруктураГруппы1.Колонки.Добавить("П000010000106", мОписаниеТиповЧисло15_2);
СтруктураГруппы1.Колонки.Добавить("П000010000107", мОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П000010000108", мОписаниеТиповЧисло9_4);
СтруктураГруппы1.Колонки.Добавить("П000010000109", мОписаниеТиповСтрока50);
СтруктураГруппы1.Колонки.Добавить("П000010000110", мОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000010000111", мОписаниеТиповСтрока50);
СтруктураГруппы1.Колонки.Добавить("П000010000112", мОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000010000113", мОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000010000114", мОписаниеТиповЧисло20_6);
СтруктураГруппы1.Колонки.Добавить("П000010000115", мОписаниеТиповЧисло15_2);
СтруктураГруппы1.Колонки.Добавить("П000010000116", мОписаниеТиповСтрока16); 
СтруктураГруппы1.Колонки.Добавить("П000010000117", мОписаниеТиповСтрока16); 
СтруктураГруппы1.Колонки.Добавить("П000010000118", мОписаниеТиповСтрока16); 
СтруктураГруппы1.Колонки.Добавить("П000010000119", мОписаниеТиповЧисло15_2); 
СтруктураГруппы1.Колонки.Добавить("П000010000120", мОписаниеТиповЧисло15_2);
СтруктураГруппы1.Колонки.Добавить("П000010000121", мОписаниеТиповСтрока1);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000020000101", мОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000020000102", мОписаниеТиповЧисло15_2);
СтруктураГруппы2.Колонки.Добавить("П000020000103", мОписаниеТиповСтрока254);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);


// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    мОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыСведения = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыСведения.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Сведения", ТаблицаСтраницыСведения);
мСтруктураМногостраничныхРазделов.Вставить("Приложение", ТаблицаСтраницыРаздела);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "02/11/2010";

мКодОтчета = "1151099";

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
