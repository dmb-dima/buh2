////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел4;
Перем мПриложение1;
Перем мПриложение2;
Перем мПриложение3;
Перем мПриложение4;
Перем мПриложение5;
Перем мПриложение6;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;
Перем мОписаниеТиповБулево;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Переменная для исключения запуска Расчета при вставке доп. страниц.
Перем мИсключитьЗапускРасчета;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранят структуру многострочных разделов

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мТабачныеИзделияКодыТоваров;
Перем мТабачныеИзделияЕдИзмерения;
Перем мКБК2005;
Перем мТолько450и460;
Перем мКроме450и460;

// Переменные квадратных значений

Перем мКБКРаздел1;
Перем мКодОКАТОРаздел1;
Перем мСуммаНалога25Число1;
Перем мСуммаНалога15Число1;
Перем мСуммаНалогаКУменьшению1;
Перем мКодОКВЭД;

Перем мИдГруппы1; // Идентификатор многострочной части приложения № 2
Перем мИдГруппы2; // Идентификатор многострочной части приложения № 3
Перем мИдГруппы3; // Идентификатор многострочной части приложения № 5
Перем мИдГруппы4; // Идентификатор многострочной части приложения № 6

Перем мМаскиЯчейки;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мДокументВосстановлен;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем мПоляПоискаПоказателяВТСП;

Перем ЦветБелый;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	ИмяСтраницы1 = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если ИмяСтраницы1 = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли ИмяСтраницы1 = "Раздел1" Тогда

		мКБКРаздел1 = "";
		мКодОКАТОРаздел1 = "";
		мСуммаНалога25Число1 = 0;
		мСуммаНалога15Число1 = 0;
		мСуммаНалогаКУменьшению1 = 0;
		мКодОКВЭД = "";

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Блок стандартных процедур и функций, одинаковый во всех отчетных формах
// ////////////////////////////////////////////////////////////////////////

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога25Число1_", 15, мСуммаНалога25Число1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога15Число1_", 15, мСуммаНалога15Число1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалогаКУменьшению1_", 15, мСуммаНалогаКУменьшению1, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", мОписаниеТиповБулево);

	МнгПриложение2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение2.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгПриложение3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение3.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгПриложение5 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение5.Добавить();
	НовСтр.ИдГруппы = мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгПриложение6 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение6.Добавить();
	НовСтр.ИдГруппы = мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000510001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение2;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000520001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение3;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000530001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение5;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000550001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение6";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение6;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000560001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	РазделЯвляетсяАвтозаполняемым                      = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мПриложение2;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мПриложение3;
	ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
		ТекТабличноеПоле = мПриложение5;
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
		ТекТабличноеПоле = мПриложение6;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// УстановитьКНДВПриложениях
//
Процедура УстановитьКНДВПриложениях()
	// Приложение 2
	мПриложение2.Область("R33C212:R44C214").Объединить();
	НайденнаяОбласть = мПриложение2.Области.Найти("ПравоеПрисоединение");
	Если НайденнаяОбласть <> Неопределено Тогда
		НайденнаяОбласть.Имя = "";
	КонецЕсли;
	мПриложение2.Область("R2C210:R44C223").Имя = "ПравоеПрисоединение";

	// Приложение 3
	мПриложение3.Область("R33C212:R44C214").Объединить();
	НайденнаяОбласть = мПриложение3.Области.Найти("ПравоеПрисоединение");
	Если НайденнаяОбласть <> Неопределено Тогда
		НайденнаяОбласть.Имя = "";
	КонецЕсли;
	мПриложение3.Область("R2C210:R44C223").Имя = "ПравоеПрисоединение";

	// Приложение 5
	мПриложение5.Область("R33C205:R44C207").Объединить();
	НайденнаяОбласть = мПриложение5.Области.Найти("ПравоеПрисоединение");
	Если НайденнаяОбласть <> Неопределено Тогда
		НайденнаяОбласть.Имя = "";
	КонецЕсли;
	мПриложение5.Область("R2C203:R45C216").Имя = "ПравоеПрисоединение";

	// Приложение 6
	мПриложение6.Область("R33C205:R44C207").Объединить();
	НайденнаяОбласть = мПриложение6.Области.Найти("ПравоеПрисоединение");
	Если НайденнаяОбласть <> Неопределено Тогда
		НайденнаяОбласть.Имя = "";
	КонецЕсли;
	мПриложение6.Область("R2C203:R44C216").Имя = "ПравоеПрисоединение";

КонецПроцедуры // УстановитьКНДВПриложениях

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	ИмяТабл = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы).Имя;
	Если (ИмяТабл = "ПолеТабличногоДокументаПриложение2")
	 Или (ИмяТабл = "ПолеТабличногоДокументаПриложение3")
	 Или (ИмяТабл = "ПолеТабличногоДокументаПриложение5")
	 Или (ИмяТабл = "ПолеТабличногоДокументаПриложение6") Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;


		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел1", мКБКРаздел1);
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел1", мКодОКАТОРаздел1);

		СтруктураДанныхПоля.Вставить("СуммаНалога25Число1", мСуммаНалога25Число1);
		СтруктураДанныхПоля.Вставить("СуммаНалога15Число1", мСуммаНалога15Число1);
		СтруктураДанныхПоля.Вставить("СуммаНалогаКУменьшению1", мСуммаНалогаКУменьшению1);
		СтруктураДанныхПоля.Вставить("КодОКВЭД", мКодОКВЭД);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре) Экспорт

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КБКРаздел1" Тогда
		Рез = мКБКРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1" Тогда
		Рез = мКодОКАТОРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога25Число1" Тогда
		Рез = мСуммаНалога25Число1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога15Число1" Тогда
		Рез = мСуммаНалога15Число1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалогаКУменьшению1" Тогда
		Рез = мСуммаНалогаКУменьшению1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКВЭД" Тогда
		Рез = мКодОКВЭД;

	КонецЕсли;

	Возврат Рез;

КонецФункции 

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		мКБКРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1" Тогда
		мКодОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога25Число1" Тогда
		мСуммаНалога25Число1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога15Число1" Тогда
		мСуммаНалога15Число1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалогаКУменьшению1" Тогда
		мСуммаНалогаКУменьшению1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКВЭД" Тогда
		мКодОКВЭД = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Если (мДокументВосстановлен) И (мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	
	//Если НомерМесяца = "12" Тогда
		//НомерМесяца = "0";
	//КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = "1";
	мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 1, 1);
	мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН="), 2, 1);

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиИП      = "";

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	ДатаПодписиРук = стрУказаннаяДата;
	ДатаПодписиУпПред = стрУказаннаяДата;
	ДатаПодписиИП = стрУказаннаяДата;
	Если (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Или (ЧП) Тогда
		ДатаПодписиРук = "        ";
	КонецЕсли;

	Если (ПустаяСтрока(мТитульный.Области.ОргУп.Значение)) Тогда
		ДатаПодписиУпПред = "        ";
	КонецЕсли;

	ДатаПодписиИП  = ?(ЧП, стрУказаннаяДата, "        ");

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(ДатаПодписиРук, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиОргУп"  + НомЯчейки].Значение = Сред(ДатаПодписиУпПред, НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП"  + НомЯчейки].Значение = Сред(ДатаПодписиИП, НомЯчейки, 1);

		мРаздел1.Области["ДатаПодписи1_"  + НомЯчейки].Значение = Сред(ДатаПодписиРук, НомЯчейки, 1);
		мРаздел1.Области["ДатаПодписи2_"  + НомЯчейки].Значение = Сред(ДатаПодписиИП, НомЯчейки, 1);
		мРаздел1.Области["ДатаПодписи3_"  + НомЯчейки].Значение = Сред(ДатаПодписиУпПред, НомЯчейки, 1);
	
	КонецЦикла;

	Если ЧП Тогда
		// У ИП не может быть директора, бухгалтера и представителя.
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, "        "       , "ДатаПодписи1_", , "Раздел11, Раздел12", , Ложь);
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи3_", , "Раздел11, Раздел12", , Ложь);
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиИП    , "ДатаПодписи2_", , "Раздел11, Раздел12", , Ложь);
	Иначе
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиРук   , "ДатаПодписи1_", , "Раздел11, Раздел12", , Ложь);
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи3_", , "Раздел11, Раздел12", , Ложь);
		//РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиИП    , "ДатаПодписи2_", , "Раздел11, Раздел12", , Ложь);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";
	
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт

	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	Если (ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение2")
	 Или (ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение3")
	 Или (ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение5")
	 Или (ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаПриложение6") Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	// проставление "-" в незаполненных строках 030, 040, 050
	Для Каждого Эл Из мПечатныеФормы Цикл    
		Если Эл.Представление = "Раздел 1" Тогда
		Если (Год(мДатаКонцаПериодаОтчета) = 2009 И Месяц(мДатаКонцаПериодаОтчета) = 12) ИЛИ 
			Год(мДатаКонцаПериодаОтчета) > 2009 Тогда     			
			Для ид=1 По 15 Цикл 
			Эл.Значение.Значение.Области["СуммаНалога15Число1_" + ид].Значение = "-"; 
			КонецЦикла;  
		КонецЕсли;
		
			Если мСуммаНалогаКУменьшению1 = 0 Тогда
				Для ид=1 По 15 Цикл
					Эл.Значение.Значение.Области["СуммаНалогаКУменьшению1_" + ид].Значение = "-"; 
				КонецЦикла;
			Иначе 		
				Для ид=1 По 15 Цикл
					Эл.Значение.Значение.Области["СуммаНалога25Число1_" + ид].Значение = "-";  
					Эл.Значение.Значение.Области["СуммаНалога15Число1_" + ид].Значение = "-"; 
				КонецЦикла; 
				
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл

			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	// Выводим дату подписания отчета
	// ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	мДокументВосстановлен = Истина;
	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда
		ИмяГруппы = мИдГруппы4;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// ЗаписатьПоказательВСтруктуру
// Параметры:
//  ИмяРаздела     - имя раздела.
//  Показатель     - показатель.
//  Значение       - значение показателя.
//  СтраницаДанные - в случае, если показатель рассчитан в расчете в структуре, то передается ссылка на страницу, которая подлежит расчету
//                 если эта активная страница, то помимо записи результата вычисления в структуру, произойдет запись в табличное поле.
//
Процедура ЗаписатьПоказательВСтруктуру(ИмяРаздела, Показатель, Значение, СтраницаДанные = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если СтраницаДанные = Неопределено Тогда
		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
			СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
			Если ТипЗнч(СтрТаблицаСтраницы.Данные) <> Тип("Структура") Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
			КонецЕсли;

			СтрТаблицаСтраницы.Данные.Вставить(Показатель, Значение);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Сохраним данные в переданную структуру и покажем, если лист активный.
	// Вставляе данные.
	СтраницаДанные.Данные.Вставить(Показатель, Значение);

	// Если рассчитывается активный лист, то необходимо рассчитанное значение отобразить в табличном поле.
	Если СтраницаДанные.АктивнаяСтраница Тогда
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области[Показатель].Значение = Значение;
	КонецЕсли;

КонецПроцедуры // ЗаписатьПоказательВСтруктуру

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Получаем сумму акциза и сумму вычета.
		СуммаАкциза = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000230022008.Значение);
		СуммаВычета = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000230023008.Значение);
        // начиная с декабря 2009 и далее оплата производится до 25 числа (яч 040 равна 0 и не расчитывается)		
		Если (Год(мДатаКонцаПериодаОтчета) = 2009 И Месяц(мДатаКонцаПериодаОтчета) = 12) ИЛИ 
			Год(мДатаКонцаПериодаОтчета) > 2009 Тогда
			
			П000010003000 = СуммаАкциза;
            ЗакраситьБелым();
		
			
		Иначе 			  
			П000010003000 = ОкруглитьЧислоПоФормату(СуммаАкциза / 2);  
			П000010004000 = СуммаАкциза - П000010003000;    
				  
		КонецЕсли;
	     
		П000010005000 = СуммаВычета;

		мСуммаНалога25Число1     = П000010003000;
		мСуммаНалога15Число1     = П000010004000;
		мСуммаНалогаКУменьшению1 = П000010005000;

		ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		// Строка 110, графа 6 и 7.
		мРаздел2.Области.П000220011006.Значение = мРаздел2.Области.П000220012006.Значение + мРаздел2.Области.П000220013006.Значение;
		// мРаздел2.Области.П000220011007.Значение = мРаздел2.Области.П000220012007.Значение + мРаздел2.Области.П000220013007.Значение;

		// Строка 140, графа 6 и 7.
		мРаздел2.Области.П000220014006.Значение = мРаздел2.Области.П000220015006.Значение + мРаздел2.Области.П000220016006.Значение;
		// мРаздел2.Области.П000220014007.Значение = мРаздел2.Области.П000220015007.Значение + мРаздел2.Области.П000220016007.Значение;

		// Строка 170, графа 6 и 7.
		мРаздел2.Области.П000220017006.Значение = мРаздел2.Области.П000220018006.Значение + мРаздел2.Области.П000220019006.Значение;
		// мРаздел2.Области.П000220017007.Значение = мРаздел2.Области.П000220018007.Значение + мРаздел2.Области.П000220019007.Значение;

		// Сумма акциза по строкам 110 – 190 определяется в графе 8 как произведение налоговой базы (графа 6) на ставку акциза (графа 7).
		мРаздел2.Области.П000220011008.Значение = мРаздел2.Области.П000220011006.Значение * мРаздел2.Области.П000220011007.Значение;
		мРаздел2.Области.П000220012008.Значение = мРаздел2.Области.П000220012006.Значение * мРаздел2.Области.П000220012007.Значение;
		мРаздел2.Области.П000220013008.Значение = мРаздел2.Области.П000220013006.Значение * мРаздел2.Области.П000220013007.Значение;
		мРаздел2.Области.П000220014008.Значение = мРаздел2.Области.П000220014006.Значение * мРаздел2.Области.П000220014007.Значение;
		мРаздел2.Области.П000220015008.Значение = мРаздел2.Области.П000220015006.Значение * мРаздел2.Области.П000220015007.Значение;
		мРаздел2.Области.П000220016008.Значение = мРаздел2.Области.П000220016006.Значение * мРаздел2.Области.П000220016007.Значение;
		мРаздел2.Области.П000220017008.Значение = мРаздел2.Области.П000220017006.Значение * мРаздел2.Области.П000220017007.Значение;
		мРаздел2.Области.П000220018008.Значение = мРаздел2.Области.П000220018006.Значение * мРаздел2.Области.П000220018007.Значение;
		мРаздел2.Области.П000220019008.Значение = мРаздел2.Области.П000220019006.Значение * мРаздел2.Области.П000220019007.Значение;

		// Строка 010, графа 9.
		мРаздел2.Области.П000210001009.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210002009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210003009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210004009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210005009.Значение);

		// Строка 060, графа 9.
		мРаздел2.Области.П000210006009.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210007009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210008009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210009009.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000210010009.Значение);

		// Строка 200, графа 8.
		мРаздел2.Области.П000230020008.Значение = мРаздел2.Области.П000210001009.Значение
		                                        + мРаздел2.Области.П000210006009.Значение
		                                        + мРаздел2.Области.П000220011008.Значение
		                                        + мРаздел2.Области.П000220014008.Значение
		                                        + мРаздел2.Области.П000220017008.Значение
		                                        + мРаздел3.Области.П000030013007.Значение; // гр.7, стр. 130, раздела 3.

		мРаздел2.Области.П000230022008.Значение = Макс(мРаздел2.Области.П000230020008.Значение - ОкруглитьЧислоПоФормату(мРаздел2.Области.П000230021008.Значение), 0);
		мРаздел2.Области.П000230023008.Значение = Макс(мРаздел2.Области.П000230021008.Значение - мРаздел2.Области.П000230020008.Значение, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		// Графа 7

		// Строка 020.
		мРаздел3.Области.П000030002007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030002005.Значение
		                                                                * мРаздел3.Области.П000030002006.Значение);

		// Строка 030.
		мРаздел3.Области.П000030003007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030003005.Значение
		                                                                * мРаздел3.Области.П000030003006.Значение);

		// Строка 040.
		мРаздел3.Области.П000030004007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030004005.Значение
		                                                                * мРаздел3.Области.П000030004006.Значение);

		// Строка 051.
		мРаздел3.Области.П000030005107.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005105.Значение
		                                                                * мРаздел3.Области.П000030005106.Значение);

		// Строка 052.
		мРаздел3.Области.П000030005207.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005205.Значение
		                                                                * мРаздел3.Области.П000030005206.Значение);

		// Строка 053.
		мРаздел3.Области.П000030005307.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030005305.Значение
		                                                                * мРаздел3.Области.П000030005306.Значение);

		// Строка 050.
		мРаздел3.Области.П000030005007.Значение = мРаздел3.Области.П000030005107.Значение
		                                        + мРаздел3.Области.П000030005207.Значение
		                                        + мРаздел3.Области.П000030005307.Значение;

		// Строка 061.
		мРаздел3.Области.П000030006107.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006105.Значение
		                                                                * мРаздел3.Области.П000030006106.Значение);

		// Строка 062.
		мРаздел3.Области.П000030006207.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006205.Значение
		                                                                * мРаздел3.Области.П000030006206.Значение);

		// Строка 063.
		мРаздел3.Области.П000030006307.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030006305.Значение
		                                                                * мРаздел3.Области.П000030006306.Значение);

		// Строка 060.
		мРаздел3.Области.П000030006007.Значение = мРаздел3.Области.П000030006107.Значение
		                                        + мРаздел3.Области.П000030006207.Значение
		                                        + мРаздел3.Области.П000030006307.Значение;

		// Строка 080.
		мРаздел3.Области.П000030008007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030008005.Значение
		                                                                * мРаздел3.Области.П000030008006.Значение);

		// Строка 090.
		мРаздел3.Области.П000030009007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030009005.Значение
		                                                                * мРаздел3.Области.П000030009006.Значение);

		// Строка 100.
		мРаздел3.Области.П000030010007.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030010005.Значение
		                                                                * мРаздел3.Области.П000030010006.Значение);

		// Строка 111.
		мРаздел3.Области.П000030011107.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030011105.Значение
		                                                                * мРаздел3.Области.П000030011106.Значение);

		// Строка 112.
		мРаздел3.Области.П000030011207.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030011205.Значение
		                                                                * мРаздел3.Области.П000030011206.Значение);

		// Строка 113.
		мРаздел3.Области.П000030011307.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030011305.Значение
		                                                                * мРаздел3.Области.П000030011306.Значение);

		// Строка 110.
		мРаздел3.Области.П000030011007.Значение = мРаздел3.Области.П000030011107.Значение
		                                        + мРаздел3.Области.П000030011207.Значение
		                                        + мРаздел3.Области.П000030011307.Значение;

		// Строка 121.
		мРаздел3.Области.П000030012107.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012105.Значение
		                                                                * мРаздел3.Области.П000030012106.Значение);

		// Строка 122.
		мРаздел3.Области.П000030012207.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012205.Значение
		                                                                * мРаздел3.Области.П000030012206.Значение);

		// Строка 123.
		мРаздел3.Области.П000030012307.Значение = ОкруглитьЧислоПоФормату(мРаздел3.Области.П000030012305.Значение
		                                                                * мРаздел3.Области.П000030012306.Значение);

		// Строка 120.
		мРаздел3.Области.П000030012007.Значение = мРаздел3.Области.П000030012107.Значение
		                                        + мРаздел3.Области.П000030012207.Значение
		                                        + мРаздел3.Области.П000030012307.Значение;

		// Строка 070.
		мРаздел3.Области.П000030007007.Значение = мРаздел3.Области.П000030008007.Значение
		                                        + мРаздел3.Области.П000030009007.Значение
		                                        + мРаздел3.Области.П000030010007.Значение
		                                        + мРаздел3.Области.П000030011007.Значение
		                                        + мРаздел3.Области.П000030012007.Значение;
		                                        //+ мРаздел3.Области.П000030013007.Значение;

		// Строка 010.
		мРаздел3.Области.П000030001007.Значение = мРаздел3.Области.П000030002007.Значение
		                                        + мРаздел3.Области.П000030003007.Значение
		                                        + мРаздел3.Области.П000030004007.Значение
		                                        + мРаздел3.Области.П000030005007.Значение
		                                        + мРаздел3.Области.П000030006007.Значение;

		// Строка 130.
		мРаздел3.Области.П000030013007.Значение = мРаздел3.Области.П000030001007.Значение
		                                        + мРаздел3.Области.П000030007007.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда

		// Строка 110.
		мРаздел4.Области.П000040011005.Значение = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040001005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040002005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040003005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040004005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040005005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040006005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040007005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040008005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040009005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040010005.Значение);

		// Строка 220.
		мРаздел4.Области.П000040022005.Значение = ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040012005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040013005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040014005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040015005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040016005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040017005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040018005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040019005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040020005.Значение)
		                                        + ОкруглитьЧислоПоФормату(мРаздел4.Области.П000040021005.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда

		мПриложение1.Области.П000510013005.Значение = мПриложение1.Области.П000510005005.Значение
		                                            + мПриложение1.Области.П000510006005.Значение
		                                            + мПриложение1.Области.П000510007005.Значение
		                                            + мПриложение1.Области.П000510008005.Значение
		                                            + мПриложение1.Области.П000510009005.Значение
		                                            + мПриложение1.Области.П000510010005.Значение
		                                            + мПриложение1.Области.П000510011005.Значение
		                                            + мПриложение1.Области.П000510012005.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда

		ТаблРаздела = мСтруктураМногострочныхРазделов[мИдГруппы1];
		ТаблРазделаКоличество = ТаблРаздела.Количество();
		ОбщКолонка7 = 0;
		ОбщКолонка8 = 0;
		ОбщКолонка11 = 0;

		ОбщКолонка13 = 0;
		ОбщКолонка14 = 0;

		Для Инд = 1 По ТаблРазделаКоличество Цикл
			СтрИнд = Формат(Инд, "ЧГ=0");

			// Колонка 7.
			Колонка7 = Окр(ТаблРаздела[Инд - 1].П000520003005 * ТаблРаздела[Инд - 1].П000520003006 / 1000, 3);
			мПриложение2.Области["П000520003007_" + СтрИнд].Значение = Колонка7;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы1, СтрИнд, "П000520003007", Колонка7);
			ОбщКолонка7 = ОбщКолонка7 + Колонка7;
			ЗаписатьПоказательВСтруктуру("Приложение2", "П000520003007_" + СтрИнд, Колонка7);

			// Колонка 8.
			Колонка8 = Окр(ТаблРаздела[Инд - 1].П000520003004 * ТаблРаздела[Инд - 1].П000520003006, 2);
			мПриложение2.Области["П000520003008_" + СтрИнд].Значение = Колонка8;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы1, СтрИнд, "П000520003008", Колонка8);
			ОбщКолонка8 = ОбщКолонка8 + Колонка8;
			ЗаписатьПоказательВСтруктуру("Приложение2", "П000520003008_" + СтрИнд, Колонка8);

			// Колонка 11.
			Колонка11 = ТаблРаздела[Инд - 1].П000520003009 + ТаблРаздела[Инд - 1].П000520003010;
			мПриложение2.Области["П000520003011_" + СтрИнд].Значение = Колонка11;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы1, СтрИнд, "П000520003011", Колонка11);
			ОбщКолонка11 = ОбщКолонка11 + Колонка11;
			ЗаписатьПоказательВСтруктуру("Приложение2", "П000520003011_" + СтрИнд, Колонка11);

			ОбщКолонка13 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000520003013) + ОбщКолонка13;
			ОбщКолонка14 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000520003014) + ОбщКолонка14;

		КонецЦикла;

		мПриложение2.Области.П000520004007.Значение = ОбщКолонка7;
		мПриложение2.Области.П000520004008.Значение = ОбщКолонка8;
		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004007", ОбщКолонка7);
		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004008", ОбщКолонка8);

		мПриложение2.Области.П000520004013.Значение = ОбщКолонка13;
		мПриложение2.Области.П000520004014.Значение = ОбщКолонка14;

		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004013", ОбщКолонка13);
		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004014", ОбщКолонка14);

		// Строка 041, колонка 5.
		мПриложение2.Области.П000520004105.Значение = мПриложение2.Области.П000520005005.Значение
		                                            + мПриложение2.Области.П000520006005.Значение
		                                            + мПриложение2.Области.П000520007005.Значение
		                                            + мПриложение2.Области.П000520008005.Значение
		                                            + мПриложение2.Области.П000520009005.Значение
		                                            + мПриложение2.Области.П000520010005.Значение
		                                            + мПриложение2.Области.П000520011005.Значение
		                                            + мПриложение2.Области.П000520012005.Значение;
		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004105", мПриложение2.Области.П000520004105.Значение);

		// Строка 041, колонка 6.
		мПриложение2.Области.П000520004106.Значение = мПриложение2.Области.П000520005006.Значение
		                                            + мПриложение2.Области.П000520006006.Значение
		                                            + мПриложение2.Области.П000520007006.Значение
		                                            + мПриложение2.Области.П000520008006.Значение
		                                            + мПриложение2.Области.П000520009006.Значение
		                                            + мПриложение2.Области.П000520010006.Значение
		                                            + мПриложение2.Области.П000520011006.Значение
		                                            + мПриложение2.Области.П000520012006.Значение;
		ЗаписатьПоказательВСтруктуру("Приложение2", "П000520004106", мПриложение2.Области.П000520004106.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда

		ТаблРаздела = мСтруктураМногострочныхРазделов[мИдГруппы2];
		ТаблРазделаКоличество = ТаблРаздела.Количество();
		ОбщКолонка7 = 0;
		ОбщКолонка8 = 0;
		ОбщКолонка11 = 0;

		ОбщКолонка13 = 0;
		ОбщКолонка14 = 0;

		Для Инд = 1 По ТаблРазделаКоличество Цикл
			СтрИнд = Формат(Инд, "ЧГ=0");

			// Колонка 7.
			Колонка7 = Окр(ТаблРаздела[Инд - 1].П000530003005 * ТаблРаздела[Инд - 1].П000530003006 / 1000, 3);
			мПриложение3.Области["П000530003007_" + СтрИнд].Значение = Колонка7;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы2, СтрИнд, "П000530003007", Колонка7);
			ОбщКолонка7 = ОбщКолонка7 + Колонка7;
			ЗаписатьПоказательВСтруктуру("Приложение3", "П000530003007_" + СтрИнд, Колонка7);

			// Колонка 8.
			Колонка8 = Окр(ТаблРаздела[Инд - 1].П000530003004 * ТаблРаздела[Инд - 1].П000530003006, 2);
			мПриложение3.Области["П000530003008_" + СтрИнд].Значение = Колонка8;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы2, СтрИнд, "П000530003008", Колонка8);
			ОбщКолонка8 = ОбщКолонка8 + Колонка8;
			ЗаписатьПоказательВСтруктуру("Приложение3", "П000530003008_" + СтрИнд, Колонка8);

			// Колонка 11.
			Колонка11 = ТаблРаздела[Инд - 1].П000530003009 + ТаблРаздела[Инд - 1].П000530003010;
			мПриложение3.Области["П000530003011_" + СтрИнд].Значение = Колонка11;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы2, СтрИнд, "П000530003011", Колонка11);
			ОбщКолонка11 = ОбщКолонка11 + Колонка11;
			ЗаписатьПоказательВСтруктуру("Приложение3", "П000530003011_" + СтрИнд, Колонка11);

			ОбщКолонка13 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000530003013) + ОбщКолонка13;
			ОбщКолонка14 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000530003014) + ОбщКолонка14;
		КонецЦикла;

		мПриложение3.Области.П000530004007.Значение = ОбщКолонка7;
		мПриложение3.Области.П000530004008.Значение = ОбщКолонка8;
		ЗаписатьПоказательВСтруктуру("Приложение3", "П000530004007", ОбщКолонка7);
		ЗаписатьПоказательВСтруктуру("Приложение3", "П000530004008", ОбщКолонка8);

		мПриложение3.Области.П000530004013.Значение = ОбщКолонка13;
		мПриложение3.Области.П000530004014.Значение = ОбщКолонка14;
		ЗаписатьПоказательВСтруктуру("Приложение3", "П000530004013", ОбщКолонка13);
		ЗаписатьПоказательВСтруктуру("Приложение3", "П000530004014", ОбщКолонка14);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда

		// Строка 010.
		мПриложение4.Области.П000540001005.Значение = мПриложение4.Области.П000540001006.Значение
		                                            + мПриложение4.Области.П000540001007.Значение;

		// Строка 020.
		мПриложение4.Области.П000540002005.Значение = мПриложение4.Области.П000540002006.Значение
		                                            + мПриложение4.Области.П000540002007.Значение;

		// Строка 030.
		мПриложение4.Области.П000540003005.Значение = мПриложение4.Области.П000540003006.Значение
		                                            + мПриложение4.Области.П000540003007.Значение;

		// Строка 040.
		мПриложение4.Области.П000540004005.Значение = мПриложение4.Области.П000540004006.Значение
		                                            + мПриложение4.Области.П000540004007.Значение;

		// Строка 050.
		мПриложение4.Области.П000540005005.Значение = мПриложение4.Области.П000540005006.Значение
		                                            + мПриложение4.Области.П000540005007.Значение;

		// Строка 060.
		мПриложение4.Области.П000540006005.Значение = мПриложение4.Области.П000540006006.Значение
		                                            + мПриложение4.Области.П000540006007.Значение;

		// Строка 070.
		мПриложение4.Области.П000540007005.Значение = мПриложение4.Области.П000540007006.Значение
		                                            + мПриложение4.Области.П000540007007.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда

		ТаблРаздела = мСтруктураМногострочныхРазделов[мИдГруппы3];
		ТаблРазделаКоличество = ТаблРаздела.Количество();
		ОбщКолонка7 = 0;
		ОбщКолонка8 = 0;
		ОбщКолонка11 = 0;

		ОбщКолонка13 = 0;
		ОбщКолонка14 = 0;

		Для Инд = 1 По ТаблРазделаКоличество Цикл
			СтрИнд = Формат(Инд, "ЧГ=0");

			// Колонка 7.
			Колонка7 = Окр(ТаблРаздела[Инд - 1].П000550003005 * ТаблРаздела[Инд - 1].П000550003006 / 1000, 3);
			мПриложение5.Области["П000550003007_" + СтрИнд].Значение = Колонка7;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы3, СтрИнд, "П000550003007", Колонка7);
			ОбщКолонка7 = ОбщКолонка7 + Колонка7;

			// Колонка 8.
			Колонка8 = Окр(ТаблРаздела[Инд - 1].П000550003004 * ТаблРаздела[Инд - 1].П000550003006, 2);
			мПриложение5.Области["П000550003008_" + СтрИнд].Значение = Колонка8;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы3, СтрИнд, "П000550003008", Колонка8);
			ОбщКолонка8 = ОбщКолонка8 + Колонка8;

			// Колонка 11.
			Колонка11 = ТаблРаздела[Инд - 1].П000550003009 + ТаблРаздела[Инд - 1].П000550003010;
			мПриложение5.Области["П000550003011_" + СтрИнд].Значение = Колонка11;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы3, СтрИнд, "П000550003011", Колонка11);
			ОбщКолонка11 = ОбщКолонка11 + Колонка11;

			ОбщКолонка13 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000550003013) + ОбщКолонка13;
			ОбщКолонка14 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000550003014) + ОбщКолонка14;
		КонецЦикла;

		// На момент составления формы данные показатели в форме отчета и в формате выгрузке отсутствовали.
		// В составе показателей данных показателей нет. Но они рассчитывются (закомментировано).

		//мПриложение5.Области.П000550004007.Значение = ОбщКолонка7;
		//мПриложение5.Области.П000550004008.Значение = ОбщКолонка8;

		//мПриложение5.Области.П000550004013.Значение = ОбщКолонка13;
		//мПриложение5.Области.П000550004014.Значение = ОбщКолонка14;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда

		ТаблРаздела = мСтруктураМногострочныхРазделов[мИдГруппы4];
		ТаблРазделаКоличество = ТаблРаздела.Количество();
		ОбщКолонка7 = 0;
		ОбщКолонка8 = 0;
		ОбщКолонка11 = 0;

		ОбщКолонка13 = 0;
		ОбщКолонка14 = 0;

		Для Инд = 1 По ТаблРазделаКоличество Цикл
			СтрИнд = Формат(Инд, "ЧГ=0");

			// Колонка 7.
			Колонка7 = Окр(ТаблРаздела[Инд - 1].П000560003005 * ТаблРаздела[Инд - 1].П000560003006 / 1000, 3);
			мПриложение6.Области["П000560003007_" + СтрИнд].Значение = Колонка7;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы4, СтрИнд, "П000560003007", Колонка7);
			ОбщКолонка7 = ОбщКолонка7 + Колонка7;

			// Колонка 8.
			Колонка8 = Окр(ТаблРаздела[Инд - 1].П000560003004 * ТаблРаздела[Инд - 1].П000560003006, 2);
			мПриложение6.Области["П000560003008_" + СтрИнд].Значение = Колонка8;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы4, СтрИнд, "П000560003008", Колонка8);
			ОбщКолонка8 = ОбщКолонка8 + Колонка8;

			// Колонка 11.
			Колонка11 = ТаблРаздела[Инд - 1].П000560003009 + ТаблРаздела[Инд - 1].П000560003010;
			мПриложение6.Области["П000560003011_" + СтрИнд].Значение = Колонка11;
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, мИдГруппы4, СтрИнд, "П000560003011", Колонка11);
			ОбщКолонка11 = ОбщКолонка11 + Колонка11;

			ОбщКолонка13 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000560003013) + ОбщКолонка13;
			ОбщКолонка14 = ОкруглитьЧислоПоФормату(ТаблРаздела[Инд - 1].П000560003014) + ОбщКолонка14;
		КонецЦикла;

		// На момент составления формы данные показатели в форме отчета и в формате выгрузке отсутствовали.
		// В составе показателей данных показателей нет. Но они рассчитываются (закомментировано).

		//мПриложение6.Области.П000560004007.Значение = ОбщКолонка7;
		//мПриложение6.Области.П000560004008.Значение = ОбщКолонка8;

		//мПриложение6.Области.П000560004013.Значение = ОбщКолонка13;
		//мПриложение6.Области.П000560004014.Значение = ОбщКолонка14;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы
		Расчет("Приложение6");
		Расчет("Приложение5");
		Расчет("Приложение4");
		Расчет("Приложение3");
		Расчет("Приложение2");
		Расчет("Приложение1");
		Расчет("Раздел4");
		РасчетРаздела3(Ложь);
		Расчет("Раздел3");
		РасчетРаздела2(Ложь);
		Расчет("Раздел2");
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// ВернутьМаскуДляКолонки
//
Функция ВернутьМаскуДляКолонки(ИмяКолонки) // ВернутьМаскуДляКолонки
	Возврат мМаскиЯчейки.Получить(ИмяКолонки);
КонецФункции // ВернутьМаскуДляКолонки

// НачальныеОперацииСМногострочнымиБлоками
//
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			НомерСтроки = Формат(НСтр, "ЧГ=0");
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + НомерСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;

					МаскаДляКолонки = ВернутьМаскуДляКолонки(ИмяКолонки);
					Если МаскаДляКолонки <> Неопределено Тогда
						ОбластьЯчейки.ЭлементУправления.Маска = МаскаДляКолонки;
					КонецЕсли;

				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками

// УстановитьМаскиВводаДляПолей
//
Процедура УстановитьМаскиВводаДляПолей()

	// Приложение 1, строка 020.
	мПриложение1.Области.П000510002000.ЭлементУправления.Маска = "999";
	// Приложение 1, строка 040.
	мПриложение1.Области.П000510002000.ЭлементУправления.Маска = "999";

	// Приложение 2, строка 020.
	мПриложение2.Области.П000520002000.ЭлементУправления.Маска = "999";

	// Приложение 3, строка 020.
	мПриложение3.Области.П000530002000.ЭлементУправления.Маска = "999";

	// Приложение 5, строка 020.
	мПриложение5.Области.П000550002000.ЭлементУправления.Маска = "999";

	// Приложение 6, строка 020.
	мПриложение6.Области.П000560002000.ЭлементУправления.Маска = "999";

КонецПроцедуры // УстановитьМаскиВводаДляПолей

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	Если мДатаНачалаПериодаОтчета >= '20080101' Тогда
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Текст = "Приложение № 3 к приказу Министерства финансов Российской Федерации от 14.11.2006 г. № 146н (в редакции приказа Минфина России от 20.12.2007 г. № 142н)";
	Иначе
		ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области.Приказ.Текст = "Приложение № 3 к приказу Министерства финансов Российской Федерации от 14.11.2006 г. № 146н";
	КонецЕсли;
	
	мБезОткрытияФормы = БезОткрытияФормы;
	мРежимПечати = Ложь;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1     = ЭлементыФормы.ПолеТабличногоДокументаРаздел1; 
	мРаздел2     = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3     = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4     = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	мПриложение1 = ЭлементыФормы.ПолеТабличногоДокументаПриложение1;
	мПриложение2 = ЭлементыФормы.ПолеТабличногоДокументаПриложение2;
	мПриложение3 = ЭлементыФормы.ПолеТабличногоДокументаПриложение3;
	мПриложение4 = ЭлементыФормы.ПолеТабличногоДокументаПриложение4;
	мПриложение5 = ЭлементыФормы.ПолеТабличногоДокументаПриложение5;
	мПриложение6 = ЭлементыФормы.ПолеТабличногоДокументаПриложение6;

	Если НЕ мБезОткрытияФормы Тогда
		УстановитьМаскиВводаДляПолей();
	КонецЕсли;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мАвтоВыборКодов = Ложь;
	мИсключитьЗапускРасчета = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	Если НЕ мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		ЗагрузитьПоказателиИзМакета("КБК2005");
		ЗагрузитьПоказателиИзМакета("ТабачныеИзделияКодыТоваров");
		ЗагрузитьПоказателиИзМакета("ТабачныеИзделияЕдИзмерения");
		ЗагрузитьПоказателиИзМакета("Только450и460");
		ЗагрузитьПоказателиИзМакета("Кроме450и460");
	КонецЕсли;

	// Установим маски на ввод только чисел.
	РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

	Если мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если мСкопированаФорма <> Неопределено Тогда

			Если НЕ БезОткрытияФормы Тогда
				// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
				НачальныеОперацииСМногострочнымиБлоками();
			КонецЕсли;

			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Если в таблице КБК только одно(два) значение кода, то установим его в раздел 1.
			Если мКБК2005.Количество() = 2 Тогда
				мКБКРаздел1 = мКБК2005[1].Код;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБК1_", 20, мКБКРаздел1);
			КонецЕсли;
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мДеревоВыбранныхСтраниц  = мДеревоСтраницОтчета.Скопировать();
			мТитульный.Области.ВидДок.Значение = "1";
			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
		КонецЕсли;

	Иначе
		Если НЕ БезОткрытияФормы Тогда
			// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		Если НазваниеСтраницы = "Титульный"Тогда
			Продолжить;
		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;
		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
	КонецЦикла;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если (Год(мДатаКонцаПериодаОтчета) = 2009 И Месяц(мДатаКонцаПериодаОтчета) = 12) ИЛИ 
		Год(мДатаКонцаПериодаОтчета) > 2009 Тогда
		ЗакраситьБелым();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаПриложение4Выбор
//
Процедура ПолеТабличногоДокументаПриложение4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаПриложение4Выбор

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");
КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел3");
КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел4");
КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти

// ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение1");
КонецПроцедуры // ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти

// ПолеТабличногоДокументаПриложение4ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение4ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение4");
КонецПроцедуры // ПолеТабличногоДокументаПриложение4ПриАктивизацииОбласти

// ПолеТабличногоДокументаПриложение6ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение6ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение6");
КонецПроцедуры // ПолеТабличногоДокументаПриложение6ПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуПриложение6Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложение6Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение6");
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложение6Нажатие

// КнопкаУдалитьДопСтраницуПриложение6Нажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложение6Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение6");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение6");
КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложение6Нажатие

// КнопкаДобавитьДопСтраницуПриложение6Нажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложение6Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение6");
	ВставитьДополнительнуюСтраницу("Приложение6");
КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложение6Нажатие

// КнопкаСледующаяСтраницаПриложение6Нажатие
//
Процедура КнопкаСледующаяСтраницаПриложение6Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение6");
КонецПроцедуры // КнопкаСледующаяСтраницаПриложение6Нажатие

// КнопкаПредыдущаяСтраницаПриложение6Нажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложение6Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение6");
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение6Нажатие

// КнопкаУдалитьДопСтрокиПриложение6Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение6Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Приложение6");
	УстановитьКНДВПриложениях();
КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение6Нажатие

// КнопкаДобавитьДопСтрокиПриложение6Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение6Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	КолВоСтрок = мСтруктураМногострочныхРазделов[мИдГруппы4].Количество();
	Если КолВоСтрок <= 7 Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение6Нажатие

// ПолеТабличногоДокументаПриложение6Выбор
//
Процедура ПолеТабличногоДокументаПриложение6Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	// Строка 010 и 020.
	Если (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000560001000") Или (ОбластьИмя = "П000560002000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000560001000", "Название", "Код");

		НачЗначение = Область.Значение;

		НайденнаяСтрока = мТолько450и460.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТолько450и460.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мТолько450и460.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = Результат.Получить(1);
			Значение2 = Результат.Получить(0);
			Если ПустаяСтрока(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение6.Области.П000560001000.Значение = Значение1;
			мПриложение6.Области.П000560002000.Значение = Значение2;
			Модифицированность = Истина;

			РасчетРаздела3(Ложь); // Рассчитываем раздел 3, в зависимости от приложения 5.
			Расчет("Раздел3");
			РасчетРаздела2(Ложь); // Т.к. мог изменится раздел 3, пересчитываем раздел 2 и 1.
			Расчет("Раздел2");
			Расчет("Раздел1");

		Конецесли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение3Выбор

// ПолеТабличногоДокументаПриложение5ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение5ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение5");
КонецПроцедуры // ПолеТабличногоДокументаПриложение5ПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуПриложение5Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложение5Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение5");
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложение5Нажатие

// КнопкаУдалитьДопСтраницуПриложение5Нажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложение5Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение5");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение5");
КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложение5Нажатие

// КнопкаДобавитьДопСтраницуПриложение5Нажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложение5Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение5");
	ВставитьДополнительнуюСтраницу("Приложение5");
КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложение5Нажатие

// КнопкаСледующаяСтраницаПриложение5Нажатие
//
Процедура КнопкаСледующаяСтраницаПриложение5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение5");
КонецПроцедуры // КнопкаСледующаяСтраницаПриложение5Нажатие

// КнопкаПредыдущаяСтраницаПриложение5Нажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложение5Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение5");
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение5Нажатие

// КнопкаУдалитьДопСтрокиПриложение5Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение5Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Приложение5");
	УстановитьКНДВПриложениях();
КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение5Нажатие

// КнопкаДобавитьДопСтрокиПриложение5Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение5Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	КолВоСтрок = мСтруктураМногострочныхРазделов[мИдГруппы3].Количество();
	Если КолВоСтрок <= 7 Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение5Нажатие

// ПолеТабличногоДокументаПриложение5Выбор
//
Процедура ПолеТабличногоДокументаПриложение5Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010 и 020.
	Если (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000550001000") Или (ОбластьИмя = "П000550002000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000550001000", "Название", "Код");

		НачЗначение = Область.Значение;

		НайденнаяСтрока = мТолько450и460.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТолько450и460.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мТолько450и460.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = Результат.Получить(1);
			Значение2 = Результат.Получить(0);
			Если ПустаяСтрока(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение5.Области.П000550001000.Значение = Значение1;
			мПриложение5.Области.П000550002000.Значение = Значение2;
			Модифицированность = Истина;

			РасчетРаздела3(Ложь); // Рассчитываем раздел 3, в зависимости от приложения 5.
			Расчет("Раздел3");
			РасчетРаздела2(Ложь); // Т.к. мог изменится раздел 3, пересчитываем раздел 2 и 1.
			Расчет("Раздел2");
			Расчет("Раздел1");

		Конецесли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение5Выбор

// ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение2");
КонецПроцедуры // ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуПриложение2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложение2Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение2");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложение2Нажатие

// КнопкаУдалитьДопСтраницуПриложение2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложение2Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение2");
	мИсключитьЗапускРасчета = Ложь;
	// Пересчитываем раздел 2, по приложению 2
	РасчетРаздела2(Ложь);
	Расчет("Раздел2"); // Пересчитаем итоги второго раздела.
	Расчет("Раздел1"); // Пересчитаем итоги по разделу 1.

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложение2Нажатие

// КнопкаДобавитьДопСтраницуПриложение2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложение2Нажатие(Элемент)

	мИсключитьЗапускРасчета = Истина;
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение2");
	ВставитьДополнительнуюСтраницу("Приложение2");
	мИсключитьЗапускРасчета = Ложь;
	Расчет("Приложение2"); // Очистим не очищенные показатели.
КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложение2Нажатие

// КнопкаСледующаяСтраницаПриложение1Нажатие
//
Процедура КнопкаСледующаяСтраницаПриложение1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение1");
КонецПроцедуры // КнопкаСледующаяСтраницаПриложение2Нажатие

// КнопкаСледующаяСтраницаПриложение2Нажатие
//
Процедура КнопкаСледующаяСтраницаПриложение2Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение2");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаСледующаяСтраницаПриложение2Нажатие

// КнопкаПредыдущаяСтраницаПриложение1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложение1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение1");
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение2Нажатие

// КнопкаПредыдущаяСтраницаПриложение2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложение2Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение2");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение2Нажатие

// КнопкаУдалитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение2Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Приложение2");
	УстановитьКНДВПриложениях();
КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение2Нажатие

// КнопкаДобавитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение2Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	КолВоСтрок = мСтруктураМногострочныхРазделов[мИдГруппы1].Количество();
	Если КолВоСтрок <= 7 Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение2Нажатие

// ПолеТабличногоДокументаПриложение3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение3ПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение3");
КонецПроцедуры // ПолеТабличногоДокументаПриложение3ПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуПриложение3Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложение3Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение3");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложение3Нажатие

// КнопкаУдалитьДопСтраницуПриложение3Нажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложение3Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение3");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Приложение3");
	мИсключитьЗапускРасчета = Ложь;
	// Пересчитываем раздел 2, по приложению 3
	РасчетРаздела2(Ложь); // Только на основании Приложения 3.
	Расчет("Раздел2"); // Пересчитаем итоги второго раздела.
	Расчет("Раздел1"); // Пересчитаем итоги по разделу 1.

КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложение3Нажатие

// КнопкаДобавитьДопСтраницуПриложение3Нажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложение3Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение3");
	ВставитьДополнительнуюСтраницу("Приложение3");
	мИсключитьЗапускРасчета = Ложь;
	Расчет("Приложение3"); // Очистим не очищенные показатели.
КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложение3Нажатие

// КнопкаСледующаяСтраницаПриложение3Нажатие
//
Процедура КнопкаСледующаяСтраницаПриложение3Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(1, "Приложение3");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаСледующаяСтраницаПриложение3Нажатие

// КнопкаПредыдущаяСтраницаПриложение3Нажатие
//
Процедура КнопкаПредыдущаяСтраницаПриложение3Нажатие(Элемент)
	мИсключитьЗапускРасчета = Истина;
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Приложение3");
	мИсключитьЗапускРасчета = Ложь;
КонецПроцедуры // КнопкаПредыдущаяСтраницаПриложение3Нажатие

// КнопкаУдалитьДопСтрокиПриложение3Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение3Нажатие(Элемент)
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Приложение3");
	УстановитьКНДВПриложениях();
КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение3Нажатие

// КнопкаДобавитьДопСтрокиПриложение3Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение3Нажатие(Элемент)
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	КолВоСтрок = мСтруктураМногострочныхРазделов[мИдГруппы2].Количество();
	Если КолВоСтрок <= 7 Тогда
		УстановитьКНДВПриложениях();
	КонецЕсли;
КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение3Нажатие

// ПолеТабличногоДокументаТитульныйОргУпПриИзменении
//
Процедура ПолеТабличногоДокументаТитульныйОргУпПриИзменении(Элемент)
	ЗаполнитьДатуВЯчейках();
КонецПроцедуры // ПолеТабличногоДокументаТитульныйОргУпПриИзменении

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

// ПолеТабличногоДокументаРаздел4Выбор
//
Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел4Выбор

// ПолеТабличногоДокументаПриложение2Выбор
//
Процедура ПолеТабличногоДокументаПриложение2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010 и 020.
	Если (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000520001000") Или (ОбластьИмя = "П000520002000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000520001000", "Название", "Код");

		НачЗначение = Область.Значение;

		НайденнаяСтрока = мТолько450и460.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТолько450и460.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мТолько450и460.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = Результат.Получить(1);
			Значение2 = Результат.Получить(0);
			Если ПустаяСтрока(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение2.Области.П000520001000.Значение = Значение1;
			мПриложение2.Области.П000520002000.Значение = Значение2;
			Модифицированность = Истина;

			ЗаписатьПоказательВСтруктуру("Приложение2", "П000520002000", Значение2);

			РасчетРаздела2(Ложь);
			Расчет("Раздел2");
			Расчет("Раздел1");

		Конецесли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение2Выбор

// ПолеТабличногоДокументаПриложение3Выбор
//
Процедура ПолеТабличногоДокументаПриложение3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010 и 020.
	Если (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000530001000") Или (ОбластьИмя = "П000530002000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000530001000", "Название", "Код");

		НачЗначение = Область.Значение;

		НайденнаяСтрока = мТолько450и460.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТолько450и460.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мТолько450и460.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = Результат.Получить(1);
			Значение2 = Результат.Получить(0);
			Если ПустаяСтрока(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение3.Области.П000530001000.Значение = Значение1;
			мПриложение3.Области.П000530002000.Значение = Значение2;
			Модифицированность = Истина;

			ЗаписатьПоказательВСтруктуру("Приложение3", "П000530002000", Значение2);

			РасчетРаздела2(Ложь); // Только на основании Приложения 3.
			Расчет("Раздел2");
			Расчет("Раздел1");

		Конецесли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриложение3Выбор

// КнопкаПерейтиНаСтраницуПриложение1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуПриложение1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Приложение1");
КонецПроцедуры // КнопкаПерейтиНаСтраницуПриложение1Нажатие

// КнопкаДобавитьДопСтраницуПриложение1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуПриложение1Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Приложение1");
	ВставитьДополнительнуюСтраницу("Приложение1");

КонецПроцедуры // КнопкаДобавитьДопСтраницуПриложение1Нажатие

// КнопкаУдалитьДопСтраницуПриложение1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуПриложение1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Приложение1");
	УдалитьДополнительнуюСтраницу("Приложение1");
КонецПроцедуры // КнопкаУдалитьДопСтраницуПриложение1Нажатие

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура ЗакраситьБелым()
	
	Для ид=1 По 15 Цикл 
		Область = мРаздел1.Области["СуммаНалога15Число1_" + ид];
		Область.Значение = "";
		Область.Защита = Истина;	
		Область.ЦветФона = ЦветБелый; 		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "Выбор" поля табличного документа на странице "Раздел 1"
// основной панели формы. Для ячеек, содержащих сумму акциза к уплате (строки по коду 030),
// выдает стандартный диалог для ввода суммы акциза.
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010. КБК.
	Если Найти(ОбластьИмя, "КБК1_") > 0 Тогда
		ТекущееЗначениеКБК = мКБКРаздел1;
		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КБК1_", ТекущееЗначениеКБК, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", мКБК2005, Неопределено,СтандартнаяОбработка, 20);
		Если Рез.ЗначениеВведено Тогда
			мКБКРаздел1 = Рез.Значение;
		КонецЕсли;

	// Строка 020. Код ОКАТО.
	ИначеЕсли Найти(ОбластьИмя, "КодОКАТО") > 0 Тогда
		ПервоначальноеЗначение = мКодОКАТОРаздел1;
		Рез = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "КодОКАТО1_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Рез.ЗначениеВведено Тогда
			мКодОКАТОРаздел1 = Рез.Значение;
		КонецЕсли;

	// Строка 025.
	ИначеЕсли Найти(ОбластьИмя, "ОКВЭДРаздел1_") > 0 Тогда

		НачЗначение = мКодОКВЭД;

		СтандартнаяОбработка = Ложь;
		ВводЗначений = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВводаОКВЭД");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОКВЭД", НачЗначение);
		ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;

		Если ВводЗначений.ОткрытьМодально() Тогда

			Модифицированность = Истина;
			РезультатВвода = ВводЗначений.НачальноеЗначениеВыбора.ОКВЭД;
			Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
				РезультатВвода = "";
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("КодОКВЭД", РезультатВвода) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ОКВЭДРаздел1_", 8, РезультатВвода);
			КонецЕсли;
		КонецЕсли;

	// Строка 030. Сумма.
	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(ОбластьИмя, "СуммаНалога25Число1_") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СуммаНалога25Число1_", мСуммаНалога25Число1, 17, 2, Истина, "Сумма акциза, подлежащая уплате в бюджет (стр. 030)", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаНалога25Число1 = Результат.Значение;
		КонецЕсли;
	// Строка 040. Сумма.
	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(ОбластьИмя, "СуммаНалога15Число1_") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СуммаНалога15Число1_", мСуммаНалога15Число1, 17, 2, Истина, "Сумма акциза, подлежащая уплате в бюджет (стр. 040)", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаНалога15Число1 = Результат.Значение;
		КонецЕсли;
	// Строка 050. Сумма.
	ИначеЕсли (ФлажокОтклАвтоРасчет) И (Найти(ОбластьИмя, "СуммаНалогаКУменьшению1_") > 0) Тогда
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1", "СуммаНалогаКУменьшению1_", мСуммаНалогаКУменьшению1, 17, 2, Истина, "Сумма акциза, начисленная к уменьшению (стр. 050)", "", Неопределено, Неопределено, СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаНалогаКУменьшению1 = Результат.Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор()

// загружает данные из Списков
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005" Тогда
					НовСтрока = мКБК2005.Добавить();
				ИначеЕсли РазделВМакете = "ТабачныеИзделияКодыТоваров" Тогда
					НовСтрока = мТабачныеИзделияКодыТоваров.Добавить();
				ИначеЕсли РазделВМакете = "ТабачныеИзделияЕдИзмерения" Тогда
					НовСтрока = мТабачныеИзделияЕдИзмерения.Добавить();
				ИначеЕсли РазделВМакете = "Только450и460" Тогда
					НовСтрока = мТолько450и460.Добавить();
				ИначеЕсли РазделВМакете = "Кроме450и460" Тогда
					НовСтрока = мКроме450и460.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет("");

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

	Если (Год(мДатаКонцаПериодаОтчета) = 2009 И Месяц(мДатаКонцаПериодаОтчета) = 12) ИЛИ 
			Год(мДатаКонцаПериодаОтчета) > 2009 Тогда
            ЗакраситьБелым();
    КонецЕсли;

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Ложь);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "НаимЮЛПол, ОКАТО, ТелОрганизации, КодНО, КППЮЛ, НаимНО, ТипНП, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИО";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		РегламентированнаяОтчетность.ПроставитьИННКППНаВсехЛистахРегОтчета(ЭтаФорма, НЕ мВпрограммеИзмененаОрганизация);

		ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(Результат.ОКАТО, 11, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО1_", 11, ОКАТО);
		мКодОКАТОРаздел1 = ОКАТО;

		ТипНП = Результат.ТипНП;
		Если ТипНП = 1 Тогда
			// Необходимо анализировать здесь, является ли ЮР лицом или является ПБОЮЛом
			мТитульный.Области.ТипОрг1.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 2 Тогда

			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "V";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 3 Тогда

			мТитульный.Области.ТипОрг3.Значение = "V";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";

		ИначеЕсли ТипНП = 5 Тогда

			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг2.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "V";

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Если мСохраненныйДок = Неопределено Тогда
		Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргИНН = Орг.ИНН;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг);
	
	Если НЕ ЭтоПБОЮЛ Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) И ПустаяСтрока(ОргУП) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	УпПред = ПоказателиТитульный.ОргУп;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20))); 
	ПризнВидаДок = Число(ПоказателиТитульный.ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	ПризнОтчетногоПериода = 1; // представляется ежемесячно
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	ДокПредставляется = 210; // 
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 331;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг) Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Если ДокПредставляется = 220 ИЛИ ДокПредставляется = 331 Тогда
			Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(Орг.ГоловнаяОрганизация.КПП));
			Текст.ДобавитьСтроку("КППОП:" + ОргКПП);
		Иначе
			Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	
	Год_мДатаКонцаПериодаОтчета = Год(мДатаКонцаПериодаОтчета);
	Если Год_мДатаКонцаПериодаОтчета < 2008 Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00002");
		Текст.ДобавитьСтроку("ПериодВерОтч:11.01.2007,01.01.2008");
	ИначеЕсли Год_мДатаКонцаПериодаОтчета < 2010 Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00003");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.01.2008,31.12.2009");
	Иначе
		Текст.ДобавитьСтроку("ВерФОтч:3.00004");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.01.2010,");
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:" + НомерКорректировки);
	Конецесли;
	Текст.ДобавитьСтроку("ПризПериодОтч:" + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:" + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383");
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					ном = ном + 1;
				КонецЦикла;
				~ВыходИзДвойногоЦикла_:
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;
		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦикла__:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							ном = ном + 1;
						КонецЦикла;
						~ВыходИзДвойногоЦиклаВ:
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						ном = ном + 1;
					КонецЦикла;
					~ВыходИзДвойногоЦикла_В:
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Возврат СтатусПроверки <> 1;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Организация = Неопределено Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если (Тек13Симв = "П000210010009" ИЛИ Тек13Симв = "П000220019008") И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			Текст.ВставитьСтроку(ТекИнд + 1, "###");			
		КонецЕсли;
		
		Если Тек13Симв = "П000510001000" ИЛИ Тек13Симв = "П000510003000"
			ИЛИ Тек13Симв = "П000520001000" ИЛИ Тек13Симв = "П000520003002"
			ИЛИ Тек13Симв = "П000530001000" ИЛИ Тек13Симв = "П000530003002"
			ИЛИ Тек13Симв = "П000550001000" ИЛИ Тек13Симв = "П000550003002"
			ИЛИ Тек13Симв = "П000560001000"	ИЛИ Тек13Симв = "П000560003002" Тогда
			
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + 120)));
			
		КонецЕсли;
	КонецЦикла;
	
	ПустойРаздел21 = "
	|П000210001004:460
	|П000210001009:
	|П000210002005:
	|П000210002006:
	|П000210002007:
	|П000210002008:
	|П000210002009:
	|П000210003005:
	|П000210003007:
	|П000210003009:
	|П000210004005:
	|П000210004006:
	|П000210004007:
	|П000210004008:
	|П000210004009:
	|П000210005005:
	|П000210005007:
	|П000210005009:
	|П000210006004:450
	|П000210006009:
	|П000210007005:
	|П000210007006:
	|П000210007007:
	|П000210007008:
	|П000210007009:
	|П000210008005:
	|П000210008007:
	|П000210008009:
	|П000210009005:
	|П000210009006:
	|П000210009007:
	|П000210009008:
	|П000210009009:
	|П000210010005:
	|П000210010007:
	|П000210010009:
	|###";
	
	ПустойРаздел22 = "
	|П000220011004:411
	|П000220011006:
	|П000220011007:
	|П000220011008:
	|П000220012006:
	|П000220012007:
	|П000220012008:
	|П000220013006:
	|П000220013007:
	|П000220013008:
	|П000220014004:430
	|П000220014006:
	|П000220014007:
	|П000220014008:
	|П000220015006:
	|П000220015007:
	|П000220015008:
	|П000220016006:
	|П000220016007:
	|П000220016008:
	|П000220017004:440
	|П000220017006:
	|П000220017007:
	|П000220017008:
	|П000220018006:
	|П000220018007:
	|П000220018008:
	|П000220019006:
	|П000220019007:
	|П000220019008:
	|###";
	
	ТекстВыгрузки = Текст.ПолучитьТекст();
	ДлинаДоЗамены = СтрДлина(ТекстВыгрузки);
	ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ПустойРаздел22, "");
	Если ДлинаДоЗамены = СтрДлина(ТекстВыгрузки) Тогда
		ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ПустойРаздел21, "");
	КонецЕсли;
	Текст.УстановитьТекст(ТекстВыгрузки);
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;
	
	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах() И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей2007Кв1");
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Приложение 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Приложение 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Приложение 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Приложение 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Приложение 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение6";
	СтрокаУровня1.Представление            = "Приложение 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	Перем СтандартнаяОбработка;

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
	Если МногостраничностьЕсть Тогда
		ЗаписатьПоказательВСтруктуру(ИмяТекущейСтраницыПанели, Элемент.ТекущаяОбласть.Имя, Элемент.ТекущаяОбласть.Значение)
	КонецЕсли;

	Если (Найти(ОбластьИмя, "НомСтр") = 1) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		Расчет(ИмяТекущейСтраницыПанели);
		Расчет("Раздел1");
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		Расчет(ИмяТекущейСтраницыПанели);
		Расчет("Раздел2");
		Расчет("Раздел1");
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		Расчет(ИмяТекущейСтраницыПанели);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		Расчет(ИмяТекущейСтраницыПанели);

		РасчетРаздела2(Ложь); // Только по Приложению2
		Расчет("Раздел2");
		Расчет("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
			Если (Найти(ОбластьИмя, "П000520003004") > 0)
			 Или (Найти(ОбластьИмя, "П000520003005") > 0)
			 Или (Найти(ОбластьИмя, "П000520003006") > 0)
			 Или (Найти(ОбластьИмя, "П000520003009") > 0)
			 Или (Найти(ОбластьИмя, "П000520003010") > 0)
			 Или (Найти(ОбластьИмя, "П000520003013") > 0)
			 Или (Найти(ОбластьИмя, "П000520003014") > 0) Тогда
				Расчет(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;
		РасчетРаздела2(Ложь); // Только по Приложению2
		Расчет("Раздел2");
		Расчет("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
			Если (Найти(ОбластьИмя, "П000530003004") > 0)
			 Или (Найти(ОбластьИмя, "П000530003005") > 0)
			 Или (Найти(ОбластьИмя, "П000530003006") > 0)
			 Или (Найти(ОбластьИмя, "П000530003009") > 0)
			 Или (Найти(ОбластьИмя, "П000530003010") > 0)
			 Или (Найти(ОбластьИмя, "П000530003013") > 0)
			 Или (Найти(ОбластьИмя, "П000530003014") > 0) Тогда
				Расчет(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;
		РасчетРаздела2(Ложь); // Только по Приложению3
		Расчет("Раздел2");
		Расчет("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
			Если (Найти(ОбластьИмя, "П000550003004") > 0)
			 Или (Найти(ОбластьИмя, "П000550003005") > 0)
			 Или (Найти(ОбластьИмя, "П000550003006") > 0)
			 Или (Найти(ОбластьИмя, "П000550003009") > 0)
			 Или (Найти(ОбластьИмя, "П000550003010") > 0)
			 Или (Найти(ОбластьИмя, "П000550003013") > 0)
			 Или (Найти(ОбластьИмя, "П000550003014") > 0) Тогда
				Расчет(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;
		РасчетРаздела3(Ложь); // Рассчитываем раздел 3, в зависимости от приложения 5.
		Расчет("Раздел3");
		РасчетРаздела2(Ложь); // Т.к. мог изменится раздел 3, пересчитываем раздел 2 и 1.
		Расчет("Раздел2");
		Расчет("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда
		Группа = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			// Обновим многострочный блок.
			РегламентированнаяОтчетность.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
			Если (Найти(ОбластьИмя, "П000560003004") > 0)
			 Или (Найти(ОбластьИмя, "П000560003005") > 0)
			 Или (Найти(ОбластьИмя, "П000560003006") > 0)
			 Или (Найти(ОбластьИмя, "П000560003009") > 0)
			 Или (Найти(ОбластьИмя, "П000560003010") > 0)
			 Или (Найти(ОбластьИмя, "П000560003013") > 0)
			 Или (Найти(ОбластьИмя, "П000560003014") > 0) Тогда
				Расчет(ИмяТекущейСтраницыПанели);
			КонецЕсли;
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		РасчетРаздела3(Ложь); // Рассчитываем раздел 3, в зависимости от приложения 6.
		Расчет("Раздел3");
		РасчетРаздела2(Ложь); // Т.к. мог изменится раздел 3, пересчитываем раздел 2 и 1.
		Расчет("Раздел2");
		Расчет("Раздел1");

	Иначе
		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;

	ВзаимныеПереходыПозиций(ОбластьИмя);
КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ВзаимныеПереходыПозиций
//
Процедура ВзаимныеПереходыПозиций(ОбластьИмя)

	// Взаимные переходы
	Если (ОбластьИмя = "П000210008007") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210009007", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210008009" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210009005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210009009" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210010005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210010009" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220011006", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000230020008" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230021008", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000210009008") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210010007", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000210010007") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220012007", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000230021008") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230021008", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000230009008") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230010007", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000230021008") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230022008", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000230022008" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230023008", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000230009008") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230023008", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000220019007") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230021008", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030005306") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030006106", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030006007") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030006105", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030006107") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030006205", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012007") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012105", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012107") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012205", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012207") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012305", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012307") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030013007", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030006106") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030006206", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030011306") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012106", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012106") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012206", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012206") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012306", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000030012306") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000030012306", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000040010005") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040012005", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000040011005") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040012005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040012005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040013005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040013005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040014005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040014005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040015005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040015005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040016005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000040016005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000040017005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000510009005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000510010005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000510010005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000510011005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000510011005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000510012005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000520007006" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000520008005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000520008006" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000520009005", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000540006007") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000540007006", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П000540006007") И (ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000540007005", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000540007007" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000540007007", ОбластьИмя);

	КонецЕсли;

КонецПроцедуры // ВзаимныеПереходыПозиций

// РасчетРаздела2
//
// Параметры:
//  ВызываетсяИзЗаполнитьАвто - Истина, подготовка раздела 2 и обновление всех многостраничных разделов, Ложь - как есть.
//  Приложение     - Истина - только по приложению 2, Ложь - только по приложению 3 - Неопределено - Приложение 2 и 3.
//
Процедура РасчетРаздела2(ВызываетсяИзЗаполнитьАвто)
	Если НЕ ВызываетсяИзЗаполнитьАвто Тогда
		Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
			Возврат; // отключен режим АвтоЗаполнения
		КонецЕсли;
	КонецЕсли;

	// Данные для графы 9 берутся не из многострочной части, а из стандартной строки приложения 2 или 3, поэтому их значения сохраним в отдельных переменных.
	СуммаГрафа9Строки020И070 = 0;
	СуммаГрафа9Строки030И080 = 0;
	// Для приложения 3.
	СуммаГрафа9Строки040И090 = 0;
	СуммаГрафа9Строки050И100 = 0;

	СуммаГрафа9Строки020И070460 = 0;
	СуммаГрафа9Строки020И070450 = 0;
	СуммаГрафа9Строки030И080460 = 0;
	СуммаГрафа9Строки030И080450 = 0;

	СуммаГрафа9Строки040И090460 = 0;
	СуммаГрафа9Строки040И090450 = 0;
	СуммаГрафа9Строки050И100460 = 0;
	СуммаГрафа9Строки050И100450 = 0;

	ТблПриложение1 = мСтруктураМногостраничныхРазделов.Приложение1;

	ТблПриложение2 = мСтруктураМногостраничныхРазделов.Приложение2;
	// Посчитаем сумму со всех экз. прил. 2 с нужным кодом акциза. 460, строка 040, колонки 13 и 14
	Для каждого Экз Из ТблПриложение2 Цикл
		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение2", Ложь);
		КонецЕсли;

		Если Экз.Данные.П000520002000 = "460" Тогда
			СуммаГрафа9Строки020И070460 = Экз.Данные.П000520004013 + СуммаГрафа9Строки020И070460;
			СуммаГрафа9Строки030И080460 = Экз.Данные.П000520004014 + СуммаГрафа9Строки030И080460;
		ИначеЕсли Экз.Данные.П000520002000 = "450" Тогда
			СуммаГрафа9Строки020И070450 = Экз.Данные.П000520004013 + СуммаГрафа9Строки020И070450;
			СуммаГрафа9Строки030И080450 = Экз.Данные.П000520004014 + СуммаГрафа9Строки030И080450;
		КонецЕсли;

	КонецЦикла;

	ТблПриложение3 = мСтруктураМногостраничныхРазделов.Приложение3;
	// Посчитаем сумму со всех экз. прил. 3 с нужным кодом акциза. 450, строка 040, колонки 13 и 14
	Для каждого Экз Из ТблПриложение3 Цикл
		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение3", Ложь);
		КонецЕсли;

		Если Экз.Данные.П000530002000 = "450" Тогда
			СуммаГрафа9Строки040И090450 = Экз.Данные.П000530004013 + СуммаГрафа9Строки040И090450;
			СуммаГрафа9Строки050И100450 = Экз.Данные.П000530004014 + СуммаГрафа9Строки050И100450;
		ИначеЕсли Экз.Данные.П000530002000 = "460" Тогда
			СуммаГрафа9Строки040И090460 = Экз.Данные.П000530004013 + СуммаГрафа9Строки040И090460;
			СуммаГрафа9Строки050И100460 = Экз.Данные.П000530004014 + СуммаГрафа9Строки050И100460;
		КонецЕсли;

	КонецЦикла;

	//СуммаГрафа9Строки040И090 = СуммаГрафа9Строки040И090450 + СуммаГрафа9Строки040И090460;
	//СуммаГрафа9Строки050И100 = СуммаГрафа9Строки050И100450 + СуммаГрафа9Строки050И100460;

	ТаблПрил2Свер = Новый ТаблицаЗначений;
	ТаблПрил2Свер.Колонки.Добавить("Код");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа5Строки020И070");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа6Строки020И070");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа9Строки020И070");

	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа5Строки030И080");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа9Строки030И080");

	ТаблПрил3Свер = Новый ТаблицаЗначений;

	ТаблПрил3Свер.Колонки.Добавить("Код");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа5Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа6Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа5Строки050И100");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа9Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа9Строки050И100");

	// Сформируем итоговую таблицу на основании приложения 2
	Для каждого Экз Из ТблПриложение2 Цикл
		// Если код в приложении заполнен, тогда...
		Если НЕ ПустаяСтрока(Экз.Данные.П000520002000) Тогда
			Если Экз.Данные.П000520002000 <> "460" И Экз.Данные.П000520002000 <> "450" Тогда
				Продолжить;
			КонецЕсли;

			Номер = 1;
			НомерСтр = "1";

			// Пока строка с индексом есть ...
			Пока Экз.Данные.Свойство("П000520003013_" + НомерСтр) Цикл

				НовЗап = ТаблПрил2Свер.Добавить();
				НовЗап.Код    = Экз.Данные.П000520002000; // Запишем код.

				// в графу 10 строк 030, 080 раздела 2.1 из приложения № 2 переносится значение показателя графы 14 строки 040.
				// Графа 5,6,9 строки 020 и 070.

				Если (Экз.Данные.П000520002000 = "460" И СуммаГрафа9Строки020И070460 > 0)
				 Или (Экз.Данные.П000520002000 = "450" И СуммаГрафа9Строки020И070450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные["П000520003013_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки020И070 = Экз.Данные["П000520003007_" + НомерСтр]; // Графа 7 приложения 2.
						НовЗап.СуммаГрафа6Строки020И070 = Экз.Данные["П000520003008_" + НомерСтр]; // Графа 8 приложения 2.
					КонецЕсли;
				ИначеЕсли (Экз.Данные.П000520002000 = "460" И СуммаГрафа9Строки020И070460 = 0)
					  Или (Экз.Данные.П000520002000 = "450" И СуммаГрафа9Строки020И070450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки020И070 = 0; // Графа 7 приложения 2.
					НовЗап.СуммаГрафа6Строки020И070 = 0; // Графа 8 приложения 2.
					Если Экз.Данные.П000520002000 = "460" Тогда
						СуммаГрафа9Строки020И070460 = 0;       // Графа 13 приложения 2.
					ИначеЕсли Экз.Данные.П000520002000 = "450" Тогда
						СуммаГрафа9Строки020И070450 = 0;       // Графа 13 приложения 2.
					КонецЕсли;
				КонецЕсли;

				// Строка 020 и 070

				// Графа 5 и 9 строки 030 и 080.
				Если (Экз.Данные.П000520002000 = "460" И СуммаГрафа9Строки030И080460 > 0)
				 Или (Экз.Данные.П000520002000 = "450" И СуммаГрафа9Строки030И080450 > 0) Тогда

					// в графу 5 строк 030, 080 раздела 2.1 из приложения № 2 переносится сумма строк 030 графы 7,
					// в которых значение показателя графы 14 больше нуля;
					Если Экз.Данные["П000520003014_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки030И080 = Экз.Данные["П000520003007_" + НомерСтр];
					КонецЕсли;
				ИначеЕсли (Экз.Данные.П000520002000 = "460" И СуммаГрафа9Строки030И080460 = 0)
					  Или (Экз.Данные.П000520002000 = "450" И СуммаГрафа9Строки030И080450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки030И080 = 0;
					Если Экз.Данные.П000520002000 = "450" Тогда
						СуммаГрафа9Строки030И080450 = 0;
					ИначеЕсли Экз.Данные.П000520002000 = "460" Тогда
						СуммаГрафа9Строки030И080460 = 0;
					КонецЕсли;
				КонецЕсли;

				Номер = Номер + 1;
				НомерСтр = Формат(Номер, "ЧГ=0")
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Сформируем итоговую таблицу на основании приложения 3
	Для каждого Экз Из ТблПриложение3 Цикл
		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение3", Ложь);
		КонецЕсли;

		// Если код в приложении заполнен, тогда...
		Если НЕ ПустаяСтрока(Экз.Данные.П000530002000) Тогда
			Если Экз.Данные.П000530002000 <> "460" И Экз.Данные.П000530002000 <> "450" Тогда
				Продолжить;
			КонецЕсли;

			Номер = 1;
			НомерСтр = "1";

			// Пока строка с индексом есть ...
			Пока Экз.Данные.Свойство("П000530003013_" + НомерСтр) Цикл

				НовЗап = ТаблПрил3Свер.Добавить();
				НовЗап.Код    = Экз.Данные.П000530002000; // Запишем код.

				// в графу 10 строк 030, 080 раздела 2.1 из приложения № 2 переносится значение показателя графы 14 строки 040.
				// Графа 5,6,9 строки 020 и 070.

				// Графа 5,6,9 строки 040 и 090.
				Если (Экз.Данные.П000530002000 = "460" И СуммаГрафа9Строки040И090460 > 0)
				 Или (Экз.Данные.П000530002000 = "450" И СуммаГрафа9Строки040И090450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные["П000530003013_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки040И090 = Экз.Данные["П000530003007_" + НомерСтр]; // Графа 7 приложения 2.
						НовЗап.СуммаГрафа6Строки040И090 = Экз.Данные["П000530003008_" + НомерСтр]; // Графа 8 приложения 2.
					КонецЕсли;
				ИначеЕсли (Экз.Данные.П000530002000 = "460" И СуммаГрафа9Строки040И090460 = 0)
					  Или (Экз.Данные.П000530002000 = "450" И СуммаГрафа9Строки040И090450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки040И090 = 0;
					НовЗап.СуммаГрафа6Строки040И090 = 0;
					Если Экз.Данные.П000530002000 = "450" Тогда
						СуммаГрафа9Строки040И090450 = 0;
					ИначеЕсли Экз.Данные.П000530002000 = "460" Тогда
						СуммаГрафа9Строки040И090460 = 0;
					КонецЕсли;

				КонецЕсли;

				// Строка 050 и 100

				// Графа 5 и 9 строки 050 и 100.
				Если (Экз.Данные.П000530002000 = "460" И СуммаГрафа9Строки050И100460 > 0)
				 Или (Экз.Данные.П000530002000 = "450" И СуммаГрафа9Строки050И100450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные["П000530003014_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки050И100 = Экз.Данные["П000530003007_" + НомерСтр]; // Графа 7 приложения 3.
					КонецЕсли;
				ИначеЕсли (Экз.Данные.П000530002000 = "460" И СуммаГрафа9Строки050И100460 = 0)
					  Или (Экз.Данные.П000530002000 = "450" И СуммаГрафа9Строки050И100450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки050И100 = 0;
					Если Экз.Данные.П000530002000 = "450" Тогда
						СуммаГрафа9Строки050И100450 = 0;
					ИначеЕсли Экз.Данные.П000530002000 = "460" Тогда
						СуммаГрафа9Строки050И100460 = 0;
					КонецЕсли;
				КонецЕсли;

				Номер = Номер + 1;
				НомерСтр = Формат(Номер, "ЧГ=0")
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// 460
	мРаздел2.Области.П000210002005.Значение = 0;
	мРаздел2.Области.П000210002006.Значение = 0;
	мРаздел2.Области.П000210002009.Значение = 0;

	мРаздел2.Области.П000210003005.Значение = 0;
	мРаздел2.Области.П000210003009.Значение = 0;

	мРаздел2.Области.П000210004005.Значение = 0;
	мРаздел2.Области.П000210004006.Значение = 0;
	мРаздел2.Области.П000210004009.Значение = 0;

	мРаздел2.Области.П000210005005.Значение = 0;
	мРаздел2.Области.П000210005009.Значение = 0;

	// 450
	мРаздел2.Области.П000210007005.Значение = 0;
	мРаздел2.Области.П000210007006.Значение = 0;
	мРаздел2.Области.П000210007009.Значение = 0;

	мРаздел2.Области.П000210008005.Значение = 0;
	мРаздел2.Области.П000210008009.Значение = 0;

	мРаздел2.Области.П000210009005.Значение = 0;
	мРаздел2.Области.П000210009006.Значение = 0;
	мРаздел2.Области.П000210009009.Значение = 0;

	мРаздел2.Области.П000210010005.Значение = 0;
	мРаздел2.Области.П000210010009.Значение = 0;

	ТаблПрил2Свер.Свернуть("Код", "СуммаГрафа5Строки020И070, СуммаГрафа6Строки020И070, СуммаГрафа5Строки030И080");
	// В каждой собранной таблице, могут быть данные как по коду 460, так и по коду 450.
	Данные460 = ТаблПрил2Свер.Найти("460", "Код");
	Данные450 = ТаблПрил2Свер.Найти("450", "Код");
	Если Данные460 <> Неопределено Тогда
		// Заполняем строки 020 и 030 по коду 460.
		мРаздел2.Области.П000210002005.Значение = Данные460.СуммаГрафа5Строки020И070;
		мРаздел2.Области.П000210002006.Значение = Данные460.СуммаГрафа6Строки020И070;
		мРаздел2.Области.П000210002009.Значение = СуммаГрафа9Строки020И070460;

		мРаздел2.Области.П000210003005.Значение = Данные460.СуммаГрафа5Строки030И080;
		мРаздел2.Области.П000210003009.Значение = СуммаГрафа9Строки030И080460;
	КонецЕсли;

	Если Данные450 <> Неопределено Тогда
		// Заполняем строки 070 и 080 по коду 450.
		мРаздел2.Области.П000210007005.Значение = Данные450.СуммаГрафа5Строки020И070;
		мРаздел2.Области.П000210007006.Значение = Данные450.СуммаГрафа6Строки020И070;
		мРаздел2.Области.П000210007009.Значение = СуммаГрафа9Строки020И070450;

		мРаздел2.Области.П000210008005.Значение = Данные450.СуммаГрафа5Строки030И080;
		мРаздел2.Области.П000210008009.Значение = СуммаГрафа9Строки030И080450;
	КонецЕсли;

	ТаблПрил3Свер.Свернуть("Код", "СуммаГрафа5Строки040И090, СуммаГрафа6Строки040И090, СуммаГрафа5Строки050И100");
	Данные460 = ТаблПрил3Свер.Найти("460", "Код");
	Данные450 = ТаблПрил3Свер.Найти("450", "Код");
	Если Данные460 <> Неопределено Тогда
		мРаздел2.Области.П000210004005.Значение = Данные460.СуммаГрафа5Строки040И090;
		мРаздел2.Области.П000210004006.Значение = Данные460.СуммаГрафа6Строки040И090;
		мРаздел2.Области.П000210004009.Значение = СуммаГрафа9Строки040И090460;

		мРаздел2.Области.П000210005005.Значение = Данные460.СуммаГрафа5Строки050И100;
		мРаздел2.Области.П000210005009.Значение = СуммаГрафа9Строки050И100460;
	КонецЕсли;

	Если Данные450 <> Неопределено Тогда
		мРаздел2.Области.П000210009005.Значение = Данные450.СуммаГрафа5Строки040И090;
		мРаздел2.Области.П000210009006.Значение = Данные450.СуммаГрафа6Строки040И090;
		мРаздел2.Области.П000210009009.Значение = СуммаГрафа9Строки040И090450;

		мРаздел2.Области.П000210010005.Значение = Данные450.СуммаГрафа5Строки050И100;
		мРаздел2.Области.П000210010009.Значение = СуммаГрафа9Строки050И100450;
	КонецЕсли;

	// Автозаполнение подраздела 2.2 раздела 2, на основании приложения 1.
	// По каждой из строк 120, 150, 180 (показатели «реализовано (передано) на территории Российской Федерации») в графу 6 переносится
	// значение показателя из графы 5 по строке 130 приложения № 1 к декларации, заполненного в отношении соответствующего вида табачных изделий.
	мРаздел2.Области.П000220012006.Значение = 0;
	мРаздел2.Области.П000220015006.Значение = 0;
	мРаздел2.Области.П000220018006.Значение = 0;
	Код411_Строка130 = 0;
	Код430_Строка130 = 0;
	Код440_Строка130 = 0;
	Для каждого Экз Из ТблПриложение1 Цикл

		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение1", Ложь);
		КонецЕсли;

		// Т.к. в процедуре Расчет не сохраняем в структуре рассчитанные значения, если активный лист приложения 1, то данные берем
		// не из структуры, а из текущего листа табличного документа.

		Если Экз.АктивнаяСтраница Тогда
			// Получаем значение с табличного поля.
			П000510013005 = мПриложение1.Области.П000510013005.Значение;
			П000510002000 = мПриложение1.Области.П000510002000.Значение;
		Иначе
			П000510013005 = Экз.Данные.П000510013005;
			П000510002000 = Экз.Данные.П000510002000;
		КонецЕсли;

		Если П000510002000 = "411" Тогда
			Код411_Строка130 = Код411_Строка130 + П000510013005;
		ИначеЕсли П000510002000 = "430" Тогда
			Код430_Строка130 = Код430_Строка130 + П000510013005;
		ИначеЕсли П000510002000 = "440" Тогда
			Код440_Строка130 = Код440_Строка130 + П000510013005;
		КонецЕсли;
	КонецЦикла;

	мРаздел2.Области.П000220012006.Значение = Код411_Строка130;
	мРаздел2.Области.П000220015006.Значение = Код430_Строка130;
	мРаздел2.Области.П000220018006.Значение = Код440_Строка130;

	// Конец автозаполнения раздела 2.2.

КонецПроцедуры // РасчетРаздела2

// РасчетРаздела3
// Процедура рассчитывает раздел 3 на основании приложения 5 и 6 к декларации.
//
// Параметры:
//  ВызываетсяИзЗаполнитьАвто - Истина, подготовка раздела 2 и обновление всех многостраничных разделов, Ложь - как есть.
//
Процедура РасчетРаздела3(ВызываетсяИзЗаполнитьАвто)
	Если НЕ ВызываетсяИзЗаполнитьАвто Тогда
		Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
			Возврат; // отключен режим АвтоЗаполнения
		КонецЕсли;
	КонецЕсли;
	ТблПриложение5 = мСтруктураМногостраничныхРазделов.Приложение5;
	ТблПриложение6 = мСтруктураМногостраничныхРазделов.Приложение6;

	ТаблПрил5 = Новый ТаблицаЗначений;
	ТаблПрил5.Колонки.Добавить("Код");
	ТаблПрил5.Колонки.Добавить("Строка030Графы7_По13Колонке");             // С условием, что в колонке 13 значение больше 0.
	ТаблПрил5.Колонки.Добавить("Строка030Графы8");
	ТаблПрил5.Колонки.Добавить("Строка030Графы7_По14Колонке"); // С условием, что в колонке 14 значение больше 0.

	ТаблПрил6 = Новый ТаблицаЗначений;
	ТаблПрил6.Колонки.Добавить("Код");
	ТаблПрил6.Колонки.Добавить("Строка030Графы7_По13Колонке");             // С условием, что в колонке 13 значение больше 0.
	ТаблПрил6.Колонки.Добавить("Строка030Графы8");
	ТаблПрил6.Колонки.Добавить("Строка030Графы7_По14Колонке"); // С условием, что в колонке 14 значение больше 0.

	// Заполняем таблицу по приложению 5.
	Для каждого Экз Из ТблПриложение5 Цикл
		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение5", Ложь);
		КонецЕсли;
		Если Экз.АктивнаяСтраница Тогда
			Код = мПриложение5.Области.П000550002000.Значение;
			АктивСтраница = Истина;
		Иначе
			Код = Экз.Данные.П000550002000;
			АктивСтраница = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Код) Тогда
			Продолжить;
		КонецЕсли;
		//НовСтр = ТаблПрил5и6.Добавить();
		//НовСтр.Код = Код;
		// Организуем цикл по табличной части.
		Номер = 1;
		НомерСтр = "1";

		// Пока строка с индексом есть ...
		Пока ?(АктивСтраница,
		    мПриложение5.Области.Найти("П000550003013_" + НомерСтр) <> Неопределено,
		    Экз.Данные.Свойство("П000550003013_" + НомерСтр)) Цикл

			НовЗап     = ТаблПрил5.Добавить();
			НовЗап.Код = Код;

			Если ?(АктивСтраница, мПриложение5.Области["П000550003013_" + НомерСтр].Значение, Экз.Данные["П000550003013_" + НомерСтр]) > 0 Тогда
				НовЗап.Строка030Графы7_По13Колонке = ?(АктивСтраница, мПриложение5.Области["П000550003007_" + НомерСтр].Значение
				   , Экз.Данные["П000550003007_" + НомерСтр]);
				НовЗап.Строка030Графы8 = ?(АктивСтраница, мПриложение5.Области["П000550003008_" + НомерСтр].Значение, Экз.Данные["П000550003008_" + НомерСтр]);
			Иначе
				НовЗап.Строка030Графы7_По13Колонке = 0;
				НовЗап.Строка030Графы8 = 0;
			КонецЕсли;
			Если ?(АктивСтраница, мПриложение5.Области["П000550003014_" + НомерСтр].Значение, Экз.Данные["П000550003014_" + НомерСтр]) > 0 Тогда
				НовЗап.Строка030Графы7_По14Колонке = ?(АктивСтраница, мПриложение5.Области["П000550003007_" + НомерСтр].Значение, Экз.Данные["П000550003007_" + НомерСтр]);
			Иначе
				НовЗап.Строка030Графы7_По14Колонке = 0;
			КонецЕсли;

			Номер = Номер + 1;
			НомерСтр = Формат(Номер, "ЧГ=0")
		КонецЦикла;

	КонецЦикла;

	// Заполняем таблицу по приложению 6.
	Для каждого Экз Из ТблПриложение6 Цикл
		Если Экз.Данные = Неопределено Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Приложение6", Ложь);
		КонецЕсли;
		Если Экз.АктивнаяСтраница Тогда
			Код = мПриложение6.Области.П000560002000.Значение;
			АктивСтраница = Истина;
		Иначе
			Код = Экз.Данные.П000560002000;
			АктивСтраница = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Код) Тогда
			Продолжить;
		КонецЕсли;
		//НовСтр = ТаблПрил5и6.Добавить();
		//НовСтр.Код = Код;
		// Организуем цикл по табличной части.
		Номер = 1;
		НомерСтр = "1";

		// Пока строка с индексом есть ...
		Пока ?(АктивСтраница,
		    мПриложение6.Области.Найти("П000560003013_" + НомерСтр) <> Неопределено,
		    Экз.Данные.Свойство("П000560003013_" + НомерСтр)) Цикл

			НовЗап     = ТаблПрил6.Добавить();
			НовЗап.Код = Код;

			Если ?(АктивСтраница, мПриложение6.Области["П000560003013_" + НомерСтр].Значение, Экз.Данные["П000560003013_" + НомерСтр]) > 0 Тогда
				НовЗап.Строка030Графы7_По13Колонке = ?(АктивСтраница, мПриложение6.Области["П000560003007_" + НомерСтр].Значение
				   , Экз.Данные["П000560003007_" + НомерСтр]);
				НовЗап.Строка030Графы8 = ?(АктивСтраница, мПриложение6.Области["П000560003008_" + НомерСтр].Значение, Экз.Данные["П000560003008_" + НомерСтр]);
			Иначе
				НовЗап.Строка030Графы7_По13Колонке = 0;
				НовЗап.Строка030Графы8 = 0;
			КонецЕсли;
			Если ?(АктивСтраница, мПриложение6.Области["П000560003014_" + НомерСтр].Значение, Экз.Данные["П000560003014_" + НомерСтр]) > 0 Тогда
				НовЗап.Строка030Графы7_По14Колонке = ?(АктивСтраница, мПриложение6.Области["П000560003007_" + НомерСтр].Значение, Экз.Данные["П000560003007_" + НомерСтр]);
			Иначе
				НовЗап.Строка030Графы7_По14Колонке = 0;
			КонецЕсли;

			Номер = Номер + 1;
			НомерСтр = Формат(Номер, "ЧГ=0")
		КонецЦикла;

	КонецЦикла;

	// Заполним
	мРаздел3.Области.П000030005105.Значение = 0;
	мРаздел3.Области.П000030006105.Значение = 0;
	мРаздел3.Области.П000030011105.Значение = 0;
	мРаздел3.Области.П000030012105.Значение = 0;

	мРаздел3.Области.П000030005205.Значение = 0;
	мРаздел3.Области.П000030006205.Значение = 0;
	мРаздел3.Области.П000030011205.Значение = 0;
	мРаздел3.Области.П000030012205.Значение = 0;

	мРаздел3.Области.П000030005305.Значение = 0;
	мРаздел3.Области.П000030006305.Значение = 0;
	мРаздел3.Области.П000030011305.Значение = 0;
	мРаздел3.Области.П000030012305.Значение = 0;

	ТаблПрил5.Свернуть("Код", "Строка030Графы7_По13Колонке, Строка030Графы8, Строка030Графы7_По14Колонке");

	Код450 = ТаблПрил5.Найти("450", "Код");
	Код460 = ТаблПрил5.Найти("460", "Код");

	Если Код450 <> Неопределено Тогда
		мРаздел3.Области.П000030005105.Значение = Код450.Строка030Графы8;
		мРаздел3.Области.П000030005205.Значение = Код450.Строка030Графы7_По13Колонке;
		мРаздел3.Области.П000030005305.Значение = Код450.Строка030Графы7_По14Колонке;
	КонецЕсли;

	Если Код460 <> Неопределено Тогда
		мРаздел3.Области.П000030006105.Значение = Код460.Строка030Графы8;
		мРаздел3.Области.П000030006205.Значение = Код460.Строка030Графы7_По13Колонке;
		мРаздел3.Области.П000030006305.Значение = Код460.Строка030Графы7_По14Колонке;
	КонецЕсли;

	ТаблПрил6.Свернуть("Код", "Строка030Графы7_По13Колонке, Строка030Графы8, Строка030Графы7_По14Колонке");

	Код450 = ТаблПрил6.Найти("450", "Код");
	Код460 = ТаблПрил6.Найти("460", "Код");

	Если Код450 <> Неопределено Тогда
		мРаздел3.Области.П000030011105.Значение = Код450.Строка030Графы8;
		мРаздел3.Области.П000030011205.Значение = Код450.Строка030Графы7_По13Колонке;
		мРаздел3.Области.П000030011305.Значение = Код450.Строка030Графы7_По14Колонке;
	КонецЕсли;

	Если Код460 <> Неопределено Тогда
		мРаздел3.Области.П000030012105.Значение = Код460.Строка030Графы8;
		мРаздел3.Области.П000030012205.Значение = Код460.Строка030Графы7_По13Колонке;
		мРаздел3.Области.П000030012305.Значение = Код460.Строка030Графы7_По14Колонке;
	КонецЕсли;

КонецПроцедуры // РасчетРаздела3

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто() Экспорт

	ОбновитьСтруктуруМногостраничныхРазделов();
	РасчетРаздела3(Истина);
	Расчет("Раздел3");
	РасчетРаздела2(Истина);
	Расчет("Раздел2");
	Расчет("Раздел1");

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// ПолеТабличногоДокументаПриложение1Выбор
//
Процедура ПолеТабличногоДокументаПриложение1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;

	// Строка 010 и 020.
	Если (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000510001000") Или (ОбластьИмя = "П000510002000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000510001000", "Название", "Код");

		НачЗначение = Область.Значение;

		НайденнаяСтрока = мКроме450и460.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мКроме450и460.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мКроме450и460.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = ?(мАвтоВыборКодов, Результат, Результат.Получить(1));
			Значение2 = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));
			Если РегламентированнаяОтчетность.ПустоеЗначение(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение1.Области.П000510001000.Значение = Значение1;
			мПриложение1.Области.П000510002000.Значение = Значение2;
			// предопределенные значения как
			мПриложение1.Области.П000510003000.Значение = ? (РегламентированнаяОтчетность.ПустоеЗначение(Значение1), "", "тыс. штук");
			мПриложение1.Области.П000510004000.Значение = ? (РегламентированнаяОтчетность.ПустоеЗначение(Значение1), "", "798");
			Модифицированность = Истина;

			ЗаписатьПоказательВСтруктуру("Приложение1", "П000510002000", Значение2);

			РасчетРаздела2(Ложь);
			Расчет("Раздел2");
			Расчет("Раздел1");

		Конецесли;

	// Строка 030 и 040.
	ИначеЕсли (НЕ мАвтоВыборКодов) И ((ОбластьИмя = "П000510003000") Или (ОбластьИмя = "П000510004000")) Тогда

		СтандартнаяОбработка = Ложь;
		КолонкаПоиска = ?(ОбластьИмя = "П000510003000", "Название", "Код");
		НачЗначение = Область.Значение;
		НайденнаяСтрока = мТабачныеИзделияЕдИзмерения.Найти(НачЗначение, КолонкаПоиска);

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТабачныеИзделияЕдИзмерения.ВыбратьСтроку("Выбор", НайденнаяСтрока);
		Иначе
			Результат = мТабачныеИзделияЕдИзмерения.ВыбратьСтроку("Выбор");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Значение1 = Результат.Получить(1);
			Значение2 = Результат.Получить(0);
			Если ПустаяСтрока(Значение2) Тогда
				Значение1 = "";
			КонецЕсли;

			мПриложение1.Области.П000510003000.Значение = Значение1;
			мПриложение1.Области.П000510004000.Значение = Значение2;
			Модифицированность = Истина;
		Конецесли;

	Конецесли; // Если (ОбластьИмя = "П000020010001") Или (Ячейка = "П000020010001")

КонецПроцедуры // ПолеТабличногоДокументаПриложение1Выбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2007Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

мИдГруппы1 = "П0005200030";
КолИсхСтрокИдГруппы1 = 6;

мИдГруппы2 = "П0005300030";
КолИсхСтрокИдГруппы2 = 6;

мИдГруппы3 = "П0005500030";
КолИсхСтрокИдГруппы3 = 6;

мИдГруппы4 = "П0005600030";
КолИсхСтрокИдГруппы4 = 6;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

мМаскиЯчейки = Новый Соответствие;
мМаскиЯчейки.Вставить("П000520003001", "999");
мМаскиЯчейки.Вставить("П000530003001", "999");
мМаскиЯчейки.Вставить("П000550003001", "999");
мМаскиЯчейки.Вставить("П000560003001", "999");

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000520003001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
СтруктураГруппы1.Колонки.Добавить("П000520003002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120));
СтруктураГруппы1.Колонки.Добавить("П000520003004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы1.Колонки.Добавить("П000520003005", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы1.Колонки.Добавить("П000520003006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы1.Колонки.Добавить("П000520003007", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3));
СтруктураГруппы1.Колонки.Добавить("П000520003008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы1.Колонки.Добавить("П000520003009", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000520003010", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000520003011", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000520003012", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000520003013", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000520003014", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000530003001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
СтруктураГруппы2.Колонки.Добавить("П000530003002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120));
СтруктураГруппы2.Колонки.Добавить("П000530003004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы2.Колонки.Добавить("П000530003005", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы2.Колонки.Добавить("П000530003006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы2.Колонки.Добавить("П000530003007", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3));
СтруктураГруппы2.Колонки.Добавить("П000530003008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы2.Колонки.Добавить("П000530003009", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000530003010", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000530003011", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000530003012", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000530003013", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000530003014", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000550003001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
СтруктураГруппы3.Колонки.Добавить("П000550003002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120));
СтруктураГруппы3.Колонки.Добавить("П000550003004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы3.Колонки.Добавить("П000550003005", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы3.Колонки.Добавить("П000550003006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы3.Колонки.Добавить("П000550003007", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3));
СтруктураГруппы3.Колонки.Добавить("П000550003008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы3.Колонки.Добавить("П000550003009", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000550003010", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000550003011", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000550003012", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000550003013", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000550003014", мОписаниеТиповЧислоЕ);

// структура строк многострочного раздела на странице
СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000560003001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
СтруктураГруппы4.Колонки.Добавить("П000560003002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(120));
СтруктураГруппы4.Колонки.Добавить("П000560003004", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы4.Колонки.Добавить("П000560003005", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы4.Колонки.Добавить("П000560003006", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10)); // N(5) изменено на N(10) по письму ФНС от 01.03.2007 http://www.nalog.ru/document.php?id=24960&topic=root_nalog
СтруктураГруппы4.Колонки.Добавить("П000560003007", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 3));
СтруктураГруппы4.Колонки.Добавить("П000560003008", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2));
СтруктураГруппы4.Колонки.Добавить("П000560003009", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000560003010", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000560003011", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000560003012", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000560003013", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000560003014", мОписаниеТиповЧислоЕ);

мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКБК2005 = Новый ТаблицаЗначений;
мКБК2005.Колонки.Добавить("Код",,, 18);
мКБК2005.Колонки.Добавить("Название",,, 50);

мТабачныеИзделияКодыТоваров = Новый ТаблицаЗначений;
мТабачныеИзделияКодыТоваров.Колонки.Добавить("Код",,, 5);
мТабачныеИзделияКодыТоваров.Колонки.Добавить("Название",,, 80);

мТабачныеИзделияЕдИзмерения = Новый ТаблицаЗначений;
мТабачныеИзделияЕдИзмерения.Колонки.Добавить("Код",,, 5);
мТабачныеИзделияЕдИзмерения.Колонки.Добавить("Название",,, 50);

мТолько450и460 = Новый ТаблицаЗначений;
мТолько450и460.Колонки.Добавить("Код",,, 5);
мТолько450и460.Колонки.Добавить("Название",,, 90);

мКроме450и460 = Новый ТаблицаЗначений;
мКроме450и460.Колонки.Добавить("Код",,, 5);
мКроме450и460.Колонки.Добавить("Название",,, 90);

ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
ЦветБелый = Новый Цвет(255, 255, 255);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыПриложение1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение1", ТаблицаСтраницыПриложение1);

ТаблицаСтраницыПрил2 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраницаМнгСтрок = ТаблицаСтраницыПрил2.Добавить();
СтрПерваяСтраницаМнгСтрок.Представление = "НоваяСтраница";
СтрПерваяСтраницаМнгСтрок.АктивнаяСтраница = Истина;
СтрПерваяСтраницаМнгСтрок.АвтоматическоеПредставление = Истина;
СтрПерваяСтраницаМнгСтрок.ДанныеДопСтрок = Неопределено;

ТаблицаСтраницыПриложение2 = ТаблицаСтраницыПрил2.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение2", ТаблицаСтраницыПриложение2);

ТаблицаСтраницыПриложение3 = ТаблицаСтраницыПрил2.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение3", ТаблицаСтраницыПриложение3);

ТаблицаСтраницыПриложение5 = ТаблицаСтраницыПрил2.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение5", ТаблицаСтраницыПриложение5);

ТаблицаСтраницыПриложение6 = ТаблицаСтраницыПрил2.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Приложение6", ТаблицаСтраницыПриложение6);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = 1151074;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00002", Ложь);
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00003", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151074";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ТАБАЧНЫЕ ИЗДЕЛИЯ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
