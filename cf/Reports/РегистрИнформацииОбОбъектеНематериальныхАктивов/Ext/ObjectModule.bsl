#Если Клиент Тогда
	
Перем НП Экспорт;

// Возвращает полное наименование элемента справочника, если у этого вида 
// справочников есть реквизит НаименованиеПолное.
// 
// Параметры:      
//    Элемент - элемент справочника, для которого нужно вернуть полное наименование
//
// Возвращаемое значение: 
//  Строка с полным наименованием.
//
Функция ПолноеНаименование(Элемент) Экспорт
 
	Если НЕ ЗначениеЗаполнено(Элемент) Тогда
		Возврат "";
 
	ИначеЕсли Элемент.Метаданные().Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
		Возврат Элемент.Наименование;;

	ИначеЕсли НЕ ЗначениеЗаполнено(Элемент.НаименованиеПолное) Тогда
		Возврат Элемент.Наименование;

	Иначе
		Возврат Элемент.НаименованиеПолное;
	КонецЕсли;
 
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
	
	ДокументРезультат.Очистить();
	
	Макет = ПолучитьМакет("Отчет");

	ОбластьЗаголовок  = Макет.ПолучитьОбласть("Заголовок");

	ОбластьЗаголовок.Параметры.НачалоПериода       = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.КонецПериода        = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.ИННОрганизации      = "" + Организация.ИНН + "/" + Организация.КПП;
	ОбластьЗаголовок.Параметры.Наименование		   = ПолноеНаименование(НематериальныйАктив);
	ДокументРезультат.Вывести(ОбластьЗаголовок);

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;

	// Проверим заполнение обязательных реквизитов
	Если НалоговыйУчет.ПроверитьЗаполнениеОбязательныхРеквизитов(ДатаНач,ДатаКон,Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) или НЕ ЗначениеЗаполнено(НематериальныйАктив) тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для формирования регистра информации необходимо указать организацию и объект НМА.");
		Возврат;
	КонецЕсли;	
	
	// Дата приобретения, принятия и списания
	СтрОтбора = Новый Структура("НематериальныйАктив,Организация",НематериальныйАктив, Организация);
	
	ДатаПриобретения = '00010101000000';
	ДатаСнятияОбъектаСУчета = Неопределено;
	ДатаПринятияКУчету = '00010101000000';
	ОснованиеДляСнятияОбъектаСУчета = Неопределено;
	ОснованиеНачалаНачисленияАмортизации = Неопределено;
	
	ЗапросСостояний = Новый Запрос;
	ЗапросСостояний.УстановитьПараметр("Организация", Организация);
	ЗапросСостояний.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	ЗапросСостояний.Текст = "ВЫБРАТЬ
	                        |	СостояниеНМАОрганизации.Период,
	                        |	СостояниеНМАОрганизации.Регистратор,
	                        |	СостояниеНМАОрганизации.НематериальныйАктив,
	                        |	СостояниеНМАОрганизации.Организация,
	                        |	СостояниеНМАОрганизации.Состояние
	                        |ИЗ
	                        |	РегистрСведений.СостоянияНМАОрганизаций КАК СостояниеНМАОрганизации
	                        |
	                        |ГДЕ
	                        |	СостояниеНМАОрганизации.НематериальныйАктив = &НематериальныйАктив И
	                        |	СостояниеНМАОрганизации.Организация = &Организация";
	
	Состояние = ЗапросСостояний.Выполнить().Выбрать();
	Если Состояние.Количество()=0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Объект """+НематериальныйАктив+""" не был отражен в налоговом учете в организации """+Организация+""".");
		Возврат;
	КонецЕсли;
	Пока Состояние.Следующий() Цикл
		
		Если Состояние.Состояние = Перечисления.ВидыСостоянийНМА.Поступил Тогда
			ДатаПриобретения = Состояние.Период;
			
		ИначеЕсли Состояние.Состояние = Перечисления.ВидыСостоянийНМА.ПринятКУчету Тогда
			ДатаПринятияКУчету = Состояние.Период;
			ОснованиеНачалаНачисленияАмортизации = Состояние.Регистратор;
			
			Если ДатаПриобретения = '00010101000000' Тогда
				ДатаПриобретения = ДатаПринятияКУчету;
			КонецЕсли;
			
		ИначеЕсли Состояние.Состояние = Перечисления.ВидыСостоянийНМА.Списан Тогда
			ДатаСнятияОбъектаСУчета = Состояние.Период;
			ОснованиеДляСнятияОбъектаСУчета = Состояние.Регистратор;
		КонецЕсли;
	КонецЦикла;
	
	// Первоначальная стоимость
	ПервоначальныеСведения = РегистрыСведений.ПервоначальныеСведенияНМАНалоговыйУчет.ПолучитьПоследнее(ДатаКон, Новый Структура("НематериальныйАктив",НематериальныйАктив));
	Если ПервоначальныеСведения.Организация = Организация Тогда
		ПервоначальнаяСтоимость = ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ;
	Иначе
		ПервоначальнаяСтоимость = 0;
	КонецЕсли;

	// Срок полезного использования
	СрокПолезногоИспользования = ПервоначальныеСведения.СрокПолезногоИспользования;

	// Метод начисления амортизации
	МетодНачисленияАмортизации = ПервоначальныеСведения.МетодНачисленияАмортизации;
	
	// Вывод первого раздела
	Шапка1 = Макет.ПолучитьОбласть("Шапка1");
	Шапка1.Параметры.ДатаПриобретения = Формат(ДатаПриобретения, "ДФ=dd.MM.yyyy");
	Шапка1.Параметры.ПервоначальнаяСтоимость = ПервоначальнаяСтоимость;
	Шапка1.Параметры.СрокПолезногоИспользования = СрокПолезногоИспользования;
	Шапка1.Параметры.АмортизационнаяГруппа = НематериальныйАктив.АмортизационнаяГруппа;
	Шапка1.Параметры.ДатаСнятияОбъектаСУчета = Формат(ДатаСнятияОбъектаСУчета, "ДФ=dd.MM.yyyy");
	Шапка1.Параметры.ОснованиеДляСнятияОбъектаСУчета = ОснованиеДляСнятияОбъектаСУчета;
	ДокументРезультат.Вывести(Шапка1);
	
	// История изменения понижающего коэффициента
	Строка1 = Макет.ПолучитьОбласть("Строка1");
	
	ЗапросСК = Новый Запрос;
	ЗапросСК.УстановитьПараметр("Организация", Организация);
	ЗапросСК.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	ЗапросСК.Текст = "ВЫБРАТЬ
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.Период,
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.Регистратор,
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.НематериальныйАктив,
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.Организация,
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.СпециальныйКоэффициент
	                 |ИЗ
	                 |	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет КАК СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет
	                 |
	                 |ГДЕ
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.НематериальныйАктив = &НематериальныйАктив И
	                 |	СпециальныйКоэффициентДляАмортизацииНМАНалоговыйУчет.Организация = &Организация";
	
	Состояние = ЗапросСК.Выполнить().Выбрать();
	Пока Состояние.Следующий() Цикл
		Строка1.Параметры.ДатаНачалаПримененияПонижающегоКоэффициента = Формат(Состояние.Период, "ДФ=dd.MM.yyyy");
		Строка1.Параметры.ПонижающийКоэффициент = Состояние.СпециальныйКоэффициент;
		ДокументРезультат.Вывести(Строка1);
	КонецЦикла;
	
	// Начисленная амортизация и месяца начисления амортизации
	
	Если ДатаПриобретения < ДатаНач Тогда 
			
		СчетаАмортизации = Новый Массив;
		СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
		СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
		
		ЗапросТекущихОстатков = Новый Запрос;
		ЗапросТекущихОстатков.УстановитьПараметр("Организация",   Организация);
		ЗапросТекущихОстатков.УстановитьПараметр("ДатаНачала",     ДатаПриобретения);
		ЗапросТекущихОстатков.УстановитьПараметр("ДатаКонца",     Новый Граница(КонецМесяца(ДобавитьМесяц(ДатаНач,-1)), ВидГраницы.Включая));
		ЗапросТекущихОстатков.УстановитьПараметр("Счет",          СчетаАмортизации);
		ЗапросТекущихОстатков.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	    ЗапросТекущихОстатков.УстановитьПараметр("Субконто1",     НематериальныйАктив);
		ЗапросТекущихОстатков.УстановитьПараметр("ВидКорСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	    ЗапросТекущихОстатков.УстановитьПараметр("КорСубконтоВид",Перечисления.ВидыРасходовНУ.Амортизация);
		
		ЗапросТекущихОстатков.Текст = 
		"ВЫБРАТЬ
		|	АмортизацияНМАНалоговыйУчетОстатки.СуммаНУОборотКт КАК Амортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			,
		|			,
		|			&ВидКорСубконто,
		|			СчетКт В ИЕРАРХИИ (&Счет),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И СубконтоКт1 = &Субконто1
		|				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &КорСубконтоВид) КАК АмортизацияНМАНалоговыйУчетОстатки";
		ТекущиеОстатки = ЗапросТекущихОстатков.Выполнить().Выбрать();
		Если ТекущиеОстатки.Количество() > 0 Тогда
			ТекущиеОстатки.Следующий();
			СуммаНакопленнойАмортизацииНаНач = ТекущиеОстатки.Амортизация; 
		Иначе
			СуммаНакопленнойАмортизацииНаНач = 0;
		КонецЕсли;
	Иначе
		СуммаНакопленнойАмортизацииНаНач = 0;
	КонецЕсли;
	
	КоличествоМесяцевПолезногоИспользованияНаНач = 0;
	
	Если ЗначениеЗаполнено(ДатаПринятияКУчету) тогда
		ТекДата = КонецМесяца(ДобавитьМесяц(ДатаПринятияКУчету, 1));
		ТекДатаНач = КонецМесяца(ДатаНач);
		Пока ТекДата < ТекДатаНач Цикл
			КоличествоМесяцевПолезногоИспользованияНаНач = КоличествоМесяцевПолезногоИспользованияНаНач + 1;
			ТекДата = КонецМесяца(ДобавитьМесяц(ТекДата, 1));
		КонецЦикла;
	КонецЕсли;
	
	Шапка2 = Макет.ПолучитьОбласть("Шапка2");
	Шапка2.Параметры.СуммаНакопленнойАмортизацииНаНач = СуммаНакопленнойАмортизацииНаНач;
	Шапка2.Параметры.КоличествоМесяцевПолезногоИспользованияНаНач = КоличествоМесяцевПолезногоИспользованияНаНач;
	ДокументРезультат.Вывести(Шапка2);
	
	СуммаНакопленнойАмортизации = ?(СуммаНакопленнойАмортизацииНаНач=Null,0,СуммаНакопленнойАмортизацииНаНач);
	// Начисление амортизации в текущем периоде.
	ЗапросТекущихОстатков = Новый Запрос;
	ЗапросТекущихОстатков.УстановитьПараметр("Организация"  , Организация);
	ЗапросТекущихОстатков.УстановитьПараметр("ДатаНачала"		, ?(НЕ ЗначениеЗаполнено(ДатаНач), ДатаНач, НачалоМесяца(ДатаНач)));
	ЗапросТекущихОстатков.УстановитьПараметр("ДатаКонца"		, ?(НЕ ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	ЗапросТекущихОстатков.УстановитьПараметр("Счет",           СчетаАмортизации);
	ЗапросТекущихОстатков.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ЗапросТекущихОстатков.УстановитьПараметр("Субконто1"	, НематериальныйАктив);
	ЗапросТекущихОстатков.УстановитьПараметр("ВидКорСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
    ЗапросТекущихОстатков.УстановитьПараметр("КорСубконтоВид",Перечисления.ВидыРасходовНУ.Амортизация);
	
	ЗапросТекущихОстатков.Текст = "ВЫБРАТЬ
	                              |	АмортизацияНМАНалоговыйУчетОстаткиИОбороты.Период,
	                              |	АмортизацияНМАНалоговыйУчетОстаткиИОбороты.СубконтоКт1,
	                              |	АмортизацияНМАНалоговыйУчетОстаткиИОбороты.СуммаНУОборотКт
	                              |ИЗ
	                              |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                              |			&ДатаНачала,
	                              |			&ДатаКонца,
	                              |			Месяц,
	                              |			,
	                              |			&ВидКорСубконто,
	                              |			СчетКт В ИЕРАРХИИ (&Счет),
	                              |			&ВидСубконто,
	                              |			Организация = &Организация
	                              |				И СубконтоКт1 = &Субконто1
	                              |				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &КорСубконтоВид) КАК АмортизацияНМАНалоговыйУчетОстаткиИОбороты";
									  
	ТекущиеОстатки = ЗапросТекущихОстатков.Выполнить().Выбрать();
	Пока ТекущиеОстатки.Следующий() Цикл
		
		Если ТекущиеОстатки.СуммаНУОборотКт = 0 ТОгда
			Продолжить;
		КонецЕсли;
		КоличествоМесяцевПолезногоИспользованияНаНач = КоличествоМесяцевПолезногоИспользованияНаНач + 1;
		СуммаНакопленнойАмортизации = СуммаНакопленнойАмортизации+ТекущиеОстатки.СуммаНУОборотКт;
		
		Строка2 = Макет.ПолучитьОбласть("Строка2");
		Строка2.Параметры.МесяцГодНачисленияАмортизации = ТекущиеОстатки.Период;
		Строка2.Параметры.МесяцПолезногоИспользования = КоличествоМесяцевПолезногоИспользованияНаНач;
		Строка2.Параметры.СуммаНачисленнойАмортизации = ТекущиеОстатки.СуммаНУОборотКт;
		Строка2.Параметры.СуммаНачисленнойАмортизацииНарастающимИтогом = СуммаНакопленнойАмортизации;
		ДокументРезультат.Вывести(Строка2);
	КонецЦикла;
	
	// Подвал
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	СтруктураЛиц = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаКон);
	ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтруктураЛиц.ОтветственныйЗаРегистры);
	ДокументРезультат.Вывести(ОбластьПодвал);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

#КонецЕсли