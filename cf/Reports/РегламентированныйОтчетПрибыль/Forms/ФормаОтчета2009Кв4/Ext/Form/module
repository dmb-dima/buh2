////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличных документов
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел1_3;
Перем мРаздел2;
Перем мРаздел2_Прил1;
Перем мРаздел2_Прил2;
Перем мРаздел2_Прил3;
Перем мРаздел2_Прил4;
Перем мРаздел2_Прил5;
Перем мРаздел3;
Перем мРаздел3Продолжение;
Перем мРаздел3Реестр;
Перем мРаздел4;
Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;

// Хранит имена многострочных разделов
Перем мИдГруппы1,мИдГруппы2;
Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем СписокСтатейЗатрат;
Перем ПС;
Перем СпП Экспорт;

Перем ЦветЗаполняетсяАвтоАрифметика;

Перем мПоМесту;
Перем мОсновнойПланСчетов Экспорт;
Перем флКвартальноеЗаполнение;
Перем ТаблицаИтогов, ТаблицаСуммИтогов;

Перем мСтрукШаблоныДанныхМногостраничныхРазделов; //используется при импорте выгрузки
Перем мПоказателиОтчета; //используется при импорте выгрузки

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// ПолучитьТаблицуМногостраничногоРаздела
// флМногострочность - Булево, для многостраничных разделов, являющихся многострочными = Истина
// Возвращаемое значение:
//  ТаблицаЗначений, эталонная таблица многостраничного раздела, с одним экземпляром и активной страницей.
//
Функция ПолучитьТаблицуМногостраничногоРаздела(флМногострочность = Ложь)
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление", ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	Если флМногострочность Тогда
		ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");	
	КонецЕсли;
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

	СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
	СтрПерваяСтраница.Представление = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	Возврат ТаблицаСтраницыРаздела;

КонецФункции // ПолучитьТаблицуМногостраничногоРаздела

Процедура ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5()
	ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;
	Если ДанныеАктивнойСтраницы.П002050001000 = "4" Тогда
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;
		Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
			ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
		Иначе
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;	
		
	КонецЕсли;
КонецПроцедуры

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	Если ИмяСтраницы = "Лист02_Прил5" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
	КонецЕсли;

	Расчет("");

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста


// ДобавитьПризнакВхожденияОрганизацииВГруппуОП
//
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Знач Признак, СниматьРанееУстановленныеПризнаки)

	ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

	Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
	КонецЕсли;

	ДанныеАктивнойСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
	Если СниматьРанееУстановленныеПризнаки Тогда
		// Если флаг был возведен и на других листах декларации, тогда снимем его.
		Для каждого Страница Из мСтруктураМногостраничныхРазделов.Лист02_Прил5 Цикл
			Если Страница.Данные.Свойство("ВГруппуОПВходитОрганизация") Тогда
				Если (Страница.Данные.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
					// Страница.Данные.ВГруппуОПВходитОрганизация = НЕ Признак; // Противоположный признак.
					Сообщить("Уже введен экземпляр приложения 5 к листу 02 с признаком вхождения организации в группу обособленных подразделений.", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // СниматьРанееУстановленныеПризнаки

КонецПроцедуры // ДобавитьПризнакВхожденияОрганизацииВГруппуОП

Процедура ПроставитьПрПл_1(ИмяРаздела = "")
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	СтрПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	ИменаПрПлРаздела = Новый Структура;
	Если флЕстьОбособ Тогда
		ИменаПрПлРаздела.Вставить("Лист02_Прил5", "П002050000100");
	Иначе
		ИменаПрПлРаздела.Вставить("Лист02", "П002000000100");
		Если флКвартальноеЗаполнение Тогда
			ИменаПрПлРаздела.Вставить("Лист02_Прил1", "П002010000100");
			ИменаПрПлРаздела.Вставить("Лист02_Прил2", "П002020000100");
			ИменаПрПлРаздела.Вставить("Лист02_Прил3", "П002030000100");
		КонецЕсли; 	
	КонецЕсли;
	                                          
	Если ИмяРаздела = "" Тогда
		Для каждого ИмяПрПл Из ИменаПрПлРаздела Цикл
			ПроставитьПрПл_1(ИмяПрПл.Ключ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	ТаблДок.Области[ИменаПрПлРаздела[ИмяРаздела]].Значение = "1";
КонецПроцедуры
                
// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную, ТипЗнчСуммы);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант, Показатель = Неопределено)

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если НовыйВариант = 3 И (ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ") Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50		= ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1			= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	мСвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОписаниеТиповЧисло1);
	//максимальное количество экземпляров (страниц) многостраничного раздела (листа)
	//0-9 (0 - неограниченное количество экземпляров. Значения 1-9 имеют смысл при значении в колонке МногостраничностьВРазделе = Истина)
	
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела", ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгЛист07 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгЛист07.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	МнгРаздел1_3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел1_3.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел1_3;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Продолжение";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Реестр";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист04";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 4;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.МногострочностьВРазделе              = МнгЛист07;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил5" Тогда
		СтруктураДанныхПоля.Вставить("ВГруппуОПВходитОрганизация", ВГруппуОПВходитОрганизация);
	КонецЕсли;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()
	
	Если СокрЛП(мТитульный.Области.Период1.Значение + мТитульный.Области.Период2.Значение) = "" ИЛИ мСкопированаФорма <> Неопределено Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;

		Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "21");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "31");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "33");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"34");
		Иначе
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1, "35");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2, "36");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "37");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4, "38");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5, "39");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "40");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7, "41");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8, "42");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "43");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "44");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "45");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "46");
		КонецЕсли;
		
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(мДатаКонцаПериодаОтчета)];
		мТитульный.Области.Период1.Значение = Сред(КодОтчетногоПериода, 1, 1);
		мТитульный.Области.Период2.Значение = Сред(КодОтчетногоПериода, 2, 1);
	КонецЕсли; 
	
	
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	мТитульный.Области.ОтчетГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	// задаем заголовок формы
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// ПолучитьСтавкаНалога
//
Процедура ПолучитьСтавкиНалога()

	Перем СтавкаПрибФед;
	Перем СтавкаПрибРесп;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);

	СтавкаПрибФед = 0;
	СтавкаПрибРесп = 0;

	ОргСведения.Свойство("СтавкаПрибФед", СтавкаПрибФед);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаПрибРесп);

	мРаздел2.Области.П002000015003.Значение = СтавкаПрибФед;
	мРаздел2.Области.П002000016003.Значение = СтавкаПрибРесп;

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		мРаздел2.Области.П002000014003.Значение = СтавкаПрибФед + СтавкаПрибРесп + мРаздел2.Области.П002000017003.Значение;
	КонецЕсли;

КонецПроцедуры // ПолучитьСтавкаНалога

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);

КонецПроцедуры // ЗаполнитьДатуПодписи()

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = ИНН + "-";
		КонецЦикла;
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
			КПП = КПП + "-";
		КонецЦикла;
		
		Для Сч=1 По 9 Цикл
			ПроставитьНаВсехЛистах("ИНН" + Сч + "_", ИНН);
			ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
		КонецЦикла;		
		
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			мТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		// заполняем наименование организации
		мТитульный.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		// заполняем телефон организации
		мТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		//заполняем код ОКВЭД (в случае, если еще не заполнен)
		Если НЕ ЗначениеЗаполнено(мТитульный.Области.ОКВЭД.Значение) Тогда
			мТитульный.Области.ОКВЭД.Значение=СокрЛП(СведенияОбОрганизации.ОКВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	// заполняем сведения о подписантах
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок + ": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле, ОбновитьСтавки = Истина) Экспорт
	
	Если ВыбТабличноеПоле = мРаздел2 И НЕ ОбновитьСтавки Тогда
		//сохраним старые значения
		П002000015003 = мРаздел2.Области.П002000015003.Значение;
		П002000016003 = мРаздел2.Области.П002000016003.Значение;
	КонецЕсли;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбТабличноеПоле = мРаздел2 Тогда
		Если ОбновитьСтавки Тогда
			ПолучитьСтавкиНалога();	
		Иначе
			//восстановим старые значения
			мРаздел2.Области.П002000015003.Значение = П002000015003;
			мРаздел2.Области.П002000016003.Значение = П002000016003;
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ВыбТабличноеПоле = мРаздел2_Прил5 Тогда
		
		Если Не ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");
		КонецЕсли;
		
		АктивнаяСтраницаПрил5 = мСтруктураМногостраничныхРазделов["Лист02_Прил5"].Найти(Истина, "АктивнаяСтраница");
		Если АктивнаяСтраницаПрил5 <> Неопределено Тогда
			ДанныеПрил5 = мСтруктураМногостраничныхРазделов["Лист02_Прил5"].Найти(Истина, "АктивнаяСтраница").Данные;
			Если ДанныеПрил5 <> Неопределено Тогда
				ДанныеПрил5.П002050000100 = "";
			КонецЕсли;
		КонецЕсли;
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5", Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 И НЕ ФлажокОтклАвтоРасчет Тогда
			ТаблицаРаздела  =  мСтруктураМногостраничныхРазделов["Лист02"];
			Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
				ДанныеСтраницы = СтраницаТаблицыРаздела.Данные;
				ДанныеСтраницы.П002000023003 = 0;
				мРаздел2.Области.П002000023003.Значение = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	мПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьЕдиницыИзмерения) * Делитель;

КонецФункции // ОкруглитьЧислоПоФормату()

////////////////////////////////////////////////////////////////////////////////
//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ+++

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  – <Структура> – данные экземпляра раздела
//                 
//  <Условия>  – <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(ТаблПоле);
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			//нет условий или они все выполняются
			Результат = ДанныеТаблПоле.Показатель;	
		КонецЕсли;
		Возврат ?(Округлять, ОкруглитьЧислоПоФормату(Результат), Результат);
	Иначе
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
				//проверка экземпляра	
				Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
					//нет условий или они все выполняются
					Результат = Результат + ОкруглитьЧислоПоФормату(ДанныеТаблПоле[Показатель]);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СуммаПоказателяПоВсемСтраницамСпец

//Проверяет наличие экземпляра раздела с показателями, заполненными определенными значениями 
//Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным. 
// Параметры
//  <ИмяСтраницы>  – <Строка> - имя страницы основной панели формы
//  <Условия>  – Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение) 
//
// Возвращаемое значение:
//   Истина, Ложь
//
Функция ЕстьРазделЗаполненныйПоУсловиям(ИмяСтраницы, Условия)
	Результат = Ложь;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(ТаблПоле);
		Результат = ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия);
	Иначе
		ТаблицаРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				//проверка экземпляра	
				
				СтраницаДанные = ТаблицаРаздела[Инд].Данные;
				Если СтраницаДанные <> Неопределено Тогда
					Результат=ВыполняютсяУсловияЗаполнения(ТаблицаРаздела[Инд].Данные, Условия);
				КонецЕсли;
				
				//если хоть один экземпляр благополучно прошел проверку - заканчиваем проверку экземпляров успехом
				Если Результат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ()

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
Процедура РасчетВСтруктуре(ИмяЛиста)
	                                                      
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	//Значения показателей
	ПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
    //вспомогательные переменные
	флЕстьОбособ = ?(ПоМесту = "220" ИЛИ ПоМесту = "223" ИЛИ ПоМесту = "224", Истина,Ложь);
	
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	флНалоговыйПериод = (НомерМесяца = 12);
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
			
		Данные = Страница.Данные;
		Если ИмяЛиста = "Раздел1_1" Тогда
			
			ПрПлРаздел1_1 = Данные.П000110000100;
			
			//описание связи текущего раздела и источников данных+++
			//Значения используемых структур - условий
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлРаздел1_1);
			услПрПл_3_Лист02 = Новый Структура("П002000000100", "3");
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлРаздел1_1);
			услПрПл_3_Лист02_Прил5 = Новый Структура("П002050000100", "3");
			
			услПрПл_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", ПрПлРаздел1_1, "1");
			
			услПрПл3_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", "3", "1");
			//описание связи текущего раздела и источников данных---
			
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5", Новый Структура("П002050000100"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям("Лист02", Новый Структура("П002000000100", "3"));

			
			Есть_Прил5_ПрПл_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5", услПрПл_Расчет_1_Прил5);
			Есть_Прил5_ПрПл3_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5", услПрПл3_Расчет_1_Прил5);
			
			Если ПрПлРаздел1_1 = "2" Тогда
				//а) (Для стр. с ПризнакПлательщика = 2)

				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000027003", Истина, услПрПлЛист02), 0);
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000028003", Истина, услПрПлЛист02), 0);
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000027103", Истина, услПрПлЛист02), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000028103", Истина, услПрПлЛист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);

				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_1 = "1" И Есть_Лист02_ПрПл3 Тогда
				//б) (Для стр. с ПризнакПлательщика = 1, если есть Лист 02  с ПризнакПлательщика = 3)
				
				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000027003", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000028003", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000027103", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000028103", Истина, услПрПл_3_Лист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0)
										 + Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0)
										 + Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПл_3_Лист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПл_3_Лист02)
										 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПл_3_Лист02), 0);
					
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл3_Расчет_1_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл3_Расчет_1_Прил5), 0);
					Иначе
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					КонецЕсли;
					
					Данные.П000110007003 = ПервоеСлагаемое_70 + ВтороеСлагаемое_70;
					Данные.П000110008003 = ПервоеСлагаемое_80 + ВтороеСлагаемое_80;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_1 = "1" И НЕ Есть_Лист02_ПрПл3 Тогда
				//в) (Для стр. с ПризнакПлательщика = 1, если нет Лист 02  с ПризнакПлательщика = 3)

			    Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000020003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000023003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000026003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000023003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000026003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000020003", Истина, услПрПлЛист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл3_Расчет_1_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл3_Расчет_1_Прил5), 0);
					Иначе
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					КонецЕсли;
					
					Данные.П000110007003 = ПервоеСлагаемое_70 + ВтороеСлагаемое_70;
					Данные.П000110008003 = ПервоеСлагаемое_80 + ВтороеСлагаемое_80;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//вывод в стр.70 или 80 разницы этих строк
			Разница = Данные.П000110007003 - Данные.П000110008003;
			Если Разница >= 0 Тогда
				Данные.П000110007003 = Разница;
				Данные.П000110008003 = 0;
			Иначе
				Данные.П000110007003 = 0;
				Данные.П000110008003 =  - Разница;
			КонецЕсли; 
			
		ИначеЕсли ИмяЛиста = "Раздел1_2" Тогда
			
			ПрПлРаздел1_2 = Данные.П000120000100;
			
			//описание связи текущего раздела и источников данных+++
			//Значения используемых структур - условий
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлРаздел1_2);
			услПрПл_3_Лист02 = Новый Структура("П002000000100", "3");
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлРаздел1_2);
			услПрПл_3_Лист02_Прил5 = Новый Структура("П002050000100", "3");
			
			услПрПл_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", ПрПлРаздел1_2,"1");
			
			услПрПл3_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", "3","1");
			//описание связи текущего раздела и источников данных---
			
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "3"));
			
			Есть_Прил5_ПрПл_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",услПрПл_Расчет_1_Прил5);
			Есть_Прил5_ПрПл3_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",услПрПл3_Расчет_1_Прил5);
			
			Если ПрПлРаздел1_2 = "2" Тогда
				//а) (Для стр. с ПризнакПлательщика = 2)

				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
				
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000031003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					Данные.П000120022003 = 0;
					Данные.П000120023003 = 0;
					Данные.П000120024003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации

					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_2 = "1" И Есть_Лист02_ПрПл3 Тогда
				//б) (Для стр. с ПризнакПлательщика = 1, если есть Лист 02  с ПризнакПлательщика = 3)
				
				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПл_3_Лист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000031003", Истина, услПрПл_3_Лист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					Данные.П000120022003 = 0;
					Данные.П000120023003 = 0;
					Данные.П000120024003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0)
									 + Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл_3_Лист02_Прил5), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПл_3_Лист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						ПервоеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						ПервоеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
						ВтороеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл3_Расчет_1_Прил5), 0);
					Иначе
						ВтороеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл_3_Лист02_Прил5), 0);
					КонецЕсли;
					
					РазделяемаяСумма = ПервоеСлагаемое + ВтороеСлагаемое;
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_2 = "1" И НЕ Есть_Лист02_ПрПл3 Тогда
				//в) (Для стр. с ПризнакПлательщика = 1, если нет Лист 02  с ПризнакПлательщика = 3)

			    Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
				
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000031003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					Данные.П000120022003 = 0;
					Данные.П000120023003 = 0;
					Данные.П000120024003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000120012003 = 0;
					Данные.П000120013003 = 0;
					Данные.П000120014003 = 0;
					
					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;

				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации

					РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
					//делим сумму на 3 части без остатка
					Данные.П000120012003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120013003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;

					//делим сумму на 3 части без остатка
					Данные.П000120022003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120023003 = ОкруглитьЧислоПоФормату(РазделяемаяСумма/3);
					Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
				
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02" Тогда
			
			ПрПлЛист02=Данные.П002000000100;
			
			//флаги существования заполненных разделов 
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
			                   
			Есть_Лист02_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "1"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "3"));
			
			//описание связи текущего раздела и источников данных+++
			//Значения используемых структур - условий
			услПрПлЛист02_Прил1 = Новый Структура("П002010000100", ПрПлЛист02);
			услПрПлЛист02_Прил2 = Новый Структура("П002020000100", ПрПлЛист02);
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02);
			услПрПлЛист02_Прил4 = Новый Структура("П002040000100", ПрПлЛист02);
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлЛист02);
			//описание связи текущего раздела и источников данных---
			
			Если флКвартальноеЗаполнение Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.010 = стр.040 Прил.1 Лист 02
					Данные.П002000001003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил1", "П002010004003", Истина, услПрПлЛист02_Прил1);
					
					//стр.020 = стр.100 Прил.1 Лист 02
					Данные.П002000002003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил1", "П002010010003", Истина, услПрПлЛист02_Прил1);
					
					//стр.030 = стр.130 Прил.2 Лист 02
					Данные.П002000003003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил2", "П002020013003", Истина, услПрПлЛист02_Прил2);
					
					//стр.040 = стр.200 Прил.2 Лист 02 + стр.300 Прил.2 Лист 02
					Данные.П002000004003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил2", "П002020020003", Истина, услПрПлЛист02_Прил2)
										 + СуммаПоказателяПоВсемСтраницам("Лист02_Прил2", "П002020030003", Истина, услПрПлЛист02_Прил2);
					
					//стр.050 = стр.360 Прил.3 Лист 02
					Данные.П002000005003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил3", "П002030036003", Истина, услПрПлЛист02_Прил3);
				Иначе
					Данные.П002000001003 = 0;	
					Данные.П002000002003 = 0;
					Данные.П002000003003 = 0;
					Данные.П002000004003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			//стр.060 = стр.010 + стр.020 - стр.030 - стр.040 + стр.050
			Данные.П002000006003 = Данные.П002000001003 + Данные.П002000002003 - Данные.П002000003003 - Данные.П002000004003 + Данные.П002000005003;
			
			//стр.100 = стр.060 - стр.070 - стр.080 - стр.090
			Данные.П002000010003 = ОкруглитьЧислоПоФормату(Данные.П002000006003)
								 - ОкруглитьЧислоПоФормату(Данные.П002000007003)
								 - ОкруглитьЧислоПоФормату(Данные.П002000008003)
								 - ОкруглитьЧислоПоФормату(Данные.П002000009003);
			
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.110 = стр.150 Прил.4 Лист02
					Данные.П002000011003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил4", "П002040015003", Истина, услПрПлЛист02_Прил4);
				Иначе
					Данные.П002000011003 = 0;	
				КонецЕсли;
			КонецЕсли;
			
			//стр.120
			Если ПрПлЛист02 = "1"
				ИЛИ (ПрПлЛист02 = "3" И НЕ Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И НЕ Есть_Лист02_ПрПл1 И НЕ Есть_Лист02_ПрПл3)
				Тогда
				//(Для стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 3, если нет стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если нет стр. ни с ПризнакПлательщика = 1, ни с ПризнакПлательщика = 3)
				
				//стр.120 = стр.100 - стр.110 - стр.100 Лист05 + стр.530 Лист06
				Данные.П002000012003 = Данные.П002000010003
									 - Данные.П002000011003
									 + СуммаПоказателяПоВсемСтраницам("Лист05", "П002100010003", Истина)
									 + ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110053003.Значение);
				
			ИначеЕсли  (ПрПлЛист02 = "3" И Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И (Есть_Лист02_ПрПл1 ИЛИ Есть_Лист02_ПрПл3)) Тогда
				//(Для стр. с ПризнакПлательщика = 3, если есть стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если есть стр. с ПризнакПлательщика = 1 или с ПризнакПлательщика = 3)
				
				//стр.120 = стр.100 - стр.110
				Данные.П002000012003 = Данные.П002000010003 - Данные.П002000011003;
			Иначе
				//ПрПл = ""
				Данные.П002000012003 = 0;
			КонецЕсли;
			
			
			//Стр.140
			//нет округления, поскольку это не сумма, число
			Данные.П002000014003 = Данные.П002000015003 + Макс(Данные.П002000016003,Данные.П002000017003);
			
			
			//стр.190 = макс(стр.120 х стр.150 / 100 , 0)
			Данные.П002000019003 = Макс(ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(Данные.П002000012003) * Данные.П002000015003/100), 0);
			
			Если Есть_Прил5 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.200 = сумма стр.070 Прил.5
					Данные.П002000020003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050007003", Истина, услПрПлЛист02_Прил5);
				Иначе
					Данные.П002000020003 = 0;
				КонецЕсли;	
			Иначе
				//Стр.200 = (стр .120-стр .130) х стр.160 : 100 + (стр .130 х строка 170 : 100)
					Слагаемое1 = ОкруглитьЧислоПоФормату((Данные.П002000012003 - ОкруглитьЧислоПоФормату(Данные.П002000013003))
					 		   * Данные.П002000016003/100);
					Слагаемое2 = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(Данные.П002000013003)* Данные.П002000017003/100);
					Данные.П002000020003 = Макс(Слагаемое1 + Слагаемое2, 0);
			КонецЕсли;
			
			Если ПрПлЛист02 = "3" Тогда
				//добавление суммы этого показателя с Листа 02 с указанным признаком налогоплательщика = 1
				//для стр.190 и 200
				Данные.П002000019003 = Данные.П002000019003
									 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000019003", Истина, Новый Структура("П002000000100", "1"));
				Данные.П002000020003 = Данные.П002000020003
									 + СуммаПоказателяПоВсемСтраницам("Лист02", "П002000020003", Истина, Новый Структура("П002000000100", "1"));
			КонецЕсли;
			
			//стр.180 = стр.190 + стр.200
			Данные.П002000018003 = Данные.П002000019003 + Данные.П002000020003;
			
			
			Если Есть_Прил5 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.230 = сумма стр.080 Прил.5
					Данные.П002000023003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050008003", Истина, услПрПлЛист02_Прил5);
				Иначе
					Данные.П002000023003 = 0;
				КонецЕсли;
	
				//если есть заполненный лист О2 с ПрПл="3", то на него переносится то же значение, что на листе 02 с ПрПл = "1", а тот очищается
				Если ПрПлЛист02 = "3" Тогда
					Данные.П002000023003 = Данные.П002000023003
				 					     + СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050008003", Истина, 
										 								  Новый Структура("П002050000100", "1"));
				КонецЕсли;
				Если ПрПлЛист02 = "1" И Есть_Лист02_ПрПл3 Тогда
					Данные.П002000023003 = 0;	
				КонецЕсли;
			КонецЕсли;
			
			//стр.210 = стр.220 + стр.230
			Данные.П002000021003 = ОкруглитьЧислоПоФормату(Данные.П002000022003)
			 + Данные.П002000023003;
			
			
			Если ПрПлЛист02 = "1" И Есть_Лист02_ПрПл3 Тогда
				Данные.П002000027003 = 0;	
				Данные.П002000027103 = 0;	
				Данные.П002000028003 = 0;	
				Данные.П002000028103 = 0;	
			Иначе
				//стр.270 = Макс(стр.190 - стр.220  - стр.250, 0)
				Данные.П002000027003 = Макс(Данные.П002000019003
									 - ОкруглитьЧислоПоФормату(Данные.П002000022003)
									 - ОкруглитьЧислоПоФормату(Данные.П002000025003), 0);	
				
				//стр.271 = Макс(стр.200 - стр.230 -стр.260, 0)
				Данные.П002000027103 = Макс(Данные.П002000020003
									 - ОкруглитьЧислоПоФормату(Данные.П002000023003)
									 - ОкруглитьЧислоПоФормату(Данные.П002000026003), 0);
				
				//стр.280 = Макс(стр.220 + стр.250 -стр.190, 0)
				Данные.П002000028003 = Макс(- Данные.П002000019003
									 + ОкруглитьЧислоПоФормату(Данные.П002000022003)
									 + ОкруглитьЧислоПоФормату(Данные.П002000025003), 0);
				
				//стр.281 = Макс(стр.230 + стр.260  - стр.200, 0)
				Данные.П002000028103 = Макс(- Данные.П002000020003
									 + ОкруглитьЧислоПоФормату(Данные.П002000023003)
									 + ОкруглитьЧислоПоФормату(Данные.П002000026003), 0);
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил1" Тогда
			
			ПрПлЛист02_Прил1 = Данные.П002010000100;
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02_Прил1);
			
			//строка 010
			Данные.П002010001003 = ОкруглитьЧислоПоФормату(Данные.П002010001103)	
								 + ОкруглитьЧислоПоФормату(Данные.П002010001203)	
								 + ОкруглитьЧислоПоФормату(Данные.П002010001303)	
								 + ОкруглитьЧислоПоФормату(Данные.П002010001403);
			
			//строка 030
			Если ПрПлЛист02_Прил1 <> "" Тогда
				Данные.П002010003003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил3", "П002030034003", Истина, услПрПлЛист02_Прил3);
			Иначе
				Данные.П002010003003 = 0;
			КонецЕсли;
			
			//строка 040
			Данные.П002010004003 = Данные.П002010001003	
								 + ОкруглитьЧислоПоФормату(Данные.П002010002003)
								 + ОкруглитьЧислоПоФормату(Данные.П002010002303)	
								 + Данные.П002010003003;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил2" Тогда
			
			ПрПлЛист02_Прил2 = Данные.П002020000100;
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02_Прил2);
			
			//строка 080
			Если ПрПлЛист02_Прил2 <> "" Тогда
				Данные.П002020008003 = СуммаПоказателяПоВсемСтраницам("Лист02_Прил3", "П002030035003", Истина, услПрПлЛист02_Прил3);
			Иначе
				Данные.П002020008003 = 0;
			КонецЕсли;
			
			//строка 130
			Данные.П002020013003 = ОкруглитьЧислоПоФормату(Данные.П002020001003)	
								 + ОкруглитьЧислоПоФормату(Данные.П002020002003)	
								 + ОкруглитьЧислоПоФормату(Данные.П002020004003)	
								 + ОкруглитьЧислоПоФормату(Данные.П002020005903)
								 + ОкруглитьЧислоПоФормату(Данные.П002020006003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020006103)
								 + ОкруглитьЧислоПоФормату(Данные.П002020007003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020008003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020009003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020010003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020011003)
								 + ОкруглитьЧислоПоФормату(Данные.П002020012003);
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил3" Тогда
			
			//строка 090
			Данные.П002030009003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002030008003)
								 - ОкруглитьЧислоПоФормату(Данные.П002030007003), 0);	
			
			//строка 150
			Данные.П002030015003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002030012003)
								 - ОкруглитьЧислоПоФормату(Данные.П002030010003)
								 - ОкруглитьЧислоПоФормату(Данные.П002030014003), 0);
			
			//строка 160
			Данные.П002030016003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002030013003)
								 - ОкруглитьЧислоПоФормату(Данные.П002030011003), 0);
			
			//строка 230
			Данные.П002030023003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002030022003)
								 - ОкруглитьЧислоПоФормату(Данные.П002030021003), 0);
			
			//строка 340
			Данные.П002030034003 = ОкруглитьЧислоПоФормату(Данные.П002030003003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030007003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030010003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030011003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030018003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030021003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030024003);
			
			//строка 350
			Данные.П002030035003 = ОкруглитьЧислоПоФормату(Данные.П002030004003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030008003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030012003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030013003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030019003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030022003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030025003);
			
			//строка 360
			Данные.П002030036003 = ОкруглитьЧислоПоФормату(Данные.П002030006003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030009003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030015003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030016003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030020103)
								 + ОкруглитьЧислоПоФормату(Данные.П002030023003)
								 + ОкруглитьЧислоПоФормату(Данные.П002030026003);
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил4" Тогда
			
			ПрПлЛист02_Прил4 = Данные.П002040000100;
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_Прил4);
			
			//строка 010 - далее
			
			//строка 030
			Данные.П002040003003 = ОкруглитьЧислоПоФормату(Данные.П002040004003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040005003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040006003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040007003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040008003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040009003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040010003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040011003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040012003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040013003);
			
			//строка 010
			Данные.П002040001003 = ОкруглитьЧислоПоФормату(Данные.П002040002003)
								 + ОкруглитьЧислоПоФормату(Данные.П002040003003);	
			
			//строка 140 авторассчитывается только за 1 и 4 квартал
			НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				Если ПрПлЛист02_Прил4 <> "" Тогда
					
					
					Если ПрПлЛист02_Прил4 = "1" Тогда
						//(Для стр. с ПризнакПлательщика = 1) 
										
						//стр.140 = стр.100 Лист 02 + стр.100 Лист 05 + стр.530 Лист 06
						Данные.П002040014003 = СуммаПоказателяПоВсемСтраницам("Лист02", "П002000010003", Истина, услПрПлЛист02)
											 + СуммаПоказателяПоВсемСтраницам("Лист05", "П002100010003", Истина)
											 + ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110053003.Значение);
						
					ИначеЕсли  ПрПлЛист02_Прил4 = "2" ИЛИ ПрПлЛист02_Прил4 = "3" Тогда
						//(Для стр. с ПризнакПлательщика = 3 или ПризнакПлательщика = 2)
						
						//стр.140 = стр.100 Лист 02
						Данные.П002040014003 = СуммаПоказателяПоВсемСтраницам("Лист02", "П002000010003", Истина, услПрПлЛист02);
						
					КонецЕсли;	
				Иначе
					Данные.П002040014003 = 0;	
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил5" Тогда
			
			ПрПлЛист02_Прил5 = Данные.П002050000100;
			
			РасчетСоставленЛист02_Прил5 = Данные.П002050001000;
			
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_Прил5);
			услПрПлЛист02Прил5_И_Расчет_3 = Новый Структура ("П002050000100,П002050001000",ПрПлЛист02_Прил5,"3");
			
			//флаг (есть страницы с Расчет составлен = "3" и соотв. признаком плательщика)
			ЕстьПрил5_Расчет3_И_ПрПл = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",услПрПлЛист02Прил5_И_Расчет_3);
			
			
			Если НЕ флЕстьОбособ Тогда
				//стр.030 = макс(стр.120 Лист02 с соотв. признаком плательщика, 0)
				Если ПрПлЛист02_Прил5 <> "" Тогда
					Данные.П002050003003 = СуммаПоказателяПоВсемСтраницам("Лист02", "П002000012003", Истина, услПрПлЛист02);
				Иначе
					Данные.П002050003003 = 0;
				КонецЕсли;
				
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
					//стр.031(тек. стр.) = стр.030(тек.стр.) -  стр.050(всех стр. с Расчет составлен = "3")с соотв. признаком плательщика
					Если ПрПлЛист02_Прил5 <> "" Тогда
						Данные.П002050003103 = Данные.П002050003003
						- СуммаПоказателяПоВсемСтраницам("Лист02_Прил5", "П002050005003", Истина,услПрПлЛист02Прил5_И_Расчет_3);
					Иначе
						Данные.П002050003103 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
			Если РасчетСоставленЛист02_Прил5 = "3" Тогда
				//Расчет составлен = "3"
				//стр.050 = вручную
			Иначе		
				//Расчет составлен <> "3"
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
				    //есть страницы с (Расчет составлен = "3") и соотв. признаком плательщика
					//стр.050 = стр.031 х стр.040
					Данные.П002050005003 = ОкруглитьЧислоПоФормату(Данные.П002050003103 * Данные.П002050004003/100);
				Иначе
					//нет страниц с (Расчет составлен = "3") и соотв. признаком плательщика
					//Если заполнена строка 031, то стр.050  =  стр.031 х стр.040
					//Иначе стр.050  =  стр.030 х стр.040
					Множитель = ?(Данные.П002050003103 <> 0, Данные.П002050003103, Данные.П002050003003);
				    Данные.П002050005003 = ОкруглитьЧислоПоФормату(Множитель * Данные.П002050004003/100);
				КонецЕсли;
			КонецЕсли;
			
			//стр.070 = стр.050 х стр.060/100
			Данные.П002050007003 = Макс(ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(Данные.П002050005003) * Данные.П002050006003/100), 0);
			
			//стр.100
			Если РасчетСоставленЛист02_Прил5="3" Тогда
				//Расчет составлен = "3"
				//стр.100 не заполняются, если "Расчет составлен" = 3 (ликвидированное ОП)
				Данные.П002050010003 = 0;
			Иначе		
				//Расчет составлен <> "3"
				//стр.100 = макс(стр.070 - стр.080 - стр.090, 0)
				Данные.П002050010003 = Макс(Данные.П002050007003
									 - ОкруглитьЧислоПоФормату(Данные.П002050008003)
									 - ОкруглитьЧислоПоФормату(Данные.П002050009003), 0);
			КонецЕсли;
			
			
			//стр.110 = макс(стр.080 + стр.090 - стр.070, 0)
			Данные.П002050011003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002050008003)
								 + ОкруглитьЧислоПоФормату(Данные.П002050009003)
								 - Данные.П002050007003, 0);
			
		ИначеЕсли ИмяЛиста = "Лист03" Тогда
			
			//ст.040 = макс(стр.010 - стр.020 - стр.030, 0)
			Данные.П002060004003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002060001003)
								 - ОкруглитьЧислоПоФормату(Данные.П002060002003)
								 - ОкруглитьЧислоПоФормату(Данные.П002060003003), 0);
								 
			//ст.050 = макс(стр.040 - стр.060, 0)
			Данные.П002060005003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002060004003)
								 - ОкруглитьЧислоПоФормату(Данные.П002060006003), 0);
			
			//ст.090  = стр.050 - стр.070 - стр.080
			Данные.П002060009003 = ОкруглитьЧислоПоФормату(Данные.П002060005003)
								 - ОкруглитьЧислоПоФормату(Данные.П002060007003)
								 - ОкруглитьЧислоПоФормату(Данные.П002060008003);
			
		ИначеЕсли ИмяЛиста = "Лист03Продолжение" Тогда
			
			//строка 030
			Данные.П002070003003 = Макс(ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(Данные.П002070001003) * Данные.П002070002003/100), 0);
			
		ИначеЕсли ИмяЛиста = "Лист04" Тогда
			
			//стр.040  = макс((стр.010 - стр.020) * стр.030 /100, 0) 
			Данные.П002090004003 = Макс(ОкруглитьЧислоПоФормату((ОкруглитьЧислоПоФормату(Данные.П002090001003)
								 - ОкруглитьЧислоПоФормату(Данные.П002090002003))
								 * Данные.П002090003003/100), 0);
			
			//стр.080 = макс((стр.040 - стр.050 - стр.060 - стр.070), 0)
			Данные.П002090008003 = Макс(Данные.П002090004003
								 - ОкруглитьЧислоПоФормату(Данные.П002090005003)
								 - ОкруглитьЧислоПоФормату(Данные.П002090006003)
								 - ОкруглитьЧислоПоФормату(Данные.П002090007003), 0);
			
		ИначеЕсли ИмяЛиста = "Лист05" Тогда
			
			//стр.040 = (стр.010 + стр.020 - стр.030)
			Данные.П002100004003 = ОкруглитьЧислоПоФормату(Данные.П002100001003)
								 + ОкруглитьЧислоПоФормату(Данные.П002100002003)
								 - ОкруглитьЧислоПоФормату(Данные.П002100003003); 
			
			//стр.060 = макс(стр.040 - стр.050, 0)
			Данные.П002100006003 = Макс(Данные.П002100004003
								 - ОкруглитьЧислоПоФормату(Данные.П002100005003), 0); 
			
			//строка 090
			Если флНалоговыйПериод И Данные.П002100004003 < 0 Тогда
				//налоговый период с убытком
				//стр.090 = мод(стр.040) + стр.070
				Данные.П002100009003 = -Данные.П002100004003
									 + ОкруглитьЧислоПоФормату(Данные.П002100007003);
			Иначе
				//отчетный период или налоговый с прибылью
				//стр.090 = стр.070 - стр.080
				Данные.П002100009003 = Макс(ОкруглитьЧислоПоФормату(Данные.П002100007003)
									 - ОкруглитьЧислоПоФормату(Данные.П002100008003), 0); 
			КонецЕсли;
			
			//стр.100 = макс(стр.060 - стр.080, 0)
			Данные.П002100010003 = Макс(Данные.П002100006003
								 - ОкруглитьЧислоПоФормату(Данные.П002100008003), 0); 
		КонецЕсли;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если ТипЗнч(ЭлементДанных.Значение) <> Тип("Число") 
					ИЛИ СтрДлина(ЭлементДанных.Ключ) < 13
					ИЛИ НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;			
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры // РасчетВСтруктуре

Процедура ОчисткаИФормированиеРаздела(ИмяРаздела,СписокПрПлЭкземпляровРаздела)
	Перем ТаблицаСтраницРаздела;
	ТабДок = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		ИмяПрПл = "П000110000100";
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		ИмяПрПл = "П000120000100";	
	Иначе
		Возврат;
	КонецЕсли;
	
	//перебор существующих экземпляров раздела (с конца - для возможности корректного удаления)
	//если экземпляра с текущим значением ПрПл не должно существовать, 
	//тогда он либо удаляется (если не является активной страницей), либо очищается
	//если экземпляра с текущим значением ПрПл должен существовать, 
	//тогда страница остается без изменений, а текущее значение ПрПл удаляется из списка
	КоличествоСтраниц = ТаблицаСтраницРаздела.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
		Инд = КоличествоСтраниц - ОбратныйИндекс;
		СтрокаТаблицы = ТаблицаСтраницРаздела[Инд];
		ДанныеСтраницы = СтрокаТаблицы.Данные;
		ПрПл = ДанныеСтраницы[ИмяПрПл];
		НайденныйПрПл = СписокПрПлЭкземпляровРаздела.НайтиПоЗначению(ПрПл);
		Если НайденныйПрПл = Неопределено Тогда
			Если СтрокаТаблицы.АктивнаяСтраница Тогда
				//Если это не единственный экземпляр раздела - удаляется с предварительной сменой активности, если нет - очищается.
				Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
					ПоказатьСтраницуМногостраничногоРаздела(?(Инд = 0, 1, -1), ИмяРаздела);
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);			
				Иначе
					ОчиститьТабличноеПоле(ТабДок);
					//процедура ОчиститьТабличноеПоле не очищает защищенные ячейки
					//доп. очистка защищеннорй ячейки ПрПл
					ТабДок.Области[ИмяПрПл].Значение = "";
					//после очистки активной страницы необходимо записать данные в структуру
					РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
				КонецЕсли;
			Иначе
				ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);	
			КонецЕсли
		Иначе
			//удаление из списка найденного ПрПл
			СписокПрПлЭкземпляровРаздела.Удалить(НайденныйПрПл);
		КонецЕсли;
	КонецЦикла;
	
	//оставшиеся в списке ПрПл значения распределяются по существующим экземплярам с незаполненным ПрПл, 
	//а в случае отсутствия таковых, по вставляемым дополнительно экземплярам 
	Для каждого ПрПлРаздела Из СписокПрПлЭкземпляровРаздела Цикл
		ПрПлУстановлен = Ложь;
		Для каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл
			ДанныеСтраницы = СтрокаТаблицы.Данные;
			ПрПл = ДанныеСтраницы[ИмяПрПл];
			Если НЕ ЗначениеЗаполнено(ПрПл) Тогда
				ДанныеСтраницы[ИмяПрПл] = ПрПлРаздела.Значение;
				//после записи в структуре необходимо отобразить в табл. док-те для активной страницы
				Если СтрокаТаблицы.АктивнаяСтраница Тогда
					ТабДок.Области[ИмяПрПл].Значение = ДанныеСтраницы[ИмяПрПл];
				КонецЕсли;
				ПрПлУстановлен = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПрПлУстановлен Тогда
			ВставитьДополнительнуюСтраницу(ИмяРаздела);	
			ТабДок.Области[ИмяПрПл].Значение = ПрПлРаздела.Значение;
			//после отображения в табл. док-те для новой страницы необходимо записать данные в структуру
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
		КонецЕсли;		
	КонецЦикла;
	
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяРаздела);
КонецПроцедуры

Процедура СформироватьРазделы11И12()
	СписокПрПлЭкземпляровРаздела = Новый СписокЗначений;
	Если ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "1"))
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "3")) 
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100", "1"))
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100", "3")) 
		Тогда
		СписокПрПлЭкземпляровРаздела.Добавить("1");		
	КонецЕсли;
	Если ЕстьРазделЗаполненныйПоУсловиям("Лист02",Новый Структура("П002000000100", "2")) 
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100", "2")) Тогда
		СписокПрПлЭкземпляровРаздела.Добавить("2");
	КонецЕсли;
	
	//поскольку в процессе формирования изменяется СписокПрПлЭкземпляровРаздела, в виде параметра назначается его копия
	ОчисткаИФормированиеРаздела("Раздел1_1",СписокПрПлЭкземпляровРаздела.Скопировать());
	
	//Подраздел 1.2. заполняется только за отчетный период (1 квартал, полугодие, 9 месяцев)
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	
	Если НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 Тогда
		ОчисткаИФормированиеРаздела("Раздел1_2",СписокПрПлЭкземпляровРаздела.Скопировать());
	Иначе
		ОчиститьТабличноеПоле(мРаздел1_2);
		//процедура ОчиститьТабличноеПоле не очищает защищенные ячейки
		//доп. очистка защищеннорй ячейки ПрПл
		мРаздел1_2.Области["П000120000100"].Значение = "";
		//после очистки активной страницы необходимо записать данные в структуру
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1_2", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяСтраницыПанели = "") Экспорт
	Перем ТаблицаБлока;
	
	Если (мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		МногострочностьЕсть = (ИмяГруппы <> Неопределено);
		Если МногостраничностьЕсть Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Ложь);
		ИначеЕсли МногострочностьЕсть Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);	
		КонецЕсли;
		
		//перед началом расчета происходит формирование экземпляров разделов 1.1 и 1.2
		СформироватьРазделы11И12();	
	КонецЕсли;
	
	Если (ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	//Значения показателей
	ПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	ПрПлРаздел1_1 = мРаздел1_1.Области.П000110000100.Значение;
	ПрПлРаздел1_2 = мРаздел1_2.Области.П000120000100.Значение;
	ПрПлЛист02 = мРаздел2.Области.П002000000100.Значение;
	ПрПлЛист02_Прил1 = мРаздел2_Прил1.Области.П002010000100.Значение;
	ПрПлЛист02_Прил2 = мРаздел2_Прил2.Области.П002020000100.Значение;
	ПрПлЛист02_Прил3 = мРаздел2_Прил3.Области.П002030000100.Значение;
	ПрПлЛист02_Прил4 = мРаздел2_Прил4.Области.П002040000100.Значение;
	ПрПлЛист02_Прил5 = мРаздел2_Прил5.Области.П002050000100.Значение;

	//вспомогательные переменные
	флЕстьОбособ = ?(ПоМесту = "220" ИЛИ ПоМесту = "223" ИЛИ ПоМесту = "224",Истина,Ложь);
	
	Если ИмяСтраницыПанели = "Раздел1_1" Тогда
		
		РасчетВСтруктуре("Раздел1_1");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел1_2" Тогда
		
		РасчетВСтруктуре("Раздел1_2");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел1_3" Тогда
		
		// Данный раздел не заполняется в автоматическом режиме.
		
	ИначеЕсли ИмяСтраницыПанели = "Лист02" Тогда
		
		РасчетВСтруктуре("Лист02");
										
	ИначеЕсли ИмяСтраницыПанели = "Лист02_Прил1" Тогда
		
		РасчетВСтруктуре("Лист02_Прил1");
		
	ИначеЕсли ИмяСтраницыПанели = "Лист02_Прил2" Тогда
		
		РасчетВСтруктуре("Лист02_Прил2");
		
	ИначеЕсли ИмяСтраницыПанели = "Лист02_Прил3" Тогда
		
		РасчетВСтруктуре("Лист02_Прил3");												 
													 
	ИначеЕсли ИмяСтраницыПанели = "Лист02_Прил4" Тогда
		
		РасчетВСтруктуре("Лист02_Прил4");		
		
	ИначеЕсли ИмяСтраницыПанели = "Лист02_Прил5" Тогда
		
		РасчетВСтруктуре("Лист02_Прил5");
						
	ИначеЕсли ИмяСтраницыПанели = "Лист03" Тогда
		
		РасчетВСтруктуре("Лист03");
																						
	ИначеЕсли ИмяСтраницыПанели = "Лист03Продолжение" Тогда
		
		РасчетВСтруктуре("Лист03Продолжение");
		
	ИначеЕсли ИмяСтраницыПанели = "Лист04" Тогда
		
		РасчетВСтруктуре("Лист04");	
		
	ИначеЕсли ИмяСтраницыПанели = "Лист05" Тогда
		
		РасчетВСтруктуре("Лист05");
		
	ИначеЕсли ИмяСтраницыПанели = "Лист06" Тогда
		
		//стр.010 = стр.020+ стр.030  + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 +  стр.110;
		мРаздел6.Области.П002110001003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110002003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110003003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110004003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110005003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110006003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110007003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110008003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110009003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110010003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110011003.Значение);
		
		//стр.190 = стр.200 + стр.210 +стр.220
		мРаздел6.Области.П002110019003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110020003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110021003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110022003.Значение);
		
		//стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320
		мРаздел6.Области.П002110024003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110025003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110026003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110027003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110028003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110029003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110030003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110031003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110032003.Значение);
		
		//стр.330 = стр.020  +  стр.030 - стр.140 - стр.200 - стр.250
		мРаздел6.Области.П002110033003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110002003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110003003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110014003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110020003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110025003.Значение);
		
		//стр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260
		мРаздел6.Области.П002110035003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110004003.Значение)
												+ ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110005003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110015003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110021003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110026003.Значение);			
		
		//стр.370 = макс(стр.060 - стр.160 - стр.270, 0)
		мРаздел6.Области.П002110037003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110006003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110016003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110027003.Значение), 0);			
		
		//стр.380 = макс(стр.070 - стр.170 - стр.280, 0)
		мРаздел6.Области.П002110038003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110007003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110017003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110028003.Значение), 0);						
		
		//стр.390 = стр.110 - стр.180 - стр.220 - стр.320
		мРаздел6.Области.П002110039003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110011003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110018003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110022003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110032003.Значение);
		
		//стр.410 = макс(стр.330 - стр.340, 0)
		мРаздел6.Области.П002110041003.Значение = Макс(мРаздел6.Области.П002110033003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110034003.Значение), 0);
		
		//стр.440 = макс(стр.420 - стр.430, 0)
		мРаздел6.Области.П002110044003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110042003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110043003.Значение), 0);
		
		//стр.450 = макс(стр.350 - стр.360, 0)
		мРаздел6.Области.П002110045003.Значение = Макс(мРаздел6.Области.П002110035003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110036003.Значение), 0);
		
		//стр.480 = макс(стр.460 - стр.470, 0)
		мРаздел6.Области.П002110048003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110046003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110047003.Значение), 0);
		
		//стр.490 = макс(стр.390 - стр.400, 0)
		мРаздел6.Области.П002110049003.Значение = Макс(мРаздел6.Области.П002110039003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110040003.Значение), 0);
		
		//стр.520 = макс(стр.500 - стр.510, 0)
		мРаздел6.Области.П002110052003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110050003.Значение)
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110051003.Значение), 0);
		
		//стр.530 = макс(стр.410 - стр.430 + стр.450 - стр.470 + стр.490 - стр.510, 0)
		мРаздел6.Области.П002110053003.Значение = Макс(мРаздел6.Области.П002110041003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110043003.Значение)
												+ мРаздел6.Области.П002110045003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110047003.Значение)
												+ мРаздел6.Области.П002110049003.Значение
												- ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110051003.Значение), 0);
		
	ИначеЕсли ИмяСтраницыПанели = "Лист07" Тогда

		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаБлока);
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка6 = 0;
		Колонка7 = 0;

		Для каждого Зап Из ТаблицаБлока Цикл
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			//заполнение итогов по строке в структуре многострочного раздела
			П002120001003 = ОкруглитьЧислоПоФормату(Зап.П002120001003);
			П002120001004 = ОкруглитьЧислоПоФормату(Зап.П002120001004);
			П002120001006 = ОкруглитьЧислоПоФормату(Зап.П002120001006);
			
			Зап.П002120001007 = П002120001003 - П002120001004 - П002120001006;
			П002120001007 = Зап.П002120001007;
			
			//заполнение итогов по строке в табличном документе
			мРаздел7.Области.Найти("П002120001007_" + НомерСтроки).Значение = П002120001007;
			
			//аккумулирование общих итогов
			Колонка3 = Колонка3 + П002120001003;
			Колонка4 = Колонка4 + П002120001004;
			Колонка6 = Колонка6 + П002120001006;
			Колонка7 = Колонка7 + П002120001007;
		КонецЦикла;

		//заполнение общих итогов в табличном документе
		мРаздел7.Области.П002120002003.Значение = Колонка3;
		мРаздел7.Области.П002120002004.Значение = Колонка4;
		мРаздел7.Области.П002120002006.Значение = Колонка6;
		мРаздел7.Области.П002120002007.Значение = Колонка7;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда

		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.

		Расчет("Лист07");
		Расчет("Лист06");
		Расчет("Лист05");
		Расчет("Лист04");
		Расчет("Лист03Продолжение");
		Расчет("Лист03");
		Расчет("Лист02_Прил5");
		Расчет("Лист02_Прил4");
		Расчет("Лист02_Прил3");
		Расчет("Лист02_Прил2");
		Расчет("Лист02_Прил1");
		Расчет("Лист02");
		Расчет("Лист02_Прил4");
		Расчет("Лист02_Прил5");
		Расчет("Лист02");
		Расчет("Раздел1_2");
		Расчет("Раздел1_1");

	КонецЕсли;

КонецПроцедуры // Расчет()

//АВТОРАСЧЕТ И ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ---
////////////////////////////////////////////////////////////////////////////////

Процедура УстановитьМаскиВПоляхВвода()
	
	// титульный
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		мТитульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	// Раздел1_1
	мРаздел1_1.Области.П000110000100.ЭлементУправления.Маска = "9";
	мРаздел1_1.Области.П000110001003.ЭлементУправления.Маска = "99999999999";
	мРаздел1_1.Области.П000110003003.ЭлементУправления.Маска = "99999999999999999999";
	мРаздел1_1.Области.П000110006003.ЭлементУправления.Маска = "99999999999999999999";
	
	// Раздел1_2
	мРаздел1_2.Области.П000120000100.ЭлементУправления.Маска = "9";
	мРаздел1_2.Области.П000120001003.ЭлементУправления.Маска = "99999999999";
	мРаздел1_2.Области.П000120011003.ЭлементУправления.Маска = "99999999999999999999";
	мРаздел1_2.Области.П000120021003.ЭлементУправления.Маска = "99999999999999999999";
	
	// Раздел1_3
	мРаздел1_3.Области.П000130001003.ЭлементУправления.Маска = "9";
	мРаздел1_3.Области.П000130002003.ЭлементУправления.Маска = "99999999999";
	мРаздел1_3.Области.П000130003003.ЭлементУправления.Маска = "99999999999999999999";

	//Лист02
	мРаздел2.Области.П002000000100.ЭлементУправления.Маска = "9";
	
	//Лист02_Прил1
	мРаздел2_Прил1.Области.П002010000100.ЭлементУправления.Маска = "9";
	
	//Лист02_Прил2
	мРаздел2_Прил2.Области.П002020000100.ЭлементУправления.Маска = "9";
	
	//Лист02_Прил3
	мРаздел2_Прил3.Области.П002030000100.ЭлементУправления.Маска = "9";
	
	//Лист02_Прил4
	мРаздел2_Прил4.Области.П002040000100.ЭлементУправления.Маска = "9";
	мРаздел2_Прил4.Области.П002040004001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040005001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040006001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040007001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040008001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040009001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040010001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040011001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040012001.ЭлементУправления.Маска = "9999";
	мРаздел2_Прил4.Области.П002040013001.ЭлементУправления.Маска = "9999";
	
	//Лист02_Прил5
	мРаздел2_Прил5.Области.П002050000100.ЭлементУправления.Маска = "9";
	мРаздел2_Прил5.Области.П002050001000.ЭлементУправления.Маска = "9";
	мРаздел2_Прил5.Области.П002050002001.ЭлементУправления.Маска = "999999999";
	мРаздел2_Прил5.Области.П002050002002.ЭлементУправления.Маска = "9";
	
	//программная установка типа (обход интерактивного запрета на точность больше 9)
	ТипДоляНалоговойБазы = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 11);
	мРаздел2_Прил5.Области.П002050004003.ТипЗначения = ТипДоляНалоговойБазы;
	
	//Лист03
	мРаздел3.Области.П002060000200.ЭлементУправления.Маска = "9";
	мРаздел3.Области.П002060000300.ЭлементУправления.Маска = "99";
	мРаздел3.Области.П002060000400.ЭлементУправления.Маска = "9999";
	
	//Лист03Продолжение
	мРаздел3Продолжение.Области.П002070000200.ЭлементУправления.Маска = "9";
	
	//Лист03Реестр
	//маски не нужны - реализована форма заполнения
	
	//Лист04
	мРаздел4.Области.П002090000200.ЭлементУправления.Маска = "9";
	
	//Лист05
	мРаздел5.Области.П002100000200.ЭлементУправления.Маска = "9";

	//Лист06
	
	//Лист07
	мРаздел7.Области.П002120001001_1.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_2.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_3.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_4.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_5.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_6.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_7.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_8.ЭлементУправления.Маска = "999";
	мРаздел7.Области.П002120001001_9.ЭлементУправления.Маска = "999";
	
	// области номера страницы
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		НомерБлока = 1;
		Пока ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_1") <> Неопределено Цикл
			Для НомерОбластиВБлоке = 1 По 3 Цикл
				ТаблДок.Области.Найти("НомСтр" + НомерБлока + "_" + НомерОбластиВБлоке).ЭлементУправления.Маска = "9";
			КонецЦикла;
			НомерБлока = НомерБлока + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	Перем ИсходноеКоличествоСтрокГруппы;
	
	мБезОткрытияФормы = БезОткрытияФормы;

	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
		РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровка");
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный          = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел2            = ЭлементыФормы.ПолеТабличногоДокументаЛист02;
	мРаздел2_Прил1      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил1;
	мРаздел2_Прил2      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил2;
	мРаздел2_Прил3      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил3;
	мРаздел2_Прил4      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил4;
	мРаздел2_Прил5      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил5;
	мРаздел3            = ЭлементыФормы.ПолеТабличногоДокументаЛист03;
	мРаздел3Продолжение = ЭлементыФормы.ПолеТабличногоДокументаЛист03Продолжение;
	мРаздел3Реестр      = ЭлементыФормы.ПолеТабличногоДокументаЛист03Реестр;
	мРаздел4            = ЭлементыФормы.ПолеТабличногоДокументаЛист04;
	мРаздел5            = ЭлементыФормы.ПолеТабличногоДокументаЛист05;
	мРаздел6            = ЭлементыФормы.ПолеТабличногоДокументаЛист06;
	мРаздел7            = ЭлементыФормы.ПолеТабличногоДокументаЛист07;

	УстановитьМаскиВПоляхВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();

	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
			
			// Ставки.
			ПолучитьСтавкиНалога();
			
			мПоМесту = "";
			
			ПроставитьПрПл_1();
		КонецЕсли;
		ЗаполнитьДатуПодписи();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	//Иначе
	//	УправлениеЛистами();
	КонецЕсли;

	//начальное заполнение структуры данных
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5();
	
	СформироватьРазделы11И12();
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	ОбновитьДоступностьЭлементов();
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементов()
	
	Перем ЦветФона;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (мПоМесту = "220" ИЛИ мПоМесту = "223" ИЛИ мПоМесту = "224");
	
	Если флЕстьОбособ Тогда
		Если НЕ ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Заполнить") = Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Доступность = Ложь;
		КонецЕсли;
		мТитульный.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		Если НЕ ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Заполнить") = Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Доступность = Истина;
		КонецЕсли;
		// обновляем наименование организации
		НаимОрг = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "НаимЮЛПол").НаимЮЛПол;
		мТитульный.Области.НаимОрг.Значение = НаимОрг;
		мТитульный.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	мТитульный.Области.НаимОрг.ЦветФона = ЦветФона;
	
КонецПроцедуры

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Знач Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
	
	Если  Субконто1 = 0 И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Субконто1 = ?(Субконто1 = 0, Неопределено, Субконто1);
	Субконто2 = ?(Субконто2 = 0, Неопределено, Субконто2);
	Субконто3 = ?(Субконто3 = 0, Неопределено, Субконто3);
	
		ИмяИтоговойЯчейки = ИмяЯчейки;
		СуммаИтога = 0;
	    ТекстИтога = ИмяПоказателя;
		
	Если Не флКвартальноеЗаполнение Тогда
		НайтиИтоговуюЯчеку(ИмяЯчейки, 0, ИмяИтоговойЯчейки, СуммаИтога, ТекстИтога);
		НомерЛиста = ?(НомерЛиста = Неопределено, НомерЛиста, Лев(НомерЛиста,6));
	КонецЕсли;
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(Форма, ИмяИтоговойЯчейки, ТекстИтога, ЗнакОперации, ИмяСлагаемого, Сумма, Счет, КорСчет, Сдвиг, ПраваяГраница, ИмяРаздела, НомерЛиста, МнЧ, НомерСтроки, Субконто1, Субконто2, Субконто3, "НУ", (СтруктураПараметров.ЗаполнениеПрил5 И НЕ СтруктураПараметров.СписокОрганизаций.Количество() = 1));
	
КонецПроцедуры

Процедура УстановитьЗначениеПоказателя(Форма, ИмяЯчейки, Сумма)
	
		ИмяИтоговойЯчейки = ИмяЯчейки;
		СуммаИтога = Сумма;
	
	Если Не флКвартальноеЗаполнение Тогда
		НайтиИтоговуюЯчеку(ИмяЯчейки, Сумма, ИмяИтоговойЯчейки, СуммаИтога);
	КонецЕсли;

   РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(Форма, ИмяИтоговойЯчейки, СуммаИтога)

КонецПроцедуры

Процедура НайтиИтоговуюЯчеку(ИмяЯчейки, Сумма, ИмяИтоговойЯчейки, СуммаИтога, ТекстИтога = "")
	
	Строка = ТаблицаИтогов.Найти(ИмяЯчейки, "ИмяЯчейки");
	Если Строка = Неопределено Тогда
		ИмяИтоговойЯчейки = ИмяЯчейки;
		Возврат;
	КонецЕсли;
	ИмяИтоговойЯчейки = Строка.ИмяИтоговойЯчейки;
	ТекстИтога        = Строка.ТекстИтоговойЯчейки;
	СтрокаИтогов = ТаблицаСуммИтогов.Найти(ИмяИтоговойЯчейки,"ИмяИтоговойЯчейки");
	Если НЕ СтрокаИтогов = Неопределено Тогда
		СтрокаИтогов.СУмма = Сумма + СтрокаИтогов.Сумма;
		СуммаИтога = СтрокаИтогов.СУмма;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьКорСчетаКосвенныхРасходов(СтруктураПараметров)
	КорСчета = Новый Массив;
	
	Если СтруктураПараметров.ПланСчетов = "Хозрасчетный" Тогда
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		
	Иначе
		КорСчета.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
		КорСчета.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);
	КонецЕсли;
	
	
	Возврат КорСчета
КонецФункции

Процедура ВставитьРасшифровкуКосвенныхРасходов(ИмяПоказателя,СтруктураПараметров, ВидРасходовНУ = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	СчетаКосвенныхЗатрат = Новый Массив;
	
	Если СтруктураПараметров.ПланСчетов = "Налоговый" Тогда
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОсновногоПроизводства);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыВспомогательныхПроизводств);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходы);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОбслуживающихПроизводств);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходы);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыПоВыявленномуБраку);
		
	Иначе
		СчетаКосвенныхЗатрат.Добавить(ПС.ОсновноеПроизводство);
		СчетаКосвенныхЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
		СчетаКосвенныхЗатрат.Добавить(ПС.ОбщепроизводственныеРасходы);
		СчетаКосвенныхЗатрат.Добавить(ПС.ОбщехозяйственныеРасходы);
		СчетаКосвенныхЗатрат.Добавить(ПС.ОбслуживающиеПроизводства);
		СчетаКосвенныхЗатрат.Добавить(ПС.БракВПроизводстве);
	КонецЕсли;
	
	Если Не СтруктураПараметров.ЕНВД Тогда
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.ИздержкиОбращенияРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КоммерческиеРасходыРаспределяемые);
	КонецЕсли;
	
	
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	
	Запрос.УстановитьПараметр("Счет",           СчетаКосвенныхЗатрат);
	Запрос.УстановитьПараметр("КорСчет",        ПолучитьКорСчетаКосвенныхРасходов(СтруктураПараметров));
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		&ВидСубконто,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&КорСчет),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.КорСчет";
	
	
	Если  ВидРасходовНУ <> "" Тогда
		Запрос.УстановитьПараметр("ВидРасходовНУ", ВидРасходовНУ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы", "НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы И НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидРасходовНУ"); 
	КонецЕсли;
	
	Если Не СтруктураПараметров.ПланСчетов = "Налоговый" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Налоговый", "Хозрасчетный");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидУчета = &ВидУчета", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаОборотКт", "СуммаНУОборотКт");
	КонецЕсли;
	
	ВыборкаКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из ВыборкаКосвЗатрат Цикл
		Если  ВидРасходовНУ = "" Тогда
			ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КорСчет, , , "Лист02_Прил2");
		Иначе
			ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КОРСчет, , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", ВидРасходовНУ, СписокСтатейЗатрат));

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВставитьРасшифровкуВнереализационных(ИмяПоказателя,СтруктураПараметров, ДолиЕНВД, ВидСуммы, СписокПрочихДоходовИРасходов)
	Если Метаданные.ОбщиеМодули.Найти("НалоговыйУчет") = Неопределено Тогда
		НалоговыйУчет = РегламентированнаяОтчетность;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  НалоговыйУчет.ПолучитьМассивВнереализационныхРасходов());
	Запрос.МенеджерВременныхТаблиц = ДолиЕНВД;
	Запрос.УстановитьПараметр("Распределяемые",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	Запрос.УстановитьПараметр("ЕНВД",          Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК ВидРасхода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|				И Не Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (МЕСЯЦ(ХозрасчетныйОбороты.Период) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	
	
	Если ВидСуммы = "КО" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаНУОборотДт", "СуммаНУОборотКт");
		Счет = ПС.ПрочиеДОходы;
	Иначе
		Счет = ПС.ПрочиеРасходы;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
			ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "Строка 100 ""Внереализационные расходы - всего""", "+", "!" + ВидСуммы, Выборка.Сумма, Счет, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Выборка.ВидРасхода, СписокПрочихДоходовИРасходов));

	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	
	СтруктураПараметров = ПолучитьПараметрыДляОбработкиЗапросов();
	Если СтруктураПараметров.ПланСчетов = "Налоговый" Тогда
		Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
		Обраб.Форма = ЭтаФорма;
		ТекущийЛист = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		ТекущееТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущийЛист];
		Обраб.ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
		Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
		
		Возврат;
	КонецЕсли;
	
	
    ТекущийЛист = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
    ТекущееТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущийЛист];
	ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
	Если ИмяЯчейки = "П002010001103"  Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации товаров (работ, услуг) собственного производства");
	ИначеЕсли ИмяЯчейки = "П002010001203" Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации покупных товаров и продукции");
	ИначеЕсли ИмяЯчейки = "П002010001303"  Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации имущественных прав");
	ИначеЕсли ИмяЯчейки = "П002010001403"  Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации прочего имущества");
	ИначеЕсли ИмяЯчейки = "П002010002003"  Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации ЦБ");
	ИначеЕсли  (НЕ флКвартальноеЗаполнение И ИмяЯчейки = "П002000001003") Тогда
		ВывестиРасшифровкуДоходов("Выручка от реализации товаров (работ, услуг) собственного производства");
		ВывестиРасшифровкуДоходов("Выручка от реализации покупных товаров и продукции");
		ВывестиРасшифровкуДоходов("Выручка от реализации имущественных прав");
		ВывестиРасшифровкуДоходов("Выручка от реализации прочего имущества");
		ВывестиРасшифровкуДоходов("Выручка от реализации ЦБ");
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
    Обраб.ИмяЯчейки = ИмяЯчейки;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	Иначе
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
    Обраб.ИмяЯчейки = ИмяЯчейки;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	
	КонецЕсли;
     
КонецПроцедуры


Процедура ЗаполнитьАвто() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОчиститьОтчет(Истина, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьПараметрыДляОбработкиЗапросов();
	
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если Не флКвартальноеЗаполнение Тогда
	ТаблицаИтогов = Новый ТаблицаЗначений;
	ТаблицаИтогов.Колонки.Добавить("ИмяЯчейки");
	ТаблицаИтогов.Колонки.Добавить("ИмяИтоговойЯчейки");
	ТаблицаИтогов.Колонки.Добавить("ТекстИтоговойЯчейки");
	
	Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002010001103";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	Строка = ТаблицаИтогов.Добавить(); 
	Строка.ИмяЯчейки = "П002010001103";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002010001203";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002010001303";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002010001403";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002010002003";  
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030003003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030007003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030010003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030011003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030018003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030021003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030024003";
	Строка.ИмяИтоговойЯчейки = "П002000001003"; Строка.ТекстИтоговойЯчейки = "Доходы от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	
	Строка.ИмяЯчейки = "П002010010003";
	Строка.ИмяИтоговойЯчейки = "П002000002003";  Строка.ТекстИтоговойЯчейки = "Внереализационные доходы";
	 Строка = ТаблицаИтогов.Добавить();
	
	Строка.ИмяЯчейки = "П002020001003";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020002003";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020004003";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020005903";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020006003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020006103";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020007003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030004003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030008003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030012003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030013003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030019003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030022003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030025003";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002020009003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
    Строка.ИмяЯчейки = "П002020010003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
    Строка.ИмяЯчейки = "П002020011003";
	Строка.ИмяИтоговойЯчейки = "П002000003003";  Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();
    Строка.ИмяЯчейки = "П002020012003";
	Строка.ИмяИтоговойЯчейки = "П002000003003"; Строка.ТекстИтоговойЯчейки = "Расходы, уменьшающие сумму доходов от реализации";
	 Строка = ТаблицаИтогов.Добавить();

    Строка.ИмяЯчейки = "П002020020003";
	Строка.ИмяИтоговойЯчейки = "П002000004003";  Строка.ТекстИтоговойЯчейки = "Внереализационные расходы";
	 Строка = ТаблицаИтогов.Добавить();
    Строка.ИмяЯчейки = "П002020030003";
	Строка.ИмяИтоговойЯчейки = "П002000004003";  Строка.ТекстИтоговойЯчейки = "Внереализационные расходы";
	 Строка = ТаблицаИтогов.Добавить();
	
	Строка.ИмяЯчейки = "П002030006003";
	Строка.ИмяИтоговойЯчейки = "П002000005003";   Строка.ТекстИтоговойЯчейки = "Убытки";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030009003";
	Строка.ИмяИтоговойЯчейки = "П002000005003";  Строка.ТекстИтоговойЯчейки = "Убытки";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030015003";
	Строка.ИмяИтоговойЯчейки = "П002000005003";   Строка.ТекстИтоговойЯчейки = "Убытки";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030016003";
	Строка.ИмяИтоговойЯчейки = "П002000005003";  Строка.ТекстИтоговойЯчейки = "Убытки";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030020103";
	Строка.ИмяИтоговойЯчейки = "П002000005003";  Строка.ТекстИтоговойЯчейки = "Убытки";
	 Строка = ТаблицаИтогов.Добавить();
	Строка.ИмяЯчейки = "П002030026003";
	Строка.ИмяИтоговойЯчейки = "П002000005003";  Строка.ТекстИтоговойЯчейки = "Убытки";
	 
	
	ТаблицаСуммИтогов = ТаблицаИтогов.Скопировать();
	ТаблицаСуммИтогов.Колонки.Добавить("Сумма",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСуммИтогов.ЗаполнитьЗначения(0,"Сумма");
	ТаблицаСуммИтогов.Свернуть("ИмяИтоговойЯчейки,ТекстИтоговойЯчейки", "Сумма");
КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Декларация не может быть заполнена для такой конфигурации", Отказ, "Декларация по прибыли", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли СтруктураПараметров.ПланСчетов = "Хозрасчетный" Тогда
		ЗаполнитьАвтоДляХозрасчетный();
		мОсновнойПланСчетов = ПланыСчетов.Хозрасчетный;
	Иначе
		ЗаполнитьАвтоДляНалоговый();
		мОсновнойПланСчетов = ПланыСчетов.Налоговый;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьАвтоДляНалоговый() 
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли;

	СпП.Очистить();	
	Модифицированность = Истина;

	// Начало модуля автозаполнения.

	ПС = ПланыСчетов["Налоговый"];
	
	// таблица итогов по всем счетам без анлитики
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), ,) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет
	|
	|ИТОГИ СУММА(ДО), СУММА(КО) ПО
	|	Счет ИЕРАРХИЯ";	
	мБухИтоги = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с разбивкой по виду затрат
	
	СчетаКосвенныхЗатрат = Новый Массив;
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОсновногоПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыПоВыявленномуБраку);
	
	Если Не СтруктураПараметров.ЕНВД Тогда
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.ИздержкиОбращенияРаспределяемые);
		СчетаКосвенныхЗатрат.Добавить(ПС.КоммерческиеРасходыРаспределяемые);
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Счет",           СчетаКосвенныхЗатрат);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажу);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|						ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ <> &ТранспортныеРасходы
	|					ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ <> &ТранспортныеРасходы
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ";
	
	мБухИтогиКосвЗатрат = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
		
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	мБухИтоги91 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();	
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "УПП" Или ИДКонфигурации = "КА" Тогда
		Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	КонецЕсли;

	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидНУ",        Массив);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("СчетР",        ПС.ПрочиеРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(0) КАК ЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидНУ),
	|			(НЕ КорСчет В ИЕРАРХИИ (&КорСчет)),
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(-НалоговыйОбороты.СуммаОборотКт),
	|	СУММА(0),
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетР),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидНУ),
	|			КорСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	мБухИтоги917 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();	
		
	Запрос.УстановитьПараметр("Счет",  ПС.ВнереализационныеДоходы);
		МассивЗапасовНУ = Новый Массив;
		МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
		МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
		МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
		МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
		МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
		МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.Материалы);
		МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
		МассивЗапасовНУ.Добавить(ПС.Товары);
		МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
		МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",  МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчета
	|				И Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов,
	|			КОРСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК НалоговыйОбороты";
	
	Результат = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	мБухИтоги911_Излишки = ?(Результат.Количество() = 0, 0, Результат.Итог("КО"));
	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
	СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
	СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	
	//установка значения и добавление расшифровки происходит после описания заполнения лист 2 приложение 4
	//после проверки на номер месяца заполнения.
	
	// лист 2 приложение 1
	Счет90011 = ПС.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Счет91015 = ПС.ВыручкаОтРеализацииИмущественныхПрав;
	Счет91014 = ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
	Счет90012 = ПС.ВыручкаОтРеализацииПокупныхТоваров;;
	Счет91011 = ПС.ВыручкаОтРеализацииОсновныхСредств;
	Счет91012 = ПС.ВыручкаОтРеализацииНематериальныхАктивов;
	Счет91013 = ПС.ВыручкаОтРеализацииОбъектовСтроительства;
	Счет91016 = ПС.ВыручкаОтРеализацииЦенныхБумаг;
	Счет91026 = ПС.РасходыСвязанныеСРеализациейЦенныхБумаг;

	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства
	П002010001103 = мБухИтогиНайти("КО", Счет90011, мБухИтоги);	
	
	// Строка 012 - выручка от реализации покупных товаров
	П002010001203 = мБухИтогиНайти("КО", Счет90012, мБухИтоги);
	
	// Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	П002010001303 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги91);
	
	// Строка 014 - выручка от реализации прочего имущества
	П002010001403 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги91);
	
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка
	П002010002003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, мБухИтоги91);
	
	// Строка 100 - Внереализационные доходы всего
	П002010010003 = ?(мБухИтоги917.Количество() = 0, 0, мБухИтоги917.Итог("КО"));
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	П002010010103 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги91);
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги91);
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в статье 251 НК)
	П002010010303 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества, мБухИтоги91);
	
	// Строка 104 - в виде излишков
	П002010010403 = мБухИтоги911_Излишки;
	
	// Строка 105 - в виде востановления аморт.премии
	П002010010503 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии, мБухИтоги91);
	
	//// Строка 200 - Сумма доходов, не учитываемых при определении налоговой базы
	//П002010020003 = мБухИтогиНайти("КО", ПС.ДоходыНеУчитываемые, мБухИтоги);
	
	// лист 2 приложение 2
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос.УстановитьПараметр("Счет",         ПС.СебестоимостьПродаж);
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	ПокупныеТовары.Добавить(ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	Запрос.УстановитьПараметр("Товары", ПС.Товары);
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), , ) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&Товары), ) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&ПокупныеТоварыОтгруженные), ) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав), ) КАК НалоговыйОбороты";
	мБухИтоги902 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	СебестоимостьПродаж                        = мБухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = мБухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = мБухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = мБухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос.УстановитьПараметр("Счет44",       ПС.РасходыНаПродажу);
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажу);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет44),
	|		,
	|		Организация В (&СписокОрганизаций)
	|			,
	|		КорСчет В ИЕРАРХИИ (&Счет90),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	мБухИтоги44 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, ложь).Выгрузить();                                                                                                                                                                                                                                       
	П002020002003 = мБухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	
	// обороты счета 91.02.9 - Прочие косвенные расходы (налог на землю, налог на имущество и т.д.)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет",         ПланыСчетов.Налоговый.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Массив =Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов",  Массив);
	Запрос.УстановитьПараметр("ВидПрочихНалоговИСборов",  Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов В ИЕРАРХИИ (&ВидПрочихДоходовИРасходов)
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочиеКосвенныеРасходы,
	|	НалоговыйОбороты.СуммаОборотДт КАК ДО,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидПрочихНАлоговИСборов
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочиеНалогиИСборы
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов В ИЕРАРХИИ (&ВидПрочихДоходовИРасходов)
	|			ТОГДА -НалоговыйОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидПрочихНАлоговИСборов
	|			ТОГДА -НалоговыйОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), КорСчет = &КорСчет, ) КАК НалоговыйОбороты";
	
	
	мБухИтоги91029 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы = мБухИтогиКосвЗатрат.Итог("КО");
	ПрочиеКосвенныеРасходы = мБухИтоги91029.Итог("ПрочиеКосвенныеРасходы");
	ПрочиеНалогиИСборы     = мБухИтоги91029.Итог("ПрочиеНалогиИСборы");
	П002020004003 = КосвенныеРасходы + ПрочиеКосвенныеРасходы + ПрочиеНалогиИСборы;
		
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК																	
	НалогиИСборы =  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, мБухИтогиКосвЗатрат);
	
	// Строка 042 - Расходы на капитальные вложения размере не более 10%  
    П002020004203 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, мБухИтогиКосвЗатрат);	
	
	// Строка 059 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	ПослеНаступленияСрокаПлатежа = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	ДоНаступленияСрокаПлатежа    = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
	СтоимостьВсехИмущественныхПрав = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, мБухИтоги);
    СтоимостьИмущественныхПравОбслПроизвдств = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91);
				  
	П002020005903 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020005903", П002020005903); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005903", "Строка 059 ""Стоимость имущественных прав""", "+", "!ДО", П002020005903, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, СписокПрочихДоходовИРасходов));
				  
	// Строка 052 - Расходы на НИОКР 
	П002020005203 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, мБухИтогиКосвЗатрат);
	
				  
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,
	//              связанные с его реализацией
	П002020006003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги91);
	
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг
	П002020007003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, мБухИтоги91);
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности																	
	П002020009003 = мБухИтогиНайти("КО", ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, мБухИтоги);
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	П002020010003 = мБухИтогиНайти("КО", ПС.ОтрицательныйРезультатОтРеализацииАмортизируемогоИмущества, мБухИтоги);
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	АмортизацияОсновныхСредств       = мБухИтогиНайти("КО", ПС.АмортизацияОсновныхСредств, мБухИтоги);
	// Строка 132 - Сумма начисленной амортизации по нематериальным активам
    АмортизацияНематериальныхАктивов = мБухИтогиНайти("КО", ПС.АмортизацияНематериальныхАктивов, мБухИтоги);
	
	// Строка 201 - Расходы ввиде процентов по долговым обязательствам
	П002020020103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, мБухИтоги917);
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	П002020030103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги917);
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	П002020030203 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, мБухИтоги917);
	
	// Строка 200 - Внереализационные расходы
	П002020020003 = ?(мБухИтоги917.Количество() = 0, 0, мБухИтоги917.Итог("ДО")) - П002020030103 - П002020030203;
		
	// Строка 204 - Расходы на ликвидацию ОС
	П002020020403 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги917);
	
	// Строка 204 - штрафы, пени и иные санкции за нарушение договорных или долговых обязательств
	П002020020503 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, мБухИтоги917);
	
	
	// лист 2 приложение 3
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = мБухИтогиНайти("КО", Счет91011, мБухИтоги);
	ВыручкаОтРеализацииНМА = мБухИтогиНайти("КО", Счет91012, мБухИтоги);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РасходыПоОС = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейОсновныхСредств, мБухИтоги);  
	РасходыПОНМА =  мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтоги);
	П002030004003 = РасходыПоОС + РасходыПОНМА;
				
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки)																
		
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль)														
	
	ДоходыОказаниеФинансовыхУслуг      = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	ДоходыПослеНаступленияСрокаПлатежа = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	ДоходыДоНаступленияСрокаПлатежа    = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
	
	// Строка 070 - выручка от реализации права требования как реализации финансовых услуг
	П002030007003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	
	// Строка 080 - Стоимость реализованного права требования при  его реализации как финансовой услуги
	П002030008003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)																													
	П002030012003 =  мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030013003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыСвязанныеСРеализациейИмущественныхПрав);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация В (&СписокОрганизаций)
	|			,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты";
	мБухИтоги170 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	// Строка 170 - убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода (включается в строку 200 Приложения № 2 к Листу 02)			
	П002030017003 = мБухИтоги170.Итог("СуммаОборотДт");
	
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
    //              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы			
	П002030018003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91); 
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде																	
	
	П002030019003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91); 
	
	// лист 2 приложение 4
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.УбыткиПрошлыхЛет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчета) КАК НалоговыйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстаткиИОбороты.Субконто1,
	|	НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт";
	УбыткиПрошлыхЛет = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров,Ложь).Выгрузить();
	
	П1997 = 0;
	П1998 = 0;
    П1999 = 0;
    П2000 = 0;
    П2001 = 0;
    П2002 = 0;
    П2003 = 0;
    П2004 = 0;
    П2005 = 0;
    П2006 = 0;
    П2007 = 0;
    П2008 = 0;
    П2009 = 0;
    П2010 = 0;
    П2011 = 0;
	
	О1997 = 0;
	О1998 = 0;
    О1999 = 0;
    О2000 = 0;
    О2001 = 0;
    О2002 = 0;
    О2003 = 0;
    О2004 = 0;
    О2005 = 0;
    О2006 = 0;
    О2007 = 0;
    О2008 = 0;
    О2009 = 0;
    О2010 = 0;
    О2011 = 0;
	
	Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
		
	ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
	СуммаСписанногоУбытка   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
	СуммаНеСписанногоУбытка = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
	Если ГодУбытка = 1997 Тогда
	П1997 = СуммаСписанногоУбытка; РБП1997 = УбытокПрошлыхЛет.Субконто1;
	О1997 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 1998 Тогда
	П1998 = СуммаСписанногоУбытка; РБП1998 = УбытокПрошлыхЛет.Субконто1;
	О1998 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 1999 Тогда
	П1999 = СуммаСписанногоУбытка; РБП1999 = УбытокПрошлыхЛет.Субконто1;
	О1999 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2000 Тогда
	П2000 = СуммаСписанногоУбытка; РБП2000 = УбытокПрошлыхЛет.Субконто1;
	О2000 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2001 Тогда
	П2001 = СуммаСписанногоУбытка; РБП2001 = УбытокПрошлыхЛет.Субконто1;
	О2001 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2002 Тогда
	П2002 = СуммаСписанногоУбытка; РБП2002 = УбытокПрошлыхЛет.Субконто1;
	О2002 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2003 Тогда
	П2003 = СуммаСписанногоУбытка; РБП2003 = УбытокПрошлыхЛет.Субконто1;
	О2003 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2004 Тогда
	П2004 = СуммаСписанногоУбытка; РБП2004 = УбытокПрошлыхЛет.Субконто1;
	О2004 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2005 Тогда
	П2005 = СуммаСписанногоУбытка; РБП2005 = УбытокПрошлыхЛет.Субконто1;
	О2005 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2006 Тогда
	П2006 = СуммаСписанногоУбытка; РБП2006 = УбытокПрошлыхЛет.Субконто1;
	О2006 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2007 Тогда
	П2007 = СуммаСписанногоУбытка; РБП2007 = УбытокПрошлыхЛет.Субконто1;
	О2007 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2008 Тогда
	П2008 = СуммаСписанногоУбытка; РБП2008 = УбытокПрошлыхЛет.Субконто1;
	О2008 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2009 Тогда
	П2009 = СуммаСписанногоУбытка; РБП2009 = УбытокПрошлыхЛет.Субконто1;
	О2009 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2010 Тогда
	П2010 = СуммаСписанногоУбытка; РБП2010 = УбытокПрошлыхЛет.Субконто1;
	О2010 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2011 Тогда
	П2011 = СуммаСписанногоУбытка; РБП2011 = УбытокПрошлыхЛет.Субконто1;
	О2011 = СуммаНеСписанногоУбытка;
КонецЕсли;

КонецЦикла;

	// Строка 020 -     убытка, полученного до 1 января 2002 года																
	
	// Строка 150 - Сумма убытка или части убытка, уменьшающего   
	//              налоговую базу за отчетный  (налоговый)  период
	СуммаПоСтроке050Листа02 = 0;
	СуммаПоСтроке140Листа02 = 0;
	СуммаПоСтроке120Листа05 = 0;
	СуммаПоСтроке120Листа06 = 0;
	СуммаПоСтроке230Листа07 = 0;
	СуммаПоСтроке110Листа08 = 0;
	СуммаПоСтроке590Листа09 = 0;

	//Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
	//   И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.5" Тогда
	    П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		
	//Иначе
	//	Если мРаздел2_Прил4.Области.П002030009003.Значение > 0 Тогда 
	//		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", Мин(мРаздел2_Прил4.Области.П002030001003.Значение,мРаздел2_Прил4.Области.П002030009003.Значение * 3 / 10));
	//		
	//	Иначе
	//		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", 0);
	//	КонецЕсли;
	//КонецЕсли;
	
	
	// Строка 160 -    сумма неперенесенного убытка	
	П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
	
	// Строка 170 -    сумма неперенесенного убытка, полученного до 1 января 2002 года	
	П002040017003 = О1997 + О1998 + О1999 + О2000 + О2001;
	
	// Строка 180 -    сумма неперенесенного убытка, полученного после 1 января 2002 года	
	П002040018003 = П002040016003 - П002040017003;
		
		//Приложение 1
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001103", П002010001103); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001103", "Строка 011 ""Выручка от реализации товаров (работ, услуг) собственного производства""", "+", "!КО", П002010001103, Счет90011, , , , "Лист02_Прил1");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001203", П002010001203);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001203", "Строка 012 ""Выручка от реализации покупных товаров""", "+", "!КО", П002010001203, Счет90012, , , , "Лист02_Прил1");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001303", П002010001303);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001303", "Строка 013 ""Выручка от реализации имущественных прав, за исключением доходов от реализации права требования""", "+", "!КО", П002010001303, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001403", П002010001403);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001403", "Строка 014 ""Выручка от реализации прочего имущества""", "+", "!КО", П002010001403, ПС.ПрочиеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010002003", П002010002003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010002003", "Строка 020 ""Выручка от реализации ценных бумаг профессиональных участников рынка""", "+", "!КО", П002010002003, ПС.ПрочиеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010003", П002010010003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010003", "Строка 100 ""Внереализационные доходы всего""", "+", "!КО", П002010010003, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010103", П002010010103);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010103", "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""", "+", "!КО", П002010010103, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010203", П002010010203);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010203", "Строка 102 ""Доходы от ликвидации основных средств""", "+", "!КО", П002010010203, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010303", П002010010303);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010303", "Строка 103 ""Доходы от безвозмездного получения имущества""", "+", "!КО", П002010010303, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010403", П002010010403);
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010503", П002010010503);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010503", "Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""", "+", "!КО", П002010010503, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии, СписокПрочихДоходовИРасходов));
		
		//УстановитьЗначениеПоказателя(ЭтаФорма, "П002010020003", П002010020003);
		//ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010020003", "Строка 103 ""Сумма доходов, не учитываемых при определении налоговой базы""", "+", "!КО", П002010020003, ПС.ДоходыНеУчитываемые, , , , "Лист02_Прил1");
		
		//Приложение 2
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020001003", П002020001003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""", "+", "!ДО", СебестоимостьПродаж, ПС.СебестоимостьПродаж, , , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020002003", П002020002003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""", "+", "!КО", мБухИтоги44.Итог("СуммаОборотКт"), ПС.РасходыНаПродажу, ПС.Продажи_РасходыНаПродажу, , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020003003",  П002020003003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "Строка 030 ""Стоимость реализованных покупных товаров""", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004003",  П002020004003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "Строка 040 ""Косвенные расходы""", "+", "", 0, , , , , "Лист02_Прил2");
		ВставитьРасшифровкуКосвенныхРасходов("П002020004003",СтруктураПараметров);
		
		СписокПрочихКосвенных = мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, СписокПрочихДоходовИРасходов);
		Если СписокПрочихКосвенных <> 0 Тогда
			СписокПрочихКосвенных.Добавить(мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, СписокПрочихДоходовИРасходов));
		КонецЕсли;
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "", "+", "!ДО", ПрочиеКосвенныеРасходы, ПланыСчетов.Налоговый.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, СписокПрочихДоходовИРасходов));
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "", "+", "!ДО", ПрочиеНалогиИСборы, ПланыСчетов.Налоговый.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));

		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004103",  НалогиИСборы + ПрочиеНалогиИСБоры);         
		
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "Строка 041 ""Суммы налогов и сборов""", "+", "", 0, , , , , "Лист02_Прил2");
		ВставитьРасшифровкуКосвенныхРасходов("П002020004103",СтруктураПараметров, Перечисления.ВидыРасходовНУ.НалогиИСборы);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "", "+", "!ДО", ПрочиеНалогиИСборы, ПланыСчетов.Налоговый.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004203", П002020004203);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004203", "Строка 041 ""Расходы на капитальные вложения размере не более 10%""", "+", "", 0, , , , ,"Лист02_Прил2");
		ВставитьРасшифровкуКосвенныхРасходов("П002020004203",СтруктураПараметров, Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020005203", П002020005203);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005203", "Строка 052 ""Расходы на НИОКР""", "+", "", 0, , , , , "Лист02_Прил2");
		ВставитьРасшифровкуКосвенныхРасходов("П002020005203",СтруктураПараметров, Перечисления.ВидыРасходовНУ.НИОКР);
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020006003", П002020006003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "Строка 060 ""Цена приобретения реализованного прочего имущества""", "+", "!ДО", П002020006003, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020007003", П002020007003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020007003", "Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг""", "+", "!ДО", П002020007003, ПС.РасходыСвязанныеСРеализациейЦенныхБумаг, , , , "Лист02_Прил2");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020009003", П002020009003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020009003", "Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""", "+", "!КО", П002020009003, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, , , "Лист02_Прил2");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020010003", П002020010003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020010003", "Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""", "+", "!КО", П002020010003, ПС.ОтрицательныйРезультатОтРеализацииАмортизируемогоИмущества, , , , "Лист02_Прил2");
		
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мДатаКонцаПериодаОтчета, , Организация, "НУ");
		Если мУчетнаяПолитика = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		
		СпособАмортизации = ?(мУчетнаяПолитика.Количество() = 0 Или мУчетнаяПолитика.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный, 1,2);
		Если СпособАмортизации = 1 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013103", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013103", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО", АмортизацияОсновныхСредств, ПС.АмортизацияОсновныхСредств, , , , "Лист02_Прил2");
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013103", "", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
			
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013203", АмортизацияНематериальныхАктивов);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013203", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
		Иначе
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013303", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013303", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО", АмортизацияОсновныхСредств, ПС.АмортизацияОсновныхСредств, , , , "Лист02_Прил2");
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013303", "", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
			
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013403", АмортизацияНематериальныхАктивов);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013403", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
		КонецЕсли;
		Счет91027 = ПС.ВнереализационныеРасходы;
		// Строка 135 - Способ амортизации
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013503", СпособАмортизации);
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020103", П002020020103);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020103", "Строка 201 ""Расходы ввиде процентов по долговым обязательствам""", "+", "!ДО", П002020020103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020030103", П002020030103);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030103", "Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""", "+", "!ДО", П002020030103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020030203", П002020030203);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030203", "Строка 302 ""Суммы безнадежных долгов""", "+", "!ДО", П002020030203, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020003", П002020020003);
		Сч91_8 = 0;
		Сч91_8ЕНВД = 0;
		Если НЕ СтруктураПараметров.ЕНВД Тогда
			 Сч91_8 = мБухИтогиНайти("ДО", ПС.ВнереализационныеРасходыРаспределяемые, мБухИтоги);
			 Сч91_8ЕНВД = мБухИтоги917.Итог("ЕНВД");
        КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "Строка 200 ""Внереализационные расходы""", "+", "!ДО", ?(мБухИтоги917.Количество() = 0, 0, мБухИтоги917.Итог("ДО")) - Сч91_8 + Сч91_8ЕНВД, ПС.ВнереализационныеРасходы, , , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО",  - П002020030103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО",  - П002020030203, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
		Если НЕ СтруктураПараметров.ЕНВД Тогда
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "+", "!ДО", Сч91_8, ПС.ВнереализационныеРасходыРаспределяемые, , , , "Лист02_Прил2");
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!КО",  - Сч91_8ЕНВД, ПС.ВнереализационныеРасходыРаспределяемые, ПС.РасходыПоДеятельностиЕНВД, , , "Лист02_Прил2");
		КонецЕсли;
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020403", П002020020403);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020403", "Строка 204 ""Расходы на ликвидацию выводимых из эксплуатации основных средств, объектов незавершенного строительства и иного имущества""", "+", "!ДО", П002020020403, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020503", П002020020503);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020503", "Строка 205 ""штрафы, пени и иные санкции за нарушение договорных или долговых обязательств""", "+", "!ДО", П002020020503, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, СписокПрочихДоходовИРасходов));
		
		//Приложение 3
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030003003", П002030003003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "Строка 030 ""Выручка от реализации амортизируемого имущества""", "+", "!КО", ВыручкаОтРеализацииОС, Счет91011, , , , "Лист02_Прил3");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "", "+", "!КО", ВыручкаОтРеализацииНМА, Счет91012, , , , "Лист02_Прил3");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030004003", П002030004003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""", "+", "!ДО", РасходыПоОС, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , , , "Лист02_Прил3");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "", "+", "!ДО", РасходыПОНМА, ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, , , , "Лист02_Прил3");
		
		П002030005003 = ПрибылиИУбытки(ПС.ВыручкаОтРеализацииОсновныхСредств, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , "Прибыль", (СтруктураПараметров.ПланСчетов = "Налоговый")) + ПрибылиИУбытки(ПС.ВыручкаОтРеализацииНематериальныхАктивов, ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, , "Прибыль", (СтруктураПараметров.ПланСчетов = "Налоговый")); 
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030005003", П002030005003); 
		
		П002030006003 = ПрибылиИУбытки(ПС.ВыручкаОтРеализацииОсновныхСредств, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , "Убыток", (СтруктураПараметров.ПланСчетов = "Налоговый")) + ПрибылиИУбытки(ПС.ВыручкаОтРеализацииНематериальныхАктивов, ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, , "Убыток", (СтруктураПараметров.ПланСчетов = "Налоговый"));
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030006003", П002030006003); 
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030007003", П002030007003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030007003", "Строка 070 ""Выручка от реализации права требования как реализации финансовых услуг""", "+", "!КО", П002030007003, ПС.ПрочиеДоходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030008003", П002030008003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030008003", "Строка 080 ""Стоимость реализованного права требования при  его реализации как финансовой услуги""", "+", "!ДО", П002030008003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", П002030010003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030010003", "Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030010003, ПС.ПрочиеДоходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030011003", П002030011003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030011003", "Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030011003, ПС.ПрочиеДоходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030012003", П002030012003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030012003", "Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030012003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030013003", П002030013003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030013003", "Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030013003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030017003", П002030017003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030017003", "Строка 170 ""Убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода""", "+", "!ДО", П002030017003, ПС.ВнереализационныеРасходы, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , "Лист02_Прил3");
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030018003", П002030018003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030018003", "Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""", "+", "!КО", П002030018003, ПС.ПрочиеДоходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002030019003", П002030019003); 
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030019003", "Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""", "+", "!ДО", П002030019003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
		
	 НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);

	//Приложение 4
	Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
		//приложение заполняется	
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040002003", П1997+П1998 + П1999 + П2000 + П2001);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году - сальдо начальное по дебету счета 97.11", П1997, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1997);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году - сальдо начальное по дебету счета 97.11", П1998, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1998);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году - сальдо начальное по дебету счета 97.11", П1999, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1999);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году - сальдо начальное по дебету счета 97.11", П2000, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2000);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году - сальдо начальное по дебету счета 97.11", П2001, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2001);
		
		Если П2002 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040004001", "2002");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040004003", П2002);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040004003", "Сумма убытка, полученного в 2002 году", "+", "!СНД", П2002, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2002);
		КонецЕсли;
		
		Если П2003 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040005001", "2003");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040005003", П2003);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040005003", "Сумма убытка, полученного в 2003 году", "+", "!СНД", П2002, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2003);
		КонецЕсли;
		
		Если П2004 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040006001", "2004");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040006003", П2004);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040006003", "Сумма убытка, полученного в 2004 году", "+", "!СНД", П2004, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2004);
		КонецЕсли;
		
		Если П2005 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040007001", "2005");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040007003", П2005);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040007003", "Сумма убытка, полученного в 2005 году", "+", "!СНД", П2005, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2005);
		КонецЕсли;
		
		Если П2006 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040008001", "2006");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040008003", П2006);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040008003", "Сумма убытка, полученного в 2006 году", "+", "!СНД", П2006, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2006);
		КонецЕсли;
		
		Если П2007 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040009001", "2007");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040009003", П2007);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040009003", "Сумма убытка, полученного в 2007 году", "+", "!СНД", П2007, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2007);
		КонецЕсли;
		
		Если П2008 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040010001", "2008");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040010003", П2008);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040010003", "Сумма убытка, полученного в 2008 году", "+", "!СНД", П2008, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2008);
		КонецЕсли;
		
		Если П2009 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040011001", "2009");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040011003", П2009);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040011003", "Сумма убытка, полученного в 2009 году", "+", "!СНД", П2009, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2009);
		КонецЕсли;
		
		Если П2010 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040012001", "2010");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040012003", П2010);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040012003", "Сумма убытка, полученного в 2010 году", "+", "!СНД", П2010, ПС.УбыткиПрошлыхЛет, , , , , "Лист02_Прил4", , , РБП2010);
		КонецЕсли;
		
		Если П2011 <> 0 Тогда
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040013001", "2011");
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040013003", П2011);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040013003", "Сумма убытка, полученного в 2011 году", "+", "!СНД", П2011, ПС.УбыткиПрошлыхЛет, , , , , "Лист02_Прил4", , , РБП2011);
		КонецЕсли;
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", П002040015003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040015003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период", "+", "!КО", П002040015003, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4");
		
		Если НомерМесяца = 12 Тогда 
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040016003", П002040016003);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040016003", "неперенесенного убытка", "+", "!СКД", П002040016003, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4");
			
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040017003", П002040017003);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году - сальдо конечное по дебету счета 97.11", О1997, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1997);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году - сальдо конечное по дебету счета 97.11", О1998, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1998);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году - сальдо конечное по дебету счета 97.11", О1999, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1999);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году - сальдо конечное по дебету счета 97.11", О2000, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2000);
			ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году - сальдо конечное по дебету счета 97.11", О2001, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2001);
			
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002040018003", П002040018003);
		КонецЕсли;
	Иначе
		//приложение не заполняется	
		//заполняются показатели листа 02
		//стр.110 = стр.150 Прил.4 Лист02
		П002000011003 = П002040015003;
		
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002000011003", П002000011003);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002000011003", "Строка 110 ""Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период""", "+", "!КО", П002040015003, ПС.УбыткиПрошлыхЛет, , , , "Лист02");
	КонецЕсли; 
	
	// обновим ставки
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	// Конец автозаполнения.
	// Операции, необходимые после процедуры автозаполнения.
	Расчет("");
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоДляХозрасчетный() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли;

	СпП.Очистить();	
	Модифицированность = Истина;

	// Начало модуля автозаполнения.
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		НалоговыйУчет = РегламентированнаяОтчетность;
	КонецЕсли;
	
	ПС = ПланыСчетов["Хозрасчетный"];
	
	// таблица итогов по всем счетам без анлитики
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет41",  ПланыСчетов.Хозрасчетный.Товары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(0),
	|	СУММА(0),
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), (НЕ КорСчет = &Счет41), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), КорСчет = &Счет41, ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет ИЕРАРХИЯ";	
	
	мБухИтоги = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с рабивкой по виду затрат
	Запрос.УстановитьПараметр("Счет",  НалоговыйУчет.ПолучитьМассивСчетовУчетаРасходов());
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходыНеЕНВД);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И (НЕ Субконто1.ВидРасходовНУ = &ТранспортныеРасходы),
	|			КорСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ";
	
	мБухИтогиКосвЗатрат = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	// прочие доходы и расходы
	
	ДолиЕНВД = НалоговыйУчет.ПолучитьДолиЕНВД(
		Новый Структура("ДатаНачалаПериода,ДатаКонцаПериода,СписокОрганизаций",
		мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, СтруктураПараметров.СписокОрганизаций));
	Запрос.МенеджерВременныхТаблиц = ДолиЕНВД;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
	|			ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
	|			ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (МЕСЯЦ(ХозрасчетныйОбороты.Период) = ДолиЕНВД.МесяцЕНВД)
	|
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет";
	
	мБухИтоги91 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	// из расходов по реализации амортизируемого имущества вычитаем перенос на расходы убытков от реализации
	РеализацияАмортизируемогоИмущества = Новый Массив;
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	Запрос.УстановитьПараметр("РеализацияАмортизируемогоИмущества", РеализацияАмортизируемогоИмущества);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
	|			ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
	|			ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&РеализацияАмортизируемогоИмущества),
	|			Корсчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (МЕСЯЦ(ХозрасчетныйОбороты.Период) = ДолиЕНВД.МесяцЕНВД)
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет";
	
	мБухИтогиПереносУбытковПоОСиНМА = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	/// внереализационные доходы и расходы
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  НалоговыйУчет.ПолучитьМассивВнереализационныхРасходов());
	Запрос.МенеджерВременныхТаблиц = ДолиЕНВД;
	Запрос.УстановитьПараметр("Распределяемые",          Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (МЕСЯЦ(ХозрасчетныйОбороты.Период) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	мБухИтоги917 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",  ПС.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	
		МассивЗапасовНУ = Новый Массив;
		МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
		МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
		МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
		МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
		МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
		МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
		МассивЗапасовНУ.Добавить(ПС.Материалы);
		МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
		МассивЗапасовНУ.Добавить(ПС.Товары);
		МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
		МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",  МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов,
	|			КорСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК ХозрасчетныйОбороты";
	
	
	Результат = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	Если Результат.Количество() = 0 Тогда
		мБухИтоги911_Излишки = 0 
	Иначе
		мБухИтоги911_Излишки = Результат.Итог("КО");
	КонецЕсли;

	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
    СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
    СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ВидРБП КАК Вид
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокРБП = Новый ТаблицаЗначений;
    СписокРБП.Колонки.Добавить("Счет");
	СписокРБП.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Вид");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокРБП = СписокРБП.Добавить();
		СтрокаСписокРБП.Счет = ВыборкаВидовЗатрат.Вид;
		СтрокаСписокРБП.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокРБП.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	
	// лист 2 приложение 1
	Счет9001 = ПС.ВыручкаНеЕНВД;
	Счет9101 = ПС.ПрочиеДоходы;
	Счет9002 = ПС.СебестоимостьПродажНеЕНВД;;
	Счет9102 = ПС.ПрочиеРасходы;

	Запрос.УстановитьПараметр("Счет9001",     ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("Счет9002",     ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	Запрос.УстановитьПараметр("Номенклатура",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК СуммаДохода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет9001), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	ТаблицаДоходВсего = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Выручка.КоличествоОборотКт, 0) = 0
	|			ТОГДА ЕСТЬNULL(Выручка.СуммаНУОборотКт, 0)
	|		ИНАЧЕ ЕСТЬNULL(Выручка.СуммаНУОборотКт, 0) / ЕСТЬNULL(Выручка.КоличествоОборотКт, 0) * ЕСТЬNULL(Себестоимость.КоличествоОборотКт, 0)
	|	КОНЕЦ КАК СуммаДохода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Запись, СчетДт В ИЕРАРХИИ (&Счет9002), , СчетКт В ИЕРАРХИИ (&СчетаУчетаТоваров), &Номенклатура, Организация В (&СписокОрганизаций)) КАК Себестоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Запись, (НЕ СчетДт В ИЕРАРХИИ (&Счет9001)), , СчетКт В ИЕРАРХИИ (&Счет9001), &Номенклатура, Организация В (&СписокОрганизаций)) КАК Выручка
	|		ПО (Выручка.Регистратор = Себестоимость.Регистратор)
	|			И (Выручка.СубконтоКт1 = Себестоимость.СубконтоКт1)";
	ТаблицаДоходТовары = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	
	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства
    П002010001103 = ТаблицаДоходВсего.Итог("СуммаДохода") - ТаблицаДоходТовары.Итог("СуммаДохода");
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001103", П002010001103); 
	
	// Строка 012 - выручка от реализации покупных товаров
	П002010001203 = ТаблицаДоходТовары.Итог("СуммаДохода");
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001203", П002010001203);
	
   // Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	П002010001303 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001303", П002010001303);
	                                                                         
	// Строка 014 - выручка от реализации прочего имущества
	П002010001403 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010001403", П002010001403);
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка
	
	П002010002003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010002003", П002010002003); 
	
	// Строка 100 - Внереализационные доходы всего
	П002010010003 = ?(мБухИтоги917.Количество() = 0, 0, мБухИтоги917.Итог("КО"));
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010003", П002010010003);
    ВставитьРасшифровкуВнереализационных("П002010010003",СтруктураПараметров, ДолиЕНВД, "КО", СписокПрочихДоходовИРасходов);
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	П002010010103 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010103", П002010010103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010103", "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""", "+", "!КО", П002010010103, ПС.ПрочиеДоходы, , , , "Лист02_Прил1", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010203", П002010010203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010203", "Строка 102 ""Доходы от ликвидации основных средств""", "+", "!КО", П002010010203, ПС.ПрочиеДоходы, , , , "Лист02_Прил1", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в статье 251 НК)
	П002010010303 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010303", П002010010303);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010303", "Строка 103 ""Доходы от безвозмездного получения имущества""", "+", "!КО", П002010010303, ПС.ПрочиеДоходы, , , , "Лист02_Прил1", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества, СписокПрочихДоходовИРасходов));
	
	// Строка 104 - в виде излишков
	П002010010403 = мБухИтоги911_Излишки;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010403", П002010010403);
	
	// Строка 105 - в виде востановления аморт.премии
	П002010010503 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002010010503", П002010010503);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010503", "Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""", "+", "!КО", П002010010503, ПС.ПрочиеДоходы, "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии, СписокПрочихДоходовИРасходов));
	
	
	// лист 2 приложение 2
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос.УстановитьПараметр("Счет",         ПС.СебестоимостьПродажНеЕНВД);
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	Запрос.УстановитьПараметр("Товары", ПС.Товары);
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Массив = Новый Массив;
	Массив.Добавить(ПС.РасчетыСПоставщикамиИПодрядчиками);
	Массив.Добавить(ПС.РасчетыСПокупателямиИЗаказчиками);
	Массив.Добавить(ПС.РасчетыСРазнымиДебиторамиИКредиторами);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&Товары), ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&ПокупныеТоварыОтгруженные), ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав), ) КАК ХозрасчетныйОбороты";
	мБухИтоги902 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();
	
	СебестоимостьПродаж                        = мБухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = мБухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = мБухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = мБухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020001003", П002020001003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""", "+", "!ДО", СебестоимостьПродаж, ПС.СебестоимостьПродаж, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК Сумма,
	|	ХозрасчетныйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ Результат Цикл
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - Строка.Сумма, ПС.СебестоимостьПродаж, Строка.КорСчет, , , "Лист02_Прил2");
	КонецЦикла;
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос.УстановитьПараметр("Счет44",       ПС.РасходыНаПродажу);
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажуНеЕНВД);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт Как СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет44), , Организация В (&СписокОрганизаций), КорСчет = &Счет90, ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	мБухИтоги44 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();                                                                                                                                                                                                                                       
	П002020002003 = мБухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020002003", П002020002003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""", "+", "!КО", мБухИтоги44.Итог("СуммаОборотКт"), ПС.РасходыНаПродажу, ПС.Продажи_РасходыНаПродажу, , , "Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.РасчетыСПокупателямиИЗаказчиками, , , "Лист02_Прил2");
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020003003",  П002020003003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "Строка 030 ""Стоимость реализованных покупных товаров""", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.РасчетыСПокупателямиИЗаказчиками, , , "Лист02_Прил2");
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы = мБухИтогиКосвЗатрат.Итог("КО");
	НалогиИСборыПрочие =  мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, мБухИтоги91);
	ПрочиеКосвенныеРасходы = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, мБухИтоги91) + мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, мБухИтоги91);
	П002020004003 = КосвенныеРасходы + ПрочиеКосвенныеРасходы + НалогиИСборыПрочие;
	
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004003",  П002020004003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "Строка 040 ""Косвенные расходы""", "+", "", 0, , , , ,"Лист02_Прил2");
	ВставитьРасшифровкуКосвенныхРасходов("П002020004003",СтруктураПараметров);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "Прочие косвенные расходы", "+", "!ДО", ПрочиеКосвенныеРасходы, ПланыСчетов.Хозрасчетный.ПрочиеРасходы, , , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "Прочие налоги и сборы", "+", "!ДО", НалогиИСборыПрочие, ПланыСчетов.Хозрасчетный.ПрочиеРасходы, , , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));
	
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК																	
	
	НалогиИСборы =  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, мБухИтогиКосвЗатрат);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004103",  НалогиИСборы + НалогиИСборыПрочие);         
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "Строка 041 ""Суммы налогов и сборов""", "+", "", 0, , , , ,"Лист02_Прил2");
    ВставитьРасшифровкуКосвенныхРасходов("П002020004103",СтруктураПараметров, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "Прочие налоги и сборы", "+", "!ДО", НалогиИСборыПрочие, ПланыСчетов.Хозрасчетный.ПрочиеРасходы, , , , "Лист02_Прил2", , , ,мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));
	
	// Строка 042 - Расходы на капитальные вложения размере не более 10%  
    П002020004203 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, мБухИтогиКосвЗатрат);	
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020004203", П002020004203);
		
	
	// Строка 050 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	ПослеНаступленияСрокаПлатежа = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	ДоНаступленияСрокаПлатежа    = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
    СтоимостьИмущественныхПравОбслПроизвдств = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91);
	СтоимостьВсехИмущественныхПрав = ОказаниеФинансовыхУслуг + ПослеНаступленияСрокаПлатежа + ДоНаступленияСрокаПлатежа + СтоимостьИмущественныхПравОбслПроизвдств;
	
	П002020005003 = СтоимостьВсехИмущественныхПрав 
	              - ОказаниеФинансовыхУслуг
				  - ДоНаступленияСрокаПлатежа
				  - ПослеНаступленияСрокаПлатежа
				  - СтоимостьИмущественныхПравОбслПроизвдств;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020005003", П002020005003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "Строка 050 ""Стоимость имущественных прав""", "+", "!ДО", СтоимостьВсехИмущественныхПрав, ПС.ПрочиеРасходы, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ОказаниеФинансовыхУслуг, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ДоНаступленияСрокаПлатежа, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ПослеНаступленияСрокаПлатежа, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
		// Строка 052 - Расходы на НИОКР 
	П002020005203 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, мБухИтогиКосвЗатрат);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020005203", П002020005203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005203", "Строка 042 ""Расходы на НИОКР""", "+", "", 0, , , , , "Лист02_Прил2");
    ВставитьРасшифровкуКосвенныхРасходов("П002020005203",СтруктураПараметров, Перечисления.ВидыРасходовНУ.НИОКР);
	
	// Строка 059 - Стоимость имущественных прав
	П002020005903 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020005903", П002020005903); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005903", "Строка 059 ""Стоимость имущественных прав""", "+", "!ДО", П002020005903, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, СписокПрочихДоходовИРасходов));

	
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,           
	//              связанные с его реализацией
	ПрочееИмущество    = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги91);
	ОбъектыСтроит =      мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства, мБухИтоги91);
	П002020006003 = ПрочееИмущество + ОбъектыСтроит;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020006003", П002020006003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "Строка 060 ""Цена приобретения реализованного прочего имущества""", "+", "!ДО", ПрочееИмущество, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "", "+", "!ДО", ОбъектыСтроит, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства, СписокПрочихДоходовИРасходов));
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг
	П002020007003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020007003", П002020007003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020007003", "Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг""", "+", "!ДО", П002020007003, ПС.ПрочиеРасходы, , , , "Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, СписокПрочихДоходовИРасходов));

	
	Запрос.УстановитьПараметр("Счет97",       ПС.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК КО,
	|	ХозрасчетныйОбороты.Субконто1.ВидРБП КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет97), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	мБухИтоги97 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров, Ложь).Выгрузить();                                                                                                                                                                                                                                       
	
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности																	
	П002020009003 = мБухИтогиНайти("КО", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, мБухИтоги97);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020009003", П002020009003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020009003", "Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""", "+", "!КО", П002020009003, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил2", , ,  мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, СписокРБП));
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	П002020010003 = мБухИтогиНайти("КО",Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, мБухИтоги97);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020010003", П002020010003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020010003", "Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""", "+", "!КО", П002020010003, ПС.РасходыБудущихПериодов, , , , ,"Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, СписокРБП));
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	АмортизацияОсновныхСредств       = мБухИтогиНайти("КО", ПС.АмортизацияОсновныхСредств, мБухИтоги);
    АмортизацияНематериальныхАктивов = мБухИтогиНайти("КО", ПС.АмортизацияНематериальныхАктивов, мБухИтоги);
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мДатаКонцаПериодаОтчета, , Организация);
		Если мУчетнаяПолитика = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
	СпособАмортизации = ?(мУчетнаяПолитика.Количество() = 0 Или мУчетнаяПолитика.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный, 1,2);
	Если СпособАмортизации = 1 Тогда
		
		// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013103", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013103", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО", АмортизацияОсновныхСредств, ПС.АмортизацияОсновныхСредств, , , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013103", "", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
		
		// Строка 132 - Сумма начисленной амортизации по нематериальным активам
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013203", АмортизацияНематериальныхАктивов);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013203", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
	Иначе
		// Строка 133 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013303", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013303", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО", АмортизацияОсновныхСредств, ПС.АмортизацияОсновныхСредств, , , , "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013303", "", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
		// Строка 134 - Сумма начисленной амортизации по нематериальным активам
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013403", АмортизацияНематериальныхАктивов);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020013403", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
	КонецЕсли;
	
		// Строка 135 - Способ амортизации
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002020013503", СпособАмортизации);
	
	// Строка 201 - Расходы ввиде процентов по долговым обязательствам
	П002020020103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020103", П002020020103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020103", "Строка 201 ""Расходы ввиде процентов по долговым обязательствам""", "+", "!ДО", П002020020103, Счет9102, , , , ,"Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, СписокПрочихДоходовИРасходов));
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	П002020030103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020030103", П002020030103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030103", "Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""", "+", "!ДО", П002020030103, Счет9102, , , , ,"Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	П002020030203 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020030203", П002020030203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030203", "Строка 302 ""Суммы безнадежных долгов""", "+", "!ДО", П002020030203, Счет9102, , , , ,"Лист02_Прил2", , ,  мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	
	// Строка 200 - Внереализационные расходы
	
	П002020020003 = ?(мБухИтоги917.Количество() = 0, 0, мБухИтоги917.Итог("ДО")) - П002020030103 - П002020030203;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020003", П002020020003);
    ВставитьРасшифровкуВнереализационных("П002020020003",СтруктураПараметров, ДолиЕНВД, "ДО", СписокПрочихДоходовИРасходов);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО", -П002020030103, Счет9102, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО", -П002020030203, Счет9102, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	
	// Строка 204 - Расходы на ликвидацию ОС
	П002020020403 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020403", П002020020403);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020403", "Строка 204 ""Расходы на ликвидацию выводимых из эксплуатации основных средств, объектов незавершенного строительства и иного имущества""", "+", "!ДО", П002020020403, Счет9102, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	
	// Строка 204 - штрафы, пени и иные санкции за нарушение договорных или долговых обязательств
	П002020020503 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, мБухИтоги917);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002020020503", П002020020503);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020503", "Строка 205 ""штрафы, пени и иные санкции за нарушение договорных или долговых обязательств""", "+", "!ДО", П002020020503, Счет9102, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, СписокПрочихДоходовИРасходов));
	
	
	// лист 2 приложение 3
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, мБухИтоги91);
	ВыручкаОтРеализацииНМА = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтоги91);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030003003", П002030003003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "Строка 030 ""Выручка от реализации амортизируемого имущества""", "+", "!КО", ВыручкаОтРеализацииОС, Счет9101, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "", "+", "!КО", ВыручкаОтРеализацииНМА, Счет9101, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РасходыПоОС  = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, мБухИтоги91);  
	РасходыПоНМА = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтоги91);
	ПереносУбытковПоОС  = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, мБухИтогиПереносУбытковПоОСиНМА);  
	ПереносУбытковПоНМА = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтогиПереносУбытковПоОСиНМА);
	П002030004003 = РасходыПоОС - ПереносУбытковПоОС + РасходыПОНМА - ПереносУбытковПоНМА;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030004003", П002030004003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""", "+", "!ДО", РасходыПоОС, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "", "-", "!ДО", -ПереносУбытковПоОС, ПС.ПрочиеРасходы, ПС.ПрочиеРасходыБудущихПериодов, , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "", "+", "!ДО", РасходыПОНМА, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "", "-", "!ДО", -ПереносУбытковПоНМА, ПС.ПрочиеРасходы, ПС.ПрочиеРасходыБудущихПериодов, , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, СписокПрочихДоходовИРасходов));
				
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки)
	ПрибыльПоАмортИмуществу = ПрибылиИУбытки(ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, "Прибыль", (СтруктураПараметров.ПланСчетов = "Налоговый")) + ПрибылиИУбытки(ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, "Прибыль", (СтруктураПараметров.ПланСчетов = "Налоговый"));
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030005003", ПрибыльПоАмортИмуществу); 
	
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль)														
	УбыткиПоАмортИмуществу = ПрибылиИУбытки(ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, "Убыток", (СтруктураПараметров.ПланСчетов = "Налоговый")) + ПрибылиИУбытки(ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, "Убыток", (СтруктураПараметров.ПланСчетов = "Налоговый"));
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030006003", УбыткиПоАмортИмуществу); 
	
	ДоходыОказаниеФинансовыхУслуг      = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	ДоходыПослеНаступленияСрокаПлатежа = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	ДоходыДоНаступленияСрокаПлатежа    = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
	
	// Строка 070 - выручка от реализации права требования как реализации финансовых услуг
	П002030007003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030007003", П002030007003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030007003", "Строка 070 ""Выручка от реализации права требования как реализации финансовых услуг""", "+", "!КО", П002030007003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	
	// Строка 080 - Стоимость реализованного права требования при  его реализации как финансовой услуги
	П002030008003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030008003", П002030008003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030008003", "Строка 080 ""Стоимость реализованного права требования при  его реализации как финансовой услуги""", "+", "!ДО", П002030008003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", П002030010003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030010003", "Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030010003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030011003", П002030011003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030011003", "Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030011003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)																													
	П002030012003 =  мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030012003", П002030012003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030012003", "Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030012003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030013003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги91);
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030013003", П002030013003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030013003", "Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030013003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",   НалоговыйУчет.ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("КорСчет",      ПС.ПрочиеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация В (&СписокОрганизаций)
	|			И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|		КорСчет = &КорСчет,
	|		) КАК ХозрасчетныйОбороты";
	мБухИтоги170 = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров).Выгрузить();
	
	// Строка 170 - убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода (включается в строку 200 Приложения № 2 к Листу 02)			
	П002030017003 = мБухИтоги170.Итог("СуммаОборотДт");
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030017003", П002030017003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030017003", "Строка 170 ""Убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода""", "+", "!ДО", П002030017003, ПС.ПрочиеРасходы, ПС.ПрочиеРасходы, , , "Лист02_Прил3");
	
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
    //              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы			
	П002030018003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91); 
	
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030018003", П002030018003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030018003", "Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""", "+", "!КО", П002030018003, ПС.ПрочиеДоходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде																	
	
	П002030019003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги91); 
	
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002030019003", П002030019003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030019003", "Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""", "+", "!ДО", П002030019003, ПС.ПрочиеРасходы, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	
	// Строка 200 - Сумма убытков текущего отчетного (налогового) периода по объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы (строка 190-строка 180, если строка 190>строки 180)																	
	//П002030020003 =  мБухИтогиНайти("ДО", ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, мБухИтоги);
	//УстановитьЗначениеПоказателя(ЭтаФорма, "П002030020003", П002030020003); 
	//ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030018003", "", "+", "!ДО", П002030020003, ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, , , , "Лист02_Прил3", , ,  ,);
	
	// лист 2 приложение 4
	Запрос.УстановитьПараметр("Счет",         ПС.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидРБП",       Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУОборотКт) КАК КО,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт";
	УбыткиПрошлыхЛет = ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров,Ложь).Выгрузить();
	
	П1997 = 0;
	П1998 = 0;
    П1999 = 0;
    П2000 = 0;
    П2001 = 0;
    П2002 = 0;
    П2003 = 0;
    П2004 = 0;
    П2005 = 0;
    П2006 = 0;
    П2007 = 0;
    П2008 = 0;
    П2009 = 0;
	
	О1997 = 0;
	О1998 = 0;
    О1999 = 0;
    О2000 = 0;
    О2001 = 0;
    О2002 = 0;
    О2003 = 0;
    О2004 = 0;
    О2005 = 0;
    О2006 = 0;
    О2007 = 0;
    О2008 = 0;
    О2009 = 0;

	
	Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
		
	ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
	СуммаСписанногоУбытка   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
	СуммаНеСписанногоУбытка = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
	Если ГодУбытка = 1997 Тогда
	П1997 = СуммаСписанногоУбытка; РБП1997 = УбытокПрошлыхЛет.Субконто1;
	О1997 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 1998 Тогда
	П1998 = СуммаСписанногоУбытка; РБП1998 = УбытокПрошлыхЛет.Субконто1;
	О1998 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 1999 Тогда
	П1999 = СуммаСписанногоУбытка; РБП1999 = УбытокПрошлыхЛет.Субконто1;
	О1999 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2000 Тогда
	П2000 = СуммаСписанногоУбытка; РБП2000 = УбытокПрошлыхЛет.Субконто1;
	О2000 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2001 Тогда
	П2001 = СуммаСписанногоУбытка; РБП2001 = УбытокПрошлыхЛет.Субконто1;
	О2001 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2002 Тогда
	П2002 = СуммаСписанногоУбытка; РБП2002 = УбытокПрошлыхЛет.Субконто1;
	О2002 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2003 Тогда
	П2003 = СуммаСписанногоУбытка; РБП2003 = УбытокПрошлыхЛет.Субконто1;
	О2003 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2004 Тогда
	П2004 = СуммаСписанногоУбытка; РБП2004 = УбытокПрошлыхЛет.Субконто1;
	О2004 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2005 Тогда
	П2005 = СуммаСписанногоУбытка; РБП2005 = УбытокПрошлыхЛет.Субконто1;
	О2005 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2006 Тогда
	П2006 = СуммаСписанногоУбытка; РБП2006 = УбытокПрошлыхЛет.Субконто1;
	О2006 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2007 Тогда
	П2007 = СуммаСписанногоУбытка; РБП2007 = УбытокПрошлыхЛет.Субконто1;
	О2007 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2008 Тогда
	П2008 = СуммаСписанногоУбытка; РБП2008 = УбытокПрошлыхЛет.Субконто1;
	О2008 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2009 Тогда
	П2009 = СуммаСписанногоУбытка; РБП2009 = УбытокПрошлыхЛет.Субконто1;
	О2009 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2010 Тогда
	П2010 = СуммаСписанногоУбытка; РБП2010 = УбытокПрошлыхЛет.Субконто1;
	О2010 = СуммаНеСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2011 Тогда
	П2011 = СуммаСписанногоУбытка; РБП2011 = УбытокПрошлыхЛет.Субконто1;
	О2011 = СуммаНеСписанногоУбытка;
КонецЕсли;

КонецЦикла;

	// Строка 020 -     убытка, полученного до 1 января 2002 года																
	
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002040002003", П1997+П1998 + П1999 + П2000 + П2001);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году - сальдо начальное по дебету счета 97", П1997, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1997);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году - сальдо начальное по дебету счета 97", П1998, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1998);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году - сальдо начальное по дебету счета 97", П1999, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1999);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году - сальдо начальное по дебету счета 97", П2000, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП2000);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году - сальдо начальное по дебету счета 97", П2001, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП2001);
	
	
	Если П2002 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040004001", "2002");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040003003", П2002);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040004003", "Сумма убытка, полученного в 2002 году", "+", "!СНД", П2002, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , ,РБП2002);
	КонецЕсли;
	
	Если П2003 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040005001", "2003");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040005003", П2003);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040005003", "Сумма убытка, полученного в 2003 году", "+", "!СНД", П2002, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2003);
	КонецЕсли;

	Если П2004 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040006001", "2004");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040006003", П2004);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040006003", "Сумма убытка, полученного в 2004 году", "+", "!СНД", П2004, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2004);
	КонецЕсли;
	
	Если П2005 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040007001", "2005");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040007003", П2005);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040007003", "Сумма убытка, полученного в 2005 году", "+", "!СНД", П2005, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2005);
	КонецЕсли;
	
	Если П2006 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040008001", "2006");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040008003", П2006);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040008003", "Сумма убытка, полученного в 2006 году", "+", "!СНД", П2006, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2006);
	КонецЕсли;
	
	Если П2007 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040009001", "2007");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040009003", П2007);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040009003", "Сумма убытка, полученного в 2007 году", "+", "!СНД", П2007, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2007);
	КонецЕсли;
	
	Если П2008 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040010001", "2008");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040010003", П2008);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040010003", "Сумма убытка, полученного в 2008 году", "+", "!СНД", П2008, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2008);
	КонецЕсли;

	Если П2009 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040011001", "2009");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040011003", П2009);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040011003", "Сумма убытка, полученного в 2009 году", "+", "!СНД", П2009, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2009);
	КонецЕсли;
	
	Если П2010 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040012001", "2010");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040012003", П2010);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040012003", "Сумма убытка, полученного в 2010 году", "+", "!СНД", П2010, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2010);
	КонецЕсли;
	
	Если П2011 <> 0 Тогда
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040013001", "2011");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040013003", П2011);
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040013003", "Сумма убытка, полученного в 2011 году", "+", "!СНД", П2011, ПС.РасходыБудущихПериодов, , , , , "Лист02_Прил4", , , РБП2011);
	КонецЕсли;
	
	// Строка 150 - Сумма убытка или части убытка, уменьшающего   
	//              налоговую базу за отчетный  (налоговый)  период
	СуммаПоСтроке050Листа02 = 0;
	СуммаПоСтроке140Листа02 = 0;
	СуммаПоСтроке120Листа05 = 0;
	СуммаПоСтроке120Листа06 = 0;
	СуммаПоСтроке230Листа07 = 0;
	СуммаПоСтроке110Листа08 = 0;
	СуммаПоСтроке590Листа09 = 0;

	//Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
	//   И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.5" Тогда
	    П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", П002040015003);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040015003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период", "+", "!КО", П002040015003, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4");
		
		П002000011003 = П002040015003; 
		УстановитьЗначениеПоказателя(ЭтаФорма, "П002000011003", П002000011003);
		
    //Иначе
	//	Если мРаздел2_Прил4.Области.П002030009003.Значение > 0 Тогда 
	//		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", Мин(мРаздел2_Прил4.Области.П002030001003.Значение,мРаздел2_Прил4.Области.П002030009003.Значение * 3 / 10));
	//		
	//	Иначе
	//		УстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", 0);
	//	КонецЕсли;
	//КонецЕсли;
	
	
	// Строка 160 -    сумма неперенесенного убытка	
	П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002040016003", П002040016003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040016003", "неперенесенного убытка", "+", "!СКД", П002040016003, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , ,);
	
	// Строка 170 -    сумма неперенесенного убытка, полученного до 1 января 2002 года	
	П002040017003 = О1997 + О1998 + О1999 + О2000 + О2001;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002040017003", П002040017003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О1997, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1997);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году", О1998, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1998);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году", О1999, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП1999);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году", О2000, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП2000);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году", О2001, ПС.РасходыБудущихПериодов, , , , "Лист02_Прил4", , , , РБП2001);
	
	// Строка 180 -    сумма неперенесенного убытка, полученного после 1 января 2002 года	
	П002040018003 = П002040016003 - П002040017003;
	УстановитьЗначениеПоказателя(ЭтаФорма, "П002040018003", П002040018003);
	
	// приложение 5 листа 02
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	ПоВсем = Истина;
	Если КПП = Организация.КПП Тогда
		РегистрацияВИФНС = Организация.РегистрацияВИФНС; 
	Иначе
		РегистрацияВИФНС = Справочники.РегистрацияВИФНС.НайтиПоРеквизиту("КПП",КПП,,Организация); ПоВсем = Ложь;
		Если  РегистрацияВИФНС = Справочники.РегистрацияВИФНС.ПустаяСсылка() Тогда
			Сообщить("По указанному КПП " + КПП + " не обнаружена регистрация в ИФНС. Необходимо проверить правильность указания КПП или регистрации в ИФНС. Приложение 5 листа 02 заполнено не будет");
			ЗаполнитьПриложение5Листа2 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      НачалоМесяца(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачГОда",  НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("РегистрацияВИФНС", РегистрацияВИФНС);
	
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	            	  |	РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	            	  |	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС.НаименованиеОбособленногоПодразделения КАК ОбособленноеПодразделение,
	            	  |	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ КАК СтавкаСубъектРФ,
	            	  |	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС.КПП КАК КПП
	            	  |ИЗ
	            	  |	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	            	  |		ПО СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС = РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС
	            	  |ГДЕ
	            	  |	РасчетДолейБазыНалогаНаПрибыль.Организация В(&СписокОрганизаций)
	            	  |	И РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС = &РегистрацияВИФНС
	            	  |	И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон
	            	  |	И СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Организация В(&СписокОрганизаций)
	            	  |	И СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Период МЕЖДУ &ДатаНачГОда И &ДатаКон
	            	  |	И СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС = &РегистрацияВИФНС";
	
	Если ПоВсем Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС = &РегистрацияВИФНС","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС = &РегистрацияВИФНС","");
	КонецЕсли;                                      
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда  
		ТекстСообщения = "Приложение 5 листа 02 заполнено не будет.
		|По указанному КПП " + КПП + " не обнаружено начисление налога на прибыль.
		|Необходимо проверить правильность указания КПП или регистрации в ИФНС
		|или проведение операции закрытия месяца ""Расчет налога на прибыль""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , "Для организаций с обособленными подразделениями", СтатусСообщения.Важное);
	Иначе
		ДобавитьСтраницу = Ложь;
		Результат = Результат.Выгрузить();
		Для Каждого ДоляНалоговойБазы Из Результат Цикл
			Если ДобавитьСтраницу Тогда
				КнопкаДобавитьДопСтраницуЛист02_Прил5Нажатие(ЭтаФорма)
			Иначе
				ДобавитьСтраницу = Истина;
			КонецЕсли;
			
			ЭтоОбособленноеПодразделение = ЗначениеЗаполнено(РегистрацияВИФНС);
			мЕстьОбособленныеПодразделения = Истина;
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002050000100", "1"); //П002050000100
			Если  ЭтоОбособленноеПодразделение Тогда
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050001000", "2"); //П002050001000
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050002003", ДоляНалоговойБазы.ОбособленноеПодразделение); //П002050002003
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050002001", ДоляНалоговойБазы.КПП);//П002050002001
			Иначе
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050001000", "1");
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050002003", "");
				УстановитьЗначениеПоказателя(ЭтаФорма, "П002050002001", "");
			КонецЕсли;
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002050004003", ДоляНалоговойБазы.ДоляНалоговойБазы * 100);//П002050004003
			УстановитьЗначениеПоказателя(ЭтаФорма, "П002050006003", ДоляНалоговойБазы.СтавкаСубъектРФ);//П002050006003   
		КонецЦикла;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	// обновим ставки
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

    // Конец автозаполнения.
	// Операции, необходимые после процедуры автозаполнения.
	Расчет("");

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

 Функция мБухИтогиНайтиПоМассиву(Колонка, Массив, ТаблицаПоиска) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Для Счетик = 0 По Массив.Количество() - 1 Цикл
		Счет = Массив[Счетик];
		Строка = ТаблицаПоиска.Найти(Счет, "Счет");
		Если Строка = Неопределено Тогда
			Продолжить;
		Иначе
			
			Значение = Строка[Колонка];
			Если НЕ Значение = Неопределено Тогда

				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					  Для Счетик2 = 0 По Значение.Количество() - 1 Цикл
                           МассивВозврата.Добавить(Значение[Счетик2]);
                      КонецЦикла;
					Иначе
							МассивВозврата.Добавить(Значение);
						КонецЕсли;
						
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
возврат МассивВозврата;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура УстановитьВариантыЗаполненияСпецификаРаздела(ИмяТекущейСтраницыПанели)
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	СтрПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	Если ИмяТекущейСтраницыПанели = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
		
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000005003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000001003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000002003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000003003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000004003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000005003");
			КонецЕсли;
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000011003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000011003");
			КонецЕсли;	
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002000023003");
	    Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000023003");
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030203");			
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040018003");	
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040015003");	
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		
		Если флЕстьОбособ Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002050003103");	
		ИначеЕсли НЕ ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(4, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(4, "П002050003103");
		КонецЕсли;
		
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если мРаздел2_Прил5.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050005003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");	
			КонецЕсли;
		КонецЕсли;

		Если мРаздел2_Прил5.Области.П002050001000.Значение = "4" Тогда
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;
			// прочитаем признак
			ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;
			Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
			Иначе
				ВГруппуОПВходитОрганизация = Ложь;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 
//обработчики кнопок многостраничных страниц+++
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
	УстановитьВариантыЗаполненияСпецификаРаздела(ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1_1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел1_1");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1_2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел1_2");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1_3Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Раздел1_3");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02_Прил1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02_Прил1");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02_Прил2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02_Прил2");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02_Прил3Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02_Прил3");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02_Прил4Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02_Прил4");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист02_Прил5Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист02_Прил5");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист03Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист03");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист03ПродолжениеНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист03Продолжение");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист03РеестрНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист03Реестр");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист04Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист04");
 
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛист05Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(- 1, "Лист05");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1_1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1_1");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1_2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1_2");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1_3Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1_3");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02_Прил1Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил1");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02_Прил2Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил2");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02_Прил3Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил3");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02_Прил4Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил4");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист02_Прил5Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил5");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист03Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист03");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист03ПродолжениеНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист03Продолжение");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист03РеестрНажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист03Реестр");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист04Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист04");
 
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛист05Нажатие(Элемент)
 
 ПоказатьСтраницуМногостраничногоРаздела(1, "Лист05");
 
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	Если ИмяТекущейСтраницыПанели = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
		
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000005003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000001003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000002003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000003003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000004003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000005003");
			КонецЕсли;
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000011003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000011003");
			КонецЕсли;	
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002000023003");
	    Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000023003");
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030203");			
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040018003");	
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040015003");	
		КонецЕсли;	
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел1_3Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Раздел1_3");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист02");
 
 // Заполним ставки на новом листе.
 ПолучитьСтавкиНалога();
			
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02_Прил1Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист02_Прил1");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02_Прил2Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист02_Прил2");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02_Прил3Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист02_Прил3");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02_Прил4Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист02_Прил4");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист02_Прил5Нажатие(Элемент)
 
	ВставитьДополнительнуюСтраницу("Лист02_Прил5");
	
	Если НЕ ФлажокОтклАвтоРасчет Тогда
		ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");	
	КонецЕсли;
	
	// Добавим в структуру снятый признак вхождения ОП
	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
	// Снимем флаг.
	ВГруппуОПВходитОрганизация = Ложь;
	// Скроем элемент, отображаем только если признак будет введен равный 4.
	ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист03Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист03");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист03ПродолжениеНажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист03Продолжение");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист03РеестрНажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист03Реестр");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист04Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист04");
 
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист05Нажатие(Элемент)
 
 ВставитьДополнительнуюСтраницу("Лист05");
 
КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если мРаздел2_Прил5.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050005003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");	
			КонецЕсли;
		КонецЕсли;
		
		
		Если мРаздел2_Прил5.Области.П002050001000.Значение = "4" Тогда
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;
			
			// прочитаем признак
			ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;
			
			Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
			КонецЕсли;
			
			Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
			Иначе
				ВГруппуОПВходитОрганизация = Ложь;
			КонецЕсли;
			
		Иначе
			
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	Расчет();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел1_3Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Раздел1_3");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02_Прил1Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02_Прил1");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02_Прил2Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02_Прил2");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02_Прил3Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02_Прил3");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02_Прил4Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02_Прил4");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист02_Прил5Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист02_Прил5");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист03Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист03");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист03ПродолжениеНажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист03Продолжение");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист03РеестрНажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист03Реестр");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист04Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист04");
 
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист05Нажатие(Элемент)
 
 УдалитьДополнительнуюСтраницу("Лист05");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1_1Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1_1");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1_2Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1_2");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1_3Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1_3");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил1Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил1");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил2Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил2");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил3Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил3");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил4Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил4");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил5Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил5");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист03Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист03ПродолжениеНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03Продолжение");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист03РеестрНажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03Реестр");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист04Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист04");
 
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛист05Нажатие(Элемент)
 
 РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист05");
 
КонецПроцедуры
//обработчики кнопок многостраничных страниц---

//обработка выбора на всех страницах+++
Функция НайтиСвойстваПоказателя(КодПоказателя)
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СвойстваПоказателя;
КонецФункции // ()

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	
	//специальная обработка некоторых областей
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	//форма заполнения листа 03 раздел В
	Если   (ИмяЯчейки = "П002080002003_01")
	   ИЛИ (ИмяЯчейки = "П002080002003_02") 
	   ИЛИ (ИмяЯчейки = "П002080002003_03") 
	   ИЛИ (ИмяЯчейки = "П002080002003_04") 
	   ИЛИ (ИмяЯчейки = "П002080002003_05") 
	   ИЛИ (ИмяЯчейки = "П002080002003_06")
	   ИЛИ (ИмяЯчейки = "П002080002003_07") 
	   ИЛИ (ИмяЯчейки = "П002080002003_08") 
	   ИЛИ (ИмяЯчейки = "П002080002003_09") Тогда 

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс	= мРаздел3Реестр.Области.П002080002003_01.Значение;
		СубъектРФНом = мРаздел3Реестр.Области.П002080002003_02.Значение;
		РайонОб     = мРаздел3Реестр.Области.П002080002003_03.Значение;
		ГородОб     = мРаздел3Реестр.Области.П002080002003_04.Значение;
		НПОб        = мРаздел3Реестр.Области.П002080002003_05.Значение;
		УлицаОб     = мРаздел3Реестр.Области.П002080002003_06.Значение;
		ДомаОб      = мРаздел3Реестр.Области.П002080002003_07.Значение;
		КорпусОб    = мРаздел3Реестр.Области.П002080002003_08.Значение;
		КвартираОб  = мРаздел3Реестр.Области.П002080002003_09.Значение;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФНом); // код
		СтруктураАдресныхДанных.Вставить("Район", РайонОб);
		СтруктураАдресныхДанных.Вставить("Город", ГородОб);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб);
		СтруктураАдресныхДанных.Вставить("Улица", УлицаОб);
		СтруктураАдресныхДанных.Вставить("Дом", ДомаОб);
		СтруктураАдресныхДанных.Вставить("Корпус", КорпусОб);
		СтруктураАдресныхДанных.Вставить("Квартира", КвартираОб);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ПочтИндекс = ФормаВводаАдреса.НачальноеЗначениеВыбора.Индекс;
			СубъектРФНом = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;

			РайонОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Район;
			ГородОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Город;
			НПОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.НаселенныйПункт;
			УлицаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Улица;
			ДомаОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Дом;
			КорпусОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Корпус;
			КвартираОб = ФормаВводаАдреса.НачальноеЗначениеВыбора.Квартира;

			Модифицированность = Истина;

		КонецЕсли;

		мРаздел3Реестр.Области.П002080002003_01.Значение = ПочтИндекс;
		мРаздел3Реестр.Области.П002080002003_02.Значение = СубъектРФНом;
		мРаздел3Реестр.Области.П002080002003_03.Значение = РайонОб;
		мРаздел3Реестр.Области.П002080002003_04.Значение = ГородОб;
		мРаздел3Реестр.Области.П002080002003_05.Значение = НПОб;
		мРаздел3Реестр.Области.П002080002003_06.Значение = УлицаОб;
		мРаздел3Реестр.Области.П002080002003_07.Значение = ДомаОб;
		мРаздел3Реестр.Области.П002080002003_08.Значение = КорпусОб;
		мРаздел3Реестр.Области.П002080002003_09.Значение = КвартираОб;
		
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		//Определение ТребРезультат+++
		//проверка и удаление вариантов происходит для отдельных показателей
		//внутри происходит проверка: требуется ли сокращать список и по какому значению результата проверки
		//если будет требуемый результат проверки условий, отличный от нуля, то будет проверка
		//конструкция проверки должна предусматривать наличие нескольких критериев
		//Примечание: для последующего корректного удаления ТребРезультат следует определять числом
		ТребРезультат = 0;
		Если КодПоказателя = "П000110003003" Тогда
		//код КБК раздела 1.1	
			//признак налогоплательщика раздела 1.1
			Критерий1 = мРаздел1_1.Области.П000110000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "П000120011003" Тогда
		//код КБК раздела 1.2	
			//признак налогоплательщика раздела 1.2
			Критерий1 = мРаздел1_2.Области.П000120000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
			флКвартальноеЗаполнение = (мПериодичность = Перечисления.Периодичность.Квартал);
	
		    Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
				ТребРезультат = НомерМесяца / 3;
			Иначе
				ТребРезультат = НомерМесяца + 4;
			КонецЕсли;
			
		КонецЕсли;
		//Определение ТребРезультат---
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		ТЗВыбора.Колонки.Удалить(2);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
				   |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		//определение первоначального значеня
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			//доработка результата выбора
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			//заполнение отчета данными выбора
			Для Инд = 1 По 4 Цикл
				мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			ПроставитьНаВсехЛистах("КПП1_", РезультатВыбора.КПП);
			
			//заполняем сведения о подписантах
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			//поле подписанта остается пустым
		Иначе
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	мТитульный.Области.ПрПодп.Значение = ТипПодписанта;
	мТитульный.Области.ОргПодписант.Значение = Подписант;
	мТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	мТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил2Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил3Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил4Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил5Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03ПродолжениеВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03РеестрВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист04Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист05Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист06Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист07Выбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры
//обработка выбора на всех страницах---

//обработка ПриИзмененииСодержимогоОбласти на всех страницах+++
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	Если Найти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		флЕстьОбособ = (мПоМесту = "220" ИЛИ мПоМесту = "223" ИЛИ мПоМесту = "224");
		
		НовыйПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		НовыйЕстьОбособ = (НовыйПоМесту = "220" ИЛИ НовыйПоМесту = "223" ИЛИ НовыйПоМесту = "224");
		
		Если НовыйЕстьОбособ = флЕстьОбособ Тогда
			//режим не изменился
			мПоМесту = НовыйПоМесту;
		Иначе
			//попытка изменения режима
			Если НовыйЕстьОбособ Тогда
				ТекстВопроса = "Внимание! Перед входом в режим заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?";
			Иначе
				ТекстВопроса = "Внимание! Перед выходом из режима заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?";
			КонецЕсли;
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				//Пользователь отказался очистить отчет - возврат к старому значению
				Для Инд = 1 По 3 Цикл
					мТитульный.Области["ПоМесту" + Инд].Значение = Сред(мПоМесту, Инд, 1);
				КонецЦикла;
				Возврат;
			Иначе 
				//Пользователь согласился очистить отчет
				мПоМесту = НовыйПоМесту;	
				
				ОчиститьОтчет(Ложь);
				
				ОбновитьДоступностьЭлементов();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//Изменение "Расчет составлен" на Прил 5 Листа 02
	Если (ИмяПоказателя = "П002050001000") Тогда
		// Блок управление признаком вхождения организации в группу ОП.
		Если ЗначПоказателя = "4" Тогда
			// Сделаем видимым флажек.
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;
			// Запишем по умолчанию как выключенный флаг.
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
		Иначе
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
			// Запишем по умолчанию как выключенный флаг.
			ВГруппуОПВходитОрганизация = Ложь;
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//изменение вариантов заполнения ячеек при изменении определенных показателей
	Если ИмяПоказателя = "П002050001000" Тогда
		Если ЗначПоказателя = "3" Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050005003");
		ИначеЕсли НЕ ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяПоказателя = "П002050000100" Тогда
		ТаблицаРаздела  =  мСтруктураМногостраничныхРазделов["Лист02"];
		Если ЗначПоказателя = "" Тогда
			мСтруктураМногостраничныхРазделов["Лист02_Прил5"].Найти(Истина, "АктивнаяСтраница").Данные.П002050000100 = "";
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
			Если НЕ Есть_Прил5 И НЕ ФлажокОтклАвтоРасчет Тогда
				Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
					ДанныеСтраницы = СтраницаТаблицыРаздела.Данные;
					ДанныеСтраницы.П002000023003 = 0;
					мРаздел2.Области.П002000023003.Значение = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...") +++
	СвойстваПоказателя = НайтиСвойстваПоказателя(ИмяПоказателя);
	
	//обработка изменения зависимых значений (влияние на критерий)+++
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		ТЗВыбора = СвойстваПоказателя.ТаблицаЗначений.Скопировать();
				
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.Найти(ЗначПоказателя,"Код");
		Если ЭлТЗВыбора <> Неопределено И РегламентированнаяОтчетность.роЯвляетсяЧислом(ЭлТЗВыбора.РезультатПроверки) Тогда
			Рез = Число(ЭлТЗВыбора.РезультатПроверки);
			Если Рез > 0 Тогда
				
				
				ТЗКритерии = Новый ТаблицаЗначений;
				ТЗКритерии.Колонки.Добавить("Область");
				ТЗКритерии.Колонки.Добавить("ТребЗнач");
				//описание обработки обратной связи(происходит для отдельных показателей)+++
				//введение таблицы значений предусматривает наличие нескольких критериев (термин взят из процедуры ОбработкаВыбораВПолеТабличногоДокумента)
				Если КодПоказателя = "П000110003003" Тогда //код КБК раздела 1.1	
					Если Рез = 1 Тогда
						
						//признак налогоплательщика раздела 1.1
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.Область = мРаздел1_1.Области.П000110000100;
						НовСтрока.ТребЗнач = "1";
						
					ИначеЕсли Рез = 2 Тогда
						
						//признак налогоплательщика раздела 1.1
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.Область = мРаздел1_1.Области.П000110000100;
						НовСтрока.ТребЗнач = "2";
						
					КонецЕсли;
				ИначеЕсли КодПоказателя = "П000120011003" Тогда //код КБК раздела 1.2
					Если Рез = 1 Тогда
						
						//признак налогоплательщика раздела 1.2
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.Область = мРаздел1_2.Области.П000120000100;
						НовСтрока.ТребЗнач = "1";
						
					ИначеЕсли Рез = 2 Тогда
						
						//признак налогоплательщика раздела 1.2
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.Область = мРаздел1_2.Области.П000120000100;
						НовСтрока.ТребЗнач = "2";
						
					КонецЕсли;
				КонецЕсли;
				//описание обработки обратной связи(происходит для отдельных показателей)---
				
				Для каждого Критерий Из ТЗКритерии Цикл
					//Если текущее значение отличается от требуемого происходит присвоение
					Если Критерий.Область.Значение <> Критерий.ТребЗнач Тогда
						Критерий.Область.Значение = Критерий.ТребЗнач;
					КонецЕсли;   
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//обработка изменения зависимых значений (влияние на критерий)---
	
	//обработка изменения значений критериев (влияние на зависимые показатели)+++
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		//введение таблицы значений предусматривает влияние критерия на несколько зависимых показателей
		ТЗЗависимЗнач = Новый ТаблицаЗначений;
		ТЗЗависимЗнач.Колонки.Добавить("ОбластьПоказателя");
		ТЗЗависимЗнач.Колонки.Добавить("ТребРез");
		
		Если КодКритерия = "П000110000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателя = мРаздел1_1.Области.П000110003003;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателя = мРаздел1_1.Области.П000110003003;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		ИначеЕсли КодКритерия = "П000120000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.2
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателя = мРаздел1_2.Области.П000120011003;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателя = мРаздел1_2.Области.П000120011003; 
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		КонецЕсли;
		
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = НайтиСвойстваПоказателя(ЗависимЗнач.ОбластьПоказателя.Имя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений <> Неопределено Тогда
				//поиск строки списка выбора, соответствующую текущему значению зависимого показателя
				СтрокаСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.Найти(СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателя.Значение)),"Код");
				Если СтрокаСписка <> Неопределено Тогда
					Рез = ?(СтрокаСписка.РезультатПроверки = "",0,Число(СтрокаСписка.РезультатПроверки));
					Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							//очистка значения зависмого параметра - т.к. не соответствует измененному значению критерия
							ЗависимЗнач.ОбластьПоказателя.Значение = "";
						КонецЕсли;					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		
	КонецЕсли;
	//обработка изменения значений критериев (влияние на зависимые показатели)---
	
	
	Модифицированность = Истина;
	Расчет();	
	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...") ---
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_1ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_2ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_3ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил1ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил2ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил3ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил4ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил5ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03ПродолжениеПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03РеестрПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист04ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист05ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист06ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист07ПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)

	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);

КонецПроцедуры
//обработка ПриИзмененииСодержимогоОбласти на всех страницах---

//обработка ПриАктивизацииОбласти на всех страницах+++
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1_1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1_2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1_3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил1ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил1");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил2ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил2");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил3ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил3");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил4ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил4");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил5ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил5");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03ПродолжениеПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03Продолжение");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист03РеестрПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03Реестр");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист04ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист04");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист05ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист05");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист06ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист06");
 
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист07ПриАктивизацииОбласти(Элемент)
 
 РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист07");
 
КонецПроцедуры
//обработка ПриАктивизацииОбласти на всех страницах---

//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов+++
//и связанные с ними процедуры - функции по работе с многострочными блоками

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;
	
	Раздел = ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
		
		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
		
		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;
		
		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
		
		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		
		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;
			
			РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(СтруктураГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);
			
		КонецЦикла;
		
		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);
		
		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
			
			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел7;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда // Раздел 1.3 Тогда
		ТекТабличноеПоле = мРаздел1_3;
	//ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
	//	ТекТабличноеПоле = мРаздел6;
	//ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
	//	ТекТабличноеПоле = мРаздел7;
	//ИначеЕсли ИдГруппы = мИдГруппы5 Тогда
	//	ТекТабличноеПоле = мРаздел8;
	//ИначеЕсли ИдГруппы = мИдГруппы6 Тогда
	//	ТекТабличноеПоле = мРаздел9;
	//ИначеЕсли ИдГруппы = мИдГруппы7 Тогда
	//	ТекТабличноеПоле = мПриложение;
	КонецЕсли;

	Возврат ТекТабличноеПоле;
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()
// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист07" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел1_3" Тогда
		ИмяГруппы = мИдГруппы2;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

Процедура КнопкаДобавитьДопСтрокиРаздел1_3Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиЛист07Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиЛист07Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел1_3Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры
//обработчики нажатия на кнопки добавления/удаления дополнительных строк многострочных разделов---
//и связанные с ними процедуры-функции по работе с многострочными блоками

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	ЗаполнитьАвто();
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	СтрПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	Если ИмяТекущейСтраницыПанели = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
		
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000005003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000001003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000002003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000003003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000004003");
				ИзменитьВариантЗаполненияЯчейки(4, "П002000005003");
			КонецЕсли;
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000011003");
		Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000011003");
			КонецЕсли;	
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002000023003");
	    Иначе
			Если НЕ ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(4, "П002000023003");
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030203");			
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040018003");	
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040015003");	
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда	
		Если мРаздел2_Прил5.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050005003");
		ИначеЕсли НЕ ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");
		КонецЕсли;
		
		Если флЕстьОбособ Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002050003003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002050003103");	
		ИначеЕсли НЕ ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(4, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(4, "П002050003103");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока50);

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Подраздел 1.1 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Подраздел 1.2 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Подраздел 1.3 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02";
	СтрокаУровня1.Представление            = "Лист 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил3";
	СтрокаУровня1.Представление            = "Приложение 3 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил4";
	СтрокаУровня1.Представление            = "Приложение 4 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил5";
	СтрокаУровня1.Представление            = "Приложение 5 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03";
	СтрокаУровня1.Представление            = "Лист 03 (Раздел А)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Продолжение";
	СтрокаУровня1.Представление            = "Лист 03 (Раздел Б)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03Продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Реестр";
	СтрокаУровня1.Представление            = "Лист 03 (Реестр)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03Реестр";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04";
	СтрокаУровня1.Представление            = "Лист 04";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист04";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист05";
	СтрокаУровня1.Представление            = "Лист 05";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист05";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист06";
	СтрокаУровня1.Представление            = "Лист 06";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист06";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист07";
	СтрокаУровня1.Представление            = "Лист 07";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист07";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	СтрПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	//изменение вариантов заполнения ячеек при изменении определенных показателей
	Если мРаздел2_Прил5.Области.П002050001000.Значение="3" Тогда
		ИзменитьВариантЗаполненияЯчейки(0, "П002050005003");
	КонецЕсли;
	
	НомерМесяца = Месяц(мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	Если ИмяТекущейСтраницыПанели = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(3, "П002000005003");
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(3, "П002000011003");
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям("Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002000023003");
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002020030203");			
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(5, "П002040018003");	
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(0, "П002040015003");	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ
//

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2009Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодовВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000300", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодовВариант1"]);
	
	//для разделов 1.1 и 1.2 отключен интеракивный выбор - заполнение происходит автоматически
	//ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант1"]);
	//ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002000000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002010000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002030000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002040000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110001003", 11, "ОКАТО");
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120001003", 11, "ОКАТО");
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130002003", 11, "ОКАТО");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110006003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120011003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120021003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант3"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130001003", 1, , "Выбор вида платежа", КоллекцияСписковВыбора["ВидПлатежа"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050001000", 1, , "Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчетов"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050002002", 1, , "Выбор вида возложения обязанностей", КоллекцияСписковВыбора["ВидыВозложений"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020013503", 1, , "Выбор метода начисления амортизации", КоллекцияСписковВыбора["МетодыНА"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000200", 1, , "Выбор вида дивидендов", КоллекцияСписковВыбора["ВидыДивидендов"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002070000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант1"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002090000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант2"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002100000200", 1, , "Выбор вида операции", КоллекцияСписковВыбора["ВидыОперации"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002120001001", 3, , "Выбор кода вида поступлений", КоллекцияСписковВыбора["КодыВидаПоступлений"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВПолеВводаВПолеТабличногоДокумента(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ЭлементыФормы.Найти("ПолеТабличногоДокумента" + ИмяТекущейСтраницы) <> Неопределено Тогда
		Область = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницы].ТекущаяОбласть;
	Иначе
		Возврат;
	КонецЕсли;
		
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Текст) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Текст));
		Для Инд = ДлинаЗначения+1 По 11 Цикл
			Текст = СокрЛП(Текст) + "0";
		КонецЦикла;
	КонецЕсли;
	
	
	Если СтрДлина(СокрЛП(Текст)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Текст)) <> ПараметрВводаПоля.Длина Тогда
		Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Элемент.Значение=Текст;
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина, ОбновитьСтавки = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы], ОбновитьСтавки);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	ПроставитьПрПл_1();
	
	//для обособленных подразделений лист 02 не сдается, ставки нужно очистить
	СтрПоМесту = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	Если флЕстьОбособ Тогда
		мРаздел2.Области.П002000015003.Значение = 0;
		мРаздел2.Области.П002000016003.Значение = 0;
	КонецЕсли;
	
	// Очистим флаг вхождения в группу ОП.
	ВГруппуОПВходитОрганизация = Ложь;
	ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;

	//доступность некоторых ячеек
	ИзменитьВариантЗаполненияЯчейки(0, "П002000023003");
	Если Не ФлажокОтклАвтоРасчет Тогда
		ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");
	КонецЕсли;
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML502");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Сред(Раздел.Ключ, 24), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",			РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",				"1151006");
	Параметры.Вставить("ДатаДок",			Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ГодПериодОтч",		Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ПериодОтч",			СокрЛП(Титульный.Период));
	Параметры.Вставить("КодИФНС",			СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("ВидДок",			Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту",			СокрЛП(Титульный.ПоМесту));
	Параметры.Вставить("ОКВЭДОрг",			СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	Параметры.Вставить("ТелОрг",			СокрЛП(Титульный.ТелОрганизации));
	Параметры.Вставить("НаимОрг",			СокрЛП(Титульный.НаимОрг));
	Параметры.Вставить("ИННОрг",			СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",			СокрЛП(Титульный.КПП1));
	Параметры.Вставить("КодИФНСПосредника", СокрЛП(Организация.КодИФНСПолучателя));
	
	Параметры.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	Параметры.Вставить("ИмяФайлаСхемы",				"NO_PRIB_1_002_00_05_02_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_PRIB");
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Прибыль");
	
	Параметры.Вставить("ИдФайл",		СформироватьИдФайл(Параметры));
	
	Параметры.Вставить("ДеревоСтраниц",		мСохраненныйДок.ДеревоНастройкиСтраниц.Получить());
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, КодПокзателя)
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
		ЗначениеПоказателя = Стр.Данные[КодПокзателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000017003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002070002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002090003003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000110000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002010000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002020000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002030000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002040000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если Найти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, КодПоказателя, ВозможныеЗначенияПоказателей)
	
	ЗначенияПоказетелей = ВозможныеЗначенияПоказателей[КодПоказателя];
	Если ЗначенияПоказетелей = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Найти(ЗначенияПоказетелей, СокрЛП(ДанныеСтраницы[КодПоказателя])) <> 0;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("223");
	ВозможныеКодыПоМесту.Добавить("224");
	ВозможныеКодыПоМесту.Добавить("231");
	
	ВозможныеЗначенияПоказателей = Новый Соответствие;
	ВозможныеЗначенияПоказателей.Вставить("П000110000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000120000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000130001003", "1|2|3|4");
	ВозможныеЗначенияПоказателей.Вставить("П002000000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002010000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020013503", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002030000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002040000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002050001000", "1|2|3|4");
	ВозможныеЗначенияПоказателей.Вставить("П002050002002", "0|1");
	ВозможныеЗначенияПоказателей.Вставить("П002060000200", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002060000300", "21|31|33|34|35|36|37|38|39|40|41|42|43|44|45|46|50");
	ВозможныеЗначенияПоказателей.Вставить("П002070000200", "1|2");
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации (обособленного подразделения)!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(Параметры.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если Параметры.ТипПодписанта = "2" И ПустаяСтрока(Параметры.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_1, Раздел1_3, Лист02") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен, как минимум, один из следующих разделов: ""Раздел 1.1"", ""Раздел 1.3"" или ""Лист 02"".", "Раздел1_1", "П000110000100");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// проверка раздела 1.1
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		НомерСтраницы = ДанныеРаздела11.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000110000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 указан некорректный признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110001003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКАТО!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110001003)) <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)!", "Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)!", "Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_1", "П000110000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.1!", "Раздел1_1", "П000110000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 1.2
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		НомерСтраницы = ДанныеРаздела12.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000120000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 указан некорректный признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120001003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКАТО!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120001003)) <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 1.3
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		НомерСтраницы = ДанныеРаздела13.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000130001003", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан некорректный код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130002003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКАТО!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130002003)) <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКАТО некорректной длины!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 в строке " + Формат(НомСтроки, "ЧГ=") + " не указан срок уплаты!", "Раздел1_3", "П000130004001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040!", "Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 02
	КодыНалогоплательщикаНаЛисте02 = Новый Массив;
	ДанныеЛист02 = мДанныеОтчета.Лист02;
	Для Каждого Стр Из ДанныеЛист02 Цикл
		НомерСтраницы = ДанныеЛист02.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
			КодыНалогоплательщикаНаЛисте02.Добавить(СокрЛП(ДанныеСтраницы.П002000000100));
		КонецЕсли;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002000000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" указан некорректный признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02", "П002000000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""!", "Лист02", "П002000000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
		
	// проверка приложения 1 к листу 02
	ДанныеЛист02Прил1 = мДанныеОтчета.Лист02_Прил1;
	Для Каждого Стр Из ДанныеЛист02Прил1 Цикл
		НомерСтраницы = ДанныеЛист02Прил1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002010000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил1", "П002010000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				//Если КодыНалогоплательщикаНаЛисте02.Найти(СокрЛП(ДанныеСтраницы.П002010000100)) = Неопределено Тогда
				//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" указано значение признака налогоплательщика, которое отсутствует в соответствующем показателе раздела ""Лист 02""!", "Лист02_Прил1", "П002010000100", НомерСтраницы);
				//	СтатусПроверки = Ложь;
				//КонецЕсли;
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002010000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил1", "П002010000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил1", "П002010000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""!", "Лист02_Прил1", "П002010000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 2 к листу 02
	ДанныеЛист02Прил2 = мДанныеОтчета.Лист02_Прил2;
	Для Каждого Стр Из ДанныеЛист02Прил2 Цикл
		НомерСтраницы = ДанныеЛист02Прил2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002020000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил2", "П002020000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				//Если КодыНалогоплательщикаНаЛисте02.Найти(СокрЛП(ДанныеСтраницы.П002020000100)) = Неопределено Тогда
				//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указано значение признака налогоплательщика, которое отсутствует в соответствующем показателе раздела ""Лист 02""!", "Лист02_Прил2", "П002020000100", НомерСтраницы);
				//	СтатусПроверки = Ложь;
				//КонецЕсли;
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил2", "П002020000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// проверка на то, что значение метода начисления амортизации не заполнено, если заполнена одна из связанных сумм
				//Если ЗначениеСуммыЗаполнено(ДанныеСтраницы.П002020013103) ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П002020013203) Тогда
				//	Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002020013303)) Тогда
				//		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" не указан код метода начисления амортизации!", "Лист02_Прил2", "П002020013303", НомерСтраницы);
				//		СтатусПроверки = Ложь;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002020013503)) И НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020013503", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации!", "Лист02_Прил2", "П002020013503", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил2", "П002020000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""!", "Лист02_Прил2", "П002020000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 3 к листу 02
	ДанныеЛист02Прил3 = мДанныеОтчета.Лист02_Прил3;
	Для Каждого Стр Из ДанныеЛист02Прил3 Цикл
		НомерСтраницы = ДанныеЛист02Прил3.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002030000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил3", "П002030000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				//Если КодыНалогоплательщикаНаЛисте02.Найти(СокрЛП(ДанныеСтраницы.П002030000100)) = Неопределено Тогда
				//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" указано значение признака налогоплательщика, которое отсутствует в соответствующем показателе раздела ""Лист 02""!", "Лист02_Прил3", "П002030000100", НомерСтраницы);
				//	СтатусПроверки = Ложь;
				//КонецЕсли;
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002030000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил3", "П002030000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил3", "П002030000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""!", "Лист02_Прил3", "П002030000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 4 к листу 02
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П002040004001", "П002040004003");
	СоответствиеИменЯчеек.Вставить("П002040005001", "П002040005003");
	СоответствиеИменЯчеек.Вставить("П002040006001", "П002040006003");
	СоответствиеИменЯчеек.Вставить("П002040007001", "П002040007003");
	СоответствиеИменЯчеек.Вставить("П002040008001", "П002040008003");
	СоответствиеИменЯчеек.Вставить("П002040009001", "П002040009003");
	СоответствиеИменЯчеек.Вставить("П002040010001", "П002040010003");
	СоответствиеИменЯчеек.Вставить("П002040011001", "П002040011003");
	СоответствиеИменЯчеек.Вставить("П002040012001", "П002040012003");
	СоответствиеИменЯчеек.Вставить("П002040013001", "П002040013003");
	ДанныеЛист02Прил4 = мДанныеОтчета.Лист02_Прил4;
	Для Каждого Стр Из ДанныеЛист02Прил4 Цикл
		НомерСтраницы = ДанныеЛист02Прил4.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил4", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002040000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил4", "П002040000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				//Если КодыНалогоплательщикаНаЛисте02.Найти(СокрЛП(ДанныеСтраницы.П002040000100)) = Неопределено Тогда
				//	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" указано значение признака налогоплательщика, которое отсутствует в соответствующем показателе раздела ""Лист 02""!", "Лист02_Прил4", "П002040000100", НомерСтраницы);
				//	СтатусПроверки = Ложь;
				//КонецЕсли;
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002040000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил4", "П002040000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение]) И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " не задан год!", "Лист02_Прил4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины!", "Лист02_Прил4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил4", "П002040000100") Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""!", "Лист02_Прил4", "П002040000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 5 к листу 02
	ДанныеЛист02Прил5 = мДанныеОтчета.Лист02_Прил5;
	Для Каждого Стр Из ДанныеЛист02Прил5 Цикл
		НомерСтраницы = ДанныеЛист02Прил5.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил5", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050000100) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050001000) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""!", "Лист02_Прил5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050001000", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака ""Расчет составлен""!", "Лист02_Прил5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002001) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения!", "Лист02_Прил5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002050002001)) <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины!", "Лист02_Прил5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения!", "Лист02_Прил5", "П002050002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002002) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_Прил5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050002002", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_Прил5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002050010003) И ЗначениеЗаполнено(ДанныеСтраницы.П002050011003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению!", "Лист02_Прил5", "П002050010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (раздел А)
	ДанныеЛист03 = мДанныеОтчета.Лист03;
	Для Каждого Стр Из ДанныеЛист03 Цикл
		НомерСтраницы = ДанныеЛист03.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000200) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов!", "Лист03", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение кода вида дивидендов!", "Лист03", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000300) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период!", "Лист03", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000300", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение налогового (отчетного) периода!", "Лист03", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000400) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан отчетный год!", "Лист03", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002060000400)) <> 4 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины!", "Лист03", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (раздел Б)
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Продолжение;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		НомерСтраницы = ДанныеЛист03РазделБ.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03Продолжение", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002070000200) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" не указан вид дивидендов!", "Лист03Продолжение", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002070000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" указано некорректное значение кода вида дивидендов!", "Лист03Продолжение", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (реестр)
	ДанныеЛист03Реестр = мДанныеОтчета.Лист03Реестр;
	Для Каждого Стр Из ДанныеЛист03Реестр Цикл
		НомерСтраницы = ДанныеЛист03Реестр.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03Реестр", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080005003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указана дата перечисления дивидендов!", "Лист03Реестр", "П002080005003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080001003) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указано наименование получателя дивидендов!", "Лист03Реестр", "П002080001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080002003_02) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указан код субъекта Российской Федерации!", "Лист03Реестр", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_02)) <> 2 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" указан код субъекта Российской Федерации некорректной длины!", "Лист03Реестр", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002080002003_01)) И СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_01)) <> 6 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" указан индекс некорректной длины!", "Лист03Реестр", "П002080002003_01", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_03) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указана фамилия руководителя организации!", "Лист03Реестр", "П002080003003_01", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указано имя руководителя организации!", "Лист03Реестр", "П002080003003_02", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 04
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		НомерСтраницы = ДанныеЛист04.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист04", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002090000200) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 04"" не указан вид дохода!", "Лист04", "П002090000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 05
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		НомерСтраницы = ДанныеЛист05.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист05", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002100000200) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 05"" не указан вид операции!", "Лист05", "П002100000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 07
	ДанныеЛист07 = мДанныеОтчета.Лист07;
	НомСтроки = 1;
	КодВидаПоступления = Неопределено;
	СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
	Пока ДанныеЛист07.Свойство("П002120001001_" + Формат(НомСтроки, "ЧГ="), КодВидаПоступления) Цикл
		СтрНомСтроки = Формат(НомСтроки, "ЧГ=");
		Если ЗначениеЗаполнено(ДанныеЛист07["П002120001002_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001003_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001004_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001005_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001006_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001007_" + СтрНомСтроки]) Тогда
			СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " не указан код вида поступлений!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " указан код вида поступлений некорректной длины!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	Если НЕ РазделПуст(ДеревоВыгрузки, "Лист07") И НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" не заполнена ни одна строка!", "Лист07", "П002120001001_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// заполнение раздела 1
	НалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПУ");
	
	// заполнение подраздела 1.1
	НалПУАв = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУАв");
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Раздел1_1", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУАв = СкопироватьУзел(НалПУ, НалПУАв);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалПУАв);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.2
	НалПУМес = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУМес");
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Раздел1_2", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУМес = СкопироватьУзел(НалПУ, НалПУМес);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалПУМес);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.3
	НалПУПроц = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУПроц");
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Раздел1_3", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУПроц = СкопироватьУзел(НалПУ, НалПУПроц);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалПУПроц);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 02 и его приложения
	РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
	ДанныеЛиста02 = мДанныеОтчета.Лист02;
	ДанныеЛиста02Прил1 = мДанныеОтчета.Лист02_Прил1;
	ДанныеЛиста02Прил2 = мДанныеОтчета.Лист02_Прил2;
	ДанныеЛиста02Прил3 = мДанныеОтчета.Лист02_Прил3;
	ДанныеЛиста02Прил4 = мДанныеОтчета.Лист02_Прил4;
	ДанныеЛиста02Прил5 = мДанныеОтчета.Лист02_Прил5;
	
	СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02 = Новый Соответствие;
	
	// заполняем данные по экземплярам раздела "Лист 02"
	Для Каждого Стр Из ДанныеЛиста02 Цикл
		
		ПризнакНалогоплательщика = СокрЛП(Стр.Данные.П002000000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(Стр.Данные, "Лист02", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкзРасчНал = СкопироватьУзел(УзелРодитель, РасчНал);
		ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзРасчНал);
		
		СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭкзРасчНал);
		
	КонецЦикла;
	
	// выгружаем "Приложение 1 к листу 02"
	Для Каждого ЭкзЛист02Прил1 из ДанныеЛиста02Прил1 Цикл
		
		ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил1.Данные.П002010000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил1.Данные, "Лист02_Прил1", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел Листа 02 с соответствующим признаком налогоплательщика
		ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
		Если ЭлементЛист02 = Неопределено Тогда
			
			// если узел Листа 02 не найден, то создаем новый
			ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
			ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
			
		КонецЕсли;
		
		// выгружаем экземпляр приложения 1 к листу 02
		ЗаполнитьДаннымиУзел(ЭкзЛист02Прил1.Данные, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ДохРеалВнеРеал")));
		
	КонецЦикла;
	
	// выгружаем "Приложение 2 к листу 02"
	Для Каждого ЭкзЛист02Прил2 из ДанныеЛиста02Прил2 Цикл
		
		// проверяем, заполнена ли страница
		ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил2.Данные.П002020000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил2.Данные, "Лист02_Прил2", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел Листа 02 с соответствующим признаком налогоплательщика
		ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
		Если ЭлементЛист02 = Неопределено Тогда
			
			// если узел Листа 02 не найден, то создаем новый
			ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
			ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
			
		КонецЕсли;
		
		// выгружаем экземпляр приложения 2 к листу 02
		ЗаполнитьДаннымиУзел(ЭкзЛист02Прил2.Данные, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасхРеалВнеРеал")));
		
	КонецЦикла;
	
	// выгружаем "Приложение 3 к листу 02"
	Для Каждого ЭкзЛист02Прил3 из ДанныеЛиста02Прил3 Цикл
		
		// проверяем, заполнена ли страница
		ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил3.Данные.П002030000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил3.Данные, "Лист02_Прил3", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел Листа 02 с соответствующим признаком налогоплательщика
		ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
		Если ЭлементЛист02 = Неопределено Тогда
			
			// если узел Листа 02 не найден, то создаем новый
			ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
			ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
			
		КонецЕсли;
		
		// выгружаем экземпляр приложения 3 к листу 02
		ЗаполнитьДаннымиУзел(ЭкзЛист02Прил3.Данные, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасчРасхОпер")));
		
	КонецЦикла;
	
	// выгружаем "Приложение 4 к листу 02"
	Для Каждого ЭкзЛист02Прил4 из ДанныеЛиста02Прил4 Цикл
		
		// проверяем, заполнена ли страница
		ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил4.Данные.П002040000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил4.Данные, "Лист02_Прил4", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел Листа 02 с соответствующим признаком налогоплательщика
		ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
		Если ЭлементЛист02 = Неопределено Тогда
			
			// если узел Листа 02 не найден, то создаем новый
			ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
			ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
			
		КонецЕсли;
		
		// выгружаем экземпляр приложения 4 к листу 02
		УбытУменНБ = СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "УбытУменНБ"));
		ЗаполнитьДаннымиУзел(ЭкзЛист02Прил4.Данные, УбытУменНБ);
		
		// вручную выгружаем остатки неперенесенного убытка по годам
		ОстУбытНачПерГод = ПолучитьПодчиненныйЭлемент(УбытУменНБ, "ОстУбытНачПерГод");
		Для НомСтрДес = 4 По 13 Цикл
			КопияОстУбытНачПерГод = СкопироватьУзел(УбытУменНБ, ОстУбытНачПерГод);
			КодПоказателяГрафа1 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "001";
			КодПоказателяГрафа3 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "003";
			ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "Год"), ЭкзЛист02Прил4.Данные[КодПоказателяГрафа1]);
			ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "ОстУбыт"), ЭкзЛист02Прил4.Данные[КодПоказателяГрафа3]);
		КонецЦикла;
		
	КонецЦикла;
	
	// выгружаем "Приложение 5 к листу 02"
	Для Каждого ЭкзЛист02Прил5 из ДанныеЛиста02Прил5 Цикл
		
		// проверяем, заполнена ли страница
		ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил5.Данные.П002050000100);
		Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил5.Данные, "Лист02_Прил5", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел Листа 02 с соответствующим признаком налогоплательщика
		ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
		Если ЭлементЛист02 = Неопределено Тогда
			
			// если узел Листа 02 не найден, то создаем новый
			ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
			ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
			
		КонецЕсли;
		
		// выгружаем экземпляр приложения 5 к листу 02
		ЗаполнитьДаннымиУзел(ЭкзЛист02Прил5.Данные, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РаспрНалСубРФ")));
		
	КонецЦикла;
	
	// заполняем лист 03
	НалУдНА = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалУдНА");
	
	// заполняем лист 03 (раздел А)
	НалДохДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохДив");
	ДанныеЛист03РазделА = мДанныеОтчета.Лист03;
	Для Каждого Стр Из ДанныеЛист03РазделА Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Лист03", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(НалУдНА, НалДохДив);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (раздел Б)
	НалДохЦБ = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохЦБ");
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Продолжение;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Лист03Продолжение", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохЦБ = СкопироватьУзел(НалУдНА, НалДохЦБ);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалДохЦБ);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (реестр)
	РеестрСумДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "РеестрСумДив");
	ДанныеЛист03Реестр = мДанныеОтчета.Лист03Реестр;
	Для Каждого Стр Из ДанныеЛист03Реестр Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Лист03Реестр", УзелРодитель.Владелец()) Тогда
			ЭкзРеестрСумДив = СкопироватьУзел(НалУдНА, РеестрСумДив);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзРеестрСумДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 04
	НалДохСтав = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалДохСтав");
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Лист04", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(УзелРодитель, НалДохСтав);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 05
	НалБазОпОсоб = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалБазОпОсоб");
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		Если НЕ СтраницаПуста(Стр.Данные, "Лист05", УзелРодитель.Владелец()) Тогда
			ЭкзНалБазОпОсоб = СкопироватьУзел(УзелРодитель, НалБазОпОсоб);
			ЗаполнитьДаннымиУзел(Стр.Данные, ЭкзНалБазОпОсоб);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 06
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист06, "Лист06", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист06, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохРасНалБазаНПФ"));
	КонецЕсли;
	
	// заполняем лист 07
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист07, "Лист07", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист07, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЦелИспИмущ"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);//!!!
	сохрСтруктураУзлаРасчНал = СохранитьСтруктураУзла(ДеревоВыгрузки, "РасчНал");
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, сохрСтруктураУзлаРасчНал);//!!!
	
КонецПроцедуры

Процедура ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, СтурктураУзла)
	
	Если СтурктураУзла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПринудительнаяВыгрузкаПриложений1И2КЛисту02() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУзлаЛист02 = СтурктураУзла.Строки.Найти("РасчНал", "Код", Истина);
	СтруктураУзлаПрил1КЛисту02 = СтурктураУзла.Строки.Найти("ДохРеалВнеРеал", "Код", Истина);
	СтруктураУзлаПрил2КЛисту02 = СтурктураУзла.Строки.Найти("РасхРеалВнеРеал", "Код", Истина);
	
	УзелПрибыль = ДеревоВыгрузки.Строки.Найти("Прибыль", "Код", Истина);
	
	УзлыРаздела11 = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", "НалПУАв"), Истина);
	Для Каждого УзелРаздела11 Из УзлыРаздела11 Цикл
		
		// находим атрибут ТипНП
		УзелТипНП = УзелРаздела11.Строки.Найти("ТипНП", "Код");
		Если УзелТипНП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// получаем значение атрибута
		ЗначениеТипНП = УзелТипНП.Значение;
		Если НЕ ЗначениеЗаполнено(ЗначениеТипНП) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел листа 02 с тем же признаком типа налогоплательщика
		УзлыТипНПЛист02 = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код, Ключ, Значение", "ТипНП", "П002000000100", ЗначениеТипНП), Истина);
		Если УзлыТипНПЛист02.Количество() = 0 Тогда
			УзелЛист02 = Неопределено;
		Иначе
			УзелЛист02 = УзлыТипНПЛист02[0].Родитель;
		КонецЕсли;
		
		УзелПрил1КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("ДохРеалВнеРеал", "Код"));
		УзелПрил2КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("РасхРеалВнеРеал", "Код"));
		
		// выгружаем пустой лист 02, если его нет в тексте выгрузки
		Если УзелЛист02 = Неопределено ИЛИ УзелЛист02.Строки.НайтиСтроки(Новый Структура("Тип", "А")).Количество() = 1 Тогда
			
			УзелНалПУ = УзелПрибыль.Строки.Найти("НалПУ", "Код");
			Если УзелНалПУ = Неопределено Тогда
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, 0, УзелЛист02);
			Иначе
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, УзелПрибыль.Строки.Индекс(УзелНалПУ) + 1, УзелЛист02);
			КонецЕсли;
			
			УзелТипНП = УзелЛист02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелЛист02);
			
		КонецЕсли;
		
		// выгружаем пустое приложение 1 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил1КЛисту02 = Неопределено Тогда
			УзелПрил1КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил1КЛисту02, , ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02));
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил1КЛисту02);
		КонецЕсли;
		
		// выгружаем пустое приложение 2 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил2КЛисту02 = Неопределено Тогда
			УзелПрил2КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил2КЛисту02, , УзелЛист02.Строки.Индекс(УзелПрил1КЛисту02) + 1);
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил2КЛисту02, Новый Структура("МетодНачАморт", "1"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02)
	
	ИндексРезультат = 0;
	Для Каждого Стр Из  УзелЛист02.Строки Цикл
		Если Стр.Тип = "А" ИЛИ Стр.Тип = "A" Тогда
			ИндексРезультат = УзелЛист02.Строки.Индекс(Стр) + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат ИндексРезультат;
	
КонецФункции

Процедура ЗаполнитьНулямиНезаполненныеАтрибуты(Узел, Знач Исключения = Неопределено)
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	Если (Узел.Тип = "А" ИЛИ Узел.Тип = "A") И НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		ЗначениеАтрибута = Неопределено;
		Узел.Значение = ?(Исключения.Свойство(Узел.Код, ЗначениеАтрибута), ЗначениеАтрибута, "0");
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ЗаполнитьНулямиНезаполненныеАтрибуты(Стр, Исключения);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьПустойУзелРаздела(УзелРодитель, СтруктураПустогоРаздела, ТолькоПервыйУровень = Ложь, ИндексУзла = Неопределено, УзелРаздела = Неопределено)
	
	Если ТолькоПервыйУровень Тогда
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		КонецЕсли;
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			Если (Стр.Тип = "А" ИЛИ Стр.Тип = "A") И УзелРаздела.Строки.Найти(Стр.Код, "Код") = Неопределено Тогда
				
				// ищем первое вхождение сложного элемента и вставляем на его место новый атрибут
				СложныйЭлемент = УзелРаздела.Строки.Найти("С", "Тип");
				Если СложныйЭлемент = Неопределено Тогда
					НовСтр = УзелРаздела.Строки.Добавить();
				Иначе
					НовСтр = УзелРаздела.Строки.Вставить(УзелРаздела.Строки.Индекс(СложныйЭлемент));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			ЗагрузитьПустойУзелРаздела(УзелРаздела, Стр, ТолькоПервыйУровень);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УзелРаздела;
	
КонецФункции

Функция ПринудительнаяВыгрузкаПриложений1И2КЛисту02()
	
	ДатаОкончанияПериодаОтчета = мСохраненныйДок.ДатаОкончания;
	ЭтоСдачаПоИтогамКвартала = (Месяц(ДатаОкончанияПериодаОтчета) % 3 = 0);
	
	ПризнакПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223" ИЛИ ПризнакПоМесту = "224");
	
	Возврат ЭтоСдачаПоИтогамКвартала И НЕ ЭтоСдачаЗаОбособленноеПодразделение;
	
КонецФункции

Функция СохранитьСтруктураУзла(Знач Узел, КодУзла = Неопределено, СтруктураУзла = Неопределено)
	
	ЭтоПервыйЗаход = (СтруктураУзла = Неопределено);
	
	Если ЭтоПервыйЗаход Тогда
		
		СтруктураУзла = Новый ДеревоЗначений;
		Для Каждого Колонка Из Узел.Колонки Цикл
			СтруктураУзла.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Узел = Узел.Строки.Найти(КодУзла, "Код", Истина);
		Если Узел = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СтруктураУзла.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Узел);
	
	Для Каждого Стр Из Узел.Строки Цикл
		СохранитьСтруктураУзла(Стр, , НовСтр);
	КонецЦикла;
	
	Если ЭтоПервыйЗаход Тогда
		Возврат СтруктураУзла;
	КонецЕсли;
	
КонецФункции

Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// обрабатываем суммы в разделе 1.1
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел1_1"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
	// обрабатываем сумму в приложении 5 к листу 02
	УзлыСумНалПВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "СумНалПВрем", "Лист02_Прил5"), Истина);
	Для Каждого УзелСумНалПВрем Из УзлыСумНалПВрем Цикл
		Если ЗначениеЗаполнено(УзелСумНалПВрем.Значение) И УзелСумНалПВрем.Значение <> "0" Тогда
			УзелСумНалП = УзелСумНалПВрем.Родитель.Строки.Найти("СумНалП", "Код");
			УзелСумНалП.Значение = "-" + УзелСумНалПВрем.Значение;
		КонецЕсли;
		УзелСумНалПВрем.Родитель.Строки.Удалить(УзелСумНалПВрем);
	КонецЦикла;
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
////////////////////////////////////////////////////////////////////////////////

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//используется для удаления значений итоговых показателей на листах МЧБ, образованных многострочными разделами (кроме последнего)
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
		
		ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
		ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
		
		Для Каждого Обл Из ТаблДок.Области Цикл
			Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
				И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
				И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная
				Тогда
					Обл.Текст = "-";
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли
КонецПроцедуры

Процедура Печать(ВидПечати) Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Функция ПолучитьСмысловуюЧастьИмениЯчейки
// возвращает смысловую часть ячейки
// полезно, если ячейка является квадратом значения
// если Определение = Истина - получитьСмысловуюЧасть, иначе - Получить счетчик, то что после "_"
//
// Параметры:
//  ИмяЯчейки      - название ячейки, строка.
//  Определение    - что необходимо вернуть, Истина - смысловую часть, Ложь - индекс.
//
// Возвращаемое значение:
//  Строка - смысловая часть или индекс
//
Функция ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Определение = Истина) Экспорт

	Для Инд = 1 По СтрДлина(ИмяЯчейки) Цикл
		// последний разделитель
		// не пользуемся тут функцией Найти, т.к. разделителей может быть много в одной ячейки, пример ИНН_1_1
		
		СимволСтроки = Сред(ИмяЯчейки,СтрДлина(ИмяЯчейки) - Инд + 1 ,1);

		Если СимволСтроки = "_" Тогда 
		// встретился знак "_" считаем его разделителем
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред

		//Если НЕ роЯвляетсяЧислом(СимволСтроки) Тогда
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(СимволСтроки) Тогда
		// встретилась буква разделить
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред
	КонецЦикла;

	СмысловаяЧасть = Сред(ИмяЯчейки, 1, АдресПоследнегоРазделителя); // возвращаем ВМЕСТЕ с разделителем
	// Получаем текущий счетчик
	ТекущийСчетчик = Сред(ИмяЯчейки, АдресПоследнегоРазделителя + 1, СтрДлина(ИмяЯчейки) - АдресПоследнегоРазделителя);

	Если Определение Тогда
		Возврат СмысловаяЧасть;
	Иначе
		Возврат ТекущийСчетчик;
	КонецЕсли;

КонецФункции // ПолучитьСмысловуюЧастьИмениЯчейки

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный",		"МЧБ_2009кв4_01_Титул");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1_1",		"МЧБ_2009кв4_02_Раздел_1_1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1_2",		"МЧБ_2009кв4_03_Раздел_1_2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1_3",		"МЧБ_2009кв4_04_Раздел_1_3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02",			"МЧБ_2009кв4_05_Лист_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02_Прил1", 	"МЧБ_2009кв4_06_Приложение_1_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02_Прил2",		"МЧБ_2009кв4_07_Приложение_2_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02_Прил3",		"МЧБ_2009кв4_08_Приложение_3_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02_Прил4",		"МЧБ_2009кв4_09_Приложение_4_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист02_Прил5",		"МЧБ_2009кв4_10_Приложение_5_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист03",			"МЧБ_2009кв4_11_Лист_03_Раздел_А");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист03Продолжение","МЧБ_2009кв4_12_Лист_03_Раздел_Б");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист03Реестр",		"МЧБ_2009кв4_13_Лист_03_Раздел_В");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист04",			"МЧБ_2009кв4_14_Лист_04");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист05",			"МЧБ_2009кв4_15_Лист_05");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист06",			"МЧБ_2009кв4_16_Лист_06");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаЛист07",			"МЧБ_2009кв4_17_Лист_07");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 0;
	МакетМЧБ.ПолеСправа = 0;
	МакетМЧБ.ПолеСнизу = 0;
	МакетМЧБ.ПолеСлева = 0;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	//Определение: является ли раздел многострочным 
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Сред(Параметры.ИмяТабличногоПоля,24));
	Если ИдГруппы <> Неопределено Тогда
		//определение исходного количества строк на листе МЧБ
		ИсхКолвоСтрокБлока = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы,ИсхКолвоСтрокБлока);
		ТекКолвоСтрокБлока = мСтруктураМногострочныхРазделов[ИдГруппы].Количество();
		Если ТекКолвоСтрокБлока > ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			Для каждого КолонкаСтруктуры Из мСтруктураМногострочныхРазделов[ИдГруппы].Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				//переименование+++ (начиная со второго листа)
				Если Сч > 1 Тогда
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							//проверка на вхождение в данную многострочную часть
							Продолжить;
						КонецЕсли;
						
						//определение и отбрасывание НомерЯчейки
						ПоказательИНомерСтрокиСРазделителем = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						//определение СмысловаяЧасть и ТекущийСчетчик
						СмысловаяЧастьСРазделителем = ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						//Окончательная проверка на вхождение в данную многострочную часть
						Если Найти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ИсхКолвоСтрокБлока;
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							//очищение происходит после этого цикла
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						//Подготовка к переименованию
						//заполнение списка: значение - область, представление - будущее имя
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
					КонецЦикла;
					
					//Очищение
					Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = "-";
					КонецЦикла;
					
					//Переименование
					Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
					КонецЦикла;
							
				КонецЕсли; 
				//переименование---
				//
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Параметры, ЛистМЧБ);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ЛистМЧБ, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
				
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
				ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
				ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	//Специальный алгоритм для многострочных разделов+++
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									
									////исключение+ 
									// для строки 40 Прил 5 производится округление до 11 знака после запятой
									Если Найти(Область.Имя, "П002050004003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 11 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 11)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									////исключение- 
									
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)
	
	Печать(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// ВГруппуОПВходитОрганизацияПриИзменении
//
Процедура ВГруппуОПВходитОрганизацияПриИзменении(Элемент)

	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ВГруппуОПВходитОрганизация, Истина);
	Расчет("");

КонецПроцедуры // ВГруппуОПВходитОрганизацияПриИзменении

Процедура ПолеТабличногоДокументаТитульныйR25C27ПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Элемент.Значение) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Элемент.Значение) Тогда
		Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
		Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
		Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиРасшифровкуДоходов(ВидДоходов)
	
	СтруктураОбщихПараметров = Новый Структура;
	СтруктураОбщихПараметров.Вставить("Организация", Организация);
	СтруктураОбщихПараметров.Вставить("ВидДоходов", ВидДоходов);
	СтруктураОбщихПараметров.Вставить("ДатаНач", мДатаНачалаПериодаОтчета);
	СтруктураОбщихПараметров.Вставить("ДатаКон", мДатаКонцаПериодаОтчета);
	
	СохранитьЗначение("ОбщиеПараметрыОтчетовРегистрДоходов", СтруктураОбщихПараметров);
	
	Обраб = Отчеты.РегистрУчетаОперацийВыбытияИмущества.Создать();
	Обраб.ПолучитьФорму("Отчет").Открыть();
	
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАГРУЗКИ ИЗ XML
//

// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Загрузка данных изнутри формы
Процедура КоманднаяПанельФормыКнопкаЗагрузка(Кнопка)
	
	//выбор файла загрузки
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Файл XML (*.xml)|*.xml";
	
	Если Диалог.Выбрать() Тогда
		ПутьКФайлуВыгрузки = Диалог.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДеревоДанныхИзФайлаXML = ИзвлечьДанныеИзXMLФайла(ПутьКФайлуВыгрузки);
	
	Окружение = Новый Соответствие();

	Окружение.Вставить("ДеревоДанных", ДеревоДанныхИзФайлаXML);
	
	// определение КНД отчета и версии формата выгрузки
	СтрокаФормата = ДеревоДанныхИзФайлаXML.Строки.Найти("ВерсФорм", "Код", Истина);
	СтрокаКНД = ДеревоДанныхИзФайлаXML.Строки.Найти("КНД", "Код", Истина);
	
	Если СтрокаФормата = Неопределено ИЛИ СтрокаКНД = Неопределено Тогда
		Сообщить("Файл имеет неправильный формат."); 	
		Возврат;
	Иначе
		стрКНД = СтрокаКНД.Значение;
		стрФормат = СтрокаФормата.Значение;
	КонецЕсли;
	
	Окружение.Вставить("ВерсФорм", стрФормат);
	Окружение.Вставить("КНД", стрКНД);
	
	Если стрКНД <> мКодОтчета Тогда
		Сообщить("Загрузка отчета с КНД " + стрКНД + " не поддерживается");
		Возврат;
	КонецЕсли;
	
	ИмяМакета = "МЗ_" + стрКНД + "_" + СтрЗаменить(стрФормат, ".","");
	
	Попытка
	    Макет = ПолучитьМакет(ИмяМакета);
		Окружение.Вставить("Макет", ИмяМакета);
	Исключение
	    Сообщить("Загрузка отчета с КНД " + стрКНД + " и версией формата " + стрФормат + " не поддерживается.");
		Возврат;
	КонецПопытки; 
	
	// проверка: поддерживает ли выбранный макет загрузки текущую форму
	стрФормыОтчета = ВРЕГ(Макет.Область("ФормыОтчета").Текст);
	МассивФорм = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(стрФормыОтчета, ",");
	
	Если МассивФорм.Найти(ВРЕГ(мВыбраннаяФорма)) <> Неопределено Тогда
		Окружение.Вставить("Форма", мВыбраннаяФорма);
	Иначе 
		Сообщить("Текущая форма не поддерживает загрузку данных версии формата " + стрФормат);
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Внимание! Перед загрузкой данных будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	//очистка отчета
	ПолнаяОчисткаПередЗагрузкой();
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["НомСтр1_" + Инд].Значение = "";
		мТитульный.Области["СоставленаНа" + Инд].Значение = "";
		мТитульный.Области["Прил" + Инд].Значение = "";
	КонецЦикла;
	
	Для каждого Эл Из мСтруктураМногострочныхРазделов Цикл
		ИмяБлока 		= Эл.Ключ;
		ТаблицаБлока 	= Эл.Значение;
		ТаблицаБлока.Очистить();	
	КонецЦикла;
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	ПараметрыОтчета = Неопределено;
	
	Если НЕ СформироватьСтруктурыДанных(Окружение, ПараметрыОтчета) Тогда
		Возврат;	
	КонецЕсли;
	
	//загрузка сформированных структур
	ЗаполнитьРазделыСформированнымиДанными();
	УстановитьФорматВыводаВПоляхВвода();
КонецПроцедуры

Процедура ПолнаяОчисткаПередЗагрузкой()
	
	Модифицированность = Истина;
	// обновим структуру многостраничных разделов
	ТаблицаСтраницыРаздела = ПолучитьТаблицуМногостраничногоРаздела();
	ТаблицаСтраницыРазделаДляМногострочныхРазделов=ПолучитьТаблицуМногостраничногоРаздела(Истина);
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_1", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил1", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил2", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил3", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил4", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил5", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист03", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Продолжение", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Реестр", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист04", ТаблицаСтраницыРаздела.Скопировать());
	мСтруктураМногостраничныхРазделов.Вставить("Лист05", ТаблицаСтраницыРаздела.Скопировать());
	
	// очищаем поля табличных документов 
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		ВыбТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы];
		//для очистки защищенных областей получим их список, снимая с них защиту, а после очищения вернем защиту
		СписокЯчеек = Новый СписокЗначений;
		
		Для каждого Область Из ВыбТабличноеПоле.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
			И Область.СодержитЗначение = Истина 
			И Область.Защита Тогда
				Область.Защита = Ложь;
				СписокЯчеек.Добавить(Область.Имя);
			КонецЕсли;
		КонецЦикла;
		
		РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
		
		Для каждого ИмяЯчейки Из СписокЯчеек Цикл
			ОбластьПоказателя = ВыбТабличноеПоле.Области.Найти(ИмяЯчейки.Значение);
			Если ОбластьПоказателя <> Неопределено Тогда
				ОбластьПоказателя.Защита = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// очистим флаг вхождения в группу ОП.
	ВГруппуОПВходитОрганизация = Ложь;
	ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
КонецПроцедуры
 
// Экспортная процедура загрузки, запускаемая извне. 
// Создает новый регламентированный отчет.
Процедура ЗагрузитьДанныеФайлаВыгрузки(Окружение) Экспорт
	ИнициализацияЗагрузки();	
	
	ПараметрыОтчета = Неопределено;
	
	Если НЕ СформироватьСтруктурыДанных(Окружение, ПараметрыОтчета) Тогда
		Возврат;	
	КонецЕсли;
	
	СоздатьДокументОтчета(Окружение, ПараметрыОтчета);
КонецПроцедуры

Процедура ИнициализацияЗагрузки()
	ЗаполнитьНачальныеНастройки(); //для заполнения мСтруктураВариантыЗаполнения
    ФормироватьСтруктуруСтраницОтчета(); //для заполнения мДеревоСтраницОтчета
	ФормироватьСтруктуруСвойствСтраниц(); //для заполнения мСвойстваРазделовДекларации
	
	мТитульный          = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел2            = ЭлементыФормы.ПолеТабличногоДокументаЛист02;
	мРаздел2_Прил1      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил1;
	мРаздел2_Прил2      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил2;
	мРаздел2_Прил3      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил3;
	мРаздел2_Прил4      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил4;
	мРаздел2_Прил5      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил5;
	мРаздел3            = ЭлементыФормы.ПолеТабличногоДокументаЛист03;
	мРаздел3Продолжение = ЭлементыФормы.ПолеТабличногоДокументаЛист03Продолжение;
	мРаздел3Реестр      = ЭлементыФормы.ПолеТабличногоДокументаЛист03Реестр;
	мРаздел4            = ЭлементыФормы.ПолеТабличногоДокументаЛист04;
	мРаздел5            = ЭлементыФормы.ПолеТабличногоДокументаЛист05;
	мРаздел6            = ЭлементыФормы.ПолеТабличногоДокументаЛист06;
	мРаздел7            = ЭлементыФормы.ПолеТабличногоДокументаЛист07;
КонецПроцедуры

Функция СформироватьСтруктурыДанных(Окружение, ПараметрыОтчета)
	Окружение.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Прибыль");
	
	ДеревоМакетаЗагрузки = ИзвлечьСтруктуруXMLЗагрузки(Окружение["Макет"]);
	
	ДеревоДанных = Окружение["ДеревоДанных"];
	
	ДеревоДанных.Колонки.Добавить("Раздел");
	ДеревоДанных.Колонки.Добавить("Ключ");
	ДеревоДанных.Колонки.Добавить("ТипЗначения");
	ДеревоДанных.Колонки.Добавить("Многостраничность");
	ДеревоДанных.Колонки.Добавить("Многострочность");
	РекурсивноЗаполнитьДопКолонки(ДеревоДанных, ДеревоМакетаЗагрузки);
	
	ДоработатьДеревоДанных(ДеревоДанных);
	
	ПараметрыОтчета = Новый Структура;  // общие параметры отчета (Организация, Период и т.д.)
	мПоказателиОтчета = Новый Структура; // данные НЕ многострочных показателей НЕ многостраничных разделов
	
	ПолучитьПараметрыОтчетаИзДереваДанных(ДеревоДанных, Окружение, ПараметрыОтчета);
	
	Если НЕ ЗаполнитьРазделыПараметрамиОтчета(Окружение, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// формирование мПоказателиОтчета
	мПоказателиОтчета.Вставить(мТитульный.Имя, СобратьДанныеТекущегоТаблПоля(мТитульный));
	мПоказателиОтчета.Вставить(мРаздел6.Имя, СобратьДанныеТекущегоТаблПоля(мРаздел6));
	мПоказателиОтчета.Вставить(мРаздел7.Имя, СобратьДанныеТекущегоТаблПоля(мРаздел7));
	
	// формирование пустых шаблонов данных многостраничных разделов
	мСтрукШаблоныДанныхМногостраничныхРазделов = Новый Структура;
	Для каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела = Раздел.Ключ;
		ШаблонДанныхРаздела = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела]);
		мСтрукШаблоныДанныхМногостраничныхРазделов.Вставить(ИмяРаздела, ШаблонДанныхРаздела);
	КонецЦикла;
	
	//очистка структуры многостраничных разделов от пустых таблиц разделов
	ПредОбработкаМногостраничныхРазделов();
	
	//загрузка содержательной части (заполнение мСтруктураМногостраничныхРазделов, мСтруктураМногострочныхРазделов, мПоказателиОтчета)
	СтрокаСодержательнойЧасти = ДеревоДанных.Строки.Найти(Окружение["ИмяКлючевогоУзлаСодержательнойЧасти"], "Код", Истина);
	ЗагрузитьСодержательнуюЧасть(СтрокаСодержательнойЧасти);	
	
	ПостОбработкаМногострочныхБлоков();
	
	//помещение пустых таблиц разделов в структуры многостраничных разделов в случае их отсутствия
	ПостОбработкаМногостраничныхРазделов();
	
	ПостОбработкаДанныхСпецификаОтчета();
	
	Возврат Истина;
КонецФункции

Функция ИзвлечьСтруктуруXMLЗагрузки(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("ТипЗначения");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	
	Макет = ПолучитьМакет(ИмяМакета);
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 3 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 3;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 3 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				ОбластьТипаЗначения = Макет.Область(НомСтр, 4, НомСтр, 4);
				Если ОбластьТипаЗначения.СодержитЗначение Тогда
					НовСтр.ТипЗначения = Макет.Область(НомСтр, 4, НомСтр, 4).ТипЗначения;
				КонецЕсли; 
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура РекурсивноЗаполнитьДопКолонки(УзелДанные, УзелДопКолонки)
	Для каждого СтрокаДанные Из УзелДанные.Строки Цикл
		СтрокаДопКолонки = УзелДопКолонки.Строки.Найти(СтрокаДанные.Код, "Код", Ложь);
		Если СтрокаДопКолонки <> Неопределено Тогда
			СтрокаДанные.Раздел 			= СтрокаДопКолонки.Раздел;	
			СтрокаДанные.Ключ 				= СтрокаДопКолонки.Ключ;
			СтрокаДанные.ТипЗначения 		= СтрокаДопКолонки.ТипЗначения;
			СтрокаДанные.Многостраничность 	= СтрокаДопКолонки.Многостраничность;
			СтрокаДанные.Многострочность 	= СтрокаДопКолонки.Многострочность;
			
			Если СтрокаДанные.Строки.Количество() > 0 Тогда
				РекурсивноЗаполнитьДопКолонки(СтрокаДанные, СтрокаДопКолонки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РекурсивноДоработатьДеревоДанных(УзелДанные, Параметры)
	Для каждого СтрокаДанные Из УзелДанные.Строки Цикл
		
		Если СтрокаДанные.Строки.Количество() > 0 Тогда
			РекурсивноДоработатьДеревоДанных(СтрокаДанные, Параметры);
		КонецЕсли;
		
		Код 	= СтрокаДанные.Код;
		Раздел 	= СтрокаДанные.Раздел;
		
		Если Раздел = "Лист02_Прил4" Тогда
			Если Код = "Год" Тогда
				СтрокаДанные.Ключ = "П0020400" + Формат(Параметры.Прил4_НомСтрДес01, "ЧЦ=2; ЧВН=") + "001";
				Параметры.Прил4_НомСтрДес01 = Параметры.Прил4_НомСтрДес01 + 1;
			ИначеЕсли Код = "ОстУбыт" Тогда
				СтрокаДанные.Ключ = "П0020400" + Формат(Параметры.Прил4_НомСтрДес03, "ЧЦ=2; ЧВН=") + "003";
				Параметры.Прил4_НомСтрДес03 = Параметры.Прил4_НомСтрДес03 + 1;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ДоработатьДеревоДанных(ДеревоДанных);
	
	ПараметрыОтбора = Новый Структура("Код", "УбытУменНБ");
	МассивРазделов = ДеревоДанных.Строки.НайтиСтроки(ПараметрыОтбора, Истина);

	Для каждого УзелРаздела Из МассивРазделов Цикл
		ПараметрыДоработки = Новый Структура;
		ПараметрыДоработки.Вставить("Прил4_НомСтрДес01", 4);
		ПараметрыДоработки.Вставить("Прил4_НомСтрДес03", 4);
		
		РекурсивноДоработатьДеревоДанных(УзелРаздела, ПараметрыДоработки);
	КонецЦикла;
	
КонецПроцедуры


Процедура ПолучитьПараметрыОтчетаИзДереваДанных(УзелДанные, Окружение, ПараметрыОтчета)
	
	Для каждого СтрокаДанные Из УзелДанные.Строки Цикл
		
		Код 		= СтрокаДанные.Код;
		Ключ 		= СтрокаДанные.Ключ;
		Значение 	= СтрокаДанные.Значение;
		Раздел 		= СтрокаДанные.Раздел;
		
		Если СтрокаДанные.Строки.Количество() > 0 Тогда
			Если Код <> Окружение["ИмяКлючевогоУзлаСодержательнойЧасти"] Тогда //узел содержательной части не обрабатываем
				//обработка узла параметров отчета
				ПолучитьПараметрыОтчетаИзДереваДанных(СтрокаДанные, Окружение, ПараметрыОтчета);	
			КонецЕсли;
		Иначе
			//обработка параметра отчета
			Если ЗначениеЗаполнено(Ключ) Тогда
				ПараметрыОтчета.Вставить(Ключ, Значение);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДатыОтчета(ПараметрыОтчета)
	
	ГодПериодОтч 	= ПараметрыОтчета.ГодПериодОтч;
	ПериодОтч 		= ПараметрыОтчета.ПериодОтч;
	
	МесяцКонца = Новый Соответствие; //соответствие кода ПериодОтч номеру месяца окончания отчета
	
	МесяцКонца.Вставить("21", "03");
	МесяцКонца.Вставить("31", "06");
	МесяцКонца.Вставить("33", "09");
	МесяцКонца.Вставить("34", "12");
	МесяцКонца.Вставить("35", "01");
	МесяцКонца.Вставить("36", "02");
	МесяцКонца.Вставить("37", "03");
	МесяцКонца.Вставить("38", "04");
	МесяцКонца.Вставить("39", "05");
	МесяцКонца.Вставить("40", "06");
	МесяцКонца.Вставить("41", "07");
	МесяцКонца.Вставить("42", "08");
	МесяцКонца.Вставить("43", "09");
	МесяцКонца.Вставить("44", "10");
	МесяцКонца.Вставить("45", "11");
	МесяцКонца.Вставить("46", "12");
	МесяцКонца.Вставить("50", "12");
	
	ДатаНачалаПериода = НачалоГода(Дата(ГодПериодОтч + "0101"));
	ДатаКонцаПериода = КонецМесяца(Дата(ГодПериодОтч + МесяцКонца[ПериодОтч] + "01"));	
	Периодичность = ?(ПериодОтч = "21" ИЛИ ПериодОтч = "31" ИЛИ ПериодОтч = "33" ИЛИ ПериодОтч = "34", 
					Перечисления.Периодичность.Квартал, Перечисления.Периодичность.Месяц);
	
	Возврат Новый Структура("ДатаНачалаПериода, ДатаКонцаПериода, Периодичность", ДатаНачалаПериода, ДатаКонцаПериода, Периодичность);
	
КонецФункции 

Функция ПолучитьОрганизацию(Окружение, ПараметрыОтчета)
	
	Окружение.Вставить("ИНН", ПараметрыОтчета.ИННОрг);
	Окружение.Вставить("КПП", ПараметрыОтчета.КППОрг);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН";
	
	Запрос.Параметры.Вставить("ИНН", Окружение["ИНН"]);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьРазделыПараметрамиОтчета(Окружение, ПараметрыОтчета)
	
	ОрганизацияСсылка = ПолучитьОрганизацию(Окружение, ПараметрыОтчета);
	Если ОрганизацияСсылка <> Неопределено Тогда
		Окружение.Вставить("Организация", ОрганизацияСсылка);
	Иначе
		Сообщить("Организация с ИНН " + Окружение["ИНН"] + " отсутствует в справочнике.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Организация                = Окружение["Организация"];
	ДатаПодписи                = ДатаИзСтроки(ПараметрыОтчета.ДатаДок);
	ЕдиницаИзмерения           = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ТочностьЕдиницыИзмерения   = 0;
	Комментарий                = "Импортирован " + ТекущаяДата();
	
	струкДатыОтчета = ПолучитьДатыОтчета(ПараметрыОтчета);
	мДатаНачалаПериодаОтчета = 	струкДатыОтчета.ДатаНачалаПериода;
	мДатаКонцаПериодаОтчета = 	струкДатыОтчета.ДатаКонцаПериода;
	мПериодичность = 	струкДатыОтчета.Периодичность;
	мВариант = Число(ПараметрыОтчета.ВидДок);

	Если мВариант = 0 Тогда
		ВидДокумента = 0;
		ЭлементыФормы.НомерКорректировки.Доступность = Ложь;
	Иначе
		ВидДокумента = 1;
		ЭлементыФормы.НомерКорректировки.Доступность = Истина;
		НомерКорректировки = мВариант;	
	КонецЕсли;
	
	ОтобразитьНомерКорректировки();
	
	//ИНН и КПП
	ИНН = ПараметрыОтчета.ИННОрг;
	КПП = ПараметрыОтчета.КППОрг;
	
	Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
		ИНН = ИНН + "-";
	КонецЦикла;
	
	Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
		КПП = КПП + "-";
	КонецЦикла;
	
	Для Сч=1 По 9 Цикл
		ПроставитьНаВсехЛистах("ИНН" + Сч + "_", ИНН);
		ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
	КонецЦикла;
	
	//Дата подписи
	ЗаполнитьДатуПодписи();
	
	//ПоМесту
	Для Инд = 1 По 3 Цикл
		мТитульный.Области["ПоМесту" + Инд].Значение = Сред(ПараметрыОтчета.ПоМесту, Инд, 1);
	КонецЦикла;
	
	//ПериодОтч
	Для Инд = 1 По 2 Цикл
		мТитульный.Области["Период" + Инд].Значение = Сред(ПараметрыОтчета.ПериодОтч, Инд, 1);
	КонецЦикла;
	
	//ГодПериодОтч
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["ОтчетГод" + Инд].Значение = Сред(ПараметрыОтчета.ГодПериодОтч, Инд, 1);
	КонецЦикла;
	
	//КодИФНС
	Для Инд = 1 По 4 Цикл
		мТитульный.Области["КодИМНС" + Инд].Значение = Сред(ПараметрыОтчета.КодИФНС, Инд, 1);
	КонецЦикла;
	
	//ОКВЭДОрг
	мТитульный.Области.ОКВЭД.Значение = ПараметрыОтчета.ОКВЭДОрг;
	
	//ТелОрг
	Если ПараметрыОтчета.Свойство("ТелОрг") Тогда
		мТитульный.Области.ТелОрганизации.Значение = ПараметрыОтчета.ТелОрг;
	КонецЕсли; 
	
	//НаимОрг
	мТитульный.Области.НаимОрг.Значение = ПараметрыОтчета.НаимОрг;
	
	//ТипПодписанта 
	мТитульный.Области.ПрПодп.Значение = ПараметрыОтчета.ТипПодписанта;
	
	//ФамилияПодписанта
	//ИмяПодписанта
	//ОтчествоПодписанта
	Подписант = "";
	Если ПараметрыОтчета.Свойство("ФамилияПодписанта") Тогда
		Подписант = ПараметрыОтчета.ФамилияПодписанта;
	КонецЕсли; 
	
	Если ПараметрыОтчета.Свойство("ИмяПодписанта") Тогда
		Подписант = Подписант + " " + ПараметрыОтчета.ИмяПодписанта;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ОтчествоПодписанта") Тогда
		Подписант = Подписант + " " + ПараметрыОтчета.ОтчествоПодписанта;
	КонецЕсли;
	
	мТитульный.Области.ОргПодписант.Значение = Подписант;
	
	//НаимОргПредставителя
	Если ПараметрыОтчета.Свойство("НаимОргПредставителя") Тогда
		мТитульный.Области.ОргУп.Значение = ПараметрыОтчета.НаимОргПредставителя;
	КонецЕсли; 
	
	//НаимДокПредставителя
	Если ПараметрыОтчета.Свойство("НаимДокПредставителя") Тогда
		мТитульный.Области.ДокУпПред.Значение = ПараметрыОтчета.НаимДокПредставителя;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Возврат Истина;
КонецФункции

Процедура ПредОбработкаМногостраничныхРазделов()
	//очистка структуры многостраничных разделов от пустых таблиц разделов
	Для каждого Эл Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела 	= Эл.Ключ;
		ТЗРаздела 	= Эл.Значение;
		
		ТЗРаздела.Очистить();
	КонецЦикла;
КонецПроцедуры

Процедура ПостОбработкаМногостраничныхРазделов()
	// заполнение пустых многостраничных разделов сформированными ранее шаблонами
	Для каждого Эл Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела 	= Эл.Ключ;
		ТЗРаздела 	= Эл.Значение;
		
		Если ТЗРаздела.Количество() = 0 Тогда
			// Добавляем пустую страницу
			СтрНоваяСтраница = ТЗРаздела.Добавить();
			
			СтрНоваяСтраница.Представление					= "Лист N 1";
			СтрНоваяСтраница.АвтоматическоеПредставление	= Истина;
			// Ставим признак активной страницы
			СтрНоваяСтраница.АктивнаяСтраница   = Истина;
			
			//очищаем/создаем Данные и ДанныеДопСтрок
			СтрНоваяСтраница.Данные = ПолучитьКопиюСтруктуры(мСтрукШаблоныДанныхМногостраничныхРазделов[ИмяРаздела]);
			//если раздел является многострочным, нужно создать пустую ТЗ многострочного блока
			ИмяБлока = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяРаздела);
			Если ИмяБлока <> Неопределено Тогда
				ТЗБлока = Новый ТаблицаЗначений;
				Если мСтруктураМногострочныхРазделов.Свойство(ИмяБлока, ТЗБлока) Тогда
					СтрНоваяСтраница.ДанныеДопСтрок = ТЗБлока.Скопировать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСодержательнуюЧасть(УзелРодитель)
	//получив на входе узел содержательной части, обходим основные разделы
	НалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПУ");
	
	ЗагрузитьРаздел("Раздел1_1", "НалПУАв", 		НалПУ);			//Раздел1_1		
	ЗагрузитьРаздел("Раздел1_2", "НалПУМес", 		НалПУ);         //Раздел1_2
	ЗагрузитьРаздел("Раздел1_3", "НалПУПроц", 		НалПУ);         //Раздел1_3
	
	ЗагрузитьРаздел("Лист02", "РасчНал", 			УзелРодитель); 	//Лист02
	
	НалУдНА = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалУдНА");
	
	Если НалУдНА <> Неопределено Тогда
		ЗагрузитьРаздел("Лист03", "НалДохДив", 				НалУдНА); //Лист03
		ЗагрузитьРаздел("Лист03Продолжение", "НалДохЦБ",	НалУдНА); //Лист03Продолжение
		ЗагрузитьРаздел("Лист03Реестр", "РеестрСумДив", 	НалУдНА); //Лист03Реестр
	КонецЕсли;
	
		
	ЗагрузитьРаздел("Лист04", "НалДохСтав", 		УзелРодитель); 	//Лист04
	ЗагрузитьРаздел("Лист05", "НалБазОпОсоб", 		УзелРодитель);  //Лист05
	ЗагрузитьРаздел("Лист06", "ДохРасНалБазаНПФ", 	УзелРодитель);  //Лист06
	ЗагрузитьРаздел("Лист07", "ЦелИспИмущ", 		УзелРодитель);  //Лист07
КонецПроцедуры

Процедура ЗагрузитьРаздел(ИмяРаздела, КодРаздела, УзелРодитель, струкПредопределенныеДанные = Неопределено)
	
	//В ветке родительского узла найдем строку требуемого раздела
	СтрокаРаздела = УзелРодитель.Строки.Найти(КодРаздела, "Код");
	Если СтрокаРаздела <> Неопределено Тогда
		//есть хотя бы один экземпляр раздела
		Если СтрокаРаздела.Многостраничность Тогда
			//загружаемый раздел является многостраничным
			//проведем повторный поиск экземпляров раздела в ветке родительского узла
			ПараметрыОтбора = Новый Структура("Код", КодРаздела);
			МассивРазделов = УзелРодитель.Строки.НайтиСтроки(ПараметрыОтбора);
			Если МассивРазделов <> Неопределено Тогда
				//определим таблицу раздела
				ТЗРаздела = Неопределено;
				мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТЗРаздела);
				Для каждого СтрокаРаздела Из МассивРазделов Цикл
					
					Если ТЗРаздела.Количество() > 0 Тогда
						// Найдем активную страницу
						СтрТаблицаСтраницы = ТЗРаздела.Найти(Истина, "АктивнаяСтраница");
						// Убираем активность у текущей страницы
						СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
					КонецЕсли;	
					
					// Добавляем новую страницу
					СтрНоваяСтраница = ТЗРаздела.Добавить();
						
					СтрНоваяСтраница.Представление					= "Лист N " + ТЗРаздела.Количество();
					СтрНоваяСтраница.АвтоматическоеПредставление	= Истина;
					// Ставим признак активной страницы
					СтрНоваяСтраница.АктивнаяСтраница   = Истина;
					
					//очищаем/создаем Данные и ДанныеДопСтрок
					СтрНоваяСтраница.Данные = ПолучитьКопиюСтруктуры(мСтрукШаблоныДанныхМногостраничныхРазделов[ИмяРаздела]);
					//если раздел является многострочным, нужно создать пустую ТЗ многострочного блока
					ИмяБлока = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяРаздела);
					Если ИмяБлока <> Неопределено Тогда
						ТЗБлока = Новый ТаблицаЗначений;
						Если мСтруктураМногострочныхРазделов.Свойство(ИмяБлока, ТЗБлока) Тогда
							СтрНоваяСтраница.ДанныеДопСтрок = ТЗБлока.Скопировать();
						КонецЕсли;
					КонецЕсли;
					
					РекурсивнаяЗагрузкаРаздела(СтрокаРаздела, СтрНоваяСтраница.Данные);
					
					//установка переданных в параметре свойств
					Если струкПредопределенныеДанные <> Неопределено Тогда
						Для каждого Эл Из струкПредопределенныеДанные Цикл
							СтрНоваяСтраница.Данные.Вставить(Эл.Ключ, Эл.Значение);
						КонецЦикла;
					КонецЕсли;
					
					//после загрузки данных каждого экземпляра раздела Лист02 
					//требуется загрузить подчиненные ему разделы приложений
					Если СтрокаРаздела.Код = "РасчНал" Тогда 
						ТипНПЛист02 = СтрНоваяСтраница.Данные.П002000000100;
						ЗагрузитьРаздел("Лист02_Прил1", "ДохРеалВнеРеал", 	СтрокаРаздела, Новый Структура("П002010000100", ТипНПЛист02)); //Лист02_Прил1
						ЗагрузитьРаздел("Лист02_Прил2", "РасхРеалВнеРеал",	СтрокаРаздела, Новый Структура("П002020000100", ТипНПЛист02)); //Лист02_Прил2
						ЗагрузитьРаздел("Лист02_Прил3", "РасчРасхОпер", 	СтрокаРаздела, Новый Структура("П002030000100", ТипНПЛист02)); //Лист02_Прил3
						ЗагрузитьРаздел("Лист02_Прил4", "УбытУменНБ", 		СтрокаРаздела, Новый Структура("П002040000100", ТипНПЛист02)); //Лист02_Прил4
						ЗагрузитьРаздел("Лист02_Прил5", "РаспрНалСубРФ", 	СтрокаРаздела, Новый Структура("П002050000100", ТипНПЛист02)); //Лист02_Прил5
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			//загружаемый раздел не является многостраничным
			струкПоказателиРаздела = Новый Структура;
			
			//заполнение данных в подготовленный шаблон
			РекурсивнаяЗагрузкаРаздела(СтрокаРаздела, мПоказателиОтчета["ПолеТабличногоДокумента" + СтрокаРаздела.Раздел]);
		КонецЕсли;
	Иначе
		//нет ни одного экземпляра раздела
	КонецЕсли;
КонецПроцедуры

Процедура РекурсивнаяЗагрузкаРаздела(УзелРодитель, СтруктураДанных)
	
	Для каждого СтрокаДанные Из УзелРодитель.Строки Цикл
		//перебор строк показателей раздела, заполнение структуры их значениями
		
		Если СтрокаДанные.Строки.Количество() > 0 Тогда
			//обрабатываем узел
			Если СтрокаДанные.Раздел = УзелРодитель.Раздел Тогда
				//обрабатываем узел, относящийся к требуемому разделу
				Если СтрокаДанные.Многострочность Тогда
					//узел является многострочным блоком
					ИмяРаздела = СтрокаДанные.Раздел;
					Если СтрокаДанные.Многостраничность Тогда
						//внесем данные многострочного блока в активную страницу таблицы раздела в мСтруктураМногостраничныхРазделов
						ТЗРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
						// Найдем активную страницу
						СтрТаблицаСтраницы = ТЗРаздела.Найти(Истина, "АктивнаяСтраница");
						ЗагрузкаСтрокиМногострочногоБлока(СтрокаДанные, СтрТаблицаСтраницы.ДанныеДопСтрок);
					Иначе
						//внесем данные многострочного блока в мСтруктураМногострочныхРазделов
						ИмяБлока = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяРаздела);
						ЗагрузкаСтрокиМногострочногоБлока(СтрокаДанные, мСтруктураМногострочныхРазделов[ИмяБлока]);
					КонецЕсли;
				Иначе
					//узел не является многострочным блоком
					РекурсивнаяЗагрузкаРаздела(СтрокаДанные, СтруктураДанных);
				КонецЕсли;
			Иначе
				//обрабатываем узел, относящийся к другому разделу (подчиненному экземпляру текущего раздела)
			КонецЕсли;
		Иначе
			//обрабатываем строку узла, не являющуюся узлом
			//Данные показателя
			Ключ 		= СтрокаДанные.Ключ;
			Раздел		= СтрокаДанные.Раздел;
			Значение 	= СтрокаДанные.Значение;
			ТипЗначения = СтрокаДанные.ТипЗначения;
			
			//приведение значения к заданному типу
			Если Строка(ТипЗначения) = "Дата" Тогда
				Значение = ДатаИзСтроки(Значение);
			Иначе
				Значение = ТипЗначения.ПривестиЗначение(Значение);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ключ) Тогда
				СтруктураДанных.Вставить(Ключ, Значение);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузкаСтрокиМногострочногоБлока(УзелРодитель, ТЗДанных)
	
	НоваяСтрока = ТЗДанных.Добавить();
	
	Для каждого СтрокаДанные Из УзелРодитель.Строки Цикл
		//перебор строк показателей раздела, заполнение таблицы значений их значениями
		
		//Данные показателя
		Ключ 		= СтрокаДанные.Ключ;
		Значение 	= СтрокаДанные.Значение;
		ТипЗначения = СтрокаДанные.ТипЗначения;
		
		//приведение значения к заданному типу
		Если Строка(ТипЗначения) = "Дата" Тогда
			МассивДаты = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(Значение);
			Значение = Дата(МассивДаты[2], МассивДаты[1], МассивДаты[0]);
		Иначе
			Значение = ТипЗначения.ПривестиЗначение(Значение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ключ) Тогда
			НоваяСтрока[Ключ] = Значение;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры


Процедура ДополнитьМногострочныйБлокПустымиСтроками(ИмяБлока, ТЗДанных)
	Для Сч = (ТЗДанных.Количество() + 1) По мСтруктураИсхКолвоСтрокРазделов[ИмяБлока] Цикл
		ТЗДанных.Добавить();
	КонецЦикла; 
КонецПроцедуры

Процедура ПостОбработкаМногострочныхБлоков()
	//обход ТЗ многострочных блоков - дополнение их пустыми строками до исходного количества
	//в структуре многострочных блоков
	Для каждого Эл Из мСтруктураМногострочныхРазделов Цикл
		ИмяБлока 		= Эл.Ключ;
		ТаблицаБлока 	= Эл.Значение;
		ДополнитьМногострочныйБлокПустымиСтроками(ИмяБлока, ТаблицаБлока);	
	КонецЦикла; 
	//в структуре многостраничных разделов
	Для каждого Эл Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела 		= Эл.Ключ;
		ТаблицаРаздела 	= Эл.Значение;
		
		ИмяБлока = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяРаздела);
		Если ИмяБлока <> Неопределено Тогда
			Для каждого ЛистРаздела Из ТаблицаРаздела Цикл
				ДополнитьМногострочныйБлокПустымиСтроками(ИмяБлока, ЛистРаздела.ДанныеДопСтрок);	
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	// поскольку при восстановлении сохраненного документа данные многострочного блока многостраничного раздела загружаются
	// не из таблицы значений ДанныеДопСтрок, а из структуры Данные, перенесем их туда
	Для каждого Эл Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела 		= Эл.Ключ;
		ТаблицаРаздела 	= Эл.Значение;
		
		ИмяБлока = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяРаздела);
		Если ИмяБлока <> Неопределено Тогда
			Для каждого ЛистРаздела Из ТаблицаРаздела Цикл
				Для каждого СтрокаБлока Из ЛистРаздела.ДанныеДопСтрок Цикл
					Для каждого Колонка Из ЛистРаздела.ДанныеДопСтрок.Колонки Цикл
						Ключ = Колонка.Имя + "_" + (ЛистРаздела.ДанныеДопСтрок.Индекс(СтрокаБлока) + 1);
						ЛистРаздела.Данные.Вставить(Ключ, СтрокаБлока[Колонка.Имя]);
					КонецЦикла; 
				КонецЦикла;  
				
				//для активной страницы данные доп строк копируем в структуру многострочных разделов 
				//(по количеству строк в этой структуре происходит добавление строк на экранной форме 
				//для активной страницы при загрузке/восстановлении)
				Если ЛистРаздела.АктивнаяСтраница Тогда
					мСтруктураМногострочныхРазделов.Вставить(ИмяБлока, ЛистРаздела.ДанныеДопСтрок);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	//аналогично для немногостраничных разделов
	Для каждого Эл Из мСтруктураМногострочныхРазделов Цикл
		ИмяБлока 		= Эл.Ключ;
		ИмяТПРаздела = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяБлока).Имя;
		ИмяРаздела = СтрЗаменить(ИмяТПРаздела, "ПолеТабличногоДокумента", "");
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела) Тогда
			ТаблицаБлока 	= Эл.Значение;	
			Для каждого СтрокаБлока Из ТаблицаБлока Цикл
				Для каждого Колонка Из ТаблицаБлока.Колонки Цикл
					Ключ = Колонка.Имя + "_" + (ТаблицаБлока.Индекс(СтрокаБлока) + 1);
					мПоказателиОтчета[ИмяТПРаздела].Вставить(Ключ, СтрокаБлока[Колонка.Имя]);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПостОбработкаДанныхСпецификаОтчета()
	//строки 40, 50, 70, 80 раздела 1_1
	Для каждого СтрокаТЗ Из мСтруктураМногостраничныхРазделов["Раздел1_1"] Цикл
		Данные = СтрокаТЗ.Данные;
		
		Если Данные.П000110004003 < 0 Тогда
			Данные.П000110005003 = - Данные.П000110004003; 
			Данные.П000110004003 = 0;
		КонецЕсли;

		Если Данные.П000110007003 < 0 Тогда
			Данные.П000110008003 = - Данные.П000110007003; 
			Данные.П000110007003 = 0;
		КонецЕсли;
	КонецЦикла;
	
	//строки 100, 110 Приложения 5 к листу 02
	Для каждого СтрокаТЗ Из мСтруктураМногостраничныхРазделов["Лист02_Прил5"] Цикл
		Данные = СтрокаТЗ.Данные;
		
		Если Данные.П002050010003 < 0 Тогда
			Данные.П002050011003 = - Данные.П002050010003; 
			Данные.П002050010003 = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура СоздатьДокументОтчета (Окружение, ПараметрыОтчета)
	
	мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
	мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.УстановитьВремя();
	мСохраненныйДок.УстановитьНовыйНомер();
	
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;

	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = ПараметрыОтчета.КодИФНС;
	мСохраненныйДок.Вид                        = ПараметрыОтчета.ВидДок;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", мПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", Ложь);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", Ложь);

	// вствляем флажок ручной ввод 
	СписокСохранения.Вставить("Автозаполнение", Ложь);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", Ложь);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	мСохраненныйДок.Записать();
	
	Сообщить("Импортирован отчет """ + мСохраненныйДок.НаименованиеОтчета + """");
КонецПроцедуры

Процедура ЗаполнитьРазделыСформированнымиДанными();
	
	//Структура многострочных блоков	
	Для каждого Эл Из мСтруктураМногострочныхРазделов Цикл
		ИмяБлока 		= Эл.Ключ;
		ТаблицаБлока 	= Эл.Значение;
		ВывестиРазделВТабличныйДокумент(ИмяБлока, ТаблицаБлока);
	КонецЦикла;
	
	//Структура обычных разделов
	Для Каждого ПоказателиСтраницы Из мПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;
	
	//Структура многостраничных разделов
	ТаблицаМногостраничногоДокумента = Неопределено;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
		АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
		ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
		ИмяТекущейСтраницыПанели = ЭлементСтруктуры.Ключ;
		ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ИмяТекущейСтраницыПанели);
		УстановитьВариантыЗаполненияСпецификаРаздела(ИмяТекущейСтраницыПанели);
	КонецЦикла;
	
КонецПроцедуры


// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыгрузитьУзелXMLВДерево(СтрокаДерева, УзелXML)
	
	Если УзелXML.КоличествоАтрибутов() > 0 Тогда
        Пока УзелXML.ПрочитатьАтрибут() Цикл
			НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			НоваяСтрокаДерева.Код = УзелXML.Имя;
			НоваяСтрокаДерева.Значение = УзелXML.Значение;
        КонецЦикла;
	КонецЕсли;
	
	Пока УзелXML.Прочитать() Цикл
		Если УзелXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли УзелXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			НоваяСтрокаДерева.Код = УзелXML.Имя;
			ВыгрузитьУзелXMLВДерево(НоваяСтрокаДерева, УзелXML);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИзвлечьДанныеИзXMLФайла(ПутьКФайлуВыгрузки)
	
	ДеревоДанныхИзФайлаXML = Новый ДеревоЗначений;
	ДеревоДанныхИзФайлаXML.Колонки.Добавить("Код");
	ДеревоДанныхИзФайлаXML.Колонки.Добавить("Значение");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуВыгрузки);
	
	ЧтениеXML.Прочитать();
	
	НовыйЭлемент = ДеревоДанныхИзФайлаXML.Строки.Добавить();
	НовыйЭлемент.Код = ЧтениеXML.Имя;
	НовыйЭлемент.Значение = ЧтениеXML.Значение;
	
	ВыгрузитьУзелXMLВДерево(ДеревоДанныхИзФайлаXML, ЧтениеXML);
	
	Возврат ДеревоДанныхИзФайлаXML;
	
КонецФункции 

Функция ПолучитьКопиюСтруктуры(Знач СтруктураРезультата)
	Результат = Новый Структура;
	Для Каждого Стр Из СтруктураРезультата Цикл
		Результат.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьКопиюСтруктуры

Функция ДатаИзСтроки(СтрДата)
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАГРУЗКИ ИЗ XML
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2009Кв4";
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0021200010";
мИдГруппы2  = "П0001300040";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 9;
КолИсхСтрокИдГруппы2 = 22;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П002120001001", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П002120001002", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П002120001003", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001004", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001005", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П002120001006", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001007", мОписаниеТиповЧислоЕ);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000130004001", ОписаниеТиповДата);
СтруктураГруппы2.Колонки.Добавить("П000130004003", мОписаниеТиповЧислоЕ);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = ПолучитьТаблицуМногостраничногоРаздела();
ТаблицаСтраницыРазделаДляМногострочныхРазделов=ПолучитьТаблицуМногостраничногоРаздела(Истина);
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_1", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3", ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил1", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил2", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил3", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил4", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил5", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист03", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист03Продолжение", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист03Реестр", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист04", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Лист05", ТаблицаСтраницыРаздела.Скопировать());

// Версия формы
мВерсияФормы = "26/06/2009";

// Код отчета, равен КНД
мКодОтчета = "1151006";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.02", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("ВидУчета");
СпП.Колонки.Добавить("ОрганизацияВЦелом");
