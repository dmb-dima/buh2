////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел1_3;
Перем мРаздел1_4;
Перем мРаздел2;
Перем мРаздел2_Прил1;
Перем мРаздел2_Прил2;
Перем мРаздел2_Прил4;
Перем мРаздел2_Прил5;
Перем мРаздел2_Прил5а;
Перем мРаздел2_Прил6;
Перем мРаздел2_Прил7;
Перем мРаздел3_А;
Перем мРаздел3_БВ1; // По ставке 6%
Перем мРаздел3_БВ2; // По ставке 15%
Перем мРаздел4_А;
Перем мРаздел4_Б;
Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;
Перем мРаздел8;

Перем мРаздел9_0;
Перем мРаздел9_1;
Перем мРаздел9_2;
Перем мРаздел9_3;

Перем мРаздел10;
Перем мРаздел11;
Перем мРаздел11_Прил1;
Перем мРаздел11_Прил2;

Перем мСтавкаПрибФед;
Перем мСтавкаПрибРесп;
//Перем мСтавкаПрибМест;

Перем мОргТип;
Перем мОргКодИМНС;
Перем мОргКодОКАТО;

// Хранят сведения о должностных лицах
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПред;

// Хранят имена многострочных разделов
Перем мИдГруппы10;
Перем мИдГруппы3А;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит номер телефона организации, используется в листе ФЛ, в качестве
// рабочего телефона физического лица в данной организации.
// Инициализируется в процедуре ЗаполнитьСведенияОбОрганизации
Перем мТелОрганизации;

// Хранит следующий номер квартала, используется для расчетов Раздел 1_1 и 02
Перем мП002000038501;
Перем мП002000038500;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мВПрограммеИзмененаОрганизация;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Список КБК до 2004 г
Перем мКодыБюджетнойКлассификации;
// Список КБК после 2004
Перем мКодыБюджетнойКлассификации2005;
Перем мКодыБюджетнойКлассификации2006;

// Список КБК для раздела 1_3
Перем мКодыКБК2005Раздел1_3;

// Список КБК для раздела 1_3
Перем мКодыКБК2004Раздел1_3;

// Список КБК для раздела 1_4
Перем мКодыКБК2005Раздел1_4;

// Список КБК для раздела 1_4
Перем мКодыКБК2004Раздел1_4;

// Коды видов поступлений, используются на листе 10
Перем мПрибыльКодыВидовПоступлений;

// Отчитывается по обособленному или за себя, если Истина то за себя,
// иначе заа обособленное подразделение
Перем ПоМестуНахожденияОрганизации;

// Данные с листа ФЛ
Перем мДатаДок; // дата выдачи документа
Перем мФизЛицИнд;

// Переменных для хранения целых значений, в представлении квадратных
Перем мКодОкатоРаздел1_1;
Перем мСрокУплатыРаздел1_1;
Перем мКБКвФБРаздел1_1;
Перем мСуммаДоплФедРаздел1_1;
Перем мСуммаУменФедРаздел1_1;
Перем мСуммаПерехФедРаздел1_1;
Перем мКБКвБСРаздел1_1;
Перем мСуммаДоплСубРаздел1_1;
Перем мСуммаУменСубРаздел1_1;
Перем мСуммаПерехСубРаздел1_1;
Перем мКБКвМБРаздел1_1;
Перем мСуммаДоплМестРаздел1_1;
Перем мСуммаУменМестРаздел1_1;
Перем мСуммаПерехМестРаздел1_1;

Перем мОргОГРН;

// Раздел1_2
Перем мКодОкатоРаздел1_2;
Перем мСрокУплаты1Раздел1_2;
Перем мСрокУплаты2Раздел1_2;
Перем мСрокУплаты3Раздел1_2;
Перем мКБКвФБРаздел1_2;
Перем мСуммаФедПоСроку1Раздел1_2;
Перем мСуммаФедПоСроку2Раздел1_2;
Перем мСуммаФедПоСроку3Раздел1_2;
Перем мКБКвБСРаздел1_2;
Перем мСуммаСубПоСроку1Раздел1_2;
Перем мСуммаСубПоСроку2Раздел1_2;
Перем мСуммаСубПоСроку3Раздел1_2;
Перем мКБКвМБРаздел1_2;
Перем мСуммаМестПоСроку1Раздел1_2;
Перем мСуммаМестПоСроку2Раздел1_2;
Перем мСуммаМестПоСроку3Раздел1_2;

// Раздел1_3
Перем мКодОкатоРаздел1_3;
Перем мКБКРаздел1_3;
Перем мСуммаНалога1Раздел1_3;
Перем мСрокУплаты1Раздел1_3;
Перем мСуммаНалога2Раздел1_3;
Перем мСрокУплаты2Раздел1_3;
Перем мСуммаНалога3Раздел1_3;
Перем мСрокУплаты3Раздел1_3;

// Раздел1_4
Перем мКодОкатоРаздел1_4;
Перем мКБКРаздел1_4;
Перем мКДоплатеРаздел1_4;
Перем мСрокУплаты1Раздел1_4;
Перем мКУменьшениюРаздел1_4;
Перем мСрокУплаты2Раздел1_4;

// Раздел2
Перем мЯвляетсяСельхоз;
Перем мСобранныеДанные3901Лист2;
Перем мМесяцЗптГодРаздел2;

// Прил5 Лист02
Перем мЯвляетсяСельхозПрил5Лист02;


// Прил5а Лист02
Перем мЯвляетсяСельхозЛист02_Прил5а;
Перем мОбязанностьНаОбособке;

Перем мЯвляетсяСельхозЛист02_Прил6;
Перем мЯвляетсяСельхозЛист02_Прил7;

Перем мЯвляетсяСельхозПрил1Лист02;
Перем мЯвляетсяСельхозПрил2Лист02;
Перем мЯвляетсяСельхозПрил4Лист02;

// выбор значения из Прил5а, Листа02
Перем мПрил5аЛист02;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

// Переменные содержащие ИНН и КПП текущей организации
Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Инифиализируется в обработчике ПриОткрытии и в ВосстановитьСохраненныеДанные
// Однозначно формирует представление о текущем документе
// умышленно не брался параметр мСохраненныйДок
Перем мДокументВосстановлен;

Перем мСоставПоказателей Экспорт;

// Переменная необходима для операций с листом ФЛ
// Хранит пустой образ листа фл, без ИНН, КПП, ФИО и других параметров,
// инифиализируется однажды в обработчике "ПриОткрытии" формы.

Перем мПустойОбразЛистаФЛ;

Перем мАдресМНСЛист03РазделБВ1;
Перем мАдресМНСЛист03РазделБВ2;

// Переменная для определения момента схода с панели дивидендов на общую
Перем мПанельДивидендов;

// Флаг, если форма показывается без открытия декларации то Ложь
Перем мБезОткрытияФормы;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Если пользователь отказался от очистки, то вернемся
	Если НЕ РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	// Повторно запустим расчет, т.к. связи между листами не "прямые"

	// Обнулим переменные, в которых хранится адрес для выгрузки
	мАдресМНСЛист03РазделБВ1 = "";
	мАдресМНСЛист03РазделБВ2 = "";

	// Очистим все, что касается решений по дивидендам
	// Добавим начальное решение
	Решения.Очистить();

	МассивКоординатСтраниц9процентов = Новый Массив;
	МассивКоординатСтраниц9процентов.Добавить(0);

	МассивКоординатСтраниц15процентов = Новый Массив;
	МассивКоординатСтраниц15процентов.Добавить(0);

	СтруктураПервогоРешения = Новый Структура;
	СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ1", МассивКоординатСтраниц9процентов);
	СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ2", МассивКоординатСтраниц15процентов);

	Решения.Добавить(СтруктураПервогоРешения, "Решение о распределении доходов (1)");

	мПанельДивидендов = "удаление";

	ЭлементыФормы.Решения.ТекущаяСтрока = Решения[0];

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

	ТаблицаСтраницыРаздела3_БВ1 = ТаблицаСтраницыРаздела.Скопировать();
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3_БВ1.Добавить();
	СтрПерваяСтраница.Представление      = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница   = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	ТаблицаСтраницыРаздела3_БВ2 = ТаблицаСтраницыРаздела.Скопировать();
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3_БВ2.Добавить();
	СтрПерваяСтраница.Представление      = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница   = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ1", ТаблицаСтраницыРаздела3_БВ1);
	мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ2", ТаблицаСтраницыРаздела3_БВ2);

	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ1");
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ2");

	ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ1");
	ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ2");

	Расчет("");

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1") Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда
		ПоказатьСтраницуМногостраничногоРазделаИзРешений(ИмяТекущейСтраницыПанели, Шаг, Ложь);
	Иначе
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели <> Неопределено Тогда
		Если ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1" Тогда

			мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
			мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

		ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2" Тогда

			мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
			мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

	Если ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1" Тогда

		мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
		мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2" Тогда

		мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
		мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);

	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина)

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Значение, ПрефиксНаЛисте, ЛистИсключение, ТолькоДляЛиста, ТолькоАктивныйЛистМногостраничнойчасти, ИспользоватьНомер, ЛистыМногостраничные);

КонецПроцедуры // ПроставитьНаВсехЛистах()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

	Если ИмяТекущейСтраницыПанели <> Неопределено Тогда

		Если ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1" Тогда

			мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
			мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

		ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2" Тогда

			мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
			мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)

	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, Вариант, ТекущаяОбласть);

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 
	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы10 Тогда
		ТекТабличноеПоле = мРаздел10;
	ИначеЕсли ИдГруппы = мИдГруппы3А Тогда
		ТекТабличноеПоле = мРаздел3_А;
	КонецЕсли;
	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел10 Тогда
		ИдГруппы = мИдГруппы10;
	ИначеЕсли ТекТабличноеПоле = мРаздел3_А Тогда
		ИдГруппы = мИдГруппы3А;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист10" Тогда
		ИмяГруппы = мИдГруппы10;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделА" Тогда
		ИмяГруппы = мИдГруппы3А;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// СуммаПоказателяПоВсемСтраницамСпец
//
Функция СуммаПоказателяПоВсемСтраницамСпец(ИмяСтраницы, Показатель, Округлять)

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяСтраницы, Ложь);

	ТаблицаРаздела = Неопределено;

	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела) Тогда
		Возврат 0;
	КонецЕсли;

	СуммаПоказателей = 0;
	Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл

		ЗначениеПоказателя = ТаблицаРаздела[Инд].Данные[Показатель];
		Если Округлять Тогда
			ЗначениеПоказателя = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;

		СуммаПоказателей = СуммаПоказателей + ЗначениеПоказателя;

	КонецЦикла;

	Возврат СуммаПоказателей;

КонецФункции // СуммаПоказателяПоВсемСтраницамСпец

// Функция суммирует значения показателя по всему набору страниц многостраничного раздела.
//
// Параметры:
//   ИмяПоказателя        - строка, имя показателя;
//   ИмяПоказателяУсловие - строка, имя показателя, по которому строится условие суммирования;
//   Условие              - булево, накладываемое условие
//   ПарамЗначение        - значение параметра при выполнении условия.
//
// Возвращаемое значение:
//   число, сумма значений искомого показателя по всем страницам многостраничного раздела.
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ЗначениеПоказателя;
	
	ВозвращаемоеЗнач = 0;
	
	// сначала определим имя табличного документа, содержащего показатель
	ИмяСтраницыОсновнойПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Если ИмяСтраницыОсновнойПанели = Неопределено Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыОсновнойПанели, ТаблицаСтраницРаздела) Тогда
		Возврат ВозвращаемоеЗнач;
	КонецЕсли;

	// сначала определяем значение показателя по активной странице
	ЗначениеПоказателя = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателя].Значение;

	Если Не ИмяПоказателяУсловие = Неопределено Тогда
		ЗначПоказателяУсл = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыОсновнойПанели].Области[ИмяПоказателяУсловие].Значение;

		Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
			ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗнач = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
		// Многостраничный раздел состоит из нескольких страниц.
		// Значение искомого реквизита суммируем по всем страницам.

		Для Каждого СтраницаРаздела Из ТаблицаСтраницРаздела Цикл
			Если СтраницаРаздела.АктивнаяСтраница Тогда
				// по активной странице мы вычислили ранее
				Продолжить;
			КонецЕсли;

			СтруктураДанныхТабличногоПоля = СтраницаРаздела.Данные;

			Если СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Если ИмяПоказателяУсловие = Неопределено Тогда
					ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
				ИначеЕсли СтруктураДанныхТабличногоПоля.Свойство(ИмяПоказателяУсловие, ЗначПоказателяУсл) Тогда
					Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
						ВозвращаемоеЗнач = ВозвращаемоеЗнач + ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат ВозвращаемоеЗнач;
	
КонецФункции // СуммаПоказателяПоВсемСтраницам

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	Если ТабличноеПолеИмя = ("ПолеТабличногоДокументаЛист02") Тогда

		ДанныхНаЛистеНет = Истина;

	КонецЕсли;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если ((ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист03_РазделыБВ1")
		 Или (ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист03_РазделыБВ2"))
		 И (ИмяПоказателя = "П002090009003") Тогда

			ЗначениеПоказателя = ?(ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист03_РазделыБВ1", мАдресМНСЛист03РазделБВ1, мАдресМНСЛист03РазделБВ2);

		КонецЕсли;

		Если ТабличноеПоле.Имя = ("ПолеТабличногоДокументаЛист02") Тогда
			Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя))
			И (ИмяПоказателя <> "П002000021003")
			И (ИмяПоказателя <> "П002000022003")
			И (ИмяПоказателя <> "П002000023003")
			И (ИмяПоказателя <> "П002000023103")
//			И (ИмяПоказателя <> "П002000024003")
			И (ИмяПоказателя <> "П002000038501")
			И (ИмяПоказателя <> "П002000038500")
			И (ИмяПоказателя <> "П002000047001")
			И (ИмяПоказателя <> "П002000046003")
			И (Лев(ИмяПоказателя, 3) <> "ИНН")
			И (Лев(ИмяПоказателя, 3) <> "КПП")
			Тогда
				ДанныхНаЛистеНет = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если ТабличноеПоле.Имя = ("ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000038501") Тогда
			локП002000038501 = СокрЛП(ЗначениеПоказателя);
		ИначеЕсли ТабличноеПоле.Имя = ("ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000038500") Тогда
			локП002000038500 = СокрЛП(ЗначениеПоказателя);

		ИначеЕсли ТабличноеПоле.Имя = ("ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000047001") Тогда
			локП002000047001НомерМесяца = Неопределено;
			локП002000047001НомерГода = Неопределено;

			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя) Тогда
				локП002000047001НомерМесяца = Формат(ЗначениеПоказателя, "ДФ=М");
				Если СтрДлина(локП002000047001НомерМесяца) = 1 Тогда
					локП002000047001НомерМесяца = "0" + локП002000047001НомерМесяца;
				КонецЕсли;

				локП002000047001НомерГода = Формат(ЗначениеПоказателя, "ДФ=гггг");

			КонецЕсли;

		КонецЕсли;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_1" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_1", мКодОкатоРаздел1_1);
		СтруктураДанныхПоля.Вставить("СрокУплатыРаздел1_1", мСрокУплатыРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвФБРаздел1_1", мКБКвФБРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел1_1", мСуммаДоплФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел1_1", мСуммаУменФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехФедРаздел1_1", мСуммаПерехФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвБСРаздел1_1", мКБКвБСРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаДоплСубРаздел1_1", мСуммаДоплСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаУменСубРаздел1_1", мСуммаУменСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехСубРаздел1_1", мСуммаПерехСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвМБРаздел1_1", мКБКвМБРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаДоплМестРаздел1_1", мСуммаДоплМестРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаУменМестРаздел1_1", мСуммаУменМестРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехМестРаздел1_1", мСуммаПерехМестРаздел1_1);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_2" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_2", мКодОкатоРаздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты1Раздел1_2", мСрокУплаты1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты2Раздел1_2", мСрокУплаты2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты3Раздел1_2", мСрокУплаты3Раздел1_2);
		СтруктураДанныхПоля.Вставить("КБКвФБРаздел1_2", мКБКвФБРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку1Раздел1_2", мСуммаФедПоСроку1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку2Раздел1_2", мСуммаФедПоСроку2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку3Раздел1_2", мСуммаФедПоСроку3Раздел1_2);
		СтруктураДанныхПоля.Вставить("КБКвБСРаздел1_2", мКБКвБСРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку1Раздел1_2", мСуммаСубПоСроку1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку2Раздел1_2", мСуммаСубПоСроку2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку3Раздел1_2", мСуммаСубПоСроку3Раздел1_2);
		СтруктураДанныхПоля.Вставить("КБКвМБРаздел1_2", мКБКвМБРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМестПоСроку1Раздел1_2", мСуммаМестПоСроку1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМестПоСроку2Раздел1_2", мСуммаМестПоСроку2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаМестПоСроку3Раздел1_2", мСуммаМестПоСроку3Раздел1_2);

	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_3" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_3", мКодОкатоРаздел1_3);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_3", мКБКРаздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаНалога1Раздел1_3", мСуммаНалога1Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты1Раздел1_3", мСрокУплаты1Раздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаНалога2Раздел1_3", мСуммаНалога2Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты2Раздел1_3", мСрокУплаты2Раздел1_3);
		СтруктураДанныхПоля.Вставить("СуммаНалога3Раздел1_3", мСуммаНалога3Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты3Раздел1_3", мСрокУплаты3Раздел1_3);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1_4" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_4", мКодОкатоРаздел1_4);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_4", мКБКРаздел1_4);
		СтруктураДанныхПоля.Вставить("КДоплатеРаздел1_4", мКДоплатеРаздел1_4);
		СтруктураДанныхПоля.Вставить("СрокУплаты1Раздел1_4", мСрокУплаты1Раздел1_4);
		СтруктураДанныхПоля.Вставить("КУменьшениюРаздел1_4", мКУменьшениюРаздел1_4);
		СтруктураДанныхПоля.Вставить("СрокУплаты2Раздел1_4", мСрокУплаты2Раздел1_4);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02" Тогда

		Если ДанныхНаЛистеНет Тогда
			СтруктураДанныхПоля.Вставить("_ДанныхНаЛистеНет", Истина);
			Иначе
			СтруктураДанныхПоля.Вставить("_ДанныхНаЛистеНет", Ложь);
		КонецЕсли;

		локП002000038501 = ?(локП002000038501 = Неопределено, "", локП002000038501);
		локП002000038500 = ?(локП002000038500 = Неопределено, "", локП002000038500);
		
		Если (локП002000038501 <> "") И (локП002000038500 <> "") Тогда
			локП002000038501 = РегламентированнаяОтчетность.ДополнитьСтроку(локП002000038501, 2, "0");
			мСобранныеДанные3901Лист2 = локП002000038501 + "," + локП002000038500;
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхоз", мЯвляетсяСельхоз);
		СтруктураДанныхПоля.Вставить("СобранныеДанные3901Лист2", мСобранныеДанные3901Лист2);

		Если локП002000047001НомерМесяца <> Неопределено Тогда
			мМесяцЗптГодРаздел2 = локП002000047001НомерМесяца + "," + локП002000047001НомерГода;
		КонецЕсли;
		
			СтруктураДанныхПоля.Вставить("МесяцЗптГодРаздел2", мМесяцЗптГодРаздел2);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил5" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил5Лист02", мЯвляетсяСельхозПрил5Лист02);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил5а" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозЛист02_Прил5а", мЯвляетсяСельхозЛист02_Прил5а);
		СтруктураДанныхПоля.Вставить("ОбязанностьНаОбособке", мОбязанностьНаОбособке);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил6" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозЛист02_Прил6", мЯвляетсяСельхозЛист02_Прил6);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил7" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозЛист02_Прил7", мЯвляетсяСельхозЛист02_Прил7);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил1" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил1Лист02", мЯвляетсяСельхозПрил1Лист02);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил2" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил2Лист02", мЯвляетсяСельхозПрил2Лист02);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист02_Прил4" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил4Лист02", мЯвляетсяСельхозПрил4Лист02);
	КонецЕсли;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист09_0" Тогда
		СтруктураДанныхПоля.Вставить("П002160000500", 1); // Пенс. резервы
		СтруктураДанныхПоля.Вставить("П002160027500", 2); // По ставке 9%
		СтруктураДанныхПоля.Вставить("П002160013500", 2); // По ставке 9%
		СтруктураДанныхПоля.Вставить("П002160029500", 2); // Пенс. резервы, по ставке 9%
	КонецЕсли;

	// лист пенс. резервы, ставка 15%
	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист09_1" Тогда
		СтруктураДанныхПоля.Вставить("П002160000500", 1); // Пенс. резервы
		СтруктураДанныхПоля.Вставить("П002160027500", 1); // По ставке 15%
		СтруктураДанныхПоля.Вставить("П002160013500", 1); // По ставке 15%
		СтруктураДанныхПоля.Вставить("П002160029500", 1); // Пенс. резервы, по ставке 15%
	КонецЕсли;

	// лист пенс. накопления, ставка 9%
	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист09_2" Тогда
		СтруктураДанныхПоля.Вставить("П002160000500", 2); // Пенс. накопления
		СтруктураДанныхПоля.Вставить("П002160027500", 2); // По ставке 9%
		СтруктураДанныхПоля.Вставить("П002160013500", 2); // По ставке 9%
		СтруктураДанныхПоля.Вставить("П002160029500", 2); // Пенс. резервы, по ставке 9%
	КонецЕсли;

	// лист пенс. накопления, ставка 15%
	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист09_3" Тогда
		СтруктураДанныхПоля.Вставить("П002160000500", 2); // Пенс. накопления
		СтруктураДанныхПоля.Вставить("П002160027500", 1); // По ставке 15%
		СтруктураДанныхПоля.Вставить("П002160013500", 1); // По ставке 9%
		СтруктураДанныхПоля.Вставить("П002160029500", 1); // Пенс. резервы, по ставке 15%
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ВозвратитьПустойОбразЛистаФЛ
//
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции // ВозвратитьПустойОбразЛистаФЛ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КодОкатоРаздел1_3";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КодОкатоРаздел1_4";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил5а";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П002050001003";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил6";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил7";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03_РазделА";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03_РазделыБВ1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П002090008003";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ПанельКЛисту03РазделБВ";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03_РазделыБВ2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П002090008003";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ПанельКЛисту03РазделБВ";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист04_РазделА";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист04_РазделБ";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист08";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист09_0";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист09_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист09_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист09_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист10";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист11";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист11_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист11_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()
	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			ЕстьИзменения = Истина;

		КонецЕсли;
	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для Каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Функция ОбластьЯвляетсяЯчейкойСоставногоПоля
// проверяет, является ли переданное имя ячейки частью многоКвадратной
// группы ячеек на листе
// если да - то истина, иначе - Ложь
//
Функция ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки, БыстраяПроверка = Истина)
	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
		// не квадратичная ячейка
		Возврат Ложь;
	КонецЕсли;
	
	Если БыстраяПроверка Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
	Если ИмяСтраницыПанели = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
	
	// Получаем текущий счетчик
	//ТекущийСчетчик = Сред(ИмяЯчейки,АдресПоследнегоРазделителя+1,СтрДлина(ИмяЯчейки)-АдресПоследнегоРазделителя);
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
	Если СтрДлина(ТекущийСчетчик)>=2 Тогда
		
		Если Сред(ТекущийСчетчик,1,1) = "0" Тогда
			ПризнакСчетчикаСнулемВпереди = Истина;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь;
		КонецЕсли;
	Иначе
		ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
	КонецЕсли;

	Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущийСчетчик) Тогда
		ТекущийСчетчикЦел =ТекущийСчетчик;
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1), ТекущийСчетчикЦел + 1);

	Если ЭлементыФормы[ИмяПоляТаблДокумента].Области.Найти(Координата) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// значение получено
	Возврат Истина;

КонецФункции // ОбластьЯвляетсяЯчейкойСоставногоПоля

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено)

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

			Если Операция = "Очистить" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц И НомерМесяца <> "0" Тогда
		мТитульный.Области.НалогПериод.Значение = "1";
		// в этой форме нет НомераКвартала
		мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН="), 1, 1);
		мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН="), 2, 1);
	Иначе
		//мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
		//мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

		Если НомерКвартала = "4" Тогда
			мТитульный.Области.НалогПериод.Значение = "0";
		КонецЕсли;

		Если НомерКвартала = "3" Тогда
			мТитульный.Области.НалогПериод.Значение = "9";
		КонецЕсли;

		Если НомерКвартала = "2" Тогда
			мТитульный.Области.НалогПериод.Значение = "6";
		КонецЕсли;

		Если НомерКвартала = "1" Тогда
			мТитульный.Области.НалогПериод.Значение = "3";
		КонецЕсли;
	КонецЕсли;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиУпП     = "";

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение),НЕ ЗначениеЗаполнено(мИННДиректор)) = 0 Тогда
		ДатаПодписиРук = ДатаПодписи; 
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение),НЕ ЗначениеЗаполнено(мИННБухгалтер)) = 0 Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(мТитульный.Области.ОргУП.Значение),НЕ ЗначениеЗаполнено(мИННУпПред)) = 0 Тогда
		ДатаПодписиУпП = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиУпП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиУпП, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_1.Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел1_2.Области["ДатаПодписи"    + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
		// Функция проставит даты на всех листах многостраничного документа
		ПроставитьНаВсехЛистах(стрУказаннаяДата, "ДатаПодписи", , "ФизЛица", , Ложь, мВПрограммеИзмененаОрганизация);
	КонецЕсли;

	ПроставитьНаВсехЛистах(стрУказаннаяДата, "ДатаПодписи", , "Раздел1_3", , Ложь, мВПрограммеИзмененаОрганизация);
	ПроставитьНаВсехЛистах(стрУказаннаяДата, "ДатаПодписи", , "Раздел1_4", , Ложь, мВПрограммеИзмененаОрганизация);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПолучитьСтавкаНалога
//
Процедура ПолучитьСтавкиНалога()

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет
	//Сведения.Добавить("", "СтавкаПрибМест");  // Ставка прибыль местный бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);

	мСтавкаПрибФед = 0;
	мСтавкаПрибРесп = 0;

	ОргСведения.Свойство("СтавкаПрибФед", мСтавкаПрибФед);
	ОргСведения.Свойство("СтавкаПрибРесп", мСтавкаПрибРесп);

	мРаздел2.Области.П002000022003.Значение = мСтавкаПрибФед;
	мРаздел2.Области.П002000023003.Значение = мСтавкаПрибРесп;

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		мРаздел2.Области.П002000021003.Значение = мСтавкаПрибФед + мСтавкаПрибРесп;
	КонецЕсли;

КонецПроцедуры // ПолучитьСтавкаНалога

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	// Заполняем ИНН на всех листах декларации
	Если Не РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");
	мКППЮЛ = КППЮЛ;

	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ПолучитьСтавкиНалога();

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОГРН"); // ОГРН
		Сведения.Добавить("", "ОКАТО"); // ОКАТО

		Сведения.Добавить("", "КодНО");  // Код Налогового Органа
		Сведения.Добавить("", "НаимНО"); // Наименование НО

		Сведения.Добавить("", "ТипНП");  // Тип НП

		Сведения.Добавить("", "НаимОППол"); // Наименование ОП полное

		Сведения.Добавить("", "НаимГоловнОрг");
		Сведения.Добавить("", "КППГоловнОрг");

		Сведения.Добавить("", "ТелОрганизации");
	КонецЕсли;

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя

	Сведения.Добавить("", "ИННРук"); // ИНН руководителя
	Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
	Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	// Инициализируем переменные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ     = "";
		КППЮЛ     = "";
		НаимЮЛПол = "";
		ОГРН      = "";
		ОКАТО     = "";
		КодНО     = "";
		НаимНО    = "";
		ТипНП     = "";
		НаимОППол = "";
		НаимГоловнОрг = "";
		КППГоловнОрг = "";
		ТелОрганизации = "";

	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИОУпПред = "";
	ИННРук    = "";
	ИННБух    = "";
	ИННУпПред = "";

	// Получаем данные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ"    , ИННЮЛ    );
		ОргСведения.Свойство("КППЮЛ"    , КППЮЛ    );
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН"     , ОГРН     );
		ОргСведения.Свойство("ОКАТО"    , ОКАТО    );
		ОргСведения.Свойство("КодНО"    , КодНО    );
		ОргСведения.Свойство("НаимНО"   , НаимНО   );
		ОргСведения.Свойство("ТипНП"    , ТипНП    );
		ОргСведения.Свойство("НаимОППол", НаимОППол);
		ОргСведения.Свойство("НаимГоловнОрг", НаимГоловнОрг);
		ОргСведения.Свойство("КППГоловнОрг", КППГоловнОрг);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук"       , ФИОРук   );
	ОргСведения.Свойство("ФИОБух"       , ФИОБух   );
	ОргСведения.Свойство("ФИОУпПред"    , ФИОУпПред);

	ОргСведения.Свойство("ИННРук", ИННРук);
	ОргСведения.Свойство("ИННБух", ИННБух);
	ОргСведения.Свойство("ИННУпПред", ИННУпПред);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мТитульный.Области.ОргДиректор.Значение  = ФИОРук;

		мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;

		мТитульный.Области.ОргУП.Значение = ФИОУпПред;

		мИННДиректор = ИННРук;
		мИННБухгалтер= ИННБух;
		мИННУпПред = ИННУпПред;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННРук", 12, ИННРук);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННГБ" , 12, ИННБух);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП" , 12, ИННУпПред);

		Возврат;
	КонецЕсли;

	мТелОрганизации = ТелОрганизации;

	// Заполняем ИНН на всех листах декларации
	Если Не РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = "            ";
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
		КППЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	// Если организация будет ЧП, то КПП не должно быть и должы быть пробелы для функции проставить на всех листах
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");
	мКППЮЛ = КППЮЛ;

	Признаки = мТитульный.Области.ТипОрг1.Значение + мТитульный.Области.ТипОрг2.Значение;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Признаки)) Тогда

		Если ТипНП = 2 Тогда

			мТитульный.Области.ТипОрг2.Значение = "V";
			мТитульный.Области.ТипОрг1.Значение = "";
			ПоМестуНахожденияОрганизации = Ложь;

		ИначеЕсли ТипНП = 1 Тогда

			мТитульный.Области.ТипОрг1.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
			ПоМестуНахожденияОрганизации = Истина;

		КонецЕсли;

	КонецЕсли;

	// Проставлять ИНН и КПП только в новыхо открыты отчетах и при смене ЮЛ
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		ПроставитьНаВсехЛистах(ИННЮЛ, "ИНН", "", ,,, мВПрограммеИзмененаОрганизация);
		ПроставитьНаВсехЛистах(КППЮЛ, "КПП", "", ,,, мВПрограммеИзмененаОрганизация);
	КонецЕсли;

	УправлениеЛистами(ТипНП);

	Если ТипНП <> 2 Тогда
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;

		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОбПодрНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОбПодрНазв.Значение = "";
		КонецЕсли;

	ИначеЕсли ТипНП = 2 Тогда

		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОбПодрНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОбПодрНазв.Значение = НаимОППол;
		КонецЕсли;

		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимГоловнОрг;
		КонецЕсли;

		КППГолОрг = "";

		Для Инд = 1 По 9 Цикл
			КППГолОрг = КППГолОрг + мТитульный     .Области["ОКПП" + Строка(Инд)].Значение
		КонецЦикла;

		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(КППГолОрг)) Тогда

			Модифицированность = ?(КППГолОрг = КППГоловнОрг, Ложь, Истина);
			Для НомЯчейки = 1 По 9 Цикл
				ЦифраКПП = Сред(КППГоловнОрг, НомЯчейки, 1);
				мТитульный     .Области["ОКПП" + НомЯчейки].Значение = ЦифраКПП;
			КонецЦикла;

		КонецЕсли;

		КПП2 = "";

		Для Инд = 1 По 9 Цикл
			КПП2 = КПП2 + мТитульный     .Области["ПКПП" + Строка(Инд)].Значение
		КонецЦикла;

		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(КПП2)) Тогда

			Модифицированность = ?(КПП2 = КППЮЛ, Ложь, Истина);

			Для НомЯчейки = 1 По 9 Цикл
				ЦифраКПП = Сред(КППЮЛ, НомЯчейки, 1);
				мТитульный     .Области["ПКПП" + НомЯчейки].Значение = ЦифраКПП;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если (ТипНП <> 2) И (ТипНП <> 3) Тогда

		ОКПП = "";
		Для Инд = 1 По 9 Цикл
			ОКПП = ОКПП + мТитульный     .Области["ОКПП" + Строка(Инд)].Значение
		КонецЦикла;

		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ОКПП)) Тогда

			Модифицированность = ?(ОКПП = КППЮЛ, Ложь, Истина);

			Для НомЯчейки = 1 По 9 Цикл
				ЦифраКПП = Сред(КППЮЛ, НомЯчейки, 1);
				мТитульный     .Области["ОКПП" + НомЯчейки].Значение = ЦифраКПП;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Тогда
		мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	// Работаем с ИНН руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННДиректор)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННРук, НомЯчейки, 1);
			мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННДиректор = ИННРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение)) Тогда
		мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ИНН бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННБухгалтер)) Тогда
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(ИННБух, НомЯчейки, 1);
			мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
		КонецЦикла;
		мИННБухгалтер = ИННБух;
	КонецЕсли;

	// Работаем с ОГРН
	Если (ТипНП <> 3) И ((мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргОГРН))) Тогда
		ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, 13, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 13, ОГРН);
		Модифицированность = ?(СокрЛП(мОргОГРН) = СокрЛП(ОГРН), Ложь, Истина);
		мОргОГРН = ОГРН;
	КонецЕсли;

	Если (ТипНП = 3) И (мВПрограммеИзмененаОрганизация) Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 13, "             ");
		мОргОГРН = "";

	КонецЕсли;

	// Работаем с ОКАТО, значение мКодОКАТО предварительно считали из квадратиков
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мКодОКАТОРаздел1_1)) Тогда
		ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(ОКАТО, 11, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "КодОКАТО_1_", 11, ОКАТО);
		мКодОКАТОРаздел1_1 = ОКАТО;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодИМНС)) Тогда
		КодНО = РегламентированнаяОтчетность.ДополнитьСтроку(КодНО, 4, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодИМНС", 4, КодНО);
		мОргКодИМНС = КодНО;
	КонецЕсли;

	// Работаем с наименованием инспекции
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргИМНС.Значение)) Тогда
		мТитульный.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	// Работаем с ФИО уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргУП.Значение)) Тогда
		мТитульный.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	// Работаем с ИНН уполномоченного представителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННУпПред)) Тогда
		ИННУпПред = РегламентированнаяОтчетность.ДополнитьСтроку(ИННУпПред, 12, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИННУП", 12, ИННУпПред);
		мИННУпПред = ИННУпПред;
	КонецЕсли;

	// Даты проставятся всегда при открытии документа или при изменении организации
	Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
	// Заполним даты формирования декларации (подписи)
		ЗаполнитьДатуВЯчейках();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено)

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	// Управление цветами
	Если ТипНП = 2 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВпрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП = 1 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛОбособ", мВпрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЛистами

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЮЛОбособ"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");

	НазванияЯчеекОтносящихсяКОбособ = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКОбособ.Добавить("ТипОрг2"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");
	//НазванияЯчеекОтносящихсяКОбособ.Добавить("ОбПодрНазв"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);

	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКОбособ;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЮЛОбособ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКОбособ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			ПростойРежим  = ?(РегламентированнаяОтчетность.ПустоеЗначение(СтрПолучитьСтроку(Показатель.Значение, 4)), Ложь, Истина);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда

				Если НЕ ПростойРежим Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, Комманда       ,                   , Страница);
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);
				КонецЕсли;

				Если Очищать Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				Если НЕ ПростойРежим Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;
				КонецЕсли;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)
	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КодОкатоРаздел1_1" Тогда
	Рез = мКодОкатоРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплатыРаздел1_1" Тогда
	Рез = мСрокУплатыРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБРаздел1_1" Тогда
	Рез = мКБКвФБРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплФедРаздел1_1" Тогда
	Рез = мСуммаДоплФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменФедРаздел1_1" Тогда
	Рез = мСуммаУменФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехФедРаздел1_1" Тогда
	Рез = мСуммаПерехФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвБСРаздел1_1" Тогда
	Рез = мКБКвБСРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплСубРаздел1_1" Тогда
	Рез = мСуммаДоплСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменСубРаздел1_1" Тогда
	Рез = мСуммаУменСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехСубРаздел1_1" Тогда
	Рез = мСуммаПерехСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвМБРаздел1_1" Тогда
	Рез = мКБКвМБРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплМестРаздел1_1" Тогда
	Рез = мСуммаДоплМестРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменМестРаздел1_1" Тогда
	Рез = мСуммаУменМестРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехМестРаздел1_1" Тогда
	Рез = мСуммаПерехМестРаздел1_1;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОкатоРаздел1_2" Тогда
	Рез = мКодОкатоРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_2" Тогда
	Рез = мСрокУплаты1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_2" Тогда
	Рез = мСрокУплаты2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_2" Тогда
	Рез = мСрокУплаты3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБРаздел1_2" Тогда
	Рез = мКБКвФБРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку1Раздел1_2" Тогда
	Рез = мСуммаФедПоСроку1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку2Раздел1_2" Тогда
	Рез = мСуммаФедПоСроку2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку3Раздел1_2" Тогда
	Рез = мСуммаФедПоСроку3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвБСРаздел1_2" Тогда
	Рез = мКБКвБСРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку1Раздел1_2" Тогда
	Рез = мСуммаСубПоСроку1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку2Раздел1_2" Тогда
	Рез = мСуммаСубПоСроку2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку3Раздел1_2" Тогда
	Рез = мСуммаСубПоСроку3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвМБРаздел1_2" Тогда
	Рез = мКБКвМБРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМестПоСроку1Раздел1_2" Тогда
	Рез = мСуммаМестПоСроку1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМестПоСроку2Раздел1_2" Тогда
	Рез = мСуммаМестПоСроку2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМестПоСроку3Раздел1_2" Тогда
	Рез = мСуммаМестПоСроку3Раздел1_2;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОкатоРаздел1_3" Тогда
	Рез = мКодОкатоРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_3" Тогда
	Рез = мКБКРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога1Раздел1_3" Тогда
	Рез = мСуммаНалога1Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_3" Тогда
	Рез = мСрокУплаты1Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога2Раздел1_3" Тогда
	Рез = мСуммаНалога2Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_3" Тогда
	Рез = мСрокУплаты2Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога3Раздел1_3" Тогда
	Рез = мСуммаНалога3Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_3" Тогда
	Рез = мСрокУплаты3Раздел1_3;

	ИначеЕсли КодПоказателяПоСтруктуре = "КодОкатоРаздел1_4" Тогда
	Рез = мКодОкатоРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_4" Тогда
	Рез = мКБКРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "КДоплатеРаздел1_4" Тогда
	Рез = мКДоплатеРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_4" Тогда
	Рез = мСрокУплаты1Раздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "КУменьшениюРаздел1_4" Тогда
	Рез = мКУменьшениюРаздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_4" Тогда
	Рез = мСрокУплаты2Раздел1_4;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхоз" Тогда
	Рез = мЯвляетсяСельхоз;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил5Лист02" Тогда
	Рез = мЯвляетсяСельхозПрил5Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозЛист02_Прил5а" Тогда
	Рез = мЯвляетсяСельхозЛист02_Прил5а;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОбязанностьНаОбособке" Тогда
	Рез = мОбязанностьНаОбособке;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозЛист02_Прил6" Тогда
	Рез = мЯвляетсяСельхозЛист02_Прил6;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозЛист02_Прил7" Тогда
	Рез = мЯвляетсяСельхозЛист02_Прил7;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил1Лист02" Тогда
	Рез = мЯвляетсяСельхозПрил1Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил2Лист02" Тогда
	Рез = мЯвляетсяСельхозПрил2Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил4Лист02" Тогда
	Рез = мЯвляетсяСельхозПрил4Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "СобранныеДанные3901Лист2" Тогда
	Рез = мСобранныеДанные3901Лист2;
	ИначеЕсли КодПоказателяПоСтруктуре = "МесяцЗптГодРаздел2" Тогда
	Рез = мМесяцЗптГодРаздел2;




	КонецЕсли;



	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			Показатель              = КодПоказателяПоСтруктуре;
			Раздел = ИмяПоляТаблДокумента;
			Значение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(Показатель);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел , РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(КодПоказателяВФорме), 15, Значение, Истина);
		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// ПолеТабличногоДокументаЛист03_РазделА

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	Если ИмяГруппы = мИдГруппы3А Тогда
		// строки в разделе 3 приложение "А" будем сдвигать особым образом
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ - 1;
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх + 1;

		ИсхКоординатаНомерНижнЯчейкиОбласти = НомерНижнЯчейкиОбласти;
		ИсхКоординатаНомерВерхЯчейкиОбласти = НомерВерхЯчейкиОбласти;

		//СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 3;
		СдвигСтрок = 3;
		МаксимальноеКоличествоСтрокГруппы = 149;
		ВысотаСтроки = 3; // количество строк мокселя во вставляемой строке таблицы
	Иначе
		МаксимальноеКоличествоСтрокГруппы = 200;
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		ВысотаСтроки = 1;
	КонецЕсли;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

			// определяем границы ячейки исходной области

		Если ИмяГруппы = мИдГруппы3А Тогда

			НомерВерхСтрокиЯчейки  = ИсхКоординатаНомерВерхЯчейкиОбласти - 1;
			НомерНижнСтрокиЯчейки  = ИсхКоординатаНомерНижнЯчейкиОбласти + 1;

			Если (ИмяКолонки = "П002080014002") Или (ИмяКолонки = "П002080014003") Тогда
				НомерВерхСтрокиЯчейки = ИсхКоординатаНомерВерхЯчейкиОбласти;
				НомерНижнСтрокиЯчейки = ИсхКоординатаНомерНижнЯчейкиОбласти;
			КонецЕсли;

		Иначе
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;
		КонецЕсли;


		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
			Если (ИмяГруппы = мИдГруппы3А) И (Лев(ОбластьЯчейки.Имя, 13) = "П002080014002") Тогда
				ВставленныйНомерСтроки = 140 + КолСтрок;
				ОбластьЯчейки.Значение = ?(ВставленныйНомерСтроки >= 150, "", ВставленныйНомерСтроки);
			КонецЕсли;
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			//ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	// убираем известный глюк, когда при восстановлении не появляются порядковые номера при том, что значения они не 
	// не содержат и установлены в Защину = Истина
	Если ИмяГруппы = "П0021700010" Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П002170001001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
		Сообщить("Нельзя удалять не добавленные строки");
		Возврат;
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		Если ИмяГруппы = мИдГруппы3А Тогда
			// строки в разделе 3 приложение "А" будем сдвигать особым образом
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ - 1;
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх + 1;
			//СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 3;
			//МаксимальноеКоличествоСтрокГруппы = 149;
		Иначе
			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		КонецЕсли;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число("0"+ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";

				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// ЗаполнитьСведенияОбФЛ_
//
Процедура ЗаполнитьСведенияОбФЛ_(СмениласьДатаПодписания = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(мИННДиректор) Тогда
		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

		СписокПоказателей.Добавить("", "ГраждРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");

		// Телефон организации используется в качестве рабочего телефона физ. лица
		//СписокПоказателей.Добавить("", "ТелОрганизации");

	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

		СписокПоказателей.Добавить("", "ГраждБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда

		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");

		СписокПоказателей.Добавить("", "ГраждУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");

	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные = ВозвратитьПустойОбразЛистаФЛ();
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные = ВозвратитьПустойОбразЛистаФЛ();
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(мИННДиректор) Тогда

		ФИОДиректора = мТитульный.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда

		ФИОБухгалтера = мТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 2, Истина, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(мИННУпПред) Тогда

			ФИООргУП = мТитульный.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если АктивнаяСтр <> Неопределено Тогда

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, "ФизЛица");

	Иначе

		Сообщить("Ошибка установки активной страницы ФЛ");

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбФЛ_

// ВыводДанныхОФизическомЛице
// Выводит данные о физических лицах в структуру многостраничного раздела
//
// Параметры:
// СвязьУстановлена - если Истина, то данные в ячейки записываются не проверяя на пустоту хранящегося там значения
// предпологается, что в этом случае, лист пуст
// СвязьУстановлена - Ложь - Лист с данными по ФИО найден и данные нужно заменять, только если пустота в ячейки
// Данные
// ТипДанных - что выводим может быть 1. Руководитель 2. Бухгалтер 3. УП
// ОграниченияВыводаУчесть - в случае ограничений
// ТаблицаСтраницРазделаМ - таблица раздела ФизЛица
//
Процедура ВыводДанныхОФизическомЛице_(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	// Для авансов по ЕСН, парметры Ложь, т.к. лист ФЛ не заполняется
	СохранятьИННнаЛисте = Истина;
	СохранятьКППнаЛисте = Истина;
	ФизЛицСлТел = Истина;
	ФизЛицДомТел = Истина;
	ФизЛицДатаРожд = Истина;
	ЕстьПол = Истина;
	ГраждСтранаЕсть = Истина;
	ГраждСтранаКодЕсть = Истина;
	ФизЛицМестоР = Истина;

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";
	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук", ?(ТипДанных = 2, "ГраждСтранаБух", ?(ТипДанных = 3, "ГраждСтранаУпПред",""))), ГраждСтрана);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы = Неопределено Тогда
			Сообщить("Ошибка установки активной страницы раздела ФЛ");
		КонецЕсли;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрТаблицаСтраницы.Данные.ФизЛицФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные = ВозвратитьПустойОбразЛистаФЛ();

			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	Если СохранятьИННнаЛисте Тогда

		Для НомЯчейки = 1 По 12 Цикл

			ЦифраИНН = Сред(мИННЮЛ, НомЯчейки, 1);
			СтрокаДляВставкиДанных.Данные.Вставить("ИНН1_" + Строка(НомЯчейки), ЦифраИНН);

		КонецЦикла;

	КонецЕсли;

	Если СохранятьКППнаЛисте Тогда

		Для НомЯчейки = 1 По 9 Цикл

			ЦифраКПП = Сред(мКППЮЛ, НомЯчейки, 1);
			СтрокаДляВставкиДанных.Данные.Вставить("КПП1_" + Строка(НомЯчейки), ЦифраКПП);

		КонецЦикла;

	КонецЕсли;

	Если ГраждСтранаЕсть Тогда
		// Гражданство заполняем для всех, кроме главного бухгалтера
		Если ТипДанных <> 2 Тогда
			// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
			// чтобы сохранить универсальность и переносимость функции

			ГраждСтрана = ?(РегламентированнаяОтчетность.ПустоеЗначение(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГражданство", ГраждСтрана);
			Иначе
				Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицГражданство) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГражданство", ГраждСтрана);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ГраждСтранаКодЕсть Тогда

		Если ТипДанных <> 2 Тогда
			// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
			// чтобы сохранить универсальность и переносимость функции

			КодСтраны = СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд1 + СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд2 + СтрокаДляВставкиДанных.Данные.ФизЛицКодГражд3;

			Если (НЕ СвязьУстановлена) Тогда
				Для Инд = 1 По 3 Цикл
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКодГражд" + Строка(Инд), Сред(Гражд, Инд, 1));
				КонецЦикла;
			Иначе
				Если ПустаяСтрока(КодСтраны) Тогда
					Для Инд = 1 По 3 Цикл
						СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКодГражд" + Строка(Инд), Сред(Гражд, Инд, 1));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;


	КонецЕсли;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицФИО", ФИО);
		Представление = СтрокаДляВставкиДанных.Данные[РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, "ФизЛица", "ИмяПредставления")];
		СтрокаДляВставкиДанных.Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Если ФизЛицСлТел Тогда

		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСлТел) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСлТел", мТелОрганизации);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Если ФизЛицСлТел Тогда

		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДомТел) Тогда

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДомТел", Тел);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВид) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВид", ВидУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДок1 + СтрокаДляВставкиДанных.Данные.ФизЛицДок2) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок1", Сред(КодУдЛичн, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДок2", Сред(КодУдЛичн, 2, 1));
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокСерияНомер) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если ФизЛицДатаРожд Тогда

		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР", ДатаРожд);
			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицДатаР) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДатаР", ДатаРожд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Если ФизЛицМестоР Тогда

		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицМестоР", МестоРожд);
			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицМестоР) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицМестоР", МестоРожд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДокВыдан) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

		Для Инд = 1 По 8 Цикл

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

		КонецЦикла;

	Иначе

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицДокДата1 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата2 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата3
		+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата4 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата5 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата6
		+ СтрокаДляВставкиДанных.Данные.ФизЛицДокДата7 + СтрокаДляВставкиДанных.Данные.ФизЛицДокДата8) Тогда

			стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");

			Для Инд = 1 По 8 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДокДата" + Строка(Инд), Сред(стрУказаннаяДата1, Инд, 1));

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		Для Инд = 1 По 6 Цикл

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

		КонецЦикла;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицИнд1 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд2 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд3
		+СтрокаДляВставкиДанных.Данные.ФизЛицИнд4 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд5 + СтрокаДляВставкиДанных.Данные.ФизЛицИнд6) Тогда

			Для Инд = 1 По 6 Цикл

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицИнд" + Строка(Инд), Сред(ИндексМЖ, Инд, 1));

			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицСубъект", СубъектМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицС1 + СтрокаДляВставкиДанных.Данные.ФизЛицС2) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС1", Сред(КодСубъектМЖ, 1, 1));
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицС2", Сред(КодСубъектМЖ, 2, 1));

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицРайон", РайонМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицГород", ГородМЖ);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицНП", НПунктМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицУлица", УлицаМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицДом", ДомМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКорпус", КорпусМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицКвартира", КвартираМЖ);

		КонецЕсли;

	КонецЕсли;

	Если ЕстьПол Тогда
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			ПолМ = СтрокаДляВставкиДанных.Данные.ФизЛицПолМ;
			ПолЖ = СтрокаДляВставкиДанных.Данные.ФизЛицПолЖ;

			Если (НЕ СвязьУстановлена) Тогда

				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
				СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));

			Иначе

				Если (РегламентированнаяОтчетность.ПустоеЗначение(ПолЖ)) И (РегламентированнаяОтчетность.ПустоеЗначение(ПолМ)) Тогда
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
					СтрокаДляВставкиДанных.Данные.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;


	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрокаДляВставкиДанных.Данные.ФизЛицФИО) Тогда

		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

		Для Инд =1 По 8 Цикл
			СтрокаДляВставкиДанных.Данные.Вставить("ДатаПодписи" + Строка(Инд), Сред(стрУказаннаяДата, Инд, 1));
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры //ВыводДанныхОФизическомЛице

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1_1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаДоплФед_", 15, мСуммаДоплФедРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаУменФед_", 15, мСуммаУменФедРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехФед_", 15, мСуммаПерехФедРаздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаДоплСуб_", 15, мСуммаДоплСубРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаУменСуб", 15, мСуммаУменСубРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехСуб", 15, мСуммаПерехСубРаздел1_1, Истина);
		
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаДоплМест", 15, мСуммаДоплМестРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаУменМест", 15, мСуммаУменМестРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехМест", 15, мСуммаПерехМестРаздел1_1, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_2" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку1_", 15, мСуммаФедПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку2_", 15, мСуммаФедПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку3_", 15, мСуммаФедПоСроку3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку1_", 15, мСуммаСубПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку2_", 15, мСуммаСубПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку3_", 15, мСуммаСубПоСроку3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаМестПоСроку1_", 15, мСуммаМестПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаМестПоСроку2_", 15, мСуммаМестПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаМестПоСроку3_", 15, мСуммаМестПоСроку3Раздел1_2, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_3" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога1_", 15, мСуммаНалога1Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога2_", 15, мСуммаНалога2Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога3_", 15, мСуммаНалога3Раздел1_3, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_4" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "КДоплате", 15, мКДоплатеРаздел1_4, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "КУменьшению", 15, мКУменьшениюРаздел1_4, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Функция ИндексАктивнойСтраницы(Мас)
	
	Мин = Мас[0];
	Для Каждого Эл Из Мас Цикл
		Если Эл < Мин Тогда
			Мин = Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат ?(Мин < 0, -Мин, Мин);
	
КонецФункции

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// обработка печати и поиска для раздела "Лист 03 (Разделы Б, В)" с нестандартной структурой хранения данных
	Если ИмяСтраницы = "Лист03_РазделыБВ1" ИЛИ ИмяСтраницы = "Лист03_РазделыБВ2" Тогда
		
		Если НЕ (мДеревоВыбранныхСтраниц.Строки.Найти("Лист03_РазделыБВ1", "ИмяСтраницы").ВыводНаПечать <> 0 И ИмяСтраницы = "Лист03_РазделыБВ2") Тогда
			ВыводилсяХотяБыОдинЛист = Ложь;
			СохрРешение = ЭлементыФормы.Решения.ТекущаяСтрока;
			ИндексТекущейСтраницыБВ1 = ИндексАктивнойСтраницы(СохрРешение.Значение.Лист03_РазделыБВ1);
			ИндексТекущейСтраницыБВ2 = ИндексАктивнойСтраницы(СохрРешение.Значение.Лист03_РазделыБВ2);
			Для Каждого Решение Из Решения Цикл
				МассивЛистов1 = Решение.Значение.Лист03_РазделыБВ1;
				МассивЛистов2 = Решение.Значение.Лист03_РазделыБВ2;
				Если СтруктураПараметровСтраницы.ЧтоИскать <> Неопределено ИЛИ мДеревоВыбранныхСтраниц.Строки.Найти("Лист03_РазделыБВ1", "ИмяСтраницы").ВыводНаПечать <> 0 Тогда
					СтруктураПараметровСтраницы.ИмяСтраницыПанели = "Лист03_РазделыБВ1";
					СтруктураПараметровСтраницы.ИмяТабличногоПоля = "ПолеТабличногоДокументаЛист03_РазделыБВ1";
					СтруктураПараметровСтраницы.НаименованиеЛиста = "Лист 03 (Разделы Б, В), ставка 9%";
					Для Каждого ТекущийИндекс Из МассивЛистов1 Цикл
						ПоказатьСтраницуМногостраничногоРаздела(?(ТекущийИндекс < 0, -ТекущийИндекс, ТекущийИндекс), СтруктураПараметровСтраницы.ИмяСтраницыПанели, Истина);
						// в случае поиска выводим даже пустые листы
						Если НЕ (СтруктураПараметровСтраницы.ЧтоИскать = Неопределено И НЕ ЗначениеЗаполнено(ЭлементыФормы.ПолеТабличногоДокументаЛист03_РазделыБВ1.Области.П002090015003.Значение)) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
							ВыводилсяХотяБыОдинЛист = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтруктураПараметровСтраницы.ЧтоИскать <> Неопределено ИЛИ мДеревоВыбранныхСтраниц.Строки.Найти("Лист03_РазделыБВ2", "ИмяСтраницы").ВыводНаПечать <> 0 Тогда
					СтруктураПараметровСтраницы.ИмяСтраницыПанели = "Лист03_РазделыБВ2";
					СтруктураПараметровСтраницы.ИмяТабличногоПоля = "ПолеТабличногоДокументаЛист03_РазделыБВ2";
					СтруктураПараметровСтраницы.НаименованиеЛиста = "Лист 03 (Разделы Б, В), ставка 15%";
					Для Каждого ТекущийИндекс Из МассивЛистов2 Цикл
						ПоказатьСтраницуМногостраничногоРаздела(?(ТекущийИндекс < 0, -ТекущийИндекс, ТекущийИндекс), СтруктураПараметровСтраницы.ИмяСтраницыПанели, Истина);
						// в случае поиска выводим даже пустые листы
						Если НЕ (СтруктураПараметровСтраницы.ЧтоИскать = Неопределено И НЕ ЗначениеЗаполнено(ЭлементыФормы.ПолеТабличногоДокументаЛист03_РазделыБВ2.Области.П002090015003.Значение)) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
							ВыводилсяХотяБыОдинЛист = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ВыводилсяХотяБыОдинЛист Тогда
				Если мДеревоВыбранныхСтраниц.Строки.Найти("Лист03_РазделыБВ1", "ИмяСтраницы").ВыводНаПечать <> 0 Тогда
					ПоказатьСтраницуМногостраничногоРаздела(0, "Лист03_РазделыБВ1", Истина);
					СтруктураПараметровСтраницы.ИмяСтраницыПанели = "Лист03_РазделыБВ1";
					СтруктураПараметровСтраницы.ИмяТабличногоПоля = "ПолеТабличногоДокументаЛист03_РазделыБВ1";
					СтруктураПараметровСтраницы.НаименованиеЛиста = "Лист 03 (Разделы Б, В), ставка 9%";
				Иначе
					ПоказатьСтраницуМногостраничногоРаздела(0, "Лист03_РазделыБВ2", Истина);
					СтруктураПараметровСтраницы.ИмяСтраницыПанели = "Лист03_РазделыБВ2";
					СтруктураПараметровСтраницы.ИмяТабличногоПоля = "ПолеТабличногоДокументаЛист03_РазделыБВ2";
					СтруктураПараметровСтраницы.НаименованиеЛиста = "Лист 03 (Разделы Б, В), ставка 15%";
				КонецЕсли;
				ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
			КонецЕсли;
			ПоказатьСтраницуМногостраничногоРаздела(ИндексТекущейСтраницыБВ1, "Лист03_РазделыБВ1", Истина);
			ПоказатьСтраницуМногостраничногоРаздела(ИндексТекущейСтраницыБВ2, "Лист03_РазделыБВ2", Истина);
		КонецЕсли;
		Возврат;
		
	Иначе
		
		АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если АктивнаяСтраницаРаздела = Неопределено Тогда
			ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// ИмяГруппы = "П0020800140"

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			Если ИмяГруппы = "П0020800140" Тогда
				// номера строк исходной области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх + 1;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ - 1;
				СдвигСтрок = 3;

				ИсхКоординатаНомерНижнЯчейкиОбласти = НомерНижнЯчейкиОбласти;
				ИсхКоординатаНомерВерхЯчейкиОбласти = НомерВерхЯчейкиОбласти;

			Иначе

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			КонецЕсли;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			
			Если ИмяГруппы = мИдГруппы3А Тогда
				// строки в разделе 3 приложение "А" будем сдвигать особым образом
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ - 1;
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх + 1;
				СдвигСтрок = 3;
				МаксимальноеКоличествоСтрокГруппы = 149;
				ВысотаСтроки = 3; // количество строк мокселя во вставляемой строке таблицы
			Иначе
				МаксимальноеКоличествоСтрокГруппы = 200;
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				ВысотаСтроки = 1;
			КонецЕсли;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			//Возврат;
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				Если ИмяГруппы = мИдГруппы3А Тогда

					НомерВерхСтрокиЯчейки  = ИсхКоординатаНомерВерхЯчейкиОбласти - 1;
					НомерНижнСтрокиЯчейки  = ИсхКоординатаНомерНижнЯчейкиОбласти + 1;

					Если (ИмяКолонки = "П002080014002") Или (ИмяКолонки = "П002080014003") Тогда
						НомерВерхСтрокиЯчейки = ИсхКоординатаНомерВерхЯчейкиОбласти;
						НомерНижнСтрокиЯчейки = ИсхКоординатаНомерНижнЯчейкиОбласти;
					КонецЕсли;

				Иначе
					НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
					НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;
				КонецЕсли;

				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ОбластьЯчейки.Очистить();
					Иначе
						// порядковый номер последней строки перед вставкой
						ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
						НовыйПорядковыйНомер = ИсходныйНомер + 1;

						ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
					КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		// общее название элементов для всех страниц
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;

		НайденнаяСтрока.Дельта                                = Дельта;
		
		// общее название элементов для всех страниц
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		// общее название элементов для всех страниц
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		//ЭлементыФормы["ПолеВводаКомментарий"           + "Лист02"].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, ИмяЛиста = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели    = ИмяЛиста;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист03_РазделА" Тогда

					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 1;

				Иначе

					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				КонецЕсли;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
		Расчет(ИмяСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// Функция Проверки, можно использовать возвращенный массив с ошибками.
	ПроверкаВводаДанных(Истина, "");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Перем СчетчикСкрытыхПодСтраницЛист09;
	Перем СчетчикОткрытыхПодСтраницЛист09;

	Перем СчетчикСкрытыхПодСтраницЛист03;
	Перем СчетчикОткрытыхПодСтраницЛист03;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	СчетчикСкрытыхПодСтраницЛист09 = 0;
	СчетчикОткрытыхПодСтраницЛист09 = 0;

	СчетчикСкрытыхПодСтраницЛист03 = 0;
	СчетчикОткрытыхПодСтраницЛист03 = 0;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		ПанельСодержащаяНужнуюСтраницу = ЭлементыФормы.ОсновнаяПанель;

		Если (ИмяСтраницыПанели = "Лист03_РазделыБВ1")
		Или (ИмяСтраницыПанели = "Лист03_РазделыБВ2") Тогда
			ПанельСодержащаяНужнуюСтраницу = ЭлементыФормы.ПанельКЛисту03РазделБВ;

			Если ПоказатьСтраницу = 0 Тогда
				СчетчикСкрытыхПодСтраницЛист03 = СчетчикСкрытыхПодСтраницЛист03 + 1;
			Иначе
				СчетчикОткрытыхПодСтраницЛист03 = СчетчикОткрытыхПодСтраницЛист03 + 1;
			КонецЕсли;

		ИначеЕсли (ИмяСтраницыПанели = "Лист09_0")
		Или (ИмяСтраницыПанели = "Лист09_1")
		Или (ИмяСтраницыПанели = "Лист09_2")
		Или (ИмяСтраницыПанели = "Лист09_3") Тогда
			ПанельСодержащаяНужнуюСтраницу = ЭлементыФормы.ПанельЛиста09;

			Если ПоказатьСтраницу = 0 Тогда
				СчетчикСкрытыхПодСтраницЛист09 = СчетчикСкрытыхПодСтраницЛист09 + 1;
			Иначе
				СчетчикОткрытыхПодСтраницЛист09 = СчетчикОткрытыхПодСтраницЛист09 + 1;
			КонецЕсли;

		КонецЕсли;

		Если ПоказатьСтраницу = 0 Тогда
			ПанельСодержащаяНужнуюСтраницу.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ПанельСодержащаяНужнуюСтраницу.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли;

	КонецЦикла;

	Если СчетчикСкрытыхПодСтраницЛист09 = 4 Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Лист09.Видимость = Ложь;
	КонецЕсли;

	Если СчетчикОткрытыхПодСтраницЛист09 > 0 Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Лист09.Видимость = Истина;
	КонецЕсли;

	Если СчетчикСкрытыхПодСтраницЛист03 = 2 Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Лист03_РазделыБВ.Видимость = Ложь;
	КонецЕсли;

	Если СчетчикОткрытыхПодСтраницЛист03 > 0 Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Лист03_РазделыБВ.Видимость = Истина;
	КонецЕсли;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()


// ВвестиНазваниеРешения
//
Процедура ВвестиНазваниеРешения()
	ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
	Название = ТекСтрока.Представление;

	Если ВвестиСтроку(Название, "Введите текст решения о распределении доходов (дивидендов)") Тогда

		ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
		ТекСтрока.Представление = Название;
		Модифицированность = Истина;

	КонецЕсли;
КонецПроцедуры // ВвестиНазваниеРешения

// ВернутьНаименьшееЗначениеМассива
// Функция анализирует переданный массив на предмет наименьшего числа
//
// Параметры:
//  МассивЗначений - массив значений
//  ИндексМ        - если Истина, тогда вернется индекс минимального значений, иначе значение.
//
// Возвращаемое значение:
//  Наименьшее значение в массиве или индекс наименьшего значения массива.
//
Функция ВернутьНаименьшееЗначениеМассива(МассивЗначений, ИндексМ = Ложь)

	Мин = 1000000;
	МеньшееЗначение = 0;
	Для Сч = 0 По МассивЗначений.Количество() - 1 Цикл
		Если МассивЗначений[Сч] < Мин Тогда
			Мин = МассивЗначений[Сч];
			МеньшееЗначение = ?(ИндексМ, Сч, МассивЗначений[Сч]);
		КонецЕсли;
	КонецЦикла;
	Возврат МеньшееЗначение;

КонецФункции // ВернутьНаименьшееЗначениеМассива

// Функция РазделБудетПечататься (ИмяСтраницы)
// Возвращает, будет ли печататься, а значит есть ли такая страница
// Истина - ДА
// Ложь - НЕТ
// Используется в Расчет() для определения есть ли та или иная страница
//
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // РазделБудетПечататься

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

// Раздел3БВ в этом цикле не сохраняем, т.к. он многостраничный !!!
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//

		Если СтраницаПанели.Имя = "Лист03_РазделыБВ" Тогда
			Продолжить; // Пропустим, т.к. раздел многостраничный
		КонецЕсли;

		Если СтраницаПанели.Имя = "Лист09" Тогда
			Продолжить; // Отдельная панель, сохраним далее
		КонецЕсли;

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// Соберем данные по листу 09, из отдельной панели
	Для Каждого СтраницаПанели из ЭлементыФормы.ПанельЛиста09.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

	// вствляем информацию о выплатах по дивидендам
	СписокСохранения.Вставить("РешенияОВыплатахДивидендов", Решения);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
//
// Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
// сохраняет данные в актвном листе
// Особенность:
// Процедура только сохраняет данные, не передвигая страница на начальную
// или какую либу другую часть многостраничного раздела
// Используется в следующих частях:
// 1. ОбновитьСтруктуруМногостраничныхРазделов
// 2. ПоказатьСтраницуМногостраничногоРаздела
// 3. ВставитьДополнительнуюСтраницу
// 4. ОткрытьФормуСпискаДопСтраниц
//
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницы) Экспорт
	Перем ТаблицаСтраницРаздела;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницы;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Возьмем активную страницу
	АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницы,, Истина);
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела[Модуль(АктивнаяСтраница)];

	// Если нет активной страницы - то выход
	Если СтрТаблицаСтраницы = Неопределено Тогда
		Сообщить("Ошибка!");
	КонецЕсли;

	// Берем индекс активной страницы
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	// Сохраним данные текущей страницы.
	// В каждой декларации функция СобратьДанныеТекущегоТаблПоля - разные !
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	КолМногострочныхЧастей = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницы, "МногострочностьВРазделе");

	// Определяет, как работать с многострочностью в документе, либо как с ТаблЗначений или со структурой

	СохранятьМногострКакТЗ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницы, "СохранятьМногострКакТЗ");

	// Если лист является многострочным и многостраничным, то необходимо добавить в поле данные доп. строк
	// в этой декларации не используется, т.к. многострочность одна на листе

	Если КолМногострочныхЧастей = 0 Тогда

		ВРазделеДекларацииЕстьМногострочность = Ложь;

	КонецЕсли;

	// Сохраним данные
	СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;

	// Попытаемся определить представление, только по текущей странице (по активной), последний параметр Истина
	ОпределитьПредставлениеДопСтраницПоРешению(ИмяТекущейСтраницы, Истина);

КонецПроцедуры // роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем РешенияОВыплатахДивидендов;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// ДанныеВариановАвтоЗаполнения - всегда восстанавливаем первее чем Данные Многостраничных Разделов
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Проверяем и конвертируем данные, в том случае, если прежние данные открываются новым отчетом
		Если (мВерсияФормыЧисло(мСтараяВерсияФормы) <= 20031229) Тогда
			Попытка
			мСтруктураМногостраничныхРазделов.Удалить("Раздел10");
			Исключение
			КонецПопытки;
			// Проверяем и конвертируем данные, в том случае, если прежние данные открываются новым отчетом
			РегламентированнаяОтчетность.КонвертацияОтчетнойФормы( , ЭтаФорма, мСтараяВерсияФормы, ПоказателиОтчета);
		КонецЕсли;

		//РегламентированнаяОтчетность.КонвертацияОтчетнойФормы(мВерсияФормы, мСтараяВерсияФормы, ПоказателиОтчета);

		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			ИмяСтраницы = ЭлементСтруктуры.Ключ;

			// Покажем эти две странице, ниже, когда распакуем данные о решениях
			Если (ИмяСтраницы <> "Лист03_РазделыБВ1") И (ИмяСтраницы <> "Лист03_РазделыБВ2") Тогда

				мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
				АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
				ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
				ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

			КонецЕсли;

		КонецЦикла;

		//мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
		//мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

		//мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
		//мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);

	КонецЕсли;

	Если СписокСохранения.Свойство("РешенияОВыплатахДивидендов", РешенияОВыплатахДивидендов) Тогда

		мПанельДивидендов = "восстановление";
		Решения = РешенияОВыплатахДивидендов;

		// Отобразим две страницы, 9 и 15%
		АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения("Лист03_РазделыБВ1",, Истина);
		ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), "Лист03_РазделыБВ1");

		АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения("Лист03_РазделыБВ2",, Истина);
		ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), "Лист03_РазделыБВ2");

		ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ1");
		ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ2");

	Иначе
		// открыли старую версию отчета, где нет параметра Решений.
		// запихнем всё в первое решение и присвоем ему стандартное имя
		// Добавим начальное решение
		мПанельДивидендов = "восстановление";
		Решения.Очистить();

		МассивКоординатСтраниц9процентов = Новый Массив;

		Для Инд = 0 По мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1.Количество() - 1 Цикл
			МассивКоординатСтраниц9процентов.Добавить(Инд);
		КонецЦикла;

		МассивКоординатСтраниц15процентов = Новый Массив;

		Для Инд = 0 По мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2.Количество() - 1 Цикл
			МассивКоординатСтраниц15процентов.Добавить(Инд);
		КонецЦикла;

		СтруктураПервогоРешения = Новый Структура;
		СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ1", МассивКоординатСтраниц9процентов);
		СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ2", МассивКоординатСтраниц15процентов);

		мПанельДивидендов = "восстановление";
		Решения.Добавить(СтруктураПервогоРешения, "Решение о распределении доходов (1)");
		ЭлементыФормы.Решения.ТекущаяСтрока = Решения[0];

		ПоказатьСоответствующиеСтраницы();

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	// восстановим сохраненные данные редактируемых ячеек
	// СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ТекТабличноеПоле.Имя,"ПолеТабличногоДокумента","");

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяЛиста, "ПредставлениеДанных");

		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяЛиста, ТаблицаМногостраничногоДокумента) Тогда
			// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
			// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
			// данные многостраничных разделов уже были выведены в соответствующие листы
			Продолжить;
		КонецЕсли;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл

			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	ПоказатьСтраницыОтчета();

	мДокументВосстановлен = Истина;

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы,
//            в табличное поле которой вставляется дополнительная страница.
//  Если ИмяТекущейСтраницыПанели - неопределено, тогда берется
//  из активной ОсновнойПанели на форме.
//
Процедура ВставитьДополнительнуюСтраницуПоРешениям(ИмяТекущейСтраницыПанели = Неопределено )

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.

	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницыПанели);

	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	Если ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1" Тогда
		мАдресМНСЛист03РазделБВ1 = "";
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2" Тогда
		мАдресМНСЛист03РазделБВ2 = "";
	КонецЕсли;

	Модифицированность = Истина;

	ПоказатьСтатикРазделаРешений(ИмяТекущейСтраницыПанели);

КонецПроцедуры // РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу()

Процедура КнопкаДобавитьДополнительноеРешениеЛист03БВ(Элемент)

	// СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ1");
	// СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ2");

	ВставитьДополнительнуюСтраницуПоРешениям("Лист03_РазделыБВ1");
	ВставитьДополнительнуюСтраницуПоРешениям("Лист03_РазделыБВ2");

	Расчет("Лист03_РазделыБВ1");
	Расчет("Лист03_РазделыБВ2");
	
	Ном1 = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1.Количество() - 1;
	Ном2 = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2.Количество() - 1;

	// очистим листы
	//ТекТабличноеПоле         = Форма.ЭлементыФормы["ПолеТабличногоДокументаЛист03_РазделыБВ1"];
	//ТекТабличноеПоле         = Форма.ЭлементыФормы["ПолеТабличногоДокументаЛист03_РазделыБВ2"];


	МассивКоординатСтраниц9процентов = Новый Массив;
	МассивКоординатСтраниц9процентов.Добавить((-1) * Ном1);

	МассивКоординатСтраниц15процентов = Новый Массив;
	МассивКоординатСтраниц15процентов.Добавить((-1) * Ном2);

	СтруктураНовогоРешения = Новый Структура;
	СтруктураНовогоРешения.Вставить("Лист03_РазделыБВ1", МассивКоординатСтраниц9процентов);
	СтруктураНовогоРешения.Вставить("Лист03_РазделыБВ2", МассивКоординатСтраниц15процентов);

	мПанельДивидендов = "добавление";

	Решения.Добавить(СтруктураНовогоРешения, "Решение о распределении доходов (" + Строка(Решения.Количество() + 1) + ")");
	ЭлементыФормы.Решения.ТекущаяСтрока = Решения[Решения.Количество() - 1];

	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ1");
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ2");

	Модифицированность = Истина;

КонецПроцедуры

// мВерсияФормыЧисло
// функция возвращает число полученное из версии
// Например 01/01/2004 вернется как 20040101
//
Функция мВерсияФормыЧисло(Знач Версия)
	ЧисловойПараметр1 = Сред(Версия, 7, 4);
	ЧисловойПараметр2 = Сред(Версия, 4
	, 2);
	ЧисловойПараметр3 = Сред(Версия, 1, 2);
	Результат = ЧисловойПараметр1 + ЧисловойПараметр2 + ЧисловойПараметр3;

	Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Результат) Тогда
		Возврат Число(Результат);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // мВерсияФормыЧисло

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Для листов 09, на форме показателей нет, но в отчет на дискету должны входить и в составе показателей они есть!
	Если (ИмяПоказателя = "П002160000500")
	Или (ИмяПоказателя = "П002160027500")
	Или (ИмяПоказателя = "П002160013500")
	Или (ИмяПоказателя = "П002160029500")
	Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_1" Тогда
		мКодОкатоРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплатыРаздел1_1" Тогда
		мСрокУплатыРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБРаздел1_1" Тогда
		мКБКвФБРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел1_1" Тогда
		мСуммаДоплФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел1_1" Тогда
		мСуммаУменФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехФедРаздел1_1" Тогда
		мСуммаПерехФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвБСРаздел1_1" ТОгда
		мКБКвБСРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплСубРаздел1_1" Тогда
		мСуммаДоплСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменСубРаздел1_1" Тогда
		мСуммаУменСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехСубРаздел1_1" Тогда
		мСуммаПерехСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвМБРаздел1_1" Тогда
		мКБКвМБРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплМестРаздел1_1" Тогда
		мСуммаДоплМестРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменМестРаздел1_1" Тогда
		мСуммаУменМестРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехМестРаздел1_1" Тогда
		мСуммаПерехМестРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_2" Тогда
		мКодОкатоРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты1Раздел1_2" Тогда
		мСрокУплаты1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты2Раздел1_2" Тогда
		мСрокУплаты2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты3Раздел1_2" Тогда
		мСрокУплаты3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБРаздел1_2" Тогда
		мКБКвФБРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку1Раздел1_2" Тогда
		мСуммаФедПоСроку1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку2Раздел1_2" Тогда
		мСуммаФедПоСроку2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку3Раздел1_2" Тогда
		мСуммаФедПоСроку3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвБСРаздел1_2" Тогда
		мКБКвБСРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку1Раздел1_2" Тогда
		мСуммаСубПоСроку1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку2Раздел1_2" Тогда
		мСуммаСубПоСроку2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку3Раздел1_2" Тогда
		мСуммаСубПоСроку3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвМБРаздел1_2" Тогда
		мКБКвМБРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМестПоСроку1Раздел1_2" Тогда
		мСуммаМестПоСроку1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМестПоСроку2Раздел1_2" Тогда
		мСуммаМестПоСроку2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМестПоСроку3Раздел1_2" Тогда
		мСуммаМестПоСроку3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_3" Тогда
		мКодОкатоРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_3" Тогда
		мКБКРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога1Раздел1_3" Тогда
		мСуммаНалога1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты1Раздел1_3" Тогда
		мСрокУплаты1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога2Раздел1_3" Тогда
		мСуммаНалога2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты2Раздел1_3" Тогда
		мСрокУплаты2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога3Раздел1_3" Тогда
		мСуммаНалога3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты3Раздел1_3" Тогда
		мСрокУплаты3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_4" Тогда
		мКодОкатоРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_4" Тогда
		мКБКРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КДоплатеРаздел1_4" Тогда
		мКДоплатеРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты1Раздел1_4" Тогда
		мСрокУплаты1Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КУменьшениюРаздел1_4" Тогда
		мКУменьшениюРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты2Раздел1_4" Тогда
		мСрокУплаты2Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхоз" Тогда
		мЯвляетсяСельхоз = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил5Лист02" Тогда
		мЯвляетсяСельхозПрил5Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозЛист02_Прил5а" Тогда
		мЯвляетсяСельхозЛист02_Прил5а = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОбязанностьНаОбособке" Тогда
		мОбязанностьНаОбособке = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозЛист02_Прил6" Тогда
		мЯвляетсяСельхозЛист02_Прил6 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозЛист02_Прил7" Тогда
		мЯвляетсяСельхозЛист02_Прил7 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил1Лист02" Тогда
		мЯвляетсяСельхозПрил1Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил2Лист02" Тогда
		мЯвляетсяСельхозПрил2Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил4Лист02" Тогда
		мЯвляетсяСельхозПрил4Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СобранныеДанные3901Лист2" Тогда
		мСобранныеДанные3901Лист2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "МесяцЗптГодРаздел2" Тогда
		мМесяцЗптГодРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура "собирает" значения показателей по отдельным
// полям табличного документа на странице "Титульный" формы.
//
Процедура СохрЗначВКвадратиках()

	мОргТип = мТитульный.Области.ТипОрг1.Значение;
	
	мОргКодИМНС = мТитульный.Области.КодИМНС1.Значение
	            + мТитульный.Области.КодИМНС2.Значение
	            + мТитульный.Области.КодИМНС3.Значение
	            + мТитульный.Области.КодИМНС4.Значение;

	мИННДиректор = мТитульный.Области.ИННРук1.Значение
	             + мТитульный.Области.ИННРук2.Значение
	             + мТитульный.Области.ИННРук3.Значение
	             + мТитульный.Области.ИННРук4.Значение
	             + мТитульный.Области.ИННРук5.Значение
	             + мТитульный.Области.ИННРук6.Значение
	             + мТитульный.Области.ИННРук7.Значение
	             + мТитульный.Области.ИННРук8.Значение
	             + мТитульный.Области.ИННРук9.Значение
	             + мТитульный.Области.ИННРук10.Значение
	             + мТитульный.Области.ИННРук11.Значение
	             + мТитульный.Области.ИННРук12.Значение;
	
	мИННБухгалтер = мТитульный.Области.ИННГБ1.Значение
	              + мТитульный.Области.ИННГБ2.Значение
	              + мТитульный.Области.ИННГБ3.Значение
	              + мТитульный.Области.ИННГБ4.Значение
	              + мТитульный.Области.ИННГБ5.Значение
	              + мТитульный.Области.ИННГБ6.Значение
	              + мТитульный.Области.ИННГБ7.Значение
	              + мТитульный.Области.ИННГБ8.Значение
	              + мТитульный.Области.ИННГБ9.Значение
	              + мТитульный.Области.ИННГБ10.Значение
	              + мТитульный.Области.ИННГБ11.Значение
	              + мТитульный.Области.ИННГБ12.Значение;

	мИННУпПред = мТитульный.Области.ИННУП1.Значение
	           + мТитульный.Области.ИННУП2.Значение
	           + мТитульный.Области.ИННУП3.Значение
	           + мТитульный.Области.ИННУП4.Значение
	           + мТитульный.Области.ИННУП5.Значение
	           + мТитульный.Области.ИННУП6.Значение
	           + мТитульный.Области.ИННУП7.Значение
	           + мТитульный.Области.ИННУП8.Значение
	           + мТитульный.Области.ИННУП9.Значение
	           + мТитульный.Области.ИННУП10.Значение
	           + мТитульный.Области.ИННУП11.Значение
	           + мТитульный.Области.ИННУП12.Значение;

	мОргОГРН = мТитульный.Области.ОГРН1.Значение
	         + мТитульный.Области.ОГРН2.Значение
	         + мТитульный.Области.ОГРН3.Значение
	         + мТитульный.Области.ОГРН4.Значение
	         + мТитульный.Области.ОГРН5.Значение
	         + мТитульный.Области.ОГРН6.Значение
	         + мТитульный.Области.ОГРН7.Значение
	         + мТитульный.Области.ОГРН8.Значение
	         + мТитульный.Области.ОГРН9.Значение
	         + мТитульный.Области.ОГРН10.Значение
	         + мТитульный.Области.ОГРН11.Значение
	         + мТитульный.Области.ОГРН12.Значение
	         + мТитульный.Области.ОГРН13.Значение;

	мОргКодОКАТО = мРаздел1_1.Области.КодОКАТО_1_01.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_02.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_03.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_04.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_05.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_06.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_07.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_08.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_09.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_10.Значение
	             + мРаздел1_1.Области.КодОКАТО_1_11.Значение;

	// Требуется для процедуры формирования данных по ФЛ

	мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ДатаДок = "";
	Для Инд = 1 По 8 Цикл
		ДатаДок = ДатаДок + мФизЛица.Области["ФизЛицДокДата" + Строка(Инд)].Значение + ?(Инд=2, ".", ?( Инд = 4, ".", ""));
	КонецЦикла;

	Если РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаДок + "0:00:00") Тогда
		мДатаДок = Дата(ДатаДок + "0:00:00");
	КонецЕсли;

	мФизЛицИнд = "";
	Для Инд = 1 По 6 Цикл
		мФизЛицИнд = мФизЛицИнд + мФизЛица.Области["ФизЛицИнд" + Строка(Инд)].Значение;
	КонецЦикла;

	мФизЛицИнд = ?(РегламентированнаяОтчетность.ПустоеЗначение(мФизЛицИнд), "", СтрЗаменить(Строка(мФизЛицИнд), Символ(160), ""));


КонецПроцедуры // СохрЗначВКвадратиках()

// Функция вычисляет итоговую сумму по конкретной графе по всем строкам
// многострочного раздела.
//
// Параметры:
// 	 Парам - строка  - показатель ячейки, по которой суммируются значения
//                     по всем строкам многострочного раздела.
//
// Возвращаемое значение:
//   число.
//
Функция РасчетСуммМногострочнойЧасти(Парам, НомерКолонки) 
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	СуммаПоГрафе = 0; 
	
	// идентификатор многострочного раздела
	ИмяГруппы = Лев(Парам, 11);
	
	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	Для Инд = 1 по КолСтрок Цикл
		ИмяЯчейкиСтроки = СтруктураГруппы.Колонки[НомерКолонки - 1].Имя + "_" + Инд;
		ОбластьЯчейки 	= ТекТабличноеПоле.Области[ИмяЯчейкиСтроки];
		СуммаПоГрафе 	= СуммаПоГрафе + ОкруглитьЧислоПоФормату(ОбластьЯчейки.Значение);
	КонецЦикла;

	Возврат СуммаПоГрафе;				
	
КонецФункции  // РасчетСуммМнч()

// Возвращает модуль (положительное значение) заданного числа.
//
// Параметры:
//   ИсхЧисло - число - заданное число.
//
// Возвращаемое значение: число.
//
Функция Модуль(ИсхЧисло)
	
	Если НЕ ЗначениеЗаполнено(ИсхЧисло) Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипЗнч(ИсхЧисло) <> Тип("Число") Тогда
		ИсхЧисло = Число(ИсхЧисло);
	КонецЕсли;	

	Мод = Макс(ИсхЧисло, ИсхЧисло * (-1));

	Возврат Мод;

КонецФункции // Модуль()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	Страница = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1_1" Тогда

		мКодОкатоРаздел1_1 = "";
		мСрокУплатыРаздел1_1 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мКБКвФБРаздел1_1 = "";
		мСуммаДоплФедРаздел1_1 = 0;
		мСуммаУменФедРаздел1_1 = 0;
		мСуммаПерехФедРаздел1_1 = 0;
		мКБКвБСРаздел1_1 = "";
		мСуммаДоплСубРаздел1_1 = 0;
		мСуммаУменСубРаздел1_1 = 0;
		мСуммаПерехСубРаздел1_1 = 0;
		мКБКвМБРаздел1_1 = "";
		мСуммаДоплМестРаздел1_1 = 0;
		мСуммаУменМестРаздел1_1 = 0;
		мСуммаПерехМестРаздел1_1 = 0;

	ИначеЕсли Страница = "Раздел1_2" Тогда

		мКодОкатоРаздел1_2 = "";
		мСрокУплаты1Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты2Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты3Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мКБКвФБРаздел1_2 ="";
		мСуммаФедПоСроку1Раздел1_2 = 0;
		мСуммаФедПоСроку2Раздел1_2 = 0;
		мСуммаФедПоСроку3Раздел1_2 = 0;
		мКБКвБСРаздел1_2 = "";
		мСуммаСубПоСроку1Раздел1_2 = 0;
		мСуммаСубПоСроку2Раздел1_2 = 0;
		мСуммаСубПоСроку3Раздел1_2 = 0;
		мКБКвМБРаздел1_2 = "";
		мСуммаМестПоСроку1Раздел1_2 = 0;
		мСуммаМестПоСроку2Раздел1_2 = 0;
		мСуммаМестПоСроку3Раздел1_2 = 0;

	ИначеЕсли Страница = "Раздел1_3" Тогда

		мКодОкатоРаздел1_3 = "";
		мКБКРаздел1_3 = "";
		мСуммаНалога1Раздел1_3 = 0;
		мСрокУплаты1Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСуммаНалога2Раздел1_3 = 0;
		мСрокУплаты2Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСуммаНалога3Раздел1_3 = 0;
		мСрокУплаты3Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	ИначеЕсли Страница = "Раздел1_4" Тогда

		мКодОкатоРаздел1_4 = "";
		мКБКРаздел1_4 = "";
		мКДоплатеРаздел1_4 = 0;
		мСрокУплаты1Раздел1_4 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мКУменьшениюРаздел1_4 = 0;
		мСрокУплаты2Раздел1_4 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	ИначеЕсли Страница = "Лист02" Тогда

		мЯвляетсяСельхоз = "";
		мСобранныеДанные3901Лист2 = "";
		мМесяцЗптГодРаздел2 = "";

	ИначеЕсли Страница = "Лист02_Прил1" Тогда

		мЯвляетсяСельхозПрил1Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил2" Тогда

		мЯвляетсяСельхозПрил2Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил4" Тогда

		мЯвляетсяСельхозПрил4Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил5" Тогда

		мЯвляетсяСельхозПрил5Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил5а" Тогда

		мОбязанностьНаОбособке = "";
		мЯвляетсяСельхозЛист02_Прил5а = "";

	ИначеЕсли Страница = "Лист02_Прил6" Тогда

		мЯвляетсяСельхозЛист02_Прил6 = "";

	ИначеЕсли Страница = "Лист02_Прил7" Тогда

		мЯвляетсяСельхозЛист02_Прил7 = "";

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Перем ЦветЗаполняетсяАвтоАрифметика; // ЗЕЛЕНЫЙ
	Перем ЦветЗаполняетсяОднозначноВручную; // ЖЕЛТЫЙ

	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ

	Если ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение Тогда

		Возврат; // отключен режим АвтоЗаполнения

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда

		СуммаНалогаФедерал  = 0;
		СуммаНалогаСубъект  = 0;
		СуммаНалогаМестный  = 0;
		СуммаАвансовФедерал = 0;
		СуммаАвансовСубъект = 0;
		СуммаАвансовМестный = 0;
		СуммаЗасчитФедерал  = 0;
		СуммаЗасчитСубъект  = 0;
		СуммаЗасчитМестный  = 0;
		СуммаПереходФедерал = 0;
		СуммаПереходСубъект = 0;
		СуммаПереходМестный = 0;
		КолвоСроковУплаты   = 0; 

		СуммНалогФедЛист11  = 0;
		СуммНалогСубЛист11  = 0;
		СуммНалогМстЛист11  = 0;
		СуммАвансФедЛист11  = 0;
		СуммАвансСубЛист11  = 0;
		СуммАвансМстЛист11  = 0;

		СуммаНалогаДоплСубъект   = 0;
		СуммаНалогаУменьшСубъект = 0;
		СуммаНалогаДоплМестный   = 0;
		СуммаНалогаУменьшМестный = 0;
		СуммаНалогаПерехСубъект  = 0;
		СуммаНалогаПерехМестный  = 0;

		ЕстьДанныеПоЛисту02  = 0;
		ЕстьДанныеПоЛисту11  = 0; 
		ЕстьДанныеПриложен5  = 0;
		ЕстьДанныеПриложен5а = 0;	

		П001010004000 = 0;
		П001010005000 = 0;
		П001010006000 = 0;
		П001010008000 = 0;
		П001010009000 = 0;
		П001010010000 = 0;
		П001010012000 = 0;
		П001010013000 = 0;
		П001010014000 = 0;

		// определим, есть ли соглашение о разделе продукции
		Если РазделБудетПечататься ("Лист11") Тогда
			// ПустаяСтрока( мРаздел11.Области.П002180000100.Значение)
			ЕстьДанныеПоЛисту11 = 1; // Данные есть
		Иначе
			ЕстьДанныеПоЛисту11 = 0; // Данных нет
		КонецЕсли;

		// Если отчитываемся за обособленное подразделение, то заполняются ТОЛЬКО листы раздела 1 и 
		// Прил5а к листу 02, поэтому считаем, что данных на листе 02 в этом случае НЕТ.
		Если ПоМестуНахожденияОрганизации Тогда
			ЕстьДанныеПоЛисту02 = 1; // Данные есть
		Иначе
			ЕстьДанныеПоЛисту02 = 0; // Данных нет
		КонецЕсли;

		// Определим, заполнен лист или нет, по показателю - количество обособленных подразделений
		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мРаздел2_Прил5.Области.П002040001000.Значение) Тогда
			ЕстьДанныеПриложен5 = 1; // Данные есть
		Иначе
			ЕстьДанныеПриложен5 = 0; // Данных нет
		КонецЕсли;

		Если ЕстьДанныеПриложен5 = 1 Тогда
			// Если в Приложении 5 сумма налоговой базы = 0, то приложение сохранено ошибочно или не содержит никаких данных.
			Если  мРаздел2_Прил5.Области.П002040002003.Значение = 0 Тогда
				ЕстьДанныеПриложен5 = 0;
			Иначе
				ЕстьДанныеПриложен5 = 1;
			КонецЕсли;
		КонецЕсли;

		// Сумма исчисленного налога по бюджетам
		// Названия переменных как в 77 для общего плана
		Если ЕстьДанныеПоЛисту02 = 1 Тогда
			СуммаНалогаФедерал  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000026003.Значение);
			СуммаНалогаСубъект  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000027003.Значение);
			СуммаНалогаМестный  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000028003.Значение);

			// Сумма авансовых платежей по бюджетам
			СуммаАвансовФедерал = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000030003.Значение);
			СуммаАвансовСубъект = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000031003.Значение);
			СуммаАвансовМестный = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000032003.Значение);

			// Сумма засчитываемой в уплату налога по бюджетам
			СуммаЗасчитФедерал  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000034003.Значение);
			СуммаЗасчитСубъект  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000035003.Значение);
			СуммаЗасчитМестный  = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000036003.Значение);

			// Сумма налога по базе переходного периода 
			СуммаПереходФедерал = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000043003.Значение);
			СуммаПереходСубъект = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000044003.Значение);
			СуммаПереходМестный = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000045003.Значение);

			// Кол-во сроков уплаты налога с налоговой базы переходного периода
			КолвоСроковУплаты   = мРаздел2.Области.П002000046003.Значение;

			// Если по обособленному подразделению
		КонецЕсли; // ЕстьДанныеПоЛисту02
		
		Если НЕ ПоМестуНахожденияОрганизации Тогда
			// Суммы налога, подлежащие к доплате / к уменьшению
			// в бюджет субъекта и в местный бюджет определяем
			// по конкретному обособленному подразделению.

			СуммаНалогаДоплСубъект   = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050015003.Значение );

			// Сумма налога к уменьшению в бюджет субъекта РФ 
			СуммаНалогаУменьшСубъект = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050017003.Значение );

			// Сумма налога к доплате в местный бюджет
			СуммаНалогаДоплМестный   = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050016003.Значение );

			// Сумма налога к уменьшению в местный бюджет
			СуммаНалогаУменьшМестный = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050018003.Значение );

			// Сумма налога с налоговой базы переходного периода в бюджет субъекта РФ
			СуммаНалогаПерехСубъект  = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050019003.Значение );

			// Сумма налога с налоговой базы переходного периода в местный бюджет
			СуммаНалогаПерехМестный  = ОкруглитьЧислоПоФормату( мРаздел2_Прил5а.Области.П002050020003.Значение );

		КонецЕсли; // Если по обособленному подразделению

		Если (ПоМестуНахожденияОрганизации) И (ЕстьДанныеПриложен5 =1) Тогда

			СуммаНалогаДоплСубъект   = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040015004.Значение );

			// Сумма налога к уменьшению в бюджет субъекта РФ 
			СуммаНалогаУменьшСубъект = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040017004.Значение );

			// Сумма налога к доплате в местный бюджет
			СуммаНалогаДоплМестный   = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040016004.Значение );

			// Сумма налога к уменьшению в местный бюджет
			СуммаНалогаУменьшМестный = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040018004.Значение );

			// Сумма налога с налоговой базы переходного периода в бюджет субъекта РФ
			СуммаНалогаПерехСубъект  = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040019004.Значение );

			// Сумма налога с налоговой базы переходного периода в местный бюджет
			СуммаНалогаПерехМестный  = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040020004.Значение );

		КонецЕсли; // ПоМестуНахожденияОрганизации

		Если ЕстьДанныеПоЛисту11 = 1 Тогда
			// Сумма исчисленного налога по бюджетам по Листу 11

			СуммНалогФедЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180019003.Значение );
			СуммНалогСубЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180020003.Значение );
			СуммНалогМстЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180021003.Значение );

			// Сумма авансовых платежей по бюджетам по Листу11
			СуммАвансФедЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180023003.Значение );
			СуммАвансСубЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180024003.Значение );
			СуммАвансМстЛист11  = ОкруглитьЧислоПоФормату( мРаздел11.Области.П002180025003.Значение );

		КонецЕсли; // Данные По Листу 11

		Если (ЕстьДанныеПоЛисту02 = 1) ИЛИ (ЕстьДанныеПриложен5 = 1) ИЛИ (НЕ ПоМестуНахожденияОрганизации) Тогда

			П001010004000 = Макс(СуммаНалогаФедерал  - СуммаАвансовФедерал - СуммаЗасчитФедерал, 0);
			П001010005000 = Макс(СуммаАвансовФедерал + СуммаЗасчитФедерал  - СуммаНалогаФедерал, 0);
			П001010006000 = ? (КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату( СуммаПереходФедерал / КолвоСроковУплаты ), 0);

			мСуммаДоплФедРаздел1_1 = П001010004000;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаДоплФед_", 15, мСуммаДоплФедРаздел1_1, Истина);

			мСуммаУменФедРаздел1_1 = П001010005000;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаУменФед_", 15, мСуммаУменФедРаздел1_1, Истина);

			мСуммаПерехФедРаздел1_1 = П001010006000;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаПерехФед_", 15, мСуммаПерехФедРаздел1_1, Истина);
			
			Если НЕ( (ЕстьДанныеПриложен5 = 1) ИЛИ (НЕ ПоМестуНахожденияОрганизации) ) Тогда

				// Суммы налога к доплате / к уменьшению в бюджет субъекта РФ и в местный бюджет определяем
				// по данным сохраненнных Приложений 5 и 5а к Листу 02.

				// Заполняем строки 080 - 100
				П001010008000 = Макс(СуммаНалогаСубъект  - СуммаАвансовСубъект - СуммаЗасчитСубъект, 0);
				П001010009000 = Макс(СуммаАвансовСубъект + СуммаЗасчитСубъект  - СуммаНалогаСубъект, 0);
				П001010010000 = ? (КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату( СуммаПереходСубъект / КолвоСроковУплаты ), 0);

				// Заполняем строки 120 - 140
				П001010012000 = Макс(СуммаНалогаМестный  - СуммаАвансовМестный - СуммаЗасчитМестный, 0);
				П001010013000 = Макс(СуммаАвансовМестный + СуммаЗасчитМестный  - СуммаНалогаМестный, 0);
				П001010014000 = ? (КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату( СуммаПереходМестный / КолвоСроковУплаты ), 0);
			Иначе

				// Суммы налога к доплате / к уменьшению в бюджет субъекта РФ и в местный бюджет определяем
				// по данным сохраненнных Приложений 5 и 5а к Листу 02.

				// Заполняем строки 080 - 100
				П001010008000 = СуммаНалогаДоплСубъект;
				П001010009000 = СуммаНалогаУменьшСубъект;
				П001010010000 = СуммаНалогаПерехСубъект;

				// Заполняем строки 120 - 140
				П001010012000 = СуммаНалогаДоплМестный;
				П001010013000 = СуммаНалогаУменьшМестный;
				П001010014000 = СуммаНалогаПерехМестный;

			КонецЕсли;
			
		ИначеЕсли ЕстьДанныеПоЛисту11 = 1 Тогда
			
			// Налогоплательщик выполняет соглашение о разделе продукции, связанное с
			// применением специального налогового режима, установленного главой 26.4 НК РФ.

			// Заполняем строки 040 - 050
			П001010004000 = Макс(СуммНалогФедЛист11 - СуммАвансФедЛист11, 0);
			П001010005000 = Макс(СуммАвансФедЛист11 - СуммНалогФедЛист11, 0);
			
			// Заполняем строки 080 - 090
			П001010008000 = Макс(СуммНалогСубЛист11 - СуммАвансСубЛист11, 0);
			П001010009000 = Макс(СуммАвансСубЛист11 - СуммНалогСубЛист11, 0);
			
			// Заполняем строки 120 - 130
			П001010012000 = Макс(СуммНалогМстЛист11 - СуммАвансМстЛист11, 0);
			П001010013000 = Макс(СуммАвансМстЛист11 - СуммНалогМстЛист11, 0);
			
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаДоплФед_", 15, П001010004000, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаУменФед_", 15, П001010005000, Истина);

		КонецЕсли;

		// Теперь Заполню всё что посчитали
		мСуммаДоплСубРаздел1_1 = П001010008000;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаДоплСуб_", 15, мСуммаДоплСубРаздел1_1, Истина);
		мСуммаУменСубРаздел1_1 = П001010009000;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаУменСуб", 15, мСуммаУменСубРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаПерехСуб", 15, П001010010000, Истина);

		//(зарегистрирован в Минюсте России 28.01.2001 N 3196), ввиду отсутствия показателей ставится прочерк:
		//в подразделе 1.1 Раздела 1 - по строкам 120, 130;

		//мСуммаДоплМестРаздел1_1 = П001010012000;
		мСуммаДоплМестРаздел1_1 = 0;
		// мСуммаУменМестРаздел1_1 = П001010013000;
		мСуммаУменМестРаздел1_1 = 0;
		мСуммаПерехМестРаздел1_1 = П001010014000;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СуммаПерехМест", 15, мСуммаПерехМестРаздел1_1, Истина);

	ИначеЕсли // Раздел 1_1
		ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		// Признак обособленного подразделения

		ПоОбособленномуПодразделению = 0;

		Если НЕ ПоМестуНахожденияОрганизации Тогда
			ПоОбособленномуПодразделению = 1;
		КонецЕсли;

		// Получаем данные из Листа 02

		НомерКвартала = мРаздел2.Области.П002000038501.Значение;

		СуммаАвансовФедеральный = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000040003.Значение);
		СуммаАвансовСубъект     = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000041003.Значение);
		СуммаАвансовМестный     = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000042003.Значение);

		Если мРаздел2_Прил5.Области.П002040002003.Значение <> 0 Тогда
			ЕстьДанныеПриложен5 = 1;
			Иначе
			ЕстьДанныеПриложен5 = 0;
		КонецЕсли;


		Если ПоОбособленномуПодразделению = 1 Тогда
			// Суммы налога, подлежащие к доплате / к уменьшению
			// в бюджет субъекта и в местный бюджет определяем
			// по конкретному обособленному подразделению.

			// Авансовые платежи по части, зачисляемой в федеральный бюджет,
			// осуществляются по месту нахождения организации.
			СуммаАвансовФедеральный = 0;

			// Сроки уплаты определяем по графе 1 строки 220 Приложения 5а к Листу 02
			НомКв = мРаздел2_Прил5а.Области.П002050022001.Значение;
			НомерКвартала = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(НомКв), Число(НомКв), 0);

			СуммаАвансовСубъект     = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П002050022003"));
			СуммаАвансовМестный     = ОкруглитьЧислоПоФормату( СуммаПоказателяПоВсемСтраницам("П002050023003"));

		ИначеЕсли ЕстьДанныеПриложен5 = 1 Тогда

			НомКв = мРаздел2_Прил5.Области.П002040022001.Значение;
			НомерКвартала = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(НомКв), Число(НомКв), 0);

			// Заполняем строки 120 - 140, 220 - 240 и 320 - 340 на основании данных
			// по строкам 220 - 230 Приложения 5 к Листу 02 декларации.
			//
			// Суммы авансовых платежей
			СуммаАвансовСубъект     = ОкруглитьЧислоПоФормату( мРаздел2_Прил5.Области.П002040022004.Значение );
			СуммаАвансовМестный     = ОкруглитьЧислоПоФормату( мРаздел2_Прил5.Области.П002040023004.Значение );

		КонецЕсли;

		ГодАвансов    = Год(КонецКвартала(мДатаКонцаПериодаОтчета) + 1);

		// Заполняем строки 020 - 040 (сроки уплаты)
		Если НомерКвартала <> 0 Тогда
			мСрокУплаты1Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3) - 2, 28);
			мСрокУплаты2Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3) - 1, 28);
			мСрокУплаты3Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3),28);

			// отобразим дату
			стрУказаннаяДата1 = Формат(мСрокУплаты1Раздел1_2, "ДФ=""ддММгггг""");
			стрУказаннаяДата2 = Формат(мСрокУплаты2Раздел1_2, "ДФ=""ддММгггг""");
			стрУказаннаяДата3 = Формат(мСрокУплаты3Раздел1_2, "ДФ=""ддММгггг""");

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты1", 8, стрУказаннаяДата1);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты2", 8, стрУказаннаяДата2);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты3", 8, стрУказаннаяДата3);

		Иначе

			мСрокУплаты1Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			мСрокУплаты2Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			мСрокУплаты3Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

		КонецЕсли;

		// Заполняем строки 120 - 140
		мСуммаФедПоСроку1Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовФедеральный / 3);
		мСуммаФедПоСроку2Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовФедеральный / 3);
		мСуммаФедПоСроку3Раздел1_2 = Макс( СуммаАвансовФедеральный - (мСуммаФедПоСроку1Раздел1_2 + мСуммаФедПоСроку2Раздел1_2), 0 );

		// Заполняем строки 220 - 240
		мСуммаСубПоСроку1Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовСубъект / 3);
		мСуммаСубПоСроку2Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовСубъект / 3);
		мСуммаСубПоСроку3Раздел1_2 = Макс( СуммаАвансовСубъект - (мСуммаСубПоСроку1Раздел1_2 + мСуммаСубПоСроку2Раздел1_2), 0 );

		//В связи с этим, начиная с Декларации за первый отчетный период 2005 года, согласно пункту 1.2 Инструкции по заполнению декларации по налогу на прибыль организаций, утвержденной Приказом МНС России от 29.12.2001 N БГ-3-02/585 с учетом внесенных в него изменений и дополнений (зарегистрирован в Минюсте России 28.01.2001 N 3196), ввиду отсутствия показателей ставится прочерк:
		//в подразделе 1.1 Раздела 1 - по строкам 120, 130;
		//в подразделе 1.2 Раздела 1 - по строкам 310 - 340;

		//  Заполняем строки 320 - 340
		// мСуммаМестПоСроку1Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовМестный / 3);
		// мСуммаМестПоСроку2Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовМестный / 3);
		// мСуммаМестПоСроку3Раздел1_2 = Макс( СуммаАвансовМестный - (мСуммаМестПоСроку1Раздел1_2 + мСуммаМестПоСроку2Раздел1_2), 0 );

		мСуммаМестПоСроку1Раздел1_2 = 0;
		мСуммаМестПоСроку2Раздел1_2 = 0;
		мСуммаМестПоСроку3Раздел1_2 = 0;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаФедПоСроку1_", 15, мСуммаФедПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаФедПоСроку2_", 15, мСуммаФедПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаФедПоСроку3_", 15, мСуммаФедПоСроку3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаСубПоСроку1_", 15, мСуммаСубПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаСубПоСроку2_", 15, мСуммаСубПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаСубПоСроку3_", 15, мСуммаСубПоСроку3Раздел1_2, Истина);

		//В связи с этим, начиная с Декларации за первый отчетный период 2005 года, согласно пункту 1.2 Инструкции по заполнению декларации по налогу на прибыль организаций, утвержденной Приказом МНС России от 29.12.2001 N БГ-3-02/585 с учетом внесенных в него изменений и дополнений (зарегистрирован в Минюсте России 28.01.2001 N 3196), ввиду отсутствия показателей ставится прочерк:
		//в подразделе 1.1 Раздела 1 - по строкам 120, 130;
		//в подразделе 1.2 Раздела 1 - по строкам 310 - 340;

		//РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаМестПоСроку1_", 15, мСуммаМестПоСроку1Раздел1_2, Истина);
		//РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаМестПоСроку2_", 15, мСуммаМестПоСроку2Раздел1_2, Истина);
		//РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СуммаМестПоСроку3_", 15, мСуммаМестПоСроку3Раздел1_2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_4" Тогда


		// Заполняем строки 040 и 060
		//
		// Получим необходимые для расчета показателей данные
		// из других сохраненных разделов Декларации

		//МаскаПоискаРазделаБЛиста03ПоСтавкеНалога9  = Лев(Строка(Дата2), 2) + Сред( Строка(Дата2), 4, 2 ) + "16" + НомерВариантаОтчета;
		//МаскаПоискаРазделаБЛиста03ПоСтавкеНалога15 = Лев(Строка(Дата2), 2) + Сред( Строка(Дата2), 4, 2 ) + "29" + НомерВариантаОтчета;
		//МаскаПоискаРазделаАЛиста04ПоСтавкеНалога9  = Лев(Строка(Дата2), 2) + Сред( Строка(Дата2), 4, 2 ) + "17" + НомерВариантаОтчета;
		//МаскаПоискаРазделаАЛиста04ПоСтавкеНалога15 = Лев(Строка(Дата2), 2) + Сред( Строка(Дата2), 4, 2 ) + "30" + НомерВариантаОтчета;
		//МаскаПоискаРазделаБЛиста04 = Лев(Строка(Дата2), 2) + Сред( Строка(Дата2), 4, 2 ) + "18" + НомерВариантаОтчета;		

		чП001040001000 = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(мРаздел1_4.Области.П001040001000.Значение), Число(мРаздел1_4.Области.П001040001000.Значение), 0);

		Если чП001040001000 = 1 Тогда
			// Суммы налога определяем по Разделу Б Листа 03 Декларации
			П001040004000 = ОкруглитьЧислоПоФормату(мРаздел3_БВ1.Области.П002090006003.Значение
												  + мРаздел3_БВ2.Области.П002090006003.Значение);

			П001040006000 = ОкруглитьЧислоПоФормату(мРаздел3_БВ1.Области.П002090007003.Значение
												  + мРаздел3_БВ2.Области.П002090007003.Значение);

		ИначеЕсли чП001040001000 = 2 Тогда
			// Суммы налога определяем по Разделу А Листа 04 Декларации	        

			П001040004000 = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист04_РазделА", "П002100011003", Ложь));
			П001040006000 = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист04_РазделА", "П002100012003", Ложь));

		ИначеЕсли чП001040001000 = 3 Тогда

			// Суммы налога определяем по Разделу Б Листа 04 Декларации	        
			П001040004000 = ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110006003.Значение);
			П001040006000 = ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110007003.Значение);

		Иначе
			// Вид платежа не задан (или задан неверно)

			П001040004000 = 0;
			П001040006000 = 0;

		КонецЕсли;

		мКДоплатеРаздел1_4 = П001040004000;
		мКУменьшениюРаздел1_4 = П001040006000;

		ЗаполнениеЗначенийВКвадратиках("Раздел1_4");

// *******************************************************************************************
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02" Тогда
		// Строка 010 листа 02
		// вырезка из инструкции по заполнению Листа 02
		// Отчисления, указанные в строке 250 Листа 09 Декларации, подлежат переносу в строку 010 Листа 02 Декларации.
		ОкрП002010011003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010011003.Значение);
		ОкрП002160025003 = ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160025003.Значение);

		ОкрП002000001003 = ОкрП002010011003 + ОкрП002160025003;
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000001003", ОкрП002000001003);

		ОкрП002000001003 = мРаздел2.Области.П002000001003.Значение;

		// Строка 020 листа 02
		ОкрП002000002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020027003.Значение);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000002003", ОкрП002000002003);
		ОкрП002000002003 = мРаздел2.Области.П002000002003.Значение;

		// Строка 030 листа 02
		ОкрП002000003003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060001003.Значение);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000003003", ОкрП002000003003);
		ОкрП002000003003 = мРаздел2.Области.П002000003003.Значение;

		// Строка 040 листа 02
		ОкрП002000004003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000004003.Значение);

		// Рассчитываем строку 050
		// Расчет показателей Листа 2
		// берем все значения из листа, т.к. не знаем, что установила процедура УстановитьЗначениеПоказателя
		ОкрП002000001003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000001003.Значение);
		ОкрП002000002003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000002003.Значение);
		ОкрП002000003003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000003003.Значение);
		ОкрП002000004003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000004003.Значение);
		ОкрП002000005003 = ОкрП002000001003 - ОкрП002000002003 + ОкрП002000003003 - ОкрП002000004003;
		мРаздел2.Области.П002000005003.Значение = ОкрП002000005003;

		ОкрП002000006003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000006003.Значение);
		ОкрП002000009003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000009003.Значение);
		ОкрП002000011003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000011003.Значение);
		ОкрП002000012003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000012003.Значение);
		ОкрП002000013003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000013003.Значение);
		
		// Рассчитываем строку 140
		ОкрП002000014003 = ОкрП002000005003 - ОкрП002000006003 - ОкрП002000009003 - ОкрП002000011003 - ОкрП002000012003 - ОкрП002000013003;				
		мРаздел2.Области.П002000014003.Значение = ОкрП002000014003;

		// Рассчитываем строку 150
		ОкрП002000015003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030010003.Значение);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000015003",ОкрП002000015003);
		Если мРаздел2.Области.П002000015003.Значение <> ОкрП002000015003 Тогда
			ОкрП002000015003 = мРаздел2.Области.П002000015003.Значение;
		КонецЕсли;

		ОкрП002000015003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000015003.Значение);
		ОкрП002120012003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120012003.Значение);
		ОкрП002130012003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130012003.Значение);
		ОкрП002140023003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140023003.Значение);
		ОкрП002150011003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150010003.Значение);
		ОкрП002160059003 = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160059003.Значение) // 15%
		+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160059003.Значение); // 15%

	// Рассчитываем строку 180
		ОкрП002000018003 = Макс((ОкрП002000014003 - ОкрП002000015003)
				+ ОкрП002120012003
				+ ОкрП002130012003
				+ ОкрП002140023003
				+ ОкрП002150011003
				+ ОкрП002160059003,0);
		мРаздел2.Области.П002000018003.Значение = ОкрП002000018003;

	// Рассчитываем строку 190
		ОкрП002000016003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000016003.Значение);
		ОкрП002000019003 = Макс((ОкрП002000014003 - ОкрП002000015003 - ОкрП002000016003)
				+ ОкрП002120012003
				+ ОкрП002130012003
				+ ОкрП002140023003
				+ ОкрП002150011003
				+ ОкрП002160059003,0);
		мРаздел2.Области.П002000019003.Значение = ОкрП002000019003;

	// Рассчитываем строку 200
		ОкрП002000017003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000017003.Значение);

		//На листе 02:
		//строка 200 - не вычисляется

		//ОкрП002000020003 = Макс((ОкрП002000014003 - ОкрП002000015003 - ОкрП002000017003)
		//		+ ОкрП002120012003
		//		+ ОкрП002130012003
		//		+ ОкрП002140023003
		//		+ ОкрП002150011003
		//		+ ОкрП002160059003,0);
		//мРаздел2.Области.П002000020003.Значение = ОкрП002000020003;

		ОкрП002000020003 = мРаздел2.Области.П002000020003.Значение;

		ОкрП002000022003 = мРаздел2.Области.П002000022003.Значение;
		
		ОкрП002000023003 = мРаздел2.Области.П002000023003.Значение;

		//строка 240 - заполняется из справочника, для периодов 2005 года
		//ее заполнять не надо, что бы в справочнике не указывалось.
		//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.
		//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000024003", мСтавкаПрибМест);
		ОкрП002000024003 = мРаздел2.Области.П002000024003.Значение;

		// получим значение из Листа 5 прил. 2, строка 50, как в 7.7

		ОкрП002040005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040005003.Значение);
		ОкрП002000039003 = мРаздел2.Области.П002000039003.Значение; // необходимо для расчета долей по бюджетам

		Если ОкрП002040005003 = 0 Тогда
			// организация не имеет обособленных подразделений
			// Рассчитываем строку 210		ОБЩАЯ СТАВКА
			ОкрП002000021003 = ОкрП002000022003
				    + ОкрП002000023003
				    + мРаздел2.Области.П002000023103.Значение
				    + ОкрП002000024003;

			мРаздел2.Области.П002000021003.Значение = ОкрП002000021003; // запись результата

			// Рассчитываем строку 270
			ОкрП002000019003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000019003.Значение);
			ОкрП002000023003 = мРаздел2.Области.П002000023003.Значение;
			ОкрП002000019103 = мРаздел2.Области.П002000019103.Значение;
			ОкрП002000023103 = мРаздел2.Области.П002000023103.Значение;
			ОкрП002000027003 = ОкруглитьЧислоПоФормату((ОкрП002000019003 * ОкрП002000023003) / 100)
						   + ОкруглитьЧислоПоФормату((ОкрП002000019103 * ОкрП002000023103) / 100);
			мРаздел2.Области.П002000027003.Значение = ОкрП002000027003;
			
			// Рассчитываем строку 280
			ОкрП002000024003 = мРаздел2.Области.П002000024003.Значение;
			//ОкрП002000028003 = ОкруглитьЧислоПоФормату((ОкрП002000020003 * ОкрП002000024003) / 100);
			ОкрП002000028003 = мРаздел2.Области.П002000028003.Значение;
			//мРаздел2.Области.П002000028003.Значение = ОкрП002000028003;

			ПДоляФедерал = ?(ОкрП002000021003 <> 0, ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(ОкрП002000039003) * (ОкрП002000022003 / ОкрП002000021003)), 0);
		
			// Доля в бюджет субъекта
			Если ОкрП002000024003 <> 0 Тогда 
				ПДоляСубъект = ?(ОкрП002000021003 <> 0, ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(ОкрП002000039003) * (ОкрП002000023003 / ОкрП002000021003)), 0);
			Иначе
				ПДоляСубъект = ОкрП002000039003 - ПДоляФедерал;
			КонецЕсли;

			// Доля в местный бюджет
			Если ОкрП002000024003 <> 0 Тогда 
				ПДоляМестный = ?((ПДоляФедерал + ПДоляСубъект) <> 0, ОкруглитьЧислоПоФормату(ОкрП002000039003) - (ПДоляФедерал + ПДоляСубъект), 0);		
			Иначе
				ПДоляМестный = 0;
			КонецЕсли;

			// следующий блок формален, устанавливаем св-ва ячеек по умолчанию
			// в режиме если есть обособленные подразделения, то нижеперечисленные св-ва
			// будут меняться, чтобы вернуть обратно, если обособок нет, то и перекрасим ячейки
			// в первоначальный цвет и настройки.

			//ДоступностьЭлементовВариантаЗаполнения(1,"П002000031003");
			//УстановитьЦветФонаЯчейки("П002000031003",1);

			//строка 200 - не вычисляется
			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			//ДоступностьЭлементовВариантаЗаполнения(1,"П002000032003");
			//УстановитьЦветФонаЯчейки("П002000032003",1);

			//ДоступностьЭлементовВариантаЗаполнения(1,"П002000035003");
			//УстановитьЦветФонаЯчейки("П002000035003",1);

			//строка 200 - не вычисляется
			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			//ДоступностьЭлементовВариантаЗаполнения(1,"П002000036003");
			//УстановитьЦветФонаЯчейки("П002000036003",1);

		Иначе // есть обособленные подразделения
	
			ОкрП002000021003 = 0;	// всего
			ОкрП002000023003 = 0;	// в субьект
			ОкрП002000023103 = 0;	// в субьект
			ОкрП002000024003 = 0;	// в местны

			ДоступностьЭлементовВариантаЗаполнения(3,"П002000021003");
			УстановитьЦветФонаЯчейки("П002000023003",3);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000021003", ОкрП002000021003);

			ДоступностьЭлементовВариантаЗаполнения(3,"П002000023003");
			УстановитьЦветФонаЯчейки("П002000023003",3);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000023003", ОкрП002000023003);

			ДоступностьЭлементовВариантаЗаполнения(3,"П002000023103");
			УстановитьЦветФонаЯчейки("П002000023103",3);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000023103", ОкрП002000023103);

			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			//ДоступностьЭлементовВариантаЗаполнения(3,"П002000024003");
			//УстановитьЦветФонаЯчейки("П002000024003",3);
			//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000024003", ОкрП002000024003);

			// Строки 270 - 280
			// сделано как в 7.7

			ОкрП002000027003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040009003.Значение);
			мРаздел2.Области.П002000027003.Значение = ОкрП002000027003;

			//ОкрП002000028003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040010003.Значение);
			ОкрП002000028003 = мРаздел2.Области.П002000028003.Значение;
			//мРаздел2.Области.П002000028003.Значение = ОкрП002000028003;

			// установим цвет и признак 3 к ячейкам 310 320
			//
			//ДоступностьЭлементовВариантаЗаполнения(3,"П002000031003");
			//УстановитьЦветФонаЯчейки("П002000031003",3);

			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			// ДоступностьЭлементовВариантаЗаполнения(3,"П002000032003");
			// УстановитьЦветФонаЯчейки("П002000032003",3);

			// вычислим
			ОкрП002000031003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040011003.Значение);

			// запишем
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000031003", ОкрП002000031003);

			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.
			//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000032003", ОкрП002000032003);

			// установим цвет и признак 3 к ячейкам 350 360
			//ДоступностьЭлементовВариантаЗаполнения(3,"П002000035003");
			//УстановитьЦветФонаЯчейки("П002000035003",3);

			//строка 200 - не вычисляется
			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			//ДоступностьЭлементовВариантаЗаполнения(3,"П002000036003");
			//УстановитьЦветФонаЯчейки("П002000036003",3);

			// вычислим
			ОкрП002000035003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040013003.Значение);

			// запишем
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000035003", ОкрП002000035003);

			//строка 200 - не вычисляется
			//строка 240 - заполняется из справочника, для периодов 2005 года
			//ее заполнять не надо, что бы в справочнике не указывалось.
			//если не заполнена строка 240, тогда строки 320, 360, 420 не вычисляются.

			//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000036003", ОкрП002000036003);

			// определяем долю по бюджетам, как в 7.7
			ОкрП002040022003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040022003.Значение);
			ОкрП002040023003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040023003.Значение);

			ПДоляСубъект = ОкрП002040022003; // ссылка на 220 строку, прил. 5
			ПДоляМестный = ОкрП002040023003; // ссылка на 230 строку, прил. 5
			ПДоляФедерал = Макс(0, ОкруглитьЧислоПоФормату(ОкрП002000039003) - ПДоляСубъект - ПДоляМестный);
		КонецЕсли; // обособленные подразделения

		// Рассчитываем строку 260, рассчитыватся в любом случае - есть обособка или нет
		//ОкрП002000018003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000018003.Значение);
		ОкрП002000022003 = мРаздел2.Области.П002000022003.Значение;
		ОкрП002000026003 = Макс(ОкруглитьЧислоПоФормату((ОкрП002000018003 * ОкрП002000022003) / 100),0);
		мРаздел2.Области.П002000026003.Значение = ОкрП002000026003;
		
		// Рассчитываем строку 250, рассчитыватся в любом случае - есть обособка или нет...
		ОкрП002000025003 = ОкрП002000026003 + ОкрП002000027003 + ОкрП002000028003;
		мРаздел2.Области.П002000025003.Значение = ОкрП002000025003;

		// Рассчитываем строку 290, рассчитыватся в любом случае - есть обособка или нет...
		ОкрП002000029003 = 
		ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000030003.Значение)
		+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000031003.Значение)
		+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000032003.Значение);
		мРаздел2.Области.П002000029003.Значение = ОкрП002000029003;

		// Рассчитываем строку 330, рассчитыватся в любом случае - есть обособка или нет...
		ОкрП002000033003 = 
		ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000034003.Значение)
		+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000035003.Значение)
		+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000036003.Значение);	
		мРаздел2.Области.П002000033003.Значение = ОкрП002000033003;

		// Рассчитываем строку 370
		// ОкрП002000025003 = Ранее сформированна		
		// ОкрП002000029003 = Ранее сформированна
		// ОкрП002000033003 = Ранее сформированна

		ОкрП002000037003 = Макс(ОкрП002000025003 - ОкрП002000029003 - ОкрП002000033003, 0);
		//ророУстановитьЗначениеПоказателя(ЭтаФорма, ЭтаФорма, "П002000037003",ОкрП002000037003);
		мРаздел2.Области.П002000037003.Значение = ОкрП002000037003;

		// мРаздел2.Области.П002000037003.Значение = ОкрП002000037003;
		// Рассчитываем строку 380
		ОкрП002000038003 = Макс(ОкрП002000029003 + ОкрП002000033003 - ОкрП002000025003, 0);
		// ророУстановитьЗначениеПоказателя(ЭтаФорма, ЭтаФорма, "П002000038003",ОкрП002000038003);
		мРаздел2.Области.П002000038003.Значение = ОкрП002000038003;
		// далее переменная ОкрП002000038003 не используется

		ОкрП002000040003 = ОкруглитьЧислоПоФормату(ПДоляФедерал);
		ОкрП002000041003 = ОкруглитьЧислоПоФормату(ПДоляСубъект);

		Если Не(ПДоляМестный < 0) Тогда
				ОкрП002000042003 = ОкруглитьЧислоПоФормату(ПДоляМестный);
				Иначе
				// Платежи в местный бюджет отсутствуют.
				ОкрП002000042003 = 0;		
				// Корректируем сумму платежей в субъект РФ
				ПДоляСубъект  = ПДоляСубъект + ПДоляМестный;
				ОкрП002000041003 = ОкруглитьЧислоПоФормату(ПДоляСубъект);
		КонецЕсли;

		мРаздел2.Области.П002000040003.Значение = ОкрП002000040003;
		мРаздел2.Области.П002000041003.Значение = ОкрП002000041003;

		//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000040003",ОкрП002000040003);
		//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000041003",ОкрП002000041003);

		// сумма налога на прибыль, причитающаяся
		// к уплате по сроку 28

		ОкрП002000043003 = мРаздел2.Области.П002000043003.Значение;
		ОкрП002000044003 = мРаздел2.Области.П002000044003.Значение;
		ОкрП002000045003 = мРаздел2.Области.П002000045003.Значение;

		ОкрП002000046003 = мРаздел2.Области.П002000046003.Значение;
		П002000046003 = ОкрП002000046003;

		П002000047003 = ?(П002000046003 <> 0, ОкруглитьЧислоПоФормату((ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000043003.Значение)
				+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000044003.Значение)
				+ ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000045003.Значение))
				/ П002000046003), 0);
		мРаздел2.Области.П002000047003.Значение = П002000047003;

		// Строка 470
		Если (мПериодичность = Перечисления.Периодичность.Квартал И Месяц(мДатаКонцаПериодаОтчета) = 9)
		   Или (мПериодичность = Перечисления.Периодичность.Месяц И Месяц(мДатаКонцаПериодаОтчета) = 11) Тогда
			
			// Для исключения погрешности при вычислениях
			// методом остаточной стоимости определим сумму налога,
			// подлежащей уплате в последнем отчетном периоде.
			П002000047003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000043003.Значение)
						  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000044003.Значение)
						  + ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000045003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000047003.Значение * (П002000046003 - 1));
			мРаздел2.Области.П002000047003.Значение = П002000047003;

		ИначеЕсли КонецДня(мДатаКонцаПериодаОтчета) = КонецДня(КонецГода(мДатаКонцаПериодаОтчета)) Тогда
			мРаздел2.Области.П002000047003.Значение = 0;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		// строка 010
		ОкрП002010002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010002003.Значение);
		ОкрП002010003003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010003003.Значение);
		ОкрП002010004003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010004003.Значение);
		ОкрП002010005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010005003.Значение);
			
		ОкрП002010001003 = ОкрП002010002003
				+ ОкрП002010003003
				+ ОкрП002010004003
				+ ОкрП002010005003;

		мРаздел2_Прил1.Области.П002010001003.Значение = ОкрП002010001003;
		// строка 110
		ОкрП002010006003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010006003.Значение);
		ОкрП002010007003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010007003.Значение);
		ОкрП002010008003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010008003.Значение);
		ОкрП002010009003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010009003.Значение);
		ОкрП002010010003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010010003.Значение);
		ОкрП002010010103 = ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010010103.Значение);

		ОкрП002010011003 = ОкрП002010001003
				+ ОкрП002010006003
				+ ОкрП002010007003
				+ ОкрП002010008003
				+ ОкрП002010009003
				+ ОкрП002010010003
				+ ОкрП002010010103;
		мРаздел2_Прил1.Области.П002010011003.Значение = ОкрП002010011003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда

		// строка 050
		ОкрП002020005103 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020005103.Значение);
		ОкрП002020005203 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020005203.Значение);
		ОкрП002020005303 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020005303.Значение);
		ОкрП002020005403 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020005403.Значение);
		ОкрП002020005003 = ОкрП002020005103 
				+ ОкрП002020005203
				+ ОкрП002020005303
				+ ОкрП002020005403;
		мРаздел2_Прил2.Области.П002020005003.Значение = ОкрП002020005003;

		// строка 060
		ОкрП002020007003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020007003.Значение);
		ОкрП002020008003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020008003.Значение);
		ОкрП002020009003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020009003.Значение);
		ОкрП002020010003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020010003.Значение);
		ОкрП002020006003 = ОкрП002020007003
				+ ОкрП002020008003
				+ ОкрП002020009003
				+ ОкрП002020010003;

		мРаздел2_Прил2.Области.П002020006003.Значение = ОкрП002020006003;

		ОкрП002020001003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020001003.Значение);
		ОкрП002020002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020002003.Значение);
		ОкрП002020003003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020003003.Значение);
		ОкрП002020004003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020004003.Значение);
		ОкрП002020005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020005003.Значение);
		ОкрП002020006003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020006003.Значение);
		ОкрП002020011003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020011003.Значение);
		ОкрП002020012003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020012003.Значение);
		ОкрП002020013003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020013003.Значение);
		ОкрП002020014003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020014003.Значение);
		ОкрП002020015003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020015003.Значение);
		ОкрП002020016003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020016003.Значение);
		ОкрП002020017003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020017003.Значение);
		ОкрП002020018003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020018003.Значение);
		ОкрП002020019003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020019003.Значение);
		ОкрП002020020003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020020003.Значение);
		ОкрП002020021003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020021003.Значение);
		ОкрП002020022003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020022003.Значение);
		ОкрП002020023003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020023003.Значение);
		ОкрП002020024003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020024003.Значение);
		ОкрП002020025003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020025003.Значение);
		ОкрП002020026003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020026003.Значение);
		ОкрП002020027003 = ОкрП002020001003 + 
				+ ОкрП002020002003
				+ ОкрП002020003003
				+ ОкрП002020004003
				+ ОкрП002020005003
				+ ОкрП002020006003
				+ ОкрП002020011003
				+ ОкрП002020012003
				+ ОкрП002020013003
				+ ОкрП002020014003
				+ ОкрП002020015003
				+ ОкрП002020016003
				+ ОкрП002020017003
				+ ОкрП002020018003
				+ ОкрП002020019003
				- ОкрП002020020003
				- ОкрП002020021003
				- ОкрП002020022003
				- ОкрП002020023003
				- ОкрП002020024003
				- ОкрП002020025003
				+ ОкрП002020026003;
		мРаздел2_Прил2.Области.П002020027003.Значение = ОкрП002020027003;
			
		ОкрП002020030003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020030003.Значение);
		ОкрП002020031003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил2.Области.П002020031003.Значение);

		мРаздел2_Прил2.Области.П002020029003.Значение = ОкрП002020030003 + ОкрП002020031003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда

		// строка 030
		ОкрП002030004003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030004003.Значение);
		ОкрП002030005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030005003.Значение);
		ОкрП002030006003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030006003.Значение);
		ОкрП002030007003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030007003.Значение);
		ОкрП002030008003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030008003.Значение);
		ОкрП002030003003 = ОкрП002030004003
			+ ОкрП002030005003
			+ ОкрП002030006003
			+ ОкрП002030007003
			+ ОкрП002030008003;
		мРаздел2_Прил4.Области.П002030003003.Значение = ОкрП002030003003;

		// Строка 010
		ОкрП002030002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030002003.Значение);
		ОкрП002030001003 = ОкрП002030002003 + ОкрП002030003003;
		мРаздел2_Прил4.Области.П002030001003.Значение = ОкрП002030001003;

		// Строка 090
		// строка 140 Листа 02
		ОкрП002000014003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000014003.Значение);
		// строка 120 Листа 05
		ОкрП002120012003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120012003.Значение);
		// строка 120 Листа 06
		ОкрП002130012003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130012003.Значение);
		// строка 230 Листа 07
		ОкрП002140023003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140023003.Значение);
		// строка 110 Листа 08
		ОкрП002150011003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150011003.Значение);

		// строка 590 Листа 09 - 15% 1
		ОкрП002160059003_1 = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160059003.Значение);
		// строка 590 Листа 09 - 15% 2
		ОкрП002160059003_2 = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160059003.Значение);

		ОкрП002160059003 = ОкрП002160059003_1 + ОкрП002160059003_2;

		ОкрП002030009003 = ОкрП002000014003
						   + ОкрП002120012003
						   + ОкрП002130012003
						   + ОкрП002140023003
						   + ОкрП002150011003;
		мРаздел2_Прил4.Области.П002030009003.Значение = ОкрП002030009003;
			
		// строка 010
		ОкрП002030001003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030001003.Значение);
		// строка 100
		ОкрП002030010003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030010003.Значение);
		// строка 050 Листа 02
		ОкрП002000005003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000005003.Значение);
			
		// строка 110
		ОкрП002030011003 = ОкрП002030001003 - ОкрП002030010003
						   - Мин(ОкрП002000005003
						   + (ОкрП002120012003 + ОкрП002130012003
						   + ОкрП002140023003 + ОкрП002150011003
						   + ОкрП002160059003), 0);

		мРаздел2_Прил4.Области.П002030011003.Значение = ОкрП002030011003;
			                               
		//	строка 020
		//		Предупреждение(мРаздел2_Прил4.Области.П002030002003.Значение);
		ОкрП002030002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030002003.Значение);
		// Строка 120
		ОкрП002030012003 = ОкрП002030002003 - Мин(ОкрП002030002003, ОкрП002030010003);
		мРаздел2_Прил4.Области.П002030012003.Значение = ОкрП002030012003;
			
		// Строка 130
		ОкрП002030013003 = ОкрП002030011003 - ОкрП002030012003;
		мРаздел2_Прил4.Области.П002030013003.Значение = ОкрП002030013003;

		Остаток = Макс(ОкрП002030003003 - ОкрП002030013003, 0); // перенесено убытка после 2002

		ОкрП002030004003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030004003.Значение);
		ОкрП002030005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030005003.Значение);
		ОкрП002030006003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030006003.Значение);
		ОкрП002030007003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030007003.Значение);
		ОкрП002030008003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030008003.Значение);

		Списывается = Мин(Остаток, ОкрП002030004003);
		// Строка 140
		ОкрП002030014003 = ОкрП002030004003 - Списывается;
		мРаздел2_Прил4.Области.П002030014003.Значение = ОкрП002030014003;
		Остаток       = Остаток - Списывается;

		// Строка 150
		Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(ОкрП002030005003));
		ОкрП002030015003 = ОкрП002030005003 - Списывается;
		мРаздел2_Прил4.Области.П002030015003.Значение = ОкрП002030015003;
		Остаток = Остаток - Списывается;
			
		// Строка 160
		Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(ОкрП002030006003));
		ОкрП002030016003 = ОкрП002030006003 - Списывается;
		мРаздел2_Прил4.Области.П002030016003.Значение = ОкрП002030016003;
		Остаток       = Остаток - Списывается;
			
		// Строка 170
		Списывается   = Мин(Остаток ,ОкруглитьЧислоПоФормату(ОкрП002030007003));
		ОкрП002030017003 = ОкрП002030007003 - Списывается;
		мРаздел2_Прил4.Области.П002030017003.Значение = ОкрП002030017003;
		Остаток       = Остаток - Списывается;
			
		// Строка 180
		Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(ОкрП002030008003));
		ОкрП002030018003 = ОкрП002030008003 - Списывается;
		мРаздел2_Прил4.Области.П002030018003.Значение = ОкрП002030018003;

		мРаздел2_Прил4.Области.П002030014001.ЗНачение = мРаздел2_Прил4.Области.П002030004001.Значение;
		мРаздел2_Прил4.Области.П002030015001.ЗНачение = мРаздел2_Прил4.Области.П002030005001.Значение;
		мРаздел2_Прил4.Области.П002030016001.ЗНачение = мРаздел2_Прил4.Области.П002030006001.Значение;
		мРаздел2_Прил4.Области.П002030017001.ЗНачение = мРаздел2_Прил4.Области.П002030007001.Значение;
		мРаздел2_Прил4.Области.П002030018001.ЗНачение = мРаздел2_Прил4.Области.П002030008001.Значение;

		П002030009003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030009003.ЗНачение);

		Если мДатаКонцаПериодаОтчета > '20020101' Тогда

			// Убыток получен в текущем налоговом периоде.
			Если П002030009003 < 0 Тогда

				ГодТекущегоПериода = Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг");

				Для Ном = 4 По 8 Цикл
						
					ГодЛист = мРаздел2_Прил4.Области["П00203001" + Строка(Ном) + "001"].Значение;

					Если РегламентированнаяОтчетность.ПустоеЗначение(ГодЛист) Тогда

						мРаздел2_Прил4.Области["П00203001" + Строка(Ном) + "001"].Значение = ГодТекущегоПериода;
						мРаздел2_Прил4.Области["П00203001" + Строка(Ном) + "003"].Значение = Модуль(П002030009003);

						Прервать;

					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		// Налоговую базу по всем обособленным подразделениям определяем по строке 040 
		// по всем дополнительным листам Приложения N 5а к Листу 02
		ИтНалоговаяБазаОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050004003"));
		// Налоговую базу исходя из доли и льгот по всем обособленным подразделениям определяем
		// по строкам 050 - 060 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтНалоговаяБазаСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050005003"));
		ИтНалоговаяБазаМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050006003"));
			
		// Сумму налога по всем обособленным подразделениям определяем
		// по строкам 090 - 100 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтСуммаНалогаСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050009003"));
		ИтСуммаНалогаМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050010003"));
			
		// Начисленную сумму налога по всем обособленным подразделениям определяем
		// по строкам 110 - 120 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтСуммаНачислСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050011003"));
		ИтСуммаНачислМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050012003"));
			 
		// Выплаченную за пределами РФ сумму налога по всем обособленным подразделениям определяем
		// по строкам 130 - 140 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтСуммаВыплачСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050013003"));
		ИтСуммаВыплачМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050014003"));
			      
		// Налог с неучтенных ранее сумм по всем обособленным подразделениям определяем
		// по строкам 190 - 200 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтНалогНеучтенСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050019003"));
		ИтНалогНеучтенМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050020003"));
			     
		// Сумма ежемесячных авансовых платежей по всем обособленным подразделениям определяем
		// по строкам 220 - 230 по всем дополнительным листам Приложения N 5а к Листу 02
		ИтАвансПлатежиСубъектОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050022003"));
		ИтАвансПлатежиМестныйОП = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницам("П002050023003"));

		ОкрП002040002003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040002003.Значение);
		ОкрП002040002005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040002005.Значение);

		ОкрП002040004004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040004004.Значение);
		Если ИтНалоговаяБазаОП <> 0 Тогда
			// Организация имеет обособленные подразделения.
			// Расчет показателей по организации без входящих в нее ОП выполним,
			// используя данные по ОП в Приложении 5а к Листу 02.
			ОкрП002040004004 = ОкруглитьЧислоПоФормату(ОкрП002040002003) - ИтНалоговаяБазаОП;
			мРаздел2_Прил5.Области.П002040004004.Значение = ОкрП002040004004;
			ОкрП002040003004 = ? (ОкрП002040002003 <> 0, (ОкрП002040004004 / ОкруглитьЧислоПоФормату(ОкрП002040002003)) * 100, 0);
			мРаздел2_Прил5.Области.П002040003004.Значение = ОкрП002040003004;
		Иначе
			мРаздел2_Прил5.Области.П002040004004.Значение = 0;
			мРаздел2_Прил5.Области.П002040003004.Значение = 0;
		КонецЕсли;

		// Строка 040, гр. 5
		П002040003005 = мРаздел2_Прил5.Области.П002040003005.Значение;
		ОкрП002040004005 = ОкруглитьЧислоПоФормату(ОкрП002040002005 * П002040003005 / 100 );
		мРаздел2_Прил5.Области.П002040004005.Значение = ОкрП002040004005;

		// Строки 050 - 060
		ОкрП002040005004 = мРаздел2_Прил5.Области.П002040005004.Значение;
		ОкрП002040006004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040006004.Значение);
		ОкрП002040005003 = ОкруглитьЧислоПоФормату(ОкрП002040005004) + ИтНалоговаяБазаСубъектОП;
		мРаздел2_Прил5.Области.П002040005003.Значение = ОкрП002040005003;
			
		ОкрП002040006003 = ОкрП002040006004 + ИтНалоговаяБазаМестныйОП;
		мРаздел2_Прил5.Области.П002040006003.Значение = ОкрП002040006003;

		// Строки 090 - 100
		П002040007004 = мРаздел2_Прил5.Области.П002040007004.Значение;
		ОкрП002040008004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040008004.Значение);
		ОкрП002040009004 = ОкруглитьЧислоПоФормату(ОкрП002040005004 * П002040007004 / 100);
		мРаздел2_Прил5.Области.П002040009004.Значение = ОкрП002040009004;

		//ОкрП002040010004 = ОкруглитьЧислоПоФормату(ОкрП002040006004 * ОкрП002040008004 / 100);
		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.
		//мРаздел2_Прил5.Области.П002040010004.Значение = ОкрП002040010004;
		ОкрП002040010004 = мРаздел2_Прил5.Области.П002040010004.Значение;

		ОкрП002040009003 = ОкрП002040009004 + ИтСуммаНалогаСубъектОП;
		мРаздел2_Прил5.Области.П002040009003.Значение = ОкрП002040009003;
		//ОкрП002040010003 = ОкрП002040010004 + ИтСуммаНалогаМестныйОП;

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.
		//мРаздел2_Прил5.Области.П002040010003.Значение = ОкрП002040010003;
		ОкрП002040010003 = мРаздел2_Прил5.Области.П002040010003.Значение;

		// Строки 110 - 120	
		ОкрП002040011004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040011004.Значение);
		ОкрП002040012004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040012004.Значение);
		ОкрП002040011003 = ОкруглитьЧислоПоФормату(ОкрП002040011004) + ИтСуммаНачислСубъектОП;
		мРаздел2_Прил5.Области.П002040011003.Значение = ОкрП002040011003;

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.

		//ОкрП002040012003 = ОкруглитьЧислоПоФормату(ОкрП002040012004) + ИтСуммаНачислМестныйОП;
		//мРаздел2_Прил5.Области.П002040012003.Значение = ОкрП002040012003;

		// Строки 130 - 140
		ОкрП002040013004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040013004.Значение);
		ОкрП002040014004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040014004.Значение);
		ОкрП002040013003 = ОкруглитьЧислоПоФормату(ОкрП002040013004) + ИтСуммаВыплачСубъектОП;
		мРаздел2_Прил5.Области.П002040013003.Значение = ОкрП002040013003;

		// В приложении 5:
		// строка 80 - ставка налога в местный бюджет указывается вручную,
		// если она не заполнена, не вычисляются строки 100, 160, 180
		// Строки 080, 120, 140, 230 - не заполяются.

		//ОкрП002040014003 = ОкруглитьЧислоПоФормату(ОкрП002040014004) + ИтСуммаВыплачМестныйОП;
		//мРаздел2_Прил5.Области.П002040014003.Значение = ОкрП002040014003;
			
		// К ДОПЛАТЕ
		//
		// Строка 150
		ОкрП002040009005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040009005.Значение);
		ОкрП002040011005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040011005.Значение);
		ОкрП002040013005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040013005.Значение);
		ОкрП002040015003 = Макс(ОкрП002040009003 - ОкруглитьЧислоПоФормату(ОкрП002040011003) - ОкруглитьЧислоПоФормату(ОкрП002040013003), 0);
		мРаздел2_Прил5.Области.П002040015003.Значение = ОкрП002040015003;
		ОкрП002040015004 = Макс(ОкрП002040009004 - ОкруглитьЧислоПоФормату(ОкрП002040011004) - ОкруглитьЧислоПоФормату(ОкрП002040013004), 0);
		мРаздел2_Прил5.Области.П002040015004.Значение = ОкрП002040015004;
		ОкрП002040015005 = Макс(ОкрП002040009005 - ОкруглитьЧислоПоФормату(ОкрП002040011005) - ОкруглитьЧислоПоФормату(ОкрП002040013005), 0);
		мРаздел2_Прил5.Области.П002040015005.Значение = ОкрП002040015005;
			
		// Строка 160
		ОкрП002040010005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040010005.Значение);
		ОкрП002040012005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040012005.Значение);
		ОкрП002040014005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040014005.Значение);

		// В приложении 5:
		// строка 80 - ставка налога в местный бюджет указывается вручную,
		// если она не заполнена, не вычисляются строки 100, 160, 180
		// Строки 080, 120, 140, 230 - не заполяются.

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.

		//мРаздел2_Прил5.Области.П002040016003.Значение = ОкрП002040016003;
		// мРаздел2_Прил5.Области.П002040016004.Значение = ОкрП002040016004;
		// мРаздел2_Прил5.Области.П002040016005.Значение = ОкрП002040016005;
			                        
		// К УМЕНЬШЕНИЮ
		//
		// Строка 170
		ОкрП002040011005 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040014004.Значение);
		ОкрП002040017003 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040011003) 
					 + ОкруглитьЧислоПоФормату(ОкрП002040013003) - ОкрП002040009003, 0);
		мРаздел2_Прил5.Области.П002040017003.Значение = ОкрП002040017003;
		ОкрП002040017004 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040011004) 
					 + ОкруглитьЧислоПоФормату(ОкрП002040013004) - ОкрП002040009004, 0);
		мРаздел2_Прил5.Области.П002040017004.Значение = ОкрП002040017004;
		ОкрП002040017005 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040011005)
					 + ОкруглитьЧислоПоФормату(ОкрП002040013005) - ОкрП002040009005, 0);
		мРаздел2_Прил5.Области.П002040017005.Значение = ОкрП002040017005;

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.

		// Строка 180
		//ОкрП002040018003 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040012003)
		//			  + ОкруглитьЧислоПоФормату(ОкрП002040014003) - ОкрП002040010003, 0);

		//мРаздел2_Прил5.Области.П002040018003.Значение = ОкрП002040018003;

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.

		//ОкрП002040018004 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040012004)
		//			  + ОкруглитьЧислоПоФормату(ОкрП002040014004) - ОкрП002040010004, 0);
		//мРаздел2_Прил5.Области.П002040018004.Значение = ОкрП002040018004;

		//> В приложении 5:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполяются.
		//ОкрП002040018005 = Макс(ОкруглитьЧислоПоФормату(ОкрП002040012005)
		//			  + ОкруглитьЧислоПоФормату(ОкрП002040014005) - ОкрП002040010005, 0);
		//мРаздел2_Прил5.Области.П002040018005.Значение = ОкрП002040018005;

		// Строки 190 - 200
		ОкрП002040019004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040019004.Значение);
		ОкрП002040020004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040020004.Значение);
		ОкрП002040019003 = ОкруглитьЧислоПоФормату(ОкрП002040019004) + ИтНалогНеучтенСубъектОП;
		мРаздел2_Прил5.Области.П002040019003.Значение = ОкрП002040019003;
		ОкрП002040020003 = ОкруглитьЧислоПоФормату(ОкрП002040020004) + ИтНалогНеучтенМестныйОП;
		мРаздел2_Прил5.Области.П002040020003.Значение = ОкрП002040020003;

		// Строки 220 - 230
		ОкрП002040022004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040022004.Значение);
		ОкрП002040023004 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040023004.Значение);
		ОкрП002040022003 = ОкруглитьЧислоПоФормату(ОкрП002040022004) + ИтАвансПлатежиСубъектОП;
		мРаздел2_Прил5.Области.П002040022003.Значение = ОкрП002040022003;

		// В приложении 5:
		// строка 80 - ставка налога в местный бюджет указывается вручную,
		// если она не заполнена, не вычисляются строки 100, 160, 180
		// Строки 080, 120, 140, 230 - не заполяются.

		//ОкрП002040023003 = ОкруглитьЧислоПоФормату(ОкрП002040023004) + ИтАвансПлатежиМестныйОП; 
		//мРаздел2_Прил5.Области.П002040023003.Значение = ОкрП002040023003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5а" Тогда

		// Налоговую базу по организации в целом определяем по гр. 3 строке 020 Приложения N 5
		НалоговаяБазаВсего = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040002003.Значение);

		Если НалоговаяБазаВсего <> 0 Тогда
			мРаздел2_Прил5а.Области["П002050004003"].Защита = Истина;
			ЭлементыФормы["ПолеТабличногоДокументаЛист02_Прил5а"].Области["П002050004003"].ЦветФона = ЦветЗаполняетсяАвтоАрифметика;
			// Строка 040
			ОкрП002050003003 = мРаздел2_Прил5а.Области.П002050003003.Значение;
			ОкрП002050004003 = ОкруглитьЧислоПоФормату(НалоговаяБазаВсего * ОкрП002050003003 / 100);
			мРаздел2_Прил5а.Области.П002050004003.Значение = ОкрП002050004003;

			Для Инд = 0 По мСтруктураВариантыЗаполнения.Лист02_Прил5а.Количество() - 1 Цикл

				НайденнаяСтрока = мСтруктураВариантыЗаполнения.Лист02_Прил5а[Инд].Найти("П002050004003", "КодПоказателя");

				Если НайденнаяСтрока = Неопределено Тогда
					// Нужно добавить
					НовСтр = мСтруктураВариантыЗаполнения.Лист02_Прил5а[Инд].Добавить();
					НовСтр.КодПоказателя = "П002050004003";
					НовСтр.ВариантЗаполнения = 4;
					НовСтр.ЗначениеАвто = 0;
					НовСтр.Дельта = 0;
					НовСтр.Комментарий = "";
					НовСтр.КодПоказателяПоСтруктуре = "";
				Иначе
					НайденнаяСтрока.ВариантЗаполнения = 4;
				КонецЕсли;

			КонецЦикла;

		Иначе
			мРаздел2_Прил5а.Области["П002050004003"].Защита = Ложь;
			ЭлементыФормы["ПолеТабличногоДокументаЛист02_Прил5а"].Области["П002050004003"].ЦветФона = ЦветЗаполняетсяОднозначноВручную;

			Для Инд = 0 По мСтруктураВариантыЗаполнения.Лист02_Прил5а.Количество() - 1 Цикл

				НайденнаяСтрока = мСтруктураВариантыЗаполнения.Лист02_Прил5а[Инд].Найти("П002050004003", "КодПоказателя");

				Если НайденнаяСтрока = Неопределено Тогда
					// Нужно добавить
					НовСтр = мСтруктураВариантыЗаполнения.Лист02_Прил5а[Инд].Добавить();
					НовСтр.КодПоказателя = "П002050004003";
					НовСтр.ВариантЗаполнения = 0;
					НовСтр.ЗначениеАвто = 0;
					НовСтр.Дельта = 0;
					НовСтр.Комментарий = "";
					НовСтр.КодПоказателяПоСтруктуре = "";
				Иначе
					НайденнаяСтрока.ВариантЗаполнения = 0;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		// Строка 090
		ОкрП002050005003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050005003.Значение);
		П002050007003 = мРаздел2_Прил5а.Области.П002050007003.Значение;
			
		ОкрП002050009003 = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(ОкрП002050005003) 
		   * П002050007003 / 100);
		мРаздел2_Прил5а.Области.П002050009003.Значение = ОкрП002050009003;
		// Строка 100
		ОкрП002050006003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050006003.Значение);
		ОкрП002050008003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050008003.Значение);
		ОкрП002050010003 = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(ОкрП002050006003) 
		   * ОкрП002050008003 / 100);

		// Строка 100 не автовычисляется!!!

		//> В приложении 5а:
		//> строка 80 - ставка налога в местный бюджет указывается вручную,
		//> если она не заполнена, не вычисляются строки 100, 160, 180
		//> Строки 080, 120, 140, 230 - не заполняются.
		//мРаздел2_Прил5а.Области.П002050010003.Значение = ОкрП002050010003;

			          
		// К ДОПЛАТЕ
		//
		// Строка 150
		ОкрП002050011003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050011003.Значение);
		ОкрП002050013003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050013003.Значение);
		ОкрП002050015003 = Макс(ОкрП002050009003 - ОкруглитьЧислоПоФормату(ОкрП002050011003)
		   - ОкруглитьЧислоПоФормату(ОкрП002050013003), 0);
		мРаздел2_Прил5а.Области.П002050015003.Значение = ОкрП002050015003;
			
		// Строка 160
		ОкрП002050012003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050012003.Значение);
		ОкрП002050014003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5а.Области.П002050014003.Значение);
		ОкрП002050016003 = Макс(ОкрП002050010003 - ОкруглитьЧислоПоФормату(ОкрП002050012003)
		   - ОкруглитьЧислоПоФормату(ОкрП002050014003), 0);

		//В приложении 5а:
		//строка 80 - ставка налога в местный бюджет указывается вручную,
		//если она не заполнена, не вычисляются строки 100, 160, 180
		//Строки 080, 120, 140, 230 - не заполняются.

		//мРаздел2_Прил5а.Области.П002050016003.Значение = ОкрП002050016003;
			
		// К УМЕНЬШЕНИЮ
		//
		// Строка 170
		ОкрП002050017003 = Макс(ОкруглитьЧислоПоФормату(ОкрП002050011003)
		   + ОкруглитьЧислоПоФормату(ОкрП002050013003) - ОкрП002050009003, 0);
		мРаздел2_Прил5а.Области.П002050017003.Значение = ОкрП002050017003;


		//В приложении 5а:
		//строка 80 - ставка налога в местный бюджет указывается вручную,
		//если она не заполнена, не вычисляются строки 100, 160, 180
		//Строки 080, 120, 140, 230 - не заполняются.

		//мРаздел2_Прил5а.Области.П002050018003.Значение = ОкрП002050018003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил6" Тогда

		// Строка 010
		ОкрП002060001003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060002003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060009003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел2_Прил6.Области.П002060010003.Значение);
		мРаздел2_Прил6.Области.П002060001003.Значение = ОкрП002060001003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил7" Тогда

		// Строка 010
		ОкрП002070001003 = ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070003003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070005003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070006003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070007003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070008003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070009003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070010003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил7.Области.П002070011003.Значение);
		мРаздел2_Прил7.Области.П002070001003.Значение = ОкрП002070001003;

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002000004003", ОкрП002070001003);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделА" Тогда
		// Строка 020
		ОкрП002080002003 = ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080003003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080004003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080005003.Значение)
				  + ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080005103.Значение);
		мРаздел3_А.Области.П002080002003.Значение = ОкрП002080002003;
		// Строка 060
		ОкрП002080006003 = ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080001003.Значение) 
				  - мРаздел3_А.Области.П002080002003.Значение;

		мРаздел3_А.Области.П002080006003.Значение = ОкрП002080006003;

		// Строка 090
		ОкрП002080009003 = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080007003.Значение) * мРаздел3_А.Области.П002080008003.Значение / 100); 
		мРаздел3_А.Области.П002080009003.Значение = ОкрП002080009003;
			             
		// Строка 100
		ОкрП002080010003 = ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080011003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080012003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел3_А.Области.П002080013003.Значение)
					  + РасчетСуммМногострочнойЧасти("П002080014003", 3);
		мРаздел3_А.Области.П002080010003.Значение = ОкрП002080010003;

		// Строка 150
		ОкрП002080015003 = Макс(мРаздел3_А.Области.П002080009003.Значение
					  - мРаздел3_А.Области.П002080010003.Значение, 0);
		мРаздел3_А.Области.П002080015003.Значение = ОкрП002080015003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1" Тогда

	// Строка 040
		ОкрП002090004003 = ОкруглитьЧислоПоФормату(
		ОкруглитьЧислоПоФормату(мРаздел3_БВ1.Области.П002090002003.Значение)
		   * мРаздел3_БВ1.Области.П002090003003.Значение / 100 );
		мРаздел3_БВ1.Области.П002090004003.Значение = ОкрП002090004003;

		// Строка 060
		ОкрП002090006003 = Макс(мРаздел3_БВ1.Области.П002090004003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел3_БВ1.Области.П002090005003.Значение), 0);
		мРаздел3_БВ1.Области.П002090006003.Значение = ОкрП002090006003;
			
		// Строка 070
		ОкрП002090007003 = Макс(ОкруглитьЧислоПоФормату(мРаздел3_БВ1.Области.П002090005003.Значение)
		   - мРаздел3_БВ1.Области.П002090004003.Значение, 0);
		мРаздел3_БВ1.Области.П002090007003.Значение = ОкрП002090007003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2" Тогда

		// Строка 040
		ОкрП002090004003 = ОкруглитьЧислоПоФормату(
		ОкруглитьЧислоПоФормату(мРаздел3_БВ2.Области.П002090002003.Значение)
		   * мРаздел3_БВ2.Области.П002090003003.Значение / 100 );
		мРаздел3_БВ2.Области.П002090004003.Значение = ОкрП002090004003;

		// Строка 060
		ОкрП002090006003 = Макс(мРаздел3_БВ2.Области.П002090004003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел3_БВ2.Области.П002090005003.Значение), 0);
		мРаздел3_БВ2.Области.П002090006003.Значение = ОкрП002090006003;

		// Строка 070
		ОкрП002090007003 = Макс(ОкруглитьЧислоПоФормату(мРаздел3_БВ2.Области.П002090005003.Значение)
		   - мРаздел3_БВ2.Области.П002090004003.Значение, 0);
		мРаздел3_БВ2.Области.П002090007003.Значение = ОкрП002090007003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист04_РазделА" Тогда
		
		// Строка 030
		ОкрП002100003003 = ОкруглитьЧислоПоФормату(мРаздел4_А.Области.П002100001003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел4_А.Области.П002100002003.Значение);
		мРаздел4_А.Области.П002100003003.Значение = ОкрП002100003003;


		// Строка 090
		ОкрП002100009003 = ОкруглитьЧислоПоФормату(мРаздел4_А.Области.П002100003003.Значение 
		   * мРаздел4_А.Области.П002100008003.Значение / 100);
		мРаздел4_А.Области.П002100009003.Значение = ОкрП002100009003;

		// Строка 110
		ОкрП002100011003 = Макс(мРаздел4_А.Области.П002100009003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел4_А.Области.П002100010003.Значение), 0);
		мРаздел4_А.Области.П002100011003.Значение = ОкрП002100011003;

		// Строка 120
		ОкрП002100012003 = Макс(ОкруглитьЧислоПоФормату(мРаздел4_А.Области.П002100010003.Значение)
		   - мРаздел4_А.Области.П002100009003.Значение, 0);
		мРаздел4_А.Области.П002100012003.Значение = ОкрП002100012003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист04_РазделБ" Тогда
		
		// Строка 030
		ОкрП002110003003 = ОкруглитьЧислоПоФормату(ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110001003.Значение) * мРаздел4_Б.Области.П002110002003.Значение / 100);
		мРаздел4_Б.Области.П002110003003.Значение = ОкрП002110003003;
			
		// Строка 060
		ОкрП002110006003 = Макс(мРаздел4_Б.Области.П002110003003.Значение
				- ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110004003.Значение)
				- ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110005003.Значение), 0 );
		мРаздел4_Б.Области.П002110006003.Значение = ОкрП002110006003;
			
		// Строка 070
		ОкрП002110007003 = Макс(-мРаздел4_Б.Области.П002110003003.Значение
			   + ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110004003.Значение)
			   + ОкруглитьЧислоПоФормату(мРаздел4_Б.Области.П002110005003.Значение), 0 );
		мРаздел4_Б.Области.П002110007003.Значение = ОкрП002110007003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист05" Тогда

		// Строка 040
		ОкрП002120004003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120001003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120002003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120003003.Значение);
		мРаздел5.Области.П002120004003.Значение = ОкрП002120004003;
			               
		// Строка 070				  
		ОкрП002120007003 = Макс( мРаздел5.Области.П002120004003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120005003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120006003.Значение), 0 );
		мРаздел5.Области.П002120007003.Значение = ОкрП002120007003;
			
		// Строка 080
		ОкрП002120008003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120007003.Значение * 0.3);
		мРаздел5.Области.П002120008003.Значение = ОкрП002120008003;

		// Строка 110
		ОкрП002120011003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120009003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120010003.Значение);
		мРаздел5.Области.П002120011003.Значение = ОкрП002120011003;

		// Строка 120
		ОкрП002120012003 = мРаздел5.Области.П002120007003.Значение 
		  - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120010003.Значение);
		мРаздел5.Области.П002120012003.Значение = ОкрП002120012003;
	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист06" Тогда

		// Строка 040
		ОкрП002130004003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130001003.Значение) 
		   + ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130002003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130003003.Значение);
		мРаздел6.Области.П002130004003.Значение = ОкрП002130004003;

		// Строка 070
		ОкрП002130007003 = Макс(мРаздел6.Области.П002130004003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130005003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130006003.Значение), 0);
		мРаздел6.Области.П002130007003.Значение = ОкрП002130007003;

		// Строка 080
		ОкрП002130008003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130007003.Значение * 0.3);
		мРаздел6.Области.П002130008003.Значение = ОкрП002130008003;
			
		// Строка 100
		ОкрП002130010003 = Мин( ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130008003.Значение), ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130009003.Значение) );
		мРаздел6.Области.П002130010003.Значение = ОкрП002130010003;
			
		// Строка 110
		ОкрП002130011003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130009003.Значение)
		   - мРаздел6.Области.П002130010003.Значение;
		мРаздел6.Области.П002130011003.Значение = ОкрП002130011003;
			
		// Строка 120
		ОкрП002130012003 = мРаздел6.Области.П002130007003.Значение
		   - мРаздел6.Области.П002130010003.Значение;
		мРаздел6.Области.П002130012003.Значение = ОкрП002130012003;
			
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист07" Тогда

		// Строка 010
		ОкрП002140001003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140005003.Значение);
		мРаздел7.Области.П002140001003.Значение = ОкрП002140001003;

		// Строка 060
		ОкрП002140006003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140007003.Значение) + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140009003.Значение) + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140010003.Значение); 
		мРаздел7.Области.П002140006003.Значение = ОкрП002140006003;

		// Строка 110
		ОкрП002140011003 = мРаздел7.Области.П002140001003.Значение - мРаздел7.Области.П002140006003.Значение;
		мРаздел7.Области.П002140011003.Значение = ОкрП002140011003;
			                
		// Строка 200
		ОкрП002140020003 = мРаздел7.Области.П002140011003.Значение - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140015003.Значение) - мРаздел7.Области.П002140016003.Значение;
		мРаздел7.Области.П002140020003.Значение = ОкрП002140020003;

		// Строка 220
		ОкрП002140022003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140020003.Значение) + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140021003.Значение);
		мРаздел7.Области.П002140022003.Значение = ОкрП002140022003;

		// Строка 230
		ОкрП002140023003 = мРаздел7.Области.П002140011003.Значение 
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140017003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140018003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140014003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140019003.Значение);
		мРаздел7.Области.П002140023003.Значение = ОкрП002140023003;

		// Строка 120
		ОкрП002140012003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140002003.Значение)
						  + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140003003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140007003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140008003.Значение);
		мРаздел7.Области.П002140012003.Значение = ОкрП002140012003;

		// Строка 130
		ОкрП002140013003 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140004003.Значение)
						   + ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140005003.Значение)
						   - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140009003.Значение)
						   - ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140010003.Значение);
		мРаздел7.Области.П002140013003.Значение = ОкрП002140013003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист08" Тогда
		// строка 040
		// Итого прибыль (убыток) (строка 010 + строка 020 - строка 030)
		ОкрП002150001003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150001003.Значение);
		ОкрП002150002003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150002003.Значение);
		ОкрП002150003003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150003003.Значение);
		ОкрП002150004003 = ОкрП002150001003 + ОкрП002150002003 - ОкрП002150003003;
		мРаздел8.Области.П002150004003.Значение = ОкрП002150004003;

		// строка 060
		//Налоговая база (строка 040 - строка 050)
		ОкрП002150005003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150005003.Значение);
		ОкрП002150006003 = ОкрП002150004003 - ОкрП002150005003;
		мРаздел8.Области.П002150006003.Значение = ОкрП002150006003;

		// строка 070
		// 30% от налоговой базы (строка 060 х 0,3)
		ОкрП002150007003 = ОкрП002150006003 * 0.3;
		мРаздел8.Области.П002150007003.Значение = ОкрП002150007003;

		// строка 100
		//Сумма неучтенного убытка, подлежащего переносу на будущий отчетный (налоговый) период.
		//Исходящее сальдо (строка 080 - строка 090)
		ОкрП002150008003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150008003.Значение);
		ОкрП002150009003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150009003.Значение);
		ОкрП002150010003 = ОкрП002150008003 - ОкрП002150009003;
		мРаздел8.Области.П002150010003.Значение = ОкрП002150010003;

		// строка 110
		//Итого доходов от реализации (строка 010 + сумма строк с 060 по 101)
		ОкрП002150006003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150006003.Значение);
		ОкрП002150009003 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150009003.Значение);
		ОкрП002150011003 = ОкрП002150006003 - ОкрП002150009003;
		мРаздел8.Области.П002150011003.Значение = ОкрП002150011003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_0" Тогда
		// Строка 010
		ОкрП002160001003 = ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160002003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160009003.Значение);
		мРаздел9_0.Области.П002160001003.Значение = ОкрП002160001003;

		Знач1 = Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение) 
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160018003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160009003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160019003.Значение))
				 + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160007003.Значение)
				 + (ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160008003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение));

		// Строки 120 - 150			   
		//мРаздел9_0.Области.П002160012003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160003003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160017003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160011003.Значение), 0);
		//мРаздел9_0.Области.П002160013003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160005003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160018003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160011003.Значение), 0);
		мРаздел9_0.Области.П002160014003.Значение = ?(Знач1 <> 0,
		(ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение)
		/ Знач1)
		* ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение)
		, 0);

		мРаздел9_0.Области.П002160028003.Значение = ?(Знач1 <> 0,
		   ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение) / Знач1, 0);

		// мРаздел9_0.Области.П002160029003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160007003.Значение) / Знач2, 0);

		мРаздел9_0.Области.П002160030003.Значение = ?(Знач1 <> 0,
			  ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
			* ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение) / Знач1, 0);

		мРаздел9_0.Области.П002160042003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160014003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160028003.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_1" Тогда

		// Строка 010
		ОкрП002160001003 = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение);
		мРаздел9_1.Области.П002160001003.Значение = ОкрП002160001003;

		Знач1 = Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение) 
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение))
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение) // По ставке 9%
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160007003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160008003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение) // По ставке 9%
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение));

		// Строки 120 - 150
		мРаздел9_1.Области.П002160012003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение), 0);
		мРаздел9_1.Области.П002160013003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение), 0);

		мРаздел9_1.Области.П002160014003.Значение = ?(Знач1 <> 0,
		(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
		/ Знач1)
		* ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение), 0);

		//мРаздел9_1.Области.П002160014003.Значение = мРаздел9_1.Области.П002160014003.Значение
		//+  ?(Знач1 <> 0,
		//(ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение) // 9%
		/// Знач1)
		//* ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение), 0);

		мРаздел9_1.Области.П002160015003.Значение = ?
		(Знач1 <> 0, 
		((ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение)
		- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение))
		/ Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160011003.Значение), 0);

		// Строка 160
		ОкрП002160016003 = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение);
		мРаздел9_1.Области.П002160016003.Значение = ОкрП002160016003;

		// Строки 210 - 230
		мРаздел9_1.Области.П002160021003.Значение = ?(мРаздел9_1.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160020003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение) / мРаздел9_1.Области.П002160016003.Значение, 0);
		мРаздел9_1.Области.П002160022003.Значение = ?(мРаздел9_1.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160020003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение) / мРаздел9_1.Области.П002160016003.Значение, 0);
		мРаздел9_1.Области.П002160023003.Значение = ?(мРаздел9_1.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160020003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160021003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160022003.Значение), 0);

		//Знач2 = мРаздел9_1.Области.П002160001003.Значение - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение);
		Знач2 = Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение))
		   + Модуль(
			 ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение)
		   ) // скобка от модуля
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение) // По ставке 9%
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160007003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160008003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение) // по ставке 9%
		   + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение))
;
		// Строки 260 - 310
		мРаздел9_1.Области.П002160026003.Значение = ?(Знач2 <> 0,
		   ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * (
		ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение)
		) / Знач2, 0);

		// Было
		//мРаздел9_1.Области.П002160027003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение) / Знач2, 0);

		// Стало
		мРаздел9_1.Области.П002160027003.Значение = ?(Знач2 <> 0,
			  ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * (ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
		   +  ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
		   -  ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение)
			 ) / Знач2, 0);

		мРаздел9_1.Области.П002160028003.Значение = ?(Знач2 <> 0,
			 ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение) // По ставке 15
		   / Знач2, 0)
		;

		//мРаздел9_1.Области.П002160028003.Значение = мРаздел9_1.Области.П002160028003.Значение
		//+ ?(Знач2 <> 0,
		//	 + ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		//   * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160006003.Значение) // По ставке 9
		//   / Знач2, 0)
		//;

		мРаздел9_1.Области.П002160029003.Значение = ?(Знач2 <> 0,
			 ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160007003.Значение) / Знач2, 0);

		мРаздел9_1.Области.П002160030003.Значение = ?(Знач2 <> 0,
			 ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160008003.Значение) // По ставке 15%
		   / Знач2, 0);

		//мРаздел9_1.Области.П002160030003.Значение = мРаздел9_1.Области.П002160030003.Значение
		//   + ?(Знач2 <> 0,
		//   ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		//   * ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160008003.Значение) // По ставке 9%
		//   / Знач2, 0);

		мРаздел9_1.Области.П002160031003.Значение = ?(Знач2 <> 0,
			 ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160025003.Значение)
		   * (ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение))
		   / Знач2, 0);

		// Строка 320 
		// прибыль (убыток)
		мРаздел9_1.Области.П002160032003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160002003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160003003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160012003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160017003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160021003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160026003.Значение);

		// Строка 330
		мРаздел9_1.Области.П002160033003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160034003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160034103.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160035003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160036003.Значение);
			
		// Строка 370                 
		мРаздел9_1.Области.П002160037003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160004003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160005003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160013003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160018003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160022003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160027003.Значение);

		// Строка 380
		мРаздел9_1.Области.П002160038003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160039003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160040003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160041003.Значение);

		// Строка 420
		// доход в виде процентов по гос. ценным бумагам
		мРаздел9_1.Области.П002160042003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160006003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160014003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160028003.Значение);
			
		// Строка 430
		// убыток от осуществления других инвестиций
		мРаздел9_1.Области.П002160043003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение)
					   - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение)
					   - мРаздел9_1.Области.П002160023003.Значение;
			
		Если Не(ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160043003.Значение) < 0) Тогда
			// Получена прибыль от осуществления других инвестиций
			мРаздел9_1.Области.П002160043003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160009003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160015003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160019003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160031003.Значение)
						  - мРаздел9_1.Области.П002160023003.Значение;
		КонецЕсли;

		// Строка 440
		мРаздел9_1.Области.П002160044003.Значение = Макс( мРаздел9_1.Области.П002160032003.Значение - мРаздел9_1.Области.П002160033003.Значение, 0);
			
		// Строка 450
		мРаздел9_1.Области.П002160045003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160044003.Значение * 0.3);
			              
		// Строка 470
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_1.Области.П002160047003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160045003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160046003.Значение) );
			                   
		// Строка 480
		мРаздел9_1.Области.П002160048003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160046003.Значение) - мРаздел9_1.Области.П002160047003.Значение;

		// Строка 490
		мРаздел9_1.Области.П002160049003.Значение = Макс( мРаздел9_1.Области.П002160037003.Значение - мРаздел9_1.Области.П002160038003.Значение, 0);

		// Строка 500
		мРаздел9_1.Области.П002160050003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160049003.Значение * 0.3);
			
		// Строка 520
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_1.Области.П002160052003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160050003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160051003.Значение) );

		// Строка 530
		мРаздел9_1.Области.П002160053003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160051003.Значение) - мРаздел9_1.Области.П002160052003.Значение;

		// Строка 540
		мРаздел9_1.Области.П002160054003.Значение = Макс( мРаздел9_1.Области.П002160043003.Значение - ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160043103.Значение), 0);

		// Строка 550
		мРаздел9_1.Области.П002160055003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160054003.Значение * 0.3);
			
		// Строка 570
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_1.Области.П002160057003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160055003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160056003.Значение) );	
			
		// Строка 580
		мРаздел9_1.Области.П002160058003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_1.Области.П002160056003.Значение) - мРаздел9_1.Области.П002160057003.Значение;
			
		// Строка 590
		мРаздел9_1.Области.П002160059003.Значение = Макс(мРаздел9_1.Области.П002160044003.Значение - мРаздел9_1.Области.П002160047003.Значение + мРаздел9_1.Области.П002160049003.Значение - мРаздел9_1.Области.П002160052003.Значение + мРаздел9_1.Области.П002160054003.Значение - мРаздел9_1.Области.П002160057003.Значение, 0);	


	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_2" Тогда
	// По доходам, полученным от инвестирования средств пенсионных накоплений
	// 9 %
		// Строка 010
		// Строка 010
		ОкрП002160001003 = ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160002003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160009003.Значение);
		мРаздел9_2.Области.П002160001003.Значение = ОкрП002160001003;

		Знач1 = Модуль(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение) 
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160009003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160019003.Значение))
				 + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160007003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160008003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160008003.Значение);

		// Строки 110 - 150 - не заполняются
		//мРаздел9_2.Области.П002160014003.Значение = ?(Знач1 <> 0,
		//(ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160006003.Значение)
		/// Знач1)
		//* ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160011003.Значение)
		//, 0);

		//мРаздел9_2.Области.П002160028003.Значение = ?(Знач1 <> 0,
		//   ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение)
		//   * ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160006003.Значение) / Знач1, 0);

		// мРаздел9_2.Области.П002160029003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160007003.Значение) / Знач2, 0);

		//мРаздел9_2.Области.П002160030003.Значение = ?(Знач1 <> 0,
		//	  ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение)
		//	* ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160008003.Значение) / Знач1, 0);

		мРаздел9_2.Области.П002160042003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160006003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160014003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160028003.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_3" Тогда

	// По доходам, полученным от инвестирования средств пенсионных накоплений
	// 15 %

		// Строка 010
		ОкрП002160001003 = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение);
		мРаздел9_3.Области.П002160001003.Значение = ОкрП002160001003;

		Знач1 = Модуль(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение) 
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение))
				 + Модуль(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение)
				 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160019003.Значение))
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160007003.Значение)
				 + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160008003.Значение);

		//4.5. По доходам, полученным от инвестирования средств пенсионных накоплений, негосударственными пенсионными фондами заполняется отдельный Лист 09 Декларации с учетом следующих особенностей:
		//строки 110 - 150 не заполняются;

		// Строки 120 - 150
		// мРаздел9_3.Области.П002160012003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160011003.Значение), 0);
		// мРаздел9_3.Области.П002160013003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160011003.Значение), 0);
		// мРаздел9_3.Области.П002160014003.Значение = ?(Знач1 <> 0, (ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160011003.Значение), 0);
		// мРаздел9_3.Области.П002160015003.Значение = ?(Знач1 <> 0, ((ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160019003.Значение)) / Знач1) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160011003.Значение), 0);

		// Строка 160
		ОкрП002160016003 = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160019003.Значение);
		мРаздел9_3.Области.П002160016003.Значение = ОкрП002160016003;

		// Строки 210 - 230
		мРаздел9_3.Области.П002160021003.Значение = ?(мРаздел9_3.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160020003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение) / мРаздел9_3.Области.П002160016003.Значение, 0);
		мРаздел9_3.Области.П002160022003.Значение = ?(мРаздел9_3.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160020003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение) / мРаздел9_3.Области.П002160016003.Значение, 0);
		мРаздел9_3.Области.П002160023003.Значение = ?(мРаздел9_3.Области.П002160016003.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160020003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160021003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160022003.Значение), 0);

		// Знач2 - из старой схемы, после 01.01.2005, вводим Знач3
		Знач2 = мРаздел9_3.Области.П002160001003.Значение - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение);
		Знач3 = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160001003.Значение)
		 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение)
		 - ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160001003.Значение) // 9 процентов
		 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160007003.Значение)
		 - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160008003.Значение)
		 - ОкруглитьЧислоПоФормату(мРаздел9_2.Области.П002160008003.Значение); // 9 процентов

		// Строки 260 - 310
		мРаздел9_3.Области.П002160026003.Значение = ?(Знач3 <> 0,
		     ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение) / Знач3, 0);

		мРаздел9_3.Области.П002160027003.Значение = ?(Знач3 <> 0,
		     ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение) / Знач3, 0);

		мРаздел9_3.Области.П002160028003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение) / Знач2, 0);
		мРаздел9_3.Области.П002160029003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160007003.Значение) / Знач2, 0);
		мРаздел9_3.Области.П002160030003.Значение = ?(Знач2 <> 0, ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение) * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160008003.Значение) / Знач2, 0);

		мРаздел9_3.Области.П002160031003.Значение = ?(Знач3 <> 0,
		     ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160025003.Значение)
		   * ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение) / Знач3, 0);

		// Строка 320 
		// прибыль (убыток)
		мРаздел9_3.Области.П002160032003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160002003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160003003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160012003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160017003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160021003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160026003.Значение);

		// Строка 330
		мРаздел9_3.Области.П002160033003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160034003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160034103.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160035003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160036003.Значение);
		
		// Строка 370                 
		мРаздел9_3.Области.П002160037003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160004003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160005003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160013003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160018003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160022003.Значение)
					- ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160027003.Значение);

		// Строка 380
		мРаздел9_3.Области.П002160038003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160039003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160040003.Значение)
					+ ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160041003.Значение);

		// Строка 420
		// доход в виде процентов по гос. ценным бумагам
		мРаздел9_3.Области.П002160042003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160006003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160014003.Значение)
					  - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160028003.Значение);
		
		// Строка 430
		// убыток от осуществления других инвестиций
		мРаздел9_3.Области.П002160043003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение)
					   - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160019003.Значение)
					   - мРаздел9_3.Области.П002160023003.Значение;
		
		Если Не(ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160043003.Значение) < 0) Тогда
			// Получена прибыль от осуществления других инвестиций
			мРаздел9_3.Области.П002160043003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160009003.Значение) - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160015003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160019003.Значение)
						  - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160031003.Значение)
						  - мРаздел9_3.Области.П002160023003.Значение;
		КонецЕсли;

		// Строка 440
		мРаздел9_3.Области.П002160044003.Значение = Макс( мРаздел9_3.Области.П002160032003.Значение - мРаздел9_3.Области.П002160033003.Значение, 0);
		
		// Строка 450
		мРаздел9_3.Области.П002160045003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160044003.Значение * 0.3);
					  
		// Строка 470
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_3.Области.П002160047003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160045003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160046003.Значение) );
						   
		// Строка 480
		мРаздел9_3.Области.П002160048003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160046003.Значение) - мРаздел9_3.Области.П002160047003.Значение;

		// Строка 490
		мРаздел9_3.Области.П002160049003.Значение = Макс( мРаздел9_3.Области.П002160037003.Значение - мРаздел9_3.Области.П002160038003.Значение, 0);

		// Строка 500
		мРаздел9_3.Области.П002160050003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160049003.Значение * 0.3);
		
		// Строка 520
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_3.Области.П002160052003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160050003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160051003.Значение) );

		// Строка 530
		мРаздел9_3.Области.П002160053003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160051003.Значение) - мРаздел9_3.Области.П002160052003.Значение;

		// Строка 540
		мРаздел9_3.Области.П002160054003.Значение = Макс( мРаздел9_3.Области.П002160043003.Значение - ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160043103.Значение), 0);

		// Строка 550
		мРаздел9_3.Области.П002160055003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160054003.Значение * 0.3);
		
		// Строка 570
		// сумма убытка, признаваемая в отчетном периоде
		мРаздел9_3.Области.П002160057003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160055003.Значение), ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160056003.Значение) );	
		
		// Строка 580
		мРаздел9_3.Области.П002160058003.Значение = ОкруглитьЧислоПоФормату(мРаздел9_3.Области.П002160056003.Значение) - мРаздел9_3.Области.П002160057003.Значение;
		
		// Строка 590
		мРаздел9_3.Области.П002160059003.Значение = Макс(мРаздел9_3.Области.П002160044003.Значение - мРаздел9_3.Области.П002160047003.Значение + мРаздел9_3.Области.П002160049003.Значение - мРаздел9_3.Области.П002160052003.Значение + мРаздел9_3.Области.П002160054003.Значение - мРаздел9_3.Области.П002160057003.Значение, 0);	


	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист10" Тогда

		// идентификатор многострочного раздела
		ИмяГруппы = "П0021700010";

		МаксимальноеКоличествоСтрокГруппы = 0;
		СтруктураГруппы = 0;
		// Исходное количество строк группы
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

		КолСтрок = СтруктураГруппы.Количество();

		Для индСтр = 1 по КолСтрок Цикл
			мРаздел10.Области["П002170001009_"+индСтр].Значение = ОкруглитьЧислоПоФормату(мРаздел10.Области["П002170001005_"+индСтр].Значение - мРаздел10.Области["П002170001007_"+индСтр].Значение - мРаздел10.Области["П002170001008_"+индСтр].Значение);
		КонецЦикла;

		мРаздел10.Области.П002170002005.Значение = РасчетСуммМногострочнойЧасти("П002170001005", 5);
		мРаздел10.Области.П002170002007.Значение = РасчетСуммМногострочнойЧасти("П002170001007", 7);
		мРаздел10.Области.П002170002008.Значение = РасчетСуммМногострочнойЧасти("П002170001008", 8);
		мРаздел10.Области.П002170002009.Значение = РасчетСуммМногострочнойЧасти("П002170001009", 9);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист11" Тогда

		СуммаПоСтроке280Приложения1 = 0;
		СуммаПоСтроке220Приложения1 = 0;  
		СуммаПоСтроке110Приложения2 = 0; 
		СуммаПоСтроке050Приложения5 = 0;
		СуммаПоСтроке090Приложения5 = 0;
		СуммаПоСтроке100Приложения5 = 0;
		СуммаПоСтроке110Приложения5 = 0;
		СуммаПоСтроке120Приложения5 = 0;

		// Стоимость прибыльной продукции, принадлежащей инвестору
		СуммаПоСтроке280Приложения1 = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190028003.Значение);
		
		// Отрицательная величина налоговой базы предыдущих налоговых периодов,
		// уменьшающая налоговую базу за отчетный (налоговый) период
		СуммаПоСтроке110Приложения2 = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200011003.Значение);

		// Налоговая база в целом по организации определяем по пр.3 строки 050 Приложения 5 к Листу 02
		СуммаПоСтроке050Приложения5 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040005003.Значение);
		
		// Сумма налога в бюджет субъекта определяем по гр. 3 строки 090 Приложения 5 к Листу 02
		СуммаПоСтроке090Приложения5 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040009003.Значение);

		// Сумма налога в местный бюджет определяем по гр. 3 строки 100 Приложения 5 к Листу 02
		СуммаПоСтроке100Приложения5 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040010003.Значение);
		// Сумма начисленных авансовых платежей в бюджет субъекта определяем по гр. 3 строки 110 Приложения 5 к Листу 02
		СуммаПоСтроке110Приложения5 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040011003.Значение);

		// Сумма начисленных авансовых платежей в местный бюджет определяем по гр. 3 строки 120 Приложения 5 к Листу 02
		СуммаПоСтроке120Приложения5 = ОкруглитьЧислоПоФормату(мРаздел2_Прил5.Области.П002040012003.Значение);
			
		// Строка 020
		мРаздел11.Области.П002180002003.Значение = ОкруглитьЧислоПоФормату(СуммаПоСтроке280Приложения1);
			
		// Строка 010
		мРаздел11.Области.П002180001003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180002003.Значение + мРаздел11.Области.П002180003003.Значение);

		// Строка 050
		мРаздел11.Области.П002180005003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180006003.Значение
			   + мРаздел11.Области.П002180007003.Значение);

		// Строка 040
		мРаздел11.Области.П002180004003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180005003.Значение
			   + мРаздел11.Области.П002180009003.Значение);

		// Строка 100
		мРаздел11.Области.П002180010003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180001003.Значение
			   - мРаздел11.Области.П002180004003.Значение);

		// Строка 110
		мРаздел11.Области.П002180011003.Значение = мРаздел11.Области.П002180010003.Значение;

		// Строка 120
		мРаздел11.Области.П002180012003.Значение = ОкруглитьЧислоПоФормату( Макс(СуммаПоСтроке110Приложения2, СуммаПоСтроке110Приложения2 * (-1)) );

		// Строка 130
		мРаздел11.Области.П002180013003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180011003.Значение
			   - мРаздел11.Области.П002180012003.Значение); 

		// Строка 140
		мРаздел11.Области.П002180014003.Значение = мРаздел11.Области.П002180015003.Значение
			   + мРаздел11.Области.П002180016003.Значение + мРаздел11.Области.П002180017003.Значение;

		// Строка 190
		мРаздел11.Области.П002180019003.Значение = Макс( ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180013003.Значение
			   * мРаздел11.Области.П002180015003.Значение / 100), 0);

		Если СуммаПоСтроке050Приложения5 = 0 Тогда
			// Организация не имеет обособленных подразделений.

			// Строка 200 
			мРаздел11.Области.П002180020003.Значение = Макс( ОкруглитьЧислоПоФормату
			(мРаздел11.Области.П002180013003.Значение * мРаздел11.Области.П002180016003.Значение / 100), 0);

			// На листе 11:
			// строка 170 - ставка налога в местный бюджет указывается вручную,
			// если она не заполнена, не вычисляются строки 210, 250

			// Строка 210 
			//мРаздел11.Области.П002180021003.Значение = Макс( ОкруглитьЧислоПоФормату
			//(мРаздел11.Области.П002180013003.Значение * мРаздел11.Области.П002180017003.Значение / 100), 0);

			мРаздел11.Области["П002180024003"].Защита = Ложь;
			//мРаздел11.Области["П002180025003"].Защита = Ложь;
			ЭлементыФормы["ПолеТабличногоДокументаЛист11"].Области["П002180024003"].ЦветФона = ЦветЗаполняетсяОднозначноВручную;
			//ЭлементыФормы["ПолеТабличногоДокументаЛист11"].Области["П002180025003"].ЦветФона = ЦветЗаполняетсяОднозначноВручную;

		Иначе
			// Организация имеет обособленные подразделения
			                  
			// Строка 200 
			мРаздел11.Области.П002180020003.Значение = СуммаПоСтроке090Приложения5;
			// Строка 210 

			// На листе 11:
			// строка 170 - ставка налога в местный бюджет указывается вручную,
			// если она не заполнена, не вычисляются строки 210, 250

			//мРаздел11.Области.П002180021003.Значение = СуммаПоСтроке100Приложения5;
			// Строка 240
			мРаздел11.Области.П002180024003.Значение = СуммаПоСтроке110Приложения5;
			// Строка 250
			//мРаздел11.Области.П002180025003.Значение = СуммаПоСтроке120Приложения5;
				
			мРаздел11.Области["П002180024003"].Защита = Истина;
			//мРаздел11.Области["П002180025003"].Защита = Истина;
			ЭлементыФормы["ПолеТабличногоДокументаЛист11"].Области["П002180024003"].ЦветФона = ЦветЗаполняетсяАвтоАрифметика;
			//ЭлементыФормы["ПолеТабличногоДокументаЛист11"].Области["П002180025003"].ЦветФона = ЦветЗаполняетсяАвтоАрифметика;

		КонецЕсли;

		// Строка 180
		мРаздел11.Области.П002180018003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180019003.Значение
			   + мРаздел11.Области.П002180020003.Значение 
			   + мРаздел11.Области.П002180021003.Значение);
			
		// Строка 220
		мРаздел11.Области.П002180022003.Значение = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180023003.Значение
			   + мРаздел11.Области.П002180024003.Значение + мРаздел11.Области.П002180025003.Значение);
			
		// Строка 260
		мРаздел11.Области.П002180026003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180018003.Значение
			   - мРаздел11.Области.П002180022003.Значение), 0);
			
		// Строка 270
		мРаздел11.Области.П002180027003.Значение = Макс(ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180022003.Значение
			   - мРаздел11.Области.П002180018003.Значение), 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист11_Прил1" Тогда

		// Строка 040
		мРаздел11_Прил1.Области.П002190004003.Значение = ? (мРаздел11_Прил1.Области.П002190002003.Значение <> 0, мРаздел11_Прил1.Области.П002190003003.Значение / мРаздел11_Прил1.Области.П002190002003.Значение, 0);
			
		// Строка 060
		мРаздел11_Прил1.Области.П002190006003.Значение = мРаздел11_Прил1.Области.П002190001003.Значение * мРаздел11_Прил1.Области.П002190005003.Значение;
			
		// Строка 070
		мРаздел11_Прил1.Области.П002190007003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190008003.Значение) + ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190009003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190010003.Значение);  
			
		// Строка 150			  
		мРаздел11_Прил1.Области.П002190015003.Значение = Мин(мРаздел11_Прил1.Области.П002190016003.Значение, мРаздел11_Прил1.Области.П002190017003.Значение);
			             
		// Строка 190
		мРаздел11_Прил1.Области.П002190019003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190006003.Значение * мРаздел11_Прил1.Области.П002190002003.Значение);
			
		// Строка 200
		мРаздел11_Прил1.Области.П002190020003.Значение = Мин(мРаздел11_Прил1.Области.П002190007003.Значение, мРаздел11_Прил1.Области.П002190019003.Значение);
			
		// Строка 210
		мРаздел11_Прил1.Области.П002190021003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190020003.Значение * 0.02);
			
		// Строка 220
		мРаздел11_Прил1.Области.П002190022003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190015003.Значение - мРаздел11_Прил1.Области.П002190021003.Значение);
			
		// Строка 230
		мРаздел11_Прил1.Области.П002190023003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190020003.Значение - Макс(мРаздел11_Прил1.Области.П002190022003.Значение, 0));
			
		// Строка 240
		мРаздел11_Прил1.Области.П002190024003.Значение = ? ( мРаздел11_Прил1.Области.П002190002003.Значение <> 0, мРаздел11_Прил1.Области.П002190023003.Значение / мРаздел11_Прил1.Области.П002190002003.Значение, 0);
			
		// Строка 250
		мРаздел11_Прил1.Области.П002190025003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190007003.Значение - мРаздел11_Прил1.Области.П002190023003.Значение - Макс(мРаздел11_Прил1.Области.П002190022003.Значение, 0));
			
		// Строка 270
		мРаздел11_Прил1.Области.П002190027003.Значение = (мРаздел11_Прил1.Области.П002190001003.Значение - мРаздел11_Прил1.Области.П002190004003.Значение - мРаздел11_Прил1.Области.П002190024003.Значение) * мРаздел11_Прил1.Области.П002190026003.Значение;
			
		// Строка 280
		мРаздел11_Прил1.Области.П002190028003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил1.Области.П002190027003.Значение * мРаздел11_Прил1.Области.П002190002003.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист11_Прил2" Тогда

		УбытокПоСтроке100Листа11 = 0;
			
		УбытокПоСтроке100Листа11 = ОкруглитьЧислоПоФормату(мРаздел11.Области.П002180010003.Значение);
			
		// Строка 010
		мРаздел11_Прил2.Области.П002200001003.Значение = ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200003003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200004003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200005003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200006003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200007003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200008003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200009003.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел11_Прил2.Области.П002200010003.Значение);

		// Строка 120
		мРаздел11_Прил2.Области.П002200012003.Значение = мРаздел11_Прил2.Области.П002200001003.Значение
					  - мРаздел11_Прил2.Области.П002200011003.Значение + Мин(УбытокПоСтроке100Листа11, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		Расчет("Лист11_Прил2");
		Расчет("Лист11_Прил1");
		Расчет("Лист11");
		Расчет("Лист10");
		Расчет("Лист09_3");
		Расчет("Лист09_2");
		Расчет("Лист09_1");
		Расчет("Лист09_0");
		Расчет("Лист08");
		Расчет("Лист07");
		Расчет("Лист06");
		Расчет("Лист05");
		Расчет("Лист04_РазделБ");
		Расчет("Лист04_РазделА");
		Расчет("Лист03_РазделыБВ2");
		Расчет("Лист03_РазделыБВ1");
		Расчет("Лист03_РазделА");
		Расчет("Лист02_Прил7");
		Расчет("Лист02_Прил6");
		Расчет("Лист02_Прил5");
		Расчет("Лист02_Прил5а");
		Расчет("Лист02_Прил4");
		Расчет("Лист02_Прил2");
		Расчет("Лист02_Прил1");
		Расчет("Лист02");
		Расчет("Раздел1_4");
		Расчет("Раздел1_2");
		Расчет("Раздел1_1");
	КонецЕсли;

КонецПроцедуры // Расчет()

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			Расчет(РасчетныйЛист);
		КонецЕсли;
	КонецЕсли;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл

			ВыводНаПечать = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
			
			Если ВыводНаПечать = 1 Тогда
				ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
				Расчет(ИмяДляРасчета);
			КонецЕсли;
			ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет (РасчетныйЛист = "")


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	СтруктураПараметров = ПолучитьПараметрыДляОбработкиЗапросов();
	Модифицированность = Истина;
	// Инициализация
	ПС = ПланыСчетов["Налоговый"];
	
	// таблица итогов по всем счетам без анлитики
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет
	|
	|ИТОГИ СУММА(ДО), СУММА(КО) ПО
	|	Счет ИЕРАРХИЯ";	
	мБухИтоги = Запрос.Выполнить().Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с рабивкой по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	СчетаКосвенныхЗатрат = Новый Массив;
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОсновногоПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	
	Запрос.УстановитьПараметр("Счет",           СчетаКосвенныхЗатрат);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажу);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&КорСчет),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ <> &ТранспортныеРасходы
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ <> &ТранспортныеРасходы
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ";
	
	мБухИтогиКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги912 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВыручкаОтРеализацииИмущественныхПрав);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги9105 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги91017 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		,
	|		) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(-НалоговыйОбороты.СуммаОборотКт),
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	мБухИтоги91027 = Запрос.Выполнить().Выгрузить();
	Счет91027      = ПС.ВнереализационныеРасходы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.ВыбытиеОС);
	Запрос.УстановитьПараметр("Ликвидация",   Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета
	|			И Субконто1.ВидПрочихДоходовИРасходов = &Ликвидация,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты";
	
	Результат = Запрос.Выполнить().Выгрузить();
	БухИтоги91027_019Ликвидация = Результат.Итог("ДО");
	
	
	
	// лист 2 приложение 1
	Счет90011 = ПС.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Счет91015 = ПС.ВыручкаОтРеализацииИмущественныхПрав;
	Счет91014 = ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
	Счет90012 = ПС.ВыручкаОтРеализацииПокупныхТоваров;;
	Счет91011 = ПС.ВыручкаОтРеализацииОсновныхСредств;
	Счет91012 = ПС.ВыручкаОтРеализацииНематериальныхАктивов;
	Счет91016 = ПС.ВыручкаОтРеализацииЦенныхБумаг;
	Счет91026 = ПС.РасходыСвязанныеСРеализациейЦенныхБумаг;

	// Строка 020 - выручка от реализации товаров (работ, услуг) собственного производства
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010002003", мБухИтогиНайти("КО", Счет90011, мБухИтоги)); 
	
	// Строка 030 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010003003", мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги9105));
	                                                                         
	// Строка 040 - выручка от реализации прочего имущества
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010004003", мБухИтогиНайти("КО", Счет91014, мБухИтоги));

	// Строка 050 - выручка от реализации покупных товаров
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010005003", мБухИтогиНайти("КО", Счет90012, мБухИтоги));

	// Строка 060 - выручка от реализации амортизируемого имущества
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010006003", мБухИтогиНайти("КО", Счет91011, мБухИтоги) + мБухИтогиНайти("КО", Счет91012, мБухИтоги)); 

	// Строка 070 - выручка от реализации права требования как реализации финансовых услуг
	// проверено, дублежа в Расчет() нет
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010007003", мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги9105)); 

	// Строка 080 - выручка от реализации  права требования до наступления срока платежа
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010008003", мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги9105));
	
	// Строка 090 - выручка от реализации  права требования после наступления срока платежа
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010009003", мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги9105));
	
	// Строка 100 - выручка от реализации товаров (работ, услуг) 
	// по объектам обслуживающих производств и хозяйств
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010010103", 0);  
	
	// Строка 010
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010001003", ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010002003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010003003.Значение)
	              + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010004003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010005003.Значение));
	
	// Строка 110 - ПОВТОР В РАСЧЕТЕ !!!
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010011003",  мРаздел2_Прил1.Области.П002010001003.Значение 
	//              + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010006003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010007003.Значение)
	//              + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010008003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010009003.Значение)
	//			  + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010010003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2_Прил1.Области.П002010010103.Значение));
	
	// лист 2 приложение 2
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.СебестоимостьПродаж);
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПокупныеТовары",      ПокупныеТовары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|    0  КАК ПокупныеТовары
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		НЕ(КорСчет В ИЕРАРХИИ (&ПокупныеТовары)),
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&ПокупныеТовары),
	|		) КАК НалоговыйОбороты";
	
	
	мБухИтоги902 = Запрос.Выполнить().Выгрузить();
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020001003", мБухИтоги902.Итог("ДО"));
	
	// Строка 020 - Материальные расходы, относящиеся к расходам текущего отчетного
	//              (налогового) периода, за исключением расходов, относящихся к прямым
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020002003", мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.МатериальныеРасходы, мБухИтогиКосвЗатрат));
	
	// Строка 030 - Расходы на оплату труда, относящиеся к расходам текущего
	//              отчетного (налогового) периода, за исключением расходов
	//              относящихся к прямым
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         СчетаКосвенныхЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидРасходов",  Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Счет69 = Новый Массив;
	Счет69.Добавить(ПС.ФСС);
	Счет69.Добавить(ПС.ФОМС);
	Счет69.Добавить(ПС.ЕСН_ФБ);
	Запрос.УстановитьПараметр("СчетЕСН",           Счет69);
	Запрос.УстановитьПараметр("СчетПФР",           ПС.ПФР);
	Запрос.УстановитьПараметр("СчетФСС_НСиПЗ",     ПС.ФСС_НСиПЗ);
	Запрос.УстановитьПараметр("Счет97",            ПС.РасходыНаОплатуТрудаБудущихПериодов);
	Запрос.УстановитьПараметр("СубконтоЕСН",       Справочники.РасходыБудущихПериодов.РБПНаЕСН);
	Запрос.УстановитьПараметр("СубконтоПФР",       Справочники.РасходыБудущихПериодов.РБПНаПФР);
	Запрос.УстановитьПараметр("СубконтоФСС_НСиПЗ", Справочники.РасходыБудущихПериодов.РБПНаФСС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотДт КАК ЕСН,
	|	0                              КАК ПФР,
	|	0                              КАК ФССНСиПЗ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&СчетЕСН),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|						ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|					ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|				КОНЕЦ
	|		КОНЕЦ = &ВидРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	НалоговыйОбороты.СуммаОборотДт,
	|	0,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&СчетПФР),
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	НалоговыйОбороты.СуммаОборотДт,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет = &СчетФСС_НСиПЗ,
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.КорСубконто1 = &СубконтоЕСН
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.КорСубконто1 = &СубконтоПФР
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.КорСубконто1 = &СубконтоФСС_НСиПЗ
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&Счет97),
	|		) КАК НалоговыйОбороты";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЕСН           =  Результат.Итог("ЕСН");
	ПФР           =  Результат.Итог("ПФР");
	ФСС_НСиПЗ     = Результат.Итог("ФССНСиПЗ");
	ПФРиФСС_НСиПЗ = ПФР + ФСС_НСиПЗ;
	РасходыНаДобрСтрхование = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, мБухИтогиКосвЗатрат) +
	                          мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности, мБухИтогиКосвЗатрат) +
							  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, мБухИтогиКосвЗатрат);
	
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020003003", мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ОплатаТруда, мБухИтогиКосвЗатрат) - ЕСН - ПФРиФСС_НСиПЗ + РасходыНаДобрСтрхование);
	
	// Строка 040 - Суммы начисленной амортизации, относящиеся к расходам
	//              текущего отчетного (налогового)  периода, за исключением
	//              расходов, относящихся к прямым
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020004003", мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.Амортизация, мБухИтогиКосвЗатрат));
	
	// Формирование строки 050 - Расходы, формируемые в порядке, предусмотренном ст.ст.260, 261, 262, 263 НК
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005101",  "");    РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005103",  0);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005201",  "");    РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005203",  0);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005301",  "");    РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005303",  0);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005401",  "");    РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005403",  0);
	
	// Строка 051. Расходы на ремонт основных средств
	СуммаРасходов = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств, мБухИтогиКосвЗатрат);

	Если СуммаРасходов > 0 Тогда

		НомерПодстроки = 51; // Строка 1 - 260НК
		ИмяЯчейкиВОтчете = "П00202000" + НомерПодстроки + "01";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяЯчейкиВОтчете, "расходы, произведенные в соответствии со статьей 260 НК");

		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "03";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, СуммаРасходов);
	КонецЕсли;

	// Строка 052. Расходы на освоение природных ресурсов
	СуммаРасходов = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ОсвоениеПриродныхРесурсов, мБухИтогиКосвЗатрат);

	Если СуммаРасходов > 0 Тогда

		НомерПодстроки = 52; // Строка 2 - 261НК
		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "01";

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, "расходы, произведенные в соответствии со статьей 261 НК");
		
		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "03";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, СуммаРасходов);

	КонецЕсли;

	// Строка 053. Расходы на научные исследования и (или) опытно-конструкторские разработки

	// В разных конфигурациях и в разных редакциях конфигураций значение "На НИОКР"
	// перечисления "Виды расходов (НУ)" имеет имя НаНИОКР или НИОКР.
	Если Метаданные.Перечисления.ВидыРасходовНУ.ЗначенияПеречисления.Найти("НаНИОКР") <> Неопределено Тогда

		РасходыНаНИОКР = Перечисления.ВидыРасходовНУ.НаНИОКР;

	ИначеЕсли Метаданные.Перечисления.ВидыРасходовНУ.ЗначенияПеречисления.Найти("НИОКР") <> Неопределено Тогда

		РасходыНаНИОКР = Перечисления.ВидыРасходовНУ.НИОКР;

	КонецЕсли;

	СуммаРасходов = мБухИтогиНайти("КО", РасходыНаНИОКР, мБухИтогиКосвЗатрат);

	Если СуммаРасходов > 0 Тогда
		НомерПодстроки = 53;
		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "01";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, "расходы, произведенные в соответствии со статьей 262 НК");

		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "03";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, СуммаРасходов);
	КонецЕсли;

	// Строка 054. Расходы на обязательное и добровольное страхование имущества
	СуммаРасходовСтрахования = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ОбязательноеИДобровольноеСтрахованиеИмущества, мБухИтогиКосвЗатрат);

	Если СуммаРасходовСтрахования > 0 Тогда
		НомерПодстроки = 54;
		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "01";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, "расходы, произведенные в соответствии со статьей 263 НК");
		
		ИдентификаторЯчейки = "П00202000" + НомерПодстроки + "03";
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИдентификаторЯчейки, СуммаРасходовСтрахования);
	КонецЕсли;
	
	// Строка 070 - суммы налогов и сборов, начисленные в порядке,
	//              установленном законодательством Российской Федерации
	//              о налогах и сборах, за исключением перечисленных в статье 270 НК
	
	НалогиИСборы =  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, мБухИтогиКосвЗатрат);
	
	// В строке 070 отражаются суммы налогов и сборов, начисленные в порядке установленном
	// подпунктом 1 пункта 1 статьи 264 НК, взносы в ФСС (НС и НС) относятся к подпункту 45
	// пункта 1 статьи 264 НК.
		                              
	// обороты счета 91.02.9 - Прочие косвенные расходы (налог на землю, налог на имущество и т.д.)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов",  Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочиеОперационныеРасходы,
	|	НалоговыйОбороты.СуммаОборотДт КАК ДО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		&ВидСубконто,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		,
	|		) КАК НалоговыйОбороты";
	
	
	мБухИтоги91029 = Запрос.Выполнить().Выгрузить();
		                              
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020007003", ЕСН + НалогиИСборы + мБухИтоги91029.Итог("ПрочиеОперационныеРасходы"));         
	
	// Строка 071 - суммы ЕСН, относящиеся к косвенным расходам текущего
	//              отчетного (налогового) периода
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020007103", ЕСН);
	
	// Строка 080 - расходы по аренде федерального имущества, имущества субъектов Российской Федерации и муниципального имущества
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020008003", мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АрендаФедеральногоИМуниципальногоИмущества, мБухИтогиКосвЗатрат));
	
	// Строка 090 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	
	УбытокОС = ПрибылиИУбытки(ПС.ВыручкаОтРеализацииОсновныхСредств, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , "Убыток");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.ОтрицательныйРезультатОтРеализацииАмортизируемогоИмущества);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|";
	мБухИтогиУбытокОСРБП = Запрос.Выполнить().Выгрузить();
	
	Показатель090 = мБухИтогиУбытокОСРБП.Итог("СуммаОборотКт");
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020009003", Показатель090);
	
	// Строка 100 - другие расходы          
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020010003", мБухИтогиКосвЗатрат.Итог("КО") + мБухИтоги91029.Итог("ДО") 
	                                             -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.МатериальныеРасходы, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ОплатаТруда, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.Амортизация, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.ОсвоениеПриродныхРесурсов, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АрендаФедеральногоИМуниципальногоИмущества, мБухИтогиКосвЗатрат)
												 -  мБухИтогиНайти("КО", РасходыНаНИОКР, мБухИтогиКосвЗатрат)
												 - СуммаРасходовСтрахования
												 - Показатель090
												 - мБухИтоги91029.Итог("ПрочиеОперационныеРасходы")
												 - НалогиИСборы
												 + ФСС_НСиПЗ + ПФР);
	
	// Строка 110 - Стоимость реализованных покупных товаров
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020011003",  мБухИтоги902.Итог("ПокупныеТовары"));   
	
	// Строка 120 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет44",       ПС.РасходыНаПродажу);
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажу);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет44),
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет = &Счет90,
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	мБухИтоги44 = Запрос.Выполнить().Выгрузить();
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020012003", мБухИтоги44.Итог("СуммаОборотКт"));
	
	// Строка 140 - Цена приобретения реализованного прочего имущества и расходы,
	//              связанные с его реализацией
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020014003", мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги));
	
	// Строка 150 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020015003", мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейОсновныхСредств, мБухИтоги)
				+ мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтоги));
	
	// Строка 160 - Стоимость реализованного права требования при его реализации
	//              как финансовой услуги
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020016003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги912));
	
	// Строка 170 - Стоимость реализованного права требования до наступления срока платежа
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020017003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги912));
	
	// Строка 180 - Стоимость реализованного права требования после наступления срока платежа
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020018003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги912));
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами
	//              при реализации ими товаров (работ,  услуг), имущественных прав
	//              в текущем отчетном (налоговом) периоде
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020019003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги912)); 
	
	// Строка 200 - Убытки от реализации амортизируемого имущества, принимаемые
	//              для целей налогообложения в  специальном порядке  
	
	// Выявляется отрицательный результат от реализации по каждому объекту
	// (ОС, НМА): КО(Н06.05) - ДО(Н07.07) или КО(Н06.06) - ДО(Н07.08).
	// Выявленный отрицательный результат суммируется с противоположным знаком.
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020020003", УбытокОС + ПрибылиИУбытки(ПС.ВыручкаОтРеализацииНематериальныхАктивов, ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, , "Убыток"));
	
	
	// Заполнение строк 210, 220, 230
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020021003", 0); 
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020022003", 0);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020023003", 0);            
	
	// Выявляется отрицательный результат от реализации по каждому
	// объекту (договору переуступки): 
	// Выявленный отрицательный результат суммируется и указывается с положительным знаком.
	
	// Строка 230 - убытки при реализации права требования как реализации финансовых услуг
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020023003", ПрибылиИУбытки(ПС.ВыручкаОтРеализацииИмущественныхПрав, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, "Убыток"));
	
	// Строка 210 - убыток от реализации права требования в соответствии
	//              со статьей 279 НК по п. 1 - размер убытка, превышающий
	//              сумму процентов, исчисленных в соответствии со статьей 269 НК
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020021003", УбыткиПревышающиеПроценты(ПС.ВыручкаОтРеализацииИмущественныхПрав, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа));  
	
	// Строка 220 - убыток от реализации права требования в соответствии
	//              со статьей 279 НК по п. 2 - убыток от реализации права требования
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020022003", ПрибылиИУбытки(ПС.ВыручкаОтРеализацииИмущественныхПрав, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, "Убыток"));
	
	
	// Строка 240 - Суммы убытков текущего отчетного (налогового) периода
	//              по объектам обслуживающих производств  и хозяйств,
	//              включая объекты жилищно-коммунальной и социально-культурной сферы
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020024003", 0);
	
	// Строка 260 - Суммы убытков прошлых лет по объектам обслуживающих производств
	//              и хозяйств, включая объекты жилищно-коммунальной и социально-культурной
	//              сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового)
	//              периода, полученной по указанным видам деятельности
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020026003", 0);
	
	// Строка 280 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	АмортизацияОсновныхСредств       = мБухИтогиНайти("КО", ПС.АмортизацияОсновныхСредств, мБухИтоги);
    АмортизацияНематериальныхАктивов = мБухИтогиНайти("КО", ПС.АмортизацияНематериальныхАктивов, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020028003", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
	
	// Строка 281 - Сумма начисленной амортизации по нематериальным активам
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020028103", АмортизацияНематериальныхАктивов);
		
	// Строка 290  -  Общая сумма расходов, не учитываемых в целях налогообложения, всего: (сумма строк 300 и 310)																								
	
	ИДконфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("СчетНЕ",       ПС.ДоходыРасходыНеУчитываемые);
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(НалоговыйОбороты.СуммаОборот) КАК СуммаОборот,
	|	НалоговыйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&СчетНЕ),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		,
	|		) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	БухИтогиНеПринимРасходы = Запрос.Выполнить().Выбрать();
	
	// Строка 300 - Из строки 290 расходы, которые не учтены в составе расходов для целей налогообложения на основании пунктов 1 - 48 статьи 270 НК																								
	
	Если БухИтогиНеПринимРасходы.НайтиСледующий(ПС.РасходыНеУчитываемыеПоП_1_48, "Счет") Тогда
		Показатель300 = БухИтогиНеПринимРасходы.СуммаОборот;
	Иначе
		Показатель300 = 0;
	КонецЕсли;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020030003", Показатель300);
	БухИтогиНеПринимРасходы.Сбросить();
	
	// Строка 301 - в том числе выплаты в пользу физических лиц																							
	
	Если БухИтогиНеПринимРасходы.НайтиСледующий(ПС.ДругиеВыплатыПоП_1_48, "Счет") Тогда
		Показатель301 = Показатель300 - БухИтогиНеПринимРасходы.СуммаОборот;
	Иначе
		Показатель301 = 0;
	КонецЕсли;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020030103", Показатель301);
	БухИтогиНеПринимРасходы.Сбросить();
	
	// Строка 310 - Из строки 290 расходы, которые не учтены в составе расходов для целей налогообложения на основании пункта 49 статьи 270 НК																																														
	
	Если БухИтогиНеПринимРасходы.НайтиСледующий(ПС.РасходыНеУчитываемыеПоП_49, "Счет") Тогда
		Показатель310 = БухИтогиНеПринимРасходы.СуммаОборот;
	Иначе
		Показатель310 = 0;
	КонецЕсли;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020031003", Показатель310);
	БухИтогиНеПринимРасходы.Сбросить();

	// Строка 311 - в том числе выплаты в пользу физических лиц																																												
	
	Если БухИтогиНеПринимРасходы.НайтиСледующий(ПС.ДругиеВыплатыПоП_49, "Счет") Тогда
		Показатель311 = Показатель310 - БухИтогиНеПринимРасходы.СуммаОборот;
	Иначе
		Показатель311 = 0;
	КонецЕсли;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020031103", Показатель311);

	КонецЕсли;

	// лист 2 приложение 4
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.УбыткиПрошлыхЛет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета) КАК НалоговыйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстаткиИОбороты.Субконто1";
	УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
	
	П1997 = 0;
	П1998 = 0;
    П1999 = 0;
    П2000 = 0;
    П2001 = 0;
    П2002 = 0;
    П2003 = 0;
    П2004 = 0;
    П2005 = 0;
    П2006 = 0;
	
	Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
		
	ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
	СуммаСписанногоУбытка = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
	Если ГодУбытка = 1997 Тогда
	П1997 = ?(ГодУбытка = 1997, СуммаСписанногоУбытка, 0); 
	ИначеЕсли ГодУбытка = 1998 Тогда
	П1998 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 1999 Тогда
	П1999 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2000 Тогда
	П2000 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2001 Тогда
	П2001 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2002 Тогда
	П2002 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2003 Тогда
	П2003 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2004 Тогда
	П2004 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2005 Тогда
	П2005 = СуммаСписанногоУбытка;
	ИначеЕсли ГодУбытка = 2006 Тогда
	П2006 = СуммаСписанногоУбытка;
	КонецЕсли;
КонецЦикла;
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030002003", П1997+П1998+П1999+П2000+П2001);

	
	Если П2002 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030004001", "2002");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030004003", П2002);
	КонецЕсли;
	
	Если П2003 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030005001", "2003");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030005003", П2003);
	КонецЕсли;

	Если П2004 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030006001", "2004");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030006003", П2004);
	КонецЕсли;
	
	Если П2005 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030007001", "2005");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030007003", П2005);
	КонецЕсли;
	
	Если П2006 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030008001", "2006");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030008003", П2006);
	КонецЕсли;

	// Строка 100 - Сумма убытка или части убытка, уменьшающего   
	//              налоговую базу за отчетный  (налоговый)  период
	СуммаПоСтроке050Листа02 = 0;
	СуммаПоСтроке140Листа02 = 0;
	СуммаПоСтроке120Листа05 = 0;
	СуммаПоСтроке120Листа06 = 0;
	СуммаПоСтроке230Листа07 = 0;
	СуммаПоСтроке110Листа08 = 0;
	СуммаПоСтроке590Листа09 = 0;
	
	
	// Прибыль (убыток) по строке 050 Листа 02
	СуммаПоСтроке050Листа02 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000005003.Значение);
	
	// Налоговая база по строке 140 Листа 02
	СуммаПоСтроке140Листа02 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000014003.Значение);
	
	// Налоговая база по строке 120 Листа 05
	СуммаПоСтроке120Листа05 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120012003.Значение);
	
	// Налоговая база по строке 120 Листа 06
	СуммаПоСтроке120Листа06 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130012003.Значение);		
	
	// Налоговая база по строке 230 Листа 07
	СуммаПоСтроке230Листа07 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140023003.Значение);		
	
	// Налоговая база по строке 110 Листа 08
	СуммаПоСтроке110Листа08 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150011003.Значение);		
	
	// Налоговая база по строке 590 Листа 09
	СуммаПоСтроке590Листа09 = ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160059003.Значение);		

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если (ИДКонфигурации = "БП" И НЕ РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.0")
		ИЛИ ИДКонфигурации = "БПКОРП"
		ИЛИ ИДКонфигурации = "БАУКОРП"
		ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", УбыткиПрошлыхЛет.Итог("КО"));
	Иначе
		Если мРаздел2_Прил4.Области.П002030009003.Значение > 0 Тогда 
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", Мин(мРаздел2_Прил4.Области.П002030001003.Значение,мРаздел2_Прил4.Области.П002030009003.Значение*3/10));
		Иначе
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", 0);
		КонецЕсли;
	КонецЕсли;

	СуммаПоСтроке050Листа02 = 0;
	СуммаПоСтроке140Листа02 = 0;
	СуммаПоСтроке120Листа05 = 0;
	СуммаПоСтроке120Листа06 = 0;
	СуммаПоСтроке230Листа07 = 0;
	СуммаПоСтроке110Листа08 = 0;
	СуммаПоСтроке590Листа09 = 0;
	
	
	// Прибыль (убыток) по строке 050 Листа 02
	СуммаПоСтроке050Листа02 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000005003.Значение);
	
	// Налоговая база по строке 140 Листа 02
	СуммаПоСтроке140Листа02 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П002000014003.Значение);
	
	// Налоговая база по строке 120 Листа 05
	СуммаПоСтроке120Листа05 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002120012003.Значение);
	
	// Налоговая база по строке 120 Листа 06
	СуммаПоСтроке120Листа06 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002130012003.Значение);		
	
	// Налоговая база по строке 230 Листа 07
	СуммаПоСтроке230Листа07 = ОкруглитьЧислоПоФормату(мРаздел7.Области.П002140023003.Значение);		
	
	// Налоговая база по строке 110 Листа 08
	СуммаПоСтроке110Листа08 = ОкруглитьЧислоПоФормату(мРаздел8.Области.П002150011003.Значение);		
	
	// Налоговая база по строке 590 Листа 09
	СуммаПоСтроке590Листа09 = ОкруглитьЧислоПоФормату(мРаздел9_0.Области.П002160059003.Значение);		

	// Строки 140 - 180
	Остаток       = мРаздел2_Прил4.Области.П002030003003.Значение - мРаздел2_Прил4.Области.П002030013003.Значение; // перенесено убытка после 2002 
	
	Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030004003.Значение));

	Остаток       = Остаток - Списывается;
	
	Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030005003.Значение));

	Остаток       = Остаток - Списывается;
	
	Списывается   = Мин(Остаток, ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030006003.Значение));

	Остаток       = Остаток - Списывается;
	
	Списывается   = Мин(Остаток ,ОкруглитьЧислоПоФормату(мРаздел2_Прил4.Области.П002030007003.Значение));

	Остаток       = Остаток - Списывается;
	
	Списывается   = Мин(Остаток, мРаздел2_Прил4.Области.П002030009003.Значение);


	// лист 2 приложение 6

	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060002003", 0);

	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060003003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060004003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060005003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060006003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060007003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060010003", 0);
	
	
	// Строка 020 - От сдачи имущества в аренду (субаренду)
	Показатель020 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060002003", Показатель020);
	
	// Строка 030 - В виде процентов, полученных по договорам займа,
	//              кредита, банковского счета, а также по ценным бумагам
	//              и другим долговым обязательствам
	Показатель030 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060003003", Показатель030);
	
	// Строка 040 - В виде сумм восстановленных резервов, расходы на формирование
	//              которых были приняты в составе расходов в установленном порядке - всего
	Показатель040 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060004003", Показатель040);
	
	// Строка 050 - В виде безвозмездно полученного имущества (работ, услуг) или имущественных прав
	Показатель050 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060005003", Показатель050);
	
	// Строка 060 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	Показатель060 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060006003", Показатель060);
	
	// Строка 070 - От операций с финансовыми инструментами срочных сделок
	Показатель070 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок, мБухИтоги91017)
	              + мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060007003", Показатель070);
	
	// Строка 080 - От операций списания дебиторской кредиторской задолженности
	Показатель080 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060008003", Показатель080);
	
	// Строка 090 - От операций списания дебиторской кредиторской задолженности
	Показатель090 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, мБухИтоги91017);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060009003", Показатель090);
	
	// Строка 100 - Прочие внереализационные доходы
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002060010003", мБухИтогиНайти("КО", ПС.ВнереализационныеДоходы, мБухИтоги) - Показатель020 - Показатель030 - Показатель040 - Показатель050 - Показатель060 - Показатель070 - Показатель080 - Показатель090); 
	// лист 2 приложение 7    
	
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070002003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070003003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070004003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070006003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070007003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070009003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070010003",0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070011003",0);
	
	Показатель020 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070002003", Показатель020);
	
	// Строка 030 - расходы налогоплательщика, применяющего метод начисления,
	//              на формирование резервов по сомнительным долгам
	Показатель030 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070003003", Показатель030);
	
	// Строка 040 - Расходы в виде сумм налогов, относящихся к поставленным
	//              товарно-материальным ценностям, работам, услугам, если 
	//              кредиторская задолженность (обязательства перед кредиторами)
	//              по такой поставке списана в отчетном периоде
	Показатель040 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070004003", Показатель040);
	
	// Строка 060 - Расходы по операциям с финансовыми инструментами срочных сделок 
	Показатель060 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок, мБухИтоги91027)
	              + мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070006003", Показатель060);
	
	
	// Строка 070 - Расходы на содержание переданного по договору аренды имущества
	//              (включая амортизацию по  этому имуществу)
	Показатель070 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070007003", Показатель070);
	
	// Строка 080 - Расходы на ликвидацию выводимых из эксплуатации основных средств																								
	Показатель080 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070008003", Показатель080);
	
	// Строка 081 - суммы недоначисленной амортизации																							
	Показатель081 = БухИтоги91027_019Ликвидация;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070008103", Показатель081);
	
	// Строка 090 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	Показатель090 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070009003", Показатель090);
	
	// Строка 100 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	Показатель100 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070010003", Показатель100);
	
	// Строка 110 - Прочие внереализационные расходы и убытки, приравниваемые
	//              к внереализационным расходам
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002070011003", мБухИтоги91027.Итог("ДО") - Показатель020 - Показатель030 - Показатель040 - Показатель060 - Показатель070 - Показатель080 - Показатель090 - Показатель100);

	// Строка 020 - Доход в виде процентов по государственным и муниципальным
	//              облигациям, подлежащий налогообложению по ставке 0 процентов  

	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002100002003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0, мБухИтоги91027));

	// Cтрока 010 - Доход, полученный (начисленный) по государственным и
	//              муниципальным ценным  бумагам всего
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002100001003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам, мБухИтоги91027));
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002100001003", мРаздел4_А.Области.П002100001003.Значение + мРаздел4_А.Области.П002100002003.Значение);

	// лист 4  раздел Б
	// Строка 010 - начислено всего доходов
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002110001003", мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях, мБухИтоги91027));
	// Строка 030

	
	// строки 010 и 030
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002120001003", 0);  
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002120003003", 0);  
	
	// Выбираем ЦБ только с установленным признаком "Обращается на организованном рынке"
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002120001003", 0); 
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002120003003", 0);

	// лист 6
	// строки 010 и 030
	 РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002130001003", мБухИтогиНайти("КО", Счет91016, мБухИтоги));  
	 РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002130003003", мБухИтогиНайти("ДО", Счет91026, мБухИтоги));  
	
	// Выбираем ЦБ без признака "Обращается на организованном рынке"
	// РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002130001003", 0);
	// РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002130003003", 0);
	// Строка 040


	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140002003", 0);  
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140004003", 0);  
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140008003", 0);
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140010003", 0);
	
	// Выбираем ЦБ только с установленным признаком "Первичный владелец"
	
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140002003", 0); 
	
	// Строка 080 - Расходы по реализации (выбытию, в т.ч. погашению) ценных
	//              бумаг, обращающихся на организованном рынке ценных бумаг
	// РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140008003", 0); 
	
	// Строка 040 - Выручка от реализации (выбытия, в т.ч. доход от погашения)
	//              ценных бумаг, не обращающихся на организованном рынке
	//              ценных бумаг
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140004003",0);
	
	// Строка 100 - Расходы по реализации (выбытию, в т.ч. погашению) ценных
	//              бумаг, не обращающихся на организованном рынке ценных бумаг
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002140010003", 0);

	// Строка 010 - Внереализационные доходы по операциям с финансовыми инструментами
	//              срочных сделок, не обращающимися на организованном рынке
	// РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002150001003", 0);
	
	// Строка 030  - Внереализационные расходы по операциям с финансовыми инструментами
	//               срочных сделок, не обращающимися на организованном рынке
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002150003003", 0);
	// Строка 040

	// Установим дату на листе 02, показатель 47001
	// Функция КонецГода возвращает дату и ВРЕМЯ, т.к. 31.12.2004 23:59:59, будет неправильно
	// сравнивать напрямую с мДатойКонцаПериодаОтчета, поэтому сначало преобразуем к дате и сравним

	// Заполняем дату аванса на листе 02.
	Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецДня(КонецГода (мДатаКонцаПериодаОтчета)) Тогда
		П002000047001 = Дата(Год(мДатаКонцаПериодаОтчета), Месяц(мДатаКонцаПериодаОтчета) + 1, 28);
	Иначе
		П002000047001 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	КонецЕсли;

	мРаздел2.Области.П002000047001.Значение = П002000047001;

	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
//
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// РешенияВыбор
//
Процедура РешенияВыбор(Элемент, ЭлементСписка)

	ВвестиНазваниеРешения();

КонецПроцедуры // РешенияВыбор

// ПоказатьСтраницуМногостраничногоРазделаИзРешений
// Процедура учитывает специфическую особенность разделов БВ относительно решений.
// Всегда сохраняет активный лист в активном решении и отображает требуемый лист по номеру
// из структуры многостраничных разделов.
// Параметры:
//  ИмяЛиста       - имя листа многостраничного раздела, допускается Лист03_РазделыБВ1 или Лист03_РазделыБВ2
//  НомерСтраницы  - номер страницы из таблицы многостраничного раздела, структуры мСтруктураМногостраничныхРазделов
//
Процедура ПоказатьСтраницуМногостраничногоРазделаИзРешений(ИмяЛиста, НомерСтраницы, ОбновитьАдресныеПеременные = Истина)

	// Сохраним текущий лист
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяЛиста);

	// Получим номер активной страниц, для указанного раздела.
	НомерТекАктивногоЛиста = ПолучитьАктивныйНомерСтраницыРешения(ИмяЛиста,, Истина);

	// Получим номер решения, по активной текущей страницы.
	НомерРешенияАктивнойСтраницы = ПолучитьНомерРешения(ИмяЛиста, НомерТекАктивногоЛиста);

	// Определим, к какому решению относится предлагаемая для показа страница.
	НовоеРешение = ПолучитьНомерРешения(ИмяЛиста, НомерСтраницы);

	// Получим структуру решения.
	СтруктураРеш = Решения[НовоеРешение].Значение;

	// Получим структуру конкретного раздела решения, либо 9 либо 15%.
	НаборСтраниц = СтруктураРеш[ИмяЛиста];

	// Получим индекс, наименьшего значения в массиве.
	ИндексЗн = ВернутьНаименьшееЗначениеМассива(НаборСтраниц, Истина);

	// Снимем активность, у листа, который отображался ранее.
	НаборСтраниц[ИндексЗн] = НаборСтраниц[ИндексЗн] * (-1);

	// Переберем все страницы решения, к которому относится НомерСтраницы
	Для Стр1 = 0 По НаборСтраниц.Количество() - 1 Цикл

		Если Модуль(НаборСтраниц[Стр1]) = Модуль(НомерСтраницы) Тогда
			// Установим активность
			НаборСтраниц[Стр1] = НаборСтраниц[Стр1] * (-1);

			Если НовоеРешение = НомерРешенияАктивнойСтраницы Тогда
				ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(НомерСтраницы, ИмяЛиста);
				ПоказатьСтатикРазделаРешений(ИмяЛиста);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Если номер нового решения отличный от того, который был в активе, то фокусируемся на новом.
	Если НовоеРешение <> НомерРешенияАктивнойСтраницы Тогда
		// Запустится процедура отображения страницы.
		ЭлементыФормы.Решения.ТекущаяСтрока = Решения[НовоеРешение];
	КонецЕсли;

	Если ОбновитьАдресныеПеременные Тогда
		Если ИмяЛиста = "Лист03_РазделыБВ1" Тогда

			мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
			мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

		ИначеЕсли ИмяЛиста = "Лист03_РазделыБВ2" Тогда

			мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
			мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаИзРешений

// ПолучитьНомерРешения
// Функция определит номер решения, к которому относится переданный номер из структуры многостраничности.
//
Функция ПолучитьНомерРешения(ИмяЛиста, НомерЛистаВМногостраничнойСтруктуре)

	Результат = Неопределено;
	// Определим, к какому решению относится предлагаемый номер многостраничности.
	Для Инд = 0 По Решения.Количество() -1 Цикл
		СтруктураДанных = Решения[Инд].Значение;
		МассивРешений = СтруктураДанных[ИмяЛиста];

		Для Инд2 = 0 По МассивРешений.Количество() - 1 Цикл

			Если Модуль(МассивРешений[Инд2]) = Модуль(НомерЛистаВМногостраничнойСтруктуре) Тогда
				// Лист относится к этому решению.
				Результат = Инд;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьНомерРешения

Процедура РешенияПриАктивизацииСтроки(Элемент)

	ПоказатьСоответствующиеСтраницы();

КонецПроцедуры

// УдалитьЛистИзРешения
// Процедура удаляет лист из решения
// Параметры:
//  ИмяТекущейСтраницыПанели - название листа
//
Процедура УдалитьЛистИзРешения(ИмяТекущейСтраницыПанели)
	КолВоЛистов = ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницыПанели, Истина);

	Если КолВоЛистов = 1 Тогда
		Сообщить("К данному решению это единственный лист, удаление не возможно.");
		Возврат;
	КонецЕсли;

	АктивныйНомерУдаляемойСтраницыВСтруктуре = ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницыПанели, , Истина);
	АктивныйНомерУдаляемойСтраницыВСтруктуре = Модуль(АктивныйНомерУдаляемойСтраницыВСтруктуре);

	// Организуем цикл перебора имеющихся решений, чтобы изменить ссылки в структурах.
	Для Инд = 0 По Решения.Количество() - 1 Цикл

		// Получим структу данных по решению.
		СтруктураДанных = Решения[Инд].Значение;

		// Получим массив с ссылками на мСтруктуруМногостраничныхРазделов
		МассивРешений9 = СтруктураДанных[ИмяТекущейСтраницыПанели];

		// Переберем полученный массив, чтобы уменьшить ссылки на 1.

		ИндексДляУдаления = Неопределено;
		НаименьшееЗначениеВРешении = ВернутьНаименьшееЗначениеМассива(МассивРешений9);
		Для Инд2 = 0 По МассивРешений9.Количество() - 1 Цикл

			Если Модуль(МассивРешений9[Инд2]) = АктивныйНомерУдаляемойСтраницыВСтруктуре Тогда
				// Перебираемая ссылка в решениях подходит под удаляемую страницу
				ИндексДляУдаления = Инд2;
				Продолжить;
			КонецЕсли;

			Если Модуль(МассивРешений9[Инд2]) > АктивныйНомерУдаляемойСтраницыВСтруктуре Тогда
				Если МассивРешений9[Инд2] < 0 Тогда
					МассивРешений9[Инд2] = (-1) * (Модуль(МассивРешений9[Инд2]) - 1);
				Иначе
					МассивРешений9[Инд2] = МассивРешений9[Инд2] - 1;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		// Удалим из массива ссылку на мСтруктуруМногостраничныхРазделов
		Если ИндексДляУдаления <> Неопределено Тогда
			МассивРешений9.Удалить(ИндексДляУдаления);
			мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Удалить(АктивныйНомерУдаляемойСтраницыВСтруктуре);

			// Восстановим активность
			Если (ИндексДляУдаления) <= (МассивРешений9.Количество()-1) Тогда
				// Установим активность на следующий странице в массиве
				МассивРешений9[ИндексДляУдаления] = (-1) * МассивРешений9[ИндексДляУдаления];
			Иначе
				МассивРешений9[ИндексДляУдаления - 1] = (-1) * МассивРешений9[ИндексДляУдаления - 1];
			КонецЕсли;

			АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницыПанели,, Истина);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), ИмяТекущейСтраницыПанели);
			ПоказатьСтатикРазделаРешений(ИмяТекущейСтраницыПанели);
			Модифицированность = Истина;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УдалитьЛистИзРешения

// ЗаполнитьСтандартныеПараметры
// Процедура заполняет стандартные параметры, ранее эти данные заполнялись из ЗаполнитЬАвто или Расчет.
// Чтобы исключить возможность ошибок, данная процедура будет запускаться и при восстановлении данных,
// анализируя, заполненны ли уже показатели или нет.
// Параметры:
//  Нет.
//
Процедура ЗаполнитьСтандартныеПараметры()

	// Заполняем дату аванса на листе 02.
	Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецДня(КонецГода (мДатаКонцаПериодаОтчета)) Тогда
		П002000047001 = Дата(Год(мДатаКонцаПериодаОтчета), Месяц(мДатаКонцаПериодаОтчета) + 1, 28);
	Иначе
		П002000047001 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мРаздел2.Области.П002000047001.Значение) Тогда
		мРаздел2.Области.П002000047001.Значение = П002000047001;
	КонецЕсли;

	// Определяем периодичность
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
		РезультатЗначение = 3;
	Иначе
		РезультатЗначение = 11;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мРаздел2.Области.П002000046003.Значение) Тогда
		мРаздел2.Области.П002000046003.Значение = РезультатЗначение;
	КонецЕсли;

	ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
	НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
	ГодАвансов    = Год(КонецКвартала(мДатаКонцаПериодаОтчета) + 1);

	Если НЕ ЗначениеЗаполнено(мРаздел2.Области.П002000038501.Значение) Тогда
		мРаздел2.Области.П002000038501.Значение = НомерКварталаСтр;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мРаздел2.Области.П002000038500.Значение) Тогда
		мРаздел2.Области.П002000038500.ЗНачение = СтрЗаменить(Строка(ГодАвансов), Символ(160),"");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мРаздел2_Прил5а.Области.П002050022001.Значение) Тогда
		// Показатель П002050022001
		ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
		НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
		мРаздел2_Прил5а.Области.П002050022001.Значение = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКварталаСтр, 2, "0");
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	///////////////////////////////////////////////////////////////////////////////
	//	ПЕРЕНЕСЕНО ИЗ ПРОЦЕДУРЫ ПЕРЕОТКРЫТИЕМ
	
	мБезОткрытияФормы = БезОткрытияФормы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();
	
	///////////////////////////////////////////////////////////////////////////////
	//	ПЕРЕНЕСЕНО ИЗ ПРОЦЕДУРЫ ПРИОТКРЫТИИ

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	// Переменные для хранения адресов в приближенном формате к МНС
	мАдресМНСЛист03РазделБВ1 = "";
	мАдресМНСЛист03РазделБВ2 = "";

	мПанельДивидендов = "загрузка";

	// Добавим начальное решение
	Решения.Очистить();

	МассивКоординатСтраниц9процентов = Новый Массив;
	МассивКоординатСтраниц9процентов.Добавить(0);

	МассивКоординатСтраниц15процентов = Новый Массив;
	МассивКоординатСтраниц15процентов.Добавить(0);

	СтруктураПервогоРешения = Новый Структура;
	СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ1", МассивКоординатСтраниц9процентов);
	СтруктураПервогоРешения.Вставить("Лист03_РазделыБВ2", МассивКоординатСтраниц15процентов);

	Решения.Добавить(СтруктураПервогоРешения, "Решение о распределении доходов (1)");
	ЭлементыФормы.Решения.ТекущаяСтрока = Решения[0];

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица        = ЭлементыФормы.ПолеТабличногоДокументаФизЛица;
	мРаздел1_1      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел1_4      = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_4;
	мРаздел2        = ЭлементыФормы.ПолеТабличногоДокументаЛист02;
	мРаздел2_Прил1  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил1;
	мРаздел2_Прил2  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил2;
	мРаздел2_Прил4  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил4;
	мРаздел2_Прил5  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил5;
	мРаздел2_Прил5а = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил5а;
	мРаздел2_Прил6  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил6;
	мРаздел2_Прил7  = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил7;
	мРаздел3_А      = ЭлементыФормы.ПолеТабличногоДокументаЛист03_РазделА;
	мРаздел3_БВ1     = ЭлементыФормы.ПолеТабличногоДокументаЛист03_РазделыБВ1; // По ставке 6%
	мРаздел3_БВ2     = ЭлементыФормы.ПолеТабличногоДокументаЛист03_РазделыБВ2; // По ставке 15%
	мРаздел4_А      = ЭлементыФормы.ПолеТабличногоДокументаЛист04_РазделА;
	мРаздел4_Б      = ЭлементыФормы.ПолеТабличногоДокументаЛист04_РазделБ;
	мРаздел5        = ЭлементыФормы.ПолеТабличногоДокументаЛист05;
	мРаздел6        = ЭлементыФормы.ПолеТабличногоДокументаЛист06;
	мРаздел7        = ЭлементыФормы.ПолеТабличногоДокументаЛист07;
	мРаздел8        = ЭлементыФормы.ПолеТабличногоДокументаЛист08;

	мРаздел9_0      = ЭлементыФормы.ПолеТабличногоДокументаЛист09_0;
	мРаздел9_1      = ЭлементыФормы.ПолеТабличногоДокументаЛист09_1;
	мРаздел9_2      = ЭлементыФормы.ПолеТабличногоДокументаЛист09_2;
	мРаздел9_3      = ЭлементыФормы.ПолеТабличногоДокументаЛист09_3;

	мРаздел10       = ЭлементыФормы.ПолеТабличногоДокументаЛист10;
	мРаздел11       = ЭлементыФормы.ПолеТабличногоДокументаЛист11;
	мРаздел11_Прил1 = ЭлементыФормы.ПолеТабличногоДокументаЛист11_Прил1;
	мРаздел11_Прил2 = ЭлементыФормы.ПолеТабличногоДокументаЛист11_Прил2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мСтараяВерсияФормы = мВерсияФормы;
	
	// Инициализируем все переменные хранящиеся в квадратных значениях
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	Если НЕ БезОткрытияФормы Тогда

		// Получаем список налоговых, кодов КБК и КБК 2005	
		ЗагрузитьПоказателиИзМакета("КодыКБК");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		ЗагрузитьПоказателиИзМакета("ПрибыльКодыВидовПоступлений");
		ЗагрузитьПоказателиИзМакета("КодыКБК2004Раздел1_3");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_3");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_4");
		ЗагрузитьПоказателиИзМакета("КодыКБК2004Раздел1_4");

		мПустойОбразЛистаФЛ = СобратьДанныеТекущегоТаблПоля(мФизЛица);

		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован

			ВосстановитьСохраненныеДанные();

		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный     .Области["ВидДок"].Значение = 1;

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			// По умолчанию на этом листе всегда ставка процента равно значению 9
			мРаздел4_А.Области.П002100008003.Значение = 9;

			// В связи с изменениями ставки налога на прибыль по доходам в виде дивидендов с 01.01.2005,
			// по строке 090 Листа 03 Декларации указывается сумма налога в виде дивидендов, исчисленная
			// по ставке 6 процентов по выплатам, осуществленным до 01.01.2005, и сумма налога в виде дивидендов
			// по ставке 9 процентов по выплатам, осуществленным начиная с 1 января 2005 года.
			мРаздел3_А.Области.П002080008003.Значение = 9;

			ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
			НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
			мРаздел2_Прил5.Области.П002040022001.Значение = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКварталаСтр, 2, "0");

			УстановитьФорматВывода();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ЗаполнитьСтандартныеПараметры();

	ПоказатьПериод();

	Если мТитульный.Области.ТипОрг1.Значение = "V" Тогда
		ПоМестуНахожденияОрганизации = Истина;
	Иначе
		ПоМестуНахожденияОрганизации = Ложь;
	КонецЕсли;

	СохрЗначВКвадратиках();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ_();
	Иначе
		Если НЕ БезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;
		ПолучитьИННКПП();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ БезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НЕ БезОткрытияФормы Тогда
		ДоступностьКнопокДобавитьУдалить();
	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

Процедура КнопкаУдалитьДопСтраницуЛист03_РазделыБВ1Нажатие(Элемент)

	УдалитьЛистИзРешения("Лист03_РазделыБВ1")

КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛист03_РазделыБВ2Нажатие(Элемент)

	УдалитьЛистИзРешения("Лист03_РазделыБВ2")

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
    СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// ОткрытьФормуСпискаДопСтраницРешения
// Версия-вариант 12.05.2005
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраницРешения(ИмяСтраницы = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела1;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	// В процедуру внесены изменения, если на основной панели, есть ещё панель
	// то вторым параметром следует передавать имя листа
	// по умолчанию берется из основной панели, текущий лист

	ИмяТекущейСтраницыПанели = ИмяСтраницы;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела1) Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницыПанели, Истина) = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницыПанели);


	//ФормаВыбораДопСтраницы = Обработки.ОперацииРегламентированнойОтчетности.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	ФормаВыбораДопСтраницы = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаСпискаДопСтраниц", ЭтаФорма, "дляПереходаНаСтраницу");

	// ФормаВыбораДопСтраницы = Форма.ЭтотОбъект.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	Если ФормаВыбораДопСтраницы.Открыта() Тогда
		ФормаВыбораДопСтраницы.Активизировать();
		Если Вопрос("Предыдущая операция показа списка страниц не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаВыбораДопСтраницы.Закрыть();
		КонецЕсли;
	КонецЕсли;


	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРазделаНов            = Новый ТаблицаЗначений;
	ТаблицаСтраницыРазделаНов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРазделаНов.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
	ТаблицаСтраницыРазделаНов.Колонки.Добавить("Данные");

	ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
	ТекИндекс = Решения.Индекс(ТекСтрока);
	СтруктураДанных = Решения[ТекИндекс].Значение;

	МассивРешений = СтруктураДанных[ИмяТекущейСтраницыПанели];

	//Зн = ВернутьНаименьшееЗначениеМассива(МассивРешений);
	Зн_инд = ВернутьНаименьшееЗначениеМассива(МассивРешений, Истина);
	
	Для Инд = 0 По МассивРешений.Количество() - 1 Цикл
		Стр = ТаблицаСтраницыРазделаНов.Добавить();
		Стр.Представление = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели][Модуль(МассивРешений[Инд])].Представление;
		// Стр.АктивнаяСтраница = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели][Модуль(МассивРешений[Инд])].АктивнаяСтраница;
		Стр.Данные = мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели][Модуль(МассивРешений[Инд])].Данные;

		Если Инд = Зн_инд Тогда
			Стр.АктивнаяСтраница = Истина;
		Иначе
			Стр.АктивнаяСтраница = Ложь;
		КонецЕсли;

	КонецЦикла;

	ТаблицаСтраницРаздела = ТаблицаСтраницыРазделаНов.Скопировать();

	ФормаВыбораДопСтраницы.НачальноеЗначениеВыбора = ТаблицаСтраницРаздела;

	ВыбранноеЗначение = ФормаВыбораДопСтраницы.ОткрытьМодально();
	Если ВыбранноеЗначение <> Неопределено Тогда

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		//ИндексВыбСтраницы     = ИндексТекСтраницы;

		// ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();
		ВыбраннаяСтраница = ВыбрТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ПоисковоеПредставл = ВыбраннаяСтраница.Представление;
		
		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(ПоисковоеПредставл, "Представление");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		Если ИндексВыбСтраницы <> ИндексТекСтраницы Тогда
			// Если была выбрана другая страница, то отображаем ее.
			//РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(Форма, ИндексВыбСтраницы - ИндексТекСтраницы, ИмяТекущейСтраницыПанели);

			// поставим активность
			МассивРешений[ИндексВыбСтраницы] = (-1) * МассивРешений[ИндексВыбСтраницы];
			// уберем активность
			МассивРешений[ИндексТекСтраницы] = (-1) * МассивРешений[ИндексТекСтраницы];

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(МассивРешений[ИндексВыбСтраницы]), ИмяТекущейСтраницыПанели);
			ПоказатьСтатикРазделаРешений(ИмяТекущейСтраницыПанели);

		КонецЕсли;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	СохрЗначВКвадратиках();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьСведенияОбФЛ_();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мПанельДивидендов) Тогда

		// осуществлен переход с панели дивидендов, сохраним обе страницы в активном решении
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ1");
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ2");
		мПанельДивидендов = "";

	КонецЕсли;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ" Тогда
		// Необходимо определить, какая конкретно страница на этой панели активная
		// по 6% или по 15%
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя;

		Если ИмяТекущейСтраницыПанели = "Решения" Тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09" Тогда
		ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельЛиста09.ТекущаяСтраница.Имя;
	КонецЕсли;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1")
	 Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда
		ПоказатьСтатикРазделаРешений(ИмяТекущейСтраницыПанели);

	Иначе

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил6ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил7ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист04_РазделАПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаЛист04_РазделАПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист04_РазделБПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаЛист04_РазделБПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист05ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист06ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист07ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист08ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаЛист08ПриАктивизацииОбласти()

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении
// Полное обновление, начиная с листа02
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении(Элемент)

	// Обновляются все страницы, т.к. много взаимосвязей на разделах
	// по времени задержек нет, при любой заполненности разделов
	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении
// Полное обновление, начиная с Лист02_Прил1
//
Процедура ПолеТабличногоДокументаЛист02_Прил1ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил1");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил1ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил2ПриИзменении
// Полное обновление, начиная с Лист02_Прил2
//
Процедура ПолеТабличногоДокументаЛист02_Прил2ПриИзменении(Элемент)

	//ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил2");
	Расчет("Лист02_Прил2");
	Расчет("Лист02"); // данные из листа 02, прил. 2
	Расчет("Лист02_Прил4"); // Здесь данные из листа 02
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил2ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил4ПриИзменении
// Полное обновление, начиная с Лист02_Прил4
//
Процедура ПолеТабличногоДокументаЛист02_Прил4ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил4");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил4ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил5ПриИзменении
// Полное обновление, начиная с Лист02_Прил5
//
Процедура ПолеТабличногоДокументаЛист02_Прил5ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил5");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил5ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил5аПриИзменении
// Полное обновление, начиная с Лист02_Прил5
//
Процедура ПолеТабличногоДокументаЛист02_Прил5аПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил5а");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил5аПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил6ПриИзменении
// Полное обновление, начиная с Лист02_Прил6
//
Процедура ПолеТабличногоДокументаЛист02_Прил6ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил6");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил6ПриИзменении

// Процедура ПолеТабличногоДокументаЛист02_Прил6ПриИзменении
// Полное обновление, начиная с Лист02_Прил7
//
Процедура ПолеТабличногоДокументаЛист02_Прил7ПриИзменении(Элемент)

	//Расчет("Лист02_Прил7");
	ОбновитьПараметрыАвтозаполненияЯчейки();

	// Первым рассчитается текущий лист, затем по линии
	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил7");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил7ПриИзменении

// Процедура ПолеТабличногоДокументаЛист03_РазделАПриИзменении
// Полное обновление, начиная с Лист03_РазделА
//
Процедура ПолеТабличногоДокументаЛист03_РазделАПриИзменении(Элемент)

	Расчет("Лист03_РазделА");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист03_РазделАПриИзменении

// Процедура ПолеТабличногоДокументаЛист03_РазделыБВПриИзменении
// Полное обновление, начиная с Лист03_РазделыБВ
//
Процедура ПолеТабличногоДокументаЛист03_РазделыБВПриИзменении(Элемент)

	ИмяСтраницы = ЭлементыФормы.ПанелькЛисту03РазделБВ.ТекущаяСтраница.Имя;

	ИмяЯчейки = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы].ТекущаяОбласть.Имя;

	Если (ИмяЯчейки = "П002090001003") Или (ИмяЯчейки = "П002090002003") Или (ИмяЯчейки = "П002090005003") Тогда

		Расчет(ИмяСтраницы);
		Расчет("Раздел1_4");
		ОбновитьПараметрыАвтозаполненияЯчейки();
		Модифицированность = Истина;

	ИначеЕсли (ИмяЯчейки = "П002090009003") И (ИмяСтраницы = "Лист03_РазделыБВ1") Тогда

		мАдресМНСЛист03РазделБВ1 = Элемент.Значение;

	ИначеЕсли (ИмяЯчейки = "П002090009003") И (ИмяСтраницы = "Лист03_РазделыБВ2") Тогда

		мАдресМНСЛист03РазделБВ2 = Элемент.Значение;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03_РазделыБВПриИзменении

// Процедура ПолеТабличногоДокументаЛист04_РазделАПриИзменении
// Полное обновление, начиная с Лист04_РазделА
//
Процедура ПолеТабличногоДокументаЛист04_РазделАПриИзменении(Элемент)

	Расчет("Лист04_РазделА");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист04_РазделАПриИзменении

// Процедура ПолеТабличногоДокументаЛист04_РазделБПриИзменении
// Полное обновление, начиная с Лист04_РазделБ
//
Процедура ПолеТабличногоДокументаЛист04_РазделБПриИзменении(Элемент)
	// раздел не связан с другими, перерассчитывает только себя
	Расчет("Лист04_РазделБ");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура ПолеТабличногоДокументаЛист05ПриИзменении
// Полное обновление, начиная с Лист05
//
Процедура ПолеТабличногоДокументаЛист05ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист05");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист05ПриИзменении

// Процедура ПолеТабличногоДокументаЛист06ПриИзменении
// Полное обновление, начиная с Лист06
//
Процедура ПолеТабличногоДокументаЛист06ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист06");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист06ПриИзменении

// Процедура ПолеТабличногоДокументаЛист07ПриИзменении
// Полное обновление, начиная с Лист07
//
Процедура ПолеТабличногоДокументаЛист07ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист07");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаЛист07ПриИзменении

// Процедура ПолеТабличногоДокументаЛист08ПриИзменении
// Полное обновление, начиная с Лист08
//
Процедура ПолеТабличногоДокументаЛист08ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист08");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист08ПриИзменении

// Процедура ПолеТабличногоДокументаЛист09ПриИзменении
// Полное обновление, начиная с Лист09
//
Процедура ПолеТабличногоДокументаЛист09ПриИзменении(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельЛиста09.ТекущаяСтраница.Имя;

	Если ИмяТекущейСтраницыПанели = "Лист09_0" Тогда
		НомерТекущейСтраницы = "0"; // 9%
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_1" Тогда
		НомерТекущейСтраницы = "1"; // 15%
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_2" Тогда
		НомерТекущейСтраницы = "2"; // 9%
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист09_3" Тогда
		НомерТекущейСтраницы = "3"; // 15%
	КонецЕсли;

	// ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист09_" + НомерТекущейСтраницы);
	Если НомерТекущейСтраницы = "0" Тогда
		Расчет("Лист09_0"); // 9%
		Расчет("Лист09_1"); // 15%
		Расчет("Лист09_0"); // 9%
	ИначеЕсли НомерТекущейСтраницы = "2" Тогда
		Расчет("Лист09_2"); // 9%
		Расчет("Лист09_3"); // 15%
		Расчет("Лист09_2"); // 9%
	ИначеЕсли (НомерТекущейСтраницы = "1") Или (НомерТекущейСтраницы = "3") Тогда
		Расчет("Лист09_" + НомерТекущейСтраницы);
		Расчет("Лист09_" + Строка(Число(НомерТекущейСтраницы) - 1));
	КонецЕсли;

	Расчет("Лист02");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист09ПриИзменении

// Процедура ПолеТабличногоДокументаЛист10ПриИзменении
// Полное обновление, начиная с Лист10
//
Процедура ПолеТабличногоДокументаЛист10ПриИзменении(Элемент)

	Расчет("Лист10");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист10ПриИзменении

// Процедура ПолеТабличногоДокументаЛист11ПриИзменении
// Полное обновление, начиная с Лист11
//
Процедура ПолеТабличногоДокументаЛист11ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист11");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист11ПриИзменении

// Процедура ПолеТабличногоДокументаЛист11_Прил1ПриИзменении
// Полное обновление, начиная с Лист11_Прил1
//
Процедура ПолеТабличногоДокументаЛист11_Прил1ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист11_Прил1");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист11_Прил1ПриИзменении

// Процедура ПолеТабличногоДокументаЛист11_Прил2ПриИзменении
// Полное обновление, начиная с Лист11_Прил2
//
Процедура ПолеТабличногоДокументаЛист11_Прил2ПриИзменении(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист11_Прил2");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист11_Прил2ПриИзменении

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)

	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);

	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		// СтруктураАдресныхДанных.Вставить("Индекс", мФизЛицИнд);

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		   + мФизЛица.Области.ФизЛицИнд2.Значение
		   + мФизЛица.Области.ФизЛицИнд3.Значение
		   + мФизЛица.Области.ФизЛицИнд4.Значение
		   + мФизЛица.Области.ФизЛицИнд5.Значение
		   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			мФизЛицИнд = Индекс;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Область.Имя = "ФизЛицПолМ")
	Или (Область.Имя = "ФизЛицПолЖ") Тогда

		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;

		Если Область.ЗНачение = "V" Тогда
			Область.Значение = "";
			Возврат;
		КонецЕсли;

		Область.ЗНачение = "V";

		Если Область.Имя = "ФизЛицПолМ" Тогда
			мФизЛица.Области.ФизЛицПолЖ.Значение = "";
		Иначе
			мФизЛица.Области.ФизЛицПолМ.Значение = "";
		КонецЕсли;
	КонецЕсли;

	Если (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

Процедура КнопкаПредыдущаяСтраницаФизЛицаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура КнопкаСледующаяСтраницаФизЛицаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуФизЛицаНажатие(Элемент)
	
	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();

КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуФизЛицаНажатие(Элемент)

	// модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(-1);
	УдалитьДополнительнуюСтраницу();

КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуФизЛицаНажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1_4Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1_4Нажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел1_4Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1_4Нажатие

Процедура КнопкаУдалитьДопСтраницуРаздел1_4Нажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1);
	УдалитьДополнительнуюСтраницу();
	УстановитьЦветФонаЯчейки(,, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1_4Нажатие

Процедура КнопкаПерейтиНаСтраницуРаздел1_4Нажатие(Элемент)
	
		ОткрытьФормуСпискаДопСтраниц();
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Лист 02" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияЛист02ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02ПриИзменении(Элемент)
	Перем Комментарий;
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист02_Прил1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.1 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.1 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил1ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении"
// ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.2 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.2 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил2ПриИзменении()

// Процедура обработчик "Выбор"
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил4ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил4ПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице Прил.4 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил4ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.4 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил4ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил4ПриИзменении()

// Процедура - обработчик нажатия кнопки "<" на странице "Прил.5а к Листу 02"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил5аНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2_5аНажатие()

// Процедура - обработчик нажатия кнопки ">" на странице "Прил.5а к Листу 02"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил5аНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел2_5аНажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Прил.5а к Листу 02" основной панели формы.
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил5аНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел2_5аНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице
// "Прил.5а к Листу 02" основной панели формы.
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил5аНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1);
	УдалитьДополнительнуюСтраницу();
	// если включен режим автоподсчета страниц, то делаем

	ПоследовательноеЗаполнениеЛистовДеклРасчет("Лист02_Прил5а");


КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел2_5аНажатие()

Процедура КнопкаПерейтиНаСтраницуЛист02_Прил5аНажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел2_5аНажатие

Процедура ПолеВыбораВариантЗаполненияЛист02_Прил6ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил6ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.6 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_Прил6ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_Прил6ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.6 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийРаздел2_Прил6ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_Прил6ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист02_Прил7ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.7 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил7ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил7ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.7 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил7ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил7ПриИзменении()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Лист03 (Раздел А)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиЛист03_РазделАНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиЛист03_РазделАНажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку на странице "Лист03 (Раздел А)" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиЛист03_РазделАНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиЛист03_РазделАНажатие()

// Процедура - обработчик нажатия кнопки "<" на странице "Лист 03 (Разделы Б, В)"
// основной панели формы.
//
Процедура КнопкаПредыдущаяСтраницаЛист03_РазделыБВНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя;

	Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1")
	Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда

		ПоказатьСтраницуРешения(ИмяТекущейСтраницыПанели, -1);

	Иначе

		ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист03_РазделыБВНажатие()

Процедура КнопкаУдалитьДополнительноеРешениеЛист03БВ(Элемент)

	// Удаляем целиком решение и пачку доп. листов к нему, по 9 и 15 проц.

	Если Решения.Количество() = 1 Тогда
		Сообщить("Нельзя удалить единственное решение. Воспользуйтесь кнопкой Очистить, чтобы очистить все разделы декларации.");
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Внимание! Будет удалено текущее решение о распределении доходов." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

	ТаблицаСтраницыРаздела15            = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела15.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела15.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
	ТаблицаСтраницыРаздела15.Колонки.Добавить("Данные");

	ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
	ТекИндекс = Решения.Индекс(ТекСтрока);
	СтруктураДанных = Решения[ТекИндекс].Значение;

	МассивРешений9 = СтруктураДанных.Лист03_РазделыБВ1;
	МассивРешений15 = СтруктураДанных.Лист03_РазделыБВ2;

	Для Инд = 0 По Решения.Количество() - 1 Цикл

		СтруктураДанных = Решения[Инд].Значение;

		МассивРешений9 = СтруктураДанных.Лист03_РазделыБВ1;
		МассивРешений15 = СтруктураДанных.Лист03_РазделыБВ2;

		ПодлежитУдалениюСмещение = Ложь;

		Если Инд >= ТекИндекс Тогда
			ПодлежитУдалениюСмещение = Истина;
		КонецЕсли;

		Если НЕ ПодлежитУдалениюСмещение Тогда

			Для Инд2 = 0 По МассивРешений9.Количество() - 1 Цикл
				Стр = ТаблицаСтраницыРаздела.Добавить();
				Стр.Представление = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].Представление;
				Стр.АктивнаяСтраница = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].АктивнаяСтраница;
				Стр.Данные = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].Данные;

				// запишем новые координаты листа
				ЛистБылАктивным = ?(МассивРешений9[Инд2] <= 0, Истина, Ложь);
				МассивРешений9[Инд2] = ?(ЛистБылАктивным, ((-1) * (ТаблицаСтраницыРаздела.Количество() - 1)), ТаблицаСтраницыРаздела.Количество() - 1);

			КонецЦикла;

			Для Инд2 = 0 По МассивРешений15.Количество() - 1 Цикл
				Стр = ТаблицаСтраницыРаздела15.Добавить();
				Стр.Представление = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].Представление;
				Стр.АктивнаяСтраница = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].АктивнаяСтраница;
				Стр.Данные = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].Данные;

				// запишем новые координаты листа
				ЛистБылАктивным = ?(МассивРешений15[Инд2] <= 0, Истина, Ложь);
				МассивРешений15[Инд2] = ?(ЛистБылАктивным, ((-1) * (ТаблицаСтраницыРаздела15.Количество() - 1)), ТаблицаСтраницыРаздела15.Количество() - 1);

			КонецЦикла;


		Иначе
			Если Инд = ТекИндекс Тогда
				// чистое удаление
			Иначе


				Для Инд2 = 0 По МассивРешений9.Количество() - 1 Цикл
					Стр = ТаблицаСтраницыРаздела.Добавить();
					Стр.Представление = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].Представление;
					Стр.АктивнаяСтраница = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].АктивнаяСтраница;
					Стр.Данные = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ1[Модуль(МассивРешений9[Инд2])].Данные;
					
					ЛистБылАктивным = ?(МассивРешений9[Инд2] <= 0, Истина, Ложь);
					МассивРешений9[Инд2] = ?(ЛистБылАктивным, ((-1) * (ТаблицаСтраницыРаздела.Количество() - 1)), ТаблицаСтраницыРаздела.Количество() - 1);

				КонецЦикла;

				Для Инд2 = 0 По МассивРешений15.Количество() - 1 Цикл

					Стр = ТаблицаСтраницыРаздела15.Добавить();
					Стр.Представление = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].Представление;
					Стр.АктивнаяСтраница = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].АктивнаяСтраница;
					Стр.Данные = мСтруктураМногостраничныхРазделов.Лист03_РазделыБВ2[Модуль(МассивРешений15[Инд2])].Данные;

					ЛистБылАктивным = ?(МассивРешений15[Инд2] <= 0, Истина, Ложь);
					МассивРешений15[Инд2] = ?(ЛистБылАктивным, ((-1) * (ТаблицаСтраницыРаздела15.Количество() - 1)), ТаблицаСтраницыРаздела15.Количество() - 1);

				КонецЦикла;
	
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Непосредственно удалим строку решения
	мПанельДивидендов = "удаление";
	Решения.Удалить(ТекИндекс);
	ПоказатьСоответствующиеСтраницы();
	Модифицированность = Истина;

	мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ1", ТаблицаСтраницыРаздела);
	мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ2", ТаблицаСтраницыРаздела15);

КонецПроцедуры

// ОпределитьПредставлениеДопСтраниц
// Процедура присваивает дополнительным листам многостраничных разделов
// уникальные имена (представление).
// Если ИмяСтраницы - неопределено, тогда по всем страницам
// ТолькоУАктивнойСтраницы - Если Истина то только у активной страницы меняется представление
// ТолькоУАктивнойСтраницы = Ложь или Неопределено - тогда у всех в структуре
//
Процедура ОпределитьПредставлениеДопСтраницПоРешению(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Возьмем активную страницу
	АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения(ИмяСтраницы,, Истина);
	СтрокаТаблицы = ТаблицаСтраницРаздела[Модуль(АктивнаяСтраница)];

	ИмяПредставления = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "ИмяПредставления");
	СтруктураДанныхСтраницы = СтрокаТаблицы.Данные;
	СтруктураДанныхСтраницы.Свойство(ИмяПредставления, ТекущееПредставлениеСтраницы);

	НомерСтраницы = ПолучитьАктивныйНомерСтраницыРешения(ИмяСтраницы,, Ложь) + 1;
	ТекущееПредставлениеСтраницы = ?(РегламентированнаяОтчетность.ПустоеЗначение(ТекущееПредставлениеСтраницы), "Лист N " + Строка(НомерСтраницы), ТекущееПредставлениеСтраницы + ". Лист N " + Строка(НомерСтраницы));
	Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
		СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
	Иначе
		СтрокаТаблицы.Представление = "Новая страница";
	КонецЕсли;

КонецПроцедуры // роОпределитьПредставлениеДопСтраниц

// Процедура - обработчик нажатия кнопки ">" на странице "Лист 03 (Разделы Б, В)"
// основной панели формы.
//
Процедура КнопкаСледующаяСтраницаЛист03_РазделыБВНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя;

	Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1")
	Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда

		ПоказатьСтраницуРешения(ИмяТекущейСтраницыПанели, 1);

	Иначе

		ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // КнопкаСледующаяСтраницаЛист03_РазделыБВНажатие()

Процедура КнопкаИзменитьНазваниеРешения(Элемент)

	ВвестиНазваниеРешения();

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Добавить" на странице
// "Лист 03 (Разделы Б, В)" основной панели формы. На дополнительной панели для этого раздела.
//
Процедура КнопкаДобавитьДопСтраницуЛист03_РазделыБВНажатие(Элемент)

	ИмяЛиста = ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя;
	Модифицированность = Истина;

	Если ИмяЛиста <> "Решение" Тогда

		ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяЛиста);

		Ставка = мРаздел3_БВ2.Области.П002090003003.Значение;

		ВставитьДополнительнуюСтраницуПоРешениям(ИмяЛиста);

		мРаздел3_БВ2.Области.П002090003003.Значение = Ставка;

		// Обнулим переменные адресов
		Если ИмяЛиста = "Лист03_РазделыБВ1" Тогда
			мАдресМНСЛист03РазделБВ1 = "";
			Расчет(ИмяЛиста);
		ИначеЕсли ИмяЛиста = "Лист03_РазделыБВ2" Тогда
			мАдресМНСЛист03РазделБВ2 = "";
			Расчет(ИмяЛиста);
		КонецЕсли;

		ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
		ТекИндекс = Решения.Индекс(ТекСтрока);
		СтруктураДанных = Решения[ТекИндекс].Значение;
		МассивРешений = СтруктураДанных[ИмяЛиста];

		Для Инд = 0 По МассивРешений.Количество() - 1 Цикл

			// Снимем активность

			Если МассивРешений[Инд] < 0 Тогда
				МассивРешений[Инд] = (-1) * МассивРешений[Инд];
			КонецЕсли;
		КонецЦикла;

		// поставим активность
		МассивРешений.Добавить((-1) * (мСтруктураМногостраничныхРазделов[ИмяЛиста].Количество() - 1));
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяЛиста);

		ПоказатьСтатикРазделаРешений(ИмяЛиста);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист03_РазделыБВНажатие()

// Процедура - обработчик нажатия кнопки "Перейти" на странице
// "Лист 03 (Разделы Б, В)" основной панели формы.
//
Процедура КнопкаПерейтиНаСтраницуЛист03_РазделыБВНажатие(Элемент)
	Перем АдресНач;
	Перем АдресНач2;

	// Для отображения всех страниц многостраничного раздела
	// необходимо в функцию ОткрытьФормуСпискаДопСтраниц
	// передать вторым параметром имя страницы
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Лист03_РазделыБВ" Тогда

		Если ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя = "Лист03_РазделыБВ1" Тогда
			АдресНач = мРаздел3_БВ1.Области.П002090009003.Значение;
		Иначе
			АдресНач = мРаздел3_БВ2.Области.П002090009003.Значение;
		КонецЕсли;

		//РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя);
		ОткрытьФормуСпискаДопСтраницРешения(ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя);

		Если ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя = "Лист03_РазделыБВ1" Тогда
			АдресНач2 = мРаздел3_БВ1.Области.П002090009003.Значение;
		Иначе
			АдресНач2 = мРаздел3_БВ2.Области.П002090009003.Значение;
		КонецЕсли;


		Если АдресНач <> АдресНач2 Тогда

			Если ЭлементыФормы.ПанельКЛисту03РазделБВ.ТекущаяСтраница.Имя = "Лист03_РазделыБВ1" Тогда
				мАдресМНСЛист03РазделБВ1 = мРаздел3_БВ1.Области.П002090009003.Значение;
				мРаздел3_БВ1.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);
			Иначе
				мАдресМНСЛист03РазделБВ2 = мРаздел3_БВ2.Области.П002090009003.Значение;
				мРаздел3_БВ2.Области.П002090009003.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);
			КонецЕсли;

		КонецЕсли;

	Иначе

		РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

	КонецЕсли;


КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист03_РазделыБВНажатие()

// Процедура ПолеВыбораВариантЗаполненияЛист04_РазделАПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияЛист04_РазделАПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист04_РазделАПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 04 (Раздел А)" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист04_РазделАПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист04_РазделАПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 04 (Раздел А)" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист04_РазделАПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист04_РазделАПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист04_РазделБПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист04_РазделБПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 04 (Раздел Б)" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист04_РазделБПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист04_РазделБПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 04 (Раздел Б)" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист04_РазделБПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист04_РазделБПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист05ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист05ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 05" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист05ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист05ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 05" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист05ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист05ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист06ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист06ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 06" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист06ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист06ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 06" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист06ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист06ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист07ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист07ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 07" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист07ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист07ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 07" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист07ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист07ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист08ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист08ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел 2.1" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист08ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2_1ПриИзменении()

Процедура КнопкаДобавитьДопСтрокиЛист10Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиЛист10Нажатие()

Процедура КнопкаУдалитьДопСтрокиЛист10Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиЛист10Нажатие()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	ЗаполнитьСведенияОбФЛ_(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				//Ключ = ?(Ключ = "_-1", "_0", Ключ);

				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				// Если в названии КодПоказателяПоСтруктуре, первый символ _ означает, что
				// на форме в однозначном виде такого показателя нет, необходимо использовать только КодПоказателя
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, ?(Лев(КодПоказателяПоСтруктуре, 1) = "_", Ложь, Истина));

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					СвойстваГрупповыхЗначений(ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении150
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении150(Элемент)

	// Если ячейка имеет связь с другими показателями
	// из других листов, то выдать предупреждение о линке
	
	//Если ПолучитьЗначениеПоказателя("П002000015003") = 3 Тогда
	//	//Предупреждение("Данный показатель связан с Приложением 4, Листа 02, строка 100. Вам необходимо заполнить эту строку либо снять признак автоматического заполнения значения для этой ячейки.");				
	//	
	//	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил4.Видимость Тогда
	//		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил4;
	//	КонецЕсли;
	//КонецЕсли;

	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении150

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении010
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении010(Элемент)
	// Если ячейка имеет связь с другими показателями
	// из других листов, то выдать предупреждение о линке
	
	//Если ПолучитьЗначениеПоказателя("П002000001003") = 3 Тогда
	//	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил1.Видимость Тогда
	//		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил1;
	//	КонецЕсли;
	//КонецЕсли;

	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении010

// Процедура ПолеТабличногоДокументаЛист10ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист10ПриАктивизацииОбласти(Элемент)
	// Вставить содержимое обработчика.
	
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаЛист10ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении220
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении220(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении220

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении230
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении230(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении230

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении240
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении240(Элемент)

	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении240

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении020
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении020(Элемент)
	// Если ячейка имеет связь с другими показателями
	// из других листов, то выдать предупреждение о линке
	
	//Если ПолучитьЗначениеПоказателя("П002000002003") = 3 Тогда
	//	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил2.Видимость Тогда
	//		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил2;
	//	КонецЕсли;

	//	
	//КонецЕсли;
	
	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриИзменении020

// Процедура ПолеТабличногоДокументаЛист02ПриИзменении030
//
Процедура ПолеТабличногоДокументаЛист02ПриИзменении030(Элемент)
		// Если ячейка имеет связь с другими показателями
		// из других листов, то выдать предупреждение о линке		
		
		//Если ПолучитьЗначениеПоказателя("П002000003003") = 3 Тогда
		//
		//// Предупреждение("Данный показатель связан с Приложением 6, Листа 02, строка 010. Вам необходимо заполнить эту строку, либо снять признак автоматического заполнения значения для этой ячейки.");
		//
		//Если ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил6.Видимость Тогда
		//	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Лист02_Прил6;			
		//КонецЕсли;

		//КонецЕсли;

	
	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПолеТабличногоДокументаЛист02ПриИзменении030(Элемент)

// Загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				Если РазделВМакете = "Льготы" Тогда
					// НовСтрока = мНалоговыеЛьготыИмущество.Добавить();
				КонецЕсли;
				
				Если РазделВМакете = "КодыКБК" Тогда
					НовСтрока = мКодыБюджетнойКлассификации.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
				ИначеЕсли РазделВМакете = "ПрибыльКодыВидовПоступлений" Тогда
					НовСтрока = мПрибыльКодыВидовПоступлений.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2004Раздел1_3" Тогда
					НовСтрока = мКодыКБК2004Раздел1_3.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_3" Тогда
					НовСтрока = мКодыКБК2005Раздел1_3.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_4" Тогда
					НовСтрока = мКодыКБК2005Раздел1_4.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2004Раздел1_4" Тогда
					НовСтрока = мКодыКБК2004Раздел1_4.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Подраздел 1.1 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Подраздел 1.2 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Подраздел 1.3 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_4";
	СтрокаУровня1.Представление            = "Подраздел 1.4 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02";
	СтрокаУровня1.Представление            = "Лист 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил4";
	СтрокаУровня1.Представление            = "Приложение 4 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил5";
	СтрокаУровня1.Представление            = "Приложение 5 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил5а";
	СтрокаУровня1.Представление            = "Приложение 5а к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил5а";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил6";
	СтрокаУровня1.Представление            = "Приложение 6 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил7";
	СтрокаУровня1.Представление            = "Приложение 7 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03_РазделА";
	СтрокаУровня1.Представление            = "Лист 03 (Раздел А)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03_РазделА";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03_РазделыБВ1";
	СтрокаУровня1.Представление            = "Лист 03 (Разделы Б, В), ставка 9%";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03_РазделыБВ1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03_РазделыБВ2";
	СтрокаУровня1.Представление            = "Лист 03 (Разделы Б, В), ставка 15%";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03_РазделыБВ2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04_РазделА";
	СтрокаУровня1.Представление            = "Лист 04 (Раздел А)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист04_РазделА";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04_РазделБ";
	СтрокаУровня1.Представление            = "Лист 04 (Раздел Б)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист04_РазделБ";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист05";
	СтрокаУровня1.Представление            = "Лист 05";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист05";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист06";
	СтрокаУровня1.Представление            = "Лист 06";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист06";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист07";
	СтрокаУровня1.Представление            = "Лист 07";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист07";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист08";
	СтрокаУровня1.Представление            = "Лист 08";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист08";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист09_0";
	СтрокаУровня1.Представление            = "Лист 09. По доходам, полученным от размещения средств пенсионных резервов. Ставка 9%.";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист09_0";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист09_1";
	СтрокаУровня1.Представление            = "Лист 09. По доходам, полученным от размещения средств пенсионных резервов. Ставка 15%.";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист09_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист09_2";
	СтрокаУровня1.Представление            = "Лист 09. По доходам, от инвестирования средств пенсионных накоплений. Ставка 9%.";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист09_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист09_3";
	СтрокаУровня1.Представление            = "Лист 09. По доходам, от инвестирования средств пенсионных накоплений. Ставка 15%.";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист09_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист10";
	СтрокаУровня1.Представление            = "Лист 10";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист10";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист11";
	СтрокаУровня1.Представление            = "Лист 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист11";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист11_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Листу 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист11_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист11_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к Листу 11";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист11_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура ПолеТабличногоДокументаРаздел1_4Выбор
// 
Процедура ПолеТабличногоДокументаРаздел1_4Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК", мКБКРаздел1_4);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_4);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если Найти(Ячейка, "КодОКАТО_1_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = мКодОкатоРаздел1_4;

		Если ВвестиСтроку (НачЗначение,"Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				мКодОкатоРаздел1_4 = НачЗначение;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_4","КодОКАТО_1_", 11, мКодОкатоРаздел1_4);
				Модифицированность = Истина;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "КБК") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2004 Тогда
				ТЗДляВыбораКБК = мКодыКБК2004Раздел1_4;
			Иначе
				ТЗДляВыбораКБК = мКодыКБК2005Раздел1_4;
			КонецЕсли;

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(мКБКРаздел1_4, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

			Если Результат = Неопределено Тогда
				Возврат; // Отказались от выбора, окно закрыто
			КонецЕсли;

		Иначе

			Значение = мКБКРаздел1_4;
			КолЗнаков = ?(Год(ДатаПодписи) <= 2004, 7, 20);
			Если НЕ ВвестиСтроку(Значение, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			КонецЕсли;

			Результат = Значение;

		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			мКБКРаздел1_4 = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_4",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), 20, мКБКРаздел1_4);
			Модифицированность = Истина;

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", мКБКРаздел1_4);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_4);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мКДоплатеРаздел1_4, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 030 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мКУменьшениюРаздел1_4, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		Конецесли;

	ИначеЕсли Найти(Ячейка, "СрокУплаты") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 11) + "Раздел1_4";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиДату(НачЗначение, "По сроку", ЧастиДаты.Дата) Тогда
			Если КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_4" Тогда
				мСрокУплаты1Раздел1_4 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_4" Тогда
				мСрокУплаты2Раздел1_4 = НачЗначение;
			КонецЕсли;

			НачЗначениеСтр = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_4",Сред(Ячейка, 1, 11), 8, НачЗначениеСтр);
			Модифицированность = Истина;
		КонецЕсли;

	//ИначеЕсли (Найти(Ячейка, "КДоплате") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	ИначеЕсли (Найти(Ячейка, "КДоплате") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		НачЗначение = мКДоплатеРаздел1_4;
		СтандартнаяОбработка = Ложь;

		Если ВвестиЧисло(НачЗначение, "Сумма налога к доплате", 15, 2) Тогда
			мКДоплатеРаздел1_4 = НачЗначение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_4","КДоплате", 15, мКДоплатеРаздел1_4, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мКДоплатеРаздел1_4, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	//ИначеЕсли (Найти(Ячейка, "КУменьшению") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	ИначеЕсли (Найти(Ячейка, "КУменьшению") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда

		НачЗначение = мКУменьшениюРаздел1_4;
		СтандартнаяОбработка = Ложь;

		Если ВвестиЧисло(НачЗначение, "Сумма налога к уменьшению", 15, 2) Тогда
			мКУменьшениюРаздел1_4 = НачЗначение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_4","КУменьшению", 15, мКУменьшениюРаздел1_4, Истина);
			Модифицированность = Истина;
			Если ВозможнаОшибкаВвода(мКУменьшениюРаздел1_4, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // Выбор Раздел1_4

// ВозможнаОшибкаВвода
//
Функция ВозможнаОшибкаВвода(Знач Сумма, Знач ТекстПараметр)

	Если НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(Сумма) Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";
	СуммаКакНаЛистеДекларации = Формат(Сумма, СтрокаФорматаЯчейки);

	Сумма = Модуль(Сумма);
	СуммаЦелСтр = Строка(Цел(Сумма));
	СуммаЦелСтр = СтрЗаменить(СуммаЦелСтр, Символ(160), "");
	СуммаДрСтр = Сред(Строка(Сумма - Цел(Сумма)),3);
	СуммаОбщКакЕсть = СуммаЦелСтр + ?(СуммаДрСтр <> "0", СуммаДрСтр, "");

	СтруктураСумм = Новый Структура("Сумма1, Сумма2", СуммаОбщКакЕсть, СуммаКакНаЛистеДекларации);

	РезультатГлоб = Ложь;
	Для Каждого Стр Из СтруктураСумм Цикл

		СуммаОбщ = Стр.Значение;
		Если СтрДлина(СуммаОбщ) < 9 Тогда
			Продолжить; // Не проверяем такие показатели
		КонецЕсли;

		Если ТипЗнч(ТекстПараметр) = Тип("Строка") Тогда

			Если СтрДлина(ТекстПараметр) = 12 И Найти(ТекстПараметр, "00") = 1 Тогда
				// Делаем предположение, что данный параметр ИНН, с лидирующими нулями.
				ТекстПараметр = Сред(ТекстПараметр, 3);
			КонецЕсли;

			Если Найти(ТекстПараметр, СуммаОбщ) > 0 Тогда
				РезультатГлоб = Истина;
				Прервать;
			Иначе
				РезультатГлоб = Ложь;
			КонецЕсли;

		Иначеесли ТипЗнч(ТекстПараметр) = Тип("Структура") Тогда
			Результат = Ложь;
			Для Каждого Стр Из ТекстПараметр Цикл

				ЗначениеИзСтруктуры = Стр.Значение;

				Если (Найти(Стр.Ключ, "ИНН") > 0) И Найти(ЗначениеИзСтруктуры, "00") = 1 Тогда
					// Делаем предположение, что данный параметр ИНН, с лидирующими нулями.
					ЗначениеИзСтруктуры = Сред(ЗначениеИзСтруктуры, 3);
				КонецЕсли;
				
				Если Найти(ЗначениеИзСтруктуры, СуммаОбщ) > 0 Тогда
					Результат = Истина;
					РезультатГлоб = Истина;
					Прервать;
				Иначе
					Результат = Ложь;
					РезультатГлоб = Ложь;
				КонецЕсли;

			КонецЦикла;

			Если Результат Тогда
				Прервать;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;

	Возврат РезультатГлоб;

КонецФункции // ВозможнаОшибкаВвода

// ПроверкаВводаДанных
//
// Параметры:
// ВыводитьСообщения - выводить сообщения
// НазваниеРаздела   - название раздела декларации или пусто - все листы
//
// Возвращаемое значение:
// Массив с текстами ошибок
//
Функция ПроверкаВводаДанных(ВыводитьСообщения, НазваниеРаздела = "")

	Результат = Новый Массив;

	ОбновитьСтруктуруМногостраничныхРазделов();

	Если НазваниеРаздела = "Раздел1_1" Или НазваниеРаздела = "" Тогда
		// Раздел не многостраничный!
		Результат = ПроверкаРаздела1_1(ВыводитьСообщения);
	КонецЕсли;

	Если НазваниеРаздела = "Раздел1_2" Или НазваниеРаздела = "" Тогда
		// Раздел не многостраничный!
		Ошибки = ПроверкаРаздела1_2(ВыводитьСообщения);

		Для каждого Стр из Ошибки Цикл
			Результат.Добавить(Стр);
		КонецЦикла;

	КонецЕсли;

	Если НазваниеРаздела = "Раздел1_3" Или НазваниеРаздела = "" Тогда
		// Раздел многостраничный!
		Ошибки = ПроверкаРаздела1_3(ВыводитьСообщения);

		Для каждого Стр из Ошибки Цикл
			Результат.Добавить(Стр);
		КонецЦикла;

	КонецЕсли;

	Если НазваниеРаздела = "Раздел1_4" Или НазваниеРаздела = "" Тогда
		// Раздел многостраничный!
		Ошибки = ПроверкаРаздела1_4(ВыводитьСообщения);

		Для каждого Стр из Ошибки Цикл
			Результат.Добавить(Стр);
		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаВводаДанных

// ПроверкаРаздела1_1
//
Функция ПроверкаРаздела1_1(ВыводитьСообщения)

	Результат = Новый Массив;

	// ***
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_1);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_1);
	СтруктураПроверки.Вставить("КБК3", мКБКвМБРаздел1_1);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 090 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 100 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_1

// ПроверкаРаздела1_2
//
Функция ПроверкаРаздела1_2(ВыводитьСообщения)

	Результат = Новый Массив;

	// ***
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_2);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_2);
	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку1Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 120 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку2Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 130 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку3Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку1Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 220 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку2Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 230 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку3Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 240 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_2

// ПроверкаРаздела1_3
//
Функция ПроверкаРаздела1_3(ВыводитьСообщения)

	Результат = Новый Массив;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	НомерЛиста = 1;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1_3 Цикл

		СтруктураПроверки.Вставить("КБК", Страница.Данные.КБКРаздел1_3);
		СтруктураПроверки.Вставить("ОКАТО", Страница.Данные.КодОкатоРаздел1_3);

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога1Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 030  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога2Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 050  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога3Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 070  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_2

// ПроверкаРаздела1_4
//
Функция ПроверкаРаздела1_4(ВыводитьСообщения)

	Результат = Новый Массив;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	НомерЛиста = 1;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1_4 Цикл

		СтруктураПроверки.Вставить("КБК", Страница.Данные.КБКРаздел1_4);
		СтруктураПроверки.Вставить("ОКАТО", Страница.Данные.КодОкатоРаздел1_4);

		Если ВозможнаОшибкаВвода(Страница.Данные.КДоплатеРаздел1_4, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.4, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 040  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.КУменьшениюРаздел1_4, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.4, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 060  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_4

// Процедура ПолеТабличногоДокументаРаздел1_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветАвто;

	Ячейка = Элемент.ТекущаяОбласть;
	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_1);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_1);
	СтруктураПроверки.Вставить("КБК3", мКБКвМБРаздел1_1);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если Найти(Ячейка.Имя,"КодОКАТО_1_")>0 Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = мКодОкатоРаздел1_1;

		Если ВвестиСтроку (НачЗначение,"Введите код ОКАТО",11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				мКодОкатоРаздел1_1 = НачЗначение;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","КодОКАТО_1_", 11, мКодОкатоРаздел1_1);
				Модифицированность = Истина;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя,"КБКвФБ_") > 0)
	Или (Найти(Ячейка.Имя,"КБКвБС_") > 0)
	Или (Найти(Ячейка.Имя,"КБКвМБ_") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если Найти(Ячейка.Имя,"КБКвФБ_") > 0 Тогда
			ТекКБК = мКБКвФБРаздел1_1;
			КодПоСтруктуре = "КБКвФБРаздел1_1";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвБС_") > 0 Тогда
			ТекКБК = мКБКвБСРаздел1_1;
			КодПоСтруктуре = "КБКвБСРаздел1_1";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвМБ_") > 0 Тогда
			ТекКБК = мКБКвМБРаздел1_1;
			КодПоСтруктуре = "КБКвМБРаздел1_1";
		КонецЕсли;

		Если Год(ДатаПодписи) <= 2004 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации;
			КолЗнаков = 7;
		Иначе

			Если Год(ДатаПодписи) <= 2005 Тогда
				ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
			КонецЕсли;

			КолЗнаков = 20;
		КонецЕсли;

		Если НЕ мАвтоВыборКодов Тогда

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(ТекКБК, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;
		КонецЕсли;
		
		Если мАвтоВыборКодов Тогда

			Если НЕ ВвестиСтроку(ТекКБК, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = ТекКБК;
			КонецЕсли;

		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат; // Отказались от выбора, окно закрыто
		КонецЕсли;

		ИтРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));

		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1",РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка.Имя), 20, ИтРезультат);
			Модифицированность = Истина;

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", ИтРезультат);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 090 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 100 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;


	ИначеЕсли Найти(Ячейка.Имя,"СрокУплаты_")>0 Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = мСрокУплатыРаздел1_1;

		Если ВвестиДату (НачЗначение,"Выберите дату",ЧастиДаты.Дата) Тогда

			мСрокУплатыРаздел1_1 = НачЗначение;
			стрВыбДата = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СрокУплаты_",8, стрВыбДата);
			Модифицированность = Истина;

		КонецЕсли;
	
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаДоплФед") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаДоплФедРаздел1_1, "Сумма налога к доплате", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаДоплФед_", 15, мСуммаДоплФедРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаУменФед") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаУменФедРаздел1_1, "Сумма налога к уменьшению", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаУменФед_", 15, мСуммаУменФедРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;


	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехФед") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаПерехФедРаздел1_1, "Сумма налога с НБ переходного периода", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаПерехФед_", 15, мСуммаПерехФедРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаДоплСуб") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаДоплСубРаздел1_1, "Сумма налога к доплате", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаДоплСуб_", 15, мСуммаДоплСубРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаУменСуб") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаУменСубРаздел1_1, "Сумма налога к уменьшению", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаУменСуб", 15, мСуммаУменСубРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 090 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехСуб") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаПерехСубРаздел1_1, "Сумма налога с НБ переходного периода", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаПерехСуб", 15, мСуммаПерехСубРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 100 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Ячейка.ЦветФона <> ЦветАвто)
	И (Найти(Ячейка.Имя, "СуммаДоплМест") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаДоплМестРаздел1_1, "Сумма налога к доплате", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаДоплМест", 15, мСуммаДоплМестРаздел1_1, Истина);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Ячейка.ЦветФона <> ЦветАвто)
	И (Найти(Ячейка.Имя, "СуммаУменМест") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ВвестиЧисло(мСуммаУменМестРаздел1_1, "Сумма налога к уменьшению", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаУменМест", 15, мСуммаУменМестРаздел1_1, Истина);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехМест") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда

		СтандартнаяОбработка = Ложь;

		Если ВвестиЧисло(мСуммаПерехМестРаздел1_1, "Сумма налога с НБ переходного периода", 15, 2) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СуммаПерехМест", 15, мСуммаПерехМестРаздел1_1, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	
КонецПроцедуры

// Процедура ПолеТабличногоДокументаРаздел1_3Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК", мКБКРаздел1_3);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_3);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если Найти(Ячейка,"КодОКАТО_1_") > 0 Тогда

		НачЗначение = мКодОкатоРаздел1_3;
		СтандартнаяОбработка = Ложь;
		Если ВвестиСтроку (НачЗначение,"Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				мКодОкатоРаздел1_3 = НачЗначение;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3","КодОКАТО_1_", 11, мКодОкатоРаздел1_3);
				Модифицированность = Истина;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;
		КонецЕсли;


	ИначеЕсли Найти(Ячейка, "КБК") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		Если НЕ мАвтоВыборКодов Тогда

			Если Год(ДатаПодписи) <= 2004 Тогда
				ТЗДляВыбораКБК = мКодыКБК2004Раздел1_3;
			Иначе
				ТЗДляВыбораКБК = мКодыКБК2005Раздел1_3;
			КонецЕсли;

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(мКБКРаздел1_3, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

			Если Результат = Неопределено Тогда
				Возврат; // Отказались от выбора, окно закрыто
			КонецЕсли;

		Иначе

			Значение = мКБКРаздел1_3;

			КолЗнаков = ?(Год(ДатаПодписи) <= 2004, 7, 20);

			Если НЕ ВвестиСтроку(Значение, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			КонецЕсли;

			Результат = Значение;

		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Значение = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));
			мКБКРаздел1_3 = Значение;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), 20, мКБКРаздел1_3);
			Модифицированность = Истина;

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", мКБКРаздел1_3);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_3);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мСуммаНалога1Раздел1_3, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 030 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаНалога2Раздел1_3, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаНалога3Раздел1_3, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 070 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		Конецесли;

		ИначеЕсли (Найти(Ячейка, "СуммаНалога") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 12) + "Раздел1_3";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма налога, подлежащая уплате", 15, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаНалога1Раздел1_3" Тогда
				мСуммаНалога1Раздел1_3 = НачЗначение;
				Строка1 = "030";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога2Раздел1_3" Тогда
				мСуммаНалога2Раздел1_3 = НачЗначение;
				Строка1 = "050";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога3Раздел1_3" Тогда
				мСуммаНалога3Раздел1_3 = НачЗначение;
				Строка1 = "070";
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3",Сред(Ячейка, 1, 13), 15, НачЗначение, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "СрокУплаты") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 11) + "Раздел1_3";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиДату(НачЗначение, "По сроку", ЧастиДаты.Дата) Тогда
			Если КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_3" Тогда
				мСрокУплаты1Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_3" Тогда
				мСрокУплаты2Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_3" Тогда
				мСрокУплаты3Раздел1_3 = НачЗначение;
			КонецЕсли;

			НачЗначениеСтр = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3",Сред(Ячейка, 1, 12), 8, НачЗначениеСтр);
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_3Выбор

Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветАвто;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_2);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_2);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	//Если (Найти(Ячейка, "СуммаМестПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	Если (Область.ЦветФона <> ЦветАвто)
	И (Найти(Ячейка, "СуммаМестПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 17) + "Раздел1_2";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма ежемесячного авансового платежа", 15, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаМестПоСроку1Раздел1_2" Тогда
				мСуммаМестПоСроку1Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМестПоСроку2Раздел1_2" Тогда
				мСуммаМестПоСроку2Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаМестПоСроку3Раздел1_2" Тогда
				мСуммаМестПоСроку3Раздел1_2 = НачЗначение;
			КонецЕсли;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 18), 15, НачЗначение, Истина);
		Модифицированность = Истина;

		КонецЕсли;
	КонецЕсли;

	// Если (Найти(Ячейка, "СуммаСубПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	Если (Найти(Ячейка, "СуммаСубПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 16) + "Раздел1_2";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма ежемесячного авансового платежа", 15, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаСубПоСроку1Раздел1_2" Тогда
				мСуммаСубПоСроку1Раздел1_2 = НачЗначение;
				Строка1 = "220";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку2Раздел1_2" Тогда
				мСуммаСубПоСроку2Раздел1_2 = НачЗначение;
				Строка1 = "230";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку3Раздел1_2" Тогда
				мСуммаСубПоСроку3Раздел1_2 = НачЗначение;
				Строка1 = "240";
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 17), 15, НачЗначение, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если (Найти(Ячейка, "СуммаФедПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	//Если (Найти(Ячейка, "СуммаФедПоСроку") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 16) + "Раздел1_2";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма ежемесячного авансового платежа", 15, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаФедПоСроку1Раздел1_2" Тогда
				мСуммаФедПоСроку1Раздел1_2 = НачЗначение;
				Строка1 = "120";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку2Раздел1_2" Тогда
				мСуммаФедПоСроку2Раздел1_2 = НачЗначение;
				Строка1 = "130";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку3Раздел1_2" Тогда
				мСуммаФедПоСроку3Раздел1_2 = НачЗначение;
				Строка1 = "140";
			КонецЕсли;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 17), 15, НачЗначение, Истина);
		Модифицированность = Истина;

		Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;


		КонецЕсли;
	КонецЕсли;

	Если (Найти(Ячейка, "СрокУплаты") > 0) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
	//Если (Найти(Ячейка, "СрокУплаты") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 11) + "Раздел1_2";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиДату(НачЗначение, "Введите срок уплаты", ЧастиДаты.Дата) Тогда
			Если КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_2" Тогда
				мСрокУплаты1Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_2" Тогда
				мСрокУплаты2Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_2" Тогда
				мСрокУплаты3Раздел1_2 = НачЗначение;
			КонецЕсли;

			НачЗначениеСтр = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 11), 8, НачЗначениеСтр);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "КодОКАТО_1_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = мКодОкатоРаздел1_2;

		Если ВвестиСтроку (НачЗначение,"Введите код ОКАТО", 11) Тогда

			Если (НачЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(НачЗначение)) И (СтрДлина(НачЗначение) = 11) Тогда

				мКодОкатоРаздел1_2 = НачЗначение;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2","КодОКАТО_1_", 11, мКодОкатоРаздел1_2);
				Модифицированность = Истина;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (Найти(Ячейка,"КБКвФБ_") > 0)
	Или (Найти(Ячейка,"КБКвБС_") > 0)
	Или (Найти(Ячейка,"КБКвМБ_") > 0) И (Область.ЦветФона <> ЦветАвто) Тогда

		СтандартнаяОбработка = Ложь;

		Если Найти(Ячейка,"КБКвФБ_") > 0 Тогда
			ТекКБК = мКБКвФБРаздел1_2;
			КодПоСтруктуре = "КБКвФБРаздел1_2";
		ИначеЕсли Найти(Ячейка,"КБКвБС_") > 0 Тогда
			ТекКБК = мКБКвБСРаздел1_2;
			КодПоСтруктуре = "КБКвБСРаздел1_2";
		ИначеЕсли Найти(Ячейка,"КБКвМБ_") > 0 Тогда
			ТекКБК = мКБКвМБРаздел1_2;
			КодПоСтруктуре = "КБКвМБРаздел1_2";
		КонецЕсли;

		Если Год(ДатаПодписи) <= 2004 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации;
			КолЗнаков = 7;
		Иначе
			Если Год(ДатаПодписи) <= 2005 Тогда
				ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
			ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
				ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
			КонецЕсли;

			КолЗнаков = 20;
		КонецЕсли;

		Если НЕ мАвтоВыборКодов Тогда

			ПоисковаяСтрока = ТЗДляВыбораКБК.Найти(ТекКБК, "Код");

			Если ПоисковаяСтрока <> Неопределено Тогда
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК", ПоисковаяСтрока);
			Иначе
				Результат = ТЗДляВыбораКБК.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;
		КонецЕсли;
		
		Если мАвтоВыборКодов Тогда

			Если НЕ ВвестиСтроку(ТекКБК, "Введите КБК", КолЗнаков) Тогда
				Возврат;
			Иначе
				Результат = ТекКБК;
			КонецЕсли;

		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат; // Отказались от выбора, окно закрыто
		КонецЕсли;

		ИтРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));

		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), 20, ИтРезультат);
			Модифицированность = Истина;

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", ИтРезультат);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку1Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 120 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку2Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 130 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку3Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку1Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 220 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку2Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 230 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку3Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 240 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// Процедура ПолеТабличногоДокументаЛист02Выбор
// Процедура-обработчик события "Выбор"
//
Процедура ПолеТабличногоДокументаЛист02Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если  Найти(Ячейка, "П002000000200") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если мРаздел2.Области.П002000000200.Значение = "+" Тогда

			мРаздел2.Области.П002000000200.Значение = "";
			мЯвляетсяСельхоз = "";
			Модифицированность = Истина;

		Иначе

			мРаздел2.Области.П002000000200.Значение = "+";
			мЯвляетсяСельхоз = "1";
			Модифицированность = Истина;

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаЛист02Выбор

// Процедура ПолеТабличногоДокументаТитульныйВыбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если Область.Защита Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

	Если Область.Имя = "ТипОрг1" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг2.Значение = "";
		ПоМестуНахожденияОрганизации = Истина;

	ИначеЕсли Область.Имя = "ТипОрг2" Тогда
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		ПоМестуНахожденияОрганизации = Ложь;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Процедура ПолеТабличногоДокументаЛист10Выбор
// Процедура обработчика "Выбор"
//
Процедура ПолеТабличногоДокументаЛист10Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	// выбор льготы
	Если (Найти(Ячейка, "П002170001002") > 0) Или (Найти(Ячейка, "П002170001003") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если НЕ мАвтоВыборКодов Тогда

			Если Найти(Ячейка, "П002170001002") > 0 Тогда
				КолонкаПоиска = "Название";
			Иначе
				КолонкаПоиска = "Код";
			КонецЕсли;

			ПервоначальноеЗначение = Область.Значение;
			НайденнаяСтрока = мПрибыльКодыВидовПоступлений.Найти(ПервоначальноеЗначение, КолонкаПоиска);

			Если НайденнаяСтрока = Неопределено Тогда
				Результат = мПрибыльКодыВидовПоступлений.ВыбратьСтроку("Выбор кода");
			Иначе
				Результат = мПрибыльКодыВидовПоступлений.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
			КонецЕсли;

		Иначе

			СтандартнаяОбработка = Истина;
			Возврат;

		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));

			//П002170001003_1
			Если НЕ мАвтоВыборКодов Тогда

				Значение2 = ?(мАвтоВыборКодов, Результат,Результат.Получить(1));

				Если ПустаяСтрока(Значение1) Тогда
					Значение2 = "";
				КонецЕсли;

				Если Найти(Ячейка, "П002170001002") > 0 Тогда

					ЯчейкаРядом = СтрЗаменить(Ячейка,"П002170001002", "П002170001003");
					мРаздел10.Области[Ячейка].Значение = Значение2;
					мРаздел10.Области[ЯчейкаРядом].Значение = Значение1;
					Модифицированность = Истина;

				Иначе

					ЯчейкаРядом = СтрЗаменить(Ячейка,"П002170001003","П002170001002");
					мРаздел10.Области[Ячейка].Значение = Значение1;
					мРаздел10.Области[ЯчейкаРядом].Значение = Значение2;
					Модифицированность = Истина;

				КонецЕсли;

			Иначе

				мРаздел10.Области[Ячейка].Значение = Значение1;
				Модифицированность = Истина;

			КонецЕсли;
		Конецесли;
	КонецЕсли; // Найти

КонецПроцедуры // ПолеТабличногоДокументаЛист10Выбор

Процедура ПолеТабличногоДокументаЛист02_Прил5Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "П002040000200" Тогда
		СтандартнаяОбработка = Ложь;

		Если мРаздел2_Прил5.Области.П002040000200.Значение = "+" Тогда
			мРаздел2_Прил5.Области.П002040000200.Значение = "";
			мЯвляетсяСельхозПрил5Лист02 = "";
			Модифицированность = Истина;
		Иначе
			мРаздел2_Прил5.Области.П002040000200.Значение = "+";
			мЯвляетсяСельхозПрил5Лист02 = "1";
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

	// при выключенном авторасчете
	Если (Область.Имя = "П002040022001") И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		Если НЕ мАвтоВыборКодов Тогда
			// мПрил5аЛист02 - общая ТаблицаЗначений для вывода
			Результат = мПрил5аЛист02.ВыбратьСтроку("Выбор значения");

			Если Результат = Неопределено Тогда

				Возврат;

			ИначеЕсли ПустаяСтрока(Результат.Получить(0)) Тогда

				Рез = "";

			Иначе

				Рез = Результат.Получить(0)

			КонецЕсли;

			мРаздел2_Прил5.Области.П002040022001.Значение = Рез;
			Модифицированность = Истина;

			Иначе

			Значение = мРаздел2_Прил5а.Области.П002050022001.Значение;
			Если ВвестиСтроку(Значение, "Введите значение", 2) Тогда
				мРаздел2_Прил5.Области.П002040022001.Значение = Значение;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил5аВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "П002050021003" Тогда
	СтандартнаяОбработка = Ложь;

		Модифицированность = Истина;
		Если мРаздел2_Прил5а.Области.П002050021003.Значение = "+" Тогда
			мРаздел2_Прил5а.Области.П002050021003.Значение = "";
			мОбязанностьНаОбособке = "0";
		Иначе
			мРаздел2_Прил5а.Области.П002050021003.Значение = "+";
			мОбязанностьНаОбособке = "1";
		КонецЕсли;
	КонецЕсли;


	Если Область.Имя = "П002050000200" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;

		Если мРаздел2_Прил5а.Области.П002050000200.Значение = "+" Тогда
			мРаздел2_Прил5а.Области.П002050000200.Значение = "";
			мЯвляетсяСельхозЛист02_Прил5а = "";
		Иначе
			мРаздел2_Прил5а.Области.П002050000200.Значение = "+";
			мЯвляетсяСельхозЛист02_Прил5а = "1";
		КонецЕсли;

	КонецЕсли;

	Если (Область.Имя = "П002050022001") Тогда
		СтандартнаяОбработка = Ложь;
		Если (НЕ мАвтоВыборКодов) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
			Результат = мПрил5аЛист02.ВыбратьСтроку("Выбор значения");

			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;

			Если ПустаяСтрока(Результат.Получить(0)) Тогда
				Рез = "";
			Иначе
				Рез = Результат.Получить(0)
			КонецЕсли;

			мРаздел2_Прил5а.Области.П002050022001.Значение = Рез;
			Модифицированность = Истина;

		ИначеЕсли (мАвтоВыборКодов) И (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
			Значение = мРаздел2_Прил5а.Области.П002050022001.Значение;
				Если ВвестиСтроку(Значение, "Введите значение", 2) Тогда
					мРаздел2_Прил5а.Области.П002050022001.Значение = Значение;
					Модифицированность = Истина;
				КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил5аВыбор

Процедура ПолеТабличногоДокументаЛист02_Прил6Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "П002060000200" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;

		Если мРаздел2_Прил6.Области.П002060000200.Значение = "+" Тогда

			мРаздел2_Прил6.Области.П002060000200.Значение = "";
			мЯвляетсяСельхозЛист02_Прил6 = "";

		Иначе

			мРаздел2_Прил6.Области.П002060000200.Значение = "+";
			мЯвляетсяСельхозЛист02_Прил6 = "1";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил7Выбор(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "П002070000200" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;

		Если мРаздел2_Прил7.Области.П002070000200.Значение = "+" Тогда
			мРаздел2_Прил7.Области.П002070000200.Значение = "";
			мЯвляетсяСельхозЛист02_Прил7 = "";
		Иначе
			мРаздел2_Прил7.Области.П002070000200.Значение = "+";
			мЯвляетсяСельхозЛист02_Прил7 = "1";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если  Найти(Ячейка, "П002010000200") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Если мРаздел2_Прил1.Области.П002010000200.Значение = "+" Тогда
			мРаздел2_Прил1.Области.П002010000200.Значение = "";
			мЯвляетсяСельхозПрил1Лист02 = "";
			Модифицированность = Истина;
		Иначе
			мРаздел2_Прил1.Области.П002010000200.Значение = "+";
			мЯвляетсяСельхозПрил1Лист02 = "1";
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил2Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если  Найти(Ячейка, "П002020000200") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Если мРаздел2_Прил2.Области.П002020000200.Значение = "+" Тогда
			мРаздел2_Прил2.Области.П002020000200.Значение = "";
			мЯвляетсяСельхозПрил2Лист02 = "";
			Модифицированность = Истина;
		Иначе
			мРаздел2_Прил2.Области.П002020000200.Значение = "+";
			мЯвляетсяСельхозПрил2Лист02 = "1";
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаЛист02_Прил4Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если  Найти(Ячейка, "П002030000200") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Если мРаздел2_Прил4.Области.П002030000200.Значение = "+" Тогда
			мРаздел2_Прил4.Области.П002030000200.Значение = "";
			мЯвляетсяСельхозПрил4Лист02 = "";
			Модифицированность = Истина;
		Иначе
			мРаздел2_Прил4.Области.П002030000200.Значение = "+";
			мЯвляетсяСельхозПрил4Лист02 = "1";
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура возвращает таблицу значений информацией с листов ФизЛица. Строки таблицы
// соответствуют страницам раздела.
//
// Параметры:
//	СтруктураМногостраничныхРазделов - структура, на основании информации из которой
//			следует заполнить строки таблицы-результата. Если параметр не задан, то
//			будет использована аналогичная переменная модуля
//
// Возвращаемое значение:
//	ТаблицаЗначений с информацией из листов раздела ФизЛица
//
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицФИО = СтрДанных.ФизЛицФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДатаР = СтрДанных.ФизЛицДатаР;
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд1+СтрДанных.ФизЛицКодГражд2+СтрДанных.ФизЛицКодГражд3;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок1 + СтрДанных.ФизЛицДок2;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата1 + СтрДанных.ФизЛицДокДата2 + "."
										  + СтрДанных.ФизЛицДокДата3 + СтрДанных.ФизЛицДокДата4 + "."
										  + СтрДанных.ФизЛицДокДата5 + СтрДанных.ФизЛицДокДата6  
										  + СтрДанных.ФизЛицДокДата7 + СтрДанных.ФизЛицДокДата8;
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд1+СтрДанных.ФизЛицИнд2+СтрДанных.ФизЛицИнд3+СтрДанных.ФизЛицИнд4+СтрДанных.ФизЛицИнд5+СтрДанных.ФизЛицИнд6;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС1 + СтрДанных.ФизЛицС2;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции // ПолучитьДанныеФизЛиц()

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	
	Если БратьИзФормы Тогда
		
		ОбновитьСтруктуруМногострочныхРазделов();

		ОбновитьСтруктуруМногостраничныхРазделов();
		
		ПоказателиОтчета = Новый Структура();

		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
		
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//СтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц( ?(СтруктураМногостраничныхРазделов = Неопределено, мСтруктураМногостраничныхРазделов, СтруктураМногостраничныхРазделов));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	//определение источников данных для проверки
	Если БратьИзформы Тогда
		
	     Орг = Организация;
		 
	Иначе
		 
		Если мСохраненныйДок = Неопределено Тогда
			 
			Если ВыводитьСообщения Тогда
				
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
				
			КонецЕсли;
			
			Возврат Ложь;
			 
		КонецЕсли;
		
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если Данные = Неопределено Тогда
			
			Если ВыводитьСообщения Тогда
				
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Орг = мСохраненныйДок.Организация;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
		 
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		КатегорияНП = 2;
	КонецЕсли;
	//ТипОрг2=ПоказателиТитульный.ТипОрг2;
	//ТипОрг3=ПоказателиТитульный.ТипОрг3;	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	КонецЕсли;
	НаимОППол = ПоказателиТитульный.ОбПодрНазв;
	КППОП = ПоказателиТитульный.ПКПП;
	
	//Если НЕ ПустаяСтрока(ТипОрг2) Тогда
	//	ДокПредставляется = 120; 
	//ИначеЕсли НЕ ПустаяСтрока(ТипОрг3) Тогда
	//	ДокПредставляется = 290;
	//КонецЕсли;	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		попытка
			ПризнВидаДок = Число(ВидДок);
		исключение
		конецпопытки;
	КонецЕсли;
	попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	исключение
		НомерКорректировки = 0;
	конецпопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	Если РазницаМесяцев = 1 Тогда
		ПризнОтчетногоПериода = 1;
	ИначеЕсли РазницаМесяцев = 3 Тогда
		ПризнОтчетногоПериода = 3;
	ИначеЕсли РазницаМесяцев = 6 Тогда
		ПризнОтчетногоПериода = 6;
	ИначеЕсли РазницаМесяцев = 9 Тогда
		ПризнОтчетногоПериода = 9;
	ИначеЕсли РазницаМесяцев = 12 Тогда
		ПризнОтчетногоПериода = 0;
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	//Определили основные показатели
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) И (ПустаяСтрока(ОргУП) ИЛИ НЕ ПустаяСтрока(ОргБухгалтер)) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если (ПризнВидаДок = 3) И (НомерКорректировки = 0) Тогда
		
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер корректировки!", "Титульный", "НомКоррект");
		КонецЕсли;
		
		СтатусПроверки = 1;
		
	КонецЕсли;
	
	Если ДокПредставляется <> 120 Тогда
			
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН организации!", СтатусСообщения.Важное);
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		ОргНазв = ПоказателиТитульный.ОргНазв;
		ОргОГРН = ПоказателиТитульный.ОГРН;
		
		Если ПустаяСтрока(ОргОГРН) Тогда
			//Если ВыводитьСообщения Тогда
			//	СообщитьВТС("Не указан ОГРН для организации!", "Титульный", "ОГРН");
			//КонецЕсли;
			//СтатусПроверки = 1;
		Иначе
			Если НЕ РегламентированнаяОтчетность.ОГРНсоответствуетТребованиям(ОргОГРН) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ОГРН для организации!", "Титульный", "ОГРН");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;	
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		/////
		///// Окончание проверки блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
		ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		
		//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		////
		
		//сведения о директоре+
		ИННДиректор = ПоказателиТитульный.ИННРук;
		Если ПустаяСтрока(ИННДиректор) Тогда
			
			ТелСлужРук    = "-";
			ТелДомРук     = "-";
			АдрМЖРукРФ    = ",,,,,,,,,";
			АдрМЖРукРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
				ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
				КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
				СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
				
				УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
				
				ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
				ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
				
				ДатаРождРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождРук);
				МестоРождРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождРук));
				КодГраждРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждРук);
				
				АдрМЖРукРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННДиректор) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН директора!", "Титульный", "ИННРук");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли; 
		//сведения о директоре-		
		
		
		//сведения о бухгалтере+
		ИННБухгалтер = ПоказателиТитульный.ИННГБ;
		Если ПустаяСтрока(ИННБухгалтер) Тогда
			
			ТелСлужБух    = "-";
			ТелДомБух     = "-";
			АдрМЖБухРФ    = ",,,,,,,,,";
			АдрМЖБухРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
				ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
				КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
				СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
				
				УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
				
				ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
				ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
				
				АдрМЖБухРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННБухгалтер) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли; 
		//сведения о бухгалтере-		
		
		
		ОргИННУппред = ПоказателиТитульный.ИННУП;
		
		Если (НЕ ПустаяСтрока(ОргУП)) И (НЕ ПустаяСтрока(ОргИННУпПред)) И (НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИННУППред)) Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;
		
		Если (ПустаяСтрока(ОргИННУпПред)) И (НЕ ПустаяСтрока(ОргУП)) Тогда
			
			ТелСлужУпПред    = "-";
			ТелДомУпПред     = "-";
			//КодВидаДок       = "-";
			//СерияИНомер      = "-";
			//ВыдУдЛичн        = "-";
			//ДатаУдЛичнУпПред = "00.00.0000"; 
			АдрМЖУпПредРФ    = ",,,,,,,,,";
			АдрМЖУпПредРез   = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
				ТелДомУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
				КодВидаДокУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
				СерияИНомерУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
				
				УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
				
				ВыдУдЛичнУпПред   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред));
				ДатаУдЛичнУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
				
				ДатаРождУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождУпПред);
				МестоРождУпПред = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождУпПред));
				КодГраждУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждУпПред);
				
				
				АдрМЖУпПредРФ = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖУпПредРез = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
		
	Иначе//ДокПредставляется = 120
			
		Если ПустаяСтрока(ПоказателиТитульный.ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН индивидуального предпринимателя!", СтатусСообщения.Важное);
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ПоказателиТитульный.ОргНазв, ",", "")) = 0 Тогда
			
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			
			СтатусПроверки = 1;
			
		КонецЕсли;

		Если ПустаяСтрока(ОргИНН) Тогда
			
			ТелСлужИП     = "-";
			ТелДомИП      = "-";
			ДатаРождИП    = "00.00.0000";
			МестоРождИП   = "-";
			ПолИП         = 1;
			ГраждИП       = "-";
			КодГраждИП    = "-";
			АдрМЖИПРФ     = ",,,,,,,,,";
			АдрМЖИПРез    = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужИП    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел,         ТелСлужИП);
				ТелДомИП     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел,        ТелДомИП);
				ДатаРождИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР,         ДатаРождИП);
				МестоРождИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР,        МестоРождИП);
				ПолИП        = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицПол,           ПолИП);
				ГраждИП      = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство,   ГраждИП);
				КодГраждИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд,      КодГраждИП);
				КодВидаДокИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод,        КодВидаДокИП);
				СерияИНомерИП= РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерИП);
				
				УдЛичнИП     = КодВидаДокИП + "," + СерияИНомерИП;
				
				ВыдУдЛичнИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан,      ВыдУдЛичнИП);
				ДатаУдЛичнИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата,       ДатаУдЛичнИП);
				
				АдрМЖИПРФ   = "643,"
							+ СокрП(Стр.ФизЛицИндекс)  + ","
							+ СокрП(Стр.ФизЛицКодСуб)  + ","
							+ СокрП(Стр.ФизЛицРайон)   + ","
							+ СокрП(Стр.ФизЛицГород)   + ","
							+ СокрП(Стр.ФизЛицНП)      + ","
							+ СокрП(Стр.ФизЛицУлица)   + "," 
							+ СокрП(Стр.ФизЛицДом)     + ","
							+ СокрП(Стр.ФизЛицКорпус)  + ","
							+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖИПРез  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес,      АдрМЖИПРез);
				
			КонецЕсли;
			
		КонецЕсли; 
	           
		//////// Конец блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ> 
		
	КонецЕсли;
	
	///// Проверка блоков <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> и <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
	///// на обязательное заполнение условных реквизитов (сведения о документе, удостоверяющем личность), 
	///// содержащихся в разделе "Сведения о физическом лице", в случае отсутствия ИНН руководителя, главного 
	///// бухгалтера или уполномоченного представителя организации; в случае отсутствия ИНН физического лица.
    /////
	// Проверка блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>.
	Если ДокПредставляется <> 120 Тогда
	
		// Если не заполнен ИНН руководителя организации.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННДиректор) Тогда
			
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) Тогда
				СообщитьВТС("Не задан ИНН директора!", "Титульный", "ИННРук");
				СтатусПроверки = 1;
			Иначе
			
				// Если не заполнены ФИО руководителя организации.
				//Стр=ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
				//Если Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для руководителя не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнен код документа, удостоверяющего личность!",  "ФизЛица", "ФизЛицДок", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаРождРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнена дата рождения!", "ФизЛица", "ФизЛицДатаР", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(МестоРождРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнено место рождения!", "ФизЛица", "ФизЛицМестоР", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодГраждРук) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для руководителя не заполнен код страны!", "ФизЛица", "ФизЛицКодГражд", ОргДиректор);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		// Если не заполнен ИНН главного бухгалтера организации.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННБухгалтер) Тогда
			
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) Тогда
				
				СообщитьВТС("Не задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
				СтатусПроверки = 1;
				
			Иначе
				// Если не заполнены ФИО главного бухгалтера организации.
				//Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
				//Если Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для главного бухгалтера не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнБух) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для главного бухгалтера не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргБухгалтер);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если не заполнен ИНН уполномоченного представителя.
		Если (РегламентированнаяОтчетность.ПустоеЗначение(ОргИННУпПред)) И (НЕ РегламентированнаяОтчетность.ПустоеЗначение(ОргУП)) Тогда
			 
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУпПред) И РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУпПред) Тогда
				
				СообщитьВТС("Не задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				СтатусПроверки = 1;
				
			Иначе
				
				// Если не заполнены ФИО уполномоченного представителя.
				//Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
				//Если  Стр = Неопределено Тогда	
				//	
				//	Если ВыводитьСообщения Тогда
				//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для уполномоченного представителя не заполнены фамилия, имя, отчество!", СтатусСообщения.Важное);
				//	КонецЕсли;
				//	
				//	СтатусПроверки = 1;
				//	
				//КонецЕсли;
				
				// Если не заполнен код документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаРождУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата рождения!", "ФизЛица", "ФизЛицДатаР", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(МестоРождУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено место рождения!", "ФизЛица", "ФизЛицМестоР", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетность.ПустоеЗначение(КодГраждУпПред) Тогда
					
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код страны!", "ФизЛица", "ФизЛицКодГражд", ОргУП);
					КонецЕсли;
					
					СтатусПроверки = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	 
	// Проверка блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>.
	Иначе
		
		// Если не заполнен ИНН индивидуального предпринимателя.
		Если РегламентированнаяОтчетность.ПустоеЗначение(ОргИНН) = 1 Тогда
			 
			//НомСтр = 0;
			
			// Если не заполнены ФИО индивидуального предпринимателя.
			//Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, НомСтр, "ФизЛицФИО");
			//Если Стр = Неопределено Тогда	
			//	
			//	Если ВыводитьСообщения Тогда
			//		СообщитьВТС(ПредставлениеОтчета + "Сведения о физических лицах. Для индивидуального предпринимателя не заполнены фамилия, имя, отчество!", );
			//	КонецЕсли;
			//	
			//	СтатусПроверки = 1;
			//	
			//КонецЕсли;
			
			// Если не заполнен код документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(КодВидаДокИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(СерияИНомерИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ВыдУдЛичнИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если РегламентированнаяОтчетность.ПустоеЗначение(ДатаУдЛичнИП) Тогда
				
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для индивидуального предпринимателя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргНазв);
				КонецЕсли;
				
				СтатусПроверки = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		КатегорияНП = 2;
	КонецЕсли;
	//ТипОрг2=ПоказателиТитульный.ТипОрг2;
	//ТипОрг3=ПоказателиТитульный.ТипОрг3;	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	КонецЕсли;
	НаимОППол = ПоказателиТитульный.ОбПодрНазв;
	КППОП = ПоказателиТитульный.ПКПП;
	//Если НЕ ПустаяСтрока(ТипОрг2) Тогда
	//	ДокПредставляется = 120; 
	//ИначеЕсли НЕ ПустаяСтрока(ТипОрг3) Тогда
	//	ДокПредставляется = 290;
	//КонецЕсли;	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = "";//пока так 
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	Конецпопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	Если РазницаМесяцев = 1 Тогда
		ПризнОтчетногоПериода = 1;
	ИначеЕсли РазницаМесяцев = 3 Тогда
		ПризнОтчетногоПериода = 3;
	ИначеЕсли РазницаМесяцев = 6 Тогда
		ПризнОтчетногоПериода = 6;
	ИначеЕсли РазницаМесяцев = 9 Тогда
		ПризнОтчетногоПериода = 9;
	ИначеЕсли РазницаМесяцев = 12 Тогда
		ПризнОтчетногоПериода = 0;
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	Если ПустаяСтрока(ОргКПП) = Ложь Тогда
		// Если КПП указан
		ИДОтпр = ОргИНН + "**" + ОргКПП;
	Иначе
		// Если КПП не указан
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	//Определили основные показатели
	
	// Общие сведения служебной части
	
	// Дата формирования документа
	ДатаДок = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");	
	// По умолчанию принимаем за порядковый номер документа в отчетном году 99999999.
	// При отправке документа выполняется коррекция значения этого показателя
	// в соответствии с реальным порядковым номером.
	                                         
	Если ДокПредставляется <> 120 Тогда
		
		//////// Начало блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		////
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		
		Если Докпредставляется = 220 Тогда
			Текст.ДобавитьСтроку("НаимОППол:" + ВРег(СокрЛП(СтрЗаменить(НаимОППол, Символы.ПС, ""))));
		КонецЕсли;
		
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		
		Если Докпредставляется = 220 Тогда
			Текст.ДобавитьСтроку("КППОП:" + КППОП); 
		КонецЕсли;
				
		Если ДокПредставляется = 290 Тогда
			Текст.ДобавитьСтроку("КППИном:");
		КонецЕсли;
		
		ОргОГРН = ПоказателиТитульный.ОГРН;
		
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ОргОГРН));
		
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
		/////
		ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		////
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		
		ИННДиректор = ПоказателиТитульный.ИННРук;
		
		ТЕкст.ДобавитьСтроку("ИННРук:" + ИННДиректор);  
		
		Если ПустаяСтрока(ИННДиректор) Тогда
			
			ТелСлужРук    = "-";
			ТелДомРук     = "-";
			КодВидаДокРук = "-";
			СерияИНомерРук= "-";
			ВыдУдЛичнРук  = "-";
			ДатаУдЛичнРук = "00.00.0000"; 
			АдрМЖРукРФ    = ",,,,,,,,,";
			АдрМЖРукРез   = "-"; 
			УдЛичнРук     = "-,-";
			
			ДатаРождРук = "00.00.0000";
			МестоРождРук = "-";
			КодГраждРук = "-";
			ГраждРук = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужРук    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
				ТелДомРук     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
				КодВидаДокРук  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
				СерияИНомерРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
				
				УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
				
				ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
				ДатаУдЛичнРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
				
				ДатаРождРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождРук);
				МестоРождРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождРук));
				КодГраждРук = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждРук);
				ПолРук = Стр.ФизЛицПол;
				ГраждРук = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство, ГраждРук));
				
				АдрМЖРукРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖРукРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужРук:"    + ВРЕГ(СокрЛП(Лев(ТелСлужРук, 20))));  
			Текст.ДобавитьСтроку("ТелДомРук:"     + ВРЕГ(СокрЛП(Лев(ТелДомРук, 20)))); 
			    ДатаРождРукС = ?(ДатаРождРук = "  .  .    ", "00.00.0000", Формат(ДатаРождРук, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			Текст.ДобавитьСтроку("ДатаРождРук:"    + ДатаРождРукС);  
			Текст.ДобавитьСтроку("МестоРождРук:"    + МестоРождРук);  
			Текст.ДобавитьСтроку("ПолРук:"    + ПолРук);  
			Текст.ДобавитьСтроку("ГраждРук:"    + ГраждРук);  
			Текст.ДобавитьСтроку("КодГраждРук:"    + КодГраждРук);  
			
			Текст.ДобавитьСтроку("УдЛичнРук:"     + ВРЕГ(УдЛичнРук));  
			Текст.ДобавитьСтроку("ВыдУдЛичнРук:"  + ВРЕГ(ВыдУдЛичнРук));  
			Если ДатаУдЛичнРук = "  .  .    " ИЛИ ДатаУдЛичнРук = ".." Тогда
				ДатаУдЛичнРукС = "00.00.0000";
			Иначе
				ДатаУдЛичнРукС = Формат(ДатаУдЛичнРук, "ДФ=dd.MM.yyyy; ДЛФ=D");
			КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + ДатаУдЛичнРукС);  
			Текст.ДобавитьСтроку("АдрМЖРукРФ:"    + ВРег(АдрМЖРукРФ)); 
			Текст.ДобавитьСтроку("АдрМЖРукРез:"   + ВРег(АдрМЖРукРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		
		ИННБухгалтер = ПоказателиТитульный.ИННГБ;
		
		Текст.ДобавитьСтроку("ИННБух:" + ИННБухгалтер);  
		
		Если ПустаяСтрока(ИННБухгалтер) Тогда
			
			ТелСлужБух    = "-";
			ТелДомБух     = "-";
			КодВидаДокБух    = "-";
			СерияИНомерБух   = "-";
			ВыдУдЛичнБух     = "-";
			ДатаУдЛичнБух = "00.00.0000"; 
			АдрМЖБухРФ    = ",,,,,,,,,";
			АдрМЖБухРез   = "-";
			УдЛичнБух     = "-,-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужБух    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
				ТелДомБух     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
				КодВидаДокБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
				СерияИНомерБух = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
				
				УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
				
				ВыдУдЛичнБух   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
				ДатаУдЛичнБух  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
				
				АдрМЖБухРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖБухРез   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужБух:"    + ВРЕГ(СокрЛП(Лев(ТелСлужБух, 20))));  
			Текст.ДобавитьСтроку("ТелДомБух:"     + ВРЕГ(СокрЛП(Лев(ТелДомБух, 20))));  
			Текст.ДобавитьСтроку("УдЛичнБух:"     + ВРЕГ(УдЛичнБух));  
			Текст.ДобавитьСтроку("ВыдУдЛичнБух:"  + ВРЕГ(ВыдУдЛичнБух)); 
			Если ДатаУдЛичнБух = "  .  .    " ИЛИ ДатаУдЛичнБух = ".." Тогда
				ДатаУдЛичнБухС = "00.00.0000";
			Иначе
				ДатаУдЛичнБухС = Формат(ДатаУдЛичнБух, "ДФ=dd.MM.yyyy; ДЛФ=D");
			КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + ДатаУдЛичнБухС);  
			Текст.ДобавитьСтроку("АдрМЖБухРФ:"    + ВРег(АдрМЖБухРФ)); 
			Текст.ДобавитьСтроку("АдрМЖБухРез:"   + ВРег(АдрМЖБухРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
		
		ОргИННУппред = ПоказателиТитульный.ИННУП;
		
		Текст.ДобавитьСтроку("ИННУпПред:" + СокрП(ОргИННУпПред));  
		
		Если (ПустаяСтрока(ОргИННУпПред)) И (НЕ ПустаяСтрока(ОргУП)) Тогда
			
			ТелСлужУпПред    = "-";
			ТелДомУпПред     = "-";
			КодВидаДокУпПред       = "-";
			СерияИНомерУпПред      = "-";
			ВыдУдЛичнУпПред        = "-";
			ДатаУдЛичнУпПред = "00.00.0000"; 
			АдрМЖУпПредРФ    = ",,,,,,,,,";
			АдрМЖУпПредРез   = "-";
			УдЛичнПред       = "-,-";
			
			ДатаРождУпПред = "00.00.0000";
			МестоРождУпПред = "-";
			КодГраждУпПред = "-";
			ГраждУпПред = "-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
				ТелДомУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
				КодВидаДокУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
				СерияИНомерУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
				
				УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
				
				ВыдУдЛичнУпПред   = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред));
				ДатаУдЛичнУпПред  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
				
				ДатаРождУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР, ДатаРождУпПред);
				МестоРождУпПред = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР, МестоРождУпПред));
				КодГраждУпПред = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд, КодГраждУпПред);
				
				ПолУпПред = Стр.ФизЛицПол;
				ГраждУпПред = ВРЕГ(РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство, ГраждУпПред));
				
				АдрМЖУпПредРФ = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖУпПредРез = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлужУпПред:"    + ВРЕГ(СокрЛП(Лев(ТелСлужУпПред, 20))));  
			Текст.ДобавитьСтроку("ТелДомУпПред:"     + ВРЕГ(СокрЛП(Лев(ТелДомУпПред, 20)))); 
			    ДатаРождУпПредС = ?(ДатаРождУпПред = "  .  .    ", "00.00.0000", Формат(ДатаРождУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			Текст.ДобавитьСтроку("ДатаРождУпПред:"    + ДатаРождУпПредС);  
			Текст.ДобавитьСтроку("МестоРождУпПред:"    + МестоРождУпПред);  
			Текст.ДобавитьСтроку("ПолУпПред:"    + ПолУпПред);  
			Текст.ДобавитьСтроку("ГраждУпПред:"    + ГраждУпПред);  
			Текст.ДобавитьСтроку("КодГраждУпПред:"    + КодГраждУпПред);  
			
			Текст.ДобавитьСтроку("УдЛичнУпПред:"     + ВРЕГ(УдЛичнУпПред));  
			Текст.ДобавитьСтроку("ВыдУдЛичнУпПред:"  + ВРЕГ(ВыдУдЛичнУпПред)); 
			Если ДатаУдЛичнУпПред = "  .  .    " ИЛИ ДатаУдЛичнУпПред = ".." Тогда
				ДатаУдЛичнУпПредС = "00.00.0000";
			Иначе
				ДатаУдЛичнУпПредС = Формат(ДатаУдЛичнУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D");
			КонецЕсли;
			Текст.ДобавитьСтроку("ДатаУдЛичнУпПред:" + ДатаУдЛичнУпПредС);  
			Текст.ДобавитьСтроку("АдрМЖУпПредРФ:"    + ВРег(АдрМЖУпПредРФ)); 		
			Текст.ДобавитьСтроку("АдрМЖУпПредРез:"   + ВРег(АдрМЖУпПредРез));  
			
		КонецЕсли; 
		
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
		
	Иначе//ДокПредставляется = 120
		
		//////// Начало блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		////                            
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);  
		
		Если ПустаяСтрока(ОргИНН) Тогда
			
			ТелСлужИП     = "-";
			ТелДомИП      = "-";
			ДатаРождИП    = "00.00.0000";
			МестоРождИП   = "-";
			ПолИП         = 1;
			ГраждИП       = "-";
			КодГраждИП    = "-";
			КодВидаДокИП    = "-";
			СерияИНомерИП   = "-";
			ВыдУдЛичнИП   = "-";
			ДатаУдЛичнИП  = "00.00.0000"; 
			АдрМЖИПРФ     = ",,,,,,,,,";
			АдрМЖИПРез    = "-";
			УдЛичнИП      = "-,-";
			
			Стр = ТаблСведенийФизЛиц.Найти(ОргНазв, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда			
				
				ТелСлужИП    = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицСлТел,         ТелСлужИП);
				ТелДомИП     = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДомТел,        ТелДомИП);
				ДатаРождИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДатаР,         ДатаРождИП);
				МестоРождИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицМестоР,        МестоРождИП);
				ПолИП        = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицПол,           ПолИП);
				ГраждИП      = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицГражданство,   ГраждИП);
				КодГраждИП   = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицКодГражд,      КодГраждИП);
				КодВидаДокИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокКод,        КодВидаДокИП);
				СерияИНомерИП= РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерИП);
				
				УдЛичнИП     = КодВидаДокИП + "," + СерияИНомерИП;
				
				ВыдУдЛичнИП  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокВыдан,      ВыдУдЛичнИП);
				ДатаУдЛичнИП = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицДокДата,       ДатаУдЛичнИП);
				
				АдрМЖИПРФ   = "643,"
							+ СокрП(Стр.ФизЛицИндекс)  + ","
							+ СокрП(Стр.ФизЛицКодСуб)  + ","
							+ СокрП(Стр.ФизЛицРайон)   + ","
							+ СокрП(Стр.ФизЛицГород)   + ","
							+ СокрП(Стр.ФизЛицНП)      + ","
							+ СокрП(Стр.ФизЛицУлица)   + "," 
							+ СокрП(Стр.ФизЛицДом)     + ","
							+ СокрП(Стр.ФизЛицКорпус)  + ","
							+ СокрП(Стр.ФизЛицКвартира);
				
				АдрМЖИПРез  = РегламентированнаяОтчетность.ПолучитьРеквизит(Стр.ФизЛицИноАдрес,      АдрМЖИПРез);
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку("ТелСлуж:"    + ВРЕГ(СокрЛП(Лев(ТелСлужИП, 20))));  
			Текст.ДобавитьСтроку("ТелДом:"     + ВРЕГ(СокрЛП(Лев(ТелДомИП, 20))));
				ДатаРождИПС = ?(ДатаРождИП = "  .  .    ", "00.00.0000", Формат(ДатаРождИП, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			Текст.ДобавитьСтроку("ДатаРожд:"   + ДатаРождИПС);  
			ТЕкст.ДобавитьСтроку("МестоРожд:"  + ВРЕГ(МестоРождИП));  
			Текст.ДобавитьСтроку("Пол:"        + ПолИП);  
			Текст.ДобавитьСтроку("Гражд:"      + ВРЕГ(ГраждИП));  
			Текст.ДобавитьСтроку("КодГражд:"   + КодГраждИП);  
			Текст.ДобавитьСтроку("УдЛичн:"     + ВРЕГ(УдЛичнИП));  
			Текст.ДобавитьСтроку("ВыдУдЛичн:"  + ВРЕГ(ВыдУдЛичнИП));
				ДатаУдЛичнИПС = ?(ДатаУдЛичнИП = "  .  .    ", "00.00.0000", Формат(ДатаУдЛичнИП, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			Текст.ДобавитьСтроку("ДатаУдЛичн:" + ДатаУдЛичнИПС);  
			Текст.ДобавитьСтроку("АдрМЖ:"      + ВРег(АдрМЖИПРФ)); 
			
			Если НЕ((КодГраждИП = "643") ИЛИ (КодГраждИП = "999")) Тогда
				Текст.ДобавитьСтроку("АдрМЖРез:" + ВРег(АдрМЖИПРез));  
			КонецЕсли;
			
		КонецЕсли; 
	           
		Текст.ДобавитьСтроку("###");
		////
		//////// Конец блока <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ> 
		
	КонецЕсли;
	
	
	//////// Начало блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	////                            
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00005");
	Текст.ДобавитьСтроку("ПериодВерОтч:24.03.2005,07.03.2006");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     

	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Если НЕ ПустаяСтрока(НомерКварталаМесяца) И ПризнОтчетногоПериода = 1 Тогда
		Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	КонецЕсли;
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:"      + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ> 
	
КонецПроцедуры

// Процедура выгружает разделы "Б" и "В" листа 03 декларации.
// Выгрузка в отдельной процедуре реализована в виду того, что
// алгоритм универсальной выгрузки не приспособлен под выгрузку
// таких нестандартных разделов.
//
// Параметры:
//	Текст - ТекстовыйДокумент, содержащий текст выгрузки, в который следует выгружать показатели раздела
//
Процедура ВыгрузкаЛист03РазделыБВ(Текст)
	
	ИмяРаздела1 = "Лист03_РазделыБВ1";
	ИмяРаздела2 = "Лист03_РазделыБВ2";
	РазделБВ1 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела1, РазделБВ1);
	РазделБВ2 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела2, РазделБВ2);
	РешенияОВыплатеДивидендов = мСохраненныйДок.ДанныеОтчета.Получить().РешенияОВыплатахДивидендов;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Решение Из РешенияОВыплатеДивидендов Цикл
		
		МассивЛистов1 = Решение.Значение.Лист03_РазделыБВ1;
		МассивЛистов2 = Решение.Значение.Лист03_РазделыБВ2;
		
		ПервыйПроход1 = Истина;
		Для Каждого Лист1 Из МассивЛистов1 Цикл
			Лист1 = ?(Лист1 < 0, -Лист1, Лист1);
			ТекПок = РазделБВ1.Получить(Лист1).Данные;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела1));
			
			//проверка на пустую страницу раздела
			СтраницаПустая = 1;
			
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, 0, ,1 ), СтраницаПустая);
				
			КонецЦикла;
			
			Если СтраницаПустая = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Стр Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр.КодПоказателяПоСоставу;
				Если КодПоказателя < "П002090008003" И Не ПервыйПроход1 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЯчейки = ?(Пустаястрока(Стр.КодПоказателяПоФорме), КодПоказателя, Стр.КодПоказателяПоФорме); 
				ПризнакФормата = Стр.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				// !!! Наименование региона заменим его кодом
				Если КодПоказателя = "П002090009003" Тогда
					ЗначениеЯчейки = РегламентированнаяОтчетность.ПредставлениеАдресаДляВыгрузки(ЗначениеЯчейки);
				КонецЕсли;
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
			ПервыйПроход1 = Ложь;
			
		КонецЦикла;
		
		ПервыйПроход2 = Истина;
		Для Каждого Лист2 Из МассивЛистов2 Цикл
			Лист2 = ?(Лист2 < 0, -Лист2, Лист2);
			ТекПок = РазделБВ2.Получить(Лист2).Данные;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела2));

			//проверка на пустую страницу раздела
			СтраницаПустая = 1;
			
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, 0, ,1 ), СтраницаПустая);
				
			КонецЦикла;
			
			Если СтраницаПустая = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Стр Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр.КодПоказателяПоСоставу;
				Если КодПоказателя < "П002090008003" И Не ПервыйПроход2 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЯчейки = ?(Пустаястрока(Стр.КодПоказателяПоФорме), КодПоказателя, Стр.КодПоказателяПоФорме); 
				ПризнакФормата = Стр.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				// !!! Наименование региона заменим его кодом
				Если КодПоказателя = "П002090009003" Тогда
					ЗначениеЯчейки = РегламентированнаяОтчетность.ПредставлениеАдресаДляВыгрузки(ЗначениеЯчейки);
				КонецЕсли;
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
			ПервыйПроход2 = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		ОбновитьСтруктуруМногострочныхРазделов();

		// обновляем структуру многостраничных разделов
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			Если ИмяРаздела = "Лист03_РазделыБВ1" Тогда
				ВыгрузкаЛист03РазделыБВ(Текст);
				Продолжить;
			КонецЕсли;
			
			Если ИмяРаздела = "Лист03_РазделыБВ2" Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					// !!! Наименование региона заменим его кодом
					Если КодПоказателя = "П002090009003" Тогда
						ЗначениеЯчейки = РегламентированнаяОтчетность.ПредставлениеАдресаДляВыгрузки(ЗначениеЯчейки);
					КонецЕсли;
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		Если ИмяРаздела = "Лист02" И ТекПок._ДанныхНаЛистеНет Тогда
			Возврат 1;
		КонецЕсли;
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	//*************************************************************************************************************************
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
КонецФункции

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		ОбновитьСтруктуруМногострочныхРазделов();
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			//проверка на то, что раздел пуст
			//ПустойРаздел = Истина;
			//СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			//Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			//	
			//	КодПоказателя = Стр3.КодПоказателяПоСоставу;
			//	ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			//	ПризнакФормата = Стр3.ТипДанныхПоказателя;
			//	
			//	Если КодПоказателя="###" Тогда
			//		Продолжить;
			//	ИначеЕсли КодПоказателя="===" Тогда
			//		Прервать;	
			//	КонецЕсли;
			//	
			//	ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			//	Если Найти(ЧтоПроверять, "1") <> 0 Тогда
			//		
			//		Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, Ложь) = 1 Тогда
			//			ПустойРаздел = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	Если ВыводитьСообщения Тогда
			//		Сообщить(ПредставлениеОтчета + "Обязательный к заполнению " + ИмяРаздела + " пуст!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	СтатусПроверки = 1;
			//КонецЕсли;
			//конец проверки на пустой раздел
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	// Функция Проверки, можно использовать возвращенный массив с ошибками.
	ПроверкаВводаДанных(Истина, "");

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
	//Для Каждого Стр Из мСтруктураМногоСтраничныхРазделов Цикл
	//	ТекСтр = Стр.Значение;
	//	Если (ТекСтр.Количество() = 0) ИЛИ (ТекСтр.Количество() = 1 И ТекСтр.Получить(0).Данные = Неопределено) Тогда
	//		Если ТекСтр.Количество() = 0 Тогда
	//			НовСтр = ТекСтр.Добавить();
	//		Иначе
	//			НовСтр = ТекСтр.Получить(0);
	//		КонецЕсли;
	//		НовСтр.АктивнаяСтраница = Истина;
	//		ПокТекТабПоля = Неопределено;
	//		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Ключ, ПокТекТабПоля) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		НовСтр.Данные = РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля);
	//	Иначе
	//		НовСтр = ТекСтр.Получить(0);
	//		ПокТекТабПоля = Неопределено;
	//		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Ключ, ПокТекТабПоля) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		НовСтр.Данные = РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля);
	//	КонецЕсли;
	//КонецЦикла;
		
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	КонцыБлоков.Добавить("П002090007003");
	
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		Тек13Симв = Лев(Текст.ПолучитьСтроку(ТекИнд), 13);
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");
		КонецЕсли;
		
		Если Тек13Симв = "П002170001002" Тогда//обрезаем значение П002170001002 до 254 символов
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТЕкст.ПолучитьСтроку(ТекИнд), 13 + 1 + 254)));
		КонецЕсли;
		
		Если Тек13Симв = "П002090012003" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, РегламентированнаяОтчетность.СтрЗаменитьПробелы(ТЕкст.ПолучитьСтроку(ТекИнд)));
		КонецЕсли;
			
	КонецЦикла;
	
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок  - Сч + 1;
		Тек13Симв = Лев(Текст.ПолучитьСтроку(ТекИнд), 13);
		Если Тек13Симв = "П002080014001" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, "П002080014101:" + Сред(Текст.ПолучитьСтроку(ТекИнд), 15));
			Текст.ЗаменитьСтроку(ТекИнд + 1, "П002080014103:" + Сред(Текст.ПолучитьСтроку(ТекИнд + 1), 15));
		КонецЕсли;
	КонецЦикла;
	
	КолСтрок = Текст.КоличествоСтрок();
	БылП002090001003 = Ложь;
	БылП002080014101 = Ложь;
	НомерДляУдаления = -1;
	НомераДляУдаления = Новый Массив;
	БылП002090001003_9 = Ложь;
	БылП002090001003_15 = Ложь;
	
	Для Сч = 1 По КолСтрок Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Сч);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		//Если Тек13Симв = "П002090001003" Тогда
		//	Если Текст.ПолучитьСтроку(Сч + 2) = "П002090003003:9" И НЕ БылП002090001003_9 Тогда
		//		БылП002090001003_9 = Истина;
		//		Продолжить;
		//	КонецЕсли;
		//	Если Текст.ПолучитьСтроку(Сч + 2) = "П002090003003:15" И НЕ БылП002090001003_15 Тогда
		//		БылП002090001003_15 = Истина;
		//		Продолжить;
		//	КонецЕсли;
		//	Текст.УдалитьСтроку(Сч);//Если встретили во второй раз показатель П002090001003, то удаляем следующие 8 строк
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	Текст.УдалитьСтроку(Сч);
		//	КолСтрок = КолСтрок - 8;
		//КонецЕсли;
		
		Если Тек13Симв = "П002080001003" Тогда
			БылП002080014101 = Ложь;
		КонецЕсли;
		
		Если Тек13Симв = "П002080014101" И НЕ БылП002080014101 Тогда
			Текст.ЗаменитьСтроку(Сч, "П002080014001:" + Сред(Текст.ПолучитьСтроку(Сч), 15));
			Текст.ЗаменитьСтроку(Сч + 1, "П002080014003:" + Сред(Текст.ПолучитьСтроку(Сч + 1), 15));
			БылП002080014101 = Истина;
			НомерДляУдаления = Сч - 1;
			НомераДляУдаления.Добавить(НомерДляУдаления);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоУдаленных = 0;
	Для Каждого НомерДляУдаления ИЗ НомераДляУдаления Цикл
		Если НомерДляУдаления <> -1 Тогда
			Текст.УдалитьСтроку(НомерДляУдаления - КоличествоУдаленных);//удаляем ### перед П002080014001
			КоличествоУдаленных = КоличествоУдаленных + 1;
		КонецЕсли;
	КонецЦикла;
	Для Сч = 1 По КолСтрок Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Сч);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		
	КонецЦикла;
	
Конецпроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	
	//выводим сведения служебной части
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Орг, , , , мСохраненныйДок.КодИМНС)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим сведения об отправителе
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Орг, ПоказателиТитульный.ОргНазв, , ПоказателиТитульный.ОргБухгалтер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;

		КонецЦикла;

	КонецЦикла;
	
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Попытка
		НомСтраницы = 0;
		Для Каждого СтрПан Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			НомСтраницы = НомСтраницы + 1;
			Если СтрПан.Имя = Ячейка.Раздел Тогда
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СтрПан;
				ОсновнаяПанельПриСменеСтраницы(ЭлементыФормы.ОсновнаяПанель, НомСтраницы);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если Ячейка.Раздел = "ФизЛица" Тогда
		Попытка
			НС = РегламентированнаяОтчетность.роНомерСтраницыПоФИОФизЛица(ЭтаФорма, Ячейка.Страница);
			ПоказатьСтраницуМногостраничногоРаздела(НС - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = НС;
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			ПоказатьСтраницуМногостраничногоРаздела(Число(Ячейка.Страница) - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = Ячейка.Страница;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПолеТД = ЭлементыФормы["ПолеТабличногоДокумента" + Ячейка.Раздел];
	
	Попытка
		ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки);
		ИмяОбласти = Ячейка.ИмяЯчейки;
	Исключение
		
		Если (Ячейка.СтрокаПП <> Неопределено) И (НЕ (ПустаяСтрока(Ячейка.СтрокаПП))) Тогда
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
				ИмяОбласти = Ячейка.ИмяЯчейки + Ячейка.СтрокаПП;
			Исключение
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
					ИмяОбласти = Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП;
				Исключение
				КонецПопытки;
			КонецПопытки;
		Иначе
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "1");
				ИмяОбласти = Ячейка.ИмяЯчейки + "1";
			Исключение
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_1");
					ИмяОбласти = Ячейка.ИмяЯчейки + "_1";
				Исключение
					ПолеТД.ТекущаяОбласть = ПолеТД.Область(Ячейка.ИмяЯчейки);
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
	ТекущийЭлемент = ПолеТД;
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛист03_РазделАНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист03_РазделАНажатие

Процедура ПолеТабличногоДокументаЛист03_РазделАПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

КонецПроцедуры

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ПанельКЛисту03РазделБВПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ПанельКЛисту03РазделБВ.Страницы[ТекущаяСтраница].Имя;

	Если ИмяТекущейСтраницыПанели <> "Решения" Тогда

		Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мПанельДивидендов) Тогда

			СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(мПанельДивидендов);

		КонецЕсли;

		// необходимо показывать активную страницу, активного решения
		//АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения(ИмяТекущейСтраницыПанели,, Истина);
		//ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), ИмяТекущейСтраницыПанели);

		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);

		// управляем показом статика, отображающего номер текущей страницы
		ПоказатьСтатикРазделаРешений(ИмяТекущейСтраницыПанели);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Решения" Тогда

		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ1");
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения("Лист03_РазделыБВ2");
		мПанельДивидендов = "";

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели <> "Решения" Тогда
		мПанельДивидендов = ИмяТекущейСтраницыПанели;
	КонецЕсли;

КонецПроцедуры // ПанельКЛисту03РазделБВПриСменеСтраницы

// ПоказатьСоответствующиеСтраницы
//
// Показывает к решению, текущие страницы
//
Процедура ПоказатьСоответствующиеСтраницы()

	Если (мПанельДивидендов <> "загрузка")
	И (мПанельДивидендов <> "добавление")
	И (мПанельДивидендов <> "удаление")
	И (мПанельДивидендов <> "восстановление") Тогда
		// При активации решения, отобразим сразу активные листы к данном решению
		АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения("Лист03_РазделыБВ1",, Истина);
		ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), "Лист03_РазделыБВ1");
		ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ1");

		АктивнаяСтраница = ПолучитьАктивныйНомерСтраницыРешения("Лист03_РазделыБВ2",, Истина);
		ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Модуль(АктивнаяСтраница), "Лист03_РазделыБВ2");
		ПоказатьСтатикРазделаРешений("Лист03_РазделыБВ2");
	Иначе
		мПанельДивидендов = "";
	КонецЕсли;

КонецПроцедуры // ПоказатьСоответствующиеСтраницы

// ПоказатьСтатикРазделаРешений
//
Процедура ПоказатьСтатикРазделаРешений(ИмяСтраницы)

	ТекЛист = ПолучитьАктивныйНомерСтраницыРешения(ИмяСтраницы);

	ОбщееКолвоСтраниц = ПолучитьАктивныйНомерСтраницыРешения(ИмяСтраницы, Истина);

	ЭлементыФормы["НадписьСтатикСтраниц" + ИмяСтраницы].Заголовок = Строка(ТекЛист + 1) + " из " + Строка(ОбщееКолвоСтраниц);

	РегламентированнаяОтчетность.роДоступностьКнопокЛистания(ЭтаФорма, ТекЛист + 1, ОбщееКолвоСтраниц, ИмяСтраницы);

КонецПроцедуры // ПоказатьСтатикРазделаРешений

// ПоказатьСтраницуРешения
//
Процедура ПоказатьСтраницуРешения(ИмяСтраницы, Шаг)

	// Сохраним текущие данные в активной странице
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяСтраницы);

	ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
	ТекИндекс = Решения.Индекс(ТекСтрока);
	СтруктураДанных = Решения[ТекИндекс].Значение;
	МассивРешений = СтруктураДанных[ИмяСтраницы];

	// Т.к. порядковые номера идут не по порядку, то отталкиваемся от отрицательного значения

	//Сообщить(ВернутьНаименьшееЗначениеМассива(МассивРешений));

	МинМас = ВернутьНаименьшееЗначениеМассива(МассивРешений, Ложь); // получим значение
	МинМасИнд = ВернутьНаименьшееЗначениеМассива(МассивРешений, Истина); // получим индекс

	Если МинМас = 0 Тогда
		// Если ноль минимальный из значений, значит он активный и пользователь нажал вправо

		ОтображаемаяСтраница = МассивРешений[1];

	Иначе

		ОтображаемаяСтраница = МассивРешений[МинМасИнд + Шаг]

	КонецЕсли;

	ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ОтображаемаяСтраница, ИмяСтраницы);

	МассивРешений[МинМасИнд] = Модуль(МассивРешений[МинМасИнд]);
	МассивРешений[МинМасИнд + Шаг] = (-1) * МассивРешений[МинМасИнд + Шаг];

	ПоказатьСтатикРазделаРешений(ИмяСтраницы);

КонецПроцедуры // ПоказатьСтраницуРешения

// ПолучитьАктивныйНомерСтраницыРешения
//
// Параметры:
// ПолучитьОбщееКолвоСтраницВРазделе            - если ложь, то функция вернет
// общее кол-во листов к данному решению (к активному). Если Истина - то активный лист
// 
// ПолучитьТекИндексВМассиве                    - если ложь возвращается отрицательный номер, ссылка
// на ноер в структуре многостраничных разделов, ложь - порядковый номер внутри решений
//
Функция ПолучитьАктивныйНомерСтраницыРешения(ИмяСтраницы, ПолучитьОбщееКолвоСтраницВРазделе = Ложь, ПолучитьТекИндексВМассиве = Ложь)

	// Найдем текущую активную страницу, затем спозиционируемся на неё
	ТекСтрока = ЭлементыФормы.Решения.ТекущаяСтрока;
	ТекИндекс = Решения.Индекс(ТекСтрока);
	СтруктураДанных = Решения[ТекИндекс].Значение;
	МассивРешений = СтруктураДанных[ИмяСтраницы];

	Если ПолучитьОбщееКолвоСтраницВРазделе Тогда
		Возврат МассивРешений.Количество();
	КонецЕсли;

	ТекЛист = -100;
	Для Инд = 0 По МассивРешений.Количество() - 1 Цикл
		//активная страница либо 0 либо меньше 0 всегда
		Если ((МассивРешений[Инд] = 0) И (МассивРешений.Количество() = 1))
		Или ((МассивРешений[Инд] < 0) И (МассивРешений.Количество() >= 1))
		Тогда

			Если ПолучитьТекИндексВМассиве Тогда
				ТекЛист = МассивРешений[Инд];
			Иначе
				ТекЛист = Инд;
			КонецЕсли;

			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ТекЛист = -100 Тогда
		ТекЛист = 0;
	КонецЕсли;

	Возврат ТекЛист;

КонецФункции // ПолучитьАктивныйНомерСтраницыРешения

// ПолеТабличногоДокументаЛист04_РазделАВыбор
// Обработчик события "Выбор" для листа 04_РазделА
//
Процедура ПолеТабличногоДокументаЛист04_РазделАВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "П002100008003" Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить(9,"Ставка 9%");
		Список.Добавить(15,"Ставка 15%");
		// выдаем стандартный диалог
		СписокЭлемент = ВыбратьИзСписка(Список);
		Если СписокЭлемент <> Неопределено  Тогда
			Область.Значение = СписокЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист04_РазделАВыбор

Процедура ПолеТабличногоДокументаЛист03_РазделАВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "П002080008003" Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить(6,"Ставка 6%");
		Список.Добавить(9,"Ставка 9%");
		// выдаем стандартный диалог
		СписокЭлемент = ВыбратьИзСписка(Список);
		Если СписокЭлемент <> Неопределено  Тогда
			Область.Значение = СписокЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// ПолеТабличногоДокументаЛист03_РазделыБВ1Выбор
// Обработчик события "Выбор"
// Вызывается стандартная форма адреса, для выполнения требования 9 зпт
//
Процедура ПолеТабличногоДокументаЛист03_РазделыБВ1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "П002090009003") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресМНСЛист03РазделБВ1);

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "П002090009003" Тогда
				мАдресМНСЛист03РазделБВ1 = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мАдресМНСЛист03РазделБВ1 = ",,,,,,,,," Тогда
					мАдресМНСЛист03РазделБВ1 = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ1);

			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

	// Был код:
	//Если Область.Имя = "П002090009003" Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
	//	ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мРаздел3_БВ1.Области.П002090009003.Значение);

	//	Если ВводАдреса.ОткрытьМодально() Тогда
	//		мРаздел3_БВ1.Области.П002090009003.Значение = ВводАдреса.НачальноеЗначениеВыбора.Представление;
	//		Модифицированность = Истина;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03_РазделыБВ1Выбор

// ПолеТабличногоДокументаЛист03_РазделыБВ2Выбор
// Обработчик события "Выбор"
// Вызывается стандартная форма адреса, для выполнения требования 9 зпт
//
Процедура ПолеТабличногоДокументаЛист03_РазделыБВ2Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "П002090009003") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресМНСЛист03РазделБВ2);

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "П002090009003" Тогда
				мАдресМНСЛист03РазделБВ2 = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мАдресМНСЛист03РазделБВ2 = ",,,,,,,,," Тогда
					мАдресМНСЛист03РазделБВ2 = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресМНСЛист03РазделБВ2);

			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

	// Был код:
	//Если Область.Имя = "П002090009003" Тогда

	//	СтандартнаяОбработка = Ложь;
	//	ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
	//	ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мРаздел3_БВ2.Области.П002090009003.Значение);

	//	Если ВводАдреса.ОткрытьМодально() Тогда
	//		мРаздел3_БВ2.Области.П002090009003.Значение = ВводАдреса.НачальноеЗначениеВыбора.Представление;
	//		Модифицированность = Истина;
	//	КонецЕсли;

	//КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03_РазделыБВ2Выбор

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ПолеТабличногоДокументаРаздел1_4П001040001000ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел1_4П001040001000ПриИзменении(Элемент)

	Расчет("Раздел1_4");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_4П001040001000ПриИзменении

Процедура ПолеТабличногоДокументаЛист11_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "П002190005003") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		Список = Новый СписокЗначений;
		Список.Добавить("0.75","0,75");
		Список.Добавить("0.90","0,90");
		// выдаем стандартный диалог
		СписокЭлемент = ВыбратьИзСписка(Список);

		Если СписокЭлемент <> Неопределено  Тогда

			Область.Значение = ?(СписокЭлемент.Значение = "0.75", 0.75, 0.90);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2005Кв1";

мКодыБюджетнойКлассификации = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации.Колонки.Добавить("Код",,, 5);
мКодыБюджетнойКлассификации.Колонки.Добавить("Название");

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 19);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 39);

мКодыБюджетнойКлассификации2006 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Код",,, 19);
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Название",,, 39);

мПрибыльКодыВидовПоступлений = Новый ТаблицаЗначений;
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Код",,, 5);
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Название",,, 55);

мКодыКБК2005Раздел1_3 = Новый ТаблицаЗначений;
мКодыКБК2005Раздел1_3.Колонки.Добавить("Код",,, 19);
мКодыКБК2005Раздел1_3.Колонки.Добавить("Название",,, 39);

мКодыКБК2004Раздел1_3 = Новый ТаблицаЗначений;
мКодыКБК2004Раздел1_3.Колонки.Добавить("Код",,, 5);
мКодыКБК2004Раздел1_3.Колонки.Добавить("Название");

мКодыКБК2004Раздел1_4 = Новый ТаблицаЗначений;
мКодыКБК2004Раздел1_4.Колонки.Добавить("Код",,,5);
мКодыКБК2004Раздел1_4.Колонки.Добавить("Название");

мКодыКБК2005Раздел1_4 = Новый ТаблицаЗначений;
мКодыКБК2005Раздел1_4.Колонки.Добавить("Код",,, 19);
мКодыКБК2005Раздел1_4.Колонки.Добавить("Название",,, 39);

мПрил5аЛист02 = Новый ТаблицаЗначений;
мПрил5аЛист02.Колонки.Добавить("Код",,, 5);
мПрил5аЛист02.Колонки.Добавить("Значение");

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "";
НовСтрока.Значение = "Пустое значение";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "01";
НовСтрока.Значение = "Первый квартал";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "02";
НовСтрока.Значение = "Второй квартал";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "03";
НовСтрока.Значение = "Третий квартал";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "04";
НовСтрока.Значение = "Четвертый квартал";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "02";
НовСтрока.Значение = "Полугодие";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "03";
НовСтрока.Значение = "9 месяцев";

НовСтрока = мПрил5аЛист02.Добавить();
НовСтрока.Код= "04";
НовСтрока.Значение = "год";

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока4   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы10  = "П0021700010";
мИдГруппы3А  = "П0020800140";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы10 = 10;
КолИсхСтрокИдГруппы3А = 1;

// структура строк многострочного раздела на странице
СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("П002170001001", ОписаниеТиповСтрока4);
СтруктураГруппы10.Колонки.Добавить("П002170001002", ОписаниеТиповСтрока254);
СтруктураГруппы10.Колонки.Добавить("П002170001003", ОписаниеТиповСтрока15);
СтруктураГруппы10.Колонки.Добавить("П002170001004", ОписаниеТиповДата);
СтруктураГруппы10.Колонки.Добавить("П002170001005", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П002170001006", ОписаниеТиповДата);
СтруктураГруппы10.Колонки.Добавить("П002170001007", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П002170001008", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("П002170001009", ОписаниеТиповЧисло);

СтруктураГруппы3А = Новый ТаблицаЗначений;
СтруктураГруппы3А.Колонки.Добавить("П002080014001", ОписаниеТиповДата); // непосредственно дата
//СтруктураГруппы3А.Колонки.Добавить("П002080014001", ОписаниеТиповЧисло); // непосредственно дата
СтруктураГруппы3А.Колонки.Добавить("П002080014002", ОписаниеТиповЧисло); // номер строки
СтруктураГруппы3А.Колонки.Добавить("П002080014003", ОписаниеТиповЧисло); // сумма

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3А, СтруктураГруппы3А);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, КолИсхСтрокИдГруппы10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3А, КолИсхСтрокИдГруппы3А);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
ЦветАвто = Новый Цвет(0, 0, 0);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);



// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);


// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц ФизЛица
ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыФизЛиц.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", ТаблицаСтраницыФизЛиц);

// Элемент структуры - данные дополнительных страниц Раздела 1.3
ТаблицаСтраницыРаздела1_3 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела1_3.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3", ТаблицаСтраницыРаздела1_3);

// Элемент структуры - данные дополнительных страниц Раздела 1.4
ТаблицаСтраницыРаздела1_4 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела1_4.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_4", ТаблицаСтраницыРаздела1_4);

// Элемент структуры - данные дополнительных страниц Раздела 1.3
ТаблицаСтраницыРаздела2_5а = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела2_5а.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил5а", ТаблицаСтраницыРаздела2_5а);

ТаблицаСтраницыРаздела3А = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела3А.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделА", ТаблицаСтраницыРаздела3А);

// Элемент структуры - данные дополнительных страниц Лист03_РазделыБВ1 и 2
ТаблицаСтраницыРаздела3_БВ1 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела3_БВ1.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ1", ТаблицаСтраницыРаздела3_БВ1); // По ставке 6%

ТаблицаСтраницыРаздела3_БВ2 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела3_БВ2.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Лист03_РазделыБВ2", ТаблицаСтраницыРаздела3_БВ2); // По ставке 15%

// Элемент структуры - данные дополнительных страниц Раздела 4А
ТаблицаСтраницыРаздела4_А = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздела4_А.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
мСтруктураМногостраничныхРазделов.Вставить("Лист04_РазделА", ТаблицаСтраницыРаздела4_А);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
//мВерсияФормы = "01/03/2005"; // Первая версия.
//мВерсияФормы = "01/05/2005"; // Вторая, оптимизированная версия.
//мВерсияФормы = "02/05/2005"; // Третья версия, с расчетом раздела 1_4.
//мВерсияФормы = "02/12/2005"; // У строк 220 и 230 убран признак автозаполнения.
мВерсияФормы = "03/12/2005"; // Показатель П002100001003 убран признак 3

// Код отчета, равен КНД
мКодОтчета   = 1151050;

РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1_1");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00005", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151006";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ПРИБЫЛЬ ОРГАНИЗАЦИЙ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
